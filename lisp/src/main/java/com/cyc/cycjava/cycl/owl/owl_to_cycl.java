/**
 * Copyright (c) 1995 - 2019 Cycorp, Inc.  All rights reserved.
 */
package com.cyc.cycjava.cycl.owl;


import static com.cyc.cycjava.cycl.access_macros.register_external_symbol;
import static com.cyc.cycjava.cycl.api_control_vars.$the_cyclist$;
import static com.cyc.cycjava.cycl.assertions_high.gaf_arg;
import static com.cyc.cycjava.cycl.at_utilities.isas_and_genls_similarity;
import static com.cyc.cycjava.cycl.bindings.bindings_values;
import static com.cyc.cycjava.cycl.constant_handles.constant_p;
import static com.cyc.cycjava.cycl.constant_handles.reader_make_constant_shell;
import static com.cyc.cycjava.cycl.constant_handles.valid_constantP;
import static com.cyc.cycjava.cycl.constants_high.constant_name;
import static com.cyc.cycjava.cycl.constants_high.find_constant;
import static com.cyc.cycjava.cycl.constants_high.find_constant_by_guid_string;
import static com.cyc.cycjava.cycl.cyc_kernel.cyc_assert_wff;
import static com.cyc.cycjava.cycl.cycl_grammar.cycl_denotational_term_p;
import static com.cyc.cycjava.cycl.cycl_grammar.cycl_nat_p;
import static com.cyc.cycjava.cycl.cycl_grammar.cycl_term_p;
import static com.cyc.cycjava.cycl.cycl_utilities.expression_find;
import static com.cyc.cycjava.cycl.cycl_utilities.expression_find_if;
import static com.cyc.cycjava.cycl.cycl_utilities.expression_gather;
import static com.cyc.cycjava.cycl.cycl_utilities.expression_transform;
import static com.cyc.cycjava.cycl.cycl_utilities.formula_subst;
import static com.cyc.cycjava.cycl.cycl_utilities.hl_to_el;
import static com.cyc.cycjava.cycl.cycl_utilities.nat_arg1;
import static com.cyc.cycjava.cycl.cycl_utilities.nat_arity;
import static com.cyc.cycjava.cycl.cycl_utilities.nat_functor;
import static com.cyc.cycjava.cycl.czer_main.canonicalize_term;
import static com.cyc.cycjava.cycl.czer_main.cyc_find_or_create_nart;
import static com.cyc.cycjava.cycl.czer_meta.el_asserted_assertion_specP;
import static com.cyc.cycjava.cycl.date_utilities.indexical_now;
import static com.cyc.cycjava.cycl.date_utilities.parse_date_from_string_fast;
import static com.cyc.cycjava.cycl.deck.create_deck;
import static com.cyc.cycjava.cycl.deck.deck_pop;
import static com.cyc.cycjava.cycl.deck.deck_push;
import static com.cyc.cycjava.cycl.dictionary.clear_dictionary;
import static com.cyc.cycjava.cycl.dictionary.dictionary_contents;
import static com.cyc.cycjava.cycl.dictionary.dictionary_enter;
import static com.cyc.cycjava.cycl.dictionary.dictionary_lookup_without_values;
import static com.cyc.cycjava.cycl.dictionary.dictionary_p;
import static com.cyc.cycjava.cycl.dictionary.dictionary_remove;
import static com.cyc.cycjava.cycl.dictionary.new_dictionary;
import static com.cyc.cycjava.cycl.dictionary_contents.do_dictionary_contents_doneP;
import static com.cyc.cycjava.cycl.dictionary_contents.do_dictionary_contents_finalize;
import static com.cyc.cycjava.cycl.dictionary_contents.do_dictionary_contents_key_value;
import static com.cyc.cycjava.cycl.dictionary_contents.do_dictionary_contents_next;
import static com.cyc.cycjava.cycl.dictionary_contents.do_dictionary_contents_state;
import static com.cyc.cycjava.cycl.dictionary_utilities.dictionary_has_keyP;
import static com.cyc.cycjava.cycl.dictionary_utilities.dictionary_pushnew;
import static com.cyc.cycjava.cycl.dictionary_utilities.sort_dictionary_by_values;
import static com.cyc.cycjava.cycl.disjoint_with.any_disjoint_with_anyP;
import static com.cyc.cycjava.cycl.el_utilities.copy_expression;
import static com.cyc.cycjava.cycl.el_utilities.el_formula_p;
import static com.cyc.cycjava.cycl.el_utilities.make_binary_formula;
import static com.cyc.cycjava.cycl.el_utilities.make_el_formula;
import static com.cyc.cycjava.cycl.el_utilities.make_ternary_formula;
import static com.cyc.cycjava.cycl.file_utilities.file_existsP;
import static com.cyc.cycjava.cycl.format_nil.$format_nil_percent$;
import static com.cyc.cycjava.cycl.format_nil.format_nil_s_no_copy;
import static com.cyc.cycjava.cycl.formula_pattern_match.formula_matches_pattern;
import static com.cyc.cycjava.cycl.fort_types_interface.collection_p;
import static com.cyc.cycjava.cycl.fort_types_interface.isa_collectionP;
import static com.cyc.cycjava.cycl.fort_types_interface.isa_predicateP;
import static com.cyc.cycjava.cycl.forts.fort_p;
import static com.cyc.cycjava.cycl.function_terms.naut_to_nart;
import static com.cyc.cycjava.cycl.genls.all_genls;
import static com.cyc.cycjava.cycl.genls.count_all_specs;
import static com.cyc.cycjava.cycl.genls.genlP;
import static com.cyc.cycjava.cycl.genls.max_cols;
import static com.cyc.cycjava.cycl.genls.max_specs;
import static com.cyc.cycjava.cycl.genls.min_cols;
import static com.cyc.cycjava.cycl.genls.min_genls;
import static com.cyc.cycjava.cycl.hlmt.mt_union_mts;
import static com.cyc.cycjava.cycl.hlmt.mt_union_naut_p;
import static com.cyc.cycjava.cycl.html_utilities.decode_html_language_abbreviation;
import static com.cyc.cycjava.cycl.id_index.id_index_enter;
import static com.cyc.cycjava.cycl.id_index.id_index_lookup;
import static com.cyc.cycjava.cycl.id_index.id_index_p;
import static com.cyc.cycjava.cycl.id_index.id_index_reserve;
import static com.cyc.cycjava.cycl.id_index.new_id_index;
import static com.cyc.cycjava.cycl.inference.ask_utilities.query_template;
import static com.cyc.cycjava.cycl.inference.ask_utilities.query_variable;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_problem_store.destroy_problem_store;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_problem_store.new_problem_store;
import static com.cyc.cycjava.cycl.isa.isaP;
import static com.cyc.cycjava.cycl.isa.min_isa;
import static com.cyc.cycjava.cycl.iteration.iteration_next_without_values_macro_helper;
import static com.cyc.cycjava.cycl.kb_indexing_datastructures.indexed_term_p;
import static com.cyc.cycjava.cycl.kb_mapping_macros.destroy_final_index_iterator;
import static com.cyc.cycjava.cycl.kb_mapping_macros.do_gaf_arg_index_key_validator;
import static com.cyc.cycjava.cycl.kb_mapping_macros.new_final_index_iterator;
import static com.cyc.cycjava.cycl.kb_mapping_macros.new_gaf_arg_final_index_spec_iterator;
import static com.cyc.cycjava.cycl.kb_mapping_utilities.pred_u_v_holds_in_any_mt;
import static com.cyc.cycjava.cycl.kb_mapping_utilities.pred_values_in_any_mt;
import static com.cyc.cycjava.cycl.kb_utilities.compact_hl_external_id_string_p;
import static com.cyc.cycjava.cycl.kb_utilities.find_object_by_compact_hl_external_id_string;
import static com.cyc.cycjava.cycl.kb_utilities.find_object_by_hl_external_id_string;
import static com.cyc.cycjava.cycl.kb_utilities.hl_external_id_string_p;
import static com.cyc.cycjava.cycl.ke.ensure_cyclist_ok;
import static com.cyc.cycjava.cycl.ke.ke_assert_now;
import static com.cyc.cycjava.cycl.ke.ke_create_now;
import static com.cyc.cycjava.cycl.lexicon_accessors.denots_of_string;
import static com.cyc.cycjava.cycl.lexification_utilities.pluralize_word;
import static com.cyc.cycjava.cycl.list_utilities.alist_enter;
import static com.cyc.cycjava.cycl.list_utilities.alist_has_keyP;
import static com.cyc.cycjava.cycl.list_utilities.alist_lookup_without_values;
import static com.cyc.cycjava.cycl.list_utilities.doubletonP;
import static com.cyc.cycjava.cycl.list_utilities.empty_list_p;
import static com.cyc.cycjava.cycl.list_utilities.find_all;
import static com.cyc.cycjava.cycl.list_utilities.find_if_not;
import static com.cyc.cycjava.cycl.list_utilities.first_n;
import static com.cyc.cycjava.cycl.list_utilities.greater_length_p;
import static com.cyc.cycjava.cycl.list_utilities.lengthE;
import static com.cyc.cycjava.cycl.list_utilities.list_of_type_p;
import static com.cyc.cycjava.cycl.list_utilities.make_plist;
import static com.cyc.cycjava.cycl.list_utilities.nadd_to_end;
import static com.cyc.cycjava.cycl.list_utilities.non_dotted_list_p;
import static com.cyc.cycjava.cycl.list_utilities.non_empty_list_p;
import static com.cyc.cycjava.cycl.list_utilities.only_one;
import static com.cyc.cycjava.cycl.list_utilities.position_from_end;
import static com.cyc.cycjava.cycl.list_utilities.proper_list_p;
import static com.cyc.cycjava.cycl.list_utilities.randomize_list;
import static com.cyc.cycjava.cycl.list_utilities.remove_if_not;
import static com.cyc.cycjava.cycl.list_utilities.singletonP;
import static com.cyc.cycjava.cycl.list_utilities.sublisp_boolean;
import static com.cyc.cycjava.cycl.memoization_state.$memoization_state$;
import static com.cyc.cycjava.cycl.memoization_state.$memoized_item_not_found$;
import static com.cyc.cycjava.cycl.memoization_state.caching_results;
import static com.cyc.cycjava.cycl.memoization_state.caching_state_clear;
import static com.cyc.cycjava.cycl.memoization_state.caching_state_enter_multi_key_n;
import static com.cyc.cycjava.cycl.memoization_state.caching_state_get_zero_arg_results;
import static com.cyc.cycjava.cycl.memoization_state.caching_state_lookup;
import static com.cyc.cycjava.cycl.memoization_state.caching_state_put;
import static com.cyc.cycjava.cycl.memoization_state.caching_state_remove_function_results_with_args;
import static com.cyc.cycjava.cycl.memoization_state.caching_state_set_zero_arg_results;
import static com.cyc.cycjava.cycl.memoization_state.create_caching_state;
import static com.cyc.cycjava.cycl.memoization_state.create_global_caching_state_for_name;
import static com.cyc.cycjava.cycl.memoization_state.memoization_state_lock;
import static com.cyc.cycjava.cycl.memoization_state.memoization_state_lookup;
import static com.cyc.cycjava.cycl.memoization_state.memoization_state_original_process;
import static com.cyc.cycjava.cycl.memoization_state.memoization_state_possibly_clear_original_process;
import static com.cyc.cycjava.cycl.memoization_state.memoization_state_put;
import static com.cyc.cycjava.cycl.memoization_state.new_memoization_state;
import static com.cyc.cycjava.cycl.memoization_state.note_globally_cached_function;
import static com.cyc.cycjava.cycl.memoization_state.note_memoized_function;
import static com.cyc.cycjava.cycl.memoization_state.possibly_new_memoization_state;
import static com.cyc.cycjava.cycl.memoization_state.sxhash_calc_2;
import static com.cyc.cycjava.cycl.memoization_state.sxhash_calc_3;
import static com.cyc.cycjava.cycl.memoization_state.sxhash_calc_5;
import static com.cyc.cycjava.cycl.misc_utilities.initialized_p;
import static com.cyc.cycjava.cycl.misc_utilities.uninitialized;
import static com.cyc.cycjava.cycl.morphology.plural_nounP;
import static com.cyc.cycjava.cycl.mt_relevance_macros.$mt$;
import static com.cyc.cycjava.cycl.mt_relevance_macros.$relevant_mt_function$;
import static com.cyc.cycjava.cycl.mt_relevance_macros.$relevant_mts$;
import static com.cyc.cycjava.cycl.mt_relevance_macros.mt_function_eq;
import static com.cyc.cycjava.cycl.mt_relevance_macros.mt_info;
import static com.cyc.cycjava.cycl.mt_relevance_macros.relevant_mtP;
import static com.cyc.cycjava.cycl.mt_relevance_macros.update_inference_mt_relevance_function;
import static com.cyc.cycjava.cycl.mt_relevance_macros.update_inference_mt_relevance_mt;
import static com.cyc.cycjava.cycl.mt_relevance_macros.update_inference_mt_relevance_mt_list;
import static com.cyc.cycjava.cycl.mt_relevance_macros.with_inference_mt_relevance_validate;
import static com.cyc.cycjava.cycl.narts_high.find_nart;
import static com.cyc.cycjava.cycl.number_utilities.f_1X;
import static com.cyc.cycjava.cycl.number_utilities.f_1_;
import static com.cyc.cycjava.cycl.number_utilities.integer_percent;
import static com.cyc.cycjava.cycl.number_utilities.mean;
import static com.cyc.cycjava.cycl.numeral_parser.string_to_interval;
import static com.cyc.cycjava.cycl.obsolete.cnat_p;
import static com.cyc.cycjava.cycl.operation_communication.load_transcript_file;
import static com.cyc.cycjava.cycl.operation_communication.set_the_cyclist;
import static com.cyc.cycjava.cycl.pattern_match.tree_matches_pattern;
import static com.cyc.cycjava.cycl.query_utilities.new_cyc_query_from_indexicalized_kbq;
import static com.cyc.cycjava.cycl.queues.clear_queue;
import static com.cyc.cycjava.cycl.queues.create_queue;
import static com.cyc.cycjava.cycl.queues.dequeue;
import static com.cyc.cycjava.cycl.queues.enqueue;
import static com.cyc.cycjava.cycl.queues.queue_elements;
import static com.cyc.cycjava.cycl.queues.queue_find;
import static com.cyc.cycjava.cycl.queues.queue_find_if;
import static com.cyc.cycjava.cycl.queues.queue_size;
import static com.cyc.cycjava.cycl.rdf.rdf_utilities.download_rdf_url;
import static com.cyc.cycjava.cycl.rdf.rdf_utilities.rdf_name;
import static com.cyc.cycjava.cycl.rdf.rdf_utilities.rdfs_name;
import static com.cyc.cycjava.cycl.rkf_assertion_utilities.rkf_assert_with_implicature;
import static com.cyc.cycjava.cycl.rkf_term_utilities.create_new_constant;
import static com.cyc.cycjava.cycl.sbhl.sbhl_graphs.get_sbhl_graph_link;
import static com.cyc.cycjava.cycl.sbhl.sbhl_link_vars.$sbhl_link_direction$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_link_vars.$sbhl_link_generator$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_link_vars.$sbhl_link_mt$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_link_vars.$sbhl_link_tv$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_link_vars.get_sbhl_link_direction;
import static com.cyc.cycjava.cycl.sbhl.sbhl_link_vars.sbhl_node_object_p;
import static com.cyc.cycjava.cycl.sbhl.sbhl_link_vars.sbhl_randomize_lists_p;
import static com.cyc.cycjava.cycl.sbhl.sbhl_links.get_sbhl_mt_links;
import static com.cyc.cycjava.cycl.sbhl.sbhl_macros.get_sbhl_accessible_modules;
import static com.cyc.cycjava.cycl.sbhl.sbhl_marking_utilities.sbhl_mark_node_marked;
import static com.cyc.cycjava.cycl.sbhl.sbhl_marking_utilities.sbhl_search_path_termination_p;
import static com.cyc.cycjava.cycl.sbhl.sbhl_marking_vars.$sbhl_space$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_marking_vars.free_sbhl_marking_space;
import static com.cyc.cycjava.cycl.sbhl.sbhl_marking_vars.get_sbhl_marking_space;
import static com.cyc.cycjava.cycl.sbhl.sbhl_module_utilities.apply_sbhl_module_type_test;
import static com.cyc.cycjava.cycl.sbhl.sbhl_module_utilities.get_sbhl_add_node_to_result_test;
import static com.cyc.cycjava.cycl.sbhl.sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators;
import static com.cyc.cycjava.cycl.sbhl.sbhl_module_utilities.get_sbhl_module_type;
import static com.cyc.cycjava.cycl.sbhl.sbhl_module_utilities.get_sbhl_type_test;
import static com.cyc.cycjava.cycl.sbhl.sbhl_module_utilities.sbhl_search_direction_to_link_direction;
import static com.cyc.cycjava.cycl.sbhl.sbhl_module_vars.$sbhl_module$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_module_vars.get_sbhl_module;
import static com.cyc.cycjava.cycl.sbhl.sbhl_paranoia.$sbhl_type_error_action$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_paranoia.sbhl_cerror;
import static com.cyc.cycjava.cycl.sbhl.sbhl_paranoia.sbhl_error;
import static com.cyc.cycjava.cycl.sbhl.sbhl_paranoia.sbhl_object_type_checking_p;
import static com.cyc.cycjava.cycl.sbhl.sbhl_paranoia.sbhl_warn;
import static com.cyc.cycjava.cycl.sbhl.sbhl_paranoia.suspend_sbhl_type_checkingP;
import static com.cyc.cycjava.cycl.sbhl.sbhl_search_vars.$genl_inverse_mode_p$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_search_vars.$relevant_sbhl_tv_function$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_search_vars.$sbhl_add_node_to_result_test$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_search_vars.$sbhl_search_direction$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_search_vars.$sbhl_search_module$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_search_vars.$sbhl_search_module_type$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_search_vars.$sbhl_tv$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_search_vars.flip_genl_inverse_modeP;
import static com.cyc.cycjava.cycl.sbhl.sbhl_search_vars.get_sbhl_forward_search_direction;
import static com.cyc.cycjava.cycl.sbhl.sbhl_search_vars.get_sbhl_true_tv;
import static com.cyc.cycjava.cycl.sbhl.sbhl_search_vars.relevant_sbhl_tvP;
import static com.cyc.cycjava.cycl.sbhl.sbhl_search_vars.sbhl_true_tv_p;
import static com.cyc.cycjava.cycl.string_utilities.alphanumeric_stringP;
import static com.cyc.cycjava.cycl.string_utilities.char_subst;
import static com.cyc.cycjava.cycl.string_utilities.downcase_leading;
import static com.cyc.cycjava.cycl.string_utilities.empty_string_p;
import static com.cyc.cycjava.cycl.string_utilities.ends_with;
import static com.cyc.cycjava.cycl.string_utilities.first_char;
import static com.cyc.cycjava.cycl.string_utilities.last_char;
import static com.cyc.cycjava.cycl.string_utilities.list_of_string_p;
import static com.cyc.cycjava.cycl.string_utilities.non_empty_string_p;
import static com.cyc.cycjava.cycl.string_utilities.post_remove;
import static com.cyc.cycjava.cycl.string_utilities.remove_last_char;
import static com.cyc.cycjava.cycl.string_utilities.space_dont_uncapitalize;
import static com.cyc.cycjava.cycl.string_utilities.starts_with;
import static com.cyc.cycjava.cycl.string_utilities.strip_chars_meeting_test;
import static com.cyc.cycjava.cycl.string_utilities.strip_final_if_char;
import static com.cyc.cycjava.cycl.string_utilities.sub_phrases;
import static com.cyc.cycjava.cycl.string_utilities.substring;
import static com.cyc.cycjava.cycl.string_utilities.substringP;
import static com.cyc.cycjava.cycl.string_utilities.trim_whitespace;
import static com.cyc.cycjava.cycl.string_utilities.upcase_leading;
import static com.cyc.cycjava.cycl.string_utilities.whitespace_stringP;
import static com.cyc.cycjava.cycl.subl_macro_promotions.declare_defglobal;
import static com.cyc.cycjava.cycl.subl_promotions.elapsed_universal_time;
import static com.cyc.cycjava.cycl.subl_promotions.memberP;
import static com.cyc.cycjava.cycl.subl_promotions.non_negative_integer_p;
import static com.cyc.cycjava.cycl.subl_promotions.positive_integer_p;
import static com.cyc.cycjava.cycl.utilities_macros.$last_percent_progress_index$;
import static com.cyc.cycjava.cycl.utilities_macros.$last_percent_progress_prediction$;
import static com.cyc.cycjava.cycl.utilities_macros.$percent_progress_start_time$;
import static com.cyc.cycjava.cycl.utilities_macros.$progress_note$;
import static com.cyc.cycjava.cycl.utilities_macros.$progress_sofar$;
import static com.cyc.cycjava.cycl.utilities_macros.$progress_start_time$;
import static com.cyc.cycjava.cycl.utilities_macros.$progress_total$;
import static com.cyc.cycjava.cycl.utilities_macros.$silent_progressP$;
import static com.cyc.cycjava.cycl.utilities_macros.$within_noting_percent_progress$;
import static com.cyc.cycjava.cycl.utilities_macros.note_funcall_helper_function;
import static com.cyc.cycjava.cycl.utilities_macros.note_percent_progress;
import static com.cyc.cycjava.cycl.utilities_macros.noting_percent_progress_postamble;
import static com.cyc.cycjava.cycl.utilities_macros.noting_percent_progress_preamble;
import static com.cyc.cycjava.cycl.web_utilities.uri_p;
import static com.cyc.cycjava.cycl.wff.el_wff_assertibleP;
import static com.cyc.cycjava.cycl.wff.explain_why_not_wff_assert;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_colon;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_exclamation;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_hash;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_hyphen;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_period;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_slash;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_vertical;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.lower_case_p;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.upper_case_p;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.append;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.cons;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.list;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.listS;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.make_list;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.nth;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.set_nth;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.bind;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.currentBinding;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.rebind;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality.eql;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality.identity;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions.funcall;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.add;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.divide;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.multiply;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.subtract;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.truncate;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.PrintLow.format;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.cconcatenate;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.delete_duplicates;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.delete_if;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.find;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.find_if;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.length;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.nreverse;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.position;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.position_if;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.remove;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.remove_duplicates;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.remove_if;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.subseq;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Structures.def_csetf;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Structures.makeStructDeclNative;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Structures.register_method;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.boundp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.symbol_function;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads.$is_thread_performing_cleanupP$;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads.current_process;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads.sleep;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads.valid_process_p;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Time.get_universal_time;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.stringp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.sublisp_null;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.arg2;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.getValuesAsVector;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.multiple_value_list;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.nth_value_step_1;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.nth_value_step_2;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.resetMultipleValues;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.restoreValuesFromVector;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.values;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeBoolean;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeDouble;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeKeyword;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeString;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeSymbol;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeUninternedSymbol;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind.cdestructuring_bind_error;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind.destructuring_bind_must_consp;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.cadr;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.cddr;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.copy_list;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.getf;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.member;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.putf;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.second;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.set_difference;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.third;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.union;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high.$print_object_method_table$;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high.princ;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high.princ_to_string;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high.print;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.reader.bq_cons;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.reader.read_from_string_ignoring_errors;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.close;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.force_output;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.get_output_stream_string;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.make_private_string_output_stream;
import static com.cyc.tool.subl.util.SubLFiles.declareFunction;
import static com.cyc.tool.subl.util.SubLFiles.defconstant;
import static com.cyc.tool.subl.util.SubLFiles.deflexical;
import static com.cyc.tool.subl.util.SubLFiles.defparameter;

import org.armedbear.lisp.Lisp;

import com.cyc.cycjava.cycl.V12;
import com.cyc.cycjava.cycl.api_control_vars;
import com.cyc.cycjava.cycl.assertions_high;
import com.cyc.cycjava.cycl.at_utilities;
import com.cyc.cycjava.cycl.bindings;
import com.cyc.cycjava.cycl.constants_high;
import com.cyc.cycjava.cycl.cyc_kernel;
import com.cyc.cycjava.cycl.cycl_grammar;
import com.cyc.cycjava.cycl.cycl_utilities;
import com.cyc.cycjava.cycl.czer_main;
import com.cyc.cycjava.cycl.czer_meta;
import com.cyc.cycjava.cycl.date_utilities;
import com.cyc.cycjava.cycl.deck;
import com.cyc.cycjava.cycl.dictionary;
import com.cyc.cycjava.cycl.dictionary_contents;
import com.cyc.cycjava.cycl.dictionary_utilities;
import com.cyc.cycjava.cycl.disjoint_with;
import com.cyc.cycjava.cycl.file_utilities;
import com.cyc.cycjava.cycl.format_nil;
import com.cyc.cycjava.cycl.formula_pattern_match;
import com.cyc.cycjava.cycl.fort_types_interface;
import com.cyc.cycjava.cycl.forts;
import com.cyc.cycjava.cycl.function_terms;
import com.cyc.cycjava.cycl.genls;
import com.cyc.cycjava.cycl.hlmt;
import com.cyc.cycjava.cycl.isa;
import com.cyc.cycjava.cycl.iteration;
import com.cyc.cycjava.cycl.kb_accessors;
import com.cyc.cycjava.cycl.kb_mapping_macros;
import com.cyc.cycjava.cycl.kb_mapping_utilities;
import com.cyc.cycjava.cycl.kb_utilities;
import com.cyc.cycjava.cycl.ke;
import com.cyc.cycjava.cycl.lexicon_accessors;
import com.cyc.cycjava.cycl.lexification_utilities;
import com.cyc.cycjava.cycl.list_utilities;
import com.cyc.cycjava.cycl.memoization_state;
import com.cyc.cycjava.cycl.misc_utilities;
import com.cyc.cycjava.cycl.morphology;
import com.cyc.cycjava.cycl.mt_relevance_macros;
import com.cyc.cycjava.cycl.narts_high;
import com.cyc.cycjava.cycl.number_utilities;
import com.cyc.cycjava.cycl.numeral_parser;
import com.cyc.cycjava.cycl.obsolete;
import com.cyc.cycjava.cycl.operation_communication;
import com.cyc.cycjava.cycl.pattern_match;
import com.cyc.cycjava.cycl.process_utilities;
import com.cyc.cycjava.cycl.query_utilities;
import com.cyc.cycjava.cycl.queues;
import com.cyc.cycjava.cycl.rkf_assertion_utilities;
import com.cyc.cycjava.cycl.rkf_term_utilities;
import com.cyc.cycjava.cycl.set;
import com.cyc.cycjava.cycl.set_contents;
import com.cyc.cycjava.cycl.string_utilities;
import com.cyc.cycjava.cycl.subl_promotions;
import com.cyc.cycjava.cycl.term;
import com.cyc.cycjava.cycl.web_utilities;
import com.cyc.cycjava.cycl.wff;
import com.cyc.cycjava.cycl.xml_parsing_utilities;
import com.cyc.cycjava.cycl.inference.ask_utilities;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_problem_store;
import com.cyc.cycjava.cycl.rdf.rdf_utilities;
import com.cyc.cycjava.cycl.sbhl.sbhl_graphs;
import com.cyc.cycjava.cycl.sbhl.sbhl_link_vars;
import com.cyc.cycjava.cycl.sbhl.sbhl_links;
import com.cyc.cycjava.cycl.sbhl.sbhl_macros;
import com.cyc.cycjava.cycl.sbhl.sbhl_marking_utilities;
import com.cyc.cycjava.cycl.sbhl.sbhl_marking_vars;
import com.cyc.cycjava.cycl.sbhl.sbhl_module_utilities;
import com.cyc.cycjava.cycl.sbhl.sbhl_module_vars;
import com.cyc.cycjava.cycl.sbhl.sbhl_paranoia;
import com.cyc.cycjava.cycl.sbhl.sbhl_search_vars;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Filesys;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Guids;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sort;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.StreamsLow;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Strings;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLSpecialOperatorDeclarations;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLStructDecl;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLStructDeclNative;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLThread;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sxhash;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.UnaryFunction;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLList;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObject;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLProcess;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLString;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLStructNative;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLFloat;
import com.cyc.tool.subl.jrtl.nativeCode.type.symbol.SubLSymbol;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.compatibility;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.visitation;
import com.cyc.tool.subl.util.SubLFile;
import com.cyc.tool.subl.util.SubLFiles;
import com.cyc.tool.subl.util.SubLFiles.LispMethod;
import com.cyc.tool.subl.util.SubLTrampolineFile;
import com.cyc.tool.subl.util.SubLTranslatedFile;


/**
 * Copyright (c) 1995 - 2019 Cycorp, Inc.  All rights reserved.
 * module:      OWL-TO-CYCL
 * source file: /cyc/top/cycl/owl/owl-to-cycl.lisp
 * created:     2019/07/03 17:38:14
 */
public final class owl_to_cycl extends SubLTranslatedFile implements V12 {
    static private final SubLString $str_alt85$ = makeString("");

    public static final class $owl_pred_info_native extends SubLStructNative {
        public SubLStructDecl getStructDecl() {
            return structDecl;
        }

        public SubLObject getField2() {
            return com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_pred_info_native.this.$cyc_name;
        }

        public SubLObject getField3() {
            return com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_pred_info_native.this.$comment;
        }

        public SubLObject getField4() {
            return com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_pred_info_native.this.$domains;
        }

        public SubLObject getField5() {
            return com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_pred_info_native.this.$range;
        }

        public SubLObject getField6() {
            return com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_pred_info_native.this.$plist;
        }

        public SubLObject setField2(SubLObject value) {
            return com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_pred_info_native.this.$cyc_name = value;
        }

        public SubLObject setField3(SubLObject value) {
            return com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_pred_info_native.this.$comment = value;
        }

        public SubLObject setField4(SubLObject value) {
            return com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_pred_info_native.this.$domains = value;
        }

        public SubLObject setField5(SubLObject value) {
            return com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_pred_info_native.this.$range = value;
        }

        public SubLObject setField6(SubLObject value) {
            return com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_pred_info_native.this.$plist = value;
        }

        public SubLObject $cyc_name = Lisp.NIL;

        public SubLObject $comment = Lisp.NIL;

        public SubLObject $domains = Lisp.NIL;

        public SubLObject $range = Lisp.NIL;

        public SubLObject $plist = Lisp.NIL;

        private static final SubLStructDeclNative structDecl = makeStructDeclNative(com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_pred_info_native.class, OWL_PRED_INFO, OWL_PRED_INFO_P, $list_alt116, $list_alt117, new String[]{ "$cyc_name", "$comment", "$domains", "$range", "$plist" }, $list_alt118, $list_alt119, PRINT_OWL_PRED_INFO);
    }

    public static final SubLFile me = new owl_to_cycl();

 public static final String myName = "com.cyc.cycjava.cycl.owl.owl_to_cycl";


    // deflexical
    // Definitions
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $owl_importer_v1_version_number$ = makeSymbol("*OWL-IMPORTER-V1-VERSION-NUMBER*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $owl_importer$ = makeSymbol("*OWL-IMPORTER*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $owl_merge_mt$ = makeSymbol("*OWL-MERGE-MT*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $owl_term_names_preceded_by_id$ = makeSymbol("*OWL-TERM-NAMES-PRECEDED-BY-ID*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $owl_term_names_preceded_by_about$ = makeSymbol("*OWL-TERM-NAMES-PRECEDED-BY-ABOUT*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $owl_term_names_preceded_by_resource$ = makeSymbol("*OWL-TERM-NAMES-PRECEDED-BY-RESOURCE*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $owl_term_names_preceded_by_parse_type$ = makeSymbol("*OWL-TERM-NAMES-PRECEDED-BY-PARSE-TYPE*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $owl_definition_types$ = makeSymbol("*OWL-DEFINITION-TYPES*");

    // defparameter
    // :PROPERTY, :CLASS, :INSTANCE, :BNODE
    /**
     * :PROPERTY, :CLASS, :INSTANCE, :BNODE
     */
    @LispMethod(comment = ":PROPERTY, :CLASS, :INSTANCE, :BNODE\ndefparameter")
    private static final SubLSymbol $owl_definition_type$ = makeSymbol("*OWL-DEFINITION-TYPE*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $owl_definition_accumulator$ = makeSymbol("*OWL-DEFINITION-ACCUMULATOR*");

    // defparameter
    // The OE queue for the current thread, bound by IMPORT-OWL-ONTOLOGY.
    /**
     * The OE queue for the current thread, bound by IMPORT-OWL-ONTOLOGY.
     */
    @LispMethod(comment = "The OE queue for the current thread, bound by IMPORT-OWL-ONTOLOGY.\ndefparameter")
    private static final SubLSymbol $owl_oe_queue$ = makeSymbol("*OWL-OE-QUEUE*");

    // defparameter
    // Locally bound by IMPORT-OWL-ONTOLOGY.
    /**
     * Locally bound by IMPORT-OWL-ONTOLOGY.
     */
    @LispMethod(comment = "Locally bound by IMPORT-OWL-ONTOLOGY.\ndefparameter")
    private static final SubLSymbol $owl_import_parameters$ = makeSymbol("*OWL-IMPORT-PARAMETERS*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $default_owl_file_encoding$ = makeSymbol("*DEFAULT-OWL-FILE-ENCODING*");

    // defconstant
    @LispMethod(comment = "defconstant")
    public static final SubLSymbol $dtp_owl_pred_info$ = makeSymbol("*DTP-OWL-PRED-INFO*");

    // defconstant
    @LispMethod(comment = "defconstant")
    public static final SubLSymbol $dtp_owl_import_parameters$ = makeSymbol("*DTP-OWL-IMPORT-PARAMETERS*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $owl_reserved_namespaces$ = makeSymbol("*OWL-RESERVED-NAMESPACES*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $owl_spec_properties$ = makeSymbol("*OWL-SPEC-PROPERTIES*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $owl_force_new_term_creationP$ = makeSymbol("*OWL-FORCE-NEW-TERM-CREATION?*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $owl_allow_find_via_creationP$ = makeSymbol("*OWL-ALLOW-FIND-VIA-CREATION?*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $cyc_properties_to_not_import$ = makeSymbol("*CYC-PROPERTIES-TO-NOT-IMPORT*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $owl_found_terms$ = makeSymbol("*OWL-FOUND-TERMS*");

    // deflexical
    /**
     * A marker enqueued when an OE queue is created. Each time we process it, we
     * know we've gone through the queue once.
     */
    @LispMethod(comment = "A marker enqueued when an OE queue is created. Each time we process it, we\r\nknow we\'ve gone through the queue once.\ndeflexical\nA marker enqueued when an OE queue is created. Each time we process it, we\nknow we\'ve gone through the queue once.")
    private static final SubLSymbol $owl_oe_queue_marker$ = makeSymbol("*OWL-OE-QUEUE-MARKER*");

    // deflexical
    /**
     * A marker enqueued when the slurper decides it's not going to add anything
     * more the the queue.
     */
    @LispMethod(comment = "A marker enqueued when the slurper decides it\'s not going to add anything\r\nmore the the queue.\ndeflexical\nA marker enqueued when the slurper decides it\'s not going to add anything\nmore the the queue.")
    private static final SubLSymbol $owl_oe_queue_end_marker$ = makeSymbol("*OWL-OE-QUEUE-END-MARKER*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $create_anonymous_owl_termsP$ = makeSymbol("*CREATE-ANONYMOUS-OWL-TERMS?*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $owl_restriction_collection_templates$ = makeSymbol("*OWL-RESTRICTION-COLLECTION-TEMPLATES*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $owl_term_from_specification_depth$ = makeSymbol("*OWL-TERM-FROM-SPECIFICATION-DEPTH*");

    // defconstant
    @LispMethod(comment = "defconstant")
    public static final SubLSymbol $dtp_owl_term_info$ = makeSymbol("*DTP-OWL-TERM-INFO*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $owl_interval_datatypes$ = makeSymbol("*OWL-INTERVAL-DATATYPES*");

    // defconstant
    @LispMethod(comment = "defconstant")
    public static final SubLSymbol $dtp_owl_importer$ = makeSymbol("*DTP-OWL-IMPORTER*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $sweet_root$ = makeSymbol("*SWEET-ROOT*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $sweet_ontologies$ = makeSymbol("*SWEET-ONTOLOGIES*");

    // Internal Constants
    @LispMethod(comment = "Internal Constants")
    static private final SubLSymbol $sym0$_OWL_IMPORTER_V1_VERSION_NUMBER_ = makeSymbol("*OWL-IMPORTER-V1-VERSION-NUMBER*");

    private static final SubLString $str2$_Revision__138034__ = makeString("$Revision: 138034 $");

    private static final SubLSymbol LIST_OF_STRING_P = makeSymbol("LIST-OF-STRING-P");

    static private final SubLSymbol $sym7$_ = makeSymbol(">");

    private static final SubLObject $$OWLOntologyQuery_GetRootClasses = reader_make_constant_shell("OWLOntologyQuery-GetRootClasses");



    static private final SubLSymbol $sym10$TERM_OF_SOME_OWL_ONTOLOGY__VIA_INDEX = makeSymbol("TERM-OF-SOME-OWL-ONTOLOGY?-VIA-INDEX");



    private static final SubLObject $const14$owl_Ontology = reader_make_constant_shell("owl:Ontology");

    private static final SubLObject $const15$owl_imports = reader_make_constant_shell("owl:imports");



    private static final SubLString $str17$Can_t_find_path_from__S_to___Thin = makeString("Can't find path from ~S to #$Thing.");

    private static final SubLString $str24$_A_is_not_a__A = makeString("~A is not a ~A");

    private static final SubLString $$$continue_anyway = makeString("continue anyway");

    private static final SubLString $str29$_A_is_not_a_valid__sbhl_type_erro = makeString("~A is not a valid *sbhl-type-error-action* value");



    private static final SubLString $str31$_A_is_neither_SET_P_nor_LISTP_ = makeString("~A is neither SET-P nor LISTP.");

    private static final SubLString $str32$attempting_to_bind_direction_link = makeString("attempting to bind direction link variable, to NIL. macro body not executed.");

    private static final SubLString $str33$Node__a_does_not_pass_sbhl_type_t = makeString("Node ~a does not pass sbhl-type-test ~a~%");







    private static final SubLSymbol MEMOIZED_COUNT_ALL_SPECS = makeSymbol("MEMOIZED-COUNT-ALL-SPECS");

    private static final SubLSymbol $sym38$ISA_COLLECTION_ = makeSymbol("ISA-COLLECTION?");



    private static final SubLSymbol LONGEST_ACYCLIC_GENLS_PATH_INTERNAL = makeSymbol("LONGEST-ACYCLIC-GENLS-PATH-INTERNAL");

    private static final SubLSymbol OWL_MIN_GENLS_MEMOIZED = makeSymbol("OWL-MIN-GENLS-MEMOIZED");

    private static final SubLString $$$Of = makeString("Of");

    private static final SubLList $list49 = list(new SubLObject[]{ makeString("UnknownOrganization"), makeString("FinancialOrganization"), makeString("GovernmentalOrganization"), makeString("EducationResearchOrganization"), makeString("MilitaryOrganization"), makeString("Organization"), makeString("NGO"), makeString("PoliticalOrganization"), makeString("ReligiousOrganization"), makeString("ResidentialBuilding"), makeString("EmbassyBuilding"), makeString("MinistryBuilding"), makeString("ShoppingMall"), makeString("Road"), makeString("Bridge"), makeString("Hospital"), makeString("TrainingCamp"), makeString("Park"), makeString("ReligousFacility"), makeString("Stadium"), makeString("OfficeBuilding"), makeString("IndustrialFacility"), makeString("EducationalInstitution"), makeString("CivicStructure"), makeString("Airport"), makeString("Hideout"), makeString("Kidnapping"), makeString("Arrest"), makeString("HostageTaking"), makeString("Uncovering"), makeString("Sneaking"), makeString("FailedTerrorPlot"), makeString("Assasination"), makeString("Execution"), makeString("ConflictEvent"), makeString("TerroristAttack"), makeString("Killing"), makeString("CoupAttempt"), makeString("Bombing"), makeString("CitizenPeopleGroup"), makeString("CivilianPeopleGroup"), makeString("Agent"), makeString("Event"), makeString("MinistryOfCulture"), makeString("Ministry"), makeString("Location"), makeString("Insurgent"), makeString("Citizen"), makeString("CivilianPerson"), makeString("HighSchool"), makeString("University"), makeString("Funeral"), makeString("Wedding"), makeString("CivilianEvent"), makeString("UnknownPeopleGroup"), makeString("PeopleGroup"), makeString("MilitaryEvent"), makeString("GovernmentalEvent"), makeString("SocioReligousEvent"), makeString("BookOrManifesto"), makeString("Bank"), makeString("Company"), makeString("CapitalCity"), makeString("City"), makeString("GeneralElection"), makeString("repeatingEvent"), makeString("Election"), makeString("Synagogue"), makeString("Mosque"), makeString("Church"), makeString("Temple"), makeString("departureLocation"), makeString("GeopoliticalLocation"), makeString("destination"), makeString("UnknownPerson"), makeString("GovernmentalPerson"), makeString("Person"), makeString("affiliatedWith"), makeString("PowerPlant"), makeString("NavalFacility"), makeString("NuclearFacility"), makeString("SuicideBombing"), makeString("Anniversary"), makeString("Group"), makeString("numberOfGrupMembers"), makeString("PoliticalParty"), makeString("TerroristOrganization"), makeString("State"), makeString("Country"), makeString("Province"), makeString("InsurgentPeopleGroup"), makeString("GovernmentalPeopleGroup"), makeString("Embassy"), makeString("MilitaryPerson"), makeString("War"), makeString("MilitaryPeopleGroup"), makeString("hasSpokesman"), makeString("isSpokesmanFor"), makeString("hasMember"), makeString("ideologistFor"), makeString("hasIdeologist"), makeString("husbandOf"), makeString("spouseOf"), makeString("wifeOf"), makeString("hasSubevent"), makeString("cityInCountry"), makeString("hasCity"), makeString("presentAt"), makeString("hasAttendant"), makeString("hasFollower"), makeString("followerOf"), makeString("chiefOf"), makeString("hasChief"), makeString("leaderOf"), makeString("memberOf"), makeString("hasDirector"), makeString("directorOf"), makeString("provinceInCountry"), makeString("hasProvince"), makeString("acquiredNationality"), makeString("victimOf"), makeString("hasVictim"), makeString("isPressSecretaryFor"), makeString("hasPressSecretary"), makeString("cousinOf"), makeString("familyRelativeOf"), makeString("subEventOf"), makeString("hasActor"), makeString("isActorOf"), makeString("hasChairman"), makeString("hasLeader"), makeString("isChairmanOf"), makeString("organizerOf"), makeString("organizedBy"), makeString("capitalCityInCountry"), makeString("hasCapitalCity"), makeString("childOf"), makeString("parentOf"), makeString("hasMilitant"), makeString("militantOf"), makeString("countryInState"), makeString("stateInCountry"), makeString("isPrimeMiniterOf"), makeString("hasPrimeMinister"), makeString("contactedBy"), makeString("contacts"), makeString("placeOfBirth"), makeString("residesIn"), makeString("killedAt"), makeString("hasPeopleKilled"), makeString("financedBy"), makeString("financierOf"), makeString("hasWounded"), makeString("woundedAt"), makeString("hasState"), makeString("isTargetOf"), makeString("hasTarget"), makeString("founderOf"), makeString("foundedBy"), makeString("arrestedAt"), makeString("hasPeopleArrested"), makeString("hasAuthor"), makeString("authorOf"), makeString("hasLocation"), makeString("locatedIn"), makeString("funderOf"), makeString("fundedBy"), makeString("isEventLocation"), makeString("locationOfEvent"), makeString("bornNationality"), makeString("employeeOf"), makeString("hasEmployee"), makeString("hasSuborganization"), makeString("subOrganizationOf"), makeString("happensAtPlace"), makeString("hasPart"), makeString("isPartOf"), makeString("contents"), makeString("startDateOfDuty"), makeString("occurenceTimeOfDate"), makeString("wikipediaEnrty"), makeString("currentOrganizationStatus"), makeString("langitude"), makeString("internationalOrganization"), makeString("eventTitles"), makeString("name"), makeString("damage"), makeString("endDateDuty"), makeString("numberHostages"), makeString("numberKilled"), makeString("publicName"), makeString("dateBirth"), makeString("currentPersonStatus"), makeString("dateArrested"), makeString("biography"), makeString("dateOfQuote"), makeString("lastName"), makeString("newsArticleId"), makeString("associatedKeywords"), makeString("filename"), makeString("startDate"), makeString("eventDate"), makeString("acronym"), makeString("firstName"), makeString("numberArrested"), makeString("recurrence"), makeString("currentlyInCharge"), makeString("homepage"), makeString("numberInjured"), makeString("picture"), makeString("endDate"), makeString("otherGivenNames"), makeString("associatedAlerts"), makeString("associatedNewsArticles"), makeString("size"), makeString("purpose"), makeString("dateDeath"), makeString("newsResource"), makeString("zipCode"), makeString("occurrenceDate"), makeString("associatedTitles"), makeString("foundationDate"), makeString("religion"), makeString("duration"), makeString("description"), makeString("email"), makeString("clusterId"), makeString("idEMM"), makeString("address"), makeString("maritalStatus"), makeString("occupation"), makeString("latitude"), makeString("title"), makeString("language"), makeString("colleagueOf"), makeString("siblingOf"), makeString("housemateOf"), makeString("friendOf"), makeString("gender"), makeString("areasOfOperation") });

    private static final SubLList $list50 = list(new SubLObject[]{ makeString("Bridge"), makeString("Citizen"), makeString("Airport"), makeString("Arrest"), makeString("ReligousFacility"), makeString("Bombing"), makeString("Election"), makeString("Sneaking"), makeString("BookOrManifesto"), makeString("Hideout"), makeString("Hospital"), makeString("HostageTaking"), makeString("Wedding"), makeString("GovernmentalPerson"), makeString("Park"), makeString("OfficeBuilding"), makeString("TrainingCamp"), makeString("NGO"), makeString("Church"), makeString("NavalFacility"), makeString("GovernmentalEvent"), makeString("Killing"), makeString("CivilianPeopleGroup"), makeString("NuclearFacility"), makeString("Company"), makeString("MinistryBuilding"), makeString("CivilianEvent"), makeString("University"), makeString("CoupAttempt"), makeString("Uncovering"), makeString("PeopleGroup"), makeString("TerroristOrganization"), makeString("PoliticalOrganization"), makeString("EmbassyBuilding"), makeString("MilitaryOrganization"), makeString("ReligiousOrganization"), makeString("Stadium"), makeString("EducationalInstitution"), makeString("EducationResearchOrganization"), makeString("Temple"), makeString("IndustrialFacility"), makeString("Country"), makeString("Province"), makeString("Mosque"), makeString("Execution"), makeString("Road"), makeString("FailedTerrorPlot"), makeString("SocioReligousEvent"), makeString("Assasination"), makeString("TerroristAttack"), makeString("GovernmentalOrganization"), makeString("ShoppingMall"), makeString("Ministry"), makeString("CivilianPerson"), makeString("CivicStructure"), makeString("FinancialOrganization"), makeString("hasCity"), makeString("wifeOf"), makeString("hasIdeologist"), makeString("departureLocation"), makeString("memberOf"), makeString("hasAttendant"), makeString("stateInCountry"), makeString("hasPeopleKilled"), makeString("hasLeader"), makeString("hasTarget"), makeString("destination"), makeString("City"), makeString("GeopoliticalLocation"), makeString("militantOf"), makeString("hasVictim"), makeString("hasProvince"), makeString("foundedBy"), makeString("locationOfEvent"), makeString("hasPressSecretary"), makeString("followerOf"), makeString("directorOf"), makeString("woundedAt"), makeString("isSpokesmanFor"), makeString("organizedBy"), makeString("hasCapitalCity"), makeString("hasPeopleArrested"), makeString("spouseOf"), makeString("isChairmanOf"), makeString("leaderOf"), makeString("contacts"), makeString("hasMember"), makeString("financierOf"), makeString("hasState"), makeString("hasEmployee"), makeString("authorOf"), makeString("hasPrimeMinister"), makeString("affiliatedWith"), makeString("hasChief"), makeString("isActorOf"), makeString("parentOf"), makeString("fundedBy"), makeString("CapitalCity"), makeString("ConflictEvent"), makeString("MilitaryEvent"), makeString("Agent"), makeString("Event"), makeString("repeatingEvent"), makeString("numberOfGrupMembers"), makeString("eventDate"), makeString("Location"), makeString("Organization"), makeString("Person"), makeString("subOrganizationOf"), makeString("isPartOf"), makeString("locatedIn"), makeString("familyRelativeOf") });

    static private final SubLList $list51 = list(new SubLObject[]{ makeString("Insurgent"), makeString("Funeral"), makeString("CivilianPeopleGroup"), makeString("PowerPlant"), makeString("NavalFacility"), makeString("Bank"), makeString("HighSchool"), makeString("PoliticalParty"), makeString("Church"), makeString("Synagogue"), makeString("Temple"), makeString("CivilianEvent"), makeString("GovernmentalEvent"), makeString("MilitaryEvent"), makeString("Bombing"), makeString("CoupAttempt"), makeString("Execution"), makeString("Uncovering"), makeString("Arrest"), makeString("FailedTerrorPlot"), makeString("Killing"), makeString("Assasination"), makeString("HostageTaking"), makeString("Kidnapping"), makeString("TrainingCamp"), makeString("IndustrialFacility"), makeString("Park"), makeString("MinistryBuilding"), makeString("ResidentialBuilding"), makeString("Stadium"), makeString("Hideout"), makeString("OfficeBuilding"), makeString("Airport"), makeString("EducationalInstitution"), makeString("EmbassyBuilding"), makeString("ReligousFacility"), makeString("Bridge"), makeString("Road"), makeString("Hospital"), makeString("Embassy"), makeString("GovernmentalPeopleGroup"), makeString("GovernmentalPerson"), makeString("UnknownPerson"), makeString("GeopoliticalLocation"), makeString("ReligiousOrganization"), makeString("UnknownOrganization"), makeString("MilitaryOrganization"), makeString("NGO"), makeString("GovernmentalOrganization"), makeString("PoliticalOrganization"), makeString("EducationResearchOrganization"), makeString("cousinOf"), makeString("husbandOf"), makeString("ideologistFor"), makeString("cityInCountry"), makeString("presentAt"), makeString("killedAt"), makeString("isTargetOf"), makeString("Sneaking"), makeString("hasMilitant"), makeString("TerroristOrganization"), makeString("victimOf"), makeString("Province"), makeString("provinceInCountry"), makeString("founderOf"), makeString("isEventLocation"), makeString("isPressSecretaryFor"), makeString("hasFollower"), makeString("hasDirector"), makeString("hasWounded"), makeString("hasSpokesman"), makeString("organizerOf"), makeString("CapitalCity"), makeString("hasCity"), makeString("capitalCityInCountry"), makeString("arrestedAt"), makeString("spouseOf"), makeString("hasChairman"), makeString("contactedBy"), makeString("memberOf"), makeString("financedBy"), makeString("State"), makeString("Country"), makeString("stateInCountry"), makeString("hasMember"), makeString("employeeOf"), makeString("BookOrManifesto"), makeString("hasAuthor"), makeString("isPrimeMiniterOf"), makeString("hasLeader"), makeString("chiefOf"), makeString("hasActor"), makeString("childOf"), makeString("funderOf"), makeString("damage"), makeString("ConflictEvent"), makeString("name"), makeString("Group"), makeString("Event"), makeString("Agent"), makeString("colleagueOf"), makeString("hasSuborganization"), makeString("siblingOf"), makeString("City"), makeString("hasPart"), makeString("CivicStructure"), makeString("hasLocation"), makeString("housemateOf"), makeString("familyRelativeOf"), makeString("friendOf"), makeString("Person"), makeString("Location"), makeString("affiliatedWith"), makeString("Organization") });

    static private final SubLList $list52 = list(makeString("Collection"));

    static private final SubLList $list53 = list(makeKeyword("PROPERTY"), makeKeyword("CLASS"), makeKeyword("INSTANCE"), makeKeyword("BNODE"));

    private static final SubLSymbol INITIALIZED_P = makeSymbol("INITIALIZED-P");

    private static final SubLSymbol $sym55$_EXIT = makeSymbol("%EXIT");

    private static final SubLSymbol OWL_DEFINITION_NAME = makeSymbol("OWL-DEFINITION-NAME");

    private static final SubLString $str58$_S_is_not_a_valid_definition_type = makeString("~S is not a valid definition type. Must be one of ~S");

    private static final SubLSymbol IMPORT_OWL_ONTOLOGY = makeSymbol("IMPORT-OWL-ONTOLOGY");

    private static final SubLList $list60 = list(makeKeyword("URI"), makeKeyword("CONSTANT-PREFIX"), makeKeyword("SOURCE"), makeKeyword("ONTOLOGY"), makeKeyword("QUOTED-ISA"), makeKeyword("CYCLIST"), makeKeyword("PREFIX-EXTERNAL-NAMES?"), makeKeyword("ABBREVIATE-PREFIXES?"));

    private static final SubLSymbol $kw69$PREFIX_EXTERNAL_NAMES_ = makeKeyword("PREFIX-EXTERNAL-NAMES?");

    private static final SubLSymbol $kw70$ABBREVIATE_PREFIXES_ = makeKeyword("ABBREVIATE-PREFIXES?");

    private static final SubLString $str71$Can_only_import_OWL_ontologies_fr = makeString("Can only import OWL ontologies from valid files or URLs.");

    private static final SubLSymbol URI_P = makeSymbol("URI-P");

    private static final SubLSymbol XML_TOKENS_FROM_FILE = makeSymbol("XML-TOKENS-FROM-FILE");

    private static final SubLString $str77$Unable_to_open__S = makeString("Unable to open ~S");

    private static final SubLSymbol $sym78$WHITESPACE_STRING_ = makeSymbol("WHITESPACE-STRING?");

    private static final SubLSymbol $xml_tokens_from_file_caching_state$ = makeSymbol("*XML-TOKENS-FROM-FILE-CACHING-STATE*");



    private static final SubLString $str81$__Importing__S_from__S_____ = makeString("~&Importing ~S from ~S...~%");

    private static final SubLString $str83$Processing__D_class_definition__P = makeString("Processing ~D class definition~:P...");

    private static final SubLString $str85$Processing__D_instance_definition = makeString("Processing ~D instance definition~:P...");

    private static final SubLString $str86$utf_8 = makeString("utf-8");

    private static final SubLString $str87$_xml = makeString("?xml");

    private static final SubLString $$$encoding = makeString("encoding");

    private static final SubLString $str89$OWLImport_ = makeString("OWLImport-");

    private static final SubLList $list90 = list(reader_make_constant_shell("ImportingAnOWLFileIntoAKnowledgeBase"));



    private static final SubLString $str92$ = makeString("");









    private static final SubLString $$$Ontology = makeString("Ontology");

    private static final SubLString $$$RDF = makeString("RDF");

    private static final SubLList $list100 = cons(makeSymbol("ELEMENT-NAME"), makeSymbol("ATTRIBUTES"));

    private static final SubLList $list101 = cons(makeSymbol("ATTRIBUTE-NAME"), makeSymbol("VALUE"));

    private static final SubLString $$$base = makeString("base");

    private static final SubLString $str103$Can_t_recognize_alleged_base_URI_ = makeString("Can't recognize alleged base URI ~S as a URI.");

    private static final SubLSymbol OWL_IMPORT_PARAMETERS_ONTOLOGY_CONTEXT = makeSymbol("OWL-IMPORT-PARAMETERS-ONTOLOGY-CONTEXT");

    private static final SubLSymbol $owl_import_parameters_ontology_context_caching_state$ = makeSymbol("*OWL-IMPORT-PARAMETERS-ONTOLOGY-CONTEXT-CACHING-STATE*");



    private static final SubLString $str107$Expected_ontology_token__got__S = makeString("Expected ontology token, got ~S");

    private static final SubLString $str108$Couldn_t_find_closing_Ontology_ta = makeString("Couldn't find closing Ontology tag.~% ~S");

    private static final SubLString $$$comment = makeString("comment");

    private static final SubLString $str111$Expecting_comment__got__S = makeString("Expecting comment, got ~S");

    private static final SubLObject $const112$rdfs_comment = reader_make_constant_shell("rdfs:comment");

    private static final SubLString $$$label = makeString("label");

    private static final SubLString $$$lang = makeString("lang");



    private static final SubLString $str116$Expecting_label__got__S = makeString("Expecting label, got ~S");

    private static final SubLString $$$priorVersion = makeString("priorVersion");

    private static final SubLString $$$about = makeString("about");

    private static final SubLObject $const119$owl_priorVersion = reader_make_constant_shell("owl:priorVersion");

    private static final SubLString $$$imports = makeString("imports");

    private static final SubLString $$$versionInfo = makeString("versionInfo");

    private static final SubLString $str122$Don_t_know_how_to_handle_ontology = makeString("Don't know how to handle ontology info from ~S");

    private static final SubLSymbol OWL_PRED_INFO = makeSymbol("OWL-PRED-INFO");

    private static final SubLSymbol OWL_PRED_INFO_P = makeSymbol("OWL-PRED-INFO-P");

    private static final SubLList $list125 = list(makeSymbol("CYC-NAME"), makeSymbol("COMMENT"), makeSymbol("DOMAINS"), makeSymbol("RANGE"), makeSymbol("PLIST"));

    private static final SubLList $list126 = list(makeKeyword("CYC-NAME"), makeKeyword("COMMENT"), makeKeyword("DOMAINS"), makeKeyword("RANGE"), makeKeyword("PLIST"));

    private static final SubLList $list127 = list(makeSymbol("OPI-CYC-NAME"), makeSymbol("OPI-COMMENT"), makeSymbol("OPI-DOMAINS"), makeSymbol("OPI-RANGE"), makeSymbol("OPI-PLIST"));

    private static final SubLList $list128 = list(makeSymbol("_CSETF-OPI-CYC-NAME"), makeSymbol("_CSETF-OPI-COMMENT"), makeSymbol("_CSETF-OPI-DOMAINS"), makeSymbol("_CSETF-OPI-RANGE"), makeSymbol("_CSETF-OPI-PLIST"));

    private static final SubLSymbol PRINT_OWL_PRED_INFO = makeSymbol("PRINT-OWL-PRED-INFO");

    private static final SubLSymbol OWL_PRED_INFO_PRINT_FUNCTION_TRAMPOLINE = makeSymbol("OWL-PRED-INFO-PRINT-FUNCTION-TRAMPOLINE");

    private static final SubLList $list131 = list(makeSymbol("OPTIMIZE-FUNCALL"), makeSymbol("OWL-PRED-INFO-P"));

    private static final SubLSymbol OPI_CYC_NAME = makeSymbol("OPI-CYC-NAME");

    private static final SubLSymbol _CSETF_OPI_CYC_NAME = makeSymbol("_CSETF-OPI-CYC-NAME");

    private static final SubLSymbol OPI_COMMENT = makeSymbol("OPI-COMMENT");

    private static final SubLSymbol _CSETF_OPI_COMMENT = makeSymbol("_CSETF-OPI-COMMENT");

    private static final SubLSymbol OPI_DOMAINS = makeSymbol("OPI-DOMAINS");

    private static final SubLSymbol _CSETF_OPI_DOMAINS = makeSymbol("_CSETF-OPI-DOMAINS");

    private static final SubLSymbol OPI_RANGE = makeSymbol("OPI-RANGE");

    private static final SubLSymbol _CSETF_OPI_RANGE = makeSymbol("_CSETF-OPI-RANGE");

    private static final SubLSymbol OPI_PLIST = makeSymbol("OPI-PLIST");

    private static final SubLSymbol _CSETF_OPI_PLIST = makeSymbol("_CSETF-OPI-PLIST");

    private static final SubLString $str147$Invalid_slot__S_for_construction_ = makeString("Invalid slot ~S for construction function");

    private static final SubLSymbol MAKE_OWL_PRED_INFO = makeSymbol("MAKE-OWL-PRED-INFO");

    private static final SubLSymbol VISIT_DEFSTRUCT_OBJECT_OWL_PRED_INFO_METHOD = makeSymbol("VISIT-DEFSTRUCT-OBJECT-OWL-PRED-INFO-METHOD");

    private static final SubLString $str153$_OWL_PRED_INFO__A_ = makeString("<OWL-PRED-INFO ~A>");

    private static final SubLSymbol OWL_EXTERNAL_VALUE_SPECIFICATION_P = makeSymbol("OWL-EXTERNAL-VALUE-SPECIFICATION-P");

    private static final SubLList $list158 = list(makeKeyword("COMPLEMENT-OF"), list(makeSymbol("TEST"), makeSymbol("OWL-EXTERNAL-VALUE-SPECIFICATION-P")));

    private static final SubLSymbol OWL_QUASI_TERM_P = makeSymbol("OWL-QUASI-TERM-P");

    private static final SubLList $list160 = list(makeKeyword("NODE-ID"), list($TEST, makeSymbol("STRINGP")));

    private static final SubLList $list161 = list(makeKeyword("RESTRICTION"), makeKeyword("ANYTHING"), makeKeyword("ANYTHING"), makeKeyword("ANYTHING"), makeKeyword("ANYTHING"));

    private static final SubLList $list162 = cons(makeKeyword("UNION"), makeKeyword("ANYTHING"));

    private static final SubLList $list163 = cons(makeKeyword("INTERSECTION-OF"), makeKeyword("ANYTHING"));

    private static final SubLList $list164 = cons(makeKeyword("ONE-OF"), makeKeyword("ANYTHING"));

    private static final SubLSymbol OWL_EXTERNAL_TERM_ENUMERATION_P = makeSymbol("OWL-EXTERNAL-TERM-ENUMERATION-P");

    private static final SubLSymbol SXHASH_OWL_PRED_INFO_METHOD = makeSymbol("SXHASH-OWL-PRED-INFO-METHOD");

    private static final SubLSymbol OWL_IMPORT_PARAMETERS = makeSymbol("OWL-IMPORT-PARAMETERS");

    private static final SubLSymbol OWL_IMPORT_PARAMETERS_P = makeSymbol("OWL-IMPORT-PARAMETERS-P");

    private static final SubLList $list169 = list(new SubLObject[]{ makeSymbol("ONTOLOGY"), makeSymbol("NAMESPACE-MAP"), makeSymbol("CONSTANT-PREFIX"), makeSymbol("CONSTANT-SUFFIX"), makeSymbol("BASE-URI"), makeSymbol("URI-PREFIX"), makeSymbol("CYCLIST"), makeSymbol("QUOTED-ISA"), makeSymbol("PREFIX-EXTERNAL-NAMES?"), makeSymbol("ABBREVIATE-PREFIXES?"), makeSymbol("IMPORT-TERM"), makeSymbol("ENCODING") });

    private static final SubLList $list170 = list(new SubLObject[]{ makeKeyword("ONTOLOGY"), makeKeyword("NAMESPACE-MAP"), makeKeyword("CONSTANT-PREFIX"), makeKeyword("CONSTANT-SUFFIX"), makeKeyword("BASE-URI"), makeKeyword("URI-PREFIX"), makeKeyword("CYCLIST"), makeKeyword("QUOTED-ISA"), makeKeyword("PREFIX-EXTERNAL-NAMES?"), makeKeyword("ABBREVIATE-PREFIXES?"), makeKeyword("IMPORT-TERM"), makeKeyword("ENCODING") });

    private static final SubLList $list171 = list(new SubLObject[]{ makeSymbol("OIP-ONTOLOGY"), makeSymbol("OIP-NAMESPACE-MAP"), makeSymbol("OIP-CONSTANT-PREFIX"), makeSymbol("OIP-CONSTANT-SUFFIX"), makeSymbol("OIP-BASE-URI"), makeSymbol("OIP-URI-PREFIX"), makeSymbol("OIP-CYCLIST"), makeSymbol("OIP-QUOTED-ISA"), makeSymbol("OIP-PREFIX-EXTERNAL-NAMES?"), makeSymbol("OIP-ABBREVIATE-PREFIXES?"), makeSymbol("OIP-IMPORT-TERM"), makeSymbol("OIP-ENCODING") });

    private static final SubLList $list172 = list(new SubLObject[]{ makeSymbol("_CSETF-OIP-ONTOLOGY"), makeSymbol("_CSETF-OIP-NAMESPACE-MAP"), makeSymbol("_CSETF-OIP-CONSTANT-PREFIX"), makeSymbol("_CSETF-OIP-CONSTANT-SUFFIX"), makeSymbol("_CSETF-OIP-BASE-URI"), makeSymbol("_CSETF-OIP-URI-PREFIX"), makeSymbol("_CSETF-OIP-CYCLIST"), makeSymbol("_CSETF-OIP-QUOTED-ISA"), makeSymbol("_CSETF-OIP-PREFIX-EXTERNAL-NAMES?"), makeSymbol("_CSETF-OIP-ABBREVIATE-PREFIXES?"), makeSymbol("_CSETF-OIP-IMPORT-TERM"), makeSymbol("_CSETF-OIP-ENCODING") });

    private static final SubLSymbol PRINT_OWL_IMPORT_PARAMETERS = makeSymbol("PRINT-OWL-IMPORT-PARAMETERS");

    private static final SubLSymbol OWL_IMPORT_PARAMETERS_PRINT_FUNCTION_TRAMPOLINE = makeSymbol("OWL-IMPORT-PARAMETERS-PRINT-FUNCTION-TRAMPOLINE");

    private static final SubLList $list175 = list(makeSymbol("OPTIMIZE-FUNCALL"), makeSymbol("OWL-IMPORT-PARAMETERS-P"));

    private static final SubLSymbol OIP_ONTOLOGY = makeSymbol("OIP-ONTOLOGY");

    private static final SubLSymbol _CSETF_OIP_ONTOLOGY = makeSymbol("_CSETF-OIP-ONTOLOGY");

    private static final SubLSymbol OIP_NAMESPACE_MAP = makeSymbol("OIP-NAMESPACE-MAP");

    private static final SubLSymbol _CSETF_OIP_NAMESPACE_MAP = makeSymbol("_CSETF-OIP-NAMESPACE-MAP");

    private static final SubLSymbol OIP_CONSTANT_PREFIX = makeSymbol("OIP-CONSTANT-PREFIX");

    private static final SubLSymbol _CSETF_OIP_CONSTANT_PREFIX = makeSymbol("_CSETF-OIP-CONSTANT-PREFIX");

    private static final SubLSymbol OIP_CONSTANT_SUFFIX = makeSymbol("OIP-CONSTANT-SUFFIX");

    private static final SubLSymbol _CSETF_OIP_CONSTANT_SUFFIX = makeSymbol("_CSETF-OIP-CONSTANT-SUFFIX");

    private static final SubLSymbol OIP_BASE_URI = makeSymbol("OIP-BASE-URI");

    private static final SubLSymbol _CSETF_OIP_BASE_URI = makeSymbol("_CSETF-OIP-BASE-URI");

    private static final SubLSymbol OIP_URI_PREFIX = makeSymbol("OIP-URI-PREFIX");

    private static final SubLSymbol _CSETF_OIP_URI_PREFIX = makeSymbol("_CSETF-OIP-URI-PREFIX");

    private static final SubLSymbol OIP_CYCLIST = makeSymbol("OIP-CYCLIST");

    private static final SubLSymbol _CSETF_OIP_CYCLIST = makeSymbol("_CSETF-OIP-CYCLIST");

    private static final SubLSymbol OIP_QUOTED_ISA = makeSymbol("OIP-QUOTED-ISA");

    private static final SubLSymbol _CSETF_OIP_QUOTED_ISA = makeSymbol("_CSETF-OIP-QUOTED-ISA");

    private static final SubLSymbol $sym192$OIP_PREFIX_EXTERNAL_NAMES_ = makeSymbol("OIP-PREFIX-EXTERNAL-NAMES?");

    private static final SubLSymbol $sym193$_CSETF_OIP_PREFIX_EXTERNAL_NAMES_ = makeSymbol("_CSETF-OIP-PREFIX-EXTERNAL-NAMES?");

    private static final SubLSymbol $sym194$OIP_ABBREVIATE_PREFIXES_ = makeSymbol("OIP-ABBREVIATE-PREFIXES?");

    private static final SubLSymbol $sym195$_CSETF_OIP_ABBREVIATE_PREFIXES_ = makeSymbol("_CSETF-OIP-ABBREVIATE-PREFIXES?");

    private static final SubLSymbol OIP_IMPORT_TERM = makeSymbol("OIP-IMPORT-TERM");

    private static final SubLSymbol _CSETF_OIP_IMPORT_TERM = makeSymbol("_CSETF-OIP-IMPORT-TERM");

    private static final SubLSymbol OIP_ENCODING = makeSymbol("OIP-ENCODING");

    private static final SubLSymbol _CSETF_OIP_ENCODING = makeSymbol("_CSETF-OIP-ENCODING");

    private static final SubLSymbol MAKE_OWL_IMPORT_PARAMETERS = makeSymbol("MAKE-OWL-IMPORT-PARAMETERS");

    private static final SubLSymbol VISIT_DEFSTRUCT_OBJECT_OWL_IMPORT_PARAMETERS_METHOD = makeSymbol("VISIT-DEFSTRUCT-OBJECT-OWL-IMPORT-PARAMETERS-METHOD");

    private static final SubLString $str206$_OWL_IMPORT_PARAMETERS__S_ = makeString("<OWL-IMPORT-PARAMETERS ~S>");

    private static final SubLSymbol $sym208$CYCLIST_ = makeSymbol("CYCLIST?");



    private static final SubLObject $$OWLImporter_Cyc = reader_make_constant_shell("OWLImporter-Cyc");



    private static final SubLString $str212$Multiple_uris_for__S_____S____S = makeString("Multiple uris for ~S:~% ~S~% ~S");

    private static final SubLSymbol SXHASH_OWL_IMPORT_PARAMETERS_METHOD = makeSymbol("SXHASH-OWL-IMPORT-PARAMETERS-METHOD");

    private static final SubLString $$$resource = makeString("resource");

    private static final SubLString $str216$_ = makeString("#");

    private static final SubLString $$$interpretation_of_ = makeString("interpretation of ");

    private static final SubLString $str218$_as_a_URI_for_an_imported_ontolog = makeString(" as a URI for an imported ontology.");

    private static final SubLList $list219 = cons(makeSymbol("NAMESPACE"), makeSymbol("PROBLEM-STRING"));

    static private final SubLList $list220 = cons(makeSymbol("ATTRIBUTE-NAME"), makeUninternedSymbol("VALUE"));

    private static final SubLString $str221$Namespace_problem___A = makeString("Namespace problem: ~A");

    private static final SubLString $$$xmlns = makeString("xmlns");

    private static final SubLList $list223 = list(list(makeString("rdf"), makeString("http://www.w3.org/1999/02/22-rdf-syntax-ns#")), list(makeString("owl"), makeString("http://www.w3.org/2002/07/owl#")), list(makeString("xsd"), makeString("http://www.w3.org/2001/XMLSchema#")), list(makeString("rdfs"), makeString("http://www.w3.org/2000/01/rdf-schema#")), list(makeString("dc"), makeString("http://purl.org/dc/elements/1.1/")));

    private static final SubLString $$$_is_bound_to_ = makeString(" is bound to ");

    private static final SubLString $str225$_ = makeString(".");

    private static final SubLString $$$_Must_be_one_of_ = makeString(" Must be one of ");

    private static final SubLString $$$No_import_statement_for_ = makeString("No import statement for ");

    private static final SubLSymbol FIND_OR_CREATE_OWL_ONTOLOGY_FOR_URI = makeSymbol("FIND-OR-CREATE-OWL-ONTOLOGY-FOR-URI");

    private static final SubLSymbol $sym229$_ONTOLOGY = makeSymbol("?ONTOLOGY");



    private static final SubLList $list231 = list(reader_make_constant_shell("isa"), makeSymbol("?ONTOLOGY"), reader_make_constant_shell("owl:Ontology"));



    private static final SubLList $list236 = list(makeKeyword("ANSWER-LANGUAGE"), makeKeyword("HL"), makeKeyword("MAX-NUMBER"), ONE_INTEGER);

    private static final SubLString $str237$__ = makeString("~&");

    private static final SubLString $str238$Couldn_t_find_ontology_for__S__Cr = makeString("Couldn't find ontology for ~S. Creating a new one.");

    private static final SubLString $str239$__ = makeString("~%");



    private static final SubLSymbol $find_or_create_owl_ontology_for_uri_caching_state$ = makeSymbol("*FIND-OR-CREATE-OWL-ONTOLOGY-FOR-URI-CACHING-STATE*");

    private static final SubLSymbol $sym242$_TERM_TYPE = makeSymbol("?TERM-TYPE");



    private static final SubLList $list244 = list(makeSymbol("?TERM-TYPE"));



    private static final SubLString $str247$There_is_no_range_for__S__Name_to = makeString("There is no range for ~S~%Name token: ~S");

    private static final SubLSymbol OWL_PROPERTY_ELEMENT_NAMES = makeSymbol("OWL-PROPERTY-ELEMENT-NAMES");

    private static final SubLString $$$DatatypeProperty = makeString("DatatypeProperty");

    private static final SubLString $$$AnnotationProperty = makeString("AnnotationProperty");

    private static final SubLString $$$ObjectProperty = makeString("ObjectProperty");

    private static final SubLString $$$FunctionalProperty = makeString("FunctionalProperty");

    private static final SubLString $$$SymmetricProperty = makeString("SymmetricProperty");

    private static final SubLString $$$TransitiveProperty = makeString("TransitiveProperty");

    private static final SubLSymbol $owl_property_element_names_caching_state$ = makeSymbol("*OWL-PROPERTY-ELEMENT-NAMES-CACHING-STATE*");

    private static final SubLString $str256$____ = makeString("<!--");

    private static final SubLString $str257$___ = makeString("-->");

    private static final SubLString $str258$Couldn_t_find_end_of_HTML_comment = makeString("Couldn't find end of HTML comment: ~S");

    private static final SubLString $str259$Skipping_comment___S = makeString("Skipping comment: ~S");

    private static final SubLSymbol $NEXT_NON_WHITESPACE_TOKEN = makeKeyword("NEXT-NON-WHITESPACE-TOKEN");

    private static final SubLString $$$type = makeString("type");

    private static final SubLString $str263$Can_t_interpret_empty_label_token = makeString("Can't interpret empty label token ~S");

    private static final SubLString $str264$Can_t_decode_language_abbreviatio = makeString("Can't decode language abbreviation ~S");

    private static final SubLString $$$domain = makeString("domain");

    private static final SubLString $str267$Couldn_t_identify_domain_from__S = makeString("Couldn't identify domain from ~S");

    private static final SubLString $$$inverseOf = makeString("inverseOf");

    private static final SubLString $str269$__ = makeString("/>");

    private static final SubLString $str270$_S_is_its_own_inverse__so_it_s_sy = makeString("~S is its own inverse, so it's symmetric.");

    private static final SubLString $$$subPropertyOf = makeString("subPropertyOf");

    private static final SubLString $str274$Noting_genl_property__S_of__S = makeString("Noting genl property ~S of ~S");

    private static final SubLString $$$equivalentProperty = makeString("equivalentProperty");

    private static final SubLString $str277$Noting_equivalent_property__S_of_ = makeString("Noting equivalent property ~S of ~S");

    private static final SubLString $$$range = makeString("range");

    private static final SubLString $str280$Couldn_t_identify_range_from__S = makeString("Couldn't identify range from ~S");

    private static final SubLString $$$guid = makeString("guid");

    private static final SubLString $$$string = makeString("string");

    private static final SubLString $str283$__Noting_Cyc_guid_for__S_S__ = makeString("~&Noting Cyc guid for ~S~S~%");

    private static final SubLString $$$externalID = makeString("externalID");

    private static final SubLString $str286$__Noting_Cyc_externalID_for__S_S_ = makeString("~&Noting Cyc externalID for ~S~S~%");

    private static final SubLString $$$datatype = makeString("datatype");

    private static final SubLString $$$isa = makeString("isa");

    private static final SubLString $str290$__Noting__isa__S__S___ = makeString("~&Noting (isa ~S ~S)~%");

    private static final SubLString $str291$__Noting__S__S__ = makeString("~&Noting ~S ~S~%");

    private static final SubLSymbol $MY_PRED_VALUES = makeKeyword("MY-PRED-VALUES");

    private static final SubLString $str293$Ignoring_unrecognized_token___S = makeString("Ignoring unrecognized token: ~S");

    private static final SubLString $str294$cyc_com = makeString("cyc.com");

    private static final SubLString $str295$Don_t_know_how_to_interpret_attri = makeString("Don't know how to interpret attribute value ~S");

    private static final SubLString $str297$Processing__D_property_definition = makeString("Processing ~D property definition~:P...");

    private static final SubLString $$$cdolist = makeString("cdolist");

    private static final SubLString $$$DataRange = makeString("DataRange");

    private static final SubLString $$$oneOf = makeString("oneOf");

    private static final SubLString $str301$Can_t_read_range_starting_with__S = makeString("Can't read range starting with ~S");

    private static final SubLString $str302$__rdfs_range_ = makeString("</rdfs:range>");

    private static final SubLString $str303$Finished_range__S_ = makeString("Finished range ~S.");

    private static final SubLSymbol OWL_CLASS_ELEMENT_NAMES = makeSymbol("OWL-CLASS-ELEMENT-NAMES");

    private static final SubLString $$$Class = makeString("Class");

    private static final SubLString $$$DeprecatedClass = makeString("DeprecatedClass");

    private static final SubLSymbol $owl_class_element_names_caching_state$ = makeSymbol("*OWL-CLASS-ELEMENT-NAMES-CACHING-STATE*");

    private static final SubLSymbol OWL_CLASS_TOKEN_P = makeSymbol("OWL-CLASS-TOKEN-P");

    private static final SubLString $str309$Reading_OWL_class_starting_with__ = makeString("Reading OWL class starting with~% ~S");

    private static final SubLString $$$nodeID = makeString("nodeID");

    private static final SubLList $list311 = list(makeKeyword("CLASS"), makeKeyword("BNODE"));

    private static final SubLSymbol OWL_TERM_INFO_P = makeSymbol("OWL-TERM-INFO-P");

    private static final SubLString $str313$Starting_token___S = makeString("Starting token: ~S");

    private static final SubLString $str314$No_progress_reading_OWL_class__St = makeString("No progress reading OWL class: Stuck on ~A.");

    private static final SubLString $$$Description = makeString("Description");

    private static final SubLString $$$Restriction = makeString("Restriction");

    private static final SubLString $str317$Reading_restriction_starting_with = makeString("Reading restriction starting with ~S");

    private static final SubLString $$$unionOf = makeString("unionOf");

    private static final SubLString $str319$Don_t_know_what_to_do_with_this_t = makeString("Don't know what to do with this token while reading OWL class:~% ~S~%");

    private static final SubLString $str321$Found_class___S___Components___S = makeString("Found class: ~S~% Components: ~S");

    private static final SubLString $str325$Don_t_know_what_this_class_is_nam = makeString("Don't know what this class is named:~% ~S");

    private static final SubLString $str326$Can_t_read_an_enumeration_that_is = makeString("Can't read an enumeration that isn't a oneOf range:~% ~S");

    private static final SubLString $$$rest = makeString("rest");

    private static final SubLString $$$first = makeString("first");

    private static final SubLString $str329$Couldn_t_get_name_from__S = makeString("Couldn't get name from ~S");

    private static final SubLString $str330$Read_enumeration___S = makeString("Read enumeration: ~S");

    private static final SubLString $str332$http___www_w3_org_1999_02_22_rdf_ = makeString("http://www.w3.org/1999/02/22-rdf-syntax-ns#nil");

    private static final SubLString $$$parseType = makeString("parseType");

    private static final SubLString $$$Collection = makeString("Collection");

    private static final SubLString $str335$Found_non_first__non_rest_token_i = makeString("Found non-first, non-rest token in OWL list:~% ~S");

    private static final SubLString $str336$__Next_item___S__ = makeString("~&Next item: ~S~%");

    private static final SubLString $$$ID = makeString("ID");

    private static final SubLString $str339$Got_null_arg_isa_name_in__S = makeString("Got null arg-isa name in ~S");

    private static final SubLSymbol XML_SCHEMA_CLASS_URIS = makeSymbol("XML-SCHEMA-CLASS-URIS");

    private static final SubLList $list341 = cons(makeSymbol("?LOCAL-NAME"), makeSymbol("?COLL"));

    static private final SubLList $list342 = list(reader_make_constant_shell("and"), list(reader_make_constant_shell("owlURI"), makeSymbol("?TERM"), list(reader_make_constant_shell("URLFn"), makeSymbol("?URI"))), list(reader_make_constant_shell("concatenateStrings"), makeSymbol("?URI"), makeString("http://www.w3.org/2000/10/XMLSchema#"), makeSymbol("?LOCAL-NAME")), list(reader_make_constant_shell("owlDataTypeSemanticCorrelation"), makeSymbol("?TERM"), makeSymbol("?COLL")));

    private static final SubLList $list343 = list(makeKeyword("INFERENCE-MODE"), makeKeyword("MINIMAL"));

    private static final SubLList $list346 = list(makeKeyword("NONLOCAL"), makeString("http://www.w3.org/2001/XMLSchema"), makeKeyword("ANYTHING"));

    private static final SubLString $str347$__Found_term_by_guid___S = makeString("~&Found term by guid: ~S");

    private static final SubLString $str348$__Found_term_by_externalID___S = makeString("~&Found term by externalID: ~S");

    private static final SubLObject $const349$owl_Class = reader_make_constant_shell("owl:Class");

    private static final SubLSymbol $sym350$_URI = makeSymbol("?URI");



    private static final SubLList $list352 = list(makeKeyword("INFERENCE-MODE"), makeKeyword("MINIMAL"), makeKeyword("ANSWER-LANGUAGE"), makeKeyword("EL"), makeKeyword("MAX-NUMBER"), ONE_INTEGER);

    static private final SubLList $list353 = list(reader_make_constant_shell("URIFn"), list($BIND, makeSymbol("STRING-ARG")));

    private static final SubLSymbol STRING_ARG = makeSymbol("STRING-ARG");

    private static final SubLSymbol OWL_FIND_OR_CREATE_TERM_OF_TYPE = makeSymbol("OWL-FIND-OR-CREATE-TERM-OF-TYPE");

    private static final SubLString $str356$Couldn_t_find_URI_for_namespace__ = makeString("Couldn't find URI for namespace ~S");

    private static final SubLString $str357$Can_t_find_or_create_term_of_type = makeString("Can't find or create term of type ~S from ~S");

    private static final SubLSymbol CONTROL_CHAR_P = makeSymbol("CONTROL-CHAR-P");

    private static final SubLString $str359$external_name_appears_to_contain_ = makeString("external-name appears to contain a control character: ~S");

    private static final SubLString $str360$external_name_appears_to_contain_ = makeString("external-name appears to contain prefix: ~S");



    private static final SubLSymbol OWL_FIND_OR_CREATE_TERM_OF_TYPE_IN_ONTOLOGY = makeSymbol("OWL-FIND-OR-CREATE-TERM-OF-TYPE-IN-ONTOLOGY");







    private static final SubLString $str366$_ = makeString(":");

    private static final SubLList $list367 = list(reader_make_constant_shell("OWLOntologyFn"), list($BIND, makeSymbol("ARG1")));



    static private final SubLList $list370 = list(makeSymbol("?URI"));

    private static final SubLList $list371 = list(makeKeyword("MAX-NUMBER"), ONE_INTEGER, makeKeyword("ANSWER-LANGUAGE"), makeKeyword("HL"), makeKeyword("INFERENCE-MODE"), makeKeyword("MINIMAL"));

    private static final SubLSymbol TRY_TO_ABBREVIATE_OWL_URI = makeSymbol("TRY-TO-ABBREVIATE-OWL-URI");

    private static final SubLString $str373$_cyc_top_transcripts_0953_jonny2_ = makeString("/cyc/top/transcripts/0953/jonny2-20080324150858-709-local-62-sent.ts");

    private static final SubLString $str374$_cyc_top_transcripts_0953_vela_20 = makeString("/cyc/top/transcripts/0953/vela-20080414111900-21395-local-2-sent.ts");

    private static final SubLString $str375$_cyc_top_transcripts_0953_vela_20 = makeString("/cyc/top/transcripts/0953/vela-20080416102200-16797-local-0-sent.ts");

    private static final SubLString $str376$_cyc_top_transcripts_0953_jonny2_ = makeString("/cyc/top/transcripts/0953/jonny2-20080324150858-709-local-64-sent.ts");

    private static final SubLString $str377$_cyc_top_transcripts_0953_jonny2_ = makeString("/cyc/top/transcripts/0953/jonny2-20080324150858-709-local-68-sent.ts");

    private static final SubLString $str378$_cyc_top_transcripts_0953_jonny2_ = makeString("/cyc/top/transcripts/0953/jonny2-20080324150858-709-local-69-sent.ts");

    private static final SubLString $str379$_cyc_top_transcripts_0953_jonny2_ = makeString("/cyc/top/transcripts/0953/jonny2-20080324150858-709-local-94-sent.ts");







    private static final SubLList $list384 = list(makeKeyword("INFERENCE-MODE"), makeKeyword("MINIMAL"), makeKeyword("ANSWER-LANGUAGE"), makeKeyword("HL"), makeKeyword("MAX-NUMBER"), ONE_INTEGER);

    private static final SubLSymbol CYCL_TERM_OR_OWL_QUASI_TERM_P = makeSymbol("CYCL-TERM-OR-OWL-QUASI-TERM-P");













    private static final SubLList $list392 = list(makeString("externalID"), makeString("guid"), makeString("nonAtomicFormula"), makeString("literalValue"), makeString("isa"));



    private static final SubLSymbol $sym394$SPEC_ = makeSymbol("SPEC?");

    private static final SubLString $str395$Potentially_adding_assertions_to_ = makeString("Potentially adding assertions to existing predicate ~S");



    private static final SubLString $str397$__Creating_predicate_from__S__ = makeString("~&Creating predicate from ~S~%");

    private static final SubLString $str398$Failed_to_find_or_create_a_predic = makeString("Failed to find or create a predicate with name: ~S~%");

    private static final SubLObject $const399$owl_SymmetricProperty = reader_make_constant_shell("owl:SymmetricProperty");

    private static final SubLList $list400 = list(makeSymbol("URI"), makeSymbol("NAME"));

    private static final SubLObject $const401$rdfs_domain = reader_make_constant_shell("rdfs:domain");

    private static final SubLList $list402 = list(reader_make_constant_shell("Thing"));

    private static final SubLObject $const403$rdfs_range = reader_make_constant_shell("rdfs:range");

    private static final SubLString $str404$Asserting_genl_property__S_of__S = makeString("Asserting genl property ~S of ~S");

    private static final SubLObject $const405$rdfs_subPropertyOf = reader_make_constant_shell("rdfs:subPropertyOf");

    private static final SubLString $str406$Asserting_spec_property__S_of__S = makeString("Asserting spec property ~S of ~S");



    private static final SubLString $str408$Asserting_inverse__S_of__S = makeString("Asserting inverse ~S of ~S");

    private static final SubLString $str409$Asserting_equivalent_property__S_ = makeString("Asserting equivalent-property ~S of ~S");

    private static final SubLString $str410$Couldn_t_find_equivalent_property = makeString("Couldn't find equivalent property ~S");

    private static final SubLObject $const411$owl_equivalentProperty = reader_make_constant_shell("owl:equivalentProperty");

    private static final SubLList $list412 = list(makeSymbol("PROPERTY-NAME"), makeSymbol("VALUE"));

    private static final SubLString $str413$__Asserting__S__ = makeString("~&Asserting ~S~%");



    private static final SubLSymbol $sym415$INVALID_FORT_ = makeSymbol("INVALID-FORT?");

    private static final SubLSymbol $sym416$_TERM = makeSymbol("?TERM");

    private static final SubLString $str417$Couldn_t_find__S = makeString("Couldn't find ~S");

    private static final SubLSymbol $owl_oe_queues$ = makeSymbol("*OWL-OE-QUEUES*");

    private static final SubLSymbol $owl_oe_daemon$ = makeSymbol("*OWL-OE-DAEMON*");

    private static final SubLSymbol $owl_node_id_index$ = makeSymbol("*OWL-NODE-ID-INDEX*");

    private static final SubLString $str421$Circular_node_id_reference___S___ = makeString("Circular node id reference: ~S -> ~S");

    private static final SubLString $str423$Postponing__isa__S__S__because__S = makeString("Postponing (isa ~S ~S) because ~S is not (yet) known to be a collection.");

    private static final SubLList $list424 = list(reader_make_constant_shell("Collection"), reader_make_constant_shell("BinaryPredicate"), reader_make_constant_shell("Predicate"));

    private static final SubLString $str426$_ = makeString("-");

    private static final SubLString $$$OWL_OE_Daemon = makeString("OWL OE Daemon");

    private static final SubLSymbol OWL_OE_DAEMON_RUN = makeSymbol("OWL-OE-DAEMON-RUN");

    private static final SubLString $str431$Waiting_for__D_enqueued_operation = makeString("Waiting for ~D enqueued operation~:P to be processed...");

    private static final SubLFloat $float$0_5 = makeDouble(0.5);

    private static final SubLString $str433$__Finished_pass_through_queue__Si = makeString("~&Finished pass through queue. Size (including markers) is now ~D. Going around again...~%");

    private static final SubLString $str434$__OE_queue_is_empty__Zzz___ = makeString("~&OE queue is empty. Zzz.~%");

    private static final SubLString $str435$Unable_to_perform__D_operation__P = makeString("Unable to perform ~D operation~:P:~% ~S~%");

    private static final SubLString $str436$__Can_t_do_anything_with_queue_no = makeString("~&Can't do anything with queue now. Awaiting further operations. Zzz.~%");

    private static final SubLList $list437 = cons(makeKeyword("ASSERT"), makeKeyword("ANYTHING"));

    private static final SubLString $str438$__Noting_OE_performed___S__ = makeString("~&Noting OE performed: ~S~%");

    private static final SubLList $list439 = list(makeSymbol("QUASI-FORMULA"), makeSymbol("MT"), makeSymbol("IMPORT-PARAMETERS"));

    private static final SubLString $str440$__Failed_to_resolve__S__ = makeString("~&Failed to resolve ~S~%");

    private static final SubLSymbol RESOLVE_OWL_QUASI_TERM = makeSymbol("RESOLVE-OWL-QUASI-TERM");

    private static final SubLString $str442$Problem_performing__S = makeString("Problem performing ~S");

    private static final SubLSymbol $OWL_QUASI_TERM = makeKeyword("OWL-QUASI-TERM");

    private static final SubLString $str445$_S_is_not_an_OWL_node_ID_ = makeString("~S is not an OWL node ID.");

    private static final SubLList $list446 = cons(makeKeyword("OWL-QUASI-TERM"), makeKeyword("ANYTHING"));

    private static final SubLList $list447 = list(makeSymbol("EXTERNAL-NAME"), makeSymbol("TYPE"), makeSymbol("ONTOLOGY"), makeSymbol("IMPORT-PARAMETERS"));

    private static final SubLSymbol NOTE_FOUND_TERM_RESOLUTION = makeSymbol("NOTE-FOUND-TERM-RESOLUTION");

    private static final SubLString $str449$__Resolved__S___to__S__ = makeString("~&Resolved ~S~% to ~S~%");

    private static final SubLSymbol $note_found_term_resolution_caching_state$ = makeSymbol("*NOTE-FOUND-TERM-RESOLUTION-CACHING-STATE*");

    private static final SubLSymbol OWL_ASSERT = makeSymbol("OWL-ASSERT");

    private static final SubLSymbol NON_ASCII_STRING_P = makeSymbol("NON-ASCII-STRING-P");

    private static final SubLSymbol NON_ASCII_STRING_TO_UNICODE = makeSymbol("NON-ASCII-STRING-TO-UNICODE");

    private static final SubLString $str454$Already_know__S___in__S = makeString("Already know ~S~% in ~S");

    private static final SubLString $str455$Failed_to_assert__S__ = makeString("Failed to assert ~S~%");

    private static final SubLString $str456$Processing_term_definitions___ = makeString("Processing term definitions...");

    private static final SubLString $str457$Anonymous_ = makeString("Anonymous-");

    private static final SubLString $str458$__Creating__S_____ = makeString("~&Creating ~S...~%");

    private static final SubLString $str459$Potentially_adding_assertions_to_ = makeString("Potentially adding assertions to existing term ~S");

    private static final SubLString $str460$__Defining_term_from__S__ = makeString("~&Defining term from ~S~%");

    private static final SubLString $str461$Failed_to_find_or_create_a_term_w = makeString("Failed to find or create a term with name: ~S~%");

    private static final SubLString $$$Thing = makeString("Thing");

    private static final SubLObject $const465$owl_Thing = reader_make_constant_shell("owl:Thing");

    private static final SubLString $str466$Asserting_genl_class__S_of__S = makeString("Asserting genl class ~S of ~S");

    private static final SubLObject $const467$rdfs_subClassOf = reader_make_constant_shell("rdfs:subClassOf");

    static private final SubLList $list468 = list(makeKeyword("COMPLEMENT-OF"), makeKeyword("ANYTHING"));

    private static final SubLString $str469$Asserting_disjoint_class__S_of__S = makeString("Asserting disjoint class ~S of ~S");

    private static final SubLObject $const470$owl_disjointWith = reader_make_constant_shell("owl:disjointWith");

    private static final SubLString $str471$Don_t_know_how_to_handle_supercla = makeString("Don't know how to handle superclass ~S");

    private static final SubLString $str472$Asserting_disjoint___S_and__S = makeString("Asserting disjoint: ~S and ~S");

    private static final SubLString $str473$Don_t_know_how_to_handle_disjoint = makeString("Don't know how to handle disjoint class ~S");

    private static final SubLString $str474$Asserting_union__S_of__S = makeString("Asserting union ~S of ~S");



    private static final SubLString $str476$Asserting_intersection__S_of__S = makeString("Asserting intersection ~S of ~S");



    private static final SubLString $str479$Asserting_enumeration__S_of__S = makeString("Asserting enumeration ~S of ~S");



    private static final SubLString $str481$Can_t_handle__S__value___S_ = makeString("Can't handle ~S (value: ~S)");

    private static final SubLList $list482 = cons(makeSymbol("LABEL"), makeSymbol("LANGUAGE"));

    private static final SubLSymbol $sym483$_LEXICON = makeSymbol("?LEXICON");



    private static final SubLList $list485 = list(makeSymbol("?LEXICON"));

    private static final SubLList $list486 = list(makeKeyword("ANSWER-LANGUAGE"), makeKeyword("HL"), makeKeyword("MAX-NUMBER"), ONE_INTEGER, makeKeyword("INFERENCE-MODE"), makeKeyword("MINIMAL"));



    private static final SubLObject $const488$rdfs_label = reader_make_constant_shell("rdfs:label");

    private static final SubLString $str489$Asserting_equivalent_class__S_of_ = makeString("Asserting equivalent class ~S of ~S");

    private static final SubLObject $const490$owl_equivalentClass = reader_make_constant_shell("owl:equivalentClass");

    private static final SubLString $str491$Failed_to_assert_equivalent_class = makeString("Failed to assert equivalent class ~S of ~S");

    private static final SubLList $list492 = list(makeSymbol("PROPERTY"), makeSymbol("TYPE"), makeSymbol("VALUE"), makeSymbol("CLASS"));

    private static final SubLString $str493$Resolved_nonlocal_reference__S___ = makeString("Resolved nonlocal reference ~S~% to ~S");

    private static final SubLString $str494$Node_ID_as_restriction_target___S = makeString("Node ID as restriction target: ~S");

    private static final SubLString $str495$Can_t_handle__S_restrictions_with = makeString("Can't handle ~S restrictions with value ~S.");

    private static final SubLString $$$allValuesFrom = makeString("allValuesFrom");



    private static final SubLString $$$someValuesFrom = makeString("someValuesFrom");



    private static final SubLString $$$hasValue = makeString("hasValue");



    private static final SubLString $$$minCardinality = makeString("minCardinality");



    private static final SubLString $$$cardinality = makeString("cardinality");





    private static final SubLString $$$maxCardinality = makeString("maxCardinality");



    private static final SubLList $list509 = list(reader_make_constant_shell("CollectionSubsetFn"), $GENL, list(reader_make_constant_shell("TheSetOf"), makeSymbol("?X"), list(reader_make_constant_shell("relationInstanceOnly"), $PRED, makeSymbol("?X"), makeKeyword("TARGET"))));

    private static final SubLList $list510 = list(reader_make_constant_shell("CollectionSubsetFn"), $GENL, list(reader_make_constant_shell("TheSetOf"), makeSymbol("?X"), list(reader_make_constant_shell("relationInstanceExists"), $PRED, makeSymbol("?X"), makeKeyword("TARGET"))));

    static private final SubLList $list511 = list(reader_make_constant_shell("CollectionSubsetFn"), $GENL, list(reader_make_constant_shell("TheSetOf"), makeSymbol("?X"), list($PRED, makeSymbol("?X"), makeKeyword("TARGET"))));

    static private final SubLList $list512 = list(reader_make_constant_shell("CollectionSubsetFn"), $GENL, list(reader_make_constant_shell("TheSetOf"), makeSymbol("?X"), list(reader_make_constant_shell("relationInstanceExistsCount"), $PRED, makeSymbol("?X"), makeKeyword("CLASS"), makeKeyword("TARGET"))));

    static private final SubLList $list513 = list(reader_make_constant_shell("CollectionSubsetFn"), $GENL, list(reader_make_constant_shell("TheSetOf"), makeSymbol("?X"), list(reader_make_constant_shell("relationInstanceExistsMax"), $PRED, makeSymbol("?X"), makeKeyword("CLASS"), makeKeyword("TARGET"))));

    static private final SubLList $list514 = list(reader_make_constant_shell("CollectionSubsetFn"), $GENL, list(reader_make_constant_shell("TheSetOf"), makeSymbol("?X"), list(reader_make_constant_shell("relationInstanceExistsMin"), $PRED, makeSymbol("?X"), makeKeyword("CLASS"), makeKeyword("TARGET"))));

    private static final SubLString $str518$Can_t_create_collection_from__S_r = makeString("Can't create collection from ~S restrictions with value ~S.");

    private static final SubLSymbol FIND_OR_CREATE_OWL_CLASS_FROM_RESTRICTION = makeSymbol("FIND-OR-CREATE-OWL-CLASS-FROM-RESTRICTION");

    private static final SubLString $str520$Created__S_from__S = makeString("Created ~S from ~S");

    private static final SubLString $str521$__Asserting__S = makeString("~&Asserting ~S");

    private static final SubLSymbol NODE_ID_SPECIFICATION_P = makeSymbol("NODE-ID-SPECIFICATION-P");

    private static final SubLString $str523$Nested_calls_resolving__S = makeString("Nested calls resolving ~S");

    private static final SubLList $list524 = list(makeKeyword("COMPLEMENT-OF"), list($TEST, makeSymbol("OWL-EXTERNAL-VALUE-SPECIFICATION-P")));



    private static final SubLSymbol $sym526$VALID_CONSTANT_ = makeSymbol("VALID-CONSTANT?");

    private static final SubLString $str527$Can_t_find_or_create__S_term_from = makeString("Can't find or create ~S term from ~S");

    private static final SubLSymbol OWL_RESTRICTION_P = makeSymbol("OWL-RESTRICTION-P");

    private static final SubLString $str529$__Trying_to_resolve__S__ = makeString("~&Trying to resolve ~S~%");

    private static final SubLString $str530$__Result___S__ = makeString("~&Result: ~S~%");

    private static final SubLString $str531$Trying_to_create_term_from__S = makeString("Trying to create term from ~S");

    private static final SubLSymbol OWL_TERM_INFO = makeSymbol("OWL-TERM-INFO");

    private static final SubLList $list533 = list(makeSymbol("CYC-NAME"), makeSymbol("COMMENT"), makeSymbol("SUPERCLASSES"), makeSymbol("DISJOINT-CLASSES"), makeSymbol("PLIST"));

    private static final SubLList $list534 = list(makeKeyword("CYC-NAME"), makeKeyword("COMMENT"), makeKeyword("SUPERCLASSES"), makeKeyword("DISJOINT-CLASSES"), makeKeyword("PLIST"));

    private static final SubLList $list535 = list(makeSymbol("OTI-CYC-NAME"), makeSymbol("OTI-COMMENT"), makeSymbol("OTI-SUPERCLASSES"), makeSymbol("OTI-DISJOINT-CLASSES"), makeSymbol("OTI-PLIST"));

    private static final SubLList $list536 = list(makeSymbol("_CSETF-OTI-CYC-NAME"), makeSymbol("_CSETF-OTI-COMMENT"), makeSymbol("_CSETF-OTI-SUPERCLASSES"), makeSymbol("_CSETF-OTI-DISJOINT-CLASSES"), makeSymbol("_CSETF-OTI-PLIST"));

    private static final SubLSymbol PRINT_OWL_TERM_INFO = makeSymbol("PRINT-OWL-TERM-INFO");

    private static final SubLSymbol OWL_TERM_INFO_PRINT_FUNCTION_TRAMPOLINE = makeSymbol("OWL-TERM-INFO-PRINT-FUNCTION-TRAMPOLINE");

    private static final SubLList $list539 = list(makeSymbol("OPTIMIZE-FUNCALL"), makeSymbol("OWL-TERM-INFO-P"));

    private static final SubLSymbol OTI_CYC_NAME = makeSymbol("OTI-CYC-NAME");

    private static final SubLSymbol _CSETF_OTI_CYC_NAME = makeSymbol("_CSETF-OTI-CYC-NAME");

    private static final SubLSymbol OTI_COMMENT = makeSymbol("OTI-COMMENT");

    private static final SubLSymbol _CSETF_OTI_COMMENT = makeSymbol("_CSETF-OTI-COMMENT");

    private static final SubLSymbol OTI_SUPERCLASSES = makeSymbol("OTI-SUPERCLASSES");

    private static final SubLSymbol _CSETF_OTI_SUPERCLASSES = makeSymbol("_CSETF-OTI-SUPERCLASSES");

    private static final SubLSymbol OTI_DISJOINT_CLASSES = makeSymbol("OTI-DISJOINT-CLASSES");

    private static final SubLSymbol _CSETF_OTI_DISJOINT_CLASSES = makeSymbol("_CSETF-OTI-DISJOINT-CLASSES");

    private static final SubLSymbol OTI_PLIST = makeSymbol("OTI-PLIST");

    private static final SubLSymbol _CSETF_OTI_PLIST = makeSymbol("_CSETF-OTI-PLIST");

    private static final SubLSymbol MAKE_OWL_TERM_INFO = makeSymbol("MAKE-OWL-TERM-INFO");

    private static final SubLSymbol VISIT_DEFSTRUCT_OBJECT_OWL_TERM_INFO_METHOD = makeSymbol("VISIT-DEFSTRUCT-OBJECT-OWL-TERM-INFO-METHOD");

    private static final SubLString $str554$_OWL_TERM_INFO__A_ = makeString("<OWL-TERM-INFO ~A>");

    private static final SubLList $list555 = list(makeKeyword("CLASS"), makeKeyword("INSTANCE"));

    private static final SubLString $str556$Don_t_know_about__S = makeString("Don't know about ~S");

    private static final SubLSymbol SXHASH_OWL_TERM_INFO_METHOD = makeSymbol("SXHASH-OWL-TERM-INFO-METHOD");

    private static final SubLString $str559$__Reading_Description___S__ = makeString("~&Reading Description: ~S~%");

    private static final SubLString $str560$Skipping_rdf_Description_element_ = makeString("Skipping rdf:Description element.");

    private static final SubLString $str561$__Reading_Restriction___S__ = makeString("~&Reading Restriction: ~S~%");

    private static final SubLString $str562$Skipping_owl_Restriction_element_ = makeString("Skipping owl:Restriction element.");

    private static final SubLString $str563$Reading_top_level_named_class__S = makeString("Reading top-level named class ~S");

    private static final SubLString $str564$Failed_or_declined_to_read_a_clas = makeString("Failed or declined to read a class.");

    private static final SubLString $str565$There_are_no_superclasses_for__S = makeString("There are no superclasses for ~S");

    private static final SubLString $str566$Finished__S____Superclasses___S__ = makeString("Finished ~S.~% Superclasses: ~S.~% Disjoint classes: ~S.~% Isas: ~S.");

    private static final SubLString $str567$Skipping_HTML_comment___S = makeString("Skipping HTML comment: ~S");

    private static final SubLString $str568$Reading_definition_of__S = makeString("Reading definition of ~S");

    private static final SubLString $str569$Skipping__S_to_close_tag = makeString("Skipping ~S to close tag");

    private static final SubLString $str570$Failed_or_declined_to_read_an_ins = makeString("Failed or declined to read an instance.");

    private static final SubLString $str571$Finished__S_ = makeString("Finished ~S.");

    private static final SubLString $str572$__Defining__S_as_an_instance_of__ = makeString("~&Defining ~S as an instance of ~S~%");

    private static final SubLString $$$AllDifferent = makeString("AllDifferent");

    private static final SubLString $str574$Skipping__S = makeString("Skipping ~S");

    private static final SubLString $str575$Skipping_locally_defined__S_to_cl = makeString("Skipping locally-defined ~S to close tag");

    private static final SubLString $$$subClassOf = makeString("subClassOf");

    private static final SubLString $str577$Read_superclass___S = makeString("Read superclass: ~S");

    private static final SubLString $$$disjointWith = makeString("disjointWith");

    private static final SubLString $$$equivalentClass = makeString("equivalentClass");

    private static final SubLString $$$owlEquivalentClass = makeString("owlEquivalentClass");

    private static final SubLString $$$complementOf = makeString("complementOf");

    private static final SubLString $$$intersectionOf = makeString("intersectionOf");

    private static final SubLString $str583$Read_one_intersection_element___S = makeString("Read one intersection element: ~S");

    private static final SubLString $str584$Intersection___S = makeString("Intersection: ~S");

    private static final SubLString $str585$Read_one_union_element___S = makeString("Read one union element: ~S");

    private static final SubLString $str586$Union___S = makeString("Union: ~S");

    private static final SubLString $str587$Read_enumerated_instances___S = makeString("Read enumerated instances: ~S");

    private static final SubLString $str588$Couldn_t_determine_value_from__S_ = makeString("Couldn't determine value from ~S~% ~S");

    private static final SubLString $str589$Apparently_anonymous_instance___S = makeString("Apparently anonymous instance: ~S");

    private static final SubLList $list590 = list(makeKeyword("NONLOCAL"), list($TEST, makeSymbol("URI-P")), list($TEST, makeSymbol("STRINGP")));

    private static final SubLString $str591$Finding_or_creating_nonlocal_term = makeString("Finding or creating nonlocal term...");

    private static final SubLString $str592$Result___S = makeString("Result: ~S");

    private static final SubLString $str593$Reading_OWL_class_or_restriction_ = makeString("Reading OWL class or restriction starting with~% ~S");

    private static final SubLString $str595$Can_t_read_class_starting_with__S = makeString("Can't read class starting with ~S");

    private static final SubLString $str596$_S___is_not_the_start_of_an_OWL_r = makeString("~S~% is not the start of an OWL restriction declaration.");

    private static final SubLString $str599$Read_restriction___S__S__S__S = makeString("Read restriction: ~S ~S ~S ~S");

    private static final SubLString $$$onProperty = makeString("onProperty");

    private static final SubLString $str601$Reading_restriction_property___ = makeString("Reading restriction property...");

    private static final SubLString $$$onClass = makeString("onClass");

    private static final SubLString $str604$Reading_restriction_class___ = makeString("Reading restriction class...");

    private static final SubLString $str606$Read_restriction_property__S = makeString("Read restriction property ~S");

    private static final SubLString $str608$Read_restriction_class__S = makeString("Read restriction class ~S");

    private static final SubLString $str610$Got_onProperty_close_tag_when_we_ = makeString("Got onProperty close tag when we weren't reading a property.");

    private static final SubLString $str611$Failed_to_read_property_ = makeString("Failed to read property.");

    private static final SubLString $str612$Got_onClass_close_tag_when_we_wer = makeString("Got onClass close tag when we weren't reading a class.");

    private static final SubLString $str613$Failed_to_read_class_ = makeString("Failed to read class.");

    private static final SubLString $str614$Read_datatype__S_from__S = makeString("Read datatype ~S from ~S");

    private static final SubLString $str616$Read_value__S_from__S = makeString("Read value ~S from ~S");

    private static final SubLString $str618$Failed_to_read_restriction_value_ = makeString("Failed to read restriction value.");

    private static final SubLString $str619$Read_restriction_value__S = makeString("Read restriction value ~S");

    private static final SubLString $str620$__Reading_OWL_property_starting_w = makeString("~&Reading OWL property starting with ~S~%");

    private static final SubLString $str621$__Done_with__S__ = makeString("~&Done with ~S~%");

    private static final SubLString $str622$__Reading_OWL_class_starting_with = makeString("~&Reading OWL class starting with ~S~%");

    private static final SubLList $list623 = list(new SubLObject[]{ makeString("double"), makeString("integer"), makeString("int"), makeString("unsignedInt"), makeString("nonNegativeInteger"), makeString("nonPositiveInteger"), makeString("positiveInteger"), makeString("negativeInteger"), makeString("decimal"), makeString("long"), makeString("unsignedLong"), makeString("short"), makeString("unsignedShort"), makeString("float") });

    private static final SubLString $str624$Can_t_parse__S_as_a__A = makeString("Can't parse ~S as a ~A");

    private static final SubLString $$$boolean = makeString("boolean");

    private static final SubLList $list626 = list(makeString("true"), makeString("1"));



    private static final SubLList $list628 = list(makeString("false"), makeString("0"));



    private static final SubLString $str630$Couldn_t_read_boolean_value_from_ = makeString("Couldn't read boolean value from ~S");

    private static final SubLString $$$date = makeString("date");

    private static final SubLString $str632$Couldn_t_parse_date_from__S = makeString("Couldn't parse date from ~S");



    private static final SubLSymbol NAT_FUNCTOR = makeSymbol("NAT-FUNCTOR");

    private static final SubLString $str635$Got_multiple_dates_from__S_____S = makeString("Got multiple dates from ~S:~% ~S");

    private static final SubLString $str636$Don_t_know_how_to_parse_value_fro = makeString("Don't know how to parse value from ~S with datatype ~S");

    private static final SubLSymbol XML_NAME = makeSymbol("XML-NAME");

    private static final SubLString $str638$xml_ = makeString("xml:");

    private static final SubLSymbol $xml_name_caching_state$ = makeSymbol("*XML-NAME-CACHING-STATE*");

    private static final SubLSymbol OWL_IMPORTER = makeSymbol("OWL-IMPORTER");

    private static final SubLSymbol OWL_IMPORTER_P = makeSymbol("OWL-IMPORTER-P");

    private static final SubLList $list642 = list(makeSymbol("ID"), makeSymbol("PROGRESS"), makeSymbol("ERROR-INFO"), makeSymbol("IMPORT-PARAMETERS"), makeSymbol("THREAD"));

    private static final SubLList $list643 = list(makeKeyword("ID"), makeKeyword("PROGRESS"), makeKeyword("ERROR-INFO"), makeKeyword("IMPORT-PARAMETERS"), makeKeyword("THREAD"));

    private static final SubLList $list644 = list(makeSymbol("OWL-IMP-ID"), makeSymbol("OWL-IMP-PROGRESS"), makeSymbol("OWL-IMP-ERROR-INFO"), makeSymbol("OWL-IMP-IMPORT-PARAMETERS"), makeSymbol("OWL-IMP-THREAD"));

    private static final SubLList $list645 = list(makeSymbol("_CSETF-OWL-IMP-ID"), makeSymbol("_CSETF-OWL-IMP-PROGRESS"), makeSymbol("_CSETF-OWL-IMP-ERROR-INFO"), makeSymbol("_CSETF-OWL-IMP-IMPORT-PARAMETERS"), makeSymbol("_CSETF-OWL-IMP-THREAD"));

    private static final SubLSymbol PRINT_OWL_IMPORTER = makeSymbol("PRINT-OWL-IMPORTER");

    private static final SubLSymbol OWL_IMPORTER_PRINT_FUNCTION_TRAMPOLINE = makeSymbol("OWL-IMPORTER-PRINT-FUNCTION-TRAMPOLINE");

    private static final SubLList $list648 = list(makeSymbol("OPTIMIZE-FUNCALL"), makeSymbol("OWL-IMPORTER-P"));

    private static final SubLSymbol OWL_IMP_ID = makeSymbol("OWL-IMP-ID");

    private static final SubLSymbol _CSETF_OWL_IMP_ID = makeSymbol("_CSETF-OWL-IMP-ID");

    private static final SubLSymbol OWL_IMP_PROGRESS = makeSymbol("OWL-IMP-PROGRESS");

    private static final SubLSymbol _CSETF_OWL_IMP_PROGRESS = makeSymbol("_CSETF-OWL-IMP-PROGRESS");

    private static final SubLSymbol OWL_IMP_ERROR_INFO = makeSymbol("OWL-IMP-ERROR-INFO");

    private static final SubLSymbol _CSETF_OWL_IMP_ERROR_INFO = makeSymbol("_CSETF-OWL-IMP-ERROR-INFO");

    private static final SubLSymbol OWL_IMP_IMPORT_PARAMETERS = makeSymbol("OWL-IMP-IMPORT-PARAMETERS");

    private static final SubLSymbol _CSETF_OWL_IMP_IMPORT_PARAMETERS = makeSymbol("_CSETF-OWL-IMP-IMPORT-PARAMETERS");

    private static final SubLSymbol OWL_IMP_THREAD = makeSymbol("OWL-IMP-THREAD");

    private static final SubLSymbol _CSETF_OWL_IMP_THREAD = makeSymbol("_CSETF-OWL-IMP-THREAD");

    private static final SubLSymbol MAKE_OWL_IMPORTER = makeSymbol("MAKE-OWL-IMPORTER");

    private static final SubLSymbol VISIT_DEFSTRUCT_OBJECT_OWL_IMPORTER_METHOD = makeSymbol("VISIT-DEFSTRUCT-OBJECT-OWL-IMPORTER-METHOD");

    private static final SubLString $str666$_OWL_IMPORTER__D_ = makeString("<OWL-IMPORTER ~D>");

    private static final SubLSymbol SXHASH_OWL_IMPORTER_METHOD = makeSymbol("SXHASH-OWL-IMPORTER-METHOD");

    private static final SubLSymbol IMPORT_OWL_ONTOLOGY_WITH_IMPORTER = makeSymbol("IMPORT-OWL-ONTOLOGY-WITH-IMPORTER");

    private static final SubLList $list669 = list(makeKeyword("URI"), makeKeyword("CONSTANT-PREFIX"), makeKeyword("SOURCE"), makeKeyword("ONTOLOGY"), makeKeyword("PREFIX-EXTERNAL-NAMES?"), makeKeyword("ABBREVIATE-PREFIXES?"), makeKeyword("QUOTED-ISA"), makeKeyword("CYCLIST"));

    private static final SubLString $$$OWL_Importer = makeString("OWL Importer");

    private static final SubLSymbol OWL_IMPORTER_RUN = makeSymbol("OWL-IMPORTER-RUN");

    private static final SubLList $list672 = list(new SubLObject[]{ makeKeyword("IMPORTER"), makeKeyword("URI"), makeKeyword("CONSTANT-PREFIX"), makeKeyword("CONSTANT-SUFFIX"), makeKeyword("URI-PREFIX"), makeKeyword("SOURCE"), makeKeyword("ONTOLOGY"), makeKeyword("QUOTED-ISA"), makeKeyword("CYCLIST"), makeKeyword("PREFIX-EXTERNAL-NAMES?"), makeKeyword("ABBREVIATE-PREFIXES?") });

    private static final SubLSymbol $owl_importer_id_index$ = makeSymbol("*OWL-IMPORTER-ID-INDEX*");

    private static final SubLString $str675$http___sweet_jpl_nasa_gov_ontolog = makeString("http://sweet.jpl.nasa.gov/ontology/");

    private static final SubLList $list676 = list(new SubLObject[]{ makeString("units"), makeString("time"), makeString("space"), makeString("sensor"), makeString("numerics"), makeString("phenomena"), makeString("process"), makeString("property"), makeString("substance"), makeString("material_thing"), makeString("human_activities"), makeString("data_center"), makeString("data"), makeString("biosphere"), makeString("earthrealm"), makeString("sunrealm") });

    private static final SubLString $str677$http___www_w3_org_TR_owl_guide_wi = makeString("http://www.w3.org/TR/owl-guide/wine.rdf");

    private static final SubLString $str678$WINE_ = makeString("WINE-");

    private static final SubLString $str679$_owl = makeString(".owl");

    private static final SubLString $str680$SWEET_ = makeString("SWEET-");

    private static final SubLString $str681$http___reliant_teknowledge_com_DA = makeString("http://reliant.teknowledge.com/DAML/SUMO.owl");

    private static final SubLString $str682$SUMO_ = makeString("SUMO-");

    private static final SubLString $str683$http___open_meta_com_SUMO_owl = makeString("http://open-meta.com/SUMO.owl");

    private static final SubLString $str684$http___kmf_patrick_afspc_ds_af_mi = makeString("http://kmf.patrick.afspc.ds.af.mil/KMF.owl");

    private static final SubLString $str685$KMF_ = makeString("KMF-");

    private static final SubLString $str686$_home_baxter_tmp_decision_support = makeString("/home/baxter/tmp/decision-support-kmf.owl");

    public static final SubLObject owl_importer_v1_version_number_alt() {
        {
            SubLObject start = position_if(DIGIT_CHAR_P, $owl_importer_v1_version_number$.getGlobalValue(), UNPROVIDED, UNPROVIDED, UNPROVIDED);
            return string_utilities.remove_last_char(string_utilities.substring($owl_importer_v1_version_number$.getGlobalValue(), start, UNPROVIDED), TWO_INTEGER);
        }
    }

    public static SubLObject owl_importer_v1_version_number() {
        final SubLObject start = position_if(DIGIT_CHAR_P, owl_to_cycl.$owl_importer_v1_version_number$.getGlobalValue(), UNPROVIDED, UNPROVIDED, UNPROVIDED);
        return remove_last_char(substring(owl_to_cycl.$owl_importer_v1_version_number$.getGlobalValue(), start, UNPROVIDED), TWO_INTEGER);
    }

    public static final SubLObject current_owl_importer_alt() {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            return $owl_importer$.getDynamicValue(thread);
        }
    }

    public static SubLObject current_owl_importer() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return owl_to_cycl.$owl_importer$.getDynamicValue(thread);
    }

    /**
     *
     *
     * @param NAMES
     * 		- a list of strings that denote OWL-TERM.
     * @return 0 ALIST-P mapping well-formed candidate existing Cyc terms for OWL-TERM to a score for each estimating how good a candidate each is, from 0 - 255, with higher scores indicating better matches.
     * @return 1 ALIST-P the same format for candidates with one or more disjoint isas or genls with OWL-TERM.
     */
    @LispMethod(comment = "@param NAMES\r\n\t\t- a list of strings that denote OWL-TERM.\r\n@return 0 ALIST-P mapping well-formed candidate existing Cyc terms for OWL-TERM to a score for each estimating how good a candidate each is, from 0 - 255, with higher scores indicating better matches.\r\n@return 1 ALIST-P the same format for candidates with one or more disjoint isas or genls with OWL-TERM.")
    public static final SubLObject guess_terms_for_owl_term_alt(SubLObject owl_term, SubLObject names, SubLObject mt) {
        SubLTrampolineFile.checkType(owl_term, HL_TERM_P);
        SubLTrampolineFile.checkType(names, LIST_OF_STRING_P);
        {
            SubLObject owl_term_isas = isa.min_isa(owl_term, mt, UNPROVIDED);
            SubLObject owl_term_genls = genls.min_genls(owl_term, mt, UNPROVIDED);
            SubLObject scored_terms = dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED);
            SubLObject scored_non_wff_terms = dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED);
            SubLObject cdolist_list_var = names;
            SubLObject name = NIL;
            for (name = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , name = cdolist_list_var.first()) {
                {
                    SubLObject cdolist_list_var_1 = com.cyc.cycjava.cycl.owl.owl_to_cycl.guess_forts_from_owl_term_name_non_partitioned(name);
                    SubLObject v_term = NIL;
                    for (v_term = cdolist_list_var_1.first(); NIL != cdolist_list_var_1; cdolist_list_var_1 = cdolist_list_var_1.rest() , v_term = cdolist_list_var_1.first()) {
                        if (NIL != indexed_term_p(v_term)) {
                            {
                                SubLObject term_isas = isa.min_isa(v_term, mt, UNPROVIDED);
                                SubLObject term_genls = genls.min_genls(v_term, mt, UNPROVIDED);
                                SubLObject dict = ((NIL != disjoint_with.any_disjoint_with_anyP(owl_term_isas, term_isas, mt, UNPROVIDED)) || (NIL != disjoint_with.any_disjoint_with_anyP(owl_term_genls, term_genls, mt, UNPROVIDED))) ? ((SubLObject) (scored_non_wff_terms)) : scored_terms;
                                SubLObject score = at_utilities.isas_and_genls_similarity(owl_term_isas, term_isas, owl_term_genls, term_genls, mt);
                                SubLObject max = $int$255;
                                SubLObject scaled_int_score = truncate(divide(multiply(score, max), $int$100), UNPROVIDED);
                                dictionary.dictionary_enter(dict, v_term, scaled_int_score);
                            }
                        }
                    }
                }
            }
            return values(dictionary_utilities.sort_dictionary_by_values(scored_terms, symbol_function($sym7$_)), dictionary_utilities.sort_dictionary_by_values(scored_non_wff_terms, symbol_function($sym7$_)));
        }
    }

    /**
     *
     *
     * @param NAMES
     * 		- a list of strings that denote OWL-TERM.
     * @return 0 ALIST-P mapping well-formed candidate existing Cyc terms for OWL-TERM to a score for each estimating how good a candidate each is, from 0 - 255, with higher scores indicating better matches.
     * @return 1 ALIST-P the same format for candidates with one or more disjoint isas or genls with OWL-TERM.
     */
    @LispMethod(comment = "@param NAMES\r\n\t\t- a list of strings that denote OWL-TERM.\r\n@return 0 ALIST-P mapping well-formed candidate existing Cyc terms for OWL-TERM to a score for each estimating how good a candidate each is, from 0 - 255, with higher scores indicating better matches.\r\n@return 1 ALIST-P the same format for candidates with one or more disjoint isas or genls with OWL-TERM.")
    public static SubLObject guess_terms_for_owl_term(final SubLObject owl_term, final SubLObject names, final SubLObject mt) {
        assert NIL != term.hl_term_p(owl_term) : "! term.hl_term_p(owl_term) " + ("term.hl_term_p(owl_term) " + "CommonSymbols.NIL != term.hl_term_p(owl_term) ") + owl_term;
        assert NIL != list_of_string_p(names) : "! string_utilities.list_of_string_p(names) " + ("string_utilities.list_of_string_p(names) " + "CommonSymbols.NIL != string_utilities.list_of_string_p(names) ") + names;
        final SubLObject owl_term_isas = min_isa(owl_term, mt, UNPROVIDED);
        final SubLObject owl_term_genls = min_genls(owl_term, mt, UNPROVIDED);
        final SubLObject scored_terms = new_dictionary(symbol_function(EQUAL), UNPROVIDED);
        final SubLObject scored_non_wff_terms = new_dictionary(symbol_function(EQUAL), UNPROVIDED);
        SubLObject cdolist_list_var = names;
        SubLObject name = NIL;
        name = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            SubLObject cdolist_list_var_$1 = owl_to_cycl.guess_forts_from_owl_term_name_non_partitioned(name);
            SubLObject v_term = NIL;
            v_term = cdolist_list_var_$1.first();
            while (NIL != cdolist_list_var_$1) {
                if (NIL != indexed_term_p(v_term)) {
                    final SubLObject term_isas = min_isa(v_term, mt, UNPROVIDED);
                    final SubLObject term_genls = min_genls(v_term, mt, UNPROVIDED);
                    final SubLObject dict = ((NIL != any_disjoint_with_anyP(owl_term_isas, term_isas, mt, UNPROVIDED, UNPROVIDED)) || (NIL != any_disjoint_with_anyP(owl_term_genls, term_genls, mt, UNPROVIDED, UNPROVIDED))) ? scored_non_wff_terms : scored_terms;
                    final SubLObject score = isas_and_genls_similarity(owl_term_isas, term_isas, owl_term_genls, term_genls, mt);
                    final SubLObject max = $int$255;
                    final SubLObject scaled_int_score = truncate(divide(multiply(score, max), $int$100), UNPROVIDED);
                    dictionary_enter(dict, v_term, scaled_int_score);
                }
                cdolist_list_var_$1 = cdolist_list_var_$1.rest();
                v_term = cdolist_list_var_$1.first();
            } 
            cdolist_list_var = cdolist_list_var.rest();
            name = cdolist_list_var.first();
        } 
        return values(sort_dictionary_by_values(scored_terms, symbol_function(owl_to_cycl.$sym7$_)), sort_dictionary_by_values(scored_non_wff_terms, symbol_function(owl_to_cycl.$sym7$_)));
    }

    /**
     *
     *
     * @return LISTP of classes in OWL-ONTOLOGY that have no superclasses.
     */
    @LispMethod(comment = "@return LISTP of classes in OWL-ONTOLOGY that have no superclasses.")
    public static final SubLObject root_classes_of_owl_ontology_alt(SubLObject owl_ontology) {
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.root_classes_of_owl_ontology_via_index(owl_ontology);
    }

    /**
     *
     *
     * @return LISTP of classes in OWL-ONTOLOGY that have no superclasses.
     */
    @LispMethod(comment = "@return LISTP of classes in OWL-ONTOLOGY that have no superclasses.")
    public static SubLObject root_classes_of_owl_ontology(final SubLObject owl_ontology) {
        return owl_to_cycl.root_classes_of_owl_ontology_via_index(owl_ontology);
    }

    public static final SubLObject clear_owl_importer_caches_alt() {
        com.cyc.cycjava.cycl.owl.owl_to_cycl.clear_owl_found_terms();
        com.cyc.cycjava.cycl.owl.owl_to_cycl.clear_owl_property_element_names();
        com.cyc.cycjava.cycl.owl.owl_to_cycl.clear_owl_class_element_names();
        com.cyc.cycjava.cycl.owl.owl_to_cycl.clear_xml_tokens_from_file();
        com.cyc.cycjava.cycl.owl.owl_to_cycl.clear_note_found_term_resolution();
        return NIL;
    }

    public static SubLObject clear_owl_importer_caches() {
        owl_to_cycl.clear_owl_found_terms();
        owl_to_cycl.clear_owl_property_element_names();
        owl_to_cycl.clear_owl_class_element_names();
        owl_to_cycl.clear_xml_tokens_from_file();
        owl_to_cycl.clear_note_found_term_resolution();
        return NIL;
    }

    /**
     *
     *
     * @return LISTP of classes in OWL-ONTOLOGY that have no superclasses, using a relatively principled query.
     */
    @LispMethod(comment = "@return LISTP of classes in OWL-ONTOLOGY that have no superclasses, using a relatively principled query.")
    public static final SubLObject root_classes_of_owl_ontology_via_inference_alt(SubLObject owl_ontology) {
        {
            SubLObject query_result = query_utilities.new_cyc_query_from_indexicalized_kbq($$OWLOntologyQuery_GetRootClasses, owl_ontology, UNPROVIDED);
            SubLObject root_classes = NIL;
            SubLObject cdolist_list_var = query_result;
            SubLObject v_bindings = NIL;
            for (v_bindings = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , v_bindings = cdolist_list_var.first()) {
                {
                    SubLObject cdolist_list_var_2 = bindings.bindings_values(v_bindings);
                    SubLObject value = NIL;
                    for (value = cdolist_list_var_2.first(); NIL != cdolist_list_var_2; cdolist_list_var_2 = cdolist_list_var_2.rest() , value = cdolist_list_var_2.first()) {
                        {
                            SubLObject item_var = value;
                            if (NIL == member(item_var, root_classes, symbol_function(EQUAL), symbol_function(IDENTITY))) {
                                root_classes = cons(item_var, root_classes);
                            }
                        }
                    }
                }
            }
            return root_classes;
        }
    }

    /**
     *
     *
     * @return LISTP of classes in OWL-ONTOLOGY that have no superclasses, using a relatively principled query.
     */
    @LispMethod(comment = "@return LISTP of classes in OWL-ONTOLOGY that have no superclasses, using a relatively principled query.")
    public static SubLObject root_classes_of_owl_ontology_via_inference(final SubLObject owl_ontology) {
        final SubLObject query_result = new_cyc_query_from_indexicalized_kbq(owl_to_cycl.$$OWLOntologyQuery_GetRootClasses, owl_ontology, UNPROVIDED);
        SubLObject root_classes = NIL;
        SubLObject cdolist_list_var = query_result;
        SubLObject v_bindings = NIL;
        v_bindings = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            SubLObject cdolist_list_var_$2 = bindings_values(v_bindings);
            SubLObject value = NIL;
            value = cdolist_list_var_$2.first();
            while (NIL != cdolist_list_var_$2) {
                final SubLObject item_var = value;
                if (NIL == member(item_var, root_classes, symbol_function(EQUAL), symbol_function(IDENTITY))) {
                    root_classes = cons(item_var, root_classes);
                }
                cdolist_list_var_$2 = cdolist_list_var_$2.rest();
                value = cdolist_list_var_$2.first();
            } 
            cdolist_list_var = cdolist_list_var.rest();
            v_bindings = cdolist_list_var.first();
        } 
        return root_classes;
    }

    public static final SubLObject term_of_owl_ontologyP_via_index_alt(SubLObject v_term, SubLObject owl_ontology) {
        return kb_mapping_utilities.pred_u_v_holds_in_any_mt($$synonymousExternalConcept, v_term, owl_ontology, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject term_of_owl_ontologyP_via_index(final SubLObject v_term, final SubLObject owl_ontology) {
        return pred_u_v_holds_in_any_mt(owl_to_cycl.$$synonymousExternalConcept, v_term, owl_ontology, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject term_of_some_owl_ontologyP_via_index_internal_alt(SubLObject v_term) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject ans = NIL;
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                        mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                        {
                            SubLObject owl_ontology = NIL;
                            SubLObject pred_var = $$synonymousExternalConcept;
                            if (NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(v_term, ONE_INTEGER, pred_var)) {
                                {
                                    SubLObject iterator_var = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(v_term, ONE_INTEGER, pred_var);
                                    SubLObject done_var = NIL;
                                    SubLObject token_var = NIL;
                                    while (NIL == done_var) {
                                        {
                                            SubLObject final_index_spec = iteration.iteration_next_without_values_macro_helper(iterator_var, token_var);
                                            SubLObject valid = makeBoolean(token_var != final_index_spec);
                                            if (NIL != valid) {
                                                {
                                                    SubLObject final_index_iterator = NIL;
                                                    try {
                                                        final_index_iterator = kb_mapping_macros.new_final_index_iterator(final_index_spec, $GAF, NIL, NIL);
                                                        {
                                                            SubLObject done_var_3 = NIL;
                                                            SubLObject token_var_4 = NIL;
                                                            while (NIL == done_var_3) {
                                                                {
                                                                    SubLObject assertion = iteration.iteration_next_without_values_macro_helper(final_index_iterator, token_var_4);
                                                                    SubLObject valid_5 = makeBoolean(token_var_4 != assertion);
                                                                    if (NIL != valid_5) {
                                                                        owl_ontology = assertions_high.gaf_arg(assertion, TWO_INTEGER);
                                                                        if (NIL != isa.isaP(owl_ontology, $$OWLOntology, UNPROVIDED, UNPROVIDED)) {
                                                                            ans = T;
                                                                        }
                                                                    }
                                                                    done_var_3 = makeBoolean(NIL == valid_5);
                                                                }
                                                            } 
                                                        }
                                                    } finally {
                                                        {
                                                            SubLObject _prev_bind_0_6 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                            try {
                                                                $is_thread_performing_cleanupP$.bind(T, thread);
                                                                if (NIL != final_index_iterator) {
                                                                    kb_mapping_macros.destroy_final_index_iterator(final_index_iterator);
                                                                }
                                                            } finally {
                                                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_6, thread);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            done_var = makeBoolean(NIL == valid);
                                        }
                                    } 
                                }
                            }
                        }
                    } finally {
                        mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                    }
                }
                return ans;
            }
        }
    }

    public static SubLObject term_of_some_owl_ontologyP_via_index_internal(final SubLObject v_term) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject ans = NIL;
        final SubLObject _prev_bind_0 = $relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = $mt$.currentBinding(thread);
        try {
            $relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
            $mt$.bind(owl_to_cycl.$$EverythingPSC, thread);
            SubLObject owl_ontology = NIL;
            final SubLObject pred_var = owl_to_cycl.$$synonymousExternalConcept;
            if (NIL != do_gaf_arg_index_key_validator(v_term, ONE_INTEGER, pred_var)) {
                final SubLObject iterator_var = new_gaf_arg_final_index_spec_iterator(v_term, ONE_INTEGER, pred_var);
                SubLObject done_var = NIL;
                final SubLObject token_var = NIL;
                while (NIL == done_var) {
                    final SubLObject final_index_spec = iteration_next_without_values_macro_helper(iterator_var, token_var);
                    final SubLObject valid = makeBoolean(!token_var.eql(final_index_spec));
                    if (NIL != valid) {
                        SubLObject final_index_iterator = NIL;
                        try {
                            final_index_iterator = new_final_index_iterator(final_index_spec, $GAF, NIL, NIL);
                            SubLObject done_var_$3 = NIL;
                            final SubLObject token_var_$4 = NIL;
                            while (NIL == done_var_$3) {
                                final SubLObject assertion = iteration_next_without_values_macro_helper(final_index_iterator, token_var_$4);
                                final SubLObject valid_$5 = makeBoolean(!token_var_$4.eql(assertion));
                                if (NIL != valid_$5) {
                                    owl_ontology = gaf_arg(assertion, TWO_INTEGER);
                                    if (NIL != isaP(owl_ontology, owl_to_cycl.$const14$owl_Ontology, UNPROVIDED, UNPROVIDED)) {
                                        ans = T;
                                    }
                                }
                                done_var_$3 = makeBoolean(NIL == valid_$5);
                            } 
                        } finally {
                            final SubLObject _prev_bind_0_$6 = $is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                $is_thread_performing_cleanupP$.bind(T, thread);
                                final SubLObject _values = getValuesAsVector();
                                if (NIL != final_index_iterator) {
                                    destroy_final_index_iterator(final_index_iterator);
                                }
                                restoreValuesFromVector(_values);
                            } finally {
                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$6, thread);
                            }
                        }
                    }
                    done_var = makeBoolean(NIL == valid);
                } 
            }
        } finally {
            $mt$.rebind(_prev_bind_2, thread);
            $relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return ans;
    }

    public static final SubLObject term_of_some_owl_ontologyP_via_index_alt(SubLObject v_term) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
                SubLObject caching_state = NIL;
                if (NIL == v_memoization_state) {
                    return com.cyc.cycjava.cycl.owl.owl_to_cycl.term_of_some_owl_ontologyP_via_index_internal(v_term);
                }
                caching_state = memoization_state.memoization_state_lookup(v_memoization_state, $sym10$TERM_OF_SOME_OWL_ONTOLOGY__VIA_INDEX, UNPROVIDED);
                if (NIL == caching_state) {
                    caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), $sym10$TERM_OF_SOME_OWL_ONTOLOGY__VIA_INDEX, ONE_INTEGER, NIL, EQ, UNPROVIDED);
                    memoization_state.memoization_state_put(v_memoization_state, $sym10$TERM_OF_SOME_OWL_ONTOLOGY__VIA_INDEX, caching_state);
                }
                {
                    SubLObject results = memoization_state.caching_state_lookup(caching_state, v_term, $kw15$_MEMOIZED_ITEM_NOT_FOUND_);
                    if (results == $kw15$_MEMOIZED_ITEM_NOT_FOUND_) {
                        results = arg2(thread.resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.owl.owl_to_cycl.term_of_some_owl_ontologyP_via_index_internal(v_term)));
                        memoization_state.caching_state_put(caching_state, v_term, results, UNPROVIDED);
                    }
                    return memoization_state.caching_results(results);
                }
            }
        }
    }

    public static SubLObject term_of_some_owl_ontologyP_via_index(final SubLObject v_term) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_memoization_state = $memoization_state$.getDynamicValue(thread);
        SubLObject caching_state = NIL;
        if (NIL == v_memoization_state) {
            return owl_to_cycl.term_of_some_owl_ontologyP_via_index_internal(v_term);
        }
        caching_state = memoization_state_lookup(v_memoization_state, owl_to_cycl.$sym10$TERM_OF_SOME_OWL_ONTOLOGY__VIA_INDEX, UNPROVIDED);
        if (NIL == caching_state) {
            caching_state = create_caching_state(memoization_state_lock(v_memoization_state), owl_to_cycl.$sym10$TERM_OF_SOME_OWL_ONTOLOGY__VIA_INDEX, ONE_INTEGER, NIL, EQ, UNPROVIDED);
            memoization_state_put(v_memoization_state, owl_to_cycl.$sym10$TERM_OF_SOME_OWL_ONTOLOGY__VIA_INDEX, caching_state);
        }
        SubLObject results = caching_state_lookup(caching_state, v_term, $memoized_item_not_found$.getGlobalValue());
        if (results.eql($memoized_item_not_found$.getGlobalValue())) {
            results = arg2(thread.resetMultipleValues(), multiple_value_list(owl_to_cycl.term_of_some_owl_ontologyP_via_index_internal(v_term)));
            caching_state_put(caching_state, v_term, results, UNPROVIDED);
        }
        return caching_results(results);
    }

    /**
     *
     *
     * @return LISTP of all terms in OWL-ONTOLOGY, using index surfing.
    Assumes all classes in the ontology are related to it via #$synonymousExternalConcept
     */
    @LispMethod(comment = "@return LISTP of all terms in OWL-ONTOLOGY, using index surfing.\r\nAssumes all classes in the ontology are related to it via #$synonymousExternalConcept")
    public static final SubLObject all_terms_of_owl_ontology_via_index_alt(SubLObject owl_ontology) {
        {
            SubLObject direct_members = kb_mapping_utilities.pred_values_in_any_mt(owl_ontology, $$synonymousExternalConcept, TWO_INTEGER, ONE_INTEGER, UNPROVIDED);
            SubLObject imported_members = NIL;
            SubLObject cdolist_list_var = kb_mapping_utilities.pred_values_in_any_mt(owl_ontology, $$owlImports, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            SubLObject imported_ontology = NIL;
            for (imported_ontology = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , imported_ontology = cdolist_list_var.first()) {
                imported_members = append(imported_members, kb_mapping_utilities.pred_values_in_any_mt(imported_ontology, $$synonymousExternalConcept, TWO_INTEGER, ONE_INTEGER, UNPROVIDED));
            }
            return append(imported_members, direct_members);
        }
    }

    /**
     *
     *
     * @return LISTP of all terms in OWL-ONTOLOGY, using index surfing.
    Assumes all classes in the ontology are related to it via #$synonymousExternalConcept
     */
    @LispMethod(comment = "@return LISTP of all terms in OWL-ONTOLOGY, using index surfing.\r\nAssumes all classes in the ontology are related to it via #$synonymousExternalConcept")
    public static SubLObject all_terms_of_owl_ontology_via_index(final SubLObject owl_ontology) {
        final SubLObject direct_members = pred_values_in_any_mt(owl_ontology, owl_to_cycl.$$synonymousExternalConcept, TWO_INTEGER, ONE_INTEGER, UNPROVIDED);
        SubLObject imported_members = NIL;
        SubLObject cdolist_list_var = pred_values_in_any_mt(owl_ontology, owl_to_cycl.$const15$owl_imports, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        SubLObject imported_ontology = NIL;
        imported_ontology = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            imported_members = append(imported_members, pred_values_in_any_mt(imported_ontology, owl_to_cycl.$$synonymousExternalConcept, TWO_INTEGER, ONE_INTEGER, UNPROVIDED));
            cdolist_list_var = cdolist_list_var.rest();
            imported_ontology = cdolist_list_var.first();
        } 
        return append(imported_members, direct_members);
    }

    public static final SubLObject owl_ontology_percent_of_classes_merged_alt(SubLObject owl_ontology) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject all_classes = com.cyc.cycjava.cycl.owl.owl_to_cycl.all_classes_of_owl_ontology_via_index(owl_ontology);
                SubLObject number_merged = ZERO_INTEGER;
                SubLObject state = memoization_state.possibly_new_memoization_state();
                SubLObject local_state = state;
                {
                    SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
                    try {
                        memoization_state.$memoization_state$.bind(local_state, thread);
                        {
                            SubLObject original_memoization_process = NIL;
                            if ((NIL != local_state) && (NIL == memoization_state.memoization_state_lock(local_state))) {
                                original_memoization_process = memoization_state.memoization_state_get_current_process_internal(local_state);
                                {
                                    SubLObject current_proc = current_process();
                                    if (NIL == original_memoization_process) {
                                        memoization_state.memoization_state_set_current_process_internal(local_state, current_proc);
                                    } else {
                                        if (original_memoization_process != current_proc) {
                                            Errors.error($str_alt17$Invalid_attempt_to_reuse_memoizat);
                                        }
                                    }
                                }
                            }
                            try {
                                {
                                    SubLObject cdolist_list_var = all_classes;
                                    SubLObject v_class = NIL;
                                    for (v_class = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , v_class = cdolist_list_var.first()) {
                                        if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_class_mergedP_via_index(v_class)) {
                                            number_merged = add(number_merged, ONE_INTEGER);
                                        }
                                    }
                                }
                            } finally {
                                {
                                    SubLObject _prev_bind_0_7 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        $is_thread_performing_cleanupP$.bind(T, thread);
                                        if ((NIL != local_state) && (NIL == original_memoization_process)) {
                                            memoization_state.memoization_state_set_current_process_internal(local_state, NIL);
                                        }
                                    } finally {
                                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_7, thread);
                                    }
                                }
                            }
                        }
                    } finally {
                        memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
                    }
                }
                return number_utilities.integer_percent(number_merged, length(all_classes), UNPROVIDED);
            }
        }
    }

    public static SubLObject owl_ontology_percent_of_classes_merged(final SubLObject owl_ontology) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject all_classes = owl_to_cycl.all_classes_of_owl_ontology_via_index(owl_ontology);
        SubLObject number_merged = ZERO_INTEGER;
        final SubLObject local_state;
        final SubLObject state = local_state = possibly_new_memoization_state();
        final SubLObject _prev_bind_0 = $memoization_state$.currentBinding(thread);
        try {
            $memoization_state$.bind(local_state, thread);
            final SubLObject original_memoization_process = memoization_state_original_process(local_state);
            try {
                SubLObject cdolist_list_var = all_classes;
                SubLObject v_class = NIL;
                v_class = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    if (NIL != owl_to_cycl.owl_class_mergedP_via_index(v_class)) {
                        number_merged = add(number_merged, ONE_INTEGER);
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    v_class = cdolist_list_var.first();
                } 
            } finally {
                final SubLObject _prev_bind_0_$7 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values = getValuesAsVector();
                    memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                    restoreValuesFromVector(_values);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$7, thread);
                }
            }
        } finally {
            $memoization_state$.rebind(_prev_bind_0, thread);
        }
        return integer_percent(number_merged, length(all_classes), UNPROVIDED);
    }

    public static final SubLObject owl_ontology_average_class_depth_alt(SubLObject owl_ontology) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject depths = NIL;
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                        mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                        {
                            SubLObject cdolist_list_var = com.cyc.cycjava.cycl.owl.owl_to_cycl.all_classes_of_owl_ontology_via_index(owl_ontology);
                            SubLObject v_class = NIL;
                            for (v_class = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , v_class = cdolist_list_var.first()) {
                                {
                                    SubLObject depth = com.cyc.cycjava.cycl.owl.owl_to_cycl.longest_acyclic_genls_path_length(v_class, $$Thing, UNPROVIDED);
                                    if (NIL == subl_promotions.positive_integer_p(depth)) {
                                        Errors.sublisp_break($str_alt19$Can_t_find_path_from__S_to___Thin, new SubLObject[]{ v_class });
                                    }
                                    depths = cons(depth, depths);
                                }
                            }
                        }
                    } finally {
                        mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                    }
                }
                return NIL != depths ? ((SubLObject) (number_utilities.mean(depths))) : NIL;
            }
        }
    }

    public static SubLObject owl_ontology_average_class_depth(final SubLObject owl_ontology) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject depths = NIL;
        final SubLObject _prev_bind_0 = $relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = $mt$.currentBinding(thread);
        try {
            $relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
            $mt$.bind(owl_to_cycl.$$EverythingPSC, thread);
            SubLObject cdolist_list_var = owl_to_cycl.all_classes_of_owl_ontology_via_index(owl_ontology);
            SubLObject v_class = NIL;
            v_class = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                final SubLObject depth = owl_to_cycl.longest_acyclic_genls_path_length(v_class, owl_to_cycl.$$Thing, UNPROVIDED);
                if (NIL == positive_integer_p(depth)) {
                    Errors.sublisp_break(owl_to_cycl.$str17$Can_t_find_path_from__S_to___Thin, new SubLObject[]{ v_class });
                }
                depths = cons(depth, depths);
                cdolist_list_var = cdolist_list_var.rest();
                v_class = cdolist_list_var.first();
            } 
        } finally {
            $mt$.rebind(_prev_bind_2, thread);
            $relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return NIL != depths ? mean(depths) : NIL;
    }

    public static final SubLObject owl_ontology_average_root_class_depth_alt(SubLObject owl_ontology) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject depths = NIL;
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                        mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                        {
                            SubLObject cdolist_list_var = com.cyc.cycjava.cycl.owl.owl_to_cycl.root_classes_of_owl_ontology(owl_ontology);
                            SubLObject v_class = NIL;
                            for (v_class = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , v_class = cdolist_list_var.first()) {
                                {
                                    SubLObject depth = com.cyc.cycjava.cycl.owl.owl_to_cycl.longest_acyclic_genls_path_length(v_class, $$Thing, UNPROVIDED);
                                    if (NIL == subl_promotions.positive_integer_p(depth)) {
                                        Errors.sublisp_break($str_alt19$Can_t_find_path_from__S_to___Thin, new SubLObject[]{ v_class });
                                    }
                                    depths = cons(depth, depths);
                                }
                            }
                        }
                    } finally {
                        mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                    }
                }
                return NIL != depths ? ((SubLObject) (number_utilities.mean(depths))) : NIL;
            }
        }
    }

    public static SubLObject owl_ontology_average_root_class_depth(final SubLObject owl_ontology) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject depths = NIL;
        final SubLObject _prev_bind_0 = $relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = $mt$.currentBinding(thread);
        try {
            $relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
            $mt$.bind(owl_to_cycl.$$EverythingPSC, thread);
            SubLObject cdolist_list_var = owl_to_cycl.root_classes_of_owl_ontology(owl_ontology);
            SubLObject v_class = NIL;
            v_class = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                final SubLObject depth = owl_to_cycl.longest_acyclic_genls_path_length(v_class, owl_to_cycl.$$Thing, UNPROVIDED);
                if (NIL == positive_integer_p(depth)) {
                    Errors.sublisp_break(owl_to_cycl.$str17$Can_t_find_path_from__S_to___Thin, new SubLObject[]{ v_class });
                }
                depths = cons(depth, depths);
                cdolist_list_var = cdolist_list_var.rest();
                v_class = cdolist_list_var.first();
            } 
        } finally {
            $mt$.rebind(_prev_bind_2, thread);
            $relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return NIL != depths ? mean(depths) : NIL;
    }

    /**
     *
     *
     * @return LISTP of all classes in OWL-ONTOLOGY, using index surfing.
    Assumes all classes in the ontology are related to it via #$synonymousExternalConcept
     */
    @LispMethod(comment = "@return LISTP of all classes in OWL-ONTOLOGY, using index surfing.\r\nAssumes all classes in the ontology are related to it via #$synonymousExternalConcept")
    public static final SubLObject all_classes_of_owl_ontology_via_index_alt(SubLObject owl_ontology) {
        return list_utilities.remove_if_not(COLLECTION_P, com.cyc.cycjava.cycl.owl.owl_to_cycl.all_terms_of_owl_ontology_via_index(owl_ontology), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    /**
     *
     *
     * @return LISTP of all classes in OWL-ONTOLOGY, using index surfing.
    Assumes all classes in the ontology are related to it via #$synonymousExternalConcept
     */
    @LispMethod(comment = "@return LISTP of all classes in OWL-ONTOLOGY, using index surfing.\r\nAssumes all classes in the ontology are related to it via #$synonymousExternalConcept")
    public static SubLObject all_classes_of_owl_ontology_via_index(final SubLObject owl_ontology) {
        return remove_if_not(COLLECTION_P, owl_to_cycl.all_terms_of_owl_ontology_via_index(owl_ontology), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    /**
     *
     *
     * @return booleanp; non-NIL iff CLASS has a genls link (up or down) to some collection not in an OWL ontology.
     */
    @LispMethod(comment = "@return booleanp; non-NIL iff CLASS has a genls link (up or down) to some collection not in an OWL ontology.")
    public static final SubLObject owl_class_mergedP_via_index_alt(SubLObject v_class) {
        return makeBoolean((NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_class_merged_upwardP_via_index(v_class)) || (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_class_merged_downwardP_via_index(v_class)));
    }

    /**
     *
     *
     * @return booleanp; non-NIL iff CLASS has a genls link (up or down) to some collection not in an OWL ontology.
     */
    @LispMethod(comment = "@return booleanp; non-NIL iff CLASS has a genls link (up or down) to some collection not in an OWL ontology.")
    public static SubLObject owl_class_mergedP_via_index(final SubLObject v_class) {
        return makeBoolean((NIL != owl_to_cycl.owl_class_merged_upwardP_via_index(v_class)) || (NIL != owl_to_cycl.owl_class_merged_downwardP_via_index(v_class)));
    }

    /**
     *
     *
     * @return booleanp; non-NIL iff CLASS has a genls link up to some collection not in an OWL ontology.
     */
    @LispMethod(comment = "@return booleanp; non-NIL iff CLASS has a genls link up to some collection not in an OWL ontology.")
    public static final SubLObject owl_class_merged_upwardP_via_index_alt(SubLObject v_class) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject mergedP = NIL;
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                        mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                        if (NIL == mergedP) {
                            {
                                SubLObject node_var = v_class;
                                SubLObject deck_type = (false) ? ((SubLObject) ($QUEUE)) : $STACK;
                                SubLObject recur_deck = deck.create_deck(deck_type);
                                {
                                    SubLObject _prev_bind_0_8 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                    try {
                                        sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                        {
                                            SubLObject tv_var = NIL;
                                            {
                                                SubLObject _prev_bind_0_9 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                                SubLObject _prev_bind_1_10 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                    if (NIL != tv_var) {
                                                        if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                            if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                                {
                                                                    SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                    if (pcase_var.eql($ERROR)) {
                                                                        sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt26$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($CERROR)) {
                                                                            sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt26$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                        } else {
                                                                            if (pcase_var.eql($WARN)) {
                                                                                Errors.warn($str_alt26$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                            } else {
                                                                                Errors.warn($str_alt31$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                Errors.cerror($$$continue_anyway, $str_alt26$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    {
                                                        SubLObject _prev_bind_0_11 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                                        SubLObject _prev_bind_1_12 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                                        SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                        SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                        SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                        try {
                                                            sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_vars.get_sbhl_module($$genls), thread);
                                                            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_vars.get_sbhl_module($$genls)), thread);
                                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_vars.get_sbhl_module($$genls)), thread);
                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                            sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$genls), thread);
                                                            if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(v_class, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                {
                                                                    SubLObject _prev_bind_0_13 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                                    SubLObject _prev_bind_1_14 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                                    SubLObject _prev_bind_2_15 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_forward_search_direction(), sbhl_module_vars.get_sbhl_module($$genls)), thread);
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_var, UNPROVIDED);
                                                                        while ((NIL != node_var) && (NIL == mergedP)) {
                                                                            {
                                                                                SubLObject genl = node_var;
                                                                                if (!((genl == $$Thing) || (NIL != cycl_utilities.expression_find_if($sym10$TERM_OF_SOME_OWL_ONTOLOGY__VIA_INDEX, genl, T, UNPROVIDED)))) {
                                                                                    mergedP = T;
                                                                                }
                                                                            }
                                                                            {
                                                                                SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$genls));
                                                                                SubLObject rest = NIL;
                                                                                for (rest = accessible_modules; !((NIL != mergedP) || (NIL == rest)); rest = rest.rest()) {
                                                                                    {
                                                                                        SubLObject module_var = rest.first();
                                                                                        {
                                                                                            SubLObject _prev_bind_0_16 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_1_17 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                {
                                                                                                    SubLObject node = function_terms.naut_to_nart(node_var);
                                                                                                    if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                        {
                                                                                                            SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                            if (NIL != d_link) {
                                                                                                                {
                                                                                                                    SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                    if (NIL != mt_links) {
                                                                                                                        {
                                                                                                                            SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                            while (!((NIL != mergedP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state)))) {
                                                                                                                                thread.resetMultipleValues();
                                                                                                                                {
                                                                                                                                    SubLObject mt = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                    SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                    if (NIL != mt_relevance_macros.relevant_mtP(mt)) {
                                                                                                                                        {
                                                                                                                                            SubLObject _prev_bind_0_18 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                            try {
                                                                                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt, thread);
                                                                                                                                                {
                                                                                                                                                    SubLObject iteration_state_19 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                    while (!((NIL != mergedP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state_19)))) {
                                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                                        {
                                                                                                                                                            SubLObject tv = dictionary_contents.do_dictionary_contents_key_value(iteration_state_19);
                                                                                                                                                            SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                                            if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv)) {
                                                                                                                                                                {
                                                                                                                                                                    SubLObject _prev_bind_0_20 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                    try {
                                                                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.bind(tv, thread);
                                                                                                                                                                        {
                                                                                                                                                                            SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                            SubLObject rest_21 = NIL;
                                                                                                                                                                            for (rest_21 = new_list; !((NIL != mergedP) || (NIL == rest_21)); rest_21 = rest_21.rest()) {
                                                                                                                                                                                {
                                                                                                                                                                                    SubLObject node_vars_link_node = rest_21.first();
                                                                                                                                                                                    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
                                                                                                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                                                                                                        deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    } finally {
                                                                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_20, thread);
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            iteration_state_19 = dictionary_contents.do_dictionary_contents_next(iteration_state_19);
                                                                                                                                                        }
                                                                                                                                                    } 
                                                                                                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state_19);
                                                                                                                                                }
                                                                                                                                            } finally {
                                                                                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_18, thread);
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                }
                                                                                                                            } 
                                                                                                                            dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            } else {
                                                                                                                sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt33$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                            }
                                                                                                        }
                                                                                                    } else {
                                                                                                        if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                            {
                                                                                                                SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                SubLObject rest_22 = NIL;
                                                                                                                for (rest_22 = new_list; !((NIL != mergedP) || (NIL == rest_22)); rest_22 = rest_22.rest()) {
                                                                                                                    {
                                                                                                                        SubLObject generating_fn = rest_22.first();
                                                                                                                        {
                                                                                                                            SubLObject _prev_bind_0_23 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                            try {
                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                {
                                                                                                                                    SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                    SubLObject new_list_24 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                    SubLObject rest_25 = NIL;
                                                                                                                                    for (rest_25 = new_list_24; !((NIL != mergedP) || (NIL == rest_25)); rest_25 = rest_25.rest()) {
                                                                                                                                        {
                                                                                                                                            SubLObject node_vars_link_node = rest_25.first();
                                                                                                                                            if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
                                                                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                                                                deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            } finally {
                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_23, thread);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } finally {
                                                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_17, thread);
                                                                                                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_16, thread);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            node_var = deck.deck_pop(recur_deck);
                                                                        } 
                                                                    } finally {
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_15, thread);
                                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_14, thread);
                                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_13, thread);
                                                                    }
                                                                }
                                                            } else {
                                                                sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt34$Node__a_does_not_pass_sbhl_type_t, v_class, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                            }
                                                        } finally {
                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                                                            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_12, thread);
                                                            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_11, thread);
                                                        }
                                                    }
                                                } finally {
                                                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_10, thread);
                                                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_9, thread);
                                                }
                                            }
                                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                        }
                                    } finally {
                                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_8, thread);
                                    }
                                }
                            }
                        }
                    } finally {
                        mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                    }
                }
                return mergedP;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; non-NIL iff CLASS has a genls link up to some collection not in an OWL ontology.
     */
    @LispMethod(comment = "@return booleanp; non-NIL iff CLASS has a genls link up to some collection not in an OWL ontology.")
    public static SubLObject owl_class_merged_upwardP_via_index(final SubLObject v_class) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject mergedP = NIL;
        final SubLObject _prev_bind_0 = $relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = $mt$.currentBinding(thread);
        try {
            $relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
            $mt$.bind(owl_to_cycl.$$EverythingPSC, thread);
            if (NIL == mergedP) {
                SubLObject node_var = v_class;
                final SubLObject deck_type = $STACK;
                final SubLObject recur_deck = create_deck(deck_type);
                final SubLObject _prev_bind_0_$8 = $sbhl_space$.currentBinding(thread);
                try {
                    $sbhl_space$.bind(get_sbhl_marking_space(), thread);
                    try {
                        final SubLObject tv_var = NIL;
                        final SubLObject _prev_bind_0_$9 = $sbhl_tv$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$10 = $relevant_sbhl_tv_function$.currentBinding(thread);
                        try {
                            $sbhl_tv$.bind(NIL != tv_var ? tv_var : get_sbhl_true_tv(), thread);
                            $relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : $relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                            if (((NIL != tv_var) && (NIL != sbhl_object_type_checking_p())) && (NIL == sbhl_true_tv_p(tv_var))) {
                                final SubLObject pcase_var = $sbhl_type_error_action$.getDynamicValue(thread);
                                if (pcase_var.eql($ERROR)) {
                                    sbhl_error(ONE_INTEGER, owl_to_cycl.$str24$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                } else
                                    if (pcase_var.eql($CERROR)) {
                                        sbhl_cerror(ONE_INTEGER, owl_to_cycl.$$$continue_anyway, owl_to_cycl.$str24$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    } else
                                        if (pcase_var.eql($WARN)) {
                                            Errors.warn(owl_to_cycl.$str24$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                        } else {
                                            Errors.warn(owl_to_cycl.$str29$_A_is_not_a_valid__sbhl_type_erro, $sbhl_type_error_action$.getDynamicValue(thread));
                                            Errors.cerror(owl_to_cycl.$$$continue_anyway, owl_to_cycl.$str24$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                        }


                            }
                            final SubLObject _prev_bind_0_$10 = $sbhl_search_module$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$11 = $sbhl_search_module_type$.currentBinding(thread);
                            final SubLObject _prev_bind_3 = $sbhl_add_node_to_result_test$.currentBinding(thread);
                            final SubLObject _prev_bind_4 = $genl_inverse_mode_p$.currentBinding(thread);
                            final SubLObject _prev_bind_5 = $sbhl_module$.currentBinding(thread);
                            try {
                                $sbhl_search_module$.bind(get_sbhl_module(owl_to_cycl.$$genls), thread);
                                $sbhl_search_module_type$.bind(get_sbhl_module_type(get_sbhl_module(owl_to_cycl.$$genls)), thread);
                                $sbhl_add_node_to_result_test$.bind(get_sbhl_add_node_to_result_test(get_sbhl_module(owl_to_cycl.$$genls)), thread);
                                $genl_inverse_mode_p$.bind(NIL, thread);
                                $sbhl_module$.bind(get_sbhl_module(owl_to_cycl.$$genls), thread);
                                if ((NIL != suspend_sbhl_type_checkingP()) || (NIL != apply_sbhl_module_type_test(v_class, get_sbhl_module(UNPROVIDED)))) {
                                    final SubLObject _prev_bind_0_$11 = $sbhl_search_direction$.currentBinding(thread);
                                    final SubLObject _prev_bind_1_$12 = $sbhl_link_direction$.currentBinding(thread);
                                    final SubLObject _prev_bind_2_$15 = $genl_inverse_mode_p$.currentBinding(thread);
                                    try {
                                        $sbhl_search_direction$.bind(get_sbhl_forward_search_direction(), thread);
                                        $sbhl_link_direction$.bind(sbhl_search_direction_to_link_direction(get_sbhl_forward_search_direction(), get_sbhl_module(owl_to_cycl.$$genls)), thread);
                                        $genl_inverse_mode_p$.bind(NIL, thread);
                                        sbhl_mark_node_marked(node_var, UNPROVIDED);
                                        while ((NIL != node_var) && (NIL == mergedP)) {
                                            final SubLObject genl = node_var;
                                            if ((!genl.eql(owl_to_cycl.$$Thing)) && (NIL == expression_find_if(owl_to_cycl.$sym10$TERM_OF_SOME_OWL_ONTOLOGY__VIA_INDEX, genl, T, UNPROVIDED))) {
                                                mergedP = T;
                                            }
                                            final SubLObject accessible_modules = get_sbhl_accessible_modules(get_sbhl_module(owl_to_cycl.$$genls));
                                            SubLObject rest;
                                            SubLObject module_var;
                                            SubLObject _prev_bind_0_$12;
                                            SubLObject _prev_bind_1_$13;
                                            SubLObject node;
                                            SubLObject d_link;
                                            SubLObject mt_links;
                                            SubLObject iteration_state;
                                            SubLObject mt;
                                            SubLObject tv_links;
                                            SubLObject _prev_bind_0_$13;
                                            SubLObject iteration_state_$19;
                                            SubLObject tv;
                                            SubLObject link_nodes;
                                            SubLObject _prev_bind_0_$14;
                                            SubLObject sol;
                                            SubLObject set_contents_var;
                                            SubLObject basis_object;
                                            SubLObject state;
                                            SubLObject node_vars_link_node;
                                            SubLObject csome_list_var;
                                            SubLObject node_vars_link_node2;
                                            SubLObject new_list;
                                            SubLObject rest_$21;
                                            SubLObject generating_fn;
                                            SubLObject _prev_bind_0_$15;
                                            SubLObject sol2;
                                            SubLObject link_nodes2;
                                            SubLObject set_contents_var2;
                                            SubLObject basis_object2;
                                            SubLObject state2;
                                            SubLObject node_vars_link_node3;
                                            SubLObject csome_list_var2;
                                            SubLObject node_vars_link_node4;
                                            for (rest = NIL, rest = accessible_modules; (NIL == mergedP) && (NIL != rest); rest = rest.rest()) {
                                                module_var = rest.first();
                                                _prev_bind_0_$12 = $sbhl_module$.currentBinding(thread);
                                                _prev_bind_1_$13 = $genl_inverse_mode_p$.currentBinding(thread);
                                                try {
                                                    $sbhl_module$.bind(module_var, thread);
                                                    $genl_inverse_mode_p$.bind(NIL != flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == $genl_inverse_mode_p$.getDynamicValue(thread)) : $genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                    node = naut_to_nart(node_var);
                                                    if (NIL != sbhl_node_object_p(node)) {
                                                        d_link = get_sbhl_graph_link(node, get_sbhl_module(UNPROVIDED));
                                                        if (NIL != d_link) {
                                                            mt_links = get_sbhl_mt_links(d_link, get_sbhl_link_direction(), get_sbhl_module(UNPROVIDED));
                                                            if (NIL != mt_links) {
                                                                for (iteration_state = do_dictionary_contents_state(dictionary_contents(mt_links)); (NIL == mergedP) && (NIL == do_dictionary_contents_doneP(iteration_state)); iteration_state = do_dictionary_contents_next(iteration_state)) {
                                                                    thread.resetMultipleValues();
                                                                    mt = do_dictionary_contents_key_value(iteration_state);
                                                                    tv_links = thread.secondMultipleValue();
                                                                    thread.resetMultipleValues();
                                                                    if (NIL != relevant_mtP(mt)) {
                                                                        _prev_bind_0_$13 = $sbhl_link_mt$.currentBinding(thread);
                                                                        try {
                                                                            $sbhl_link_mt$.bind(mt, thread);
                                                                            for (iteration_state_$19 = do_dictionary_contents_state(dictionary_contents(tv_links)); (NIL == mergedP) && (NIL == do_dictionary_contents_doneP(iteration_state_$19)); iteration_state_$19 = do_dictionary_contents_next(iteration_state_$19)) {
                                                                                thread.resetMultipleValues();
                                                                                tv = do_dictionary_contents_key_value(iteration_state_$19);
                                                                                link_nodes = thread.secondMultipleValue();
                                                                                thread.resetMultipleValues();
                                                                                if (NIL != relevant_sbhl_tvP(tv)) {
                                                                                    _prev_bind_0_$14 = $sbhl_link_tv$.currentBinding(thread);
                                                                                    try {
                                                                                        $sbhl_link_tv$.bind(tv, thread);
                                                                                        sol = link_nodes;
                                                                                        if (NIL != set.set_p(sol)) {
                                                                                            set_contents_var = set.do_set_internal(sol);
                                                                                            for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == mergedP) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                node_vars_link_node = set_contents.do_set_contents_next(basis_object, state);
                                                                                                if ((NIL != set_contents.do_set_contents_element_validP(state, node_vars_link_node)) && (NIL == sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED))) {
                                                                                                    sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                    deck_push(node_vars_link_node, recur_deck);
                                                                                                }
                                                                                            }
                                                                                        } else
                                                                                            if (sol.isList()) {
                                                                                                if (NIL == mergedP) {
                                                                                                    csome_list_var = sol;
                                                                                                    node_vars_link_node2 = NIL;
                                                                                                    node_vars_link_node2 = csome_list_var.first();
                                                                                                    while ((NIL == mergedP) && (NIL != csome_list_var)) {
                                                                                                        if (NIL == sbhl_search_path_termination_p(node_vars_link_node2, UNPROVIDED)) {
                                                                                                            sbhl_mark_node_marked(node_vars_link_node2, UNPROVIDED);
                                                                                                            deck_push(node_vars_link_node2, recur_deck);
                                                                                                        }
                                                                                                        csome_list_var = csome_list_var.rest();
                                                                                                        node_vars_link_node2 = csome_list_var.first();
                                                                                                    } 
                                                                                                }
                                                                                            } else {
                                                                                                Errors.error(owl_to_cycl.$str31$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                            }

                                                                                    } finally {
                                                                                        $sbhl_link_tv$.rebind(_prev_bind_0_$14, thread);
                                                                                    }
                                                                                }
                                                                            }
                                                                            do_dictionary_contents_finalize(iteration_state_$19);
                                                                        } finally {
                                                                            $sbhl_link_mt$.rebind(_prev_bind_0_$13, thread);
                                                                        }
                                                                    }
                                                                }
                                                                do_dictionary_contents_finalize(iteration_state);
                                                            }
                                                        } else {
                                                            sbhl_error(FIVE_INTEGER, owl_to_cycl.$str32$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                        }
                                                    } else
                                                        if (NIL != cnat_p(node, UNPROVIDED)) {
                                                            new_list = (NIL != sbhl_randomize_lists_p()) ? randomize_list(get_sbhl_module_relevant_naut_link_generators(get_sbhl_link_direction(), $sbhl_tv$.getDynamicValue(thread), get_sbhl_module(UNPROVIDED))) : get_sbhl_module_relevant_naut_link_generators(get_sbhl_link_direction(), $sbhl_tv$.getDynamicValue(thread), get_sbhl_module(UNPROVIDED));
                                                            for (rest_$21 = NIL, rest_$21 = new_list; (NIL == mergedP) && (NIL != rest_$21); rest_$21 = rest_$21.rest()) {
                                                                generating_fn = rest_$21.first();
                                                                _prev_bind_0_$15 = $sbhl_link_generator$.currentBinding(thread);
                                                                try {
                                                                    $sbhl_link_generator$.bind(generating_fn, thread);
                                                                    link_nodes2 = sol2 = funcall(generating_fn, node);
                                                                    if (NIL != set.set_p(sol2)) {
                                                                        set_contents_var2 = set.do_set_internal(sol2);
                                                                        for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); (NIL == mergedP) && (NIL == set_contents.do_set_contents_doneP(basis_object2, state2)); state2 = set_contents.do_set_contents_update_state(state2)) {
                                                                            node_vars_link_node3 = set_contents.do_set_contents_next(basis_object2, state2);
                                                                            if ((NIL != set_contents.do_set_contents_element_validP(state2, node_vars_link_node3)) && (NIL == sbhl_search_path_termination_p(node_vars_link_node3, UNPROVIDED))) {
                                                                                sbhl_mark_node_marked(node_vars_link_node3, UNPROVIDED);
                                                                                deck_push(node_vars_link_node3, recur_deck);
                                                                            }
                                                                        }
                                                                    } else
                                                                        if (sol2.isList()) {
                                                                            if (NIL == mergedP) {
                                                                                csome_list_var2 = sol2;
                                                                                node_vars_link_node4 = NIL;
                                                                                node_vars_link_node4 = csome_list_var2.first();
                                                                                while ((NIL == mergedP) && (NIL != csome_list_var2)) {
                                                                                    if (NIL == sbhl_search_path_termination_p(node_vars_link_node4, UNPROVIDED)) {
                                                                                        sbhl_mark_node_marked(node_vars_link_node4, UNPROVIDED);
                                                                                        deck_push(node_vars_link_node4, recur_deck);
                                                                                    }
                                                                                    csome_list_var2 = csome_list_var2.rest();
                                                                                    node_vars_link_node4 = csome_list_var2.first();
                                                                                } 
                                                                            }
                                                                        } else {
                                                                            Errors.error(owl_to_cycl.$str31$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                                        }

                                                                } finally {
                                                                    $sbhl_link_generator$.rebind(_prev_bind_0_$15, thread);
                                                                }
                                                            }
                                                        }

                                                } finally {
                                                    $genl_inverse_mode_p$.rebind(_prev_bind_1_$13, thread);
                                                    $sbhl_module$.rebind(_prev_bind_0_$12, thread);
                                                }
                                            }
                                            node_var = deck_pop(recur_deck);
                                        } 
                                    } finally {
                                        $genl_inverse_mode_p$.rebind(_prev_bind_2_$15, thread);
                                        $sbhl_link_direction$.rebind(_prev_bind_1_$12, thread);
                                        $sbhl_search_direction$.rebind(_prev_bind_0_$11, thread);
                                    }
                                } else {
                                    sbhl_warn(TWO_INTEGER, owl_to_cycl.$str33$Node__a_does_not_pass_sbhl_type_t, v_class, get_sbhl_type_test(get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                }
                            } finally {
                                $sbhl_module$.rebind(_prev_bind_5, thread);
                                $genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                                $sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
                                $sbhl_search_module_type$.rebind(_prev_bind_1_$11, thread);
                                $sbhl_search_module$.rebind(_prev_bind_0_$10, thread);
                            }
                        } finally {
                            $relevant_sbhl_tv_function$.rebind(_prev_bind_1_$10, thread);
                            $sbhl_tv$.rebind(_prev_bind_0_$9, thread);
                        }
                    } finally {
                        final SubLObject _prev_bind_0_$16 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            final SubLObject _values = getValuesAsVector();
                            free_sbhl_marking_space($sbhl_space$.getDynamicValue(thread));
                            restoreValuesFromVector(_values);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$16, thread);
                        }
                    }
                } finally {
                    $sbhl_space$.rebind(_prev_bind_0_$8, thread);
                }
            }
        } finally {
            $mt$.rebind(_prev_bind_2, thread);
            $relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return mergedP;
    }

    /**
     *
     *
     * @return booleanp; non-NIL iff CLASS has a genls link down to some collection not in an OWL ontology.
     */
    @LispMethod(comment = "@return booleanp; non-NIL iff CLASS has a genls link down to some collection not in an OWL ontology.")
    public static final SubLObject owl_class_merged_downwardP_via_index_alt(SubLObject v_class) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject mergedP = NIL;
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                        mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                        if (NIL == mergedP) {
                            {
                                SubLObject node_var = v_class;
                                SubLObject deck_type = (false) ? ((SubLObject) ($QUEUE)) : $STACK;
                                SubLObject recur_deck = deck.create_deck(deck_type);
                                {
                                    SubLObject _prev_bind_0_26 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                    try {
                                        sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                        {
                                            SubLObject tv_var = NIL;
                                            {
                                                SubLObject _prev_bind_0_27 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                                SubLObject _prev_bind_1_28 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                    if (NIL != tv_var) {
                                                        if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                            if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                                {
                                                                    SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                    if (pcase_var.eql($ERROR)) {
                                                                        sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt26$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($CERROR)) {
                                                                            sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt26$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                        } else {
                                                                            if (pcase_var.eql($WARN)) {
                                                                                Errors.warn($str_alt26$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                            } else {
                                                                                Errors.warn($str_alt31$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                Errors.cerror($$$continue_anyway, $str_alt26$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    {
                                                        SubLObject _prev_bind_0_29 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                                        SubLObject _prev_bind_1_30 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                                        SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                        SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                        SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                        try {
                                                            sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_vars.get_sbhl_module($$genls), thread);
                                                            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_vars.get_sbhl_module($$genls)), thread);
                                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_vars.get_sbhl_module($$genls)), thread);
                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                            sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$genls), thread);
                                                            if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(v_class, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                {
                                                                    SubLObject _prev_bind_0_31 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                                    SubLObject _prev_bind_1_32 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                                    SubLObject _prev_bind_2_33 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_forward_search_direction(), sbhl_module_vars.get_sbhl_module($$genls)), thread);
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_var, UNPROVIDED);
                                                                        while ((NIL != node_var) && (NIL == mergedP)) {
                                                                            {
                                                                                SubLObject genl = node_var;
                                                                                if (!((genl == $$Thing) || (NIL != cycl_utilities.expression_find_if($sym10$TERM_OF_SOME_OWL_ONTOLOGY__VIA_INDEX, genl, T, UNPROVIDED)))) {
                                                                                    mergedP = T;
                                                                                }
                                                                            }
                                                                            {
                                                                                SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$genls));
                                                                                SubLObject rest = NIL;
                                                                                for (rest = accessible_modules; !((NIL != mergedP) || (NIL == rest)); rest = rest.rest()) {
                                                                                    {
                                                                                        SubLObject module_var = rest.first();
                                                                                        {
                                                                                            SubLObject _prev_bind_0_34 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_1_35 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                {
                                                                                                    SubLObject node = function_terms.naut_to_nart(node_var);
                                                                                                    if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                        {
                                                                                                            SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                            if (NIL != d_link) {
                                                                                                                {
                                                                                                                    SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                    if (NIL != mt_links) {
                                                                                                                        {
                                                                                                                            SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                            while (!((NIL != mergedP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state)))) {
                                                                                                                                thread.resetMultipleValues();
                                                                                                                                {
                                                                                                                                    SubLObject mt = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                    SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                    if (NIL != mt_relevance_macros.relevant_mtP(mt)) {
                                                                                                                                        {
                                                                                                                                            SubLObject _prev_bind_0_36 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                            try {
                                                                                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt, thread);
                                                                                                                                                {
                                                                                                                                                    SubLObject iteration_state_37 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                    while (!((NIL != mergedP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state_37)))) {
                                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                                        {
                                                                                                                                                            SubLObject tv = dictionary_contents.do_dictionary_contents_key_value(iteration_state_37);
                                                                                                                                                            SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                                            if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv)) {
                                                                                                                                                                {
                                                                                                                                                                    SubLObject _prev_bind_0_38 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                    try {
                                                                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.bind(tv, thread);
                                                                                                                                                                        {
                                                                                                                                                                            SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                            SubLObject rest_39 = NIL;
                                                                                                                                                                            for (rest_39 = new_list; !((NIL != mergedP) || (NIL == rest_39)); rest_39 = rest_39.rest()) {
                                                                                                                                                                                {
                                                                                                                                                                                    SubLObject node_vars_link_node = rest_39.first();
                                                                                                                                                                                    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
                                                                                                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                                                                                                        deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    } finally {
                                                                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_38, thread);
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            iteration_state_37 = dictionary_contents.do_dictionary_contents_next(iteration_state_37);
                                                                                                                                                        }
                                                                                                                                                    } 
                                                                                                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state_37);
                                                                                                                                                }
                                                                                                                                            } finally {
                                                                                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_36, thread);
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                }
                                                                                                                            } 
                                                                                                                            dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            } else {
                                                                                                                sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt33$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                            }
                                                                                                        }
                                                                                                    } else {
                                                                                                        if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                            {
                                                                                                                SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                SubLObject rest_40 = NIL;
                                                                                                                for (rest_40 = new_list; !((NIL != mergedP) || (NIL == rest_40)); rest_40 = rest_40.rest()) {
                                                                                                                    {
                                                                                                                        SubLObject generating_fn = rest_40.first();
                                                                                                                        {
                                                                                                                            SubLObject _prev_bind_0_41 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                            try {
                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                {
                                                                                                                                    SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                    SubLObject new_list_42 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                    SubLObject rest_43 = NIL;
                                                                                                                                    for (rest_43 = new_list_42; !((NIL != mergedP) || (NIL == rest_43)); rest_43 = rest_43.rest()) {
                                                                                                                                        {
                                                                                                                                            SubLObject node_vars_link_node = rest_43.first();
                                                                                                                                            if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
                                                                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                                                                deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            } finally {
                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_41, thread);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } finally {
                                                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_35, thread);
                                                                                                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_34, thread);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            node_var = deck.deck_pop(recur_deck);
                                                                        } 
                                                                    } finally {
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_33, thread);
                                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_32, thread);
                                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_31, thread);
                                                                    }
                                                                }
                                                            } else {
                                                                sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt34$Node__a_does_not_pass_sbhl_type_t, v_class, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                            }
                                                        } finally {
                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                                                            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_30, thread);
                                                            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_29, thread);
                                                        }
                                                    }
                                                } finally {
                                                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_28, thread);
                                                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_27, thread);
                                                }
                                            }
                                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                        }
                                    } finally {
                                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_26, thread);
                                    }
                                }
                            }
                        }
                    } finally {
                        mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                    }
                }
                return mergedP;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; non-NIL iff CLASS has a genls link down to some collection not in an OWL ontology.
     */
    @LispMethod(comment = "@return booleanp; non-NIL iff CLASS has a genls link down to some collection not in an OWL ontology.")
    public static SubLObject owl_class_merged_downwardP_via_index(final SubLObject v_class) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject mergedP = NIL;
        final SubLObject _prev_bind_0 = $relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = $mt$.currentBinding(thread);
        try {
            $relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
            $mt$.bind(owl_to_cycl.$$EverythingPSC, thread);
            if (NIL == mergedP) {
                SubLObject node_var = v_class;
                final SubLObject deck_type = $STACK;
                final SubLObject recur_deck = create_deck(deck_type);
                final SubLObject _prev_bind_0_$24 = $sbhl_space$.currentBinding(thread);
                try {
                    $sbhl_space$.bind(get_sbhl_marking_space(), thread);
                    try {
                        final SubLObject tv_var = NIL;
                        final SubLObject _prev_bind_0_$25 = $sbhl_tv$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$26 = $relevant_sbhl_tv_function$.currentBinding(thread);
                        try {
                            $sbhl_tv$.bind(NIL != tv_var ? tv_var : get_sbhl_true_tv(), thread);
                            $relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : $relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                            if (((NIL != tv_var) && (NIL != sbhl_object_type_checking_p())) && (NIL == sbhl_true_tv_p(tv_var))) {
                                final SubLObject pcase_var = $sbhl_type_error_action$.getDynamicValue(thread);
                                if (pcase_var.eql($ERROR)) {
                                    sbhl_error(ONE_INTEGER, owl_to_cycl.$str24$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                } else
                                    if (pcase_var.eql($CERROR)) {
                                        sbhl_cerror(ONE_INTEGER, owl_to_cycl.$$$continue_anyway, owl_to_cycl.$str24$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    } else
                                        if (pcase_var.eql($WARN)) {
                                            Errors.warn(owl_to_cycl.$str24$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                        } else {
                                            Errors.warn(owl_to_cycl.$str29$_A_is_not_a_valid__sbhl_type_erro, $sbhl_type_error_action$.getDynamicValue(thread));
                                            Errors.cerror(owl_to_cycl.$$$continue_anyway, owl_to_cycl.$str24$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                        }


                            }
                            final SubLObject _prev_bind_0_$26 = $sbhl_search_module$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$27 = $sbhl_search_module_type$.currentBinding(thread);
                            final SubLObject _prev_bind_3 = $sbhl_add_node_to_result_test$.currentBinding(thread);
                            final SubLObject _prev_bind_4 = $genl_inverse_mode_p$.currentBinding(thread);
                            final SubLObject _prev_bind_5 = $sbhl_module$.currentBinding(thread);
                            try {
                                $sbhl_search_module$.bind(get_sbhl_module(owl_to_cycl.$$genls), thread);
                                $sbhl_search_module_type$.bind(get_sbhl_module_type(get_sbhl_module(owl_to_cycl.$$genls)), thread);
                                $sbhl_add_node_to_result_test$.bind(get_sbhl_add_node_to_result_test(get_sbhl_module(owl_to_cycl.$$genls)), thread);
                                $genl_inverse_mode_p$.bind(NIL, thread);
                                $sbhl_module$.bind(get_sbhl_module(owl_to_cycl.$$genls), thread);
                                if ((NIL != suspend_sbhl_type_checkingP()) || (NIL != apply_sbhl_module_type_test(v_class, get_sbhl_module(UNPROVIDED)))) {
                                    final SubLObject _prev_bind_0_$27 = $sbhl_search_direction$.currentBinding(thread);
                                    final SubLObject _prev_bind_1_$28 = $sbhl_link_direction$.currentBinding(thread);
                                    final SubLObject _prev_bind_2_$31 = $genl_inverse_mode_p$.currentBinding(thread);
                                    try {
                                        $sbhl_search_direction$.bind(get_sbhl_forward_search_direction(), thread);
                                        $sbhl_link_direction$.bind(sbhl_search_direction_to_link_direction(get_sbhl_forward_search_direction(), get_sbhl_module(owl_to_cycl.$$genls)), thread);
                                        $genl_inverse_mode_p$.bind(NIL, thread);
                                        sbhl_mark_node_marked(node_var, UNPROVIDED);
                                        while ((NIL != node_var) && (NIL == mergedP)) {
                                            final SubLObject genl = node_var;
                                            if ((!genl.eql(owl_to_cycl.$$Thing)) && (NIL == expression_find_if(owl_to_cycl.$sym10$TERM_OF_SOME_OWL_ONTOLOGY__VIA_INDEX, genl, T, UNPROVIDED))) {
                                                mergedP = T;
                                            }
                                            final SubLObject accessible_modules = get_sbhl_accessible_modules(get_sbhl_module(owl_to_cycl.$$genls));
                                            SubLObject rest;
                                            SubLObject module_var;
                                            SubLObject _prev_bind_0_$28;
                                            SubLObject _prev_bind_1_$29;
                                            SubLObject node;
                                            SubLObject d_link;
                                            SubLObject mt_links;
                                            SubLObject iteration_state;
                                            SubLObject mt;
                                            SubLObject tv_links;
                                            SubLObject _prev_bind_0_$29;
                                            SubLObject iteration_state_$35;
                                            SubLObject tv;
                                            SubLObject link_nodes;
                                            SubLObject _prev_bind_0_$30;
                                            SubLObject sol;
                                            SubLObject set_contents_var;
                                            SubLObject basis_object;
                                            SubLObject state;
                                            SubLObject node_vars_link_node;
                                            SubLObject csome_list_var;
                                            SubLObject node_vars_link_node2;
                                            SubLObject new_list;
                                            SubLObject rest_$37;
                                            SubLObject generating_fn;
                                            SubLObject _prev_bind_0_$31;
                                            SubLObject sol2;
                                            SubLObject link_nodes2;
                                            SubLObject set_contents_var2;
                                            SubLObject basis_object2;
                                            SubLObject state2;
                                            SubLObject node_vars_link_node3;
                                            SubLObject csome_list_var2;
                                            SubLObject node_vars_link_node4;
                                            for (rest = NIL, rest = accessible_modules; (NIL == mergedP) && (NIL != rest); rest = rest.rest()) {
                                                module_var = rest.first();
                                                _prev_bind_0_$28 = $sbhl_module$.currentBinding(thread);
                                                _prev_bind_1_$29 = $genl_inverse_mode_p$.currentBinding(thread);
                                                try {
                                                    $sbhl_module$.bind(module_var, thread);
                                                    $genl_inverse_mode_p$.bind(NIL != flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == $genl_inverse_mode_p$.getDynamicValue(thread)) : $genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                    node = naut_to_nart(node_var);
                                                    if (NIL != sbhl_node_object_p(node)) {
                                                        d_link = get_sbhl_graph_link(node, get_sbhl_module(UNPROVIDED));
                                                        if (NIL != d_link) {
                                                            mt_links = get_sbhl_mt_links(d_link, get_sbhl_link_direction(), get_sbhl_module(UNPROVIDED));
                                                            if (NIL != mt_links) {
                                                                for (iteration_state = do_dictionary_contents_state(dictionary_contents(mt_links)); (NIL == mergedP) && (NIL == do_dictionary_contents_doneP(iteration_state)); iteration_state = do_dictionary_contents_next(iteration_state)) {
                                                                    thread.resetMultipleValues();
                                                                    mt = do_dictionary_contents_key_value(iteration_state);
                                                                    tv_links = thread.secondMultipleValue();
                                                                    thread.resetMultipleValues();
                                                                    if (NIL != relevant_mtP(mt)) {
                                                                        _prev_bind_0_$29 = $sbhl_link_mt$.currentBinding(thread);
                                                                        try {
                                                                            $sbhl_link_mt$.bind(mt, thread);
                                                                            for (iteration_state_$35 = do_dictionary_contents_state(dictionary_contents(tv_links)); (NIL == mergedP) && (NIL == do_dictionary_contents_doneP(iteration_state_$35)); iteration_state_$35 = do_dictionary_contents_next(iteration_state_$35)) {
                                                                                thread.resetMultipleValues();
                                                                                tv = do_dictionary_contents_key_value(iteration_state_$35);
                                                                                link_nodes = thread.secondMultipleValue();
                                                                                thread.resetMultipleValues();
                                                                                if (NIL != relevant_sbhl_tvP(tv)) {
                                                                                    _prev_bind_0_$30 = $sbhl_link_tv$.currentBinding(thread);
                                                                                    try {
                                                                                        $sbhl_link_tv$.bind(tv, thread);
                                                                                        sol = link_nodes;
                                                                                        if (NIL != set.set_p(sol)) {
                                                                                            set_contents_var = set.do_set_internal(sol);
                                                                                            for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == mergedP) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                node_vars_link_node = set_contents.do_set_contents_next(basis_object, state);
                                                                                                if ((NIL != set_contents.do_set_contents_element_validP(state, node_vars_link_node)) && (NIL == sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED))) {
                                                                                                    sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                    deck_push(node_vars_link_node, recur_deck);
                                                                                                }
                                                                                            }
                                                                                        } else
                                                                                            if (sol.isList()) {
                                                                                                if (NIL == mergedP) {
                                                                                                    csome_list_var = sol;
                                                                                                    node_vars_link_node2 = NIL;
                                                                                                    node_vars_link_node2 = csome_list_var.first();
                                                                                                    while ((NIL == mergedP) && (NIL != csome_list_var)) {
                                                                                                        if (NIL == sbhl_search_path_termination_p(node_vars_link_node2, UNPROVIDED)) {
                                                                                                            sbhl_mark_node_marked(node_vars_link_node2, UNPROVIDED);
                                                                                                            deck_push(node_vars_link_node2, recur_deck);
                                                                                                        }
                                                                                                        csome_list_var = csome_list_var.rest();
                                                                                                        node_vars_link_node2 = csome_list_var.first();
                                                                                                    } 
                                                                                                }
                                                                                            } else {
                                                                                                Errors.error(owl_to_cycl.$str31$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                            }

                                                                                    } finally {
                                                                                        $sbhl_link_tv$.rebind(_prev_bind_0_$30, thread);
                                                                                    }
                                                                                }
                                                                            }
                                                                            do_dictionary_contents_finalize(iteration_state_$35);
                                                                        } finally {
                                                                            $sbhl_link_mt$.rebind(_prev_bind_0_$29, thread);
                                                                        }
                                                                    }
                                                                }
                                                                do_dictionary_contents_finalize(iteration_state);
                                                            }
                                                        } else {
                                                            sbhl_error(FIVE_INTEGER, owl_to_cycl.$str32$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                        }
                                                    } else
                                                        if (NIL != cnat_p(node, UNPROVIDED)) {
                                                            new_list = (NIL != sbhl_randomize_lists_p()) ? randomize_list(get_sbhl_module_relevant_naut_link_generators(get_sbhl_link_direction(), $sbhl_tv$.getDynamicValue(thread), get_sbhl_module(UNPROVIDED))) : get_sbhl_module_relevant_naut_link_generators(get_sbhl_link_direction(), $sbhl_tv$.getDynamicValue(thread), get_sbhl_module(UNPROVIDED));
                                                            for (rest_$37 = NIL, rest_$37 = new_list; (NIL == mergedP) && (NIL != rest_$37); rest_$37 = rest_$37.rest()) {
                                                                generating_fn = rest_$37.first();
                                                                _prev_bind_0_$31 = $sbhl_link_generator$.currentBinding(thread);
                                                                try {
                                                                    $sbhl_link_generator$.bind(generating_fn, thread);
                                                                    link_nodes2 = sol2 = funcall(generating_fn, node);
                                                                    if (NIL != set.set_p(sol2)) {
                                                                        set_contents_var2 = set.do_set_internal(sol2);
                                                                        for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); (NIL == mergedP) && (NIL == set_contents.do_set_contents_doneP(basis_object2, state2)); state2 = set_contents.do_set_contents_update_state(state2)) {
                                                                            node_vars_link_node3 = set_contents.do_set_contents_next(basis_object2, state2);
                                                                            if ((NIL != set_contents.do_set_contents_element_validP(state2, node_vars_link_node3)) && (NIL == sbhl_search_path_termination_p(node_vars_link_node3, UNPROVIDED))) {
                                                                                sbhl_mark_node_marked(node_vars_link_node3, UNPROVIDED);
                                                                                deck_push(node_vars_link_node3, recur_deck);
                                                                            }
                                                                        }
                                                                    } else
                                                                        if (sol2.isList()) {
                                                                            if (NIL == mergedP) {
                                                                                csome_list_var2 = sol2;
                                                                                node_vars_link_node4 = NIL;
                                                                                node_vars_link_node4 = csome_list_var2.first();
                                                                                while ((NIL == mergedP) && (NIL != csome_list_var2)) {
                                                                                    if (NIL == sbhl_search_path_termination_p(node_vars_link_node4, UNPROVIDED)) {
                                                                                        sbhl_mark_node_marked(node_vars_link_node4, UNPROVIDED);
                                                                                        deck_push(node_vars_link_node4, recur_deck);
                                                                                    }
                                                                                    csome_list_var2 = csome_list_var2.rest();
                                                                                    node_vars_link_node4 = csome_list_var2.first();
                                                                                } 
                                                                            }
                                                                        } else {
                                                                            Errors.error(owl_to_cycl.$str31$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                                        }

                                                                } finally {
                                                                    $sbhl_link_generator$.rebind(_prev_bind_0_$31, thread);
                                                                }
                                                            }
                                                        }

                                                } finally {
                                                    $genl_inverse_mode_p$.rebind(_prev_bind_1_$29, thread);
                                                    $sbhl_module$.rebind(_prev_bind_0_$28, thread);
                                                }
                                            }
                                            node_var = deck_pop(recur_deck);
                                        } 
                                    } finally {
                                        $genl_inverse_mode_p$.rebind(_prev_bind_2_$31, thread);
                                        $sbhl_link_direction$.rebind(_prev_bind_1_$28, thread);
                                        $sbhl_search_direction$.rebind(_prev_bind_0_$27, thread);
                                    }
                                } else {
                                    sbhl_warn(TWO_INTEGER, owl_to_cycl.$str33$Node__a_does_not_pass_sbhl_type_t, v_class, get_sbhl_type_test(get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                }
                            } finally {
                                $sbhl_module$.rebind(_prev_bind_5, thread);
                                $genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                                $sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
                                $sbhl_search_module_type$.rebind(_prev_bind_1_$27, thread);
                                $sbhl_search_module$.rebind(_prev_bind_0_$26, thread);
                            }
                        } finally {
                            $relevant_sbhl_tv_function$.rebind(_prev_bind_1_$26, thread);
                            $sbhl_tv$.rebind(_prev_bind_0_$25, thread);
                        }
                    } finally {
                        final SubLObject _prev_bind_0_$32 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            final SubLObject _values = getValuesAsVector();
                            free_sbhl_marking_space($sbhl_space$.getDynamicValue(thread));
                            restoreValuesFromVector(_values);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$32, thread);
                        }
                    }
                } finally {
                    $sbhl_space$.rebind(_prev_bind_0_$24, thread);
                }
            }
        } finally {
            $mt$.rebind(_prev_bind_2, thread);
            $relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return mergedP;
    }

    public static final SubLObject owl_merge_mt_alt() {
        return $owl_merge_mt$.getGlobalValue();
    }

    public static SubLObject owl_merge_mt() {
        return owl_to_cycl.$owl_merge_mt$.getGlobalValue();
    }

    public static final SubLObject owl_merge_assert_alt(SubLObject sentence) {
        return ke.ke_assert_now(sentence, com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_merge_mt(), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject owl_merge_assert(final SubLObject sentence) {
        return ke_assert_now(sentence, owl_to_cycl.owl_merge_mt(), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject merge_owl_class_with_collection_alt(SubLObject owl_class, SubLObject collection) {
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_merge_assert(list($$coExtensional, owl_class, collection));
    }

    public static SubLObject merge_owl_class_with_collection(final SubLObject owl_class, final SubLObject collection) {
        return owl_to_cycl.owl_merge_assert(list(owl_to_cycl.$$coExtensional, owl_class, collection));
    }

    public static final SubLObject merge_owl_term_with_cyc_term_alt(SubLObject owl_term, SubLObject cyc_term) {
        if ((NIL != fort_types_interface.isa_collectionP(owl_term, UNPROVIDED)) && (NIL != fort_types_interface.isa_collectionP(cyc_term, UNPROVIDED))) {
            return com.cyc.cycjava.cycl.owl.owl_to_cycl.merge_owl_class_with_collection(owl_term, cyc_term);
        } else {
            return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_merge_assert(list($$equals, owl_term, cyc_term));
        }
    }

    public static SubLObject merge_owl_term_with_cyc_term(final SubLObject owl_term, final SubLObject cyc_term) {
        if ((NIL != isa_collectionP(owl_term, UNPROVIDED)) && (NIL != isa_collectionP(cyc_term, UNPROVIDED))) {
            return owl_to_cycl.merge_owl_class_with_collection(owl_term, cyc_term);
        }
        return owl_to_cycl.owl_merge_assert(list(owl_to_cycl.$$equals, owl_term, cyc_term));
    }

    public static final SubLObject link_owl_class_down_to_collection_alt(SubLObject owl_class, SubLObject collection) {
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_merge_assert(list($$genls, collection, owl_class));
    }

    public static SubLObject link_owl_class_down_to_collection(final SubLObject owl_class, final SubLObject collection) {
        return owl_to_cycl.owl_merge_assert(list(owl_to_cycl.$$genls, collection, owl_class));
    }

    public static final SubLObject link_owl_class_up_to_collection_alt(SubLObject owl_class, SubLObject collection) {
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_merge_assert(list($$genls, owl_class, collection));
    }

    public static SubLObject link_owl_class_up_to_collection(final SubLObject owl_class, final SubLObject collection) {
        return owl_to_cycl.owl_merge_assert(list(owl_to_cycl.$$genls, owl_class, collection));
    }

    public static final SubLObject next_owl_term_to_merge_for_ontology_alt(SubLObject owl_ontology) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject v_term = NIL;
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                        mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                        {
                            SubLObject state = memoization_state.new_memoization_state(UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            SubLObject local_state = state;
                            {
                                SubLObject _prev_bind_0_44 = memoization_state.$memoization_state$.currentBinding(thread);
                                try {
                                    memoization_state.$memoization_state$.bind(local_state, thread);
                                    {
                                        SubLObject original_memoization_process = NIL;
                                        if ((NIL != local_state) && (NIL == memoization_state.memoization_state_lock(local_state))) {
                                            original_memoization_process = memoization_state.memoization_state_get_current_process_internal(local_state);
                                            {
                                                SubLObject current_proc = current_process();
                                                if (NIL == original_memoization_process) {
                                                    memoization_state.memoization_state_set_current_process_internal(local_state, current_proc);
                                                } else {
                                                    if (original_memoization_process != current_proc) {
                                                        Errors.error($str_alt17$Invalid_attempt_to_reuse_memoizat);
                                                    }
                                                }
                                            }
                                        }
                                        try {
                                            if (NIL == v_term) {
                                                {
                                                    SubLObject csome_list_var = Sort.sort(com.cyc.cycjava.cycl.owl.owl_to_cycl.root_classes_of_owl_ontology(owl_ontology), $sym7$_, MEMOIZED_COUNT_ALL_SPECS);
                                                    SubLObject v_class = NIL;
                                                    for (v_class = csome_list_var.first(); !((NIL != v_term) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , v_class = csome_list_var.first()) {
                                                        if (NIL == com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_class_merged_upwardP_via_index(v_class)) {
                                                            v_term = v_class;
                                                        }
                                                    }
                                                }
                                            }
                                        } finally {
                                            {
                                                SubLObject _prev_bind_0_45 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                try {
                                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                                    if ((NIL != local_state) && (NIL == original_memoization_process)) {
                                                        memoization_state.memoization_state_set_current_process_internal(local_state, NIL);
                                                    }
                                                } finally {
                                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_45, thread);
                                                }
                                            }
                                        }
                                    }
                                } finally {
                                    memoization_state.$memoization_state$.rebind(_prev_bind_0_44, thread);
                                }
                            }
                        }
                    } finally {
                        mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                    }
                }
                return v_term;
            }
        }
    }

    public static SubLObject next_owl_term_to_merge_for_ontology(final SubLObject owl_ontology) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject v_term = NIL;
        final SubLObject _prev_bind_0 = $relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = $mt$.currentBinding(thread);
        try {
            $relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
            $mt$.bind(owl_to_cycl.$$EverythingPSC, thread);
            final SubLObject local_state;
            final SubLObject state = local_state = new_memoization_state(UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            final SubLObject _prev_bind_0_$40 = $memoization_state$.currentBinding(thread);
            try {
                $memoization_state$.bind(local_state, thread);
                final SubLObject original_memoization_process = memoization_state_original_process(local_state);
                try {
                    if (NIL == v_term) {
                        SubLObject csome_list_var = Sort.sort(owl_to_cycl.root_classes_of_owl_ontology(owl_ontology), owl_to_cycl.$sym7$_, owl_to_cycl.MEMOIZED_COUNT_ALL_SPECS);
                        SubLObject v_class = NIL;
                        v_class = csome_list_var.first();
                        while ((NIL == v_term) && (NIL != csome_list_var)) {
                            if (NIL == owl_to_cycl.owl_class_merged_upwardP_via_index(v_class)) {
                                v_term = v_class;
                            }
                            csome_list_var = csome_list_var.rest();
                            v_class = csome_list_var.first();
                        } 
                    }
                } finally {
                    final SubLObject _prev_bind_0_$41 = $is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        $is_thread_performing_cleanupP$.bind(T, thread);
                        final SubLObject _values = getValuesAsVector();
                        memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                        restoreValuesFromVector(_values);
                    } finally {
                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$41, thread);
                    }
                }
            } finally {
                $memoization_state$.rebind(_prev_bind_0_$40, thread);
            }
        } finally {
            $mt$.rebind(_prev_bind_2, thread);
            $relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return v_term;
    }

    public static final SubLObject memoized_count_all_specs_internal_alt(SubLObject col) {
        return genls.count_all_specs(col, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject memoized_count_all_specs_internal(final SubLObject col) {
        return count_all_specs(col, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject memoized_count_all_specs_alt(SubLObject col) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
                SubLObject caching_state = NIL;
                if (NIL == v_memoization_state) {
                    return com.cyc.cycjava.cycl.owl.owl_to_cycl.memoized_count_all_specs_internal(col);
                }
                caching_state = memoization_state.memoization_state_lookup(v_memoization_state, MEMOIZED_COUNT_ALL_SPECS, UNPROVIDED);
                if (NIL == caching_state) {
                    caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), MEMOIZED_COUNT_ALL_SPECS, ONE_INTEGER, NIL, EQL, UNPROVIDED);
                    memoization_state.memoization_state_put(v_memoization_state, MEMOIZED_COUNT_ALL_SPECS, caching_state);
                }
                {
                    SubLObject results = memoization_state.caching_state_lookup(caching_state, col, $kw15$_MEMOIZED_ITEM_NOT_FOUND_);
                    if (results == $kw15$_MEMOIZED_ITEM_NOT_FOUND_) {
                        results = arg2(thread.resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.owl.owl_to_cycl.memoized_count_all_specs_internal(col)));
                        memoization_state.caching_state_put(caching_state, col, results, UNPROVIDED);
                    }
                    return memoization_state.caching_results(results);
                }
            }
        }
    }

    public static SubLObject memoized_count_all_specs(final SubLObject col) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_memoization_state = $memoization_state$.getDynamicValue(thread);
        SubLObject caching_state = NIL;
        if (NIL == v_memoization_state) {
            return owl_to_cycl.memoized_count_all_specs_internal(col);
        }
        caching_state = memoization_state_lookup(v_memoization_state, owl_to_cycl.MEMOIZED_COUNT_ALL_SPECS, UNPROVIDED);
        if (NIL == caching_state) {
            caching_state = create_caching_state(memoization_state_lock(v_memoization_state), owl_to_cycl.MEMOIZED_COUNT_ALL_SPECS, ONE_INTEGER, NIL, EQL, UNPROVIDED);
            memoization_state_put(v_memoization_state, owl_to_cycl.MEMOIZED_COUNT_ALL_SPECS, caching_state);
        }
        SubLObject results = caching_state_lookup(caching_state, col, $memoized_item_not_found$.getGlobalValue());
        if (results.eql($memoized_item_not_found$.getGlobalValue())) {
            results = arg2(thread.resetMultipleValues(), multiple_value_list(owl_to_cycl.memoized_count_all_specs_internal(col)));
            caching_state_put(caching_state, col, results, UNPROVIDED);
        }
        return caching_results(results);
    }

    public static final SubLObject longest_acyclic_genls_path_length_alt(SubLObject lower, SubLObject upper, SubLObject mt_info) {
        if (mt_info == UNPROVIDED) {
            mt_info = mt_relevance_macros.mt_info(UNPROVIDED);
        }
        {
            SubLObject longest_path = com.cyc.cycjava.cycl.owl.owl_to_cycl.longest_acyclic_genls_path(lower, upper, mt_info);
            return NIL != longest_path ? ((SubLObject) (length(longest_path))) : NIL;
        }
    }

    public static SubLObject longest_acyclic_genls_path_length(final SubLObject lower, final SubLObject upper, SubLObject mt_info) {
        if (mt_info == UNPROVIDED) {
            mt_info = mt_info(UNPROVIDED);
        }
        final SubLObject longest_path = owl_to_cycl.longest_acyclic_genls_path(lower, upper, mt_info);
        return NIL != longest_path ? length(longest_path) : NIL;
    }

    /**
     *
     *
     * @return listp -- the longest list of indexed collection terms from LOWER to UPPER (inclusive) such
    that each item on the list is a spec of the following one.
     */
    @LispMethod(comment = "@return listp -- the longest list of indexed collection terms from LOWER to UPPER (inclusive) such\r\nthat each item on the list is a spec of the following one.")
    public static final SubLObject longest_acyclic_genls_path_alt(SubLObject lower, SubLObject upper, SubLObject mt_info) {
        if (mt_info == UNPROVIDED) {
            mt_info = mt_relevance_macros.mt_info(UNPROVIDED);
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(lower, $sym39$ISA_COLLECTION_);
            SubLTrampolineFile.checkType(upper, $sym39$ISA_COLLECTION_);
            {
                SubLObject path = NIL;
                if (NIL != mt_relevance_macros.mt_function_eq(mt_info, RELEVANT_MT_IS_EVERYTHING)) {
                    {
                        SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                        SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                        try {
                            mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                            mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                            if ((upper == $$Thing) || (NIL != genls.genlP(lower, upper, UNPROVIDED, UNPROVIDED))) {
                                {
                                    SubLObject state = memoization_state.new_memoization_state(UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    SubLObject local_state = state;
                                    {
                                        SubLObject _prev_bind_0_46 = memoization_state.$memoization_state$.currentBinding(thread);
                                        try {
                                            memoization_state.$memoization_state$.bind(local_state, thread);
                                            {
                                                SubLObject original_memoization_process = NIL;
                                                if ((NIL != local_state) && (NIL == memoization_state.memoization_state_lock(local_state))) {
                                                    original_memoization_process = memoization_state.memoization_state_get_current_process_internal(local_state);
                                                    {
                                                        SubLObject current_proc = current_process();
                                                        if (NIL == original_memoization_process) {
                                                            memoization_state.memoization_state_set_current_process_internal(local_state, current_proc);
                                                        } else {
                                                            if (original_memoization_process != current_proc) {
                                                                Errors.error($str_alt17$Invalid_attempt_to_reuse_memoizat);
                                                            }
                                                        }
                                                    }
                                                }
                                                try {
                                                    path = com.cyc.cycjava.cycl.owl.owl_to_cycl.longest_acyclic_genls_path_internal(lower, upper, NIL);
                                                } finally {
                                                    {
                                                        SubLObject _prev_bind_0_47 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                        try {
                                                            $is_thread_performing_cleanupP$.bind(T, thread);
                                                            if ((NIL != local_state) && (NIL == original_memoization_process)) {
                                                                memoization_state.memoization_state_set_current_process_internal(local_state, NIL);
                                                            }
                                                        } finally {
                                                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_47, thread);
                                                        }
                                                    }
                                                }
                                            }
                                        } finally {
                                            memoization_state.$memoization_state$.rebind(_prev_bind_0_46, thread);
                                        }
                                    }
                                }
                            }
                        } finally {
                            mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
                            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                        }
                    }
                } else {
                    if (NIL != mt_relevance_macros.mt_function_eq(mt_info, RELEVANT_MT_IS_ANY_MT)) {
                        {
                            SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                            SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                            try {
                                mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_ANY_MT, thread);
                                mt_relevance_macros.$mt$.bind($$InferencePSC, thread);
                                if ((upper == $$Thing) || (NIL != genls.genlP(lower, upper, UNPROVIDED, UNPROVIDED))) {
                                    {
                                        SubLObject state = memoization_state.new_memoization_state(UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        SubLObject local_state = state;
                                        {
                                            SubLObject _prev_bind_0_48 = memoization_state.$memoization_state$.currentBinding(thread);
                                            try {
                                                memoization_state.$memoization_state$.bind(local_state, thread);
                                                {
                                                    SubLObject original_memoization_process = NIL;
                                                    if ((NIL != local_state) && (NIL == memoization_state.memoization_state_lock(local_state))) {
                                                        original_memoization_process = memoization_state.memoization_state_get_current_process_internal(local_state);
                                                        {
                                                            SubLObject current_proc = current_process();
                                                            if (NIL == original_memoization_process) {
                                                                memoization_state.memoization_state_set_current_process_internal(local_state, current_proc);
                                                            } else {
                                                                if (original_memoization_process != current_proc) {
                                                                    Errors.error($str_alt17$Invalid_attempt_to_reuse_memoizat);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    try {
                                                        path = com.cyc.cycjava.cycl.owl.owl_to_cycl.longest_acyclic_genls_path_internal(lower, upper, NIL);
                                                    } finally {
                                                        {
                                                            SubLObject _prev_bind_0_49 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                            try {
                                                                $is_thread_performing_cleanupP$.bind(T, thread);
                                                                if ((NIL != local_state) && (NIL == original_memoization_process)) {
                                                                    memoization_state.memoization_state_set_current_process_internal(local_state, NIL);
                                                                }
                                                            } finally {
                                                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_49, thread);
                                                            }
                                                        }
                                                    }
                                                }
                                            } finally {
                                                memoization_state.$memoization_state$.rebind(_prev_bind_0_48, thread);
                                            }
                                        }
                                    }
                                }
                            } finally {
                                mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                            }
                        }
                    } else {
                        if (NIL != hlmt.mt_union_naut_p(mt_info)) {
                            {
                                SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_GENL_MT_OF_LIST_MEMBER, thread);
                                    mt_relevance_macros.$relevant_mts$.bind(hlmt.mt_union_mts(mt_info), thread);
                                    if ((upper == $$Thing) || (NIL != genls.genlP(lower, upper, UNPROVIDED, UNPROVIDED))) {
                                        {
                                            SubLObject state = memoization_state.new_memoization_state(UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            SubLObject local_state = state;
                                            {
                                                SubLObject _prev_bind_0_50 = memoization_state.$memoization_state$.currentBinding(thread);
                                                try {
                                                    memoization_state.$memoization_state$.bind(local_state, thread);
                                                    {
                                                        SubLObject original_memoization_process = NIL;
                                                        if ((NIL != local_state) && (NIL == memoization_state.memoization_state_lock(local_state))) {
                                                            original_memoization_process = memoization_state.memoization_state_get_current_process_internal(local_state);
                                                            {
                                                                SubLObject current_proc = current_process();
                                                                if (NIL == original_memoization_process) {
                                                                    memoization_state.memoization_state_set_current_process_internal(local_state, current_proc);
                                                                } else {
                                                                    if (original_memoization_process != current_proc) {
                                                                        Errors.error($str_alt17$Invalid_attempt_to_reuse_memoizat);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        try {
                                                            path = com.cyc.cycjava.cycl.owl.owl_to_cycl.longest_acyclic_genls_path_internal(lower, upper, NIL);
                                                        } finally {
                                                            {
                                                                SubLObject _prev_bind_0_51 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                                try {
                                                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                                                    if ((NIL != local_state) && (NIL == original_memoization_process)) {
                                                                        memoization_state.memoization_state_set_current_process_internal(local_state, NIL);
                                                                    }
                                                                } finally {
                                                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_51, thread);
                                                                }
                                                            }
                                                        }
                                                    }
                                                } finally {
                                                    memoization_state.$memoization_state$.rebind(_prev_bind_0_50, thread);
                                                }
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_1, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                                }
                            }
                        } else {
                            {
                                SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_GENL_MT, thread);
                                    mt_relevance_macros.$mt$.bind(mt_info, thread);
                                    if ((upper == $$Thing) || (NIL != genls.genlP(lower, upper, UNPROVIDED, UNPROVIDED))) {
                                        {
                                            SubLObject state = memoization_state.new_memoization_state(UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            SubLObject local_state = state;
                                            {
                                                SubLObject _prev_bind_0_52 = memoization_state.$memoization_state$.currentBinding(thread);
                                                try {
                                                    memoization_state.$memoization_state$.bind(local_state, thread);
                                                    {
                                                        SubLObject original_memoization_process = NIL;
                                                        if ((NIL != local_state) && (NIL == memoization_state.memoization_state_lock(local_state))) {
                                                            original_memoization_process = memoization_state.memoization_state_get_current_process_internal(local_state);
                                                            {
                                                                SubLObject current_proc = current_process();
                                                                if (NIL == original_memoization_process) {
                                                                    memoization_state.memoization_state_set_current_process_internal(local_state, current_proc);
                                                                } else {
                                                                    if (original_memoization_process != current_proc) {
                                                                        Errors.error($str_alt17$Invalid_attempt_to_reuse_memoizat);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        try {
                                                            path = com.cyc.cycjava.cycl.owl.owl_to_cycl.longest_acyclic_genls_path_internal(lower, upper, NIL);
                                                        } finally {
                                                            {
                                                                SubLObject _prev_bind_0_53 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                                try {
                                                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                                                    if ((NIL != local_state) && (NIL == original_memoization_process)) {
                                                                        memoization_state.memoization_state_set_current_process_internal(local_state, NIL);
                                                                    }
                                                                } finally {
                                                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_53, thread);
                                                                }
                                                            }
                                                        }
                                                    }
                                                } finally {
                                                    memoization_state.$memoization_state$.rebind(_prev_bind_0_52, thread);
                                                }
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                                }
                            }
                        }
                    }
                }
                return path;
            }
        }
    }

    /**
     *
     *
     * @return listp -- the longest list of indexed collection terms from LOWER to UPPER (inclusive) such
    that each item on the list is a spec of the following one.
     */
    @LispMethod(comment = "@return listp -- the longest list of indexed collection terms from LOWER to UPPER (inclusive) such\r\nthat each item on the list is a spec of the following one.")
    public static SubLObject longest_acyclic_genls_path(final SubLObject lower, final SubLObject upper, SubLObject mt_info) {
        if (mt_info == UNPROVIDED) {
            mt_info = mt_info(UNPROVIDED);
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != isa_collectionP(lower, UNPROVIDED) : "! fort_types_interface.isa_collectionP(lower, .UNPROVIDED) " + ("fort_types_interface.isa_collectionP(lower, CommonSymbols.UNPROVIDED) " + "CommonSymbols.NIL != fort_types_interface.isa_collectionP(lower, CommonSymbols.UNPROVIDED) ") + lower;
        assert NIL != isa_collectionP(upper, UNPROVIDED) : "! fort_types_interface.isa_collectionP(upper, .UNPROVIDED) " + ("fort_types_interface.isa_collectionP(upper, CommonSymbols.UNPROVIDED) " + "CommonSymbols.NIL != fort_types_interface.isa_collectionP(upper, CommonSymbols.UNPROVIDED) ") + upper;
        SubLObject path = NIL;
        if (NIL != mt_function_eq(mt_info, RELEVANT_MT_IS_EVERYTHING)) {
            final SubLObject _prev_bind_0 = $relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2 = $mt$.currentBinding(thread);
            try {
                $relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                $mt$.bind(owl_to_cycl.$$EverythingPSC, thread);
                if (upper.eql(owl_to_cycl.$$Thing) || (NIL != genlP(lower, upper, UNPROVIDED, UNPROVIDED))) {
                    final SubLObject local_state;
                    final SubLObject state = local_state = new_memoization_state(UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    final SubLObject _prev_bind_0_$42 = $memoization_state$.currentBinding(thread);
                    try {
                        $memoization_state$.bind(local_state, thread);
                        final SubLObject original_memoization_process = memoization_state_original_process(local_state);
                        try {
                            path = owl_to_cycl.longest_acyclic_genls_path_internal(lower, upper, NIL);
                        } finally {
                            final SubLObject _prev_bind_0_$43 = $is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                $is_thread_performing_cleanupP$.bind(T, thread);
                                final SubLObject _values = getValuesAsVector();
                                memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                                restoreValuesFromVector(_values);
                            } finally {
                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$43, thread);
                            }
                        }
                    } finally {
                        $memoization_state$.rebind(_prev_bind_0_$42, thread);
                    }
                }
            } finally {
                $mt$.rebind(_prev_bind_2, thread);
                $relevant_mt_function$.rebind(_prev_bind_0, thread);
            }
        } else
            if (NIL != mt_function_eq(mt_info, RELEVANT_MT_IS_ANY_MT)) {
                final SubLObject _prev_bind_0 = $relevant_mt_function$.currentBinding(thread);
                final SubLObject _prev_bind_2 = $mt$.currentBinding(thread);
                try {
                    $relevant_mt_function$.bind(RELEVANT_MT_IS_ANY_MT, thread);
                    $mt$.bind(owl_to_cycl.$$InferencePSC, thread);
                    if (upper.eql(owl_to_cycl.$$Thing) || (NIL != genlP(lower, upper, UNPROVIDED, UNPROVIDED))) {
                        final SubLObject local_state;
                        final SubLObject state = local_state = new_memoization_state(UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        final SubLObject _prev_bind_0_$44 = $memoization_state$.currentBinding(thread);
                        try {
                            $memoization_state$.bind(local_state, thread);
                            final SubLObject original_memoization_process = memoization_state_original_process(local_state);
                            try {
                                path = owl_to_cycl.longest_acyclic_genls_path_internal(lower, upper, NIL);
                            } finally {
                                final SubLObject _prev_bind_0_$45 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                    final SubLObject _values2 = getValuesAsVector();
                                    memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                                    restoreValuesFromVector(_values2);
                                } finally {
                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$45, thread);
                                }
                            }
                        } finally {
                            $memoization_state$.rebind(_prev_bind_0_$44, thread);
                        }
                    }
                } finally {
                    $mt$.rebind(_prev_bind_2, thread);
                    $relevant_mt_function$.rebind(_prev_bind_0, thread);
                }
            } else
                if (NIL != mt_union_naut_p(mt_info)) {
                    final SubLObject _prev_bind_0 = $relevant_mt_function$.currentBinding(thread);
                    final SubLObject _prev_bind_2 = $relevant_mts$.currentBinding(thread);
                    try {
                        $relevant_mt_function$.bind(RELEVANT_MT_IS_GENL_MT_OF_LIST_MEMBER, thread);
                        $relevant_mts$.bind(mt_union_mts(mt_info), thread);
                        if (upper.eql(owl_to_cycl.$$Thing) || (NIL != genlP(lower, upper, UNPROVIDED, UNPROVIDED))) {
                            final SubLObject local_state;
                            final SubLObject state = local_state = new_memoization_state(UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            final SubLObject _prev_bind_0_$46 = $memoization_state$.currentBinding(thread);
                            try {
                                $memoization_state$.bind(local_state, thread);
                                final SubLObject original_memoization_process = memoization_state_original_process(local_state);
                                try {
                                    path = owl_to_cycl.longest_acyclic_genls_path_internal(lower, upper, NIL);
                                } finally {
                                    final SubLObject _prev_bind_0_$47 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        $is_thread_performing_cleanupP$.bind(T, thread);
                                        final SubLObject _values3 = getValuesAsVector();
                                        memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                                        restoreValuesFromVector(_values3);
                                    } finally {
                                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$47, thread);
                                    }
                                }
                            } finally {
                                $memoization_state$.rebind(_prev_bind_0_$46, thread);
                            }
                        }
                    } finally {
                        $relevant_mts$.rebind(_prev_bind_2, thread);
                        $relevant_mt_function$.rebind(_prev_bind_0, thread);
                    }
                } else {
                    final SubLObject _prev_bind_0 = $relevant_mt_function$.currentBinding(thread);
                    final SubLObject _prev_bind_2 = $mt$.currentBinding(thread);
                    try {
                        $relevant_mt_function$.bind(RELEVANT_MT_IS_GENL_MT, thread);
                        $mt$.bind(mt_info, thread);
                        if (upper.eql(owl_to_cycl.$$Thing) || (NIL != genlP(lower, upper, UNPROVIDED, UNPROVIDED))) {
                            final SubLObject local_state;
                            final SubLObject state = local_state = new_memoization_state(UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            final SubLObject _prev_bind_0_$48 = $memoization_state$.currentBinding(thread);
                            try {
                                $memoization_state$.bind(local_state, thread);
                                final SubLObject original_memoization_process = memoization_state_original_process(local_state);
                                try {
                                    path = owl_to_cycl.longest_acyclic_genls_path_internal(lower, upper, NIL);
                                } finally {
                                    final SubLObject _prev_bind_0_$49 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        $is_thread_performing_cleanupP$.bind(T, thread);
                                        final SubLObject _values4 = getValuesAsVector();
                                        memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                                        restoreValuesFromVector(_values4);
                                    } finally {
                                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$49, thread);
                                    }
                                }
                            } finally {
                                $memoization_state$.rebind(_prev_bind_0_$48, thread);
                            }
                        }
                    } finally {
                        $mt$.rebind(_prev_bind_2, thread);
                        $relevant_mt_function$.rebind(_prev_bind_0, thread);
                    }
                }


        return path;
    }

    /**
     *
     *
     * @unknown -- Assumes mt visibility is set from outside.
     */
    @LispMethod(comment = "@unknown -- Assumes mt visibility is set from outside.")
    public static final SubLObject longest_acyclic_genls_path_internal_internal_alt(SubLObject lower, SubLObject upper, SubLObject path_down_from_lower) {
        {
            SubLObject longest_path = NIL;
            if ((upper == $$Thing) || (NIL != genls.genlP(lower, upper, UNPROVIDED, UNPROVIDED))) {
                {
                    SubLObject min_genls = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_min_genls_memoized(lower);
                    if (NIL != list_utilities.empty_list_p(set_difference(min_genls, path_down_from_lower, symbol_function(EQUAL), UNPROVIDED))) {
                        min_genls = genls.min_cols(set_difference(genls.all_genls(lower, UNPROVIDED, UNPROVIDED), cons(lower, min_genls), UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED);
                    }
                    {
                        SubLObject cdolist_list_var = min_genls;
                        SubLObject genl = NIL;
                        for (genl = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , genl = cdolist_list_var.first()) {
                            if (NIL != find(genl, path_down_from_lower, symbol_function(EQUAL), UNPROVIDED, UNPROVIDED, UNPROVIDED)) {
                            } else {
                                if (genl.equal(upper)) {
                                    if (NIL == longest_path) {
                                        longest_path = list(lower, upper);
                                    }
                                } else {
                                    {
                                        SubLObject subpath = com.cyc.cycjava.cycl.owl.owl_to_cycl.longest_acyclic_genls_path_internal(genl, upper, cons(lower, path_down_from_lower));
                                        if (!((NIL == subpath) || (NIL != list_utilities.greater_length_p(longest_path, subpath)))) {
                                            longest_path = cons(lower, subpath);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return longest_path;
        }
    }

    /**
     *
     *
     * @unknown -- Assumes mt visibility is set from outside.
     */
    @LispMethod(comment = "@unknown -- Assumes mt visibility is set from outside.")
    public static SubLObject longest_acyclic_genls_path_internal_internal(final SubLObject lower, final SubLObject upper, final SubLObject path_down_from_lower) {
        SubLObject longest_path = NIL;
        if (upper.eql(owl_to_cycl.$$Thing) || (NIL != genlP(lower, upper, UNPROVIDED, UNPROVIDED))) {
            SubLObject min_genls = owl_to_cycl.owl_min_genls_memoized(lower);
            if (NIL != empty_list_p(set_difference(min_genls, path_down_from_lower, symbol_function(EQUAL), UNPROVIDED))) {
                min_genls = min_cols(set_difference(all_genls(lower, UNPROVIDED, UNPROVIDED), cons(lower, min_genls), UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED);
            }
            SubLObject cdolist_list_var = min_genls;
            SubLObject genl = NIL;
            genl = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                if (NIL == find(genl, path_down_from_lower, symbol_function(EQUAL), UNPROVIDED, UNPROVIDED, UNPROVIDED)) {
                    if (genl.equal(upper)) {
                        if (NIL == longest_path) {
                            longest_path = list(lower, upper);
                        }
                    } else {
                        final SubLObject subpath = owl_to_cycl.longest_acyclic_genls_path_internal(genl, upper, cons(lower, path_down_from_lower));
                        if ((NIL != subpath) && (NIL == greater_length_p(longest_path, subpath))) {
                            longest_path = cons(lower, subpath);
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                genl = cdolist_list_var.first();
            } 
        }
        return longest_path;
    }

    public static final SubLObject longest_acyclic_genls_path_internal_alt(SubLObject lower, SubLObject upper, SubLObject path_down_from_lower) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
                SubLObject caching_state = NIL;
                if (NIL == v_memoization_state) {
                    return com.cyc.cycjava.cycl.owl.owl_to_cycl.longest_acyclic_genls_path_internal_internal(lower, upper, path_down_from_lower);
                }
                caching_state = memoization_state.memoization_state_lookup(v_memoization_state, LONGEST_ACYCLIC_GENLS_PATH_INTERNAL, UNPROVIDED);
                if (NIL == caching_state) {
                    caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), LONGEST_ACYCLIC_GENLS_PATH_INTERNAL, THREE_INTEGER, NIL, EQUAL, UNPROVIDED);
                    memoization_state.memoization_state_put(v_memoization_state, LONGEST_ACYCLIC_GENLS_PATH_INTERNAL, caching_state);
                }
                {
                    SubLObject sxhash = memoization_state.sxhash_calc_3(lower, upper, path_down_from_lower);
                    SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
                    if (collisions != $kw15$_MEMOIZED_ITEM_NOT_FOUND_) {
                        {
                            SubLObject cdolist_list_var = collisions;
                            SubLObject collision = NIL;
                            for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , collision = cdolist_list_var.first()) {
                                {
                                    SubLObject cached_args = collision.first();
                                    SubLObject results2 = second(collision);
                                    if (lower.equal(cached_args.first())) {
                                        cached_args = cached_args.rest();
                                        if (upper.equal(cached_args.first())) {
                                            cached_args = cached_args.rest();
                                            if (((NIL != cached_args) && (NIL == cached_args.rest())) && path_down_from_lower.equal(cached_args.first())) {
                                                return memoization_state.caching_results(results2);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    {
                        SubLObject results = arg2(thread.resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.owl.owl_to_cycl.longest_acyclic_genls_path_internal_internal(lower, upper, path_down_from_lower)));
                        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(lower, upper, path_down_from_lower));
                        return memoization_state.caching_results(results);
                    }
                }
            }
        }
    }

    public static SubLObject longest_acyclic_genls_path_internal(final SubLObject lower, final SubLObject upper, final SubLObject path_down_from_lower) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_memoization_state = $memoization_state$.getDynamicValue(thread);
        SubLObject caching_state = NIL;
        if (NIL == v_memoization_state) {
            return owl_to_cycl.longest_acyclic_genls_path_internal_internal(lower, upper, path_down_from_lower);
        }
        caching_state = memoization_state_lookup(v_memoization_state, owl_to_cycl.LONGEST_ACYCLIC_GENLS_PATH_INTERNAL, UNPROVIDED);
        if (NIL == caching_state) {
            caching_state = create_caching_state(memoization_state_lock(v_memoization_state), owl_to_cycl.LONGEST_ACYCLIC_GENLS_PATH_INTERNAL, THREE_INTEGER, NIL, EQUAL, UNPROVIDED);
            memoization_state_put(v_memoization_state, owl_to_cycl.LONGEST_ACYCLIC_GENLS_PATH_INTERNAL, caching_state);
        }
        final SubLObject sxhash = sxhash_calc_3(lower, upper, path_down_from_lower);
        final SubLObject collisions = caching_state_lookup(caching_state, sxhash, UNPROVIDED);
        if (!collisions.eql($memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = NIL;
            collision = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = second(collision);
                if (lower.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (upper.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (((NIL != cached_args) && (NIL == cached_args.rest())) && path_down_from_lower.equal(cached_args.first())) {
                            return caching_results(results2);
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            } 
        }
        final SubLObject results3 = arg2(thread.resetMultipleValues(), multiple_value_list(owl_to_cycl.longest_acyclic_genls_path_internal_internal(lower, upper, path_down_from_lower)));
        caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(lower, upper, path_down_from_lower));
        return caching_results(results3);
    }

    public static final SubLObject owl_min_genls_memoized_internal_alt(SubLObject col) {
        return genls.min_genls(col, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject owl_min_genls_memoized_internal(final SubLObject col) {
        return min_genls(col, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject owl_min_genls_memoized_alt(SubLObject col) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
                SubLObject caching_state = NIL;
                if (NIL == v_memoization_state) {
                    return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_min_genls_memoized_internal(col);
                }
                caching_state = memoization_state.memoization_state_lookup(v_memoization_state, OWL_MIN_GENLS_MEMOIZED, UNPROVIDED);
                if (NIL == caching_state) {
                    caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), OWL_MIN_GENLS_MEMOIZED, ONE_INTEGER, NIL, EQ, UNPROVIDED);
                    memoization_state.memoization_state_put(v_memoization_state, OWL_MIN_GENLS_MEMOIZED, caching_state);
                }
                {
                    SubLObject results = memoization_state.caching_state_lookup(caching_state, col, $kw15$_MEMOIZED_ITEM_NOT_FOUND_);
                    if (results == $kw15$_MEMOIZED_ITEM_NOT_FOUND_) {
                        results = arg2(thread.resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_min_genls_memoized_internal(col)));
                        memoization_state.caching_state_put(caching_state, col, results, UNPROVIDED);
                    }
                    return memoization_state.caching_results(results);
                }
            }
        }
    }

    public static SubLObject owl_min_genls_memoized(final SubLObject col) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_memoization_state = $memoization_state$.getDynamicValue(thread);
        SubLObject caching_state = NIL;
        if (NIL == v_memoization_state) {
            return owl_to_cycl.owl_min_genls_memoized_internal(col);
        }
        caching_state = memoization_state_lookup(v_memoization_state, owl_to_cycl.OWL_MIN_GENLS_MEMOIZED, UNPROVIDED);
        if (NIL == caching_state) {
            caching_state = create_caching_state(memoization_state_lock(v_memoization_state), owl_to_cycl.OWL_MIN_GENLS_MEMOIZED, ONE_INTEGER, NIL, EQ, UNPROVIDED);
            memoization_state_put(v_memoization_state, owl_to_cycl.OWL_MIN_GENLS_MEMOIZED, caching_state);
        }
        SubLObject results = caching_state_lookup(caching_state, col, $memoized_item_not_found$.getGlobalValue());
        if (results.eql($memoized_item_not_found$.getGlobalValue())) {
            results = arg2(thread.resetMultipleValues(), multiple_value_list(owl_to_cycl.owl_min_genls_memoized_internal(col)));
            caching_state_put(caching_state, col, results, UNPROVIDED);
        }
        return caching_results(results);
    }

    /**
     *
     *
     * @return LISTP; a tree representing the genls hierarcy (with cycles pruned) rooted at ROOT going
    in DIRECTION to at most MAX-DEPTH levels below/above ROOT.
     * @unknown -- Move to KB-UTILITIES or someplace like that.
     */
    @LispMethod(comment = "@return LISTP; a tree representing the genls hierarcy (with cycles pruned) rooted at ROOT going\r\nin DIRECTION to at most MAX-DEPTH levels below/above ROOT.\r\n@unknown -- Move to KB-UTILITIES or someplace like that.")
    public static final SubLObject genls_tree_with_root_via_index_alt(SubLObject root, SubLObject direction, SubLObject max_depth) {
        if (direction == UNPROVIDED) {
            direction = $UP;
        }
        if (max_depth == UNPROVIDED) {
            max_depth = TWO_INTEGER;
        }
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.genls_tree_with_root_via_index_internal(root, direction, max_depth, NIL);
    }

    /**
     *
     *
     * @return LISTP; a tree representing the genls hierarcy (with cycles pruned) rooted at ROOT going
    in DIRECTION to at most MAX-DEPTH levels below/above ROOT.
     * @unknown -- Move to KB-UTILITIES or someplace like that.
     */
    @LispMethod(comment = "@return LISTP; a tree representing the genls hierarcy (with cycles pruned) rooted at ROOT going\r\nin DIRECTION to at most MAX-DEPTH levels below/above ROOT.\r\n@unknown -- Move to KB-UTILITIES or someplace like that.")
    public static SubLObject genls_tree_with_root_via_index(final SubLObject root, SubLObject direction, SubLObject max_depth) {
        if (direction == UNPROVIDED) {
            direction = $UP;
        }
        if (max_depth == UNPROVIDED) {
            max_depth = TWO_INTEGER;
        }
        return owl_to_cycl.genls_tree_with_root_via_index_internal(root, direction, max_depth, NIL);
    }

    public static final SubLObject genls_tree_with_root_via_index_internal_alt(SubLObject root, SubLObject direction, SubLObject max_depth, SubLObject path) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject subtrees = NIL;
                if ((NIL == max_depth) || max_depth.isPositive()) {
                    {
                        SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                        SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                        try {
                            mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                            mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                            {
                                SubLObject cdolist_list_var = (direction == $UP) ? ((SubLObject) (genls.min_genls(root, UNPROVIDED, UNPROVIDED))) : genls.max_specs(root, UNPROVIDED, UNPROVIDED);
                                SubLObject child = NIL;
                                for (child = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , child = cdolist_list_var.first()) {
                                    if (NIL == find(child, path, symbol_function(EQUAL), UNPROVIDED, UNPROVIDED, UNPROVIDED)) {
                                        subtrees = cons(com.cyc.cycjava.cycl.owl.owl_to_cycl.genls_tree_with_root_via_index_internal(child, direction, NIL != max_depth ? ((SubLObject) (number_utilities.f_1_(max_depth))) : NIL, cons(root, path)), subtrees);
                                    }
                                }
                            }
                        } finally {
                            mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
                            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                        }
                    }
                }
                return cons(root, subtrees);
            }
        }
    }

    public static SubLObject genls_tree_with_root_via_index_internal(final SubLObject root, final SubLObject direction, final SubLObject max_depth, final SubLObject path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject subtrees = NIL;
        if ((NIL == max_depth) || max_depth.isPositive()) {
            final SubLObject _prev_bind_0 = $relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2 = $mt$.currentBinding(thread);
            try {
                $relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                $mt$.bind(owl_to_cycl.$$EverythingPSC, thread);
                SubLObject cdolist_list_var = (direction == $UP) ? min_genls(root, UNPROVIDED, UNPROVIDED) : max_specs(root, UNPROVIDED, UNPROVIDED);
                SubLObject child = NIL;
                child = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    if (NIL == find(child, path, symbol_function(EQUAL), UNPROVIDED, UNPROVIDED, UNPROVIDED)) {
                        subtrees = cons(owl_to_cycl.genls_tree_with_root_via_index_internal(child, direction, NIL != max_depth ? f_1_(max_depth) : NIL, cons(root, path)), subtrees);
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    child = cdolist_list_var.first();
                } 
            } finally {
                $mt$.rebind(_prev_bind_2, thread);
                $relevant_mt_function$.rebind(_prev_bind_0, thread);
            }
        }
        return cons(root, subtrees);
    }

    /**
     *
     *
     * @return LISTP of the maximal superclasses of classes in OWL-ONTOLOGY, using index surfing.
    Assumes all classes in the ontology are related to it via #$synonymousExternalConcept, and
    their hierarchy is implemented via #$genls.
     */
    @LispMethod(comment = "@return LISTP of the maximal superclasses of classes in OWL-ONTOLOGY, using index surfing.\r\nAssumes all classes in the ontology are related to it via #$synonymousExternalConcept, and\r\ntheir hierarchy is implemented via #$genls.")
    public static final SubLObject root_classes_of_owl_ontology_via_index_alt(SubLObject owl_ontology) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject all_classes = com.cyc.cycjava.cycl.owl.owl_to_cycl.all_classes_of_owl_ontology_via_index(owl_ontology);
                SubLObject roots = NIL;
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                        mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                        roots = genls.max_cols(all_classes, UNPROVIDED, UNPROVIDED);
                    } finally {
                        mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                    }
                }
                return roots;
            }
        }
    }

    /**
     *
     *
     * @return LISTP of the maximal superclasses of classes in OWL-ONTOLOGY, using index surfing.
    Assumes all classes in the ontology are related to it via #$synonymousExternalConcept, and
    their hierarchy is implemented via #$genls.
     */
    @LispMethod(comment = "@return LISTP of the maximal superclasses of classes in OWL-ONTOLOGY, using index surfing.\r\nAssumes all classes in the ontology are related to it via #$synonymousExternalConcept, and\r\ntheir hierarchy is implemented via #$genls.")
    public static SubLObject root_classes_of_owl_ontology_via_index(final SubLObject owl_ontology) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject all_classes = owl_to_cycl.all_classes_of_owl_ontology_via_index(owl_ontology);
        SubLObject roots = NIL;
        final SubLObject _prev_bind_0 = $relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = $mt$.currentBinding(thread);
        try {
            $relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
            $mt$.bind(owl_to_cycl.$$EverythingPSC, thread);
            roots = max_cols(all_classes, UNPROVIDED, UNPROVIDED);
        } finally {
            $mt$.rebind(_prev_bind_2, thread);
            $relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return roots;
    }

    public static final SubLObject guess_forts_from_owl_term_name_alt(SubLObject owl_term_name) {
        {
            SubLObject terms = com.cyc.cycjava.cycl.owl.owl_to_cycl.guess_forts_from_owl_term_name_non_partitioned(owl_term_name);
            return com.cyc.cycjava.cycl.owl.owl_to_cycl.partition_cycl_terms_for_owl_term_name(terms, owl_term_name);
        }
    }

    public static SubLObject guess_forts_from_owl_term_name(final SubLObject owl_term_name) {
        final SubLObject terms = owl_to_cycl.guess_forts_from_owl_term_name_non_partitioned(owl_term_name);
        return owl_to_cycl.partition_cycl_terms_for_owl_term_name(terms, owl_term_name);
    }

    public static final SubLObject guess_forts_from_owl_term_name_non_partitioned_alt(SubLObject owl_term_name) {
        {
            SubLObject terms = NIL;
            SubLObject constant = constants_high.find_constant(owl_term_name);
            if (NIL != constant) {
                terms = cons(constant, terms);
            }
            {
                SubLObject cdolist_list_var = lexicon_accessors.denots_of_string(owl_term_name, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                SubLObject denot = NIL;
                for (denot = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , denot = cdolist_list_var.first()) {
                    {
                        SubLObject item_var = denot;
                        if (NIL == member(item_var, terms, symbol_function(EQUAL), symbol_function(IDENTITY))) {
                            terms = cons(item_var, terms);
                        }
                    }
                }
            }
            {
                SubLObject spaced = string_utilities.space_dont_uncapitalize(owl_term_name);
                if (!spaced.equal(owl_term_name)) {
                    {
                        SubLObject cdolist_list_var = string_utilities.sub_phrases(spaced);
                        SubLObject string = NIL;
                        for (string = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , string = cdolist_list_var.first()) {
                            {
                                SubLObject cdolist_list_var_54 = lexicon_accessors.denots_of_string(string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                SubLObject denot = NIL;
                                for (denot = cdolist_list_var_54.first(); NIL != cdolist_list_var_54; cdolist_list_var_54 = cdolist_list_var_54.rest() , denot = cdolist_list_var_54.first()) {
                                    {
                                        SubLObject item_var = denot;
                                        if (NIL == member(item_var, terms, symbol_function(EQUAL), symbol_function(IDENTITY))) {
                                            terms = cons(item_var, terms);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if ((NIL != lower_case_p(string_utilities.first_char(owl_term_name))) && (NIL == morphology.plural_nounP(owl_term_name))) {
                {
                    SubLObject plural = lexification_utilities.pluralize_word(owl_term_name);
                    if (!plural.equal(owl_term_name)) {
                        {
                            SubLObject cdolist_list_var = com.cyc.cycjava.cycl.owl.owl_to_cycl.guess_forts_from_owl_term_name_non_partitioned(plural);
                            SubLObject v_term = NIL;
                            for (v_term = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , v_term = cdolist_list_var.first()) {
                                {
                                    SubLObject item_var = v_term;
                                    if (NIL == member(item_var, terms, symbol_function(EQUAL), symbol_function(IDENTITY))) {
                                        terms = cons(item_var, terms);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            {
                SubLObject cdolist_list_var = $list_alt47;
                SubLObject prefix = NIL;
                for (prefix = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , prefix = cdolist_list_var.first()) {
                    if (NIL != string_utilities.starts_with(owl_term_name, prefix)) {
                        {
                            SubLObject non_prefixed = string_utilities.substring(owl_term_name, length(prefix), UNPROVIDED);
                            SubLObject downcased = string_utilities.downcase_leading(non_prefixed);
                            SubLObject cdolist_list_var_55 = com.cyc.cycjava.cycl.owl.owl_to_cycl.guess_forts_from_owl_term_name_non_partitioned(downcased);
                            SubLObject v_term = NIL;
                            for (v_term = cdolist_list_var_55.first(); NIL != cdolist_list_var_55; cdolist_list_var_55 = cdolist_list_var_55.rest() , v_term = cdolist_list_var_55.first()) {
                                {
                                    SubLObject item_var = v_term;
                                    if (NIL == member(item_var, terms, symbol_function(EQUAL), symbol_function(IDENTITY))) {
                                        terms = cons(item_var, terms);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (NIL != string_utilities.ends_with(owl_term_name, $$$Of, UNPROVIDED)) {
                {
                    SubLObject non_of = string_utilities.substring(owl_term_name, ZERO_INTEGER, subtract(length(owl_term_name), TWO_INTEGER));
                    SubLObject cdolist_list_var = com.cyc.cycjava.cycl.owl.owl_to_cycl.guess_forts_from_owl_term_name_non_partitioned(non_of);
                    SubLObject v_term = NIL;
                    for (v_term = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , v_term = cdolist_list_var.first()) {
                        {
                            SubLObject item_var = v_term;
                            if (NIL == member(item_var, terms, symbol_function(EQUAL), symbol_function(IDENTITY))) {
                                terms = cons(item_var, terms);
                            }
                        }
                    }
                }
            }
            return terms;
        }
    }

    public static SubLObject guess_forts_from_owl_term_name_non_partitioned(final SubLObject owl_term_name) {
        SubLObject terms = NIL;
        final SubLObject constant = find_constant(owl_term_name);
        if (NIL != constant) {
            terms = cons(constant, terms);
        }
        SubLObject cdolist_list_var = denots_of_string(owl_term_name, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        SubLObject denot = NIL;
        denot = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject item_var = denot;
            if (NIL == member(item_var, terms, symbol_function(EQUAL), symbol_function(IDENTITY))) {
                terms = cons(item_var, terms);
            }
            cdolist_list_var = cdolist_list_var.rest();
            denot = cdolist_list_var.first();
        } 
        final SubLObject spaced = space_dont_uncapitalize(owl_term_name);
        if (!spaced.equal(owl_term_name)) {
            SubLObject cdolist_list_var2 = sub_phrases(spaced);
            SubLObject string = NIL;
            string = cdolist_list_var2.first();
            while (NIL != cdolist_list_var2) {
                SubLObject cdolist_list_var_$50 = denots_of_string(string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                SubLObject denot2 = NIL;
                denot2 = cdolist_list_var_$50.first();
                while (NIL != cdolist_list_var_$50) {
                    final SubLObject item_var2 = denot2;
                    if (NIL == member(item_var2, terms, symbol_function(EQUAL), symbol_function(IDENTITY))) {
                        terms = cons(item_var2, terms);
                    }
                    cdolist_list_var_$50 = cdolist_list_var_$50.rest();
                    denot2 = cdolist_list_var_$50.first();
                } 
                cdolist_list_var2 = cdolist_list_var2.rest();
                string = cdolist_list_var2.first();
            } 
        }
        if ((NIL != lower_case_p(first_char(owl_term_name))) && (NIL == plural_nounP(owl_term_name))) {
            final SubLObject plural = pluralize_word(owl_term_name, UNPROVIDED);
            if (!plural.equal(owl_term_name)) {
                SubLObject cdolist_list_var2 = owl_to_cycl.guess_forts_from_owl_term_name_non_partitioned(plural);
                SubLObject v_term = NIL;
                v_term = cdolist_list_var2.first();
                while (NIL != cdolist_list_var2) {
                    final SubLObject item_var3 = v_term;
                    if (NIL == member(item_var3, terms, symbol_function(EQUAL), symbol_function(IDENTITY))) {
                        terms = cons(item_var3, terms);
                    }
                    cdolist_list_var2 = cdolist_list_var2.rest();
                    v_term = cdolist_list_var2.first();
                } 
            }
        }
        if (NIL != ends_with(owl_term_name, owl_to_cycl.$$$Of, UNPROVIDED)) {
            final SubLObject non_of = substring(owl_term_name, ZERO_INTEGER, subtract(length(owl_term_name), TWO_INTEGER));
            SubLObject cdolist_list_var2 = owl_to_cycl.guess_forts_from_owl_term_name_non_partitioned(non_of);
            SubLObject v_term = NIL;
            v_term = cdolist_list_var2.first();
            while (NIL != cdolist_list_var2) {
                final SubLObject item_var3 = v_term;
                if (NIL == member(item_var3, terms, symbol_function(EQUAL), symbol_function(IDENTITY))) {
                    terms = cons(item_var3, terms);
                }
                cdolist_list_var2 = cdolist_list_var2.rest();
                v_term = cdolist_list_var2.first();
            } 
        }
        return terms;
    }

    public static final SubLObject partition_cycl_terms_for_owl_term_name_alt(SubLObject terms, SubLObject owl_term_name) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject type = (NIL != upper_case_p(string_utilities.first_char(owl_term_name))) ? ((SubLObject) ($COLLECTION)) : $PREDICATE;
                SubLObject right_type = NIL;
                SubLObject wrong_type = NIL;
                SubLObject cdolist_list_var = terms;
                SubLObject v_term = NIL;
                for (v_term = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , v_term = cdolist_list_var.first()) {
                    {
                        SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                        SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                        try {
                            mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                            mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                            {
                                SubLObject pcase_var = type;
                                if (pcase_var.eql($COLLECTION)) {
                                    if (NIL != fort_types_interface.isa_collectionP(v_term, UNPROVIDED)) {
                                        right_type = cons(v_term, right_type);
                                    } else {
                                        wrong_type = cons(v_term, wrong_type);
                                    }
                                } else {
                                    if (pcase_var.eql($PREDICATE)) {
                                        if (NIL != fort_types_interface.isa_predicateP(v_term, UNPROVIDED)) {
                                            right_type = cons(v_term, right_type);
                                        } else {
                                            wrong_type = cons(v_term, wrong_type);
                                        }
                                    }
                                }
                            }
                        } finally {
                            mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
                            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                        }
                    }
                }
                return list(right_type, wrong_type);
            }
        }
    }

    public static SubLObject partition_cycl_terms_for_owl_term_name(final SubLObject terms, final SubLObject owl_term_name) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject type = (NIL != upper_case_p(first_char(owl_term_name))) ? $COLLECTION : $PREDICATE;
        SubLObject right_type = NIL;
        SubLObject wrong_type = NIL;
        SubLObject cdolist_list_var = terms;
        SubLObject v_term = NIL;
        v_term = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject _prev_bind_0 = $relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2 = $mt$.currentBinding(thread);
            try {
                $relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                $mt$.bind(owl_to_cycl.$$EverythingPSC, thread);
                final SubLObject pcase_var = type;
                if (pcase_var.eql($COLLECTION)) {
                    if (NIL != isa_collectionP(v_term, UNPROVIDED)) {
                        right_type = cons(v_term, right_type);
                    } else {
                        wrong_type = cons(v_term, wrong_type);
                    }
                } else
                    if (pcase_var.eql($PREDICATE)) {
                        if (NIL != isa_predicateP(v_term, UNPROVIDED)) {
                            right_type = cons(v_term, right_type);
                        } else {
                            wrong_type = cons(v_term, wrong_type);
                        }
                    }

            } finally {
                $mt$.rebind(_prev_bind_2, thread);
                $relevant_mt_function$.rebind(_prev_bind_0, thread);
            }
            cdolist_list_var = cdolist_list_var.rest();
            v_term = cdolist_list_var.first();
        } 
        return list(right_type, wrong_type);
    }

    public static final SubLObject owl_term_names_alt() {
        return remove_duplicates(cconcatenate($owl_term_names_preceded_by_parse_type$.getGlobalValue(), new SubLObject[]{ $owl_term_names_preceded_by_resource$.getGlobalValue(), $owl_term_names_preceded_by_about$.getGlobalValue(), $owl_term_names_preceded_by_id$.getGlobalValue() }), symbol_function(EQUAL), UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject owl_term_names() {
        return remove_duplicates(cconcatenate(owl_to_cycl.$owl_term_names_preceded_by_parse_type$.getGlobalValue(), new SubLObject[]{ owl_to_cycl.$owl_term_names_preceded_by_resource$.getGlobalValue(), owl_to_cycl.$owl_term_names_preceded_by_about$.getGlobalValue(), owl_to_cycl.$owl_term_names_preceded_by_id$.getGlobalValue() }), symbol_function(EQUAL), UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject new_owl_definition_accumulator_alt() {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            return make_list(length($owl_definition_types$.getDynamicValue(thread)), NIL);
        }
    }

    public static SubLObject new_owl_definition_accumulator() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return make_list(length(owl_to_cycl.$owl_definition_types$.getDynamicValue(thread)), NIL);
    }

    public static final SubLObject accumulate_owl_definition_alt(SubLObject item, SubLObject type) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (NIL != misc_utilities.initialized_p($owl_definition_accumulator$.getDynamicValue(thread))) {
                {
                    SubLObject v_new = list_utilities.nadd_to_end(item, com.cyc.cycjava.cycl.owl.owl_to_cycl.accumulated_owl_definitions_of_type(type));
                    com.cyc.cycjava.cycl.owl.owl_to_cycl.set_accumulated_owl_definitions_of_type(type, v_new);
                }
            }
            return item;
        }
    }

    public static SubLObject accumulate_owl_definition(final SubLObject item, final SubLObject type) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != initialized_p(owl_to_cycl.$owl_definition_accumulator$.getDynamicValue(thread))) {
            final SubLObject existing = owl_to_cycl.accumulated_owl_definitions_of_type(type);
            final SubLObject name = owl_to_cycl.owl_definition_name(item, type);
            final SubLObject existing_with_name = owl_to_cycl.find_owl_definition_of_type(name, type, existing);
            SubLObject v_new = existing;
            if (NIL != existing_with_name) {
                owl_to_cycl.merge_owl_definitions(item, existing_with_name);
            } else {
                v_new = nadd_to_end(item, existing);
            }
            owl_to_cycl.set_accumulated_owl_definitions_of_type(type, v_new);
        }
        return item;
    }

    public static SubLObject merge_owl_definitions(final SubLObject from, final SubLObject onto) {
        if (NIL != owl_to_cycl.owl_term_info_p(onto)) {
            owl_to_cycl.merge_owl_term_definitions(from, onto);
        } else {
            owl_to_cycl.merge_owl_pred_definitions(from, onto);
        }
        return onto;
    }

    public static final SubLObject find_accumulated_owl_definition_alt(SubLObject cyc_name, SubLObject type) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType($owl_definition_accumulator$.getDynamicValue(thread), INITIALIZED_P);
            {
                SubLObject index = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_accumulator_index_for_type(type);
                SubLObject definitions = nth(index, $owl_definition_accumulator$.getDynamicValue(thread));
                SubLObject accessors = (type.eql($PROPERTY)) ? ((SubLObject) (list(symbol_function(OWL_PRED_INFO_CYC_NAME), OWL_PRED_INFO_EXTERNAL_NAME))) : list(symbol_function(OWL_TERM_INFO_CYC_NAME), OWL_TERM_INFO_EXTERNAL_NAME);
                SubLObject v_term = NIL;
                if (NIL == v_term) {
                    {
                        SubLObject csome_list_var = accessors;
                        SubLObject accessor = NIL;
                        for (accessor = csome_list_var.first(); !((NIL != v_term) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , accessor = csome_list_var.first()) {
                            v_term = find(cyc_name, definitions, symbol_function(EQUAL), accessor, UNPROVIDED, UNPROVIDED);
                        }
                    }
                }
                return v_term;
            }
        }
    }

    public static SubLObject find_accumulated_owl_definition(final SubLObject cyc_name, final SubLObject type) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != initialized_p(owl_to_cycl.$owl_definition_accumulator$.getDynamicValue(thread)) : "! misc_utilities.initialized_p(owl_to_cycl.$owl_definition_accumulator$.getDynamicValue(thread)) " + ("misc_utilities.initialized_p(owl_to_cycl.$owl_definition_accumulator$.getDynamicValue(thread)) " + "CommonSymbols.NIL != misc_utilities.initialized_p(owl_to_cycl.$owl_definition_accumulator$.getDynamicValue(thread)) ") + owl_to_cycl.$owl_definition_accumulator$.getDynamicValue(thread);
        final SubLObject index = owl_to_cycl.owl_accumulator_index_for_type(type);
        final SubLObject definitions = nth(index, owl_to_cycl.$owl_definition_accumulator$.getDynamicValue(thread));
        return owl_to_cycl.find_owl_definition_of_type(cyc_name, type, definitions);
    }

    public static SubLObject find_owl_definition_of_type(final SubLObject cyc_name, final SubLObject type, final SubLObject definitions) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = owl_to_cycl.$owl_definition_type$.currentBinding(thread);
        try {
            owl_to_cycl.$owl_definition_type$.bind(type, thread);
            return find(cyc_name, definitions, symbol_function(EQUAL), owl_to_cycl.OWL_DEFINITION_NAME, UNPROVIDED, UNPROVIDED);
        } finally {
            owl_to_cycl.$owl_definition_type$.rebind(_prev_bind_0, thread);
        }
    }

    public static SubLObject owl_definition_name(final SubLObject definition, SubLObject type) {
        if (type == UNPROVIDED) {
            type = owl_to_cycl.$owl_definition_type$.getDynamicValue();
        }
        final SubLObject pcase_var = type;
        if (pcase_var.eql($PROPERTY)) {
            final SubLObject name = owl_to_cycl.owl_pred_info_cyc_name(definition);
            return NIL != name ? name : owl_to_cycl.owl_pred_info_external_name(definition, UNPROVIDED);
        }
        final SubLObject name = owl_to_cycl.owl_term_info_cyc_name(definition);
        return NIL != name ? name : owl_to_cycl.owl_term_info_external_name(definition, UNPROVIDED);
    }

    public static final SubLObject accumulated_owl_definitions_of_type_alt(SubLObject type) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType($owl_definition_accumulator$.getDynamicValue(thread), INITIALIZED_P);
            {
                SubLObject index = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_accumulator_index_for_type(type);
                return nth(index, $owl_definition_accumulator$.getDynamicValue(thread));
            }
        }
    }

    public static SubLObject accumulated_owl_definitions_of_type(final SubLObject type) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != initialized_p(owl_to_cycl.$owl_definition_accumulator$.getDynamicValue(thread)) : "! misc_utilities.initialized_p(owl_to_cycl.$owl_definition_accumulator$.getDynamicValue(thread)) " + ("misc_utilities.initialized_p(owl_to_cycl.$owl_definition_accumulator$.getDynamicValue(thread)) " + "CommonSymbols.NIL != misc_utilities.initialized_p(owl_to_cycl.$owl_definition_accumulator$.getDynamicValue(thread)) ") + owl_to_cycl.$owl_definition_accumulator$.getDynamicValue(thread);
        final SubLObject index = owl_to_cycl.owl_accumulator_index_for_type(type);
        return nth(index, owl_to_cycl.$owl_definition_accumulator$.getDynamicValue(thread));
    }

    public static final SubLObject set_accumulated_owl_definitions_of_type_alt(SubLObject type, SubLObject definitions) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType($owl_definition_accumulator$.getDynamicValue(thread), INITIALIZED_P);
            {
                SubLObject index = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_accumulator_index_for_type(type);
                return set_nth(index, $owl_definition_accumulator$.getDynamicValue(thread), definitions);
            }
        }
    }

    public static SubLObject set_accumulated_owl_definitions_of_type(final SubLObject type, final SubLObject definitions) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != initialized_p(owl_to_cycl.$owl_definition_accumulator$.getDynamicValue(thread)) : "! misc_utilities.initialized_p(owl_to_cycl.$owl_definition_accumulator$.getDynamicValue(thread)) " + ("misc_utilities.initialized_p(owl_to_cycl.$owl_definition_accumulator$.getDynamicValue(thread)) " + "CommonSymbols.NIL != misc_utilities.initialized_p(owl_to_cycl.$owl_definition_accumulator$.getDynamicValue(thread)) ") + owl_to_cycl.$owl_definition_accumulator$.getDynamicValue(thread);
        final SubLObject index = owl_to_cycl.owl_accumulator_index_for_type(type);
        return set_nth(index, owl_to_cycl.$owl_definition_accumulator$.getDynamicValue(thread), definitions);
    }

    public static final SubLObject owl_accumulator_index_for_type_alt(SubLObject type) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject index = position(type, $owl_definition_types$.getDynamicValue(thread), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                    if (NIL == subl_promotions.non_negative_integer_p(index)) {
                        Errors.error($str_alt62$_S_is_not_a_valid_definition_type, type, $owl_definition_types$.getDynamicValue(thread));
                    }
                }
                return index;
            }
        }
    }

    public static SubLObject owl_accumulator_index_for_type(final SubLObject type) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject index = position(type, owl_to_cycl.$owl_definition_types$.getDynamicValue(thread), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == non_negative_integer_p(index))) {
            Errors.error(owl_to_cycl.$str58$_S_is_not_a_valid_definition_type, type, owl_to_cycl.$owl_definition_types$.getDynamicValue(thread));
        }
        return index;
    }

    /**
     * Imports an OWL ontology.
     *
     * @param URI
     * 		uri-p; The URI for this ontology.
     * @param CONSTANT-PREFIX
     * 		STRINGP; A string that is prefixed to names of new constants (first-char downcased for preds).
     * @param SOURCE
     * 		file or url; Where to import from. Defaults to URI.
     * @param ONTOLOGY
     * 		CYCL-DENOTATIONAL-TERM-P; The #$Ontology wrt which #$synonymousExternalConcept assertions are made.
     * @param QUOTED-ISA
     * 		CYCL-DENOTATIONAL-TERM-P; A collection of which all newly reified constants will be quoted instances.
     * @param CYCLIST
     * 		CYCLIST?; The Cyclist cited as the creator of all new constants and assertions.
     * @param PREFIX-EXTERNAL-NAMES?
     * 		Should the strings used to refer to terms in ONTOLOGY be prefixed with their ontology URIs?
     * @param ABBREVIATE-PREFIXES?
     * 		Should we use namespaces, when available, to abbreviate URI prefixes?
     */
    @LispMethod(comment = "Imports an OWL ontology.\r\n\r\n@param URI\r\n\t\turi-p; The URI for this ontology.\r\n@param CONSTANT-PREFIX\r\n\t\tSTRINGP; A string that is prefixed to names of new constants (first-char downcased for preds).\r\n@param SOURCE\r\n\t\tfile or url; Where to import from. Defaults to URI.\r\n@param ONTOLOGY\r\n\t\tCYCL-DENOTATIONAL-TERM-P; The #$Ontology wrt which #$synonymousExternalConcept assertions are made.\r\n@param QUOTED-ISA\r\n\t\tCYCL-DENOTATIONAL-TERM-P; A collection of which all newly reified constants will be quoted instances.\r\n@param CYCLIST\r\n\t\tCYCLIST?; The Cyclist cited as the creator of all new constants and assertions.\r\n@param PREFIX-EXTERNAL-NAMES?\r\n\t\tShould the strings used to refer to terms in ONTOLOGY be prefixed with their ontology URIs?\r\n@param ABBREVIATE-PREFIXES?\r\n\t\tShould we use namespaces, when available, to abbreviate URI prefixes?")
    public static final SubLObject import_owl_ontology_alt(SubLObject uri, SubLObject constant_prefix, SubLObject source, SubLObject ontology, SubLObject quoted_isa, SubLObject cyclist, SubLObject prefix_external_namesP, SubLObject abbreviate_prefixesP) {
        if (source == UNPROVIDED) {
            source = uri;
        }
        if (ontology == UNPROVIDED) {
            ontology = NIL;
        }
        if (quoted_isa == UNPROVIDED) {
            quoted_isa = NIL;
        }
        if (cyclist == UNPROVIDED) {
            cyclist = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        if (prefix_external_namesP == UNPROVIDED) {
            prefix_external_namesP = NIL;
        }
        if (abbreviate_prefixesP == UNPROVIDED) {
            abbreviate_prefixesP = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            uri = string_utilities.strip_final_if_char(uri, CHAR_hash);
            uri = string_utilities.strip_final_if_char(uri, CHAR_slash);
            if (NIL == ontology) {
                ontology = com.cyc.cycjava.cycl.owl.owl_to_cycl.find_or_create_owl_ontology_for_uri(uri, UNPROVIDED, UNPROVIDED);
            }
            if (NIL == quoted_isa) {
                quoted_isa = com.cyc.cycjava.cycl.owl.owl_to_cycl.find_or_create_term_type_for_ontology(ontology, UNPROVIDED);
            }
            if (NIL == string_utilities.non_empty_string_p(source)) {
                source = uri;
            }
            if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                if (!((NIL != web_utilities.uri_p(source, UNPROVIDED)) || (NIL != file_utilities.file_existsP(source)))) {
                    Errors.error($str_alt64$Can_only_import_OWL_ontologies_fr);
                }
            }
            {
                SubLObject _prev_bind_0 = api_control_vars.$the_cyclist$.currentBinding(thread);
                try {
                    api_control_vars.$the_cyclist$.bind(NIL, thread);
                    operation_communication.set_the_cyclist(cyclist);
                    ke.ensure_cyclist_ok();
                } finally {
                    api_control_vars.$the_cyclist$.rebind(_prev_bind_0, thread);
                }
            }
            if (NIL != uri) {
                SubLTrampolineFile.checkType(uri, URI_P);
            }
            {
                SubLObject source_type = (NIL != file_utilities.file_existsP(source)) ? ((SubLObject) ($FILE)) : $URL;
                SubLObject source_file = (source_type.eql($FILE)) ? ((SubLObject) (source)) : rdf_utilities.download_rdf_url(source, UNPROVIDED);
                SubLObject import_term = NIL;
                SubLObject import_parameters = com.cyc.cycjava.cycl.owl.owl_to_cycl.new_owl_import_parameters(ontology, constant_prefix, quoted_isa, cyclist, uri, prefix_external_namesP, abbreviate_prefixesP);
                {
                    SubLObject _prev_bind_0 = $owl_import_parameters$.currentBinding(thread);
                    SubLObject _prev_bind_1 = $owl_oe_queue$.currentBinding(thread);
                    try {
                        $owl_import_parameters$.bind(import_parameters, thread);
                        $owl_oe_queue$.bind(com.cyc.cycjava.cycl.owl.owl_to_cycl.new_owl_oe_queue(), thread);
                        import_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.reify_term_for_new_import(import_parameters);
                        com.cyc.cycjava.cycl.owl.owl_to_cycl.note_owl_import_parameters(import_parameters);
                        try {
                            com.cyc.cycjava.cycl.owl.owl_to_cycl.import_owl_ontology_internal(source, source_file, uri, import_parameters);
                        } finally {
                            {
                                SubLObject _prev_bind_0_56 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.note_owl_oe_queue_done(UNPROVIDED);
                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.wait_for_owl_oe_queue_to_empty(UNPROVIDED);
                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.note_import_end_time(import_term, import_parameters);
                                } finally {
                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_56, thread);
                                }
                            }
                        }
                    } finally {
                        $owl_oe_queue$.rebind(_prev_bind_1, thread);
                        $owl_import_parameters$.rebind(_prev_bind_0, thread);
                    }
                }
                if (source_type.eql($URL)) {
                    Filesys.delete_file(source_file);
                }
                com.cyc.cycjava.cycl.owl.owl_to_cycl.note_owl_import_done();
                return import_term;
            }
        }
    }

    /**
     * Imports an OWL ontology.
     *
     * @param URI
     * 		uri-p; The URI for this ontology.
     * @param CONSTANT-PREFIX
     * 		STRINGP; A string that is prefixed to names of new constants (first-char downcased for preds).
     * @param SOURCE
     * 		file or url; Where to import from. Defaults to URI.
     * @param ONTOLOGY
     * 		CYCL-DENOTATIONAL-TERM-P; The #$Ontology wrt which #$synonymousExternalConcept assertions are made.
     * @param QUOTED-ISA
     * 		CYCL-DENOTATIONAL-TERM-P; A collection of which all newly reified constants will be quoted instances.
     * @param CYCLIST
     * 		CYCLIST?; The Cyclist cited as the creator of all new constants and assertions.
     * @param PREFIX-EXTERNAL-NAMES?
     * 		Should the strings used to refer to terms in ONTOLOGY be prefixed with their ontology URIs?
     * @param ABBREVIATE-PREFIXES?
     * 		Should we use namespaces, when available, to abbreviate URI prefixes?
     */
    @LispMethod(comment = "Imports an OWL ontology.\r\n\r\n@param URI\r\n\t\turi-p; The URI for this ontology.\r\n@param CONSTANT-PREFIX\r\n\t\tSTRINGP; A string that is prefixed to names of new constants (first-char downcased for preds).\r\n@param SOURCE\r\n\t\tfile or url; Where to import from. Defaults to URI.\r\n@param ONTOLOGY\r\n\t\tCYCL-DENOTATIONAL-TERM-P; The #$Ontology wrt which #$synonymousExternalConcept assertions are made.\r\n@param QUOTED-ISA\r\n\t\tCYCL-DENOTATIONAL-TERM-P; A collection of which all newly reified constants will be quoted instances.\r\n@param CYCLIST\r\n\t\tCYCLIST?; The Cyclist cited as the creator of all new constants and assertions.\r\n@param PREFIX-EXTERNAL-NAMES?\r\n\t\tShould the strings used to refer to terms in ONTOLOGY be prefixed with their ontology URIs?\r\n@param ABBREVIATE-PREFIXES?\r\n\t\tShould we use namespaces, when available, to abbreviate URI prefixes?")
    public static SubLObject import_owl_ontology(final SubLObject uri, final SubLObject constant_prefix, SubLObject source, SubLObject ontology, SubLObject quoted_isa, SubLObject cyclist, SubLObject prefix_external_namesP, SubLObject abbreviate_prefixesP) {
        if (source == UNPROVIDED) {
            source = uri;
        }
        if (ontology == UNPROVIDED) {
            ontology = NIL;
        }
        if (quoted_isa == UNPROVIDED) {
            quoted_isa = NIL;
        }
        if (cyclist == UNPROVIDED) {
            cyclist = $the_cyclist$.getDynamicValue();
        }
        if (prefix_external_namesP == UNPROVIDED) {
            prefix_external_namesP = NIL;
        }
        if (abbreviate_prefixesP == UNPROVIDED) {
            abbreviate_prefixesP = NIL;
        }
        return owl_to_cycl.import_owl_ontology_from_info(make_plist(owl_to_cycl.$list60, list(uri, constant_prefix, source, ontology, quoted_isa, cyclist, prefix_external_namesP, abbreviate_prefixesP)));
    }

    public static SubLObject import_owl_ontology_from_info(final SubLObject import_info) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject uri = getf(import_info, $URI, UNPROVIDED);
        final SubLObject uri_prefix = getf(import_info, $URI_PREFIX, UNPROVIDED);
        final SubLObject constant_prefix = getf(import_info, $CONSTANT_PREFIX, UNPROVIDED);
        final SubLObject constant_suffix = getf(import_info, $CONSTANT_SUFFIX, UNPROVIDED);
        SubLObject source = getf(import_info, $SOURCE, UNPROVIDED);
        SubLObject ontology = getf(import_info, $ONTOLOGY, UNPROVIDED);
        SubLObject quoted_isa = getf(import_info, $QUOTED_ISA, UNPROVIDED);
        final SubLObject cyclist = getf(import_info, $CYCLIST, UNPROVIDED);
        final SubLObject prefix_external_namesP = getf(import_info, owl_to_cycl.$kw69$PREFIX_EXTERNAL_NAMES_, UNPROVIDED);
        final SubLObject abbreviate_prefixesP = getf(import_info, owl_to_cycl.$kw70$ABBREVIATE_PREFIXES_, UNPROVIDED);
        uri = strip_final_if_char(uri, CHAR_hash);
        uri = strip_final_if_char(uri, CHAR_slash);
        if (NIL == ontology) {
            ontology = owl_to_cycl.find_or_create_owl_ontology_for_uri(uri, UNPROVIDED, UNPROVIDED);
        }
        if (NIL == quoted_isa) {
            quoted_isa = owl_to_cycl.find_or_create_term_type_for_ontology(ontology, UNPROVIDED);
        }
        if (NIL == non_empty_string_p(source)) {
            source = uri;
        }
        if (((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == uri_p(source, UNPROVIDED))) && (NIL == file_existsP(source))) {
            Errors.error(owl_to_cycl.$str71$Can_only_import_OWL_ontologies_fr);
        }
        final SubLObject _prev_bind_0 = $the_cyclist$.currentBinding(thread);
        try {
            $the_cyclist$.bind(NIL, thread);
            set_the_cyclist(cyclist);
            ensure_cyclist_ok();
        } finally {
            $the_cyclist$.rebind(_prev_bind_0, thread);
        }
        if (((NIL != uri) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == uri_p(uri, UNPROVIDED))) {
            throw new AssertionError(uri);
        }
        final SubLObject source_type = (NIL != file_existsP(source)) ? $FILE : $URL;
        final SubLObject source_file = (source_type.eql($FILE)) ? source : download_rdf_url(source, UNPROVIDED);
        SubLObject import_term = NIL;
        final SubLObject import_parameters = owl_to_cycl.new_owl_import_parameters(ontology, constant_prefix, constant_suffix, quoted_isa, cyclist, uri, uri_prefix, prefix_external_namesP, abbreviate_prefixesP);
        final SubLObject _prev_bind_2 = owl_to_cycl.$owl_import_parameters$.currentBinding(thread);
        final SubLObject _prev_bind_3 = owl_to_cycl.$owl_oe_queue$.currentBinding(thread);
        try {
            owl_to_cycl.$owl_import_parameters$.bind(import_parameters, thread);
            owl_to_cycl.$owl_oe_queue$.bind(owl_to_cycl.new_owl_oe_queue(), thread);
            import_term = owl_to_cycl.reify_term_for_new_import(import_parameters);
            owl_to_cycl.note_owl_import_parameters(import_parameters);
            try {
                owl_to_cycl.import_owl_ontology_internal(source, source_file, uri, import_parameters);
            } finally {
                final SubLObject _prev_bind_0_$51 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values = getValuesAsVector();
                    owl_to_cycl.ensure_owl_oe_daemon_running();
                    owl_to_cycl.note_owl_oe_queue_done(UNPROVIDED);
                    owl_to_cycl.wait_for_owl_oe_queue_to_empty(UNPROVIDED);
                    owl_to_cycl.note_import_end_time(import_term, import_parameters);
                    restoreValuesFromVector(_values);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$51, thread);
                }
            }
        } finally {
            owl_to_cycl.$owl_oe_queue$.rebind(_prev_bind_3, thread);
            owl_to_cycl.$owl_import_parameters$.rebind(_prev_bind_2, thread);
        }
        if (source_type.eql($URL)) {
            Filesys.delete_file(source_file);
        }
        owl_to_cycl.note_owl_import_done();
        return import_term;
    }

    public static final SubLObject clear_xml_tokens_from_file_alt() {
        {
            SubLObject cs = $xml_tokens_from_file_caching_state$.getGlobalValue();
            if (NIL != cs) {
                memoization_state.caching_state_clear(cs);
            }
        }
        return NIL;
    }

    public static SubLObject clear_xml_tokens_from_file() {
        final SubLObject cs = owl_to_cycl.$xml_tokens_from_file_caching_state$.getGlobalValue();
        if (NIL != cs) {
            caching_state_clear(cs);
        }
        return NIL;
    }

    public static final SubLObject remove_xml_tokens_from_file_alt(SubLObject source_file) {
        return memoization_state.caching_state_remove_function_results_with_args($xml_tokens_from_file_caching_state$.getGlobalValue(), list(source_file), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_xml_tokens_from_file(final SubLObject source_file) {
        return caching_state_remove_function_results_with_args(owl_to_cycl.$xml_tokens_from_file_caching_state$.getGlobalValue(), list(source_file), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject xml_tokens_from_file_internal_alt(SubLObject source_file) {
        {
            SubLObject tokens = NIL;
            SubLObject stream = NIL;
            try {
                stream = compatibility.open_text(source_file, $INPUT, NIL);
                if (!stream.isStream()) {
                    Errors.error($str_alt70$Unable_to_open__S, source_file);
                }
                {
                    SubLObject in_stream = stream;
                    tokens = delete_if($sym71$WHITESPACE_STRING_, web_utilities.xml_tokenize(in_stream, T, T, UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                }
            } finally {
                {
                    SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
                    try {
                        bind($is_thread_performing_cleanupP$, T);
                        if (stream.isStream()) {
                            close(stream, UNPROVIDED);
                        }
                    } finally {
                        rebind($is_thread_performing_cleanupP$, _prev_bind_0);
                    }
                }
            }
            return tokens;
        }
    }

    public static SubLObject xml_tokens_from_file_internal(final SubLObject source_file) {
        SubLObject tokens = NIL;
        SubLObject stream = NIL;
        try {
            stream = compatibility.open_text(source_file, $INPUT);
            if (!stream.isStream()) {
                Errors.error(owl_to_cycl.$str77$Unable_to_open__S, source_file);
            }
            final SubLObject in_stream = stream;
            tokens = delete_if(owl_to_cycl.$sym78$WHITESPACE_STRING_, xml_parsing_utilities.xml_tokenize(in_stream, T, T, UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        } finally {
            final SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
            try {
                bind($is_thread_performing_cleanupP$, T);
                final SubLObject _values = getValuesAsVector();
                if (stream.isStream()) {
                    close(stream, UNPROVIDED);
                }
                restoreValuesFromVector(_values);
            } finally {
                rebind($is_thread_performing_cleanupP$, _prev_bind_0);
            }
        }
        return tokens;
    }

    public static final SubLObject xml_tokens_from_file_alt(SubLObject source_file) {
        {
            SubLObject caching_state = $xml_tokens_from_file_caching_state$.getGlobalValue();
            if (NIL == caching_state) {
                caching_state = memoization_state.create_global_caching_state_for_name(XML_TOKENS_FROM_FILE, $xml_tokens_from_file_caching_state$, $int$48, EQUAL, ONE_INTEGER, ZERO_INTEGER);
            }
            {
                SubLObject results = memoization_state.caching_state_lookup(caching_state, source_file, $kw15$_MEMOIZED_ITEM_NOT_FOUND_);
                if (results == $kw15$_MEMOIZED_ITEM_NOT_FOUND_) {
                    results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.owl.owl_to_cycl.xml_tokens_from_file_internal(source_file)));
                    memoization_state.caching_state_put(caching_state, source_file, results, UNPROVIDED);
                }
                return memoization_state.caching_results(results);
            }
        }
    }

    public static SubLObject xml_tokens_from_file(final SubLObject source_file) {
        SubLObject caching_state = owl_to_cycl.$xml_tokens_from_file_caching_state$.getGlobalValue();
        if (NIL == caching_state) {
            caching_state = create_global_caching_state_for_name(owl_to_cycl.XML_TOKENS_FROM_FILE, owl_to_cycl.$xml_tokens_from_file_caching_state$, owl_to_cycl.$int$48, EQUAL, ONE_INTEGER, ZERO_INTEGER);
        }
        SubLObject results = caching_state_lookup(caching_state, source_file, $memoized_item_not_found$.getGlobalValue());
        if (results.eql($memoized_item_not_found$.getGlobalValue())) {
            results = arg2(resetMultipleValues(), multiple_value_list(owl_to_cycl.xml_tokens_from_file_internal(source_file)));
            caching_state_put(caching_state, source_file, results, UNPROVIDED);
        }
        return caching_results(results);
    }

    public static final SubLObject import_owl_ontology_internal_alt(SubLObject source, SubLObject source_file, SubLObject uri, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            format(T, $str_alt74$__Importing__S_from__S_____, uri, source);
            {
                SubLObject state = memoization_state.new_memoization_state(UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                SubLObject local_state = state;
                {
                    SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
                    try {
                        memoization_state.$memoization_state$.bind(local_state, thread);
                        {
                            SubLObject original_memoization_process = NIL;
                            if ((NIL != local_state) && (NIL == memoization_state.memoization_state_lock(local_state))) {
                                original_memoization_process = memoization_state.memoization_state_get_current_process_internal(local_state);
                                {
                                    SubLObject current_proc = current_process();
                                    if (NIL == original_memoization_process) {
                                        memoization_state.memoization_state_set_current_process_internal(local_state, current_proc);
                                    } else {
                                        if (original_memoization_process != current_proc) {
                                            Errors.error($str_alt17$Invalid_attempt_to_reuse_memoizat);
                                        }
                                    }
                                }
                            }
                            try {
                                {
                                    SubLObject _prev_bind_0_57 = $owl_definition_accumulator$.currentBinding(thread);
                                    try {
                                        $owl_definition_accumulator$.bind(com.cyc.cycjava.cycl.owl.owl_to_cycl.new_owl_definition_accumulator(), thread);
                                        {
                                            SubLObject tokens = com.cyc.cycjava.cycl.owl.owl_to_cycl.xml_tokens_from_file(source_file);
                                            com.cyc.cycjava.cycl.owl.owl_to_cycl.note_owl_file_encoding(tokens.first(), import_parameters);
                                            {
                                                SubLObject ontology = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_ontology(import_parameters);
                                                com.cyc.cycjava.cycl.owl.owl_to_cycl.import_owl_ontology_info(ontology, tokens, import_parameters);
                                                {
                                                    SubLObject imported_ontology_uris = com.cyc.cycjava.cycl.owl.owl_to_cycl.verify_imports_for_ontology_tokens(ontology, tokens, import_parameters);
                                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.validate_and_note_owl_namespaces(tokens, cons(uri, imported_ontology_uris), import_parameters);
                                                }
                                            }
                                            com.cyc.cycjava.cycl.owl.owl_to_cycl.import_named_bnodes(tokens, import_parameters);
                                            com.cyc.cycjava.cycl.owl.owl_to_cycl.read_class_info_from_owl_tokens(tokens, import_parameters);
                                            {
                                                SubLObject info = com.cyc.cycjava.cycl.owl.owl_to_cycl.accumulated_owl_definitions_of_type($CLASS);
                                                SubLObject message = format(NIL, $str_alt76$Processing__D_class_definition__P, length(info));
                                                com.cyc.cycjava.cycl.owl.owl_to_cycl.create_terms_from_owl_data(info, import_parameters, message);
                                            }
                                            com.cyc.cycjava.cycl.owl.owl_to_cycl.read_pred_info_from_owl_tokens(tokens, import_parameters);
                                            com.cyc.cycjava.cycl.owl.owl_to_cycl.create_preds_from_owl_data(com.cyc.cycjava.cycl.owl.owl_to_cycl.accumulated_owl_definitions_of_type($PROPERTY), import_parameters);
                                            com.cyc.cycjava.cycl.owl.owl_to_cycl.read_instance_info_from_owl_tokens(tokens, import_parameters);
                                            {
                                                SubLObject info = com.cyc.cycjava.cycl.owl.owl_to_cycl.accumulated_owl_definitions_of_type($INSTANCE);
                                                SubLObject message = format(NIL, $str_alt78$Processing__D_instance_definition, length(info));
                                                com.cyc.cycjava.cycl.owl.owl_to_cycl.create_terms_from_owl_data(info, import_parameters, message);
                                            }
                                        }
                                    } finally {
                                        $owl_definition_accumulator$.rebind(_prev_bind_0_57, thread);
                                    }
                                }
                            } finally {
                                {
                                    SubLObject _prev_bind_0_58 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        $is_thread_performing_cleanupP$.bind(T, thread);
                                        if ((NIL != local_state) && (NIL == original_memoization_process)) {
                                            memoization_state.memoization_state_set_current_process_internal(local_state, NIL);
                                        }
                                    } finally {
                                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_58, thread);
                                    }
                                }
                            }
                        }
                    } finally {
                        memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
                    }
                }
            }
            return NIL;
        }
    }

    public static SubLObject import_owl_ontology_internal(SubLObject source, final SubLObject source_file, final SubLObject uri, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        format(T, owl_to_cycl.$str81$__Importing__S_from__S_____, uri, source);
        final SubLObject local_state;
        final SubLObject state = local_state = new_memoization_state(UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        final SubLObject _prev_bind_0 = $memoization_state$.currentBinding(thread);
        try {
            $memoization_state$.bind(local_state, thread);
            final SubLObject original_memoization_process = memoization_state_original_process(local_state);
            try {
                final SubLObject _prev_bind_0_$52 = owl_to_cycl.$owl_definition_accumulator$.currentBinding(thread);
                try {
                    owl_to_cycl.$owl_definition_accumulator$.bind(owl_to_cycl.new_owl_definition_accumulator(), thread);
                    final SubLObject tokens = owl_to_cycl.xml_tokens_from_file(source_file);
                    owl_to_cycl.note_owl_file_encoding(tokens.first(), import_parameters);
                    final SubLObject ontology = owl_to_cycl.owl_import_parameters_ontology(import_parameters);
                    owl_to_cycl.import_owl_ontology_info(ontology, tokens, import_parameters);
                    final SubLObject imported_ontology_uris = owl_to_cycl.verify_imports_for_ontology_tokens(ontology, tokens, import_parameters);
                    owl_to_cycl.validate_and_note_owl_namespaces(tokens, cons(uri, imported_ontology_uris), import_parameters);
                    owl_to_cycl.import_named_bnodes(tokens, import_parameters);
                    owl_to_cycl.read_class_info_from_owl_tokens(tokens, import_parameters);
                    SubLObject info = owl_to_cycl.accumulated_owl_definitions_of_type($CLASS);
                    SubLObject message = format(NIL, owl_to_cycl.$str83$Processing__D_class_definition__P, length(info));
                    owl_to_cycl.create_terms_from_owl_data(info, import_parameters, message);
                    owl_to_cycl.read_pred_info_from_owl_tokens(tokens, import_parameters);
                    owl_to_cycl.create_preds_from_owl_data(owl_to_cycl.accumulated_owl_definitions_of_type($PROPERTY), import_parameters);
                    owl_to_cycl.read_instance_info_from_owl_tokens(tokens, import_parameters);
                    info = owl_to_cycl.accumulated_owl_definitions_of_type($INSTANCE);
                    message = format(NIL, owl_to_cycl.$str85$Processing__D_instance_definition, length(info));
                    owl_to_cycl.create_terms_from_owl_data(info, import_parameters, message);
                } finally {
                    owl_to_cycl.$owl_definition_accumulator$.rebind(_prev_bind_0_$52, thread);
                }
            } finally {
                final SubLObject _prev_bind_0_$53 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values = getValuesAsVector();
                    memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                    restoreValuesFromVector(_values);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$53, thread);
                }
            }
        } finally {
            $memoization_state$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    public static final SubLObject note_owl_file_encoding_alt(SubLObject token, SubLObject import_parameters) {
        {
            SubLObject encoding = $default_owl_file_encoding$.getGlobalValue();
            if (NIL != web_utilities.xml_token_element_nameP(token, $str_alt80$_xml)) {
                encoding = web_utilities.xml_tag_attribute_value(token, $$$encoding, encoding);
            }
            com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_note_encoding(encoding, import_parameters);
            return encoding;
        }
    }

    public static SubLObject note_owl_file_encoding(final SubLObject token, final SubLObject import_parameters) {
        SubLObject encoding = owl_to_cycl.$default_owl_file_encoding$.getGlobalValue();
        if (NIL != xml_parsing_utilities.xml_token_element_nameP(token, owl_to_cycl.$str87$_xml)) {
            encoding = xml_parsing_utilities.xml_tag_attribute_value(token, owl_to_cycl.$$$encoding, encoding);
        }
        owl_to_cycl.owl_import_parameters_note_encoding(encoding, import_parameters);
        return encoding;
    }

    public static final SubLObject reify_term_for_new_import_alt(SubLObject import_parameters) {
        {
            SubLObject v_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_create(cconcatenate($str_alt82$OWLImport_, com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_ontology_name(import_parameters)), $list_alt83, $$UniversalVocabularyMt, $str_alt85$, T, import_parameters);
            com.cyc.cycjava.cycl.owl.owl_to_cycl.note_import_start_time(v_term, import_parameters);
            com.cyc.cycjava.cycl.owl.owl_to_cycl.note_import_ontology(v_term, import_parameters);
            com.cyc.cycjava.cycl.owl.owl_to_cycl.note_import_cyclist(v_term, import_parameters);
            com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_note_import_term(v_term, import_parameters);
            return v_term;
        }
    }

    public static SubLObject reify_term_for_new_import(final SubLObject import_parameters) {
        final SubLObject v_term = owl_to_cycl.owl_create(cconcatenate(owl_to_cycl.$str89$OWLImport_, owl_to_cycl.owl_ontology_name(import_parameters)), owl_to_cycl.$list90, owl_to_cycl.$$UniversalVocabularyMt, owl_to_cycl.$str92$, owl_to_cycl.$str92$, $UPCASE, import_parameters);
        owl_to_cycl.note_import_start_time(v_term, import_parameters);
        owl_to_cycl.note_import_ontology(v_term, import_parameters);
        owl_to_cycl.note_import_cyclist(v_term, import_parameters);
        owl_to_cycl.owl_import_parameters_note_import_term(v_term, import_parameters);
        return v_term;
    }

    public static final SubLObject owl_ontology_name_alt(SubLObject import_parameters) {
        {
            SubLObject ontology = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_ontology(import_parameters);
            return NIL != constant_p(ontology) ? ((SubLObject) (constants_high.constant_name(ontology))) : com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_base_uri(import_parameters);
        }
    }

    public static SubLObject owl_ontology_name(final SubLObject import_parameters) {
        final SubLObject ontology = owl_to_cycl.owl_import_parameters_ontology(import_parameters);
        return NIL != constant_p(ontology) ? constant_name(ontology) : owl_to_cycl.owl_import_parameters_base_uri(import_parameters);
    }

    public static final SubLObject note_import_start_time_alt(SubLObject import_term, SubLObject import_parameters) {
        {
            SubLObject now = date_utilities.indexical_now();
            return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_assert(list($$startingDate, import_term, now), $$UniversalVocabularyMt, import_parameters);
        }
    }

    public static SubLObject note_import_start_time(final SubLObject import_term, final SubLObject import_parameters) {
        final SubLObject now = indexical_now();
        return owl_to_cycl.owl_assert(list(owl_to_cycl.$$startingDate, import_term, now), owl_to_cycl.$$UniversalVocabularyMt, import_parameters);
    }

    public static final SubLObject note_import_ontology_alt(SubLObject import_term, SubLObject import_parameters) {
        {
            SubLObject ontology = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_ontology(import_parameters);
            return NIL != ontology ? ((SubLObject) (com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_assert(list($$infoTransferred, import_term, ontology), $$UniversalVocabularyMt, import_parameters))) : NIL;
        }
    }

    public static SubLObject note_import_ontology(final SubLObject import_term, final SubLObject import_parameters) {
        final SubLObject ontology = owl_to_cycl.owl_import_parameters_ontology(import_parameters);
        return NIL != ontology ? owl_to_cycl.owl_assert(list(owl_to_cycl.$$infoTransferred, import_term, ontology), owl_to_cycl.$$UniversalVocabularyMt, import_parameters) : NIL;
    }

    public static final SubLObject note_import_cyclist_alt(SubLObject import_term, SubLObject import_parameters) {
        {
            SubLObject cyclist = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_cyclist(import_parameters);
            return NIL != cyclist ? ((SubLObject) (com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_assert(list($$doneBy, import_term, cyclist), $$UniversalVocabularyMt, import_parameters))) : NIL;
        }
    }

    public static SubLObject note_import_cyclist(final SubLObject import_term, final SubLObject import_parameters) {
        final SubLObject cyclist = owl_to_cycl.owl_import_parameters_cyclist(import_parameters);
        return NIL != cyclist ? owl_to_cycl.owl_assert(list(owl_to_cycl.$$doneBy, import_term, cyclist), owl_to_cycl.$$UniversalVocabularyMt, import_parameters) : NIL;
    }

    public static final SubLObject note_import_end_time_alt(SubLObject import_term, SubLObject import_parameters) {
        {
            SubLObject now = date_utilities.indexical_now();
            return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_assert(list($$endingDate, import_term, now), $$UniversalVocabularyMt, import_parameters);
        }
    }

    public static SubLObject note_import_end_time(final SubLObject import_term, final SubLObject import_parameters) {
        final SubLObject now = indexical_now();
        return owl_to_cycl.owl_assert(list(owl_to_cycl.$$endingDate, import_term, now), owl_to_cycl.$$UniversalVocabularyMt, import_parameters);
    }

    /**
     * Read info about ONTOLOGY from the Ontology element and assert it.
     */
    @LispMethod(comment = "Read info about ONTOLOGY from the Ontology element and assert it.")
    public static final SubLObject import_owl_ontology_info_alt(SubLObject ontology, SubLObject tokens, SubLObject import_parameters) {
        {
            SubLObject doneP = NIL;
            while (!((NIL != doneP) || (NIL != list_utilities.empty_list_p(tokens)))) {
                {
                    SubLObject token = tokens.first();
                    if (NIL != web_utilities.xml_token_element_nameP(token, owl_utilities.owl_name($$$Ontology))) {
                        if (NIL == web_utilities.xml_empty_tagP(token)) {
                            com.cyc.cycjava.cycl.owl.owl_to_cycl.import_owl_ontology_info_internal(ontology, tokens, import_parameters);
                        }
                        doneP = T;
                    } else {
                        if (NIL == web_utilities.regular_xml_tagP(token)) {
                            tokens = web_utilities.advance_xml_tokens(tokens, UNPROVIDED);
                        } else {
                            if (NIL != web_utilities.xml_token_element_nameP(token, rdf_utilities.rdf_name($$$RDF))) {
                                com.cyc.cycjava.cycl.owl.owl_to_cycl.note_owl_ontology_base_uri(token, import_parameters);
                                tokens = web_utilities.advance_xml_tokens(tokens, UNPROVIDED);
                            } else {
                                tokens = web_utilities.advance_xml_tokens_to_end_of_element(tokens);
                            }
                        }
                    }
                }
            } 
        }
        return ontology;
    }

    /**
     * Read info about ONTOLOGY from the Ontology element and assert it.
     */
    @LispMethod(comment = "Read info about ONTOLOGY from the Ontology element and assert it.")
    public static SubLObject import_owl_ontology_info(final SubLObject ontology, SubLObject tokens, final SubLObject import_parameters) {
        SubLObject doneP = NIL;
        while ((NIL == doneP) && (NIL == empty_list_p(tokens))) {
            final SubLObject token = tokens.first();
            if (NIL != xml_parsing_utilities.xml_token_element_nameP(token, owl_utilities.owl_name(owl_to_cycl.$$$Ontology))) {
                if (NIL == xml_parsing_utilities.xml_empty_tagP(token)) {
                    owl_to_cycl.import_owl_ontology_info_internal(ontology, tokens, import_parameters);
                }
                doneP = T;
            } else
                if (NIL == xml_parsing_utilities.regular_xml_tagP(token)) {
                    tokens = xml_parsing_utilities.advance_xml_tokens(tokens, UNPROVIDED);
                } else
                    if (NIL != xml_parsing_utilities.xml_token_element_nameP(token, rdf_name(owl_to_cycl.$$$RDF))) {
                        owl_to_cycl.note_owl_ontology_base_uri(token, import_parameters);
                        tokens = xml_parsing_utilities.advance_xml_tokens(tokens, UNPROVIDED);
                    } else {
                        tokens = xml_parsing_utilities.advance_xml_tokens_to_end_of_element(tokens);
                    }


        } 
        return ontology;
    }

    public static final SubLObject note_owl_ontology_base_uri_alt(SubLObject token, SubLObject import_parameters) {
        {
            SubLObject base_uri = com.cyc.cycjava.cycl.owl.owl_to_cycl.find_owl_ontology_base_uri(token);
            if (NIL != base_uri) {
                com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_note_base_uri(base_uri, import_parameters);
            }
            return base_uri;
        }
    }

    public static SubLObject note_owl_ontology_base_uri(final SubLObject token, final SubLObject import_parameters) {
        final SubLObject base_uri = owl_to_cycl.find_owl_ontology_base_uri(token);
        if (NIL != base_uri) {
            owl_to_cycl.owl_import_parameters_note_base_uri(base_uri, import_parameters);
        }
        return base_uri;
    }

    public static final SubLObject find_owl_ontology_base_uri_alt(SubLObject token) {
        {
            SubLObject base_uri = NIL;
            SubLObject datum = web_utilities.parse_xml_token(token);
            SubLObject current = datum;
            SubLObject element_name = NIL;
            SubLObject attributes = NIL;
            destructuring_bind_must_consp(current, datum, $list_alt92);
            element_name = current.first();
            current = current.rest();
            attributes = current;
            {
                SubLObject rest = NIL;
                for (rest = attributes; !((NIL != base_uri) || (NIL == rest)); rest = rest.rest()) {
                    {
                        SubLObject cons = rest.first();
                        SubLObject datum_59 = cons;
                        SubLObject current_60 = datum_59;
                        SubLObject attribute_name = NIL;
                        SubLObject value = NIL;
                        destructuring_bind_must_consp(current_60, datum_59, $list_alt93);
                        attribute_name = current_60.first();
                        current_60 = current_60.rest();
                        value = current_60;
                        if (attribute_name.equal(com.cyc.cycjava.cycl.owl.owl_to_cycl.xml_name($$$base))) {
                            if (NIL != web_utilities.uri_p(value, UNPROVIDED)) {
                                base_uri = value;
                            } else {
                                Errors.warn($str_alt95$Can_t_recognize_alleged_base_URI_, value);
                            }
                        }
                    }
                }
            }
            return base_uri;
        }
    }

    public static SubLObject find_owl_ontology_base_uri(final SubLObject token) {
        SubLObject base_uri = NIL;
        SubLObject current;
        final SubLObject datum = current = xml_parsing_utilities.parse_xml_token(token);
        SubLObject element_name = NIL;
        SubLObject attributes = NIL;
        destructuring_bind_must_consp(current, datum, owl_to_cycl.$list100);
        element_name = current.first();
        current = attributes = current.rest();
        SubLObject rest;
        SubLObject cons;
        SubLObject current_$55;
        SubLObject datum_$54;
        SubLObject attribute_name;
        SubLObject value;
        for (rest = NIL, rest = attributes; (NIL == base_uri) && (NIL != rest); rest = rest.rest()) {
            cons = rest.first();
            datum_$54 = current_$55 = cons;
            attribute_name = NIL;
            value = NIL;
            destructuring_bind_must_consp(current_$55, datum_$54, owl_to_cycl.$list101);
            attribute_name = current_$55.first();
            current_$55 = value = current_$55.rest();
            if (attribute_name.equal(owl_to_cycl.xml_name(owl_to_cycl.$$$base))) {
                if (NIL != uri_p(value, UNPROVIDED)) {
                    base_uri = value;
                } else {
                    Errors.warn(owl_to_cycl.$str103$Can_t_recognize_alleged_base_URI_, value);
                }
            }
        }
        return base_uri;
    }

    public static final SubLObject clear_owl_import_parameters_ontology_context_alt() {
        {
            SubLObject cs = $owl_import_parameters_ontology_context_caching_state$.getGlobalValue();
            if (NIL != cs) {
                memoization_state.caching_state_clear(cs);
            }
        }
        return NIL;
    }

    public static SubLObject clear_owl_import_parameters_ontology_context() {
        final SubLObject cs = owl_to_cycl.$owl_import_parameters_ontology_context_caching_state$.getGlobalValue();
        if (NIL != cs) {
            caching_state_clear(cs);
        }
        return NIL;
    }

    public static final SubLObject remove_owl_import_parameters_ontology_context_alt(SubLObject import_parameters) {
        return memoization_state.caching_state_remove_function_results_with_args($owl_import_parameters_ontology_context_caching_state$.getGlobalValue(), list(import_parameters), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_owl_import_parameters_ontology_context(final SubLObject import_parameters) {
        return caching_state_remove_function_results_with_args(owl_to_cycl.$owl_import_parameters_ontology_context_caching_state$.getGlobalValue(), list(import_parameters), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject owl_import_parameters_ontology_context_internal_alt(SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject v_context = NIL;
                {
                    SubLObject _prev_bind_0 = api_control_vars.$the_cyclist$.currentBinding(thread);
                    try {
                        api_control_vars.$the_cyclist$.bind(NIL, thread);
                        operation_communication.set_the_cyclist(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_cyclist(import_parameters));
                        v_context = com.cyc.cycjava.cycl.owl.owl_to_cycl.get_owl_ontology_context(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_ontology(import_parameters));
                    } finally {
                        api_control_vars.$the_cyclist$.rebind(_prev_bind_0, thread);
                    }
                }
                return v_context;
            }
        }
    }

    public static SubLObject owl_import_parameters_ontology_context_internal(final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject v_context = NIL;
        final SubLObject _prev_bind_0 = $the_cyclist$.currentBinding(thread);
        try {
            $the_cyclist$.bind(NIL, thread);
            set_the_cyclist(owl_to_cycl.owl_import_parameters_cyclist(import_parameters));
            v_context = owl_to_cycl.get_owl_ontology_context(owl_to_cycl.owl_import_parameters_ontology(import_parameters));
        } finally {
            $the_cyclist$.rebind(_prev_bind_0, thread);
        }
        return v_context;
    }

    public static final SubLObject owl_import_parameters_ontology_context_alt(SubLObject import_parameters) {
        {
            SubLObject caching_state = $owl_import_parameters_ontology_context_caching_state$.getGlobalValue();
            if (NIL == caching_state) {
                caching_state = memoization_state.create_global_caching_state_for_name(OWL_IMPORT_PARAMETERS_ONTOLOGY_CONTEXT, $owl_import_parameters_ontology_context_caching_state$, NIL, EQL, ONE_INTEGER, ZERO_INTEGER);
            }
            {
                SubLObject results = memoization_state.caching_state_lookup(caching_state, import_parameters, $kw15$_MEMOIZED_ITEM_NOT_FOUND_);
                if (results == $kw15$_MEMOIZED_ITEM_NOT_FOUND_) {
                    results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_ontology_context_internal(import_parameters)));
                    memoization_state.caching_state_put(caching_state, import_parameters, results, UNPROVIDED);
                }
                return memoization_state.caching_results(results);
            }
        }
    }

    public static SubLObject owl_import_parameters_ontology_context(final SubLObject import_parameters) {
        SubLObject caching_state = owl_to_cycl.$owl_import_parameters_ontology_context_caching_state$.getGlobalValue();
        if (NIL == caching_state) {
            caching_state = create_global_caching_state_for_name(owl_to_cycl.OWL_IMPORT_PARAMETERS_ONTOLOGY_CONTEXT, owl_to_cycl.$owl_import_parameters_ontology_context_caching_state$, NIL, EQL, ONE_INTEGER, ZERO_INTEGER);
        }
        SubLObject results = caching_state_lookup(caching_state, import_parameters, $memoized_item_not_found$.getGlobalValue());
        if (results.eql($memoized_item_not_found$.getGlobalValue())) {
            results = arg2(resetMultipleValues(), multiple_value_list(owl_to_cycl.owl_import_parameters_ontology_context_internal(import_parameters)));
            caching_state_put(caching_state, import_parameters, results, UNPROVIDED);
        }
        return caching_results(results);
    }

    public static final SubLObject get_owl_ontology_context_alt(SubLObject ontology) {
        return czer_main.cyc_find_or_create_nart(list($$ContextOfPCWFn, ontology), UNPROVIDED);
    }

    public static SubLObject get_owl_ontology_context(final SubLObject ontology) {
        return cyc_find_or_create_nart(list(owl_to_cycl.$$ContextOfPCWFn, ontology), UNPROVIDED);
    }

    public static final SubLObject import_owl_ontology_info_internal_alt(SubLObject ontology, SubLObject tokens, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                if (NIL == web_utilities.xml_token_element_nameP(tokens.first(), owl_utilities.owl_name($$$Ontology))) {
                    Errors.error($str_alt99$Expected_ontology_token__got__S, tokens.first());
                }
            }
            {
                SubLObject remaining_tokens = tokens.rest();
                SubLObject ontology_context = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_ontology_context(import_parameters);
                SubLObject doneP = NIL;
                while (NIL == doneP) {
                    if (NIL != list_utilities.empty_list_p(remaining_tokens)) {
                        Errors.error($str_alt100$Couldn_t_find_closing_Ontology_ta, list_utilities.first_n($int$32, tokens));
                    }
                    {
                        SubLObject token = remaining_tokens.first();
                        while (NIL == web_utilities.regular_xml_tagP(token)) {
                            remaining_tokens = web_utilities.advance_xml_tokens(remaining_tokens, UNPROVIDED);
                            token = remaining_tokens.first();
                        } 
                        if (NIL != web_utilities.xml_token_element_nameP(token, rdf_utilities.rdfs_name($$$comment))) {
                            {
                                SubLObject comment = second(remaining_tokens);
                                if (NIL != web_utilities.regular_xml_tagP(comment)) {
                                    Errors.warn($str_alt103$Expecting_comment__got__S, comment);
                                } else {
                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_assert(list($const104$rdfs_comment, ontology, comment), ontology_context, import_parameters);
                                }
                            }
                        } else {
                            if (NIL != web_utilities.xml_token_element_nameP(token, rdf_utilities.rdfs_name($$$label))) {
                                {
                                    SubLObject lang_value = web_utilities.xml_tag_attribute_value(token, com.cyc.cycjava.cycl.owl.owl_to_cycl.xml_name($$$lang), NIL);
                                    SubLObject language = decode_html_language_abbreviation(lang_value);
                                    SubLObject label = second(remaining_tokens);
                                    if (NIL != web_utilities.regular_xml_tagP(label)) {
                                        Errors.warn($str_alt107$Expecting_label__got__S, label);
                                    } else {
                                        com.cyc.cycjava.cycl.owl.owl_to_cycl.assert_owl_label(ontology, cons(label, language), import_parameters);
                                    }
                                }
                            } else {
                                if (NIL != web_utilities.xml_token_element_nameP(token, owl_utilities.owl_name($$$priorVersion))) {
                                    {
                                        SubLObject ontology_token = second(remaining_tokens);
                                        if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                                            if (NIL == web_utilities.xml_token_element_nameP(ontology_token, owl_utilities.owl_name($$$Ontology))) {
                                                Errors.error($str_alt99$Expected_ontology_token__got__S, ontology_token);
                                            }
                                        }
                                        {
                                            SubLObject about_value = web_utilities.xml_tag_attribute_value(ontology_token, rdf_utilities.rdf_name($$$about), UNPROVIDED);
                                            SubLObject uri = (NIL != web_utilities.uri_p(about_value, UNPROVIDED)) ? ((SubLObject) (about_value)) : com.cyc.cycjava.cycl.owl.owl_to_cycl.process_owl_attribute_value(about_value);
                                            SubLObject prior_ontology = com.cyc.cycjava.cycl.owl.owl_to_cycl.find_or_create_owl_ontology_for_uri(uri, import_parameters, UNPROVIDED);
                                            com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_assert(list($const110$owl_priorVersion, ontology, prior_ontology), $$OWLMappingMt, import_parameters);
                                        }
                                    }
                                } else {
                                    if (NIL != web_utilities.xml_token_element_nameP(token, owl_utilities.owl_name($$$imports))) {
                                    } else {
                                        if (NIL != web_utilities.xml_token_element_nameP(token, owl_utilities.owl_name($$$versionInfo))) {
                                        } else {
                                            if (NIL != web_utilities.xml_closing_tokenP(owl_utilities.owl_name($$$Ontology), token)) {
                                                doneP = T;
                                            } else {
                                                Errors.warn($str_alt113$Don_t_know_how_to_handle_ontology, token);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    remaining_tokens = web_utilities.advance_xml_tokens_to_end_of_element(remaining_tokens);
                } 
            }
            return ontology;
        }
    }

    public static SubLObject import_owl_ontology_info_internal(final SubLObject ontology, final SubLObject tokens, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == xml_parsing_utilities.xml_token_element_nameP(tokens.first(), owl_utilities.owl_name(owl_to_cycl.$$$Ontology)))) {
            Errors.error(owl_to_cycl.$str107$Expected_ontology_token__got__S, tokens.first());
        }
        SubLObject remaining_tokens = tokens.rest();
        final SubLObject ontology_context = owl_to_cycl.owl_import_parameters_ontology_context(import_parameters);
        SubLObject doneP = NIL;
        while (NIL == doneP) {
            if (NIL != empty_list_p(remaining_tokens)) {
                Errors.error(owl_to_cycl.$str108$Couldn_t_find_closing_Ontology_ta, first_n($int$32, tokens));
            }
            SubLObject token;
            for (token = remaining_tokens.first(); NIL == xml_parsing_utilities.regular_xml_tagP(token); token = remaining_tokens.first()) {
                remaining_tokens = xml_parsing_utilities.advance_xml_tokens(remaining_tokens, UNPROVIDED);
            }
            if (NIL != xml_parsing_utilities.xml_token_element_nameP(token, rdfs_name(owl_to_cycl.$$$comment))) {
                final SubLObject comment = second(remaining_tokens);
                if (NIL != xml_parsing_utilities.regular_xml_tagP(comment)) {
                    Errors.warn(owl_to_cycl.$str111$Expecting_comment__got__S, comment);
                } else {
                    owl_to_cycl.owl_assert(list(owl_to_cycl.$const112$rdfs_comment, ontology, comment), ontology_context, import_parameters);
                }
            } else
                if (NIL != xml_parsing_utilities.xml_token_element_nameP(token, rdfs_name(owl_to_cycl.$$$label))) {
                    final SubLObject lang_value = xml_parsing_utilities.xml_tag_attribute_value(token, owl_to_cycl.xml_name(owl_to_cycl.$$$lang), NIL);
                    final SubLObject language = (NIL != lang_value) ? decode_html_language_abbreviation(lang_value) : owl_to_cycl.$$EnglishLanguage;
                    final SubLObject label = second(remaining_tokens);
                    if (NIL != xml_parsing_utilities.regular_xml_tagP(label)) {
                        Errors.warn(owl_to_cycl.$str116$Expecting_label__got__S, label);
                    } else {
                        owl_to_cycl.assert_owl_label(ontology, cons(label, language), import_parameters);
                    }
                } else
                    if (NIL != xml_parsing_utilities.xml_token_element_nameP(token, owl_utilities.owl_name(owl_to_cycl.$$$priorVersion))) {
                        final SubLObject ontology_token = second(remaining_tokens);
                        if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == xml_parsing_utilities.xml_token_element_nameP(ontology_token, owl_utilities.owl_name(owl_to_cycl.$$$Ontology)))) {
                            Errors.error(owl_to_cycl.$str107$Expected_ontology_token__got__S, ontology_token);
                        }
                        final SubLObject about_value = xml_parsing_utilities.xml_tag_attribute_value(ontology_token, rdf_name(owl_to_cycl.$$$about), UNPROVIDED);
                        final SubLObject uri = (NIL != uri_p(about_value, UNPROVIDED)) ? about_value : owl_to_cycl.process_owl_attribute_value(about_value);
                        final SubLObject prior_ontology = owl_to_cycl.find_or_create_owl_ontology_for_uri(uri, import_parameters, UNPROVIDED);
                        owl_to_cycl.owl_assert(list(owl_to_cycl.$const119$owl_priorVersion, ontology, prior_ontology), owl_to_cycl.$$OWLMappingMt, import_parameters);
                    } else
                        if (NIL == xml_parsing_utilities.xml_token_element_nameP(token, owl_utilities.owl_name(owl_to_cycl.$$$imports))) {
                            if (NIL == xml_parsing_utilities.xml_token_element_nameP(token, owl_utilities.owl_name(owl_to_cycl.$$$versionInfo))) {
                                if (NIL != xml_parsing_utilities.xml_closing_tokenP(owl_utilities.owl_name(owl_to_cycl.$$$Ontology), token)) {
                                    doneP = T;
                                } else {
                                    Errors.warn(owl_to_cycl.$str122$Don_t_know_how_to_handle_ontology, token);
                                }
                            }
                        }



            remaining_tokens = xml_parsing_utilities.advance_xml_tokens_to_end_of_element(remaining_tokens);
        } 
        return ontology;
    }

    public static final SubLObject owl_pred_info_print_function_trampoline_alt(SubLObject v_object, SubLObject stream) {
        com.cyc.cycjava.cycl.owl.owl_to_cycl.print_owl_pred_info(v_object, stream, ZERO_INTEGER);
        return NIL;
    }

    public static SubLObject owl_pred_info_print_function_trampoline(final SubLObject v_object, final SubLObject stream) {
        owl_to_cycl.print_owl_pred_info(v_object, stream, ZERO_INTEGER);
        return NIL;
    }

    public static final SubLObject owl_pred_info_p_alt(SubLObject v_object) {
        return v_object.getClass() == com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_pred_info_native.class ? ((SubLObject) (T)) : NIL;
    }

    public static SubLObject owl_pred_info_p(final SubLObject v_object) {
        return v_object.getClass() == com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_pred_info_native.class ? T : NIL;
    }

    public static final SubLObject opi_cyc_name_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, OWL_PRED_INFO_P);
        return v_object.getField2();
    }

    public static SubLObject opi_cyc_name(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_pred_info_p(v_object) : "! owl_to_cycl.owl_pred_info_p(v_object) " + "owl_to_cycl.owl_pred_info_p error :" + v_object;
        return v_object.getField2();
    }

    public static final SubLObject opi_comment_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, OWL_PRED_INFO_P);
        return v_object.getField3();
    }

    public static SubLObject opi_comment(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_pred_info_p(v_object) : "! owl_to_cycl.owl_pred_info_p(v_object) " + "owl_to_cycl.owl_pred_info_p error :" + v_object;
        return v_object.getField3();
    }

    public static final SubLObject opi_domains_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, OWL_PRED_INFO_P);
        return v_object.getField4();
    }

    public static SubLObject opi_domains(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_pred_info_p(v_object) : "! owl_to_cycl.owl_pred_info_p(v_object) " + "owl_to_cycl.owl_pred_info_p error :" + v_object;
        return v_object.getField4();
    }

    public static final SubLObject opi_range_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, OWL_PRED_INFO_P);
        return v_object.getField5();
    }

    public static SubLObject opi_range(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_pred_info_p(v_object) : "! owl_to_cycl.owl_pred_info_p(v_object) " + "owl_to_cycl.owl_pred_info_p error :" + v_object;
        return v_object.getField5();
    }

    public static final SubLObject opi_plist_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, OWL_PRED_INFO_P);
        return v_object.getField6();
    }

    public static SubLObject opi_plist(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_pred_info_p(v_object) : "! owl_to_cycl.owl_pred_info_p(v_object) " + "owl_to_cycl.owl_pred_info_p error :" + v_object;
        return v_object.getField6();
    }

    public static final SubLObject _csetf_opi_cyc_name_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, OWL_PRED_INFO_P);
        return v_object.setField2(value);
    }

    public static SubLObject _csetf_opi_cyc_name(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_pred_info_p(v_object) : "! owl_to_cycl.owl_pred_info_p(v_object) " + "owl_to_cycl.owl_pred_info_p error :" + v_object;
        return v_object.setField2(value);
    }

    public static final SubLObject _csetf_opi_comment_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, OWL_PRED_INFO_P);
        return v_object.setField3(value);
    }

    public static SubLObject _csetf_opi_comment(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_pred_info_p(v_object) : "! owl_to_cycl.owl_pred_info_p(v_object) " + "owl_to_cycl.owl_pred_info_p error :" + v_object;
        return v_object.setField3(value);
    }

    public static final SubLObject _csetf_opi_domains_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, OWL_PRED_INFO_P);
        return v_object.setField4(value);
    }

    public static SubLObject _csetf_opi_domains(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_pred_info_p(v_object) : "! owl_to_cycl.owl_pred_info_p(v_object) " + "owl_to_cycl.owl_pred_info_p error :" + v_object;
        return v_object.setField4(value);
    }

    public static final SubLObject _csetf_opi_range_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, OWL_PRED_INFO_P);
        return v_object.setField5(value);
    }

    public static SubLObject _csetf_opi_range(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_pred_info_p(v_object) : "! owl_to_cycl.owl_pred_info_p(v_object) " + "owl_to_cycl.owl_pred_info_p error :" + v_object;
        return v_object.setField5(value);
    }

    public static final SubLObject _csetf_opi_plist_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, OWL_PRED_INFO_P);
        return v_object.setField6(value);
    }

    public static SubLObject _csetf_opi_plist(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_pred_info_p(v_object) : "! owl_to_cycl.owl_pred_info_p(v_object) " + "owl_to_cycl.owl_pred_info_p error :" + v_object;
        return v_object.setField6(value);
    }

    public static final SubLObject make_owl_pred_info_alt(SubLObject arglist) {
        if (arglist == UNPROVIDED) {
            arglist = NIL;
        }
        {
            SubLObject v_new = new com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_pred_info_native();
            SubLObject next = NIL;
            for (next = arglist; NIL != next; next = cddr(next)) {
                {
                    SubLObject current_arg = next.first();
                    SubLObject current_value = cadr(next);
                    SubLObject pcase_var = current_arg;
                    if (pcase_var.eql($CYC_NAME)) {
                        com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_opi_cyc_name(v_new, current_value);
                    } else {
                        if (pcase_var.eql($COMMENT)) {
                            com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_opi_comment(v_new, current_value);
                        } else {
                            if (pcase_var.eql($DOMAINS)) {
                                com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_opi_domains(v_new, current_value);
                            } else {
                                if (pcase_var.eql($RANGE)) {
                                    com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_opi_range(v_new, current_value);
                                } else {
                                    if (pcase_var.eql($PLIST)) {
                                        com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_opi_plist(v_new, current_value);
                                    } else {
                                        Errors.error($str_alt137$Invalid_slot__S_for_construction_, current_arg);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return v_new;
        }
    }

    public static SubLObject make_owl_pred_info(SubLObject arglist) {
        if (arglist == UNPROVIDED) {
            arglist = NIL;
        }
        final SubLObject v_new = new com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_pred_info_native();
        SubLObject next;
        SubLObject current_arg;
        SubLObject current_value;
        SubLObject pcase_var;
        for (next = NIL, next = arglist; NIL != next; next = cddr(next)) {
            current_arg = next.first();
            current_value = cadr(next);
            pcase_var = current_arg;
            if (pcase_var.eql($CYC_NAME)) {
                owl_to_cycl._csetf_opi_cyc_name(v_new, current_value);
            } else
                if (pcase_var.eql($COMMENT)) {
                    owl_to_cycl._csetf_opi_comment(v_new, current_value);
                } else
                    if (pcase_var.eql($DOMAINS)) {
                        owl_to_cycl._csetf_opi_domains(v_new, current_value);
                    } else
                        if (pcase_var.eql($RANGE)) {
                            owl_to_cycl._csetf_opi_range(v_new, current_value);
                        } else
                            if (pcase_var.eql($PLIST)) {
                                owl_to_cycl._csetf_opi_plist(v_new, current_value);
                            } else {
                                Errors.error(owl_to_cycl.$str147$Invalid_slot__S_for_construction_, current_arg);
                            }




        }
        return v_new;
    }

    public static SubLObject visit_defstruct_owl_pred_info(final SubLObject obj, final SubLObject visitor_fn) {
        funcall(visitor_fn, obj, $BEGIN, owl_to_cycl.MAKE_OWL_PRED_INFO, FIVE_INTEGER);
        funcall(visitor_fn, obj, $SLOT, $CYC_NAME, owl_to_cycl.opi_cyc_name(obj));
        funcall(visitor_fn, obj, $SLOT, $COMMENT, owl_to_cycl.opi_comment(obj));
        funcall(visitor_fn, obj, $SLOT, $DOMAINS, owl_to_cycl.opi_domains(obj));
        funcall(visitor_fn, obj, $SLOT, $RANGE, owl_to_cycl.opi_range(obj));
        funcall(visitor_fn, obj, $SLOT, $PLIST, owl_to_cycl.opi_plist(obj));
        funcall(visitor_fn, obj, $END, owl_to_cycl.MAKE_OWL_PRED_INFO, FIVE_INTEGER);
        return obj;
    }

    public static SubLObject visit_defstruct_object_owl_pred_info_method(final SubLObject obj, final SubLObject visitor_fn) {
        return owl_to_cycl.visit_defstruct_owl_pred_info(obj, visitor_fn);
    }

    public static final SubLObject print_owl_pred_info_alt(SubLObject v_object, SubLObject stream, SubLObject depth) {
        format(stream, $str_alt138$_OWL_PRED_INFO__A_, com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_external_name(v_object, UNPROVIDED));
        return v_object;
    }

    public static SubLObject print_owl_pred_info(final SubLObject v_object, final SubLObject stream, final SubLObject depth) {
        format(stream, owl_to_cycl.$str153$_OWL_PRED_INFO__A_, owl_to_cycl.owl_pred_info_external_name(v_object, UNPROVIDED));
        return v_object;
    }

    public static final SubLObject find_or_create_owl_pred_info_alt(SubLObject external_name) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject pred_info = ((NIL != external_name) && (NIL != misc_utilities.initialized_p($owl_definition_accumulator$.getDynamicValue(thread)))) ? ((SubLObject) (com.cyc.cycjava.cycl.owl.owl_to_cycl.find_accumulated_owl_definition(external_name, $PROPERTY))) : NIL;
                return NIL != pred_info ? ((SubLObject) (pred_info)) : com.cyc.cycjava.cycl.owl.owl_to_cycl.new_owl_pred_info(external_name, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
        }
    }

    public static SubLObject find_or_create_owl_pred_info(final SubLObject external_name) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject pred_info = ((NIL != external_name) && (NIL != initialized_p(owl_to_cycl.$owl_definition_accumulator$.getDynamicValue(thread)))) ? owl_to_cycl.find_accumulated_owl_definition(external_name, $PROPERTY) : NIL;
        return NIL != pred_info ? pred_info : owl_to_cycl.new_owl_pred_info(external_name, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject new_owl_pred_info_alt(SubLObject external_name, SubLObject cyc_name, SubLObject comment, SubLObject domains, SubLObject range) {
        if (cyc_name == UNPROVIDED) {
            cyc_name = NIL;
        }
        if (comment == UNPROVIDED) {
            comment = NIL;
        }
        if (domains == UNPROVIDED) {
            domains = NIL;
        }
        if (range == UNPROVIDED) {
            range = NIL;
        }
        {
            SubLObject pred_info = com.cyc.cycjava.cycl.owl.owl_to_cycl.make_owl_pred_info(UNPROVIDED);
            if (NIL != cyc_name) {
                com.cyc.cycjava.cycl.owl.owl_to_cycl.set_owl_pred_info_cyc_name(pred_info, cyc_name);
            }
            com.cyc.cycjava.cycl.owl.owl_to_cycl.set_owl_pred_info_comment(pred_info, comment);
            com.cyc.cycjava.cycl.owl.owl_to_cycl.set_owl_pred_info_domains(pred_info, domains);
            com.cyc.cycjava.cycl.owl.owl_to_cycl.set_owl_pred_info_range(pred_info, range);
            com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_opi_plist(pred_info, NIL);
            if (NIL != external_name) {
                com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_enter(pred_info, $EXTERNAL_NAME, external_name);
            }
            return pred_info;
        }
    }

    public static SubLObject new_owl_pred_info(final SubLObject external_name, SubLObject cyc_name, SubLObject comment, SubLObject domains, SubLObject range) {
        if (cyc_name == UNPROVIDED) {
            cyc_name = NIL;
        }
        if (comment == UNPROVIDED) {
            comment = NIL;
        }
        if (domains == UNPROVIDED) {
            domains = NIL;
        }
        if (range == UNPROVIDED) {
            range = NIL;
        }
        final SubLObject pred_info = owl_to_cycl.make_owl_pred_info(UNPROVIDED);
        if (NIL != cyc_name) {
            owl_to_cycl.set_owl_pred_info_cyc_name(pred_info, cyc_name);
        }
        owl_to_cycl.set_owl_pred_info_comment(pred_info, comment);
        owl_to_cycl.set_owl_pred_info_domains(pred_info, domains);
        owl_to_cycl.set_owl_pred_info_range(pred_info, range);
        owl_to_cycl._csetf_opi_plist(pred_info, NIL);
        if (NIL != external_name) {
            owl_to_cycl.owl_pred_info_plist_enter(pred_info, $EXTERNAL_NAME, external_name);
        }
        return pred_info;
    }

    public static final SubLObject owl_pred_info_cyc_name_alt(SubLObject pred_info) {
        SubLTrampolineFile.checkType(pred_info, OWL_PRED_INFO_P);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.opi_cyc_name(pred_info);
    }

    public static SubLObject owl_pred_info_cyc_name(final SubLObject pred_info) {
        assert NIL != owl_to_cycl.owl_pred_info_p(pred_info) : "! owl_to_cycl.owl_pred_info_p(pred_info) " + ("owl_to_cycl.owl_pred_info_p(pred_info) " + "CommonSymbols.NIL != owl_to_cycl.owl_pred_info_p(pred_info) ") + pred_info;
        return owl_to_cycl.opi_cyc_name(pred_info);
    }

    public static final SubLObject owl_pred_info_comment_alt(SubLObject pred_info) {
        SubLTrampolineFile.checkType(pred_info, OWL_PRED_INFO_P);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.opi_comment(pred_info);
    }

    public static SubLObject owl_pred_info_comment(final SubLObject pred_info) {
        assert NIL != owl_to_cycl.owl_pred_info_p(pred_info) : "! owl_to_cycl.owl_pred_info_p(pred_info) " + ("owl_to_cycl.owl_pred_info_p(pred_info) " + "CommonSymbols.NIL != owl_to_cycl.owl_pred_info_p(pred_info) ") + pred_info;
        return owl_to_cycl.opi_comment(pred_info);
    }

    public static final SubLObject owl_pred_info_domains_alt(SubLObject pred_info) {
        SubLTrampolineFile.checkType(pred_info, OWL_PRED_INFO_P);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.opi_domains(pred_info);
    }

    public static SubLObject owl_pred_info_domains(final SubLObject pred_info) {
        assert NIL != owl_to_cycl.owl_pred_info_p(pred_info) : "! owl_to_cycl.owl_pred_info_p(pred_info) " + ("owl_to_cycl.owl_pred_info_p(pred_info) " + "CommonSymbols.NIL != owl_to_cycl.owl_pred_info_p(pred_info) ") + pred_info;
        return owl_to_cycl.opi_domains(pred_info);
    }

    public static final SubLObject owl_pred_info_range_alt(SubLObject pred_info) {
        SubLTrampolineFile.checkType(pred_info, OWL_PRED_INFO_P);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.opi_range(pred_info);
    }

    public static SubLObject owl_pred_info_range(final SubLObject pred_info) {
        assert NIL != owl_to_cycl.owl_pred_info_p(pred_info) : "! owl_to_cycl.owl_pred_info_p(pred_info) " + ("owl_to_cycl.owl_pred_info_p(pred_info) " + "CommonSymbols.NIL != owl_to_cycl.owl_pred_info_p(pred_info) ") + pred_info;
        return owl_to_cycl.opi_range(pred_info);
    }

    public static final SubLObject owl_pred_info_plist_alt(SubLObject pred_info) {
        SubLTrampolineFile.checkType(pred_info, OWL_PRED_INFO_P);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.opi_plist(pred_info);
    }

    public static SubLObject owl_pred_info_plist(final SubLObject pred_info) {
        assert NIL != owl_to_cycl.owl_pred_info_p(pred_info) : "! owl_to_cycl.owl_pred_info_p(pred_info) " + ("owl_to_cycl.owl_pred_info_p(pred_info) " + "CommonSymbols.NIL != owl_to_cycl.owl_pred_info_p(pred_info) ") + pred_info;
        return owl_to_cycl.opi_plist(pred_info);
    }

    public static final SubLObject owl_pred_info_plist_lookup_alt(SubLObject pred_info, SubLObject key, SubLObject default_value) {
        if (default_value == UNPROVIDED) {
            default_value = NIL;
        }
        return getf(com.cyc.cycjava.cycl.owl.owl_to_cycl.opi_plist(pred_info), key, default_value);
    }

    public static SubLObject owl_pred_info_plist_lookup(final SubLObject pred_info, final SubLObject key, SubLObject default_value) {
        if (default_value == UNPROVIDED) {
            default_value = NIL;
        }
        return getf(owl_to_cycl.opi_plist(pred_info), key, default_value);
    }

    public static final SubLObject owl_pred_info_external_name_alt(SubLObject pred_info, SubLObject default_value) {
        if (default_value == UNPROVIDED) {
            default_value = NIL;
        }
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_lookup(pred_info, $EXTERNAL_NAME, default_value);
    }

    public static SubLObject owl_pred_info_external_name(final SubLObject pred_info, SubLObject default_value) {
        if (default_value == UNPROVIDED) {
            default_value = NIL;
        }
        return owl_to_cycl.owl_pred_info_plist_lookup(pred_info, $EXTERNAL_NAME, default_value);
    }

    public static final SubLObject set_owl_pred_info_cyc_name_alt(SubLObject pred_info, SubLObject name) {
        SubLTrampolineFile.checkType(pred_info, OWL_PRED_INFO_P);
        SubLTrampolineFile.checkType(name, STRINGP);
        com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_opi_cyc_name(pred_info, name);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.opi_cyc_name(pred_info);
    }

    public static SubLObject set_owl_pred_info_cyc_name(final SubLObject pred_info, final SubLObject name) {
        assert NIL != owl_to_cycl.owl_pred_info_p(pred_info) : "! owl_to_cycl.owl_pred_info_p(pred_info) " + ("owl_to_cycl.owl_pred_info_p(pred_info) " + "CommonSymbols.NIL != owl_to_cycl.owl_pred_info_p(pred_info) ") + pred_info;
        assert NIL != stringp(name) : "! stringp(name) " + ("Types.stringp(name) " + "CommonSymbols.NIL != Types.stringp(name) ") + name;
        owl_to_cycl._csetf_opi_cyc_name(pred_info, name);
        return owl_to_cycl.opi_cyc_name(pred_info);
    }

    public static final SubLObject set_owl_pred_info_comment_alt(SubLObject pred_info, SubLObject comment) {
        SubLTrampolineFile.checkType(pred_info, OWL_PRED_INFO_P);
        if (NIL != comment) {
            SubLTrampolineFile.checkType(comment, STRINGP);
        }
        com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_opi_comment(pred_info, comment);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.opi_comment(pred_info);
    }

    public static SubLObject set_owl_pred_info_comment(final SubLObject pred_info, final SubLObject comment) {
        assert NIL != owl_to_cycl.owl_pred_info_p(pred_info) : "! owl_to_cycl.owl_pred_info_p(pred_info) " + ("owl_to_cycl.owl_pred_info_p(pred_info) " + "CommonSymbols.NIL != owl_to_cycl.owl_pred_info_p(pred_info) ") + pred_info;
        if (((NIL != comment) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == stringp(comment))) {
            throw new AssertionError(comment);
        }
        owl_to_cycl._csetf_opi_comment(pred_info, comment);
        return owl_to_cycl.opi_comment(pred_info);
    }

    public static final SubLObject set_owl_pred_info_domains_alt(SubLObject pred_info, SubLObject domains) {
        SubLTrampolineFile.checkType(pred_info, OWL_PRED_INFO_P);
        SubLTrampolineFile.checkType(domains, NON_DOTTED_LIST_P);
        com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_opi_domains(pred_info, domains);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.opi_domains(pred_info);
    }

    public static SubLObject set_owl_pred_info_domains(final SubLObject pred_info, final SubLObject domains) {
        assert NIL != owl_to_cycl.owl_pred_info_p(pred_info) : "! owl_to_cycl.owl_pred_info_p(pred_info) " + ("owl_to_cycl.owl_pred_info_p(pred_info) " + "CommonSymbols.NIL != owl_to_cycl.owl_pred_info_p(pred_info) ") + pred_info;
        assert NIL != non_dotted_list_p(domains) : "! list_utilities.non_dotted_list_p(domains) " + ("list_utilities.non_dotted_list_p(domains) " + "CommonSymbols.NIL != list_utilities.non_dotted_list_p(domains) ") + domains;
        owl_to_cycl._csetf_opi_domains(pred_info, domains);
        return owl_to_cycl.opi_domains(pred_info);
    }

    public static final SubLObject set_owl_pred_info_range_alt(SubLObject pred_info, SubLObject range) {
        SubLTrampolineFile.checkType(pred_info, OWL_PRED_INFO_P);
        if (NIL != range) {
            SubLTrampolineFile.checkType(range, OWL_EXTERNAL_VALUE_SPECIFICATION_P);
        }
        com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_opi_range(pred_info, range);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.opi_range(pred_info);
    }

    public static SubLObject set_owl_pred_info_range(final SubLObject pred_info, final SubLObject range) {
        assert NIL != owl_to_cycl.owl_pred_info_p(pred_info) : "! owl_to_cycl.owl_pred_info_p(pred_info) " + ("owl_to_cycl.owl_pred_info_p(pred_info) " + "CommonSymbols.NIL != owl_to_cycl.owl_pred_info_p(pred_info) ") + pred_info;
        if (((NIL != range) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == owl_to_cycl.owl_external_value_specification_p(range))) {
            throw new AssertionError(range);
        }
        owl_to_cycl._csetf_opi_range(pred_info, range);
        return owl_to_cycl.opi_range(pred_info);
    }

    public static SubLObject merge_owl_pred_definitions(final SubLObject from, final SubLObject onto) {
        owl_to_cycl.set_owl_pred_info_cyc_name(onto, owl_to_cycl.owl_pred_info_cyc_name(from));
        owl_to_cycl.set_owl_pred_info_comment(onto, owl_to_cycl.owl_pred_info_comment(from));
        owl_to_cycl.set_owl_pred_info_domains(onto, union(owl_to_cycl.owl_pred_info_domains(from), owl_to_cycl.owl_pred_info_domains(onto), symbol_function(EQUAL), UNPROVIDED));
        owl_to_cycl.set_owl_pred_info_range(onto, owl_to_cycl.owl_pred_info_range(from));
        SubLObject remainder;
        SubLObject property;
        SubLObject from_value;
        SubLObject onto_value;
        SubLObject new_value;
        for (remainder = NIL, remainder = owl_to_cycl.owl_pred_info_plist(from); NIL != remainder; remainder = cddr(remainder)) {
            property = remainder.first();
            from_value = cadr(remainder);
            onto_value = owl_to_cycl.owl_pred_info_plist_lookup(onto, property, UNPROVIDED);
            new_value = (NIL != owl_to_cycl.owl_term_info_plist_list_propertyP(property)) ? union(from_value, onto_value, symbol_function(EQUAL), UNPROVIDED) : from_value;
            owl_to_cycl.owl_pred_info_plist_enter(onto, property, new_value);
        }
        return onto;
    }

    public static final SubLObject owl_external_value_specification_p_alt(SubLObject v_object) {
        return makeBoolean((((((((((NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_value_specification_union_p(v_object)) || (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_value_specification_intersection_p(v_object))) || (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_term_enumeration_p(v_object))) || (NIL != web_utilities.xml_prefixed_name_p(v_object))) || (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.nonlocal_owl_term_reference_p(v_object))) || (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_restriction_p(v_object))) || (NIL != pattern_match.tree_matches_pattern(v_object, $list_alt143))) || (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.node_id_specification_p(v_object))) || (NIL != cycl_utilities.expression_find_if(OWL_QUASI_TERM_P, v_object, UNPROVIDED, UNPROVIDED))) || (NIL != cycl_grammar.cycl_denotational_term_p(v_object)));
    }

    public static SubLObject owl_external_value_specification_p(final SubLObject v_object) {
        return makeBoolean((((((((((NIL != owl_to_cycl.owl_external_value_specification_union_p(v_object)) || (NIL != owl_to_cycl.owl_external_value_specification_intersection_p(v_object))) || (NIL != owl_to_cycl.owl_external_term_enumeration_p(v_object))) || (NIL != xml_parsing_utilities.xml_prefixed_name_p(v_object))) || (NIL != owl_to_cycl.nonlocal_owl_term_reference_p(v_object))) || (NIL != owl_to_cycl.owl_restriction_p(v_object))) || (NIL != tree_matches_pattern(v_object, owl_to_cycl.$list158))) || (NIL != owl_to_cycl.node_id_specification_p(v_object))) || (NIL != expression_find_if(owl_to_cycl.OWL_QUASI_TERM_P, v_object, UNPROVIDED, UNPROVIDED))) || (NIL != cycl_denotational_term_p(v_object)));
    }

    public static final SubLObject node_id_specification_p_alt(SubLObject v_object) {
        return pattern_match.tree_matches_pattern(v_object, $list_alt145);
    }

    public static SubLObject node_id_specification_p(final SubLObject v_object) {
        return tree_matches_pattern(v_object, owl_to_cycl.$list160);
    }

    public static final SubLObject owl_restriction_p_alt(SubLObject v_object) {
        return pattern_match.tree_matches_pattern(v_object, $list_alt146);
    }

    public static SubLObject owl_restriction_p(final SubLObject v_object) {
        return tree_matches_pattern(v_object, owl_to_cycl.$list161);
    }

    public static final SubLObject owl_external_value_specification_union_p_alt(SubLObject v_object) {
        return pattern_match.tree_matches_pattern(v_object, $list_alt147);
    }

    public static SubLObject owl_external_value_specification_union_p(final SubLObject v_object) {
        return tree_matches_pattern(v_object, owl_to_cycl.$list162);
    }

    public static final SubLObject owl_external_value_specification_union_names_alt(SubLObject union) {
        return union.rest();
    }

    public static SubLObject owl_external_value_specification_union_names(final SubLObject union) {
        return union.rest();
    }

    public static final SubLObject owl_external_value_specification_intersection_p_alt(SubLObject v_object) {
        return pattern_match.tree_matches_pattern(v_object, $list_alt148);
    }

    public static SubLObject owl_external_value_specification_intersection_p(final SubLObject v_object) {
        return tree_matches_pattern(v_object, owl_to_cycl.$list163);
    }

    public static final SubLObject owl_external_value_specification_intersection_names_alt(SubLObject intersection) {
        {
            SubLObject names = intersection.rest();
            return names;
        }
    }

    public static SubLObject owl_external_value_specification_intersection_names(final SubLObject intersection) {
        final SubLObject names = intersection.rest();
        return names;
    }

    public static final SubLObject owl_external_term_enumeration_p_alt(SubLObject v_object) {
        return pattern_match.tree_matches_pattern(v_object, $list_alt149);
    }

    public static SubLObject owl_external_term_enumeration_p(final SubLObject v_object) {
        return tree_matches_pattern(v_object, owl_to_cycl.$list164);
    }

    public static final SubLObject owl_external_term_enumeration_terms_alt(SubLObject enumeration) {
        SubLTrampolineFile.checkType(enumeration, OWL_EXTERNAL_TERM_ENUMERATION_P);
        return enumeration.rest();
    }

    public static SubLObject owl_external_term_enumeration_terms(final SubLObject enumeration) {
        assert NIL != owl_to_cycl.owl_external_term_enumeration_p(enumeration) : "! owl_to_cycl.owl_external_term_enumeration_p(enumeration) " + ("owl_to_cycl.owl_external_term_enumeration_p(enumeration) " + "CommonSymbols.NIL != owl_to_cycl.owl_external_term_enumeration_p(enumeration) ") + enumeration;
        return enumeration.rest();
    }

    public static final SubLObject owl_pred_info_plist_enter_alt(SubLObject pred_info, SubLObject key, SubLObject value) {
        com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_opi_plist(pred_info, putf(com.cyc.cycjava.cycl.owl.owl_to_cycl.opi_plist(pred_info), key, value));
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.opi_plist(pred_info);
    }

    public static SubLObject owl_pred_info_plist_enter(final SubLObject pred_info, final SubLObject key, final SubLObject value) {
        owl_to_cycl._csetf_opi_plist(pred_info, putf(owl_to_cycl.opi_plist(pred_info), key, value));
        return owl_to_cycl.opi_plist(pred_info);
    }

    public static final SubLObject owl_pred_info_plist_push_alt(SubLObject pred_info, SubLObject key, SubLObject value) {
        {
            SubLObject existing = getf(com.cyc.cycjava.cycl.owl.owl_to_cycl.opi_plist(pred_info), key, NIL);
            SubLObject v_new = cons(value, existing);
            com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_enter(pred_info, key, v_new);
        }
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.opi_plist(pred_info);
    }

    public static SubLObject owl_pred_info_plist_push(final SubLObject pred_info, final SubLObject key, final SubLObject value) {
        final SubLObject existing = getf(owl_to_cycl.opi_plist(pred_info), key, NIL);
        final SubLObject v_new = (NIL != find(value, existing, symbol_function(EQUAL), UNPROVIDED, UNPROVIDED, UNPROVIDED)) ? existing : cons(value, existing);
        owl_to_cycl.owl_pred_info_plist_enter(pred_info, key, v_new);
        return owl_to_cycl.opi_plist(pred_info);
    }

    public static final SubLObject sxhash_owl_pred_info_method_alt(SubLObject v_object) {
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.sxhash_owl_pred_info(v_object);
    }

    public static SubLObject sxhash_owl_pred_info_method(final SubLObject v_object) {
        return owl_to_cycl.sxhash_owl_pred_info(v_object);
    }

    /**
     *
     *
     * @unknown 
     */
    @LispMethod(comment = "@unknown")
    public static final SubLObject sxhash_owl_pred_info_alt(SubLObject pred_info) {
        return Sxhash.sxhash(com.cyc.cycjava.cycl.owl.owl_to_cycl.opi_cyc_name(pred_info));
    }

    /**
     *
     *
     * @unknown 
     */
    @LispMethod(comment = "@unknown")
    public static SubLObject sxhash_owl_pred_info(final SubLObject pred_info) {
        return Sxhash.sxhash(owl_to_cycl.opi_cyc_name(pred_info));
    }

    public static final SubLObject owl_import_parameters_print_function_trampoline_alt(SubLObject v_object, SubLObject stream) {
        com.cyc.cycjava.cycl.owl.owl_to_cycl.print_owl_import_parameters(v_object, stream, ZERO_INTEGER);
        return NIL;
    }

    public static SubLObject owl_import_parameters_print_function_trampoline(final SubLObject v_object, final SubLObject stream) {
        owl_to_cycl.print_owl_import_parameters(v_object, stream, ZERO_INTEGER);
        return NIL;
    }

    public static final SubLObject owl_import_parameters_p_alt(SubLObject v_object) {
        return v_object.getClass() == com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_import_parameters_native.class ? ((SubLObject) (T)) : NIL;
    }

    public static SubLObject owl_import_parameters_p(final SubLObject v_object) {
        return v_object.getClass() == com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_import_parameters_native.class ? T : NIL;
    }

    public static final SubLObject oip_ontology_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, owl_to_cycl.OWL_IMPORT_PARAMETERS_P);
        return (($owl_import_parameters_native)v_object).$ontology;
    }

    public static SubLObject oip_ontology(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(v_object) : "! owl_to_cycl.owl_import_parameters_p(v_object) " + "owl_to_cycl.owl_import_parameters_p error :" + v_object;
        return v_object.getField2();
    }

    public static final SubLObject oip_namespace_map_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, owl_to_cycl.OWL_IMPORT_PARAMETERS_P);
        return (($owl_import_parameters_native)v_object).$namespace_map;
    }

    public static SubLObject oip_namespace_map(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(v_object) : "! owl_to_cycl.owl_import_parameters_p(v_object) " + "owl_to_cycl.owl_import_parameters_p error :" + v_object;
        return v_object.getField3();
    }

    public static final SubLObject oip_constant_prefix_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, owl_to_cycl.OWL_IMPORT_PARAMETERS_P);
        return (($owl_import_parameters_native)v_object).$constant_prefix;
    }

    public static SubLObject oip_constant_prefix(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(v_object) : "! owl_to_cycl.owl_import_parameters_p(v_object) " + "owl_to_cycl.owl_import_parameters_p error :" + v_object;
        return v_object.getField4();
    }

    public static SubLObject oip_constant_suffix(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(v_object) : "! owl_to_cycl.owl_import_parameters_p(v_object) " + "owl_to_cycl.owl_import_parameters_p error :" + v_object;
        return v_object.getField5();
    }

    public static final SubLObject oip_base_uri_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, owl_to_cycl.OWL_IMPORT_PARAMETERS_P);
        return (($owl_import_parameters_native)v_object).$base_uri;
    }

    public static SubLObject oip_base_uri(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(v_object) : "! owl_to_cycl.owl_import_parameters_p(v_object) " + "owl_to_cycl.owl_import_parameters_p error :" + v_object;
        return v_object.getField6();
    }

    public static SubLObject oip_uri_prefix(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(v_object) : "! owl_to_cycl.owl_import_parameters_p(v_object) " + "owl_to_cycl.owl_import_parameters_p error :" + v_object;
        return v_object.getField7();
    }

    public static final SubLObject oip_cyclist_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, owl_to_cycl.OWL_IMPORT_PARAMETERS_P);
        return (($owl_import_parameters_native)v_object).$cyclist;
    }

    public static SubLObject oip_cyclist(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(v_object) : "! owl_to_cycl.owl_import_parameters_p(v_object) " + "owl_to_cycl.owl_import_parameters_p error :" + v_object;
        return v_object.getField8();
    }

    public static final SubLObject oip_quoted_isa_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, owl_to_cycl.OWL_IMPORT_PARAMETERS_P);
        return (($owl_import_parameters_native)v_object).$quoted_isa;
    }

    public static SubLObject oip_quoted_isa(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(v_object) : "! owl_to_cycl.owl_import_parameters_p(v_object) " + "owl_to_cycl.owl_import_parameters_p error :" + v_object;
        return v_object.getField9();
    }

    public static final SubLObject oip_prefix_external_namesP_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, owl_to_cycl.OWL_IMPORT_PARAMETERS_P);
        return (($owl_import_parameters_native)v_object).$prefix_external_namesP;
    }

    public static SubLObject oip_prefix_external_namesP(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(v_object) : "! owl_to_cycl.owl_import_parameters_p(v_object) " + "owl_to_cycl.owl_import_parameters_p error :" + v_object;
        return v_object.getField10();
    }

    public static final SubLObject oip_abbreviate_prefixesP_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, owl_to_cycl.OWL_IMPORT_PARAMETERS_P);
        return (($owl_import_parameters_native)v_object).$abbreviate_prefixesP;
    }

    public static SubLObject oip_abbreviate_prefixesP(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(v_object) : "! owl_to_cycl.owl_import_parameters_p(v_object) " + "owl_to_cycl.owl_import_parameters_p error :" + v_object;
        return v_object.getField11();
    }

    public static final SubLObject oip_import_term_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, owl_to_cycl.OWL_IMPORT_PARAMETERS_P);
        return (($owl_import_parameters_native)v_object).$import_term;
    }

    public static SubLObject oip_import_term(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(v_object) : "! owl_to_cycl.owl_import_parameters_p(v_object) " + "owl_to_cycl.owl_import_parameters_p error :" + v_object;
        return v_object.getField12();
    }

    public static final SubLObject oip_encoding_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, owl_to_cycl.OWL_IMPORT_PARAMETERS_P);
        return (($owl_import_parameters_native)v_object).$encoding;
    }

    public static SubLObject oip_encoding(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(v_object) : "! owl_to_cycl.owl_import_parameters_p(v_object) " + "owl_to_cycl.owl_import_parameters_p error :" + v_object;
        return v_object.getField13();
    }

    public static final SubLObject _csetf_oip_ontology_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, owl_to_cycl.OWL_IMPORT_PARAMETERS_P);
        return (($owl_import_parameters_native)v_object).$ontology = (value);
    }

    public static SubLObject _csetf_oip_ontology(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(v_object) : "! owl_to_cycl.owl_import_parameters_p(v_object) " + "owl_to_cycl.owl_import_parameters_p error :" + v_object;
        return v_object.setField2(value);
    }

    public static final SubLObject _csetf_oip_namespace_map_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, owl_to_cycl.OWL_IMPORT_PARAMETERS_P);
        return (($owl_import_parameters_native)v_object).$namespace_map = (value);
    }

    public static SubLObject _csetf_oip_namespace_map(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(v_object) : "! owl_to_cycl.owl_import_parameters_p(v_object) " + "owl_to_cycl.owl_import_parameters_p error :" + v_object;
        return v_object.setField3(value);
    }

    public static final SubLObject _csetf_oip_constant_prefix_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, owl_to_cycl.OWL_IMPORT_PARAMETERS_P);
        return (($owl_import_parameters_native)v_object).$constant_prefix = (value);
    }

    public static SubLObject _csetf_oip_constant_prefix(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(v_object) : "! owl_to_cycl.owl_import_parameters_p(v_object) " + "owl_to_cycl.owl_import_parameters_p error :" + v_object;
        return v_object.setField4(value);
    }

    public static SubLObject _csetf_oip_constant_suffix(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(v_object) : "! owl_to_cycl.owl_import_parameters_p(v_object) " + "owl_to_cycl.owl_import_parameters_p error :" + v_object;
        return v_object.setField5(value);
    }

    public static final SubLObject _csetf_oip_base_uri_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, owl_to_cycl.OWL_IMPORT_PARAMETERS_P);
        return (($owl_import_parameters_native)v_object).$base_uri = (value);
    }

    public static SubLObject _csetf_oip_base_uri(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(v_object) : "! owl_to_cycl.owl_import_parameters_p(v_object) " + "owl_to_cycl.owl_import_parameters_p error :" + v_object;
        return v_object.setField6(value);
    }

    public static SubLObject _csetf_oip_uri_prefix(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(v_object) : "! owl_to_cycl.owl_import_parameters_p(v_object) " + "owl_to_cycl.owl_import_parameters_p error :" + v_object;
        return v_object.setField7(value);
    }

    public static final SubLObject _csetf_oip_cyclist_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, owl_to_cycl.OWL_IMPORT_PARAMETERS_P);
        return (($owl_import_parameters_native)v_object).$cyclist = (value);
    }

    public static SubLObject _csetf_oip_cyclist(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(v_object) : "! owl_to_cycl.owl_import_parameters_p(v_object) " + "owl_to_cycl.owl_import_parameters_p error :" + v_object;
        return v_object.setField8(value);
    }

    public static final SubLObject _csetf_oip_quoted_isa_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, owl_to_cycl.OWL_IMPORT_PARAMETERS_P);
        return (($owl_import_parameters_native)v_object).$quoted_isa = (value);
    }

    public static SubLObject _csetf_oip_quoted_isa(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(v_object) : "! owl_to_cycl.owl_import_parameters_p(v_object) " + "owl_to_cycl.owl_import_parameters_p error :" + v_object;
        return v_object.setField9(value);
    }

    public static final SubLObject _csetf_oip_prefix_external_namesP_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, owl_to_cycl.OWL_IMPORT_PARAMETERS_P);
        return (($owl_import_parameters_native)v_object).$prefix_external_namesP = (value);
    }

    public static SubLObject _csetf_oip_prefix_external_namesP(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(v_object) : "! owl_to_cycl.owl_import_parameters_p(v_object) " + "owl_to_cycl.owl_import_parameters_p error :" + v_object;
        return v_object.setField10(value);
    }

    public static final SubLObject _csetf_oip_abbreviate_prefixesP_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, owl_to_cycl.OWL_IMPORT_PARAMETERS_P);
        return (($owl_import_parameters_native)v_object).$abbreviate_prefixesP = (value);
    }

    public static SubLObject _csetf_oip_abbreviate_prefixesP(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(v_object) : "! owl_to_cycl.owl_import_parameters_p(v_object) " + "owl_to_cycl.owl_import_parameters_p error :" + v_object;
        return v_object.setField11(value);
    }

    public static final SubLObject _csetf_oip_import_term_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, owl_to_cycl.OWL_IMPORT_PARAMETERS_P);
        return (($owl_import_parameters_native)v_object).$import_term = (value);
    }

    public static SubLObject _csetf_oip_import_term(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(v_object) : "! owl_to_cycl.owl_import_parameters_p(v_object) " + "owl_to_cycl.owl_import_parameters_p error :" + v_object;
        return v_object.setField12(value);
    }

    public static final SubLObject _csetf_oip_encoding_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, owl_to_cycl.OWL_IMPORT_PARAMETERS_P);
        return (($owl_import_parameters_native)v_object).$encoding = (value);
    }

    public static SubLObject _csetf_oip_encoding(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(v_object) : "! owl_to_cycl.owl_import_parameters_p(v_object) " + "owl_to_cycl.owl_import_parameters_p error :" + v_object;
        return v_object.setField13(value);
    }

    public static final SubLObject make_owl_import_parameters_alt(SubLObject arglist) {
        if (arglist == UNPROVIDED) {
            arglist = NIL;
        }
        {
            SubLObject v_new = new com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_import_parameters_native();
            SubLObject next = NIL;
            for (next = arglist; NIL != next; next = cddr(next)) {
                {
                    SubLObject current_arg = next.first();
                    SubLObject current_value = cadr(next);
                    SubLObject pcase_var = current_arg;
                    if (pcase_var.eql($ONTOLOGY)) {
                        com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oip_ontology(v_new, current_value);
                    } else {
                        if (pcase_var.eql($NAMESPACE_MAP)) {
                            com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oip_namespace_map(v_new, current_value);
                        } else {
                            if (pcase_var.eql($CONSTANT_PREFIX)) {
                                com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oip_constant_prefix(v_new, current_value);
                            } else {
                                if (pcase_var.eql($BASE_URI)) {
                                    com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oip_base_uri(v_new, current_value);
                                } else {
                                    if (pcase_var.eql($CYCLIST)) {
                                        com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oip_cyclist(v_new, current_value);
                                    } else {
                                        if (pcase_var.eql($QUOTED_ISA)) {
                                            com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oip_quoted_isa(v_new, current_value);
                                        } else {
                                            if (pcase_var.eql($kw186$PREFIX_EXTERNAL_NAMES_)) {
                                                com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oip_prefix_external_namesP(v_new, current_value);
                                            } else {
                                                if (pcase_var.eql($kw187$ABBREVIATE_PREFIXES_)) {
                                                    com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oip_abbreviate_prefixesP(v_new, current_value);
                                                } else {
                                                    if (pcase_var.eql($IMPORT_TERM)) {
                                                        com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oip_import_term(v_new, current_value);
                                                    } else {
                                                        if (pcase_var.eql($ENCODING)) {
                                                            com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oip_encoding(v_new, current_value);
                                                        } else {
                                                            Errors.error($str_alt137$Invalid_slot__S_for_construction_, current_arg);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return v_new;
        }
    }

    public static SubLObject make_owl_import_parameters(SubLObject arglist) {
        if (arglist == UNPROVIDED) {
            arglist = NIL;
        }
        final SubLObject v_new = new com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_import_parameters_native();
        SubLObject next;
        SubLObject current_arg;
        SubLObject current_value;
        SubLObject pcase_var;
        for (next = NIL, next = arglist; NIL != next; next = cddr(next)) {
            current_arg = next.first();
            current_value = cadr(next);
            pcase_var = current_arg;
            if (pcase_var.eql($ONTOLOGY)) {
                owl_to_cycl._csetf_oip_ontology(v_new, current_value);
            } else
                if (pcase_var.eql($NAMESPACE_MAP)) {
                    owl_to_cycl._csetf_oip_namespace_map(v_new, current_value);
                } else
                    if (pcase_var.eql($CONSTANT_PREFIX)) {
                        owl_to_cycl._csetf_oip_constant_prefix(v_new, current_value);
                    } else
                        if (pcase_var.eql($CONSTANT_SUFFIX)) {
                            owl_to_cycl._csetf_oip_constant_suffix(v_new, current_value);
                        } else
                            if (pcase_var.eql($BASE_URI)) {
                                owl_to_cycl._csetf_oip_base_uri(v_new, current_value);
                            } else
                                if (pcase_var.eql($URI_PREFIX)) {
                                    owl_to_cycl._csetf_oip_uri_prefix(v_new, current_value);
                                } else
                                    if (pcase_var.eql($CYCLIST)) {
                                        owl_to_cycl._csetf_oip_cyclist(v_new, current_value);
                                    } else
                                        if (pcase_var.eql($QUOTED_ISA)) {
                                            owl_to_cycl._csetf_oip_quoted_isa(v_new, current_value);
                                        } else
                                            if (pcase_var.eql(owl_to_cycl.$kw69$PREFIX_EXTERNAL_NAMES_)) {
                                                owl_to_cycl._csetf_oip_prefix_external_namesP(v_new, current_value);
                                            } else
                                                if (pcase_var.eql(owl_to_cycl.$kw70$ABBREVIATE_PREFIXES_)) {
                                                    owl_to_cycl._csetf_oip_abbreviate_prefixesP(v_new, current_value);
                                                } else
                                                    if (pcase_var.eql($IMPORT_TERM)) {
                                                        owl_to_cycl._csetf_oip_import_term(v_new, current_value);
                                                    } else
                                                        if (pcase_var.eql($ENCODING)) {
                                                            owl_to_cycl._csetf_oip_encoding(v_new, current_value);
                                                        } else {
                                                            Errors.error(owl_to_cycl.$str147$Invalid_slot__S_for_construction_, current_arg);
                                                        }











        }
        return v_new;
    }

    public static SubLObject visit_defstruct_owl_import_parameters(final SubLObject obj, final SubLObject visitor_fn) {
        funcall(visitor_fn, obj, $BEGIN, owl_to_cycl.MAKE_OWL_IMPORT_PARAMETERS, TWELVE_INTEGER);
        funcall(visitor_fn, obj, $SLOT, $ONTOLOGY, owl_to_cycl.oip_ontology(obj));
        funcall(visitor_fn, obj, $SLOT, $NAMESPACE_MAP, owl_to_cycl.oip_namespace_map(obj));
        funcall(visitor_fn, obj, $SLOT, $CONSTANT_PREFIX, owl_to_cycl.oip_constant_prefix(obj));
        funcall(visitor_fn, obj, $SLOT, $CONSTANT_SUFFIX, owl_to_cycl.oip_constant_suffix(obj));
        funcall(visitor_fn, obj, $SLOT, $BASE_URI, owl_to_cycl.oip_base_uri(obj));
        funcall(visitor_fn, obj, $SLOT, $URI_PREFIX, owl_to_cycl.oip_uri_prefix(obj));
        funcall(visitor_fn, obj, $SLOT, $CYCLIST, owl_to_cycl.oip_cyclist(obj));
        funcall(visitor_fn, obj, $SLOT, $QUOTED_ISA, owl_to_cycl.oip_quoted_isa(obj));
        funcall(visitor_fn, obj, $SLOT, owl_to_cycl.$kw69$PREFIX_EXTERNAL_NAMES_, owl_to_cycl.oip_prefix_external_namesP(obj));
        funcall(visitor_fn, obj, $SLOT, owl_to_cycl.$kw70$ABBREVIATE_PREFIXES_, owl_to_cycl.oip_abbreviate_prefixesP(obj));
        funcall(visitor_fn, obj, $SLOT, $IMPORT_TERM, owl_to_cycl.oip_import_term(obj));
        funcall(visitor_fn, obj, $SLOT, $ENCODING, owl_to_cycl.oip_encoding(obj));
        funcall(visitor_fn, obj, $END, owl_to_cycl.MAKE_OWL_IMPORT_PARAMETERS, TWELVE_INTEGER);
        return obj;
    }

    public static SubLObject visit_defstruct_object_owl_import_parameters_method(final SubLObject obj, final SubLObject visitor_fn) {
        return owl_to_cycl.visit_defstruct_owl_import_parameters(obj, visitor_fn);
    }

    public static final SubLObject print_owl_import_parameters_alt(SubLObject v_object, SubLObject stream, SubLObject depth) {
        {
            SubLObject ontology = com.cyc.cycjava.cycl.owl.owl_to_cycl.oip_ontology(v_object);
            format(stream, $str_alt190$_OWL_IMPORT_PARAMETERS__S_, NIL != ontology ? ((SubLObject) (ontology)) : com.cyc.cycjava.cycl.owl.owl_to_cycl.oip_constant_prefix(v_object));
        }
        return v_object;
    }

    public static SubLObject print_owl_import_parameters(final SubLObject v_object, final SubLObject stream, final SubLObject depth) {
        final SubLObject ontology = owl_to_cycl.oip_ontology(v_object);
        format(stream, owl_to_cycl.$str206$_OWL_IMPORT_PARAMETERS__S_, NIL != ontology ? ontology : owl_to_cycl.oip_constant_prefix(v_object));
        return v_object;
    }

    public static final SubLObject new_owl_import_parameters(SubLObject ontology, SubLObject constant_prefix, SubLObject quoted_isa, SubLObject cyclist, SubLObject uri, SubLObject prefix_external_namesP, SubLObject abbreviate_prefixesP) {
        if (prefix_external_namesP == UNPROVIDED) {
            prefix_external_namesP = NIL;
        }
        if (abbreviate_prefixesP == UNPROVIDED) {
            abbreviate_prefixesP = NIL;
        }
        SubLTrampolineFile.checkType(ontology, CYCL_DENOTATIONAL_TERM_P);
        SubLTrampolineFile.checkType(constant_prefix, STRINGP);
        SubLTrampolineFile.checkType(cyclist, $sym192$CYCLIST_);
        SubLTrampolineFile.checkType(quoted_isa, CYCL_DENOTATIONAL_TERM_P);
        {
            SubLObject parameters = com.cyc.cycjava.cycl.owl.owl_to_cycl.make_owl_import_parameters(UNPROVIDED);
            com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oip_ontology(parameters, ontology);
            com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oip_constant_prefix(parameters, constant_prefix);
            com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oip_cyclist(parameters, com.cyc.cycjava.cycl.owl.owl_to_cycl.cyclist_using_owl_importer_v1(cyclist));
            com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oip_quoted_isa(parameters, quoted_isa);
            com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oip_base_uri(parameters, uri);
            com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oip_prefix_external_namesP(parameters, prefix_external_namesP);
            com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oip_abbreviate_prefixesP(parameters, abbreviate_prefixesP);
            return parameters;
        }
    }

    public static SubLObject new_owl_import_parameters(final SubLObject ontology, final SubLObject constant_prefix, final SubLObject constant_suffix, final SubLObject quoted_isa, final SubLObject cyclist, final SubLObject uri, final SubLObject uri_prefix, SubLObject prefix_external_namesP, SubLObject abbreviate_prefixesP) {
        if (prefix_external_namesP == UNPROVIDED) {
            prefix_external_namesP = NIL;
        }
        if (abbreviate_prefixesP == UNPROVIDED) {
            abbreviate_prefixesP = NIL;
        }
        assert NIL != cycl_denotational_term_p(ontology) : "! cycl_grammar.cycl_denotational_term_p(ontology) " + ("cycl_grammar.cycl_denotational_term_p(ontology) " + "CommonSymbols.NIL != cycl_grammar.cycl_denotational_term_p(ontology) ") + ontology;
        assert NIL != stringp(constant_prefix) : "! stringp(constant_prefix) " + ("Types.stringp(constant_prefix) " + "CommonSymbols.NIL != Types.stringp(constant_prefix) ") + constant_prefix;
        assert NIL != stringp(constant_suffix) : "! stringp(constant_suffix) " + ("Types.stringp(constant_suffix) " + "CommonSymbols.NIL != Types.stringp(constant_suffix) ") + constant_suffix;
        assert NIL != stringp(uri_prefix) : "! stringp(uri_prefix) " + ("Types.stringp(uri_prefix) " + "CommonSymbols.NIL != Types.stringp(uri_prefix) ") + uri_prefix;
        assert NIL != kb_accessors.cyclistP(cyclist) : "! kb_accessors.cyclistP(cyclist) " + ("kb_accessors.cyclistP(cyclist) " + "CommonSymbols.NIL != kb_accessors.cyclistP(cyclist) ") + cyclist;
        assert NIL != cycl_denotational_term_p(quoted_isa) : "! cycl_grammar.cycl_denotational_term_p(quoted_isa) " + ("cycl_grammar.cycl_denotational_term_p(quoted_isa) " + "CommonSymbols.NIL != cycl_grammar.cycl_denotational_term_p(quoted_isa) ") + quoted_isa;
        final SubLObject parameters = owl_to_cycl.make_owl_import_parameters(UNPROVIDED);
        owl_to_cycl._csetf_oip_ontology(parameters, ontology);
        owl_to_cycl._csetf_oip_constant_prefix(parameters, constant_prefix);
        owl_to_cycl._csetf_oip_constant_suffix(parameters, constant_suffix);
        owl_to_cycl._csetf_oip_cyclist(parameters, owl_to_cycl.cyclist_using_owl_importer_v1(cyclist));
        owl_to_cycl._csetf_oip_quoted_isa(parameters, quoted_isa);
        owl_to_cycl._csetf_oip_base_uri(parameters, uri);
        owl_to_cycl._csetf_oip_uri_prefix(parameters, uri_prefix);
        owl_to_cycl._csetf_oip_prefix_external_namesP(parameters, prefix_external_namesP);
        owl_to_cycl._csetf_oip_abbreviate_prefixesP(parameters, abbreviate_prefixesP);
        return parameters;
    }

    public static final SubLObject cyclist_using_owl_importer_v1_alt(SubLObject cyclist) {
        {
            SubLObject version_string = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_importer_v1_version_number();
            SubLObject versioned_tool_nat = make_binary_formula($$SoftwareVersionFn, $$OWLImporter_Cyc, version_string);
            return czer_main.cyc_find_or_create_nart(make_binary_formula($$UserOfProgramFn, versioned_tool_nat, cyclist), UNPROVIDED);
        }
    }

    public static SubLObject cyclist_using_owl_importer_v1(final SubLObject cyclist) {
        final SubLObject version_string = owl_to_cycl.owl_importer_v1_version_number();
        final SubLObject versioned_tool_nat = make_binary_formula(owl_to_cycl.$$SoftwareVersionFn, owl_to_cycl.$$OWLImporter_Cyc, version_string);
        return cyc_find_or_create_nart(make_binary_formula(owl_to_cycl.$$UserOfProgramFn, versioned_tool_nat, cyclist), UNPROVIDED);
    }

    public static final SubLObject owl_import_parameters_ontology_alt(SubLObject parameters) {
        SubLTrampolineFile.checkType(parameters, OWL_IMPORT_PARAMETERS_P);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.oip_ontology(parameters);
    }

    public static SubLObject owl_import_parameters_ontology(final SubLObject parameters) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(parameters) : "! owl_to_cycl.owl_import_parameters_p(parameters) " + ("owl_to_cycl.owl_import_parameters_p(parameters) " + "CommonSymbols.NIL != owl_to_cycl.owl_import_parameters_p(parameters) ") + parameters;
        return owl_to_cycl.oip_ontology(parameters);
    }

    public static final SubLObject owl_import_parameters_lookup_namespace_alt(SubLObject namespace, SubLObject import_parameters) {
        return list_utilities.alist_lookup_without_values(com.cyc.cycjava.cycl.owl.owl_to_cycl.oip_namespace_map(import_parameters), namespace, symbol_function(EQUAL), UNPROVIDED);
    }

    public static SubLObject owl_import_parameters_lookup_namespace(final SubLObject namespace, final SubLObject import_parameters) {
        return alist_lookup_without_values(owl_to_cycl.oip_namespace_map(import_parameters), namespace, symbol_function(EQUAL), UNPROVIDED);
    }

    public static final SubLObject owl_import_parameters_constant_prefix_alt(SubLObject parameters) {
        SubLTrampolineFile.checkType(parameters, OWL_IMPORT_PARAMETERS_P);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.oip_constant_prefix(parameters);
    }

    public static SubLObject owl_import_parameters_constant_prefix(final SubLObject parameters) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(parameters) : "! owl_to_cycl.owl_import_parameters_p(parameters) " + ("owl_to_cycl.owl_import_parameters_p(parameters) " + "CommonSymbols.NIL != owl_to_cycl.owl_import_parameters_p(parameters) ") + parameters;
        return owl_to_cycl.oip_constant_prefix(parameters);
    }

    public static SubLObject owl_import_parameters_constant_suffix(final SubLObject parameters) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(parameters) : "! owl_to_cycl.owl_import_parameters_p(parameters) " + ("owl_to_cycl.owl_import_parameters_p(parameters) " + "CommonSymbols.NIL != owl_to_cycl.owl_import_parameters_p(parameters) ") + parameters;
        return owl_to_cycl.oip_constant_suffix(parameters);
    }

    public static final SubLObject owl_import_parameters_base_uri_alt(SubLObject parameters) {
        SubLTrampolineFile.checkType(parameters, OWL_IMPORT_PARAMETERS_P);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.oip_base_uri(parameters);
    }

    public static SubLObject owl_import_parameters_base_uri(final SubLObject parameters) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(parameters) : "! owl_to_cycl.owl_import_parameters_p(parameters) " + ("owl_to_cycl.owl_import_parameters_p(parameters) " + "CommonSymbols.NIL != owl_to_cycl.owl_import_parameters_p(parameters) ") + parameters;
        return owl_to_cycl.oip_base_uri(parameters);
    }

    public static SubLObject owl_import_parameters_uri_prefix(final SubLObject parameters) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(parameters) : "! owl_to_cycl.owl_import_parameters_p(parameters) " + ("owl_to_cycl.owl_import_parameters_p(parameters) " + "CommonSymbols.NIL != owl_to_cycl.owl_import_parameters_p(parameters) ") + parameters;
        return owl_to_cycl.oip_uri_prefix(parameters);
    }

    public static final SubLObject owl_import_parameters_cyclist_alt(SubLObject parameters) {
        SubLTrampolineFile.checkType(parameters, OWL_IMPORT_PARAMETERS_P);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.oip_cyclist(parameters);
    }

    public static SubLObject owl_import_parameters_cyclist(final SubLObject parameters) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(parameters) : "! owl_to_cycl.owl_import_parameters_p(parameters) " + ("owl_to_cycl.owl_import_parameters_p(parameters) " + "CommonSymbols.NIL != owl_to_cycl.owl_import_parameters_p(parameters) ") + parameters;
        return owl_to_cycl.oip_cyclist(parameters);
    }

    public static final SubLObject owl_import_parameters_quoted_isa_alt(SubLObject parameters) {
        SubLTrampolineFile.checkType(parameters, OWL_IMPORT_PARAMETERS_P);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.oip_quoted_isa(parameters);
    }

    public static SubLObject owl_import_parameters_quoted_isa(final SubLObject parameters) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(parameters) : "! owl_to_cycl.owl_import_parameters_p(parameters) " + ("owl_to_cycl.owl_import_parameters_p(parameters) " + "CommonSymbols.NIL != owl_to_cycl.owl_import_parameters_p(parameters) ") + parameters;
        return owl_to_cycl.oip_quoted_isa(parameters);
    }

    public static final SubLObject owl_import_parameters_prefix_external_namesP_alt(SubLObject parameters) {
        SubLTrampolineFile.checkType(parameters, OWL_IMPORT_PARAMETERS_P);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.oip_prefix_external_namesP(parameters);
    }

    public static SubLObject owl_import_parameters_prefix_external_namesP(final SubLObject parameters) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(parameters) : "! owl_to_cycl.owl_import_parameters_p(parameters) " + ("owl_to_cycl.owl_import_parameters_p(parameters) " + "CommonSymbols.NIL != owl_to_cycl.owl_import_parameters_p(parameters) ") + parameters;
        return owl_to_cycl.oip_prefix_external_namesP(parameters);
    }

    public static final SubLObject owl_import_parameters_abbreviate_prefixesP_alt(SubLObject parameters) {
        SubLTrampolineFile.checkType(parameters, OWL_IMPORT_PARAMETERS_P);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.oip_abbreviate_prefixesP(parameters);
    }

    public static SubLObject owl_import_parameters_abbreviate_prefixesP(final SubLObject parameters) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(parameters) : "! owl_to_cycl.owl_import_parameters_p(parameters) " + ("owl_to_cycl.owl_import_parameters_p(parameters) " + "CommonSymbols.NIL != owl_to_cycl.owl_import_parameters_p(parameters) ") + parameters;
        return owl_to_cycl.oip_abbreviate_prefixesP(parameters);
    }

    public static final SubLObject owl_import_parameters_import_term_alt(SubLObject import_parameters) {
        SubLTrampolineFile.checkType(import_parameters, OWL_IMPORT_PARAMETERS_P);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.oip_import_term(import_parameters);
    }

    public static SubLObject owl_import_parameters_import_term(final SubLObject import_parameters) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(import_parameters) : "! owl_to_cycl.owl_import_parameters_p(import_parameters) " + ("owl_to_cycl.owl_import_parameters_p(import_parameters) " + "CommonSymbols.NIL != owl_to_cycl.owl_import_parameters_p(import_parameters) ") + import_parameters;
        return owl_to_cycl.oip_import_term(import_parameters);
    }

    public static final SubLObject owl_import_parameters_encoding_alt(SubLObject import_parameters) {
        SubLTrampolineFile.checkType(import_parameters, OWL_IMPORT_PARAMETERS_P);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.oip_encoding(import_parameters);
    }

    public static SubLObject owl_import_parameters_encoding(final SubLObject import_parameters) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(import_parameters) : "! owl_to_cycl.owl_import_parameters_p(import_parameters) " + ("owl_to_cycl.owl_import_parameters_p(import_parameters) " + "CommonSymbols.NIL != owl_to_cycl.owl_import_parameters_p(import_parameters) ") + import_parameters;
        return owl_to_cycl.oip_encoding(import_parameters);
    }

    public static final SubLObject owl_import_parameters_note_namespace_alt(SubLObject namespace, SubLObject uri, SubLObject import_parameters) {
        {
            SubLObject alist = com.cyc.cycjava.cycl.owl.owl_to_cycl.oip_namespace_map(import_parameters);
            SubLObject existing = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_lookup_namespace(namespace, import_parameters);
            if (NIL == existing) {
                com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oip_namespace_map(import_parameters, list_utilities.alist_enter(alist, namespace, uri, UNPROVIDED));
            } else {
                if (!existing.equal(uri)) {
                    Errors.error($str_alt196$Multiple_uris_for__S_____S____S, namespace, uri, existing);
                }
            }
        }
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.oip_namespace_map(import_parameters);
    }

    public static SubLObject owl_import_parameters_note_namespace(final SubLObject namespace, final SubLObject uri, final SubLObject import_parameters) {
        final SubLObject alist = owl_to_cycl.oip_namespace_map(import_parameters);
        final SubLObject existing = owl_to_cycl.owl_import_parameters_lookup_namespace(namespace, import_parameters);
        if (NIL == existing) {
            owl_to_cycl._csetf_oip_namespace_map(import_parameters, alist_enter(alist, namespace, uri, UNPROVIDED));
        } else
            if (!existing.equal(uri)) {
                Errors.error(owl_to_cycl.$str212$Multiple_uris_for__S_____S____S, namespace, uri, existing);
            }

        return owl_to_cycl.oip_namespace_map(import_parameters);
    }

    public static final SubLObject owl_import_parameters_note_base_uri_alt(SubLObject base_uri, SubLObject import_parameters) {
        SubLTrampolineFile.checkType(import_parameters, OWL_IMPORT_PARAMETERS_P);
        com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oip_base_uri(import_parameters, base_uri);
        return base_uri;
    }

    public static SubLObject owl_import_parameters_note_base_uri(final SubLObject base_uri, final SubLObject import_parameters) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(import_parameters) : "! owl_to_cycl.owl_import_parameters_p(import_parameters) " + ("owl_to_cycl.owl_import_parameters_p(import_parameters) " + "CommonSymbols.NIL != owl_to_cycl.owl_import_parameters_p(import_parameters) ") + import_parameters;
        owl_to_cycl._csetf_oip_base_uri(import_parameters, base_uri);
        return base_uri;
    }

    public static final SubLObject owl_import_parameters_note_import_term_alt(SubLObject v_term, SubLObject import_parameters) {
        SubLTrampolineFile.checkType(import_parameters, OWL_IMPORT_PARAMETERS_P);
        SubLTrampolineFile.checkType(v_term, FORT_P);
        com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oip_import_term(import_parameters, v_term);
        return v_term;
    }

    public static SubLObject owl_import_parameters_note_import_term(final SubLObject v_term, final SubLObject import_parameters) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(import_parameters) : "! owl_to_cycl.owl_import_parameters_p(import_parameters) " + ("owl_to_cycl.owl_import_parameters_p(import_parameters) " + "CommonSymbols.NIL != owl_to_cycl.owl_import_parameters_p(import_parameters) ") + import_parameters;
        assert NIL != forts.fort_p(v_term) : "! forts.fort_p(v_term) " + ("forts.fort_p(v_term) " + "CommonSymbols.NIL != forts.fort_p(v_term) ") + v_term;
        owl_to_cycl._csetf_oip_import_term(import_parameters, v_term);
        return v_term;
    }

    public static final SubLObject owl_import_parameters_note_encoding_alt(SubLObject encoding, SubLObject import_parameters) {
        SubLTrampolineFile.checkType(import_parameters, OWL_IMPORT_PARAMETERS_P);
        SubLTrampolineFile.checkType(encoding, STRINGP);
        com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oip_encoding(import_parameters, encoding);
        return encoding;
    }

    public static SubLObject owl_import_parameters_note_encoding(final SubLObject encoding, final SubLObject import_parameters) {
        assert NIL != owl_to_cycl.owl_import_parameters_p(import_parameters) : "! owl_to_cycl.owl_import_parameters_p(import_parameters) " + ("owl_to_cycl.owl_import_parameters_p(import_parameters) " + "CommonSymbols.NIL != owl_to_cycl.owl_import_parameters_p(import_parameters) ") + import_parameters;
        assert NIL != stringp(encoding) : "! stringp(encoding) " + ("Types.stringp(encoding) " + "CommonSymbols.NIL != Types.stringp(encoding) ") + encoding;
        owl_to_cycl._csetf_oip_encoding(import_parameters, encoding);
        return encoding;
    }

    public static final SubLObject sxhash_owl_import_parameters_method_alt(SubLObject v_object) {
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.sxhash_owl_import_parameters(v_object);
    }

    public static SubLObject sxhash_owl_import_parameters_method(final SubLObject v_object) {
        return owl_to_cycl.sxhash_owl_import_parameters(v_object);
    }

    /**
     *
     *
     * @unknown 
     */
    @LispMethod(comment = "@unknown")
    public static final SubLObject sxhash_owl_import_parameters_alt(SubLObject parameters) {
        return Sxhash.sxhash(com.cyc.cycjava.cycl.owl.owl_to_cycl.oip_ontology(parameters));
    }

    /**
     *
     *
     * @unknown 
     */
    @LispMethod(comment = "@unknown")
    public static SubLObject sxhash_owl_import_parameters(final SubLObject parameters) {
        return Sxhash.sxhash(owl_to_cycl.oip_ontology(parameters));
    }

    public static final SubLObject verify_imports_for_ontology_tokens_alt(SubLObject this_ontology, SubLObject tokens, SubLObject import_parameters) {
        {
            SubLObject ontology_uris = NIL;
            SubLObject store = NIL;
            try {
                store = inference_datastructures_problem_store.new_problem_store(NIL);
                {
                    SubLObject cdolist_list_var = tokens;
                    SubLObject token = NIL;
                    for (token = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , token = cdolist_list_var.first()) {
                        if (NIL != web_utilities.xml_token_element_nameP(token, owl_utilities.owl_name($$$imports))) {
                            {
                                SubLObject ontology_uri = string_utilities.post_remove(web_utilities.xml_tag_attribute_value(token, rdf_utilities.rdf_name($$$resource), UNPROVIDED), $str_alt200$_, UNPROVIDED);
                                if (NIL != web_utilities.uri_p(ontology_uri, UNPROVIDED)) {
                                    {
                                        SubLObject ontology = com.cyc.cycjava.cycl.owl.owl_to_cycl.find_or_create_owl_ontology_for_uri(ontology_uri, import_parameters, store);
                                        com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_assert(list($$owlImports, this_ontology, ontology), $$OWLMappingMt, import_parameters);
                                        ontology_uris = cons(ontology_uri, ontology_uris);
                                    }
                                } else {
                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.note_owl_failure(cconcatenate($str_alt201$interpretation_of_, new SubLObject[]{ format_nil.format_nil_s_no_copy(ontology_uri), $str_alt202$_as_a_URI_for_an_imported_ontolog }), UNPROVIDED);
                                }
                            }
                        }
                    }
                }
            } finally {
                {
                    SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
                    try {
                        bind($is_thread_performing_cleanupP$, T);
                        inference_datastructures_problem_store.destroy_problem_store(store);
                    } finally {
                        rebind($is_thread_performing_cleanupP$, _prev_bind_0);
                    }
                }
            }
            return ontology_uris;
        }
    }

    public static SubLObject verify_imports_for_ontology_tokens(final SubLObject this_ontology, final SubLObject tokens, final SubLObject import_parameters) {
        SubLObject ontology_uris = NIL;
        SubLObject store = NIL;
        try {
            store = new_problem_store(NIL);
            SubLObject cdolist_list_var = tokens;
            SubLObject token = NIL;
            token = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                if (NIL != xml_parsing_utilities.xml_token_element_nameP(token, owl_utilities.owl_name(owl_to_cycl.$$$imports))) {
                    final SubLObject ontology_uri = post_remove(xml_parsing_utilities.xml_tag_attribute_value(token, rdf_name(owl_to_cycl.$$$resource), UNPROVIDED), owl_to_cycl.$str216$_, UNPROVIDED);
                    if (NIL != uri_p(ontology_uri, UNPROVIDED)) {
                        final SubLObject ontology = owl_to_cycl.find_or_create_owl_ontology_for_uri(ontology_uri, import_parameters, store);
                        owl_to_cycl.owl_assert(list(owl_to_cycl.$const15$owl_imports, this_ontology, ontology), owl_to_cycl.$$OWLMappingMt, import_parameters);
                        ontology_uris = cons(ontology_uri, ontology_uris);
                    } else {
                        owl_to_cycl.note_owl_failure(cconcatenate(owl_to_cycl.$$$interpretation_of_, new SubLObject[]{ format_nil_s_no_copy(ontology_uri), owl_to_cycl.$str218$_as_a_URI_for_an_imported_ontolog }), UNPROVIDED);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                token = cdolist_list_var.first();
            } 
        } finally {
            final SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
            try {
                bind($is_thread_performing_cleanupP$, T);
                final SubLObject _values = getValuesAsVector();
                destroy_problem_store(store);
                restoreValuesFromVector(_values);
            } finally {
                rebind($is_thread_performing_cleanupP$, _prev_bind_0);
            }
        }
        return ontology_uris;
    }

    public static final SubLObject validate_and_note_owl_namespaces_alt(SubLObject tokens, SubLObject imported_ontology_uris, SubLObject import_parameters) {
        {
            SubLObject unknown_namespaces = NIL;
            {
                SubLObject cdolist_list_var = tokens;
                SubLObject token = NIL;
                for (token = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , token = cdolist_list_var.first()) {
                    if (NIL != web_utilities.regular_xml_tagP(token)) {
                        {
                            SubLObject v_new = com.cyc.cycjava.cycl.owl.owl_to_cycl.validate_and_note_owl_namespaces_for_token(token, imported_ontology_uris, import_parameters);
                            unknown_namespaces = append(unknown_namespaces, v_new);
                        }
                    }
                }
            }
            if (NIL != unknown_namespaces) {
                {
                    SubLObject problem = NIL;
                    if (NIL == problem) {
                        {
                            SubLObject csome_list_var = tokens;
                            SubLObject token = NIL;
                            for (token = csome_list_var.first(); !((NIL != problem) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , token = csome_list_var.first()) {
                                if (NIL != web_utilities.regular_xml_tagP(token)) {
                                    {
                                        SubLObject rest = NIL;
                                        for (rest = unknown_namespaces; !((NIL != problem) || (NIL == rest)); rest = rest.rest()) {
                                            {
                                                SubLObject cons = rest.first();
                                                SubLObject datum = cons;
                                                SubLObject current = datum;
                                                SubLObject namespace = NIL;
                                                SubLObject problem_string = NIL;
                                                destructuring_bind_must_consp(current, datum, $list_alt203);
                                                namespace = current.first();
                                                current = current.rest();
                                                problem_string = current;
                                                if (NIL != string_utilities.substringP(namespace, token, UNPROVIDED, UNPROVIDED, UNPROVIDED)) {
                                                    {
                                                        SubLObject datum_61 = web_utilities.parse_xml_token(token);
                                                        SubLObject current_62 = datum_61;
                                                        SubLObject element_name = NIL;
                                                        SubLObject attributes = NIL;
                                                        destructuring_bind_must_consp(current_62, datum_61, $list_alt92);
                                                        element_name = current_62.first();
                                                        current_62 = current_62.rest();
                                                        attributes = current_62;
                                                        if ((NIL != web_utilities.xml_prefixed_name_p(element_name)) && namespace.equal(web_utilities.xml_prefixed_name_namespace(element_name))) {
                                                            problem = problem_string;
                                                        }
                                                        {
                                                            SubLObject rest_63 = NIL;
                                                            for (rest_63 = attributes; !((NIL != problem) || (NIL == rest_63)); rest_63 = rest_63.rest()) {
                                                                {
                                                                    SubLObject cons_64 = rest_63.first();
                                                                    SubLObject datum_65 = cons_64;
                                                                    SubLObject current_66 = datum_65;
                                                                    SubLObject attribute_name = NIL;
                                                                    SubLObject value = NIL;
                                                                    destructuring_bind_must_consp(current_66, datum_65, $list_alt204);
                                                                    attribute_name = current_66.first();
                                                                    current_66 = current_66.rest();
                                                                    value = current_66;
                                                                    if ((NIL != web_utilities.xml_prefixed_name_p(attribute_name)) && namespace.equal(web_utilities.xml_prefixed_name_namespace(attribute_name))) {
                                                                        problem = problem_string;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (NIL != problem) {
                        Errors.error($str_alt205$Namespace_problem___A, problem);
                    }
                }
            }
        }
        return T;
    }

    public static SubLObject validate_and_note_owl_namespaces(final SubLObject tokens, final SubLObject imported_ontology_uris, final SubLObject import_parameters) {
        SubLObject unknown_namespaces = NIL;
        SubLObject cdolist_list_var = tokens;
        SubLObject token = NIL;
        token = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != xml_parsing_utilities.regular_xml_tagP(token)) {
                final SubLObject v_new = owl_to_cycl.validate_and_note_owl_namespaces_for_token(token, imported_ontology_uris, import_parameters);
                unknown_namespaces = append(unknown_namespaces, v_new);
            }
            cdolist_list_var = cdolist_list_var.rest();
            token = cdolist_list_var.first();
        } 
        if (NIL != unknown_namespaces) {
            SubLObject problem = NIL;
            if (NIL == problem) {
                SubLObject csome_list_var = tokens;
                SubLObject token2 = NIL;
                token2 = csome_list_var.first();
                while ((NIL == problem) && (NIL != csome_list_var)) {
                    if (NIL != xml_parsing_utilities.regular_xml_tagP(token2)) {
                        SubLObject rest;
                        SubLObject cons;
                        SubLObject current;
                        SubLObject datum;
                        SubLObject namespace;
                        SubLObject problem_string;
                        SubLObject current_$57;
                        SubLObject datum_$56;
                        SubLObject element_name;
                        SubLObject attributes;
                        SubLObject rest_$58;
                        SubLObject cons_$59;
                        SubLObject current_$58;
                        SubLObject datum_$57;
                        SubLObject attribute_name;
                        SubLObject value;
                        for (rest = NIL, rest = unknown_namespaces; (NIL == problem) && (NIL != rest); rest = rest.rest()) {
                            cons = rest.first();
                            datum = current = cons;
                            namespace = NIL;
                            problem_string = NIL;
                            destructuring_bind_must_consp(current, datum, owl_to_cycl.$list219);
                            namespace = current.first();
                            current = problem_string = current.rest();
                            if (NIL != substringP(namespace, token2, UNPROVIDED, UNPROVIDED, UNPROVIDED)) {
                                datum_$56 = current_$57 = xml_parsing_utilities.parse_xml_token(token2);
                                element_name = NIL;
                                attributes = NIL;
                                destructuring_bind_must_consp(current_$57, datum_$56, owl_to_cycl.$list100);
                                element_name = current_$57.first();
                                current_$57 = attributes = current_$57.rest();
                                if ((NIL != xml_parsing_utilities.xml_prefixed_name_p(element_name)) && namespace.equal(xml_parsing_utilities.xml_prefixed_name_namespace(element_name))) {
                                    problem = problem_string;
                                }
                                for (rest_$58 = NIL, rest_$58 = attributes; (NIL == problem) && (NIL != rest_$58); rest_$58 = rest_$58.rest()) {
                                    cons_$59 = rest_$58.first();
                                    datum_$57 = current_$58 = cons_$59;
                                    attribute_name = NIL;
                                    value = NIL;
                                    destructuring_bind_must_consp(current_$58, datum_$57, owl_to_cycl.$list220);
                                    attribute_name = current_$58.first();
                                    current_$58 = value = current_$58.rest();
                                    if ((NIL != xml_parsing_utilities.xml_prefixed_name_p(attribute_name)) && namespace.equal(xml_parsing_utilities.xml_prefixed_name_namespace(attribute_name))) {
                                        problem = problem_string;
                                    }
                                }
                            }
                        }
                    }
                    csome_list_var = csome_list_var.rest();
                    token2 = csome_list_var.first();
                } 
            }
            if (NIL != problem) {
                Errors.error(owl_to_cycl.$str221$Namespace_problem___A, problem);
            }
        }
        return T;
    }

    /**
     *
     *
     * @return ALIST-P; mapping problematic uris to string descriptions of the problems they pose.
     */
    @LispMethod(comment = "@return ALIST-P; mapping problematic uris to string descriptions of the problems they pose.")
    public static final SubLObject validate_and_note_owl_namespaces_for_token_alt(SubLObject token, SubLObject imported_ontology_uris, SubLObject import_parameters) {
        {
            SubLObject problems = NIL;
            SubLObject datum = web_utilities.parse_xml_token(token);
            SubLObject current = datum;
            SubLObject element_name = NIL;
            SubLObject attributes = NIL;
            destructuring_bind_must_consp(current, datum, $list_alt92);
            element_name = current.first();
            current = current.rest();
            attributes = current;
            {
                SubLObject cdolist_list_var = attributes;
                SubLObject cons = NIL;
                for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , cons = cdolist_list_var.first()) {
                    {
                        SubLObject datum_67 = cons;
                        SubLObject current_68 = datum_67;
                        SubLObject attribute_name = NIL;
                        SubLObject value = NIL;
                        destructuring_bind_must_consp(current_68, datum_67, $list_alt93);
                        attribute_name = current_68.first();
                        current_68 = current_68.rest();
                        value = current_68;
                        if ((NIL != web_utilities.xml_prefixed_name_p(attribute_name)) && $$$xmlns.equal(web_utilities.xml_prefixed_name_namespace(attribute_name))) {
                            {
                                SubLObject new_problem = com.cyc.cycjava.cycl.owl.owl_to_cycl.validate_and_note_owl_namespace(attribute_name, value, imported_ontology_uris, import_parameters);
                                if (NIL != new_problem) {
                                    problems = cons(new_problem, problems);
                                }
                            }
                        }
                    }
                }
            }
            return problems;
        }
    }

    /**
     *
     *
     * @return ALIST-P; mapping problematic uris to string descriptions of the problems they pose.
     */
    @LispMethod(comment = "@return ALIST-P; mapping problematic uris to string descriptions of the problems they pose.")
    public static SubLObject validate_and_note_owl_namespaces_for_token(final SubLObject token, final SubLObject imported_ontology_uris, final SubLObject import_parameters) {
        SubLObject problems = NIL;
        SubLObject current;
        final SubLObject datum = current = xml_parsing_utilities.parse_xml_token(token);
        SubLObject element_name = NIL;
        SubLObject attributes = NIL;
        destructuring_bind_must_consp(current, datum, owl_to_cycl.$list100);
        element_name = current.first();
        current = current.rest();
        SubLObject cdolist_list_var;
        attributes = cdolist_list_var = current;
        SubLObject cons = NIL;
        cons = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            SubLObject current_$63;
            final SubLObject datum_$62 = current_$63 = cons;
            SubLObject attribute_name = NIL;
            SubLObject value = NIL;
            destructuring_bind_must_consp(current_$63, datum_$62, owl_to_cycl.$list101);
            attribute_name = current_$63.first();
            current_$63 = value = current_$63.rest();
            if ((NIL != xml_parsing_utilities.xml_prefixed_name_p(attribute_name)) && owl_to_cycl.$$$xmlns.equal(xml_parsing_utilities.xml_prefixed_name_namespace(attribute_name))) {
                final SubLObject new_problem = owl_to_cycl.validate_and_note_owl_namespace(attribute_name, value, imported_ontology_uris, import_parameters);
                if (NIL != new_problem) {
                    problems = cons(new_problem, problems);
                }
            }
            cdolist_list_var = cdolist_list_var.rest();
            cons = cdolist_list_var.first();
        } 
        return problems;
    }

    public static final SubLObject validate_and_note_owl_namespace_alt(SubLObject name, SubLObject value, SubLObject imported_ontology_uris, SubLObject import_parameters) {
        {
            SubLObject namespace = web_utilities.xml_prefixed_name_local_name(name);
            com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_note_namespace(namespace, value, import_parameters);
            return NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_reserved_namespace_p(namespace) ? ((SubLObject) (com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_reserved_namespace_problem(namespace, value))) : com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_imported_namespace_problem(value, imported_ontology_uris);
        }
    }

    public static SubLObject validate_and_note_owl_namespace(final SubLObject name, final SubLObject value, final SubLObject imported_ontology_uris, final SubLObject import_parameters) {
        final SubLObject namespace = xml_parsing_utilities.xml_prefixed_name_local_name(name);
        owl_to_cycl.owl_import_parameters_note_namespace(namespace, value, import_parameters);
        return NIL != owl_to_cycl.owl_reserved_namespace_p(namespace) ? owl_to_cycl.owl_reserved_namespace_problem(namespace, value) : owl_to_cycl.owl_imported_namespace_problem(value, imported_ontology_uris);
    }

    public static final SubLObject owl_reserved_namespace_p_alt(SubLObject namespace) {
        return list_utilities.alist_has_keyP($owl_reserved_namespaces$.getGlobalValue(), namespace, symbol_function(EQUAL));
    }

    public static SubLObject owl_reserved_namespace_p(final SubLObject namespace) {
        return alist_has_keyP(owl_to_cycl.$owl_reserved_namespaces$.getGlobalValue(), namespace, symbol_function(EQUAL));
    }

    public static final SubLObject owl_reserved_namespace_problem_alt(SubLObject namespace, SubLObject value) {
        return NIL != subl_promotions.memberP(value, list_utilities.alist_lookup_without_values($owl_reserved_namespaces$.getGlobalValue(), namespace, symbol_function(EQUAL), NIL), symbol_function(EQUAL), UNPROVIDED) ? ((SubLObject) (NIL)) : cons(value, cconcatenate(format_nil.format_nil_s_no_copy(namespace), new SubLObject[]{ $str_alt208$_is_bound_to_, format_nil.format_nil_s_no_copy(value), $str_alt209$_, format_nil.$format_nil_percent$.getGlobalValue(), $str_alt210$_Must_be_one_of_, format_nil.format_nil_s_no_copy(list_utilities.alist_lookup_without_values($owl_reserved_namespaces$.getGlobalValue(), namespace, NIL, UNPROVIDED)) }));
    }

    public static SubLObject owl_reserved_namespace_problem(final SubLObject namespace, final SubLObject value) {
        return NIL != memberP(value, alist_lookup_without_values(owl_to_cycl.$owl_reserved_namespaces$.getGlobalValue(), namespace, symbol_function(EQUAL), NIL), symbol_function(EQUAL), UNPROVIDED) ? NIL : cons(value, cconcatenate(format_nil_s_no_copy(namespace), new SubLObject[]{ owl_to_cycl.$$$_is_bound_to_, format_nil_s_no_copy(value), owl_to_cycl.$str225$_, $format_nil_percent$.getGlobalValue(), owl_to_cycl.$$$_Must_be_one_of_, format_nil_s_no_copy(alist_lookup_without_values(owl_to_cycl.$owl_reserved_namespaces$.getGlobalValue(), namespace, NIL, UNPROVIDED)) }));
    }

    public static final SubLObject owl_imported_namespace_problem_alt(SubLObject value, SubLObject imported_ontology_uris) {
        {
            SubLObject foundP = NIL;
            if (NIL == foundP) {
                {
                    SubLObject csome_list_var = imported_ontology_uris;
                    SubLObject uri = NIL;
                    for (uri = csome_list_var.first(); !((NIL != foundP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , uri = csome_list_var.first()) {
                        if (value.equal(uri) || (((NIL != string_utilities.starts_with(value, uri)) && (NIL != list_utilities.lengthE(value, number_utilities.f_1X(length(uri)), UNPROVIDED))) && CHAR_hash.eql(string_utilities.last_char(value)))) {
                            foundP = T;
                        }
                    }
                }
            }
            return NIL != foundP ? ((SubLObject) (NIL)) : cons(value, cconcatenate($str_alt211$No_import_statement_for_, format_nil.format_nil_s_no_copy(value)));
        }
    }

    public static SubLObject owl_imported_namespace_problem(final SubLObject value, final SubLObject imported_ontology_uris) {
        SubLObject foundP = NIL;
        if (NIL == foundP) {
            SubLObject csome_list_var = imported_ontology_uris;
            SubLObject uri = NIL;
            uri = csome_list_var.first();
            while ((NIL == foundP) && (NIL != csome_list_var)) {
                if (value.equal(uri) || (((NIL != starts_with(value, uri)) && (NIL != lengthE(value, f_1X(length(uri)), UNPROVIDED))) && CHAR_hash.eql(last_char(value)))) {
                    foundP = T;
                }
                csome_list_var = csome_list_var.rest();
                uri = csome_list_var.first();
            } 
        }
        return NIL != foundP ? NIL : cons(value, cconcatenate(owl_to_cycl.$$$No_import_statement_for_, format_nil_s_no_copy(value)));
    }

    public static final SubLObject clear_find_or_create_owl_ontology_for_uri_alt() {
        {
            SubLObject cs = $find_or_create_owl_ontology_for_uri_caching_state$.getGlobalValue();
            if (NIL != cs) {
                memoization_state.caching_state_clear(cs);
            }
        }
        return NIL;
    }

    public static SubLObject clear_find_or_create_owl_ontology_for_uri() {
        final SubLObject cs = owl_to_cycl.$find_or_create_owl_ontology_for_uri_caching_state$.getGlobalValue();
        if (NIL != cs) {
            caching_state_clear(cs);
        }
        return NIL;
    }

    public static final SubLObject remove_find_or_create_owl_ontology_for_uri_alt(SubLObject uri, SubLObject import_parameters, SubLObject problem_store) {
        if (import_parameters == UNPROVIDED) {
            import_parameters = NIL;
        }
        if (problem_store == UNPROVIDED) {
            problem_store = NIL;
        }
        return memoization_state.caching_state_remove_function_results_with_args($find_or_create_owl_ontology_for_uri_caching_state$.getGlobalValue(), list(uri, import_parameters, problem_store), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_find_or_create_owl_ontology_for_uri(final SubLObject uri, SubLObject import_parameters, SubLObject problem_store) {
        if (import_parameters == UNPROVIDED) {
            import_parameters = NIL;
        }
        if (problem_store == UNPROVIDED) {
            problem_store = NIL;
        }
        return caching_state_remove_function_results_with_args(owl_to_cycl.$find_or_create_owl_ontology_for_uri_caching_state$.getGlobalValue(), list(uri, import_parameters, problem_store), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject find_or_create_owl_ontology_for_uri_internal_alt(SubLObject uri, SubLObject import_parameters, SubLObject problem_store) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(uri, URI_P);
            if (NIL != import_parameters) {
                SubLTrampolineFile.checkType(import_parameters, OWL_IMPORT_PARAMETERS_P);
            }
            {
                SubLObject ontology = ((NIL != import_parameters) && uri.equal(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_base_uri(import_parameters))) ? ((SubLObject) (com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_ontology(import_parameters))) : NIL;
                if (NIL == ontology) {
                    ontology = ask_utilities.query_template($sym213$_ONTOLOGY, list($$and, $list_alt215, list($$salientURI, $sym213$_ONTOLOGY, uri)), $$InferencePSC, listS($INFERENCE_MODE, $MINIMAL, $PROBLEM_STORE, problem_store, $list_alt220)).first();
                    if (NIL == ontology) {
                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt222$Couldn_t_find_ontology_for__S__Cr, $str_alt223$__ }), uri);
                            force_output(UNPROVIDED);
                        }
                        ontology = czer_main.cyc_find_or_create_nart(list($$OWLOntologyFn, uri), UNPROVIDED);
                    }
                }
                return ontology;
            }
        }
    }

    public static SubLObject find_or_create_owl_ontology_for_uri_internal(final SubLObject uri, final SubLObject import_parameters, final SubLObject problem_store) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != uri_p(uri, UNPROVIDED) : "! web_utilities.uri_p(uri, .UNPROVIDED) " + ("web_utilities.uri_p(uri, CommonSymbols.UNPROVIDED) " + "CommonSymbols.NIL != web_utilities.uri_p(uri, CommonSymbols.UNPROVIDED) ") + uri;
        if (((NIL != import_parameters) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == owl_to_cycl.owl_import_parameters_p(import_parameters))) {
            throw new AssertionError(import_parameters);
        }
        SubLObject ontology = ((NIL != import_parameters) && uri.equal(owl_to_cycl.owl_import_parameters_base_uri(import_parameters))) ? owl_to_cycl.owl_import_parameters_ontology(import_parameters) : NIL;
        if (NIL == ontology) {
            ontology = query_template(owl_to_cycl.$sym229$_ONTOLOGY, list(owl_to_cycl.$$and, owl_to_cycl.$list231, list(owl_to_cycl.$$salientURI, owl_to_cycl.$sym229$_ONTOLOGY, uri)), owl_to_cycl.$$InferencePSC, listS($INFERENCE_MODE, $MINIMAL, $PROBLEM_STORE, problem_store, owl_to_cycl.$list236)).first();
            if (NIL == ontology) {
                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str238$Couldn_t_find_ontology_for__S__Cr, owl_to_cycl.$str239$__ }), uri);
                    force_output(UNPROVIDED);
                }
                ontology = cyc_find_or_create_nart(list(owl_to_cycl.$$OWLOntologyFn, uri), UNPROVIDED);
            }
        }
        return ontology;
    }

    public static final SubLObject find_or_create_owl_ontology_for_uri_alt(SubLObject uri, SubLObject import_parameters, SubLObject problem_store) {
        if (import_parameters == UNPROVIDED) {
            import_parameters = NIL;
        }
        if (problem_store == UNPROVIDED) {
            problem_store = NIL;
        }
        {
            SubLObject caching_state = $find_or_create_owl_ontology_for_uri_caching_state$.getGlobalValue();
            if (NIL == caching_state) {
                caching_state = memoization_state.create_global_caching_state_for_name(FIND_OR_CREATE_OWL_ONTOLOGY_FOR_URI, $find_or_create_owl_ontology_for_uri_caching_state$, NIL, EQUAL, THREE_INTEGER, ZERO_INTEGER);
            }
            {
                SubLObject sxhash = memoization_state.sxhash_calc_3(uri, import_parameters, problem_store);
                SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
                if (collisions != $kw15$_MEMOIZED_ITEM_NOT_FOUND_) {
                    {
                        SubLObject cdolist_list_var = collisions;
                        SubLObject collision = NIL;
                        for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , collision = cdolist_list_var.first()) {
                            {
                                SubLObject cached_args = collision.first();
                                SubLObject results2 = second(collision);
                                if (uri.equal(cached_args.first())) {
                                    cached_args = cached_args.rest();
                                    if (import_parameters.equal(cached_args.first())) {
                                        cached_args = cached_args.rest();
                                        if (((NIL != cached_args) && (NIL == cached_args.rest())) && problem_store.equal(cached_args.first())) {
                                            return memoization_state.caching_results(results2);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    SubLObject results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.owl.owl_to_cycl.find_or_create_owl_ontology_for_uri_internal(uri, import_parameters, problem_store)));
                    memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(uri, import_parameters, problem_store));
                    return memoization_state.caching_results(results);
                }
            }
        }
    }

    public static SubLObject find_or_create_owl_ontology_for_uri(final SubLObject uri, SubLObject import_parameters, SubLObject problem_store) {
        if (import_parameters == UNPROVIDED) {
            import_parameters = NIL;
        }
        if (problem_store == UNPROVIDED) {
            problem_store = NIL;
        }
        SubLObject caching_state = owl_to_cycl.$find_or_create_owl_ontology_for_uri_caching_state$.getGlobalValue();
        if (NIL == caching_state) {
            caching_state = create_global_caching_state_for_name(owl_to_cycl.FIND_OR_CREATE_OWL_ONTOLOGY_FOR_URI, owl_to_cycl.$find_or_create_owl_ontology_for_uri_caching_state$, NIL, EQUAL, THREE_INTEGER, ZERO_INTEGER);
        }
        final SubLObject sxhash = sxhash_calc_3(uri, import_parameters, problem_store);
        final SubLObject collisions = caching_state_lookup(caching_state, sxhash, UNPROVIDED);
        if (!collisions.eql($memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = NIL;
            collision = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = second(collision);
                if (uri.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (import_parameters.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (((NIL != cached_args) && (NIL == cached_args.rest())) && problem_store.equal(cached_args.first())) {
                            return caching_results(results2);
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            } 
        }
        final SubLObject results3 = arg2(resetMultipleValues(), multiple_value_list(owl_to_cycl.find_or_create_owl_ontology_for_uri_internal(uri, import_parameters, problem_store)));
        caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(uri, import_parameters, problem_store));
        return caching_results(results3);
    }

    public static final SubLObject find_or_create_term_type_for_ontology_alt(SubLObject ontology, SubLObject problem_store) {
        if (problem_store == UNPROVIDED) {
            problem_store = NIL;
        }
        SubLTrampolineFile.checkType(ontology, CYCL_DENOTATIONAL_TERM_P);
        {
            SubLObject term_type = ask_utilities.query_variable($sym226$_TERM_TYPE, listS($$termTypeForOntology, ontology, $list_alt228), $$OWLMappingMt, listS($INFERENCE_MODE, $MINIMAL, $PROBLEM_STORE, problem_store, $list_alt220)).first();
            if (NIL == term_type) {
                term_type = czer_main.canonicalize_term(list($$TermFromOntologyFn, ontology), UNPROVIDED);
            }
            return term_type;
        }
    }

    public static SubLObject find_or_create_term_type_for_ontology(final SubLObject ontology, SubLObject problem_store) {
        if (problem_store == UNPROVIDED) {
            problem_store = NIL;
        }
        assert NIL != cycl_denotational_term_p(ontology) : "! cycl_grammar.cycl_denotational_term_p(ontology) " + ("cycl_grammar.cycl_denotational_term_p(ontology) " + "CommonSymbols.NIL != cycl_grammar.cycl_denotational_term_p(ontology) ") + ontology;
        SubLObject term_type = query_variable(owl_to_cycl.$sym242$_TERM_TYPE, listS(owl_to_cycl.$$termTypeForOntology, ontology, owl_to_cycl.$list244), owl_to_cycl.$$OWLMappingMt, listS($INFERENCE_MODE, $MINIMAL, $PROBLEM_STORE, problem_store, owl_to_cycl.$list236)).first();
        if (NIL == term_type) {
            term_type = canonicalize_term(list(owl_to_cycl.$$TermFromOntologyFn, ontology), UNPROVIDED);
        }
        return term_type;
    }

    public static final SubLObject read_pred_info_from_owl_tokens_alt(SubLObject original_tokens, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject tokens = original_tokens;
                SubLObject current_token = tokens.first();
                {
                    SubLObject _prev_bind_0 = $owl_definition_type$.currentBinding(thread);
                    try {
                        $owl_definition_type$.bind($PROPERTY, thread);
                        {
                            SubLObject pred_info = NIL;
                            while (NIL != current_token) {
                                thread.resetMultipleValues();
                                {
                                    SubLObject new_pred_info = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_one_owl_chunk_for_pred_info(current_token, pred_info, import_parameters, tokens);
                                    SubLObject token_advance_spec = thread.secondMultipleValue();
                                    SubLObject pred_info_doneP = thread.thirdMultipleValue();
                                    thread.resetMultipleValues();
                                    if (!pred_info.eql(new_pred_info)) {
                                        pred_info = new_pred_info;
                                    }
                                    if (NIL != pred_info_doneP) {
                                        com.cyc.cycjava.cycl.owl.owl_to_cycl.accumulate_owl_definition(new_pred_info, $PROPERTY);
                                        pred_info = NIL;
                                    }
                                    if (NIL != subl_promotions.positive_integer_p(token_advance_spec)) {
                                        tokens = web_utilities.advance_xml_tokens(tokens, token_advance_spec);
                                    } else {
                                        if (token_advance_spec.isString()) {
                                            tokens = web_utilities.advance_xml_tokens(web_utilities.advance_xml_tokens_to(tokens, token_advance_spec, UNPROVIDED), UNPROVIDED);
                                        } else {
                                            if (token_advance_spec.eql($CLOSE)) {
                                                tokens = web_utilities.advance_xml_tokens_to_end_of_element(tokens);
                                            } else {
                                                {
                                                    SubLObject position = com.cyc.cycjava.cycl.owl.owl_to_cycl.next_noninitial_non_whitespace_xml_token_position(tokens);
                                                    tokens = (NIL != position) ? ((SubLObject) (web_utilities.advance_xml_tokens(tokens, position))) : NIL;
                                                }
                                            }
                                        }
                                    }
                                    current_token = (NIL != list_utilities.non_empty_list_p(tokens)) ? ((SubLObject) (tokens.first())) : NIL;
                                }
                            } 
                            if (NIL != pred_info) {
                                if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_range(pred_info)) {
                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.accumulate_owl_definition(pred_info, $PROPERTY);
                                } else {
                                    if (NIL != owl_utilities.owl_warnP()) {
                                        Errors.warn($str_alt231$There_is_no_range_for__S__Name_to, pred_info, current_token);
                                    }
                                }
                            }
                        }
                    } finally {
                        $owl_definition_type$.rebind(_prev_bind_0, thread);
                    }
                }
            }
            return NIL;
        }
    }

    public static SubLObject read_pred_info_from_owl_tokens(final SubLObject original_tokens, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject tokens = original_tokens;
        SubLObject current_token = tokens.first();
        final SubLObject _prev_bind_0 = owl_to_cycl.$owl_definition_type$.currentBinding(thread);
        try {
            owl_to_cycl.$owl_definition_type$.bind($PROPERTY, thread);
            SubLObject pred_info = NIL;
            while (NIL != current_token) {
                thread.resetMultipleValues();
                final SubLObject new_pred_info = owl_to_cycl.read_one_owl_chunk_for_pred_info(current_token, pred_info, import_parameters, tokens);
                final SubLObject token_advance_spec = thread.secondMultipleValue();
                final SubLObject pred_info_doneP = thread.thirdMultipleValue();
                thread.resetMultipleValues();
                if (!pred_info.eql(new_pred_info)) {
                    pred_info = new_pred_info;
                }
                if (NIL != pred_info_doneP) {
                    owl_to_cycl.accumulate_owl_definition(new_pred_info, $PROPERTY);
                    pred_info = NIL;
                }
                if (NIL != positive_integer_p(token_advance_spec)) {
                    tokens = xml_parsing_utilities.advance_xml_tokens(tokens, token_advance_spec);
                } else
                    if (token_advance_spec.isString()) {
                        tokens = xml_parsing_utilities.advance_xml_tokens(xml_parsing_utilities.advance_xml_tokens_to(tokens, token_advance_spec, UNPROVIDED), UNPROVIDED);
                    } else
                        if (token_advance_spec.eql($CLOSE)) {
                            tokens = xml_parsing_utilities.advance_xml_tokens_to_end_of_element(tokens);
                        } else {
                            final SubLObject position = owl_to_cycl.next_noninitial_non_whitespace_xml_token_position(tokens);
                            tokens = (NIL != position) ? xml_parsing_utilities.advance_xml_tokens(tokens, position) : NIL;
                        }


                current_token = (NIL != non_empty_list_p(tokens)) ? tokens.first() : NIL;
            } 
            if (NIL != pred_info) {
                if (NIL != owl_to_cycl.owl_pred_info_range(pred_info)) {
                    owl_to_cycl.accumulate_owl_definition(pred_info, $PROPERTY);
                } else
                    if (NIL != owl_utilities.owl_warnP()) {
                        Errors.warn(owl_to_cycl.$str247$There_is_no_range_for__S__Name_to, pred_info, current_token);
                    }

            }
        } finally {
            owl_to_cycl.$owl_definition_type$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    public static final SubLObject clear_owl_property_element_names_alt() {
        {
            SubLObject cs = $owl_property_element_names_caching_state$.getGlobalValue();
            if (NIL != cs) {
                memoization_state.caching_state_clear(cs);
            }
        }
        return NIL;
    }

    public static SubLObject clear_owl_property_element_names() {
        final SubLObject cs = owl_to_cycl.$owl_property_element_names_caching_state$.getGlobalValue();
        if (NIL != cs) {
            caching_state_clear(cs);
        }
        return NIL;
    }

    public static final SubLObject remove_owl_property_element_names_alt() {
        return memoization_state.caching_state_remove_function_results_with_args($owl_property_element_names_caching_state$.getGlobalValue(), list(EMPTY_SUBL_OBJECT_ARRAY), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_owl_property_element_names() {
        return caching_state_remove_function_results_with_args(owl_to_cycl.$owl_property_element_names_caching_state$.getGlobalValue(), list(EMPTY_SUBL_OBJECT_ARRAY), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject owl_property_element_names_internal_alt() {
        return list(owl_utilities.owl_name($$$DatatypeProperty), owl_utilities.owl_name($$$AnnotationProperty), owl_utilities.owl_name($$$ObjectProperty), owl_utilities.owl_name($$$FunctionalProperty), owl_utilities.owl_name($$$SymmetricProperty), owl_utilities.owl_name($$$TransitiveProperty));
    }

    public static SubLObject owl_property_element_names_internal() {
        return list(owl_utilities.owl_name(owl_to_cycl.$$$DatatypeProperty), owl_utilities.owl_name(owl_to_cycl.$$$AnnotationProperty), owl_utilities.owl_name(owl_to_cycl.$$$ObjectProperty), owl_utilities.owl_name(owl_to_cycl.$$$FunctionalProperty), owl_utilities.owl_name(owl_to_cycl.$$$SymmetricProperty), owl_utilities.owl_name(owl_to_cycl.$$$TransitiveProperty));
    }

    public static final SubLObject owl_property_element_names_alt() {
        {
            SubLObject caching_state = $owl_property_element_names_caching_state$.getGlobalValue();
            if (NIL == caching_state) {
                caching_state = memoization_state.create_global_caching_state_for_name(OWL_PROPERTY_ELEMENT_NAMES, $owl_property_element_names_caching_state$, NIL, EQL, ZERO_INTEGER, ZERO_INTEGER);
            }
            {
                SubLObject results = memoization_state.caching_state_get_zero_arg_results(caching_state, UNPROVIDED);
                if (results == $kw15$_MEMOIZED_ITEM_NOT_FOUND_) {
                    results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_property_element_names_internal()));
                    memoization_state.caching_state_set_zero_arg_results(caching_state, results, UNPROVIDED);
                }
                return memoization_state.caching_results(results);
            }
        }
    }

    public static SubLObject owl_property_element_names() {
        SubLObject caching_state = owl_to_cycl.$owl_property_element_names_caching_state$.getGlobalValue();
        if (NIL == caching_state) {
            caching_state = create_global_caching_state_for_name(owl_to_cycl.OWL_PROPERTY_ELEMENT_NAMES, owl_to_cycl.$owl_property_element_names_caching_state$, NIL, EQL, ZERO_INTEGER, ZERO_INTEGER);
        }
        SubLObject results = caching_state_get_zero_arg_results(caching_state, UNPROVIDED);
        if (results.eql($memoized_item_not_found$.getGlobalValue())) {
            results = arg2(resetMultipleValues(), multiple_value_list(owl_to_cycl.owl_property_element_names_internal()));
            caching_state_set_zero_arg_results(caching_state, results, UNPROVIDED);
        }
        return caching_results(results);
    }

    public static final SubLObject owl_property_token_p_alt(SubLObject token) {
        return subl_promotions.memberP(web_utilities.xml_token_element_name(token), com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_property_element_names(), symbol_function(EQUAL), UNPROVIDED);
    }

    public static SubLObject owl_property_token_p(final SubLObject token) {
        return memberP(xml_parsing_utilities.xml_token_element_name(token), owl_to_cycl.owl_property_element_names(), symbol_function(EQUAL), UNPROVIDED);
    }

    public static final SubLObject read_one_owl_chunk_for_pred_info_alt(SubLObject current_token, SubLObject pred_info, SubLObject import_parameters, SubLObject tokens) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject new_pred_info = pred_info;
                SubLObject token_advance_spec = NIL;
                SubLObject pred_info_doneP = NIL;
                if (NIL != web_utilities.xml_token_starts_with(current_token, $str_alt240$____)) {
                    {
                        SubLObject comment_close_position = web_utilities.next_xml_token_position(tokens, $str_alt241$___, UNPROVIDED);
                        if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                            if (!comment_close_position.isInteger()) {
                                Errors.error($str_alt242$Couldn_t_find_end_of_HTML_comment, list_utilities.first_n(TEN_INTEGER, tokens));
                            }
                        }
                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt243$Skipping_comment___S, $str_alt223$__ }), list_utilities.first_n(number_utilities.f_1X(comment_close_position), tokens));
                            force_output(UNPROVIDED);
                        }
                        token_advance_spec = number_utilities.f_1X(comment_close_position);
                    }
                } else {
                    if ((NIL == web_utilities.xml_closing_tag_p(current_token)) && (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_property_token_p(current_token))) {
                        {
                            SubLObject external_name = NIL;
                            SubLObject cyc_name = NIL;
                            if (NIL == list_utilities.empty_list_p(web_utilities.parse_xml_token(current_token).rest())) {
                                thread.resetMultipleValues();
                                {
                                    SubLObject external_name_69 = com.cyc.cycjava.cycl.owl.owl_to_cycl.pred_names_from_token(current_token, import_parameters);
                                    SubLObject cyc_name_70 = thread.secondMultipleValue();
                                    thread.resetMultipleValues();
                                    external_name = external_name_69;
                                    cyc_name = cyc_name_70;
                                }
                            }
                            new_pred_info = com.cyc.cycjava.cycl.owl.owl_to_cycl.find_or_create_owl_pred_info(external_name);
                            if (NIL != cyc_name) {
                                com.cyc.cycjava.cycl.owl.owl_to_cycl.set_owl_pred_info_cyc_name(new_pred_info, cyc_name);
                            }
                            {
                                SubLObject type = web_utilities.xml_token_element_name(current_token);
                                com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_push(new_pred_info, $ISAS, type);
                            }
                        }
                        if (NIL != web_utilities.xml_empty_tagP(current_token)) {
                            pred_info_doneP = T;
                        }
                        token_advance_spec = $NEXT_NON_WHITESPACE_TOKEN;
                    } else {
                        if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_class_token_p(current_token)) {
                            token_advance_spec = $CLOSE;
                        } else {
                            if (NIL == pred_info) {
                                token_advance_spec = com.cyc.cycjava.cycl.owl.owl_to_cycl.handle_non_target_owl_token(current_token);
                            } else {
                                if (NIL != string_utilities.whitespace_stringP(current_token)) {
                                    token_advance_spec = $NEXT_NON_WHITESPACE_TOKEN;
                                } else {
                                    if (NIL != web_utilities.xml_token_element_nameP(current_token, rdf_utilities.rdf_name($$$type))) {
                                        com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_push(new_pred_info, $ISAS, com.cyc.cycjava.cycl.owl.owl_to_cycl.term_names_from_token(current_token, import_parameters));
                                        token_advance_spec = $CLOSE;
                                    } else {
                                        if (NIL != web_utilities.xml_token_element_nameP(current_token, rdf_utilities.rdfs_name($$$label))) {
                                            if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                                                if (NIL != web_utilities.xml_empty_tagP(current_token)) {
                                                    Errors.error($str_alt247$Can_t_interpret_empty_label_token, current_token);
                                                }
                                            }
                                            {
                                                SubLObject lang_value = web_utilities.xml_tag_attribute_value(current_token, com.cyc.cycjava.cycl.owl.owl_to_cycl.xml_name($$$lang), NIL);
                                                SubLObject language = decode_html_language_abbreviation(lang_value);
                                                SubLObject label = second(tokens);
                                                if ((NIL != lang_value) && (NIL == language)) {
                                                    if (NIL != owl_utilities.owl_warnP()) {
                                                        Errors.warn($str_alt248$Can_t_decode_language_abbreviatio, lang_value);
                                                    }
                                                }
                                                com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_push(new_pred_info, $LABEL, cons(label, language));
                                            }
                                            token_advance_spec = $CLOSE;
                                        } else {
                                            if (NIL != web_utilities.xml_token_element_nameP(current_token, rdf_utilities.rdfs_name($$$comment))) {
                                                com.cyc.cycjava.cycl.owl.owl_to_cycl.set_owl_pred_info_comment(new_pred_info, second(tokens));
                                                token_advance_spec = $CLOSE;
                                            } else {
                                                if ((NIL != web_utilities.xml_token_element_nameP(current_token, rdf_utilities.rdfs_name($$$domain))) && (NIL != web_utilities.xml_opening_tag_p(current_token))) {
                                                    {
                                                        SubLObject domains = com.cyc.cycjava.cycl.owl.owl_to_cycl.process_domain_list(tokens, import_parameters);
                                                        com.cyc.cycjava.cycl.owl.owl_to_cycl.set_owl_pred_info_domains(new_pred_info, domains);
                                                    }
                                                    token_advance_spec = $CLOSE;
                                                } else {
                                                    if (NIL != web_utilities.xml_token_element_nameP(current_token, rdf_utilities.rdfs_name($$$domain))) {
                                                        {
                                                            SubLObject domain = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_term_reference(current_token, import_parameters);
                                                            if (NIL != domain) {
                                                                com.cyc.cycjava.cycl.owl.owl_to_cycl.set_owl_pred_info_domains(new_pred_info, list(domain));
                                                            } else {
                                                                if (NIL != owl_utilities.owl_warnP()) {
                                                                    Errors.warn($str_alt251$Couldn_t_identify_domain_from__S, list_utilities.first_n(FOUR_INTEGER, tokens));
                                                                }
                                                            }
                                                        }
                                                        token_advance_spec = $NEXT_NON_WHITESPACE_TOKEN;
                                                    } else {
                                                        if (NIL != web_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name($$$inverseOf))) {
                                                            {
                                                                SubLObject atomicP = string_utilities.ends_with(current_token, $str_alt253$__, UNPROVIDED);
                                                                SubLObject inverse_token = (NIL != atomicP) ? ((SubLObject) (current_token)) : com.cyc.cycjava.cycl.owl.owl_to_cycl.next_noninitial_non_whitespace_xml_token(tokens);
                                                                SubLObject inverse_name = com.cyc.cycjava.cycl.owl.owl_to_cycl.pred_names_from_token(inverse_token, import_parameters);
                                                                if (inverse_name.equal(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_lookup(new_pred_info, $EXTERNAL_NAME, UNPROVIDED))) {
                                                                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                        format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt254$_S_is_its_own_inverse__so_it_s_sy, $str_alt223$__ }), inverse_name);
                                                                        force_output(UNPROVIDED);
                                                                    }
                                                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_enter(new_pred_info, $SYMMETRIC_, T);
                                                                } else {
                                                                    if (NIL != inverse_name) {
                                                                        com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_enter(new_pred_info, $INVERSE, inverse_name);
                                                                    }
                                                                }
                                                                token_advance_spec = $CLOSE;
                                                            }
                                                        } else {
                                                            if (NIL != web_utilities.xml_token_element_nameP(current_token, rdf_utilities.rdfs_name($$$subPropertyOf))) {
                                                                {
                                                                    SubLObject atomicP = web_utilities.xml_empty_tagP(current_token);
                                                                    SubLObject genl_property_token = (NIL != atomicP) ? ((SubLObject) (current_token)) : com.cyc.cycjava.cycl.owl.owl_to_cycl.next_noninitial_non_whitespace_xml_token(tokens);
                                                                    SubLObject genl_property_name = com.cyc.cycjava.cycl.owl.owl_to_cycl.pred_names_from_token(genl_property_token, import_parameters);
                                                                    if (NIL != genl_property_name) {
                                                                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt258$Noting_genl_property__S_of__S, $str_alt223$__ }), genl_property_name, pred_info);
                                                                            force_output(UNPROVIDED);
                                                                        }
                                                                        com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_enter(new_pred_info, $GENL_PROPERTY, genl_property_name);
                                                                    }
                                                                    token_advance_spec = $CLOSE;
                                                                }
                                                            } else {
                                                                if (NIL != web_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name($$$equivalentProperty))) {
                                                                    {
                                                                        SubLObject atomicP = web_utilities.xml_empty_tagP(current_token);
                                                                        SubLObject equiv_property_token = (NIL != atomicP) ? ((SubLObject) (current_token)) : com.cyc.cycjava.cycl.owl.owl_to_cycl.next_noninitial_non_whitespace_xml_token(tokens);
                                                                        SubLObject equiv_property_name = com.cyc.cycjava.cycl.owl.owl_to_cycl.pred_names_from_token(equiv_property_token, import_parameters);
                                                                        if (NIL != equiv_property_name) {
                                                                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                                format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt261$Noting_equivalent_property__S_of_, $str_alt223$__ }), equiv_property_name, pred_info);
                                                                                force_output(UNPROVIDED);
                                                                            }
                                                                            com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_push(new_pred_info, $EQUIVALENT_PROPERTIES, equiv_property_name);
                                                                        }
                                                                        token_advance_spec = $CLOSE;
                                                                    }
                                                                } else {
                                                                    if ((NIL != web_utilities.xml_token_element_nameP(current_token, rdf_utilities.rdfs_name($$$range))) && (NIL != web_utilities.xml_opening_tag_p(current_token))) {
                                                                        thread.resetMultipleValues();
                                                                        {
                                                                            SubLObject range = com.cyc.cycjava.cycl.owl.owl_to_cycl.process_range_list(tokens, import_parameters);
                                                                            SubLObject tokens_to_advance = thread.secondMultipleValue();
                                                                            thread.resetMultipleValues();
                                                                            com.cyc.cycjava.cycl.owl.owl_to_cycl.set_owl_pred_info_range(new_pred_info, range);
                                                                            token_advance_spec = tokens_to_advance;
                                                                        }
                                                                    } else {
                                                                        if (NIL != web_utilities.xml_token_element_nameP(current_token, rdf_utilities.rdfs_name($$$range))) {
                                                                            {
                                                                                SubLObject range = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_term_reference(current_token, import_parameters);
                                                                                if (NIL == range) {
                                                                                    if (NIL != owl_utilities.owl_warnP()) {
                                                                                        Errors.warn($str_alt264$Couldn_t_identify_range_from__S, list_utilities.first_n(FOUR_INTEGER, tokens));
                                                                                    }
                                                                                }
                                                                                com.cyc.cycjava.cycl.owl.owl_to_cycl.set_owl_pred_info_range(new_pred_info, range);
                                                                            }
                                                                            token_advance_spec = $NEXT_NON_WHITESPACE_TOKEN;
                                                                        } else {
                                                                            if ((NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_property_token_p(current_token)) && (NIL != web_utilities.xml_closing_tag_p(current_token))) {
                                                                                pred_info_doneP = T;
                                                                                token_advance_spec = $NEXT_NON_WHITESPACE_TOKEN;
                                                                            } else {
                                                                                if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.cyc_token_with_nameP(current_token, $$$guid, import_parameters)) {
                                                                                    {
                                                                                        SubLObject next_token = second(tokens);
                                                                                        SubLObject guid = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_value_from_string(next_token, $$$string);
                                                                                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt267$__Noting_Cyc_guid_for__S_S__, $str_alt223$__ }), guid, new_pred_info);
                                                                                            force_output(UNPROVIDED);
                                                                                        }
                                                                                        com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_enter(new_pred_info, $GUID, guid);
                                                                                    }
                                                                                    token_advance_spec = $CLOSE;
                                                                                } else {
                                                                                    if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.cyc_token_with_nameP(current_token, $$$externalID, import_parameters)) {
                                                                                        {
                                                                                            SubLObject next_token = second(tokens);
                                                                                            SubLObject externalid = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_value_from_string(next_token, $$$string);
                                                                                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                                                format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt270$__Noting_Cyc_externalID_for__S_S_, $str_alt223$__ }), externalid, new_pred_info);
                                                                                                force_output(UNPROVIDED);
                                                                                            }
                                                                                            com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_enter(new_pred_info, $EXTERNALID, externalid);
                                                                                        }
                                                                                        token_advance_spec = $CLOSE;
                                                                                    } else {
                                                                                        if ((NIL != web_utilities.xml_tagP(current_token)) && (NIL == web_utilities.xml_closing_tag_p(current_token))) {
                                                                                            {
                                                                                                SubLObject property_name = web_utilities.xml_token_element_name(current_token);
                                                                                                SubLObject value_name = (NIL != web_utilities.xml_empty_tagP(current_token)) ? ((SubLObject) (com.cyc.cycjava.cycl.owl.owl_to_cycl.term_names_from_token(current_token, import_parameters))) : NIL;
                                                                                                SubLObject value = NIL;
                                                                                                if (NIL != value_name) {
                                                                                                    value = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_from_specification(value_name, $$Thing, import_parameters);
                                                                                                } else {
                                                                                                    {
                                                                                                        SubLObject datatype = com.cyc.cycjava.cycl.owl.owl_to_cycl.process_owl_attribute_value(web_utilities.xml_tag_attribute_value(current_token, rdf_utilities.rdf_name($$$datatype), UNPROVIDED));
                                                                                                        SubLObject next_token = second(tokens);
                                                                                                        value = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_value_from_string(next_token, datatype);
                                                                                                    }
                                                                                                }
                                                                                                if (NIL == value) {
                                                                                                } else {
                                                                                                    if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.cyc_token_with_nameP(current_token, $$$isa, import_parameters)) {
                                                                                                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                                                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt274$__Noting__isa__S__S___, $str_alt223$__ }), new_pred_info, value);
                                                                                                            force_output(UNPROVIDED);
                                                                                                        }
                                                                                                        com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_push(new_pred_info, $ISAS, value);
                                                                                                    } else {
                                                                                                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                                                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt275$__Noting__S__S__, $str_alt223$__ }), property_name, value);
                                                                                                            force_output(UNPROVIDED);
                                                                                                        }
                                                                                                        com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_push(new_pred_info, $MY_PRED_VALUES, list(property_name, value));
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            token_advance_spec = $CLOSE;
                                                                                        } else {
                                                                                            if (NIL != owl_utilities.owl_warnP()) {
                                                                                                Errors.warn($str_alt277$Ignoring_unrecognized_token___S, current_token);
                                                                                            }
                                                                                            token_advance_spec = $NEXT_NON_WHITESPACE_TOKEN;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return values(new_pred_info, token_advance_spec, pred_info_doneP);
            }
        }
    }

    public static SubLObject read_one_owl_chunk_for_pred_info(final SubLObject current_token, final SubLObject pred_info, final SubLObject import_parameters, final SubLObject tokens) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject new_pred_info = pred_info;
        SubLObject token_advance_spec = NIL;
        SubLObject pred_info_doneP = NIL;
        if (NIL != xml_parsing_utilities.xml_token_starts_with(current_token, owl_to_cycl.$str256$____)) {
            final SubLObject comment_close_position = xml_parsing_utilities.next_xml_token_position(tokens, owl_to_cycl.$str257$___, UNPROVIDED);
            if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (!comment_close_position.isInteger())) {
                Errors.error(owl_to_cycl.$str258$Couldn_t_find_end_of_HTML_comment, first_n(TEN_INTEGER, tokens));
            }
            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str259$Skipping_comment___S, owl_to_cycl.$str239$__ }), first_n(f_1X(comment_close_position), tokens));
                force_output(UNPROVIDED);
            }
            token_advance_spec = f_1X(comment_close_position);
        } else
            if ((NIL == xml_parsing_utilities.xml_closing_tag_p(current_token)) && (NIL != owl_to_cycl.owl_property_token_p(current_token))) {
                SubLObject external_name = NIL;
                SubLObject cyc_name = NIL;
                if (NIL == empty_list_p(xml_parsing_utilities.parse_xml_token(current_token).rest())) {
                    thread.resetMultipleValues();
                    final SubLObject external_name_$64 = owl_to_cycl.pred_names_from_token(current_token, import_parameters);
                    final SubLObject cyc_name_$65 = thread.secondMultipleValue();
                    thread.resetMultipleValues();
                    external_name = external_name_$64;
                    cyc_name = cyc_name_$65;
                }
                new_pred_info = owl_to_cycl.find_or_create_owl_pred_info(external_name);
                if (NIL != cyc_name) {
                    owl_to_cycl.set_owl_pred_info_cyc_name(new_pred_info, cyc_name);
                }
                final SubLObject type = xml_parsing_utilities.xml_token_element_name(current_token);
                owl_to_cycl.owl_pred_info_plist_push(new_pred_info, $ISAS, type);
                if (NIL != xml_parsing_utilities.xml_empty_tagP(current_token)) {
                    pred_info_doneP = T;
                }
                token_advance_spec = owl_to_cycl.$NEXT_NON_WHITESPACE_TOKEN;
            } else
                if (NIL != owl_to_cycl.owl_class_token_p(current_token)) {
                    token_advance_spec = $CLOSE;
                } else
                    if (NIL == pred_info) {
                        token_advance_spec = owl_to_cycl.handle_non_target_owl_token(current_token);
                    } else
                        if (NIL != whitespace_stringP(current_token)) {
                            token_advance_spec = owl_to_cycl.$NEXT_NON_WHITESPACE_TOKEN;
                        } else
                            if (NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, rdf_name(owl_to_cycl.$$$type))) {
                                owl_to_cycl.owl_pred_info_plist_push(new_pred_info, $ISAS, owl_to_cycl.term_names_from_token(current_token, import_parameters));
                                token_advance_spec = $CLOSE;
                            } else
                                if (NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, rdfs_name(owl_to_cycl.$$$label))) {
                                    if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL != xml_parsing_utilities.xml_empty_tagP(current_token))) {
                                        Errors.error(owl_to_cycl.$str263$Can_t_interpret_empty_label_token, current_token);
                                    }
                                    final SubLObject lang_value = xml_parsing_utilities.xml_tag_attribute_value(current_token, owl_to_cycl.xml_name(owl_to_cycl.$$$lang), NIL);
                                    final SubLObject language = (NIL != lang_value) ? decode_html_language_abbreviation(lang_value) : owl_to_cycl.$$EnglishLanguage;
                                    final SubLObject label = second(tokens);
                                    if (((NIL != lang_value) && (NIL == language)) && (NIL != owl_utilities.owl_warnP())) {
                                        Errors.warn(owl_to_cycl.$str264$Can_t_decode_language_abbreviatio, lang_value);
                                    }
                                    owl_to_cycl.owl_pred_info_plist_push(new_pred_info, $LABEL, cons(label, language));
                                    token_advance_spec = $CLOSE;
                                } else
                                    if (NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, rdfs_name(owl_to_cycl.$$$comment))) {
                                        owl_to_cycl.set_owl_pred_info_comment(new_pred_info, second(tokens));
                                        token_advance_spec = $CLOSE;
                                    } else
                                        if ((NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, rdfs_name(owl_to_cycl.$$$domain))) && (NIL != xml_parsing_utilities.xml_opening_tag_p(current_token))) {
                                            final SubLObject domains = owl_to_cycl.process_domain_list(tokens, import_parameters);
                                            owl_to_cycl.set_owl_pred_info_domains(new_pred_info, domains);
                                            token_advance_spec = $CLOSE;
                                        } else
                                            if (NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, rdfs_name(owl_to_cycl.$$$domain))) {
                                                final SubLObject domain = owl_to_cycl.read_owl_term_reference(current_token, import_parameters);
                                                if (NIL != domain) {
                                                    owl_to_cycl.set_owl_pred_info_domains(new_pred_info, list(domain));
                                                } else
                                                    if (NIL != owl_utilities.owl_warnP()) {
                                                        Errors.warn(owl_to_cycl.$str267$Couldn_t_identify_domain_from__S, first_n(FOUR_INTEGER, tokens));
                                                    }

                                                token_advance_spec = owl_to_cycl.$NEXT_NON_WHITESPACE_TOKEN;
                                            } else
                                                if (NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name(owl_to_cycl.$$$inverseOf))) {
                                                    final SubLObject atomicP = ends_with(current_token, owl_to_cycl.$str269$__, UNPROVIDED);
                                                    final SubLObject inverse_token = (NIL != atomicP) ? current_token : owl_to_cycl.next_noninitial_non_whitespace_xml_token(tokens);
                                                    final SubLObject inverse_name = owl_to_cycl.pred_names_from_token(inverse_token, import_parameters);
                                                    if (inverse_name.equal(owl_to_cycl.owl_pred_info_plist_lookup(new_pred_info, $EXTERNAL_NAME, UNPROVIDED))) {
                                                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str270$_S_is_its_own_inverse__so_it_s_sy, owl_to_cycl.$str239$__ }), inverse_name);
                                                            force_output(UNPROVIDED);
                                                        }
                                                        owl_to_cycl.owl_pred_info_plist_enter(new_pred_info, $SYMMETRIC_, T);
                                                    } else
                                                        if (NIL != inverse_name) {
                                                            owl_to_cycl.owl_pred_info_plist_enter(new_pred_info, $INVERSE, inverse_name);
                                                        }

                                                    token_advance_spec = $CLOSE;
                                                } else
                                                    if (NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, rdfs_name(owl_to_cycl.$$$subPropertyOf))) {
                                                        final SubLObject atomicP = xml_parsing_utilities.xml_empty_tagP(current_token);
                                                        final SubLObject genl_property_token = (NIL != atomicP) ? current_token : owl_to_cycl.next_noninitial_non_whitespace_xml_token(tokens);
                                                        final SubLObject genl_property_name = owl_to_cycl.pred_names_from_token(genl_property_token, import_parameters);
                                                        if (NIL != genl_property_name) {
                                                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str274$Noting_genl_property__S_of__S, owl_to_cycl.$str239$__ }), genl_property_name, pred_info);
                                                                force_output(UNPROVIDED);
                                                            }
                                                            owl_to_cycl.owl_pred_info_plist_enter(new_pred_info, $GENL_PROPERTY, genl_property_name);
                                                        }
                                                        token_advance_spec = $CLOSE;
                                                    } else
                                                        if (NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name(owl_to_cycl.$$$equivalentProperty))) {
                                                            final SubLObject atomicP = xml_parsing_utilities.xml_empty_tagP(current_token);
                                                            final SubLObject equiv_property_token = (NIL != atomicP) ? current_token : owl_to_cycl.next_noninitial_non_whitespace_xml_token(tokens);
                                                            final SubLObject equiv_property_name = owl_to_cycl.pred_names_from_token(equiv_property_token, import_parameters);
                                                            if (NIL != equiv_property_name) {
                                                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str277$Noting_equivalent_property__S_of_, owl_to_cycl.$str239$__ }), equiv_property_name, pred_info);
                                                                    force_output(UNPROVIDED);
                                                                }
                                                                owl_to_cycl.owl_pred_info_plist_push(new_pred_info, $EQUIVALENT_PROPERTIES, equiv_property_name);
                                                            }
                                                            token_advance_spec = $CLOSE;
                                                        } else
                                                            if ((NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, rdfs_name(owl_to_cycl.$$$range))) && (NIL != xml_parsing_utilities.xml_opening_tag_p(current_token))) {
                                                                thread.resetMultipleValues();
                                                                final SubLObject range = owl_to_cycl.process_range_list(tokens, import_parameters);
                                                                final SubLObject tokens_to_advance = thread.secondMultipleValue();
                                                                thread.resetMultipleValues();
                                                                owl_to_cycl.set_owl_pred_info_range(new_pred_info, range);
                                                                token_advance_spec = tokens_to_advance;
                                                            } else
                                                                if (NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, rdfs_name(owl_to_cycl.$$$range))) {
                                                                    final SubLObject range = owl_to_cycl.read_owl_term_reference(current_token, import_parameters);
                                                                    if ((NIL == range) && (NIL != owl_utilities.owl_warnP())) {
                                                                        Errors.warn(owl_to_cycl.$str280$Couldn_t_identify_range_from__S, first_n(FOUR_INTEGER, tokens));
                                                                    }
                                                                    owl_to_cycl.set_owl_pred_info_range(new_pred_info, range);
                                                                    token_advance_spec = owl_to_cycl.$NEXT_NON_WHITESPACE_TOKEN;
                                                                } else
                                                                    if ((NIL != owl_to_cycl.owl_property_token_p(current_token)) && (NIL != xml_parsing_utilities.xml_closing_tag_p(current_token))) {
                                                                        pred_info_doneP = T;
                                                                        token_advance_spec = owl_to_cycl.$NEXT_NON_WHITESPACE_TOKEN;
                                                                    } else
                                                                        if (NIL != owl_to_cycl.cyc_token_with_nameP(current_token, owl_to_cycl.$$$guid, import_parameters)) {
                                                                            final SubLObject next_token = second(tokens);
                                                                            final SubLObject guid = owl_to_cycl.owl_value_from_string(next_token, owl_to_cycl.$$$string);
                                                                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str283$__Noting_Cyc_guid_for__S_S__, owl_to_cycl.$str239$__ }), guid, new_pred_info);
                                                                                force_output(UNPROVIDED);
                                                                            }
                                                                            owl_to_cycl.owl_pred_info_plist_enter(new_pred_info, $GUID, guid);
                                                                            token_advance_spec = $CLOSE;
                                                                        } else
                                                                            if (NIL != owl_to_cycl.cyc_token_with_nameP(current_token, owl_to_cycl.$$$externalID, import_parameters)) {
                                                                                final SubLObject next_token = second(tokens);
                                                                                final SubLObject externalid = owl_to_cycl.owl_value_from_string(next_token, owl_to_cycl.$$$string);
                                                                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str286$__Noting_Cyc_externalID_for__S_S_, owl_to_cycl.$str239$__ }), externalid, new_pred_info);
                                                                                    force_output(UNPROVIDED);
                                                                                }
                                                                                owl_to_cycl.owl_pred_info_plist_enter(new_pred_info, $EXTERNALID, externalid);
                                                                                token_advance_spec = $CLOSE;
                                                                            } else
                                                                                if ((NIL != xml_parsing_utilities.xml_tagP(current_token)) && (NIL == xml_parsing_utilities.xml_closing_tag_p(current_token))) {
                                                                                    final SubLObject property_name = xml_parsing_utilities.xml_token_element_name(current_token);
                                                                                    final SubLObject value_name = (NIL != xml_parsing_utilities.xml_empty_tagP(current_token)) ? owl_to_cycl.term_names_from_token(current_token, import_parameters) : NIL;
                                                                                    SubLObject value = NIL;
                                                                                    if (NIL != value_name) {
                                                                                        value = owl_to_cycl.owl_find_or_create_term_from_specification(value_name, owl_to_cycl.$$Thing, import_parameters);
                                                                                    } else {
                                                                                        final SubLObject datatype = owl_to_cycl.process_owl_attribute_value(xml_parsing_utilities.xml_tag_attribute_value(current_token, rdf_name(owl_to_cycl.$$$datatype), UNPROVIDED));
                                                                                        final SubLObject next_token2 = second(tokens);
                                                                                        value = owl_to_cycl.owl_value_from_string(next_token2, datatype);
                                                                                    }
                                                                                    if (NIL != value) {
                                                                                        if (NIL != owl_to_cycl.cyc_token_with_nameP(current_token, owl_to_cycl.$$$isa, import_parameters)) {
                                                                                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                                                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str290$__Noting__isa__S__S___, owl_to_cycl.$str239$__ }), new_pred_info, value);
                                                                                                force_output(UNPROVIDED);
                                                                                            }
                                                                                            owl_to_cycl.owl_pred_info_plist_push(new_pred_info, $ISAS, value);
                                                                                        } else {
                                                                                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                                                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str291$__Noting__S__S__, owl_to_cycl.$str239$__ }), property_name, value);
                                                                                                force_output(UNPROVIDED);
                                                                                            }
                                                                                            owl_to_cycl.owl_pred_info_plist_push(new_pred_info, owl_to_cycl.$MY_PRED_VALUES, list(property_name, value));
                                                                                        }
                                                                                    }
                                                                                    token_advance_spec = $CLOSE;
                                                                                } else {
                                                                                    if (NIL != owl_utilities.owl_warnP()) {
                                                                                        Errors.warn(owl_to_cycl.$str293$Ignoring_unrecognized_token___S, current_token);
                                                                                    }
                                                                                    token_advance_spec = owl_to_cycl.$NEXT_NON_WHITESPACE_TOKEN;
                                                                                }


















        return values(new_pred_info, token_advance_spec, pred_info_doneP);
    }

    public static final SubLObject cyc_token_with_nameP_alt(SubLObject current_token, SubLObject name, SubLObject import_parameters) {
        return makeBoolean(((NIL != web_utilities.xml_token_element_nameP(current_token, name)) && com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_base_uri(import_parameters).isString()) && (NIL != string_utilities.substringP($str_alt278$cyc_com, com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_base_uri(import_parameters), UNPROVIDED, UNPROVIDED, UNPROVIDED)));
    }

    public static SubLObject cyc_token_with_nameP(final SubLObject current_token, final SubLObject name, final SubLObject import_parameters) {
        return makeBoolean(((NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, name)) && owl_to_cycl.owl_import_parameters_base_uri(import_parameters).isString()) && (NIL != substringP(owl_to_cycl.$str294$cyc_com, owl_to_cycl.owl_import_parameters_base_uri(import_parameters), UNPROVIDED, UNPROVIDED, UNPROVIDED)));
    }

    /**
     *
     *
     * @param VALUE
     * 		stringp or nonlocal-owl-term-reference-p
     */
    @LispMethod(comment = "@param VALUE\r\n\t\tstringp or nonlocal-owl-term-reference-p")
    public static final SubLObject process_owl_attribute_value_alt(SubLObject value) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject hash_pos = position(CHAR_hash, value, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                SubLObject divider_pos = (NIL != hash_pos) ? ((SubLObject) (hash_pos)) : list_utilities.position_from_end(CHAR_slash, value, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                if (NIL == divider_pos) {
                    return value;
                } else {
                    if (divider_pos.eql(ZERO_INTEGER)) {
                        return string_utilities.substring(value, ONE_INTEGER, UNPROVIDED);
                    } else {
                        {
                            SubLObject local_name = string_utilities.substring(value, number_utilities.f_1X(divider_pos), UNPROVIDED);
                            SubLObject uri = string_utilities.substring(value, ZERO_INTEGER, divider_pos);
                            if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                                if (NIL == web_utilities.uri_p(uri, UNPROVIDED)) {
                                    Errors.error($str_alt279$Don_t_know_how_to_interpret_attri, value);
                                }
                            }
                            return list($NONLOCAL, uri, local_name);
                        }
                    }
                }
            }
        }
    }

    /**
     *
     *
     * @param VALUE
     * 		stringp or nonlocal-owl-term-reference-p
     */
    @LispMethod(comment = "@param VALUE\r\n\t\tstringp or nonlocal-owl-term-reference-p")
    public static SubLObject process_owl_attribute_value(final SubLObject value) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject hash_pos = position(CHAR_hash, value, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        final SubLObject divider_pos = (NIL != hash_pos) ? hash_pos : position_from_end(CHAR_slash, value, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        if (NIL == divider_pos) {
            return value;
        }
        if (divider_pos.eql(ZERO_INTEGER)) {
            return substring(value, ONE_INTEGER, UNPROVIDED);
        }
        final SubLObject local_name = substring(value, f_1X(divider_pos), UNPROVIDED);
        final SubLObject uri = substring(value, ZERO_INTEGER, divider_pos);
        if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == uri_p(uri, UNPROVIDED))) {
            Errors.error(owl_to_cycl.$str295$Don_t_know_how_to_interpret_attri, value);
        }
        return list($NONLOCAL, uri, local_name);
    }

    public static final SubLObject owl_note_spec_property_alt(SubLObject pred, SubLObject genl_property_name) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            return dictionary_utilities.dictionary_pushnew($owl_spec_properties$.getDynamicValue(thread), genl_property_name, pred, UNPROVIDED, UNPROVIDED);
        }
    }

    public static SubLObject owl_note_spec_property(final SubLObject pred, final SubLObject genl_property_name) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return dictionary_pushnew(owl_to_cycl.$owl_spec_properties$.getDynamicValue(thread), genl_property_name, pred, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject owl_lookup_spec_properties_alt(SubLObject genl_property_name) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            return dictionary.dictionary_lookup_without_values($owl_spec_properties$.getDynamicValue(thread), genl_property_name, NIL);
        }
    }

    public static SubLObject owl_lookup_spec_properties(final SubLObject genl_property_name) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return dictionary_lookup_without_values(owl_to_cycl.$owl_spec_properties$.getDynamicValue(thread), genl_property_name, NIL);
    }

    /**
     * Creates predicates (if they do not exist in the KB already) from a particular OWL file.
     *
     * @param PRED-INFO-LIST
    owl-pred-info-p.
     * 		
     * @return UNCONSTRAINED-PREDS listp; a list of preds that have #$Thing as one
    of its #$argIsa.
     */
    @LispMethod(comment = "Creates predicates (if they do not exist in the KB already) from a particular OWL file.\r\n\r\n@param PRED-INFO-LIST\nowl-pred-info-p.\r\n\t\t\r\n@return UNCONSTRAINED-PREDS listp; a list of preds that have #$Thing as one\r\nof its #$argIsa.")
    public static final SubLObject create_preds_from_owl_data_alt(SubLObject pred_info_list, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject unconstrained_preds = NIL;
                com.cyc.cycjava.cycl.owl.owl_to_cycl.note_owl_import_section_started();
                if (NIL != list_utilities.non_empty_list_p(pred_info_list)) {
                    {
                        SubLObject _prev_bind_0 = $owl_spec_properties$.currentBinding(thread);
                        try {
                            $owl_spec_properties$.bind(dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED), thread);
                            {
                                SubLObject total = length(pred_info_list);
                                SubLObject percent_per = divide(ONE_INTEGER, total);
                                SubLObject percent_done = ZERO_INTEGER;
                                SubLObject message = format(NIL, $str_alt281$Processing__D_property_definition, total);
                                SubLObject list_var = pred_info_list;
                                $progress_note$.setDynamicValue(message, thread);
                                $progress_start_time$.setDynamicValue(get_universal_time(), thread);
                                $progress_total$.setDynamicValue(length(list_var), thread);
                                $progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
                                {
                                    SubLObject _prev_bind_0_71 = $last_percent_progress_index$.currentBinding(thread);
                                    SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
                                    SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
                                    SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
                                    try {
                                        $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
                                        $last_percent_progress_prediction$.bind(NIL, thread);
                                        $within_noting_percent_progress$.bind(T, thread);
                                        $percent_progress_start_time$.bind(get_universal_time(), thread);
                                        noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
                                        {
                                            SubLObject csome_list_var = list_var;
                                            SubLObject pred_info = NIL;
                                            for (pred_info = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest() , pred_info = csome_list_var.first()) {
                                                note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
                                                $progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
                                                thread.resetMultipleValues();
                                                {
                                                    SubLObject pred = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_define_one_pred(pred_info, import_parameters);
                                                    SubLObject unconstrainedP = thread.secondMultipleValue();
                                                    thread.resetMultipleValues();
                                                    owl_utilities.note_term_acted_on_during_import(pred, com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_import_term(import_parameters), com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_cyclist(import_parameters));
                                                    if (NIL != unconstrainedP) {
                                                        unconstrained_preds = cons(pred, unconstrained_preds);
                                                    }
                                                }
                                                percent_done = add(percent_done, percent_per);
                                                com.cyc.cycjava.cycl.owl.owl_to_cycl.note_owl_import_section_progress(percent_done);
                                            }
                                        }
                                        noting_percent_progress_postamble();
                                    } finally {
                                        $percent_progress_start_time$.rebind(_prev_bind_3, thread);
                                        $within_noting_percent_progress$.rebind(_prev_bind_2, thread);
                                        $last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
                                        $last_percent_progress_index$.rebind(_prev_bind_0_71, thread);
                                    }
                                }
                            }
                        } finally {
                            $owl_spec_properties$.rebind(_prev_bind_0, thread);
                        }
                    }
                }
                com.cyc.cycjava.cycl.owl.owl_to_cycl.note_owl_import_section_done();
                return unconstrained_preds;
            }
        }
    }

    /**
     * Creates predicates (if they do not exist in the KB already) from a particular OWL file.
     *
     * @param PRED-INFO-LIST
    		owl-pred-info-p.
     * 		
     * @return UNCONSTRAINED-PREDS listp; a list of preds that have #$Thing as one
    of its #$argIsa.
     */
    @LispMethod(comment = "Creates predicates (if they do not exist in the KB already) from a particular OWL file.\r\n\r\n@param PRED-INFO-LIST\n\t\towl-pred-info-p.\r\n\t\t\r\n@return UNCONSTRAINED-PREDS listp; a list of preds that have #$Thing as one\r\nof its #$argIsa.")
    public static SubLObject create_preds_from_owl_data(final SubLObject pred_info_list, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject unconstrained_preds = NIL;
        owl_to_cycl.note_owl_import_section_started();
        if (NIL != non_empty_list_p(pred_info_list)) {
            final SubLObject _prev_bind_0 = owl_to_cycl.$owl_spec_properties$.currentBinding(thread);
            try {
                owl_to_cycl.$owl_spec_properties$.bind(new_dictionary(symbol_function(EQUAL), UNPROVIDED), thread);
                final SubLObject total = length(pred_info_list);
                final SubLObject percent_per = divide(ONE_INTEGER, total);
                SubLObject percent_done = ZERO_INTEGER;
                final SubLObject message = format(NIL, owl_to_cycl.$str297$Processing__D_property_definition, total);
                final SubLObject _prev_bind_0_$66 = $progress_note$.currentBinding(thread);
                final SubLObject _prev_bind_2 = $progress_start_time$.currentBinding(thread);
                final SubLObject _prev_bind_3 = $progress_total$.currentBinding(thread);
                final SubLObject _prev_bind_4 = $progress_sofar$.currentBinding(thread);
                final SubLObject _prev_bind_5 = $last_percent_progress_index$.currentBinding(thread);
                final SubLObject _prev_bind_6 = $last_percent_progress_prediction$.currentBinding(thread);
                final SubLObject _prev_bind_7 = $within_noting_percent_progress$.currentBinding(thread);
                final SubLObject _prev_bind_8 = $percent_progress_start_time$.currentBinding(thread);
                try {
                    $progress_note$.bind(NIL != message ? message : owl_to_cycl.$$$cdolist, thread);
                    $progress_start_time$.bind(get_universal_time(), thread);
                    $progress_total$.bind(length(pred_info_list), thread);
                    $progress_sofar$.bind(ZERO_INTEGER, thread);
                    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
                    $last_percent_progress_prediction$.bind(NIL, thread);
                    $within_noting_percent_progress$.bind(T, thread);
                    $percent_progress_start_time$.bind(get_universal_time(), thread);
                    try {
                        noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
                        SubLObject csome_list_var = pred_info_list;
                        SubLObject pred_info = NIL;
                        pred_info = csome_list_var.first();
                        while (NIL != csome_list_var) {
                            thread.resetMultipleValues();
                            final SubLObject pred = owl_to_cycl.owl_define_one_pred(pred_info, import_parameters);
                            final SubLObject unconstrainedP = thread.secondMultipleValue();
                            thread.resetMultipleValues();
                            owl_utilities.note_term_acted_on_during_import(pred, owl_to_cycl.owl_import_parameters_import_term(import_parameters), owl_to_cycl.owl_import_parameters_cyclist(import_parameters));
                            if (NIL != unconstrainedP) {
                                unconstrained_preds = cons(pred, unconstrained_preds);
                            }
                            percent_done = add(percent_done, percent_per);
                            owl_to_cycl.note_owl_import_section_progress(percent_done);
                            $progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
                            note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
                            csome_list_var = csome_list_var.rest();
                            pred_info = csome_list_var.first();
                        } 
                    } finally {
                        final SubLObject _prev_bind_0_$67 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            final SubLObject _values = getValuesAsVector();
                            noting_percent_progress_postamble();
                            restoreValuesFromVector(_values);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$67, thread);
                        }
                    }
                } finally {
                    $percent_progress_start_time$.rebind(_prev_bind_8, thread);
                    $within_noting_percent_progress$.rebind(_prev_bind_7, thread);
                    $last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
                    $last_percent_progress_index$.rebind(_prev_bind_5, thread);
                    $progress_sofar$.rebind(_prev_bind_4, thread);
                    $progress_total$.rebind(_prev_bind_3, thread);
                    $progress_start_time$.rebind(_prev_bind_2, thread);
                    $progress_note$.rebind(_prev_bind_0_$66, thread);
                }
            } finally {
                owl_to_cycl.$owl_spec_properties$.rebind(_prev_bind_0, thread);
            }
        }
        owl_to_cycl.note_owl_import_section_done();
        return unconstrained_preds;
    }

    /**
     * Finds the domains mentioned within <rdfs:domain> and </rdfs:domain>.
     *
     * @param TOKENS
     * 		listp; a list of strings that are XML tokens
     * @unknown DOMAINS listp; a list of strings that are domain names
     */
    @LispMethod(comment = "Finds the domains mentioned within <rdfs:domain> and </rdfs:domain>.\r\n\r\n@param TOKENS\r\n\t\tlistp; a list of strings that are XML tokens\r\n@unknown DOMAINS listp; a list of strings that are domain names")
    public static final SubLObject process_domain_list_alt(SubLObject original_tokens, SubLObject import_parameters) {
        {
            SubLObject domains = NIL;
            SubLObject tokens = original_tokens;
            while (NIL != tokens) {
                {
                    SubLObject token = tokens.first();
                    if (NIL != string_utilities.whitespace_stringP(token)) {
                        tokens = web_utilities.advance_xml_tokens(tokens, UNPROVIDED);
                    } else {
                        if ((NIL != web_utilities.xml_token_element_nameP(token, rdf_utilities.rdfs_name($$$domain))) && (NIL != web_utilities.xml_closing_tag_p(token))) {
                            return domains;
                        } else {
                            if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_class_token_p(token)) {
                                {
                                    SubLObject this_class = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_class(tokens, import_parameters);
                                    domains = cons(this_class, domains);
                                }
                                tokens = web_utilities.advance_xml_tokens_to_end_of_element(tokens);
                            } else {
                                tokens = web_utilities.advance_xml_tokens(tokens, UNPROVIDED);
                            }
                        }
                    }
                }
            } 
            return domains;
        }
    }

    /**
     * Finds the domains mentioned within <rdfs:domain> and </rdfs:domain>.
     *
     * @param TOKENS
     * 		listp; a list of strings that are XML tokens
     * @unknown DOMAINS listp; a list of strings that are domain names
     */
    @LispMethod(comment = "Finds the domains mentioned within <rdfs:domain> and </rdfs:domain>.\r\n\r\n@param TOKENS\r\n\t\tlistp; a list of strings that are XML tokens\r\n@unknown DOMAINS listp; a list of strings that are domain names")
    public static SubLObject process_domain_list(final SubLObject original_tokens, final SubLObject import_parameters) {
        SubLObject domains = NIL;
        SubLObject tokens = original_tokens;
        while (NIL != tokens) {
            final SubLObject token = tokens.first();
            if (NIL != whitespace_stringP(token)) {
                tokens = xml_parsing_utilities.advance_xml_tokens(tokens, UNPROVIDED);
            } else {
                if ((NIL != xml_parsing_utilities.xml_token_element_nameP(token, rdfs_name(owl_to_cycl.$$$domain))) && (NIL != xml_parsing_utilities.xml_closing_tag_p(token))) {
                    return domains;
                }
                if (NIL != owl_to_cycl.owl_class_token_p(token)) {
                    final SubLObject this_class = owl_to_cycl.read_owl_class(tokens, import_parameters);
                    domains = cons(this_class, domains);
                    tokens = xml_parsing_utilities.advance_xml_tokens_to_end_of_element(tokens);
                } else {
                    tokens = xml_parsing_utilities.advance_xml_tokens(tokens, UNPROVIDED);
                }
            }
        } 
        return domains;
    }

    /**
     * Finds the range mentioned within <rdfs:range> and </rdfs:range>.
     *
     * @param TOKENS
     * 		listp; a list of strings that are XML tokens
     * @unknown RANGE owl-external-value-specification-p;
     * @unknown TOKENS-TO-ADVANCE positive-integer-p;
     */
    @LispMethod(comment = "Finds the range mentioned within <rdfs:range> and </rdfs:range>.\r\n\r\n@param TOKENS\r\n\t\tlistp; a list of strings that are XML tokens\r\n@unknown RANGE owl-external-value-specification-p;\r\n@unknown TOKENS-TO-ADVANCE positive-integer-p;")
    public static final SubLObject process_range_list_alt(SubLObject original_tokens, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject tokens = original_tokens;
                SubLObject range = NIL;
                SubLObject tokens_to_advance = com.cyc.cycjava.cycl.owl.owl_to_cycl.next_noninitial_non_whitespace_xml_token_position(tokens);
                SubLObject start_of_specification = web_utilities.advance_xml_tokens(tokens, tokens_to_advance);
                if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_class_token_p(start_of_specification.first())) {
                    range = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_class(start_of_specification, import_parameters);
                } else {
                    if (((NIL != web_utilities.xml_token_element_nameP(start_of_specification.first(), owl_utilities.owl_name($$$DataRange))) && (NIL != web_utilities.xml_opening_tag_p(start_of_specification.first()))) && (NIL != web_utilities.xml_token_element_nameP(second(start_of_specification), owl_utilities.owl_name($$$oneOf)))) {
                        range = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_enumeration(start_of_specification.rest(), import_parameters);
                    } else {
                        Errors.warn($str_alt284$Can_t_read_range_starting_with__S, list_utilities.first_n(TEN_INTEGER, start_of_specification));
                    }
                }
                {
                    SubLObject end_of_specification = web_utilities.advance_xml_tokens_to_end_of_element(start_of_specification);
                    SubLObject end_of_range = web_utilities.advance_xml_tokens_to(end_of_specification, $str_alt285$__rdfs_range_, UNPROVIDED);
                    SubLObject next_start_position = com.cyc.cycjava.cycl.owl.owl_to_cycl.next_noninitial_non_whitespace_xml_token_position(end_of_range);
                    SubLObject next_start_token = nth(next_start_position, end_of_range);
                    tokens_to_advance = position(next_start_token, original_tokens, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                }
                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt286$Finished_range__S_, $str_alt223$__ }), range);
                    force_output(UNPROVIDED);
                }
                return values(range, tokens_to_advance);
            }
        }
    }

    /**
     * Finds the range mentioned within <rdfs:range> and </rdfs:range>.
     *
     * @param TOKENS
     * 		listp; a list of strings that are XML tokens
     * @unknown RANGE owl-external-value-specification-p;
     * @unknown TOKENS-TO-ADVANCE positive-integer-p;
     */
    @LispMethod(comment = "Finds the range mentioned within <rdfs:range> and </rdfs:range>.\r\n\r\n@param TOKENS\r\n\t\tlistp; a list of strings that are XML tokens\r\n@unknown RANGE owl-external-value-specification-p;\r\n@unknown TOKENS-TO-ADVANCE positive-integer-p;")
    public static SubLObject process_range_list(final SubLObject original_tokens, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject range = NIL;
        SubLObject tokens_to_advance = owl_to_cycl.next_noninitial_non_whitespace_xml_token_position(original_tokens);
        final SubLObject start_of_specification = xml_parsing_utilities.advance_xml_tokens(original_tokens, tokens_to_advance);
        if (NIL != owl_to_cycl.owl_class_token_p(start_of_specification.first())) {
            range = owl_to_cycl.read_owl_class(start_of_specification, import_parameters);
        } else
            if (((NIL != xml_parsing_utilities.xml_token_element_nameP(start_of_specification.first(), owl_utilities.owl_name(owl_to_cycl.$$$DataRange))) && (NIL != xml_parsing_utilities.xml_opening_tag_p(start_of_specification.first()))) && (NIL != xml_parsing_utilities.xml_token_element_nameP(second(start_of_specification), owl_utilities.owl_name(owl_to_cycl.$$$oneOf)))) {
                range = owl_to_cycl.read_owl_enumeration(start_of_specification.rest(), import_parameters);
            } else {
                Errors.warn(owl_to_cycl.$str301$Can_t_read_range_starting_with__S, first_n(TEN_INTEGER, start_of_specification));
            }

        final SubLObject end_of_specification = xml_parsing_utilities.advance_xml_tokens_to_end_of_element(start_of_specification);
        final SubLObject end_of_range = xml_parsing_utilities.advance_xml_tokens_to(end_of_specification, owl_to_cycl.$str302$__rdfs_range_, UNPROVIDED);
        final SubLObject next_start_position = owl_to_cycl.next_noninitial_non_whitespace_xml_token_position(end_of_range);
        final SubLObject next_start_token = nth(next_start_position, end_of_range);
        tokens_to_advance = position(next_start_token, original_tokens, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str303$Finished_range__S_, owl_to_cycl.$str239$__ }), range);
            force_output(UNPROVIDED);
        }
        return values(range, tokens_to_advance);
    }

    public static final SubLObject clear_owl_class_element_names_alt() {
        {
            SubLObject cs = $owl_class_element_names_caching_state$.getGlobalValue();
            if (NIL != cs) {
                memoization_state.caching_state_clear(cs);
            }
        }
        return NIL;
    }

    public static SubLObject clear_owl_class_element_names() {
        final SubLObject cs = owl_to_cycl.$owl_class_element_names_caching_state$.getGlobalValue();
        if (NIL != cs) {
            caching_state_clear(cs);
        }
        return NIL;
    }

    public static final SubLObject remove_owl_class_element_names_alt() {
        return memoization_state.caching_state_remove_function_results_with_args($owl_class_element_names_caching_state$.getGlobalValue(), list(EMPTY_SUBL_OBJECT_ARRAY), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_owl_class_element_names() {
        return caching_state_remove_function_results_with_args(owl_to_cycl.$owl_class_element_names_caching_state$.getGlobalValue(), list(EMPTY_SUBL_OBJECT_ARRAY), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject owl_class_element_names_internal_alt() {
        return list(owl_utilities.owl_name($$$Class), owl_utilities.owl_name($$$DeprecatedClass), rdf_utilities.rdfs_name($$$Class));
    }

    public static SubLObject owl_class_element_names_internal() {
        return list(owl_utilities.owl_name(owl_to_cycl.$$$Class), owl_utilities.owl_name(owl_to_cycl.$$$DeprecatedClass), rdfs_name(owl_to_cycl.$$$Class));
    }

    public static final SubLObject owl_class_element_names_alt() {
        {
            SubLObject caching_state = $owl_class_element_names_caching_state$.getGlobalValue();
            if (NIL == caching_state) {
                caching_state = memoization_state.create_global_caching_state_for_name(OWL_CLASS_ELEMENT_NAMES, $owl_class_element_names_caching_state$, NIL, EQL, ZERO_INTEGER, ZERO_INTEGER);
            }
            {
                SubLObject results = memoization_state.caching_state_get_zero_arg_results(caching_state, UNPROVIDED);
                if (results == $kw15$_MEMOIZED_ITEM_NOT_FOUND_) {
                    results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_class_element_names_internal()));
                    memoization_state.caching_state_set_zero_arg_results(caching_state, results, UNPROVIDED);
                }
                return memoization_state.caching_results(results);
            }
        }
    }

    public static SubLObject owl_class_element_names() {
        SubLObject caching_state = owl_to_cycl.$owl_class_element_names_caching_state$.getGlobalValue();
        if (NIL == caching_state) {
            caching_state = create_global_caching_state_for_name(owl_to_cycl.OWL_CLASS_ELEMENT_NAMES, owl_to_cycl.$owl_class_element_names_caching_state$, NIL, EQL, ZERO_INTEGER, ZERO_INTEGER);
        }
        SubLObject results = caching_state_get_zero_arg_results(caching_state, UNPROVIDED);
        if (results.eql($memoized_item_not_found$.getGlobalValue())) {
            results = arg2(resetMultipleValues(), multiple_value_list(owl_to_cycl.owl_class_element_names_internal()));
            caching_state_set_zero_arg_results(caching_state, results, UNPROVIDED);
        }
        return caching_results(results);
    }

    public static final SubLObject owl_class_token_p_alt(SubLObject token) {
        return subl_promotions.memberP(web_utilities.xml_token_element_name(token), com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_class_element_names(), symbol_function(EQUAL), UNPROVIDED);
    }

    public static SubLObject owl_class_token_p(final SubLObject token) {
        return memberP(xml_parsing_utilities.xml_token_element_name(token), owl_to_cycl.owl_class_element_names(), symbol_function(EQUAL), UNPROVIDED);
    }

    /**
     * Finds the class defined by an <owl:Class> element.
     *
     * @param TOKENS
     * 		listp; a list of strings that are XML tokens
     * @return CLASS owl-external-value-specification-p;
     */
    @LispMethod(comment = "Finds the class defined by an <owl:Class> element.\r\n\r\n@param TOKENS\r\n\t\tlistp; a list of strings that are XML tokens\r\n@return CLASS owl-external-value-specification-p;")
    public static final SubLObject read_owl_class_alt(SubLObject original_tokens, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(original_tokens.first(), OWL_CLASS_TOKEN_P);
            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt292$Reading_OWL_class_starting_with__, $str_alt223$__ }), list_utilities.first_n(FOUR_INTEGER, original_tokens));
                force_output(UNPROVIDED);
            }
            {
                SubLObject node_id = web_utilities.xml_tag_attribute_value(original_tokens.first(), rdf_utilities.rdf_name($$$nodeID), UNPROVIDED);
                SubLObject v_class = NIL;
                if ((NIL != member($owl_definition_type$.getDynamicValue(thread), $list_alt294, symbol_function(EQL), UNPROVIDED)) && com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_term_reference(original_tokens.first(), import_parameters).isString()) {
                    {
                        SubLObject term_info = nth_value_step_2(nth_value_step_1(ONE_INTEGER), com.cyc.cycjava.cycl.owl.owl_to_cycl.read_one_class_info_from_owl_tokens(original_tokens, import_parameters));
                        SubLTrampolineFile.checkType(term_info, OWL_TERM_INFO_P);
                        v_class = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_lookup(term_info, $EXTERNAL_NAME, UNPROVIDED);
                    }
                } else {
                    {
                        SubLObject tokens = original_tokens;
                        SubLObject previous_first_token = NIL;
                        SubLObject components = NIL;
                        SubLObject reading_unionP = NIL;
                        SubLObject doneP = NIL;
                        while ((NIL != tokens) && (NIL == doneP)) {
                            {
                                SubLObject token = tokens.first();
                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt296$Starting_token___S, $str_alt223$__ }), token);
                                    force_output(UNPROVIDED);
                                }
                                if (token == previous_first_token) {
                                    Errors.sublisp_break($str_alt297$No_progress_reading_OWL_class__St, new SubLObject[]{ token });
                                } else {
                                    if (((NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_class_token_p(token)) || (NIL != web_utilities.xml_token_element_nameP(token, rdf_utilities.rdf_name($$$Description)))) && (NIL != web_utilities.xml_empty_tagP(token))) {
                                        components = cons(com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_term_reference(token, import_parameters), components);
                                        if (NIL != reading_unionP) {
                                            tokens = web_utilities.advance_xml_tokens(tokens, UNPROVIDED);
                                        } else {
                                            doneP = T;
                                        }
                                    } else {
                                        if ((NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_class_token_p(token)) && (NIL != web_utilities.xml_closing_tag_p(token))) {
                                            if (NIL == reading_unionP) {
                                                doneP = T;
                                            }
                                        } else {
                                            if ((NIL != web_utilities.xml_opening_tag_p(token)) && (NIL != web_utilities.xml_token_element_nameP(token, owl_utilities.owl_name($$$Restriction)))) {
                                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt300$Reading_restriction_starting_with, $str_alt223$__ }), token);
                                                    force_output(UNPROVIDED);
                                                }
                                                {
                                                    SubLObject restriction = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_class_or_restriction(tokens, import_parameters);
                                                    components = cons(restriction, components);
                                                }
                                                if (NIL != reading_unionP) {
                                                    tokens = web_utilities.advance_xml_tokens_to_end_of_element(tokens);
                                                } else {
                                                    doneP = T;
                                                }
                                            } else {
                                                if ((NIL != web_utilities.xml_opening_tag_p(token)) && (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_class_token_p(token))) {
                                                    thread.resetMultipleValues();
                                                    {
                                                        SubLObject new_tokens = com.cyc.cycjava.cycl.owl.owl_to_cycl.handle_open_class_tag(tokens, import_parameters, reading_unionP);
                                                        SubLObject new_components = thread.secondMultipleValue();
                                                        SubLObject done_nowP = thread.thirdMultipleValue();
                                                        SubLObject reading_union_nowP = thread.fourthMultipleValue();
                                                        thread.resetMultipleValues();
                                                        tokens = new_tokens;
                                                        components = append(components, new_components);
                                                        doneP = done_nowP;
                                                        reading_unionP = reading_union_nowP;
                                                    }
                                                } else {
                                                    if (NIL != web_utilities.xml_closing_tokenP(owl_utilities.owl_name($$$unionOf), token)) {
                                                        tokens = web_utilities.advance_xml_tokens(tokens, UNPROVIDED);
                                                        reading_unionP = NIL;
                                                    } else {
                                                        Errors.sublisp_break($str_alt302$Don_t_know_what_to_do_with_this_t, new SubLObject[]{ token });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                previous_first_token = token;
                            }
                        } 
                        v_class = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_value_specification_union(components);
                    }
                }
                if (NIL != node_id) {
                    com.cyc.cycjava.cycl.owl.owl_to_cycl.note_node_id_reference(node_id, v_class);
                }
                return v_class;
            }
        }
    }

    /**
     * Finds the class defined by an <owl:Class> element.
     *
     * @param TOKENS
     * 		listp; a list of strings that are XML tokens
     * @return CLASS owl-external-value-specification-p;
     */
    @LispMethod(comment = "Finds the class defined by an <owl:Class> element.\r\n\r\n@param TOKENS\r\n\t\tlistp; a list of strings that are XML tokens\r\n@return CLASS owl-external-value-specification-p;")
    public static SubLObject read_owl_class(final SubLObject original_tokens, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != owl_to_cycl.owl_class_token_p(original_tokens.first()) : "! owl_to_cycl.owl_class_token_p(original_tokens.first()) " + ("owl_to_cycl.owl_class_token_p(original_tokens.first()) " + "CommonSymbols.NIL != owl_to_cycl.owl_class_token_p(original_tokens.first()) ") + original_tokens.first();
        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str309$Reading_OWL_class_starting_with__, owl_to_cycl.$str239$__ }), first_n(FOUR_INTEGER, original_tokens));
            force_output(UNPROVIDED);
        }
        final SubLObject node_id = xml_parsing_utilities.xml_tag_attribute_value(original_tokens.first(), rdf_name(owl_to_cycl.$$$nodeID), UNPROVIDED);
        SubLObject v_class = NIL;
        if ((NIL != member(owl_to_cycl.$owl_definition_type$.getDynamicValue(thread), owl_to_cycl.$list311, symbol_function(EQL), UNPROVIDED)) && owl_to_cycl.read_owl_term_reference(original_tokens.first(), import_parameters).isString()) {
            final SubLObject term_info = nth_value_step_2(nth_value_step_1(ONE_INTEGER), owl_to_cycl.read_one_class_info_from_owl_tokens(original_tokens, import_parameters));
            assert NIL != owl_to_cycl.owl_term_info_p(term_info) : "! owl_to_cycl.owl_term_info_p(term_info) " + ("owl_to_cycl.owl_term_info_p(term_info) " + "CommonSymbols.NIL != owl_to_cycl.owl_term_info_p(term_info) ") + term_info;
            v_class = owl_to_cycl.owl_term_info_plist_lookup(term_info, $EXTERNAL_NAME, UNPROVIDED);
        } else {
            SubLObject tokens = original_tokens;
            SubLObject previous_first_token = NIL;
            SubLObject components = NIL;
            SubLObject reading_unionP = NIL;
            SubLObject doneP = NIL;
            while ((NIL != tokens) && (NIL == doneP)) {
                final SubLObject token = tokens.first();
                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str313$Starting_token___S, owl_to_cycl.$str239$__ }), token);
                    force_output(UNPROVIDED);
                }
                if (token.eql(previous_first_token)) {
                    Errors.sublisp_break(owl_to_cycl.$str314$No_progress_reading_OWL_class__St, new SubLObject[]{ token });
                } else
                    if (((NIL != owl_to_cycl.owl_class_token_p(token)) || (NIL != xml_parsing_utilities.xml_token_element_nameP(token, rdf_name(owl_to_cycl.$$$Description)))) && (NIL != xml_parsing_utilities.xml_empty_tagP(token))) {
                        components = cons(owl_to_cycl.read_owl_term_reference(token, import_parameters), components);
                        if (NIL != reading_unionP) {
                            tokens = xml_parsing_utilities.advance_xml_tokens(tokens, UNPROVIDED);
                        } else {
                            doneP = T;
                        }
                    } else
                        if ((NIL != owl_to_cycl.owl_class_token_p(token)) && (NIL != xml_parsing_utilities.xml_closing_tag_p(token))) {
                            if (NIL == reading_unionP) {
                                doneP = T;
                            }
                        } else
                            if ((NIL != xml_parsing_utilities.xml_opening_tag_p(token)) && (NIL != xml_parsing_utilities.xml_token_element_nameP(token, owl_utilities.owl_name(owl_to_cycl.$$$Restriction)))) {
                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str317$Reading_restriction_starting_with, owl_to_cycl.$str239$__ }), token);
                                    force_output(UNPROVIDED);
                                }
                                final SubLObject restriction = owl_to_cycl.read_owl_class_or_restriction(tokens, import_parameters);
                                components = cons(restriction, components);
                                if (NIL != reading_unionP) {
                                    tokens = xml_parsing_utilities.advance_xml_tokens_to_end_of_element(tokens);
                                } else {
                                    doneP = T;
                                }
                            } else
                                if ((NIL != xml_parsing_utilities.xml_opening_tag_p(token)) && (NIL != owl_to_cycl.owl_class_token_p(token))) {
                                    thread.resetMultipleValues();
                                    final SubLObject new_tokens = owl_to_cycl.handle_open_class_tag(tokens, import_parameters, reading_unionP);
                                    final SubLObject new_components = thread.secondMultipleValue();
                                    final SubLObject done_nowP = thread.thirdMultipleValue();
                                    final SubLObject reading_union_nowP = thread.fourthMultipleValue();
                                    thread.resetMultipleValues();
                                    tokens = new_tokens;
                                    components = append(components, new_components);
                                    doneP = done_nowP;
                                    reading_unionP = reading_union_nowP;
                                } else
                                    if (NIL != xml_parsing_utilities.xml_closing_tokenP(owl_utilities.owl_name(owl_to_cycl.$$$unionOf), token)) {
                                        tokens = xml_parsing_utilities.advance_xml_tokens(tokens, UNPROVIDED);
                                        reading_unionP = NIL;
                                    } else {
                                        Errors.sublisp_break(owl_to_cycl.$str319$Don_t_know_what_to_do_with_this_t, new SubLObject[]{ token });
                                    }





                previous_first_token = token;
            } 
            v_class = owl_to_cycl.owl_external_value_specification_union(components);
        }
        if (NIL != node_id) {
            owl_to_cycl.note_node_id_reference(node_id, v_class);
        }
        return v_class;
    }

    public static final SubLObject handle_open_class_tag_alt(SubLObject tokens, SubLObject import_parameters, SubLObject reading_unionP) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject next_token_position = com.cyc.cycjava.cycl.owl.owl_to_cycl.next_noninitial_non_whitespace_xml_token_position(tokens);
                SubLObject next_token = nth(next_token_position, tokens);
                SubLObject components = NIL;
                SubLObject new_tokens = NIL;
                SubLObject doneP = NIL;
                if (((NIL != web_utilities.xml_token_element_nameP(next_token, owl_utilities.owl_name($$$unionOf))) && (NIL != web_utilities.xml_empty_tagP(next_token))) && (NIL != web_utilities.xml_tag_attribute_value(next_token, rdf_utilities.rdf_name($$$nodeID), UNPROVIDED))) {
                    {
                        SubLObject node_id = web_utilities.xml_tag_attribute_value(next_token, rdf_utilities.rdf_name($$$nodeID), UNPROVIDED);
                        components = list($NODE_ID, node_id);
                        new_tokens = web_utilities.advance_xml_tokens(tokens, number_utilities.f_1X(next_token_position));
                        reading_unionP = NIL;
                        doneP = T;
                    }
                } else {
                    if ((NIL != web_utilities.xml_token_element_nameP(next_token, owl_utilities.owl_name($$$unionOf))) && (NIL == web_utilities.xml_empty_tagP(next_token))) {
                        new_tokens = web_utilities.advance_xml_tokens(tokens, number_utilities.f_1X(next_token_position));
                        reading_unionP = T;
                    } else {
                        if (NIL != web_utilities.xml_token_element_nameP(next_token, owl_utilities.owl_name($$$oneOf))) {
                            {
                                SubLObject enumeration = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_enumeration(web_utilities.advance_xml_tokens(tokens, next_token_position), import_parameters);
                                components = cons(enumeration, components);
                                if (NIL != reading_unionP) {
                                    new_tokens = web_utilities.advance_xml_tokens_to_end_of_element(tokens);
                                } else {
                                    doneP = T;
                                }
                            }
                        } else {
                            {
                                SubLObject v_class = nth_value_step_2(nth_value_step_1(ONE_INTEGER), com.cyc.cycjava.cycl.owl.owl_to_cycl.read_one_class_info_from_owl_tokens(tokens, import_parameters));
                                if (NIL != v_class) {
                                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                        format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt304$Found_class___S___Components___S, $str_alt223$__ }), v_class, components);
                                        force_output(UNPROVIDED);
                                    }
                                }
                                {
                                    SubLObject external_name = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_lookup(v_class, $EXTERNAL_NAME, UNPROVIDED);
                                    if (external_name.isString() || (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.nonlocal_owl_term_reference_p(external_name))) {
                                        components = cons(external_name, components);
                                    } else {
                                        if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_lookup(v_class, $COMPLEMENT_CLASS, UNPROVIDED)) {
                                            components = cons(list($COMPLEMENT_OF, com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_lookup(v_class, $COMPLEMENT_CLASS, UNPROVIDED)), components);
                                        } else {
                                            if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_lookup(v_class, $INTERSECTION_OF, UNPROVIDED)) {
                                                components = cons(cons($INTERSECTION_OF, com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_lookup(v_class, $INTERSECTION_OF, UNPROVIDED)), components);
                                            } else {
                                                Errors.sublisp_break($str_alt308$Don_t_know_what_this_class_is_nam, new SubLObject[]{ v_class });
                                            }
                                        }
                                    }
                                    new_tokens = web_utilities.advance_xml_tokens_to_end_of_element(tokens);
                                    if (NIL == reading_unionP) {
                                        doneP = T;
                                    }
                                }
                            }
                        }
                    }
                }
                return values(new_tokens, components, doneP, reading_unionP);
            }
        }
    }

    public static SubLObject handle_open_class_tag(final SubLObject tokens, final SubLObject import_parameters, SubLObject reading_unionP) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject next_token_position = owl_to_cycl.next_noninitial_non_whitespace_xml_token_position(tokens);
        final SubLObject next_token = nth(next_token_position, tokens);
        SubLObject components = NIL;
        SubLObject new_tokens = NIL;
        SubLObject doneP = NIL;
        if (((NIL != xml_parsing_utilities.xml_token_element_nameP(next_token, owl_utilities.owl_name(owl_to_cycl.$$$unionOf))) && (NIL != xml_parsing_utilities.xml_empty_tagP(next_token))) && (NIL != xml_parsing_utilities.xml_tag_attribute_value(next_token, rdf_name(owl_to_cycl.$$$nodeID), UNPROVIDED))) {
            final SubLObject node_id = xml_parsing_utilities.xml_tag_attribute_value(next_token, rdf_name(owl_to_cycl.$$$nodeID), UNPROVIDED);
            components = list($NODE_ID, node_id);
            new_tokens = xml_parsing_utilities.advance_xml_tokens(tokens, f_1X(next_token_position));
            reading_unionP = NIL;
            doneP = T;
        } else
            if ((NIL != xml_parsing_utilities.xml_token_element_nameP(next_token, owl_utilities.owl_name(owl_to_cycl.$$$unionOf))) && (NIL == xml_parsing_utilities.xml_empty_tagP(next_token))) {
                new_tokens = xml_parsing_utilities.advance_xml_tokens(tokens, f_1X(next_token_position));
                reading_unionP = T;
            } else
                if (NIL != xml_parsing_utilities.xml_token_element_nameP(next_token, owl_utilities.owl_name(owl_to_cycl.$$$oneOf))) {
                    final SubLObject enumeration = owl_to_cycl.read_owl_enumeration(xml_parsing_utilities.advance_xml_tokens(tokens, next_token_position), import_parameters);
                    components = cons(enumeration, components);
                    if (NIL != reading_unionP) {
                        new_tokens = xml_parsing_utilities.advance_xml_tokens_to_end_of_element(tokens);
                    } else {
                        doneP = T;
                    }
                } else {
                    final SubLObject v_class = nth_value_step_2(nth_value_step_1(ONE_INTEGER), owl_to_cycl.read_one_class_info_from_owl_tokens(tokens, import_parameters));
                    if ((NIL != v_class) && (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread))) {
                        format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str321$Found_class___S___Components___S, owl_to_cycl.$str239$__ }), v_class, components);
                        force_output(UNPROVIDED);
                    }
                    final SubLObject external_name = owl_to_cycl.owl_term_info_plist_lookup(v_class, $EXTERNAL_NAME, UNPROVIDED);
                    if (external_name.isString() || (NIL != owl_to_cycl.nonlocal_owl_term_reference_p(external_name))) {
                        components = cons(external_name, components);
                    } else
                        if (NIL != owl_to_cycl.owl_term_info_plist_lookup(v_class, $COMPLEMENT_CLASS, UNPROVIDED)) {
                            components = cons(list($COMPLEMENT_OF, owl_to_cycl.owl_term_info_plist_lookup(v_class, $COMPLEMENT_CLASS, UNPROVIDED)), components);
                        } else
                            if (NIL != owl_to_cycl.owl_term_info_plist_lookup(v_class, $INTERSECTION_OF, UNPROVIDED)) {
                                components = cons(cons($INTERSECTION_OF, owl_to_cycl.owl_term_info_plist_lookup(v_class, $INTERSECTION_OF, UNPROVIDED)), components);
                            } else {
                                Errors.sublisp_break(owl_to_cycl.$str325$Don_t_know_what_this_class_is_nam, new SubLObject[]{ v_class });
                            }


                    new_tokens = xml_parsing_utilities.advance_xml_tokens_to_end_of_element(tokens);
                    if (NIL == reading_unionP) {
                        doneP = T;
                    }
                }


        return values(new_tokens, components, doneP, reading_unionP);
    }

    public static final SubLObject read_owl_enumeration_alt(SubLObject tokens, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject one_of_token = tokens.first();
                if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                    if (NIL == web_utilities.xml_token_element_nameP(one_of_token, owl_utilities.owl_name($$$oneOf))) {
                        Errors.error($str_alt309$Can_t_read_an_enumeration_that_is, list_utilities.first_n(TEN_INTEGER, tokens));
                    }
                }
                {
                    SubLObject one_of_list = web_utilities.advance_xml_tokens(tokens, position(one_of_token, tokens, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
                    SubLObject next_position = com.cyc.cycjava.cycl.owl.owl_to_cycl.next_noninitial_non_whitespace_xml_token_position(one_of_list);
                    SubLObject start_of_list = web_utilities.advance_xml_tokens(one_of_list, next_position);
                    SubLObject items = NIL;
                    if (NIL != member(web_utilities.xml_token_element_name(start_of_list.first()), list(rdf_utilities.rdf_name($$$rest), rdf_utilities.rdf_name($$$first)), symbol_function(EQUAL), UNPROVIDED)) {
                        items = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_list(start_of_list, import_parameters);
                    } else {
                        {
                            SubLObject remaining_tokens = start_of_list;
                            SubLObject current_token = remaining_tokens.first();
                            while (NIL == web_utilities.xml_closing_tokenP(owl_utilities.owl_name($$$oneOf), current_token)) {
                                {
                                    SubLObject name = NIL;
                                    if (NIL != web_utilities.xml_opening_tag_p(current_token)) {
                                        {
                                            SubLObject term_info = nth_value_step_2(nth_value_step_1(ONE_INTEGER), com.cyc.cycjava.cycl.owl.owl_to_cycl.read_one_instance_info_from_owl_tokens(remaining_tokens, import_parameters));
                                            SubLTrampolineFile.checkType(term_info, OWL_TERM_INFO_P);
                                            name = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_lookup(term_info, $EXTERNAL_NAME, UNPROVIDED);
                                        }
                                    } else {
                                        name = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_name_from_token(current_token, import_parameters);
                                    }
                                    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                                        if (!(name.isString() || (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.nonlocal_owl_term_reference_p(name)))) {
                                            Errors.error($str_alt312$Couldn_t_get_name_from__S, current_token);
                                        }
                                    }
                                    items = cons(name, items);
                                }
                                remaining_tokens = web_utilities.advance_xml_tokens_to_end_of_element(remaining_tokens);
                                current_token = remaining_tokens.first();
                            } 
                        }
                        items = nreverse(items);
                    }
                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                        format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt313$Read_enumeration___S, $str_alt223$__ }), items);
                        force_output(UNPROVIDED);
                    }
                    return cons($ONE_OF, items);
                }
            }
        }
    }

    public static SubLObject read_owl_enumeration(final SubLObject tokens, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject one_of_token = tokens.first();
        if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == xml_parsing_utilities.xml_token_element_nameP(one_of_token, owl_utilities.owl_name(owl_to_cycl.$$$oneOf)))) {
            Errors.error(owl_to_cycl.$str326$Can_t_read_an_enumeration_that_is, first_n(TEN_INTEGER, tokens));
        }
        final SubLObject one_of_list = xml_parsing_utilities.advance_xml_tokens(tokens, position(one_of_token, tokens, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
        final SubLObject next_position = owl_to_cycl.next_noninitial_non_whitespace_xml_token_position(one_of_list);
        final SubLObject start_of_list = xml_parsing_utilities.advance_xml_tokens(one_of_list, next_position);
        SubLObject items = NIL;
        if (NIL != member(xml_parsing_utilities.xml_token_element_name(start_of_list.first()), list(rdf_name(owl_to_cycl.$$$rest), rdf_name(owl_to_cycl.$$$first)), symbol_function(EQUAL), UNPROVIDED)) {
            items = owl_to_cycl.read_owl_list(start_of_list, import_parameters);
        } else {
            for (SubLObject remaining_tokens = start_of_list, current_token = remaining_tokens.first(); NIL == xml_parsing_utilities.xml_closing_tokenP(owl_utilities.owl_name(owl_to_cycl.$$$oneOf), current_token); current_token = remaining_tokens.first()) {
                SubLObject name = NIL;
                if (NIL != xml_parsing_utilities.xml_opening_tag_p(current_token)) {
                    final SubLObject term_info = nth_value_step_2(nth_value_step_1(ONE_INTEGER), owl_to_cycl.read_one_instance_info_from_owl_tokens(remaining_tokens, import_parameters));
                    assert NIL != owl_to_cycl.owl_term_info_p(term_info) : "! owl_to_cycl.owl_term_info_p(term_info) " + ("owl_to_cycl.owl_term_info_p(term_info) " + "CommonSymbols.NIL != owl_to_cycl.owl_term_info_p(term_info) ") + term_info;
                    name = owl_to_cycl.owl_term_info_plist_lookup(term_info, $EXTERNAL_NAME, UNPROVIDED);
                } else {
                    name = owl_to_cycl.owl_external_name_from_token(current_token, import_parameters);
                }
                if (((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (!name.isString())) && (NIL == owl_to_cycl.nonlocal_owl_term_reference_p(name))) {
                    Errors.error(owl_to_cycl.$str329$Couldn_t_get_name_from__S, current_token);
                }
                items = cons(name, items);
                remaining_tokens = xml_parsing_utilities.advance_xml_tokens_to_end_of_element(remaining_tokens);
            }
            items = nreverse(items);
        }
        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str330$Read_enumeration___S, owl_to_cycl.$str239$__ }), items);
            force_output(UNPROVIDED);
        }
        return cons($ONE_OF, items);
    }

    public static final SubLObject possible_read_owl_list_p_alt(SubLObject v_object) {
        {
            SubLObject ans = NIL;
            if (NIL != list_utilities.proper_list_p(v_object)) {
                {
                    SubLObject oops = NIL;
                    if (NIL == oops) {
                        {
                            SubLObject csome_list_var = v_object;
                            SubLObject item = NIL;
                            for (item = csome_list_var.first(); !((NIL != oops) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , item = csome_list_var.first()) {
                                if (!(item.isString() || (NIL != list_utilities.list_of_type_p(STRINGP, item)))) {
                                    oops = item;
                                }
                            }
                        }
                    }
                    ans = sublisp_null(oops);
                }
            }
            return ans;
        }
    }

    public static SubLObject possible_read_owl_list_p(final SubLObject v_object) {
        SubLObject ans = NIL;
        if (NIL != proper_list_p(v_object)) {
            SubLObject oops = NIL;
            if (NIL == oops) {
                SubLObject csome_list_var = v_object;
                SubLObject item = NIL;
                item = csome_list_var.first();
                while ((NIL == oops) && (NIL != csome_list_var)) {
                    if ((!item.isString()) && (NIL == list_of_type_p(STRINGP, item))) {
                        oops = item;
                    }
                    csome_list_var = csome_list_var.rest();
                    item = csome_list_var.first();
                } 
            }
            ans = sublisp_null(oops);
        }
        return ans;
    }

    /**
     * Read a series of rdf:first and rdf:rest tokens into a SubL list.
     *
     * @return LISTP where each item is either a single empty token or a list of tokens
    corresponding to a single XML element.
     */
    @LispMethod(comment = "Read a series of rdf:first and rdf:rest tokens into a SubL list.\r\n\r\n@return LISTP where each item is either a single empty token or a list of tokens\r\ncorresponding to a single XML element.")
    public static final SubLObject read_owl_list_alt(SubLObject tokens, SubLObject import_parameters) {
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_list_recursive(tokens, import_parameters);
    }

    /**
     * Read a series of rdf:first and rdf:rest tokens into a SubL list.
     *
     * @return LISTP where each item is either a single empty token or a list of tokens
    corresponding to a single XML element.
     */
    @LispMethod(comment = "Read a series of rdf:first and rdf:rest tokens into a SubL list.\r\n\r\n@return LISTP where each item is either a single empty token or a list of tokens\r\ncorresponding to a single XML element.")
    public static SubLObject read_owl_list(final SubLObject tokens, final SubLObject import_parameters) {
        return owl_to_cycl.read_owl_list_recursive(tokens, import_parameters);
    }

    /**
     *
     *
     * @return LISTP where each item is either a single empty token or a list of tokens
    corresponding to a single XML element.
     */
    @LispMethod(comment = "@return LISTP where each item is either a single empty token or a list of tokens\r\ncorresponding to a single XML element.")
    public static final SubLObject read_owl_list_recursive_alt(SubLObject original_tokens, SubLObject import_parameters) {
        {
            SubLObject tokens = original_tokens;
            SubLObject first = NIL;
            SubLObject first_doneP = NIL;
            SubLObject rest_doneP = NIL;
            SubLObject rest = NIL;
            while ((NIL != tokens) && (!((NIL != first_doneP) && (NIL != rest_doneP)))) {
                tokens = web_utilities.advance_xml_tokens(tokens, com.cyc.cycjava.cycl.owl.owl_to_cycl.first_non_whitespace_xml_token_position(tokens));
                if (NIL != tokens) {
                    {
                        SubLObject first_token = tokens.first();
                        if ((NIL != web_utilities.xml_token_element_nameP(first_token, rdf_utilities.rdf_name($$$rest))) && web_utilities.xml_tag_attribute_value(first_token, rdf_utilities.rdf_name($$$resource), UNPROVIDED).equal($str_alt315$http___www_w3_org_1999_02_22_rdf_)) {
                            rest_doneP = T;
                            tokens = web_utilities.advance_xml_tokens_to_end_of_element(tokens);
                        } else {
                            if (((NIL != web_utilities.xml_token_element_nameP(first_token, rdf_utilities.rdf_name($$$rest))) && web_utilities.xml_tag_attribute_value(first_token, rdf_utilities.rdf_name($$$parseType), UNPROVIDED).equal($$$Collection)) && (NIL == web_utilities.xml_empty_tagP(first_token))) {
                                {
                                    SubLObject remaining = tokens.rest();
                                    SubLObject next_token = remaining.first();
                                    SubLObject accumulated = NIL;
                                    while (NIL == web_utilities.xml_closing_tokenP(rdf_utilities.rdf_name($$$rest), next_token)) {
                                        {
                                            SubLObject item = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_one_owl_list_item(remaining, import_parameters);
                                            accumulated = cons(item, accumulated);
                                            remaining = web_utilities.advance_xml_tokens_to_end_of_element(remaining);
                                        }
                                        next_token = remaining.first();
                                    } 
                                    rest = nreverse(accumulated);
                                    rest_doneP = T;
                                    tokens = remaining;
                                }
                            } else {
                                if (((NIL != web_utilities.xml_token_element_nameP(first_token, rdf_utilities.rdf_name($$$rest))) && (NIL != web_utilities.xml_empty_tagP(first_token))) && (NIL != string_utilities.non_empty_string_p(web_utilities.xml_tag_attribute_value(first_token, rdf_utilities.rdf_name($$$nodeID), UNPROVIDED)))) {
                                    {
                                        SubLObject node_id = web_utilities.xml_tag_attribute_value(first_token, rdf_utilities.rdf_name($$$nodeID), UNPROVIDED);
                                        rest = com.cyc.cycjava.cycl.owl.owl_to_cycl.try_to_resolve_node_id_specification(list($NODE_ID, node_id));
                                    }
                                    rest_doneP = T;
                                    tokens = web_utilities.advance_xml_tokens(tokens, UNPROVIDED);
                                } else {
                                    if (NIL != web_utilities.xml_token_element_nameP(first_token, rdf_utilities.rdf_name($$$rest))) {
                                        rest = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_list_recursive(tokens.rest(), import_parameters);
                                        rest_doneP = T;
                                        tokens = web_utilities.advance_xml_tokens_to_end_of_element(tokens);
                                    } else {
                                        if (NIL != web_utilities.xml_token_element_nameP(first_token, rdf_utilities.rdf_name($$$first))) {
                                            first = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_one_owl_list_item(tokens, import_parameters);
                                            first_doneP = T;
                                            tokens = web_utilities.advance_xml_tokens_to_end_of_element(tokens);
                                        } else {
                                            Errors.sublisp_break($str_alt318$Found_non_first__non_rest_token_i, new SubLObject[]{ first_token });
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } 
            {
                SubLObject ans = cons(first, rest);
                return ans;
            }
        }
    }

    /**
     *
     *
     * @return LISTP where each item is either a single empty token or a list of tokens
    corresponding to a single XML element.
     */
    @LispMethod(comment = "@return LISTP where each item is either a single empty token or a list of tokens\r\ncorresponding to a single XML element.")
    public static SubLObject read_owl_list_recursive(final SubLObject original_tokens, final SubLObject import_parameters) {
        SubLObject tokens = original_tokens;
        SubLObject first = NIL;
        SubLObject first_doneP = NIL;
        SubLObject rest_doneP = NIL;
        SubLObject rest = NIL;
        while ((NIL != tokens) && ((NIL == first_doneP) || (NIL == rest_doneP))) {
            tokens = xml_parsing_utilities.advance_xml_tokens(tokens, owl_to_cycl.first_non_whitespace_xml_token_position(tokens));
            if (NIL != tokens) {
                final SubLObject first_token = tokens.first();
                if ((NIL != xml_parsing_utilities.xml_token_element_nameP(first_token, rdf_name(owl_to_cycl.$$$rest))) && xml_parsing_utilities.xml_tag_attribute_value(first_token, rdf_name(owl_to_cycl.$$$resource), UNPROVIDED).equal(owl_to_cycl.$str332$http___www_w3_org_1999_02_22_rdf_)) {
                    rest_doneP = T;
                    tokens = xml_parsing_utilities.advance_xml_tokens_to_end_of_element(tokens);
                } else
                    if (((NIL != xml_parsing_utilities.xml_token_element_nameP(first_token, rdf_name(owl_to_cycl.$$$rest))) && xml_parsing_utilities.xml_tag_attribute_value(first_token, rdf_name(owl_to_cycl.$$$parseType), UNPROVIDED).equal(owl_to_cycl.$$$Collection)) && (NIL == xml_parsing_utilities.xml_empty_tagP(first_token))) {
                        SubLObject remaining = tokens.rest();
                        SubLObject next_token = remaining.first();
                        SubLObject accumulated = NIL;
                        while (NIL == xml_parsing_utilities.xml_closing_tokenP(rdf_name(owl_to_cycl.$$$rest), next_token)) {
                            final SubLObject item = owl_to_cycl.read_one_owl_list_item(remaining, import_parameters);
                            accumulated = cons(item, accumulated);
                            remaining = xml_parsing_utilities.advance_xml_tokens_to_end_of_element(remaining);
                            next_token = remaining.first();
                        } 
                        rest = nreverse(accumulated);
                        rest_doneP = T;
                        tokens = remaining;
                    } else
                        if (((NIL != xml_parsing_utilities.xml_token_element_nameP(first_token, rdf_name(owl_to_cycl.$$$rest))) && (NIL != xml_parsing_utilities.xml_empty_tagP(first_token))) && (NIL != non_empty_string_p(xml_parsing_utilities.xml_tag_attribute_value(first_token, rdf_name(owl_to_cycl.$$$nodeID), UNPROVIDED)))) {
                            final SubLObject node_id = xml_parsing_utilities.xml_tag_attribute_value(first_token, rdf_name(owl_to_cycl.$$$nodeID), UNPROVIDED);
                            rest = owl_to_cycl.try_to_resolve_node_id_specification(list($NODE_ID, node_id));
                            rest_doneP = T;
                            tokens = xml_parsing_utilities.advance_xml_tokens(tokens, UNPROVIDED);
                        } else
                            if (NIL != xml_parsing_utilities.xml_token_element_nameP(first_token, rdf_name(owl_to_cycl.$$$rest))) {
                                rest = owl_to_cycl.read_owl_list_recursive(tokens.rest(), import_parameters);
                                rest_doneP = T;
                                tokens = xml_parsing_utilities.advance_xml_tokens_to_end_of_element(tokens);
                            } else
                                if (NIL != xml_parsing_utilities.xml_token_element_nameP(first_token, rdf_name(owl_to_cycl.$$$first))) {
                                    first = owl_to_cycl.read_one_owl_list_item(tokens, import_parameters);
                                    first_doneP = T;
                                    tokens = xml_parsing_utilities.advance_xml_tokens_to_end_of_element(tokens);
                                } else {
                                    Errors.sublisp_break(owl_to_cycl.$str335$Found_non_first__non_rest_token_i, new SubLObject[]{ first_token });
                                }




            }
        } 
        final SubLObject ans = cons(first, rest);
        return ans;
    }

    public static final SubLObject read_one_owl_list_item_alt(SubLObject tokens, SubLObject import_parameters) {
        {
            SubLObject first_token = tokens.first();
            SubLObject item = first_token;
            if (NIL != web_utilities.xml_empty_tagP(first_token)) {
                item = first_token;
            } else {
                if ((NIL != web_utilities.xml_token_element_nameP(first_token, rdf_utilities.rdf_name($$$first))) || (NIL != web_utilities.xml_token_element_nameP(first_token, rdf_utilities.rdf_name($$$rest)))) {
                    {
                        SubLObject position = com.cyc.cycjava.cycl.owl.owl_to_cycl.next_noninitial_non_whitespace_xml_token_position(tokens);
                        tokens = (NIL != position) ? ((SubLObject) (web_utilities.advance_xml_tokens(tokens, position))) : NIL;
                        item = tokens.first();
                    }
                }
                item = web_utilities.xml_tokens_for_next_element(tokens);
                format(T, $str_alt319$__Next_item___S__, item);
            }
            return item;
        }
    }

    public static SubLObject read_one_owl_list_item(SubLObject tokens, final SubLObject import_parameters) {
        SubLObject item;
        final SubLObject first_token = item = tokens.first();
        if (NIL != xml_parsing_utilities.xml_empty_tagP(first_token)) {
            item = first_token;
        } else {
            if ((NIL != xml_parsing_utilities.xml_token_element_nameP(first_token, rdf_name(owl_to_cycl.$$$first))) || (NIL != xml_parsing_utilities.xml_token_element_nameP(first_token, rdf_name(owl_to_cycl.$$$rest)))) {
                final SubLObject position = owl_to_cycl.next_noninitial_non_whitespace_xml_token_position(tokens);
                tokens = (NIL != position) ? xml_parsing_utilities.advance_xml_tokens(tokens, position) : NIL;
                item = tokens.first();
            }
            item = xml_parsing_utilities.xml_tokens_for_next_element(tokens);
            format(T, owl_to_cycl.$str336$__Next_item___S__, item);
        }
        return item;
    }

    public static final SubLObject owl_external_value_specification_union_alt(SubLObject external_values) {
        {
            SubLObject list_var = external_values;
            SubLTrampolineFile.checkType(list_var, NON_DOTTED_LIST_P);
            {
                SubLObject cdolist_list_var = list_var;
                SubLObject elem = NIL;
                for (elem = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , elem = cdolist_list_var.first()) {
                    SubLTrampolineFile.checkType(elem, OWL_EXTERNAL_VALUE_SPECIFICATION_P);
                }
            }
        }
        return NIL != list_utilities.empty_list_p(external_values) ? ((SubLObject) (NIL)) : NIL != list_utilities.singletonP(external_values) ? ((SubLObject) (list_utilities.only_one(external_values))) : cons($UNION, external_values);
    }

    public static SubLObject owl_external_value_specification_union(final SubLObject external_values) {
        assert NIL != non_dotted_list_p(external_values) : "! list_utilities.non_dotted_list_p(external_values) " + ("list_utilities.non_dotted_list_p(external_values) " + "CommonSymbols.NIL != list_utilities.non_dotted_list_p(external_values) ") + external_values;
        SubLObject cdolist_list_var = external_values;
        SubLObject elem = NIL;
        elem = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            assert NIL != owl_to_cycl.owl_external_value_specification_p(elem) : "! owl_to_cycl.owl_external_value_specification_p(elem) " + ("owl_to_cycl.owl_external_value_specification_p(elem) " + "CommonSymbols.NIL != owl_to_cycl.owl_external_value_specification_p(elem) ") + elem;
            cdolist_list_var = cdolist_list_var.rest();
            elem = cdolist_list_var.first();
        } 
        return NIL != empty_list_p(external_values) ? NIL : NIL != singletonP(external_values) ? only_one(external_values) : cons($UNION, external_values);
    }

    public static final SubLObject first_non_whitespace_xml_token_position_alt(SubLObject tokens) {
        return web_utilities.next_xml_token_position_if_not(tokens, $sym71$WHITESPACE_STRING_);
    }

    public static SubLObject first_non_whitespace_xml_token_position(final SubLObject tokens) {
        return xml_parsing_utilities.next_xml_token_position_if_not(tokens, owl_to_cycl.$sym78$WHITESPACE_STRING_);
    }

    public static final SubLObject next_noninitial_non_whitespace_xml_token_position_alt(SubLObject tokens) {
        {
            SubLObject position_in_rest = com.cyc.cycjava.cycl.owl.owl_to_cycl.first_non_whitespace_xml_token_position(tokens.rest());
            return NIL != position_in_rest ? ((SubLObject) (number_utilities.f_1X(position_in_rest))) : NIL;
        }
    }

    public static SubLObject next_noninitial_non_whitespace_xml_token_position(final SubLObject tokens) {
        final SubLObject position_in_rest = owl_to_cycl.first_non_whitespace_xml_token_position(tokens.rest());
        return NIL != position_in_rest ? f_1X(position_in_rest) : NIL;
    }

    public static final SubLObject next_noninitial_non_whitespace_xml_token_alt(SubLObject tokens) {
        return list_utilities.find_if_not($sym71$WHITESPACE_STRING_, tokens.rest(), UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject next_noninitial_non_whitespace_xml_token(final SubLObject tokens) {
        return find_if_not(owl_to_cycl.$sym78$WHITESPACE_STRING_, tokens.rest(), UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject pred_names_from_token_alt(SubLObject token, SubLObject import_parameters) {
        {
            SubLObject pred_prefix = com.cyc.cycjava.cycl.owl.owl_to_cycl.oip_pred_prefix(import_parameters);
            SubLObject about_value = web_utilities.xml_tag_attribute_value(token, rdf_utilities.rdf_name($$$about), UNPROVIDED);
            SubLObject resource_value = web_utilities.xml_tag_attribute_value(token, rdf_utilities.rdf_name($$$resource), UNPROVIDED);
            SubLObject id_value = web_utilities.xml_tag_attribute_value(token, rdf_utilities.rdf_name($$$ID), UNPROVIDED);
            SubLObject external_name = NIL;
            SubLObject cyc_name = NIL;
            if (NIL != about_value) {
                external_name = com.cyc.cycjava.cycl.owl.owl_to_cycl.process_owl_attribute_value(about_value);
            } else {
                if (NIL != resource_value) {
                    external_name = com.cyc.cycjava.cycl.owl.owl_to_cycl.process_owl_attribute_value(resource_value);
                } else {
                    if (NIL != id_value) {
                        external_name = com.cyc.cycjava.cycl.owl.owl_to_cycl.process_owl_attribute_value(id_value);
                    }
                }
            }
            cyc_name = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_cyc_name_from_external_name(external_name, pred_prefix);
            return values(external_name, cyc_name);
        }
    }

    public static SubLObject pred_names_from_token(final SubLObject token, final SubLObject import_parameters) {
        final SubLObject pred_prefix = owl_to_cycl.oip_pred_prefix(import_parameters);
        final SubLObject about_value = xml_parsing_utilities.xml_tag_attribute_value(token, rdf_name(owl_to_cycl.$$$about), UNPROVIDED);
        final SubLObject resource_value = xml_parsing_utilities.xml_tag_attribute_value(token, rdf_name(owl_to_cycl.$$$resource), UNPROVIDED);
        final SubLObject id_value = xml_parsing_utilities.xml_tag_attribute_value(token, rdf_name(owl_to_cycl.$$$ID), UNPROVIDED);
        SubLObject external_name = NIL;
        SubLObject cyc_name = NIL;
        if (NIL != about_value) {
            external_name = owl_to_cycl.process_owl_attribute_value(about_value);
        } else
            if (NIL != resource_value) {
                external_name = owl_to_cycl.process_owl_attribute_value(resource_value);
            } else
                if (NIL != id_value) {
                    external_name = owl_to_cycl.process_owl_attribute_value(id_value);
                }


        cyc_name = owl_to_cycl.owl_pred_cyc_name_from_external_name(external_name, pred_prefix);
        return values(external_name, cyc_name);
    }

    public static final SubLObject owl_pred_cyc_name_from_external_name_alt(SubLObject external_name, SubLObject pred_prefix) {
        {
            SubLObject cyc_name_base = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_cyc_name_base(external_name);
            SubLObject clean_name = string_utilities.char_subst(CHAR_hyphen, CHAR_period, cconcatenate(pred_prefix, string_utilities.upcase_leading(cyc_name_base)));
            if (NIL != upper_case_p(string_utilities.first_char(clean_name))) {
                clean_name = string_utilities.downcase_leading(clean_name);
            }
            return clean_name;
        }
    }

    public static SubLObject owl_pred_cyc_name_from_external_name(final SubLObject external_name, final SubLObject pred_prefix) {
        final SubLObject cyc_name_base = owl_to_cycl.owl_pred_cyc_name_base(external_name);
        SubLObject clean_name = char_subst(CHAR_hyphen, CHAR_period, cconcatenate(pred_prefix, upcase_leading(cyc_name_base)));
        if (NIL != upper_case_p(first_char(clean_name))) {
            clean_name = downcase_leading(clean_name);
        }
        return clean_name;
    }

    public static final SubLObject owl_pred_cyc_name_base_alt(SubLObject external_name) {
        {
            SubLObject cyc_name_base = (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.nonlocal_owl_term_reference_p(external_name)) ? ((SubLObject) (third(external_name))) : external_name;
            SubLObject cdolist_list_var = $list_alt322;
            SubLObject aux = NIL;
            for (aux = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , aux = cdolist_list_var.first()) {
                if ((NIL != string_utilities.starts_with(cyc_name_base, aux)) && (NIL != upper_case_p(Strings.sublisp_char(cyc_name_base, length(aux))))) {
                    cyc_name_base = string_utilities.pre_remove(cyc_name_base, aux, UNPROVIDED);
                }
            }
            return cyc_name_base;
        }
    }

    public static SubLObject owl_pred_cyc_name_base(final SubLObject external_name) {
        final SubLObject cyc_name_base = (NIL != owl_to_cycl.nonlocal_owl_term_reference_p(external_name)) ? third(external_name) : external_name;
        return cyc_name_base;
    }

    /**
     * Find the term(s) that correspond to COLS.  If not found, create them.
     * These instances are used as the #$argIsa of the related
     * #$OWLProperty.
     */
    @LispMethod(comment = "Find the term(s) that correspond to COLS.  If not found, create them.\r\nThese instances are used as the #$argIsa of the related\r\n#$OWLProperty.\nFind the term(s) that correspond to COLS.  If not found, create them.\nThese instances are used as the #$argIsa of the related\n#$OWLProperty.")
    public static final SubLObject owl_find_or_create_pred_arg_isa_alt(SubLObject cols, SubLObject import_parameters) {
        {
            SubLObject arg_isa_terms = NIL;
            SubLObject cdolist_list_var = cols;
            SubLObject arg_isa_name = NIL;
            for (arg_isa_name = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , arg_isa_name = cdolist_list_var.first()) {
                if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_value_specification_union_p(arg_isa_name)) {
                    arg_isa_terms = cons(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_pred_arg_isa(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_value_specification_union_names(arg_isa_name), import_parameters), arg_isa_terms);
                } else {
                    if (NIL == arg_isa_name) {
                        if (NIL != owl_utilities.owl_warnP()) {
                            Errors.warn($str_alt323$Got_null_arg_isa_name_in__S, cols);
                        }
                    } else {
                        arg_isa_terms = cons(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_for_class(arg_isa_name, import_parameters), arg_isa_terms);
                    }
                }
            }
            return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_union(arg_isa_terms);
        }
    }

    /**
     * Find the term(s) that correspond to COLS.  If not found, create them.
     * These instances are used as the #$argIsa of the related
     * #$OWLProperty.
     */
    @LispMethod(comment = "Find the term(s) that correspond to COLS.  If not found, create them.\r\nThese instances are used as the #$argIsa of the related\r\n#$OWLProperty.\nFind the term(s) that correspond to COLS.  If not found, create them.\nThese instances are used as the #$argIsa of the related\n#$OWLProperty.")
    public static SubLObject owl_find_or_create_pred_arg_isa(final SubLObject cols, final SubLObject import_parameters) {
        SubLObject arg_isa_terms = NIL;
        SubLObject cdolist_list_var = cols;
        SubLObject arg_isa_name = NIL;
        arg_isa_name = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != owl_to_cycl.owl_external_value_specification_union_p(arg_isa_name)) {
                arg_isa_terms = cons(owl_to_cycl.owl_find_or_create_pred_arg_isa(owl_to_cycl.owl_external_value_specification_union_names(arg_isa_name), import_parameters), arg_isa_terms);
            } else
                if (NIL == arg_isa_name) {
                    if (NIL != owl_utilities.owl_warnP()) {
                        Errors.warn(owl_to_cycl.$str339$Got_null_arg_isa_name_in__S, cols);
                    }
                } else {
                    arg_isa_terms = cons(owl_to_cycl.owl_find_or_create_term_for_class(arg_isa_name, import_parameters), arg_isa_terms);
                }

            cdolist_list_var = cdolist_list_var.rest();
            arg_isa_name = cdolist_list_var.first();
        } 
        return owl_to_cycl.owl_term_union(arg_isa_terms, import_parameters);
    }

    public static final SubLObject xml_schema_class_uris_internal_alt() {
        return ask_utilities.query_template($list_alt325, $list_alt326, $$OWLMappingMt, $list_alt327);
    }

    public static SubLObject xml_schema_class_uris_internal() {
        return query_template(owl_to_cycl.$list341, owl_to_cycl.$list342, owl_to_cycl.$$OWLMappingMt, owl_to_cycl.$list343);
    }

    public static final SubLObject xml_schema_class_uris_alt() {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
                SubLObject caching_state = NIL;
                if (NIL == v_memoization_state) {
                    return com.cyc.cycjava.cycl.owl.owl_to_cycl.xml_schema_class_uris_internal();
                }
                caching_state = memoization_state.memoization_state_lookup(v_memoization_state, XML_SCHEMA_CLASS_URIS, UNPROVIDED);
                if (NIL == caching_state) {
                    caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), XML_SCHEMA_CLASS_URIS, ZERO_INTEGER, NIL, EQL, UNPROVIDED);
                    memoization_state.memoization_state_put(v_memoization_state, XML_SCHEMA_CLASS_URIS, caching_state);
                }
                {
                    SubLObject results = memoization_state.caching_state_get_zero_arg_results(caching_state, UNPROVIDED);
                    if (results == $kw15$_MEMOIZED_ITEM_NOT_FOUND_) {
                        results = arg2(thread.resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.owl.owl_to_cycl.xml_schema_class_uris_internal()));
                        memoization_state.caching_state_set_zero_arg_results(caching_state, results, UNPROVIDED);
                    }
                    return memoization_state.caching_results(results);
                }
            }
        }
    }

    public static SubLObject xml_schema_class_uris() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_memoization_state = $memoization_state$.getDynamicValue(thread);
        SubLObject caching_state = NIL;
        if (NIL == v_memoization_state) {
            return owl_to_cycl.xml_schema_class_uris_internal();
        }
        caching_state = memoization_state_lookup(v_memoization_state, owl_to_cycl.XML_SCHEMA_CLASS_URIS, UNPROVIDED);
        if (NIL == caching_state) {
            caching_state = create_caching_state(memoization_state_lock(v_memoization_state), owl_to_cycl.XML_SCHEMA_CLASS_URIS, ZERO_INTEGER, NIL, EQL, UNPROVIDED);
            memoization_state_put(v_memoization_state, owl_to_cycl.XML_SCHEMA_CLASS_URIS, caching_state);
        }
        SubLObject results = caching_state_get_zero_arg_results(caching_state, UNPROVIDED);
        if (results.eql($memoized_item_not_found$.getGlobalValue())) {
            results = arg2(thread.resetMultipleValues(), multiple_value_list(owl_to_cycl.xml_schema_class_uris_internal()));
            caching_state_set_zero_arg_results(caching_state, results, UNPROVIDED);
        }
        return caching_results(results);
    }

    public static final SubLObject owl_find_or_create_term_for_class_alt(SubLObject specification, SubLObject import_parameters) {
        if (import_parameters == UNPROVIDED) {
            import_parameters = $owl_import_parameters$.getDynamicValue();
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_restriction_p(specification)) {
                return com.cyc.cycjava.cycl.owl.owl_to_cycl.find_or_create_owl_class_from_restriction(specification, import_parameters);
            } else {
                if ((NIL != cycl_utilities.expression_find_if(CONSTANT_P, specification, UNPROVIDED, UNPROVIDED)) && (NIL == cycl_utilities.expression_find_if(KEYWORDP, specification, UNPROVIDED, UNPROVIDED))) {
                    return specification;
                } else {
                    if ((NIL != pattern_match.tree_matches_pattern(specification, $list_alt330)) && (NIL != list_utilities.alist_has_keyP(com.cyc.cycjava.cycl.owl.owl_to_cycl.xml_schema_class_uris(), third(specification), symbol_function(EQUAL)))) {
                        return list_utilities.alist_lookup_without_values(com.cyc.cycjava.cycl.owl.owl_to_cycl.xml_schema_class_uris(), third(specification), symbol_function(EQUAL), UNPROVIDED);
                    } else {
                        {
                            SubLObject v_term = NIL;
                            if (specification.isString() && (NIL == web_utilities.xml_prefixed_name_p(specification))) {
                                {
                                    SubLObject info = com.cyc.cycjava.cycl.owl.owl_to_cycl.find_accumulated_owl_definition(specification, $CLASS);
                                    SubLObject guid = (NIL != info) ? ((SubLObject) (com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_lookup(info, $GUID, NIL))) : NIL;
                                    SubLObject externalid = (NIL != info) ? ((SubLObject) (com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_lookup(info, $EXTERNALID, NIL))) : NIL;
                                    if (NIL != Guids.guid_string_p(guid)) {
                                        v_term = constants_high.find_constant_by_guid_string(guid);
                                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt331$__Found_term_by_guid___S, $str_alt223$__ }), v_term);
                                            force_output(UNPROVIDED);
                                        }
                                    } else {
                                        if (NIL != kb_utilities.compact_hl_external_id_string_p(externalid)) {
                                            v_term = kb_utilities.find_object_by_compact_hl_external_id_string(externalid);
                                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt332$__Found_term_by_externalID___S, $str_alt223$__ }), v_term);
                                                force_output(UNPROVIDED);
                                            }
                                        }
                                    }
                                }
                            }
                            if (NIL == v_term) {
                                {
                                    SubLObject class_type = $$OWLClass;
                                    v_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_from_specification(specification, class_type, import_parameters);
                                }
                            }
                            return v_term;
                        }
                    }
                }
            }
        }
    }

    public static SubLObject owl_find_or_create_term_for_class(final SubLObject specification, SubLObject import_parameters) {
        if (import_parameters == UNPROVIDED) {
            import_parameters = owl_to_cycl.$owl_import_parameters$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != owl_to_cycl.owl_restriction_p(specification)) {
            return owl_to_cycl.find_or_create_owl_class_from_restriction(specification, import_parameters, UNPROVIDED);
        }
        if ((NIL != expression_find_if(CONSTANT_P, specification, UNPROVIDED, UNPROVIDED)) && (NIL == expression_find_if(KEYWORDP, specification, UNPROVIDED, UNPROVIDED))) {
            return specification;
        }
        if ((NIL != tree_matches_pattern(specification, owl_to_cycl.$list346)) && (NIL != alist_has_keyP(owl_to_cycl.xml_schema_class_uris(), third(specification), symbol_function(EQUAL)))) {
            return alist_lookup_without_values(owl_to_cycl.xml_schema_class_uris(), third(specification), symbol_function(EQUAL), UNPROVIDED);
        }
        SubLObject v_term = NIL;
        if (specification.isString() && (NIL == xml_parsing_utilities.xml_prefixed_name_p(specification))) {
            final SubLObject info = owl_to_cycl.find_accumulated_owl_definition(specification, $CLASS);
            final SubLObject guid = (NIL != info) ? owl_to_cycl.owl_term_info_plist_lookup(info, $GUID, NIL) : NIL;
            final SubLObject externalid = (NIL != info) ? owl_to_cycl.owl_term_info_plist_lookup(info, $EXTERNALID, NIL) : NIL;
            if (NIL != Guids.guid_string_p(guid)) {
                v_term = find_constant_by_guid_string(guid);
                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str347$__Found_term_by_guid___S, owl_to_cycl.$str239$__ }), v_term);
                    force_output(UNPROVIDED);
                }
            } else
                if (NIL != compact_hl_external_id_string_p(externalid)) {
                    v_term = find_object_by_compact_hl_external_id_string(externalid);
                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                        format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str348$__Found_term_by_externalID___S, owl_to_cycl.$str239$__ }), v_term);
                        force_output(UNPROVIDED);
                    }
                }

        }
        if (NIL == v_term) {
            final SubLObject class_type = owl_to_cycl.$const349$owl_Class;
            v_term = owl_to_cycl.owl_find_or_create_term_from_specification(specification, class_type, import_parameters);
        }
        return v_term;
    }

    public static final SubLObject owl_uri_from_prefix_alt(SubLObject prefix, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(prefix, STRINGP);
            SubLTrampolineFile.checkType(import_parameters, OWL_IMPORT_PARAMETERS_P);
            {
                SubLObject uri = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_lookup_namespace(prefix, import_parameters);
                if (NIL == uri) {
                    {
                        SubLObject var = $sym334$_URI;
                        SubLObject sentence = list($$standardPrefixForURI, prefix, var);
                        SubLObject result = ask_utilities.query_variable(var, sentence, $$OWLMappingMt, $list_alt336);
                        SubLObject result_string = (NIL != result) ? ((SubLObject) (result.first())) : NIL;
                        thread.resetMultipleValues();
                        {
                            SubLObject success = formula_pattern_match.formula_matches_pattern(result_string, $list_alt337);
                            SubLObject v_bindings = thread.secondMultipleValue();
                            thread.resetMultipleValues();
                            if (NIL != success) {
                                {
                                    SubLObject string_arg = list_utilities.alist_lookup_without_values(v_bindings, STRING_ARG, UNPROVIDED, UNPROVIDED);
                                    result_string = string_arg;
                                }
                            }
                        }
                        if (result_string.isString()) {
                            result_string = string_utilities.post_remove(result_string, $str_alt200$_, UNPROVIDED);
                            uri = result_string;
                        }
                    }
                }
                return uri;
            }
        }
    }

    public static SubLObject owl_uri_from_prefix(final SubLObject prefix, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != stringp(prefix) : "! stringp(prefix) " + ("Types.stringp(prefix) " + "CommonSymbols.NIL != Types.stringp(prefix) ") + prefix;
        assert NIL != owl_to_cycl.owl_import_parameters_p(import_parameters) : "! owl_to_cycl.owl_import_parameters_p(import_parameters) " + ("owl_to_cycl.owl_import_parameters_p(import_parameters) " + "CommonSymbols.NIL != owl_to_cycl.owl_import_parameters_p(import_parameters) ") + import_parameters;
        SubLObject uri = owl_to_cycl.owl_import_parameters_lookup_namespace(prefix, import_parameters);
        if (NIL == uri) {
            final SubLObject var = owl_to_cycl.$sym350$_URI;
            final SubLObject sentence = list(owl_to_cycl.$$standardPrefixForURI, prefix, var);
            final SubLObject result = query_variable(var, sentence, owl_to_cycl.$$OWLMappingMt, owl_to_cycl.$list352);
            SubLObject result_string = (NIL != result) ? result.first() : NIL;
            thread.resetMultipleValues();
            final SubLObject success = formula_matches_pattern(result_string, owl_to_cycl.$list353);
            final SubLObject v_bindings = thread.secondMultipleValue();
            thread.resetMultipleValues();
            if (NIL != success) {
                final SubLObject string_arg = result_string = alist_lookup_without_values(v_bindings, owl_to_cycl.STRING_ARG, UNPROVIDED, UNPROVIDED);
            }
            if (result_string.isString()) {
                result_string = uri = post_remove(result_string, owl_to_cycl.$str216$_, UNPROVIDED);
            }
        }
        return uri;
    }

    public static final SubLObject owl_find_or_create_term_of_type_internal_alt(SubLObject external_name, SubLObject type, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (NIL != web_utilities.xml_prefixed_name_p(external_name)) {
                {
                    SubLObject prefix = web_utilities.xml_prefixed_name_namespace(external_name);
                    SubLObject local_name = web_utilities.xml_prefixed_name_local_name(external_name);
                    SubLObject uri = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_uri_from_prefix(prefix, import_parameters);
                    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                        if (NIL == web_utilities.uri_p(uri, UNPROVIDED)) {
                            Errors.error($str_alt340$Couldn_t_find_URI_for_namespace__, prefix);
                        }
                    }
                    if (string_utilities.last_char(uri).eql(CHAR_hash)) {
                        uri = string_utilities.remove_last_char(uri, UNPROVIDED);
                    }
                    return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_of_type(list($NONLOCAL, uri, local_name), type, import_parameters);
                }
            } else {
                if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_value_specification_union_p(external_name)) {
                    {
                        SubLObject components = NIL;
                        SubLObject cdolist_list_var = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_value_specification_union_names(external_name);
                        SubLObject name = NIL;
                        for (name = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , name = cdolist_list_var.first()) {
                            {
                                SubLObject v_class = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_of_type(name, type, import_parameters);
                                SubLTrampolineFile.checkType(v_class, COLLECTION_P);
                                components = cons(v_class, components);
                            }
                        }
                        return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_union(components);
                    }
                } else {
                    if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.nonlocal_owl_term_reference_p(external_name)) {
                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt341$Finding_or_creating_nonlocal_term, $str_alt223$__ }));
                            force_output(UNPROVIDED);
                        }
                        {
                            SubLObject datum = external_name.rest();
                            SubLObject current = datum;
                            SubLObject uri = NIL;
                            SubLObject name = NIL;
                            destructuring_bind_must_consp(current, datum, $list_alt342);
                            uri = current.first();
                            current = current.rest();
                            destructuring_bind_must_consp(current, datum, $list_alt342);
                            name = current.first();
                            current = current.rest();
                            if (NIL == current) {
                                {
                                    SubLObject ontology = com.cyc.cycjava.cycl.owl.owl_to_cycl.find_or_create_owl_ontology_for_uri(uri, import_parameters, UNPROVIDED);
                                    SubLObject v_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_of_type_in_ontology(name, type, ontology, import_parameters, UNPROVIDED);
                                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                        format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt343$Result___S, $str_alt223$__ }), v_term);
                                        force_output(UNPROVIDED);
                                    }
                                    return v_term;
                                }
                            } else {
                                cdestructuring_bind_error(datum, $list_alt342);
                            }
                        }
                    } else {
                        if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.node_id_specification_p(external_name)) {
                            return com.cyc.cycjava.cycl.owl.owl_to_cycl.try_to_resolve_node_id_specification(external_name);
                        } else {
                            if (!(external_name.isString() || (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.nonlocal_owl_term_reference_p(external_name)))) {
                                if (NIL != owl_utilities.owl_warnP()) {
                                    Errors.warn($str_alt344$Can_t_find_or_create_term_of_type, type, external_name);
                                }
                                return NIL;
                            }
                            if (NIL != find_if(CONTROL_CHAR_P, external_name, UNPROVIDED, UNPROVIDED, UNPROVIDED)) {
                                Errors.warn($str_alt346$external_name_appears_to_contain_, external_name);
                            }
                            if (NIL != web_utilities.xml_prefixed_name_p(external_name)) {
                                Errors.warn($str_alt347$external_name_appears_to_contain_, external_name);
                            }
                            {
                                SubLObject ontology = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_ontology(import_parameters);
                                SubLObject v_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_of_type_in_ontology(external_name, type, ontology, import_parameters, UNPROVIDED);
                                return v_term;
                            }
                        }
                    }
                }
            }
            return NIL;
        }
    }

    public static SubLObject owl_find_or_create_term_of_type_internal(final SubLObject external_name, final SubLObject type, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != xml_parsing_utilities.xml_prefixed_name_p(external_name)) {
            final SubLObject prefix = xml_parsing_utilities.xml_prefixed_name_namespace(external_name);
            final SubLObject local_name = xml_parsing_utilities.xml_prefixed_name_local_name(external_name);
            SubLObject uri = owl_to_cycl.owl_uri_from_prefix(prefix, import_parameters);
            if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == uri_p(uri, UNPROVIDED))) {
                Errors.error(owl_to_cycl.$str356$Couldn_t_find_URI_for_namespace__, prefix);
            }
            if (last_char(uri).eql(CHAR_hash)) {
                uri = remove_last_char(uri, UNPROVIDED);
            }
            return owl_to_cycl.owl_find_or_create_term_of_type(list($NONLOCAL, uri, local_name), type, import_parameters);
        }
        if (NIL != owl_to_cycl.owl_external_value_specification_union_p(external_name)) {
            SubLObject components = NIL;
            SubLObject cdolist_list_var = owl_to_cycl.owl_external_value_specification_union_names(external_name);
            SubLObject name = NIL;
            name = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                final SubLObject v_class = owl_to_cycl.owl_find_or_create_term_of_type(name, type, import_parameters);
                assert NIL != collection_p(v_class) : "! fort_types_interface.collection_p(v_class) " + ("fort_types_interface.collection_p(v_class) " + "CommonSymbols.NIL != fort_types_interface.collection_p(v_class) ") + v_class;
                components = cons(v_class, components);
                cdolist_list_var = cdolist_list_var.rest();
                name = cdolist_list_var.first();
            } 
            return owl_to_cycl.owl_term_union(components, import_parameters);
        }
        if (NIL != owl_to_cycl.nonlocal_owl_term_reference_p(external_name)) {
            return owl_to_cycl.resolve_nonlocal_owl_term_reference(external_name, type, import_parameters);
        }
        if (NIL != owl_to_cycl.node_id_specification_p(external_name)) {
            return owl_to_cycl.try_to_resolve_node_id_specification(external_name);
        }
        if ((!external_name.isString()) && (NIL == owl_to_cycl.nonlocal_owl_term_reference_p(external_name))) {
            if (NIL != owl_utilities.owl_warnP()) {
                Errors.warn(owl_to_cycl.$str357$Can_t_find_or_create_term_of_type, type, external_name);
            }
            return NIL;
        }
        if (NIL != find_if(owl_to_cycl.CONTROL_CHAR_P, external_name, UNPROVIDED, UNPROVIDED, UNPROVIDED)) {
            Errors.warn(owl_to_cycl.$str359$external_name_appears_to_contain_, external_name);
        }
        if (NIL != xml_parsing_utilities.xml_prefixed_name_p(external_name)) {
            Errors.warn(owl_to_cycl.$str360$external_name_appears_to_contain_, external_name);
        }
        final SubLObject ontology = owl_to_cycl.owl_import_parameters_ontology(import_parameters);
        final SubLObject v_term = owl_to_cycl.owl_find_or_create_term_of_type_in_ontology(external_name, type, ontology, import_parameters, UNPROVIDED);
        return v_term;
    }

    public static final SubLObject owl_find_or_create_term_of_type_alt(SubLObject external_name, SubLObject type, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
                SubLObject caching_state = NIL;
                if (NIL == v_memoization_state) {
                    return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_of_type_internal(external_name, type, import_parameters);
                }
                caching_state = memoization_state.memoization_state_lookup(v_memoization_state, OWL_FIND_OR_CREATE_TERM_OF_TYPE, UNPROVIDED);
                if (NIL == caching_state) {
                    caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), OWL_FIND_OR_CREATE_TERM_OF_TYPE, THREE_INTEGER, NIL, EQUAL, UNPROVIDED);
                    memoization_state.memoization_state_put(v_memoization_state, OWL_FIND_OR_CREATE_TERM_OF_TYPE, caching_state);
                }
                {
                    SubLObject sxhash = memoization_state.sxhash_calc_3(external_name, type, import_parameters);
                    SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
                    if (collisions != $kw15$_MEMOIZED_ITEM_NOT_FOUND_) {
                        {
                            SubLObject cdolist_list_var = collisions;
                            SubLObject collision = NIL;
                            for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , collision = cdolist_list_var.first()) {
                                {
                                    SubLObject cached_args = collision.first();
                                    SubLObject results2 = second(collision);
                                    if (external_name.equal(cached_args.first())) {
                                        cached_args = cached_args.rest();
                                        if (type.equal(cached_args.first())) {
                                            cached_args = cached_args.rest();
                                            if (((NIL != cached_args) && (NIL == cached_args.rest())) && import_parameters.equal(cached_args.first())) {
                                                return memoization_state.caching_results(results2);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    {
                        SubLObject results = arg2(thread.resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_of_type_internal(external_name, type, import_parameters)));
                        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(external_name, type, import_parameters));
                        return memoization_state.caching_results(results);
                    }
                }
            }
        }
    }

    public static SubLObject owl_find_or_create_term_of_type(final SubLObject external_name, final SubLObject type, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_memoization_state = $memoization_state$.getDynamicValue(thread);
        SubLObject caching_state = NIL;
        if (NIL == v_memoization_state) {
            return owl_to_cycl.owl_find_or_create_term_of_type_internal(external_name, type, import_parameters);
        }
        caching_state = memoization_state_lookup(v_memoization_state, owl_to_cycl.OWL_FIND_OR_CREATE_TERM_OF_TYPE, UNPROVIDED);
        if (NIL == caching_state) {
            caching_state = create_caching_state(memoization_state_lock(v_memoization_state), owl_to_cycl.OWL_FIND_OR_CREATE_TERM_OF_TYPE, THREE_INTEGER, NIL, EQUAL, UNPROVIDED);
            memoization_state_put(v_memoization_state, owl_to_cycl.OWL_FIND_OR_CREATE_TERM_OF_TYPE, caching_state);
        }
        final SubLObject sxhash = sxhash_calc_3(external_name, type, import_parameters);
        final SubLObject collisions = caching_state_lookup(caching_state, sxhash, UNPROVIDED);
        if (!collisions.eql($memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = NIL;
            collision = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = second(collision);
                if (external_name.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (type.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (((NIL != cached_args) && (NIL == cached_args.rest())) && import_parameters.equal(cached_args.first())) {
                            return caching_results(results2);
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            } 
        }
        final SubLObject results3 = arg2(thread.resetMultipleValues(), multiple_value_list(owl_to_cycl.owl_find_or_create_term_of_type_internal(external_name, type, import_parameters)));
        caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(external_name, type, import_parameters));
        return caching_results(results3);
    }

    public static final SubLObject owl_find_or_create_term_for_class_in_ontology_alt(SubLObject name, SubLObject ontology, SubLObject import_parameters) {
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_of_type_in_ontology(name, $$OWLClass, ontology, import_parameters, UNPROVIDED);
    }

    public static SubLObject owl_find_or_create_term_for_class_in_ontology(final SubLObject name, final SubLObject ontology, final SubLObject import_parameters) {
        return owl_to_cycl.owl_find_or_create_term_of_type_in_ontology(name, owl_to_cycl.$$OWLClass, ontology, import_parameters, UNPROVIDED);
    }

    public static final SubLObject owl_find_or_create_term_of_type_in_ontology_internal_alt(SubLObject external_name, SubLObject type, SubLObject ontology, SubLObject import_parameters, SubLObject force_creationP) {
        if (force_creationP == UNPROVIDED) {
            force_creationP = $owl_force_new_term_creationP$.getDynamicValue();
        }
        {
            SubLObject v_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_term_of_type(external_name, type, import_parameters, ontology);
            if (NIL == v_term) {
                v_term = ((NIL != force_creationP) || (!ontology.equal(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_ontology(import_parameters)))) ? ((SubLObject) (com.cyc.cycjava.cycl.owl.owl_to_cycl.create_owl_term(external_name, type, ontology, import_parameters))) : com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_quasi_term_from_specification(external_name, type, ontology, import_parameters);
            }
            return v_term;
        }
    }

    public static SubLObject owl_find_or_create_term_of_type_in_ontology_internal(final SubLObject external_name, final SubLObject type, final SubLObject ontology, final SubLObject import_parameters, SubLObject force_creationP) {
        if (force_creationP == UNPROVIDED) {
            force_creationP = owl_to_cycl.$owl_force_new_term_creationP$.getDynamicValue();
        }
        SubLObject v_term = owl_to_cycl.owl_find_term_of_type(external_name, type, import_parameters, ontology);
        if (NIL == v_term) {
            v_term = ((NIL != force_creationP) || (!ontology.equal(owl_to_cycl.owl_import_parameters_ontology(import_parameters)))) ? owl_to_cycl.create_owl_term(external_name, type, ontology, import_parameters) : owl_to_cycl.owl_quasi_term_from_specification(external_name, type, ontology, import_parameters);
        }
        return v_term;
    }

    public static final SubLObject owl_find_or_create_term_of_type_in_ontology_alt(SubLObject external_name, SubLObject type, SubLObject ontology, SubLObject import_parameters, SubLObject force_creationP) {
        if (force_creationP == UNPROVIDED) {
            force_creationP = $owl_force_new_term_creationP$.getDynamicValue();
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
                SubLObject caching_state = NIL;
                if (NIL == v_memoization_state) {
                    return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_of_type_in_ontology_internal(external_name, type, ontology, import_parameters, force_creationP);
                }
                caching_state = memoization_state.memoization_state_lookup(v_memoization_state, OWL_FIND_OR_CREATE_TERM_OF_TYPE_IN_ONTOLOGY, UNPROVIDED);
                if (NIL == caching_state) {
                    caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), OWL_FIND_OR_CREATE_TERM_OF_TYPE_IN_ONTOLOGY, FIVE_INTEGER, NIL, EQUAL, UNPROVIDED);
                    memoization_state.memoization_state_put(v_memoization_state, OWL_FIND_OR_CREATE_TERM_OF_TYPE_IN_ONTOLOGY, caching_state);
                }
                {
                    SubLObject sxhash = memoization_state.sxhash_calc_5(external_name, type, ontology, import_parameters, force_creationP);
                    SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
                    if (collisions != $kw15$_MEMOIZED_ITEM_NOT_FOUND_) {
                        {
                            SubLObject cdolist_list_var = collisions;
                            SubLObject collision = NIL;
                            for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , collision = cdolist_list_var.first()) {
                                {
                                    SubLObject cached_args = collision.first();
                                    SubLObject results2 = second(collision);
                                    if (external_name.equal(cached_args.first())) {
                                        cached_args = cached_args.rest();
                                        if (type.equal(cached_args.first())) {
                                            cached_args = cached_args.rest();
                                            if (ontology.equal(cached_args.first())) {
                                                cached_args = cached_args.rest();
                                                if (import_parameters.equal(cached_args.first())) {
                                                    cached_args = cached_args.rest();
                                                    if (((NIL != cached_args) && (NIL == cached_args.rest())) && force_creationP.equal(cached_args.first())) {
                                                        return memoization_state.caching_results(results2);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    {
                        SubLObject results = arg2(thread.resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_of_type_in_ontology_internal(external_name, type, ontology, import_parameters, force_creationP)));
                        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(external_name, type, ontology, import_parameters, force_creationP));
                        return memoization_state.caching_results(results);
                    }
                }
            }
        }
    }

    public static SubLObject owl_find_or_create_term_of_type_in_ontology(final SubLObject external_name, final SubLObject type, final SubLObject ontology, final SubLObject import_parameters, SubLObject force_creationP) {
        if (force_creationP == UNPROVIDED) {
            force_creationP = owl_to_cycl.$owl_force_new_term_creationP$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_memoization_state = $memoization_state$.getDynamicValue(thread);
        SubLObject caching_state = NIL;
        if (NIL == v_memoization_state) {
            return owl_to_cycl.owl_find_or_create_term_of_type_in_ontology_internal(external_name, type, ontology, import_parameters, force_creationP);
        }
        caching_state = memoization_state_lookup(v_memoization_state, owl_to_cycl.OWL_FIND_OR_CREATE_TERM_OF_TYPE_IN_ONTOLOGY, UNPROVIDED);
        if (NIL == caching_state) {
            caching_state = create_caching_state(memoization_state_lock(v_memoization_state), owl_to_cycl.OWL_FIND_OR_CREATE_TERM_OF_TYPE_IN_ONTOLOGY, FIVE_INTEGER, NIL, EQUAL, UNPROVIDED);
            memoization_state_put(v_memoization_state, owl_to_cycl.OWL_FIND_OR_CREATE_TERM_OF_TYPE_IN_ONTOLOGY, caching_state);
        }
        final SubLObject sxhash = sxhash_calc_5(external_name, type, ontology, import_parameters, force_creationP);
        final SubLObject collisions = caching_state_lookup(caching_state, sxhash, UNPROVIDED);
        if (!collisions.eql($memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = NIL;
            collision = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = second(collision);
                if (external_name.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (type.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (ontology.equal(cached_args.first())) {
                            cached_args = cached_args.rest();
                            if (import_parameters.equal(cached_args.first())) {
                                cached_args = cached_args.rest();
                                if (((NIL != cached_args) && (NIL == cached_args.rest())) && force_creationP.equal(cached_args.first())) {
                                    return caching_results(results2);
                                }
                            }
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            } 
        }
        final SubLObject results3 = arg2(thread.resetMultipleValues(), multiple_value_list(owl_to_cycl.owl_find_or_create_term_of_type_in_ontology_internal(external_name, type, ontology, import_parameters, force_creationP)));
        caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(external_name, type, ontology, import_parameters, force_creationP));
        return caching_results(results3);
    }

    public static final SubLObject create_owl_term_alt(SubLObject external_name, SubLObject type, SubLObject ontology, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject raw_prefix = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_constant_prefix(import_parameters);
                SubLObject predicateP = genls.genlP(type, $$Predicate, UNPROVIDED, UNPROVIDED);
                SubLObject name_base = external_name;
                SubLObject prefix = ((NIL != string_utilities.non_empty_string_p(raw_prefix)) && (NIL != predicateP)) ? ((SubLObject) (string_utilities.downcase_leading(raw_prefix))) : string_utilities.upcase_leading(raw_prefix);
                SubLObject v_term = NIL;
                if (NIL != predicateP) {
                    name_base = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_cyc_name_base(external_name);
                    if (NIL != string_utilities.empty_string_p(prefix)) {
                        name_base = string_utilities.downcase_leading(name_base);
                    }
                }
                {
                    SubLObject _prev_bind_0 = api_control_vars.$the_cyclist$.currentBinding(thread);
                    try {
                        api_control_vars.$the_cyclist$.bind(NIL, thread);
                        operation_communication.set_the_cyclist(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_cyclist(import_parameters));
                        v_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_create_new_constant(name_base, list(type), $$UniversalVocabularyMt, prefix, makeBoolean(NIL == predicateP));
                    } finally {
                        api_control_vars.$the_cyclist$.rebind(_prev_bind_0, thread);
                    }
                }
                com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_assert(list($$quotedIsa, v_term, com.cyc.cycjava.cycl.owl.owl_to_cycl.find_or_create_term_type_for_ontology(ontology, UNPROVIDED)), $$BookkeepingMt, import_parameters);
                com.cyc.cycjava.cycl.owl.owl_to_cycl.assert_synonymous_external_concept(v_term, ontology, external_name, import_parameters);
                if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_import_term(import_parameters)) {
                    owl_utilities.note_term_acted_on_during_import(v_term, com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_import_term(import_parameters), com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_cyclist(import_parameters));
                }
                return v_term;
            }
        }
    }

    public static SubLObject create_owl_term(final SubLObject external_name, final SubLObject type, final SubLObject ontology, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject raw_prefix = owl_to_cycl.owl_import_parameters_constant_prefix(import_parameters);
        final SubLObject suffix = owl_to_cycl.owl_import_parameters_constant_suffix(import_parameters);
        final SubLObject predicateP = genlP(type, owl_to_cycl.$$Predicate, UNPROVIDED, UNPROVIDED);
        SubLObject name_base = external_name;
        final SubLObject prefix = ((NIL != non_empty_string_p(raw_prefix)) && (NIL != predicateP)) ? downcase_leading(raw_prefix) : upcase_leading(raw_prefix);
        SubLObject v_term = NIL;
        if (NIL != predicateP) {
            name_base = owl_to_cycl.owl_pred_cyc_name_base(external_name);
            if (NIL != empty_string_p(prefix)) {
                name_base = downcase_leading(name_base);
            }
        }
        final SubLObject _prev_bind_0 = $the_cyclist$.currentBinding(thread);
        try {
            $the_cyclist$.bind(NIL, thread);
            set_the_cyclist(owl_to_cycl.owl_import_parameters_cyclist(import_parameters));
            v_term = owl_to_cycl.owl_create_new_constant(name_base, list(type), owl_to_cycl.$$UniversalVocabularyMt, prefix, suffix, makeBoolean(NIL == predicateP));
        } finally {
            $the_cyclist$.rebind(_prev_bind_0, thread);
        }
        owl_to_cycl.owl_assert(list(owl_to_cycl.$$quotedIsa, v_term, owl_to_cycl.find_or_create_term_type_for_ontology(ontology, UNPROVIDED)), owl_to_cycl.$$BookkeepingMt, import_parameters);
        owl_to_cycl.assert_synonymous_external_concept(v_term, ontology, external_name, import_parameters);
        if (NIL != owl_to_cycl.owl_import_parameters_import_term(import_parameters)) {
            owl_utilities.note_term_acted_on_during_import(v_term, owl_to_cycl.owl_import_parameters_import_term(import_parameters), owl_to_cycl.owl_import_parameters_cyclist(import_parameters));
        }
        return v_term;
    }

    public static final SubLObject assert_synonymous_external_concept_alt(SubLObject v_term, SubLObject ontology, SubLObject unprefixed_external_name, SubLObject import_parameters) {
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_assert(com.cyc.cycjava.cycl.owl.owl_to_cycl.get_synonymous_external_concept_sentence(v_term, ontology, unprefixed_external_name, import_parameters), com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_ontology_context(import_parameters), import_parameters);
    }

    public static SubLObject assert_synonymous_external_concept(final SubLObject v_term, final SubLObject ontology, final SubLObject unprefixed_external_name, final SubLObject import_parameters) {
        return owl_to_cycl.owl_assert(owl_to_cycl.get_synonymous_external_concept_sentence(v_term, ontology, unprefixed_external_name, import_parameters), owl_to_cycl.owl_import_parameters_ontology_context(import_parameters), import_parameters);
    }

    public static final SubLObject get_synonymous_external_concept_sentence_alt(SubLObject v_term, SubLObject ontology, SubLObject unprefixed_external_name, SubLObject import_parameters) {
        SubLTrampolineFile.checkType(unprefixed_external_name, STRINGP);
        {
            SubLObject prefixP = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_prefix_external_namesP(import_parameters);
            SubLObject external_name = (NIL != prefixP) ? ((SubLObject) (com.cyc.cycjava.cycl.owl.owl_to_cycl.prefix_external_owl_name(unprefixed_external_name, ontology, import_parameters))) : unprefixed_external_name;
            SubLObject ontology_to_assert = (NIL != prefixP) ? ((SubLObject) (com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_ontology(import_parameters))) : ontology;
            return make_ternary_formula($$synonymousExternalConcept, v_term, ontology_to_assert, external_name);
        }
    }

    public static SubLObject get_synonymous_external_concept_sentence(final SubLObject v_term, final SubLObject ontology, final SubLObject unprefixed_external_name, final SubLObject import_parameters) {
        assert NIL != stringp(unprefixed_external_name) : "! stringp(unprefixed_external_name) " + ("Types.stringp(unprefixed_external_name) " + "CommonSymbols.NIL != Types.stringp(unprefixed_external_name) ") + unprefixed_external_name;
        final SubLObject prefixP = owl_to_cycl.owl_import_parameters_prefix_external_namesP(import_parameters);
        final SubLObject external_name = (NIL != prefixP) ? owl_to_cycl.prefix_external_owl_name(unprefixed_external_name, ontology, import_parameters) : unprefixed_external_name;
        final SubLObject ontology_to_assert = (NIL != prefixP) ? owl_to_cycl.owl_import_parameters_ontology(import_parameters) : ontology;
        return make_ternary_formula(owl_to_cycl.$$synonymousExternalConcept, v_term, ontology_to_assert, external_name);
    }

    public static final SubLObject prefix_external_owl_name_alt(SubLObject unprefixed_external_name, SubLObject ontology, SubLObject import_parameters) {
        {
            SubLObject uri = com.cyc.cycjava.cycl.owl.owl_to_cycl.uri_for_owl_ontology(ontology, import_parameters);
            SubLObject prefix = (uri.isString() && (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_abbreviate_prefixesP(import_parameters))) ? ((SubLObject) (com.cyc.cycjava.cycl.owl.owl_to_cycl.try_to_abbreviate_owl_uri(uri, import_parameters))) : NIL;
            if (NIL == uri) {
                prefix = $str_alt85$;
            } else {
                if (NIL == prefix) {
                    prefix = cconcatenate(uri, $str_alt200$_);
                } else {
                    if (!CHAR_colon.eql(string_utilities.last_char(prefix))) {
                        prefix = cconcatenate(prefix, $str_alt352$_);
                    }
                }
            }
            return cconcatenate(prefix, unprefixed_external_name);
        }
    }

    public static SubLObject prefix_external_owl_name(final SubLObject unprefixed_external_name, final SubLObject ontology, final SubLObject import_parameters) {
        final SubLObject uri = owl_to_cycl.uri_for_owl_ontology(ontology, import_parameters);
        SubLObject prefix = (uri.isString() && (NIL != owl_to_cycl.owl_import_parameters_abbreviate_prefixesP(import_parameters))) ? owl_to_cycl.try_to_abbreviate_owl_uri(uri, import_parameters) : NIL;
        if (NIL == uri) {
            prefix = owl_to_cycl.$str92$;
        } else
            if (NIL == prefix) {
                prefix = cconcatenate(uri, owl_to_cycl.$str216$_);
            } else
                if (!CHAR_colon.eql(last_char(prefix))) {
                    prefix = cconcatenate(prefix, owl_to_cycl.$str366$_);
                }


        return cconcatenate(prefix, unprefixed_external_name);
    }

    public static final SubLObject uri_for_owl_ontology_alt(SubLObject ontology, SubLObject import_parameters) {
        {
            SubLObject el_ontology = cycl_utilities.hl_to_el(ontology);
            return el_ontology.equal(cycl_utilities.hl_to_el(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_ontology(import_parameters))) ? ((SubLObject) (com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_base_uri(import_parameters))) : com.cyc.cycjava.cycl.owl.owl_to_cycl.get_uri_for_owl_ontology(el_ontology);
        }
    }

    public static SubLObject uri_for_owl_ontology(final SubLObject ontology, final SubLObject import_parameters) {
        final SubLObject el_ontology = hl_to_el(ontology);
        return el_ontology.equal(hl_to_el(owl_to_cycl.owl_import_parameters_ontology(import_parameters))) ? owl_to_cycl.owl_import_parameters_base_uri(import_parameters) : owl_to_cycl.get_uri_for_owl_ontology(el_ontology);
    }

    public static final SubLObject get_uri_for_owl_ontology_alt(SubLObject ontology) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            thread.resetMultipleValues();
            {
                SubLObject success = formula_pattern_match.formula_matches_pattern(ontology, $list_alt353);
                SubLObject v_bindings = thread.secondMultipleValue();
                thread.resetMultipleValues();
                if (NIL != success) {
                    {
                        SubLObject arg1 = list_utilities.alist_lookup_without_values(v_bindings, ARG1, UNPROVIDED, UNPROVIDED);
                        return com.cyc.cycjava.cycl.owl.owl_to_cycl.stringify_uri(arg1);
                    }
                }
            }
            {
                SubLObject sentence = listS($$owlDefiningOntologyURI, ontology, $list_alt356);
                SubLObject mt = $$OWLMappingMt;
                SubLObject result = ask_utilities.query_variable($sym334$_URI, sentence, mt, $list_alt357);
                SubLObject uri = NIL;
                if (NIL != list_utilities.non_empty_list_p(result)) {
                    uri = com.cyc.cycjava.cycl.owl.owl_to_cycl.stringify_uri(result.first());
                }
                return uri;
            }
        }
    }

    public static SubLObject get_uri_for_owl_ontology(final SubLObject ontology) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        final SubLObject success = formula_matches_pattern(ontology, owl_to_cycl.$list367);
        final SubLObject v_bindings = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (NIL != success) {
            final SubLObject arg1 = alist_lookup_without_values(v_bindings, ARG1, UNPROVIDED, UNPROVIDED);
            return owl_to_cycl.stringify_uri(arg1);
        }
        final SubLObject sentence = listS(owl_to_cycl.$$owlDefiningOntologyURI, ontology, owl_to_cycl.$list370);
        final SubLObject mt = owl_to_cycl.$$OWLMappingMt;
        final SubLObject result = query_variable(owl_to_cycl.$sym350$_URI, sentence, mt, owl_to_cycl.$list371);
        SubLObject uri = NIL;
        if (NIL != non_empty_list_p(result)) {
            uri = owl_to_cycl.stringify_uri(result.first());
        }
        return uri;
    }

    public static final SubLObject stringify_uri_alt(SubLObject uri) {
        if (uri.isString()) {
            return uri;
        } else {
            if (((NIL != cycl_grammar.cycl_nat_p(uri)) && cycl_utilities.nat_arg1(uri, UNPROVIDED).isString()) && ONE_INTEGER.eql(cycl_utilities.nat_arity(uri, UNPROVIDED))) {
                return cycl_utilities.nat_arg1(uri, UNPROVIDED);
            } else {
                return princ_to_string(uri);
            }
        }
    }

    public static SubLObject stringify_uri(final SubLObject uri) {
        if (uri.isString()) {
            return uri;
        }
        if (((NIL != cycl_nat_p(uri)) && nat_arg1(uri, UNPROVIDED).isString()) && ONE_INTEGER.eql(nat_arity(uri, UNPROVIDED))) {
            return nat_arg1(uri, UNPROVIDED);
        }
        return princ_to_string(uri);
    }

    public static final SubLObject try_to_abbreviate_owl_uri_internal_alt(SubLObject uri, SubLObject import_parameters) {
        SubLTrampolineFile.checkType(uri, STRINGP);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.try_to_abbreviate_owl_uri_recursive(uri, com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_ontology(import_parameters), NIL);
    }

    public static SubLObject try_to_abbreviate_owl_uri_internal(final SubLObject uri, final SubLObject import_parameters) {
        assert NIL != stringp(uri) : "! stringp(uri) " + ("Types.stringp(uri) " + "CommonSymbols.NIL != Types.stringp(uri) ") + uri;
        return owl_to_cycl.try_to_abbreviate_owl_uri_recursive(uri, owl_to_cycl.owl_import_parameters_ontology(import_parameters), NIL);
    }

    public static final SubLObject try_to_abbreviate_owl_uri_alt(SubLObject uri, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
                SubLObject caching_state = NIL;
                if (NIL == v_memoization_state) {
                    return com.cyc.cycjava.cycl.owl.owl_to_cycl.try_to_abbreviate_owl_uri_internal(uri, import_parameters);
                }
                caching_state = memoization_state.memoization_state_lookup(v_memoization_state, TRY_TO_ABBREVIATE_OWL_URI, UNPROVIDED);
                if (NIL == caching_state) {
                    caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), TRY_TO_ABBREVIATE_OWL_URI, TWO_INTEGER, NIL, EQUAL, UNPROVIDED);
                    memoization_state.memoization_state_put(v_memoization_state, TRY_TO_ABBREVIATE_OWL_URI, caching_state);
                }
                {
                    SubLObject sxhash = memoization_state.sxhash_calc_2(uri, import_parameters);
                    SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
                    if (collisions != $kw15$_MEMOIZED_ITEM_NOT_FOUND_) {
                        {
                            SubLObject cdolist_list_var = collisions;
                            SubLObject collision = NIL;
                            for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , collision = cdolist_list_var.first()) {
                                {
                                    SubLObject cached_args = collision.first();
                                    SubLObject results2 = second(collision);
                                    if (uri.equal(cached_args.first())) {
                                        cached_args = cached_args.rest();
                                        if (((NIL != cached_args) && (NIL == cached_args.rest())) && import_parameters.equal(cached_args.first())) {
                                            return memoization_state.caching_results(results2);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    {
                        SubLObject results = arg2(thread.resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.owl.owl_to_cycl.try_to_abbreviate_owl_uri_internal(uri, import_parameters)));
                        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(uri, import_parameters));
                        return memoization_state.caching_results(results);
                    }
                }
            }
        }
    }

    public static SubLObject try_to_abbreviate_owl_uri(final SubLObject uri, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_memoization_state = $memoization_state$.getDynamicValue(thread);
        SubLObject caching_state = NIL;
        if (NIL == v_memoization_state) {
            return owl_to_cycl.try_to_abbreviate_owl_uri_internal(uri, import_parameters);
        }
        caching_state = memoization_state_lookup(v_memoization_state, owl_to_cycl.TRY_TO_ABBREVIATE_OWL_URI, UNPROVIDED);
        if (NIL == caching_state) {
            caching_state = create_caching_state(memoization_state_lock(v_memoization_state), owl_to_cycl.TRY_TO_ABBREVIATE_OWL_URI, TWO_INTEGER, NIL, EQUAL, UNPROVIDED);
            memoization_state_put(v_memoization_state, owl_to_cycl.TRY_TO_ABBREVIATE_OWL_URI, caching_state);
        }
        final SubLObject sxhash = sxhash_calc_2(uri, import_parameters);
        final SubLObject collisions = caching_state_lookup(caching_state, sxhash, UNPROVIDED);
        if (!collisions.eql($memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = NIL;
            collision = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = second(collision);
                if (uri.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (((NIL != cached_args) && (NIL == cached_args.rest())) && import_parameters.equal(cached_args.first())) {
                        return caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            } 
        }
        final SubLObject results3 = arg2(thread.resetMultipleValues(), multiple_value_list(owl_to_cycl.try_to_abbreviate_owl_uri_internal(uri, import_parameters)));
        caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(uri, import_parameters));
        return caching_results(results3);
    }

    public static final SubLObject load_namespace_transcripts_alt() {
        operation_communication.load_transcript_file($str_alt359$_cyc_top_transcripts_0953_jonny2_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        operation_communication.load_transcript_file($str_alt360$_cyc_top_transcripts_0953_vela_20, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        operation_communication.load_transcript_file($str_alt361$_cyc_top_transcripts_0953_vela_20, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        operation_communication.load_transcript_file($str_alt362$_cyc_top_transcripts_0953_jonny2_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        operation_communication.load_transcript_file($str_alt363$_cyc_top_transcripts_0953_jonny2_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        operation_communication.load_transcript_file($str_alt364$_cyc_top_transcripts_0953_jonny2_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        operation_communication.load_transcript_file($str_alt365$_cyc_top_transcripts_0953_jonny2_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        return NIL;
    }

    public static SubLObject load_namespace_transcripts() {
        load_transcript_file(owl_to_cycl.$str373$_cyc_top_transcripts_0953_jonny2_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        load_transcript_file(owl_to_cycl.$str374$_cyc_top_transcripts_0953_vela_20, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        load_transcript_file(owl_to_cycl.$str375$_cyc_top_transcripts_0953_vela_20, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        load_transcript_file(owl_to_cycl.$str376$_cyc_top_transcripts_0953_jonny2_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        load_transcript_file(owl_to_cycl.$str377$_cyc_top_transcripts_0953_jonny2_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        load_transcript_file(owl_to_cycl.$str378$_cyc_top_transcripts_0953_jonny2_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        load_transcript_file(owl_to_cycl.$str379$_cyc_top_transcripts_0953_jonny2_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        return NIL;
    }

    public static final SubLObject try_to_abbreviate_owl_uri_recursive_alt(SubLObject uri, SubLObject ontology, SubLObject recursedP) {
        {
            SubLObject var = $X;
            SubLObject abbreviation = NIL;
            {
                SubLObject sentence = list($$or, list($$nameSpacePrefixForSKS, ontology, var, uri), list($$nameSpacePrefixForSKS, ontology, var, list($$URIFn, uri)));
                SubLObject result = ask_utilities.query_variable(var, sentence, $$OWLMappingMt, $list_alt370);
                if (NIL != result) {
                    abbreviation = result.first();
                }
            }
            if (NIL == abbreviation) {
                {
                    SubLObject sentence = list($$or, list($$standardPrefixForURI, var, uri), list($$standardPrefixForURI, var, list($$URIFn, uri)));
                    SubLObject result = ask_utilities.query_variable(var, sentence, $$OWLMappingMt, $list_alt370);
                    if (NIL != result) {
                        abbreviation = result.first();
                    }
                }
            }
            if (!((NIL != abbreviation) || (NIL != recursedP))) {
                abbreviation = (string_utilities.last_char(uri).eql(CHAR_hash)) ? ((SubLObject) (com.cyc.cycjava.cycl.owl.owl_to_cycl.try_to_abbreviate_owl_uri_recursive(string_utilities.remove_last_char(uri, UNPROVIDED), ontology, T))) : com.cyc.cycjava.cycl.owl.owl_to_cycl.try_to_abbreviate_owl_uri_recursive(cconcatenate(uri, $str_alt200$_), ontology, T);
            }
            return abbreviation;
        }
    }

    public static SubLObject try_to_abbreviate_owl_uri_recursive(final SubLObject uri, final SubLObject ontology, final SubLObject recursedP) {
        final SubLObject var = $X;
        SubLObject abbreviation = NIL;
        SubLObject sentence = list(owl_to_cycl.$$or, list(owl_to_cycl.$$nameSpacePrefixForSKS, ontology, var, uri), list(owl_to_cycl.$$nameSpacePrefixForSKS, ontology, var, list(owl_to_cycl.$$URIFn, uri)));
        SubLObject result = query_variable(var, sentence, owl_to_cycl.$$OWLMappingMt, owl_to_cycl.$list384);
        if (NIL != result) {
            abbreviation = result.first();
        }
        if (NIL == abbreviation) {
            sentence = list(owl_to_cycl.$$or, list(owl_to_cycl.$$standardPrefixForURI, var, uri), list(owl_to_cycl.$$standardPrefixForURI, var, list(owl_to_cycl.$$URIFn, uri)));
            result = query_variable(var, sentence, owl_to_cycl.$$OWLMappingMt, owl_to_cycl.$list384);
            if (NIL != result) {
                abbreviation = result.first();
            }
        }
        if ((NIL == abbreviation) && (NIL == recursedP)) {
            abbreviation = (last_char(uri).eql(CHAR_hash)) ? owl_to_cycl.try_to_abbreviate_owl_uri_recursive(remove_last_char(uri, UNPROVIDED), ontology, T) : owl_to_cycl.try_to_abbreviate_owl_uri_recursive(cconcatenate(uri, owl_to_cycl.$str216$_), ontology, T);
        }
        return abbreviation;
    }

    public static final SubLObject owl_term_union(SubLObject terms) {
        {
            SubLObject list_var = terms;
            SubLTrampolineFile.checkType(list_var, NON_DOTTED_LIST_P);
            {
                SubLObject cdolist_list_var = list_var;
                SubLObject elem = NIL;
                for (elem = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , elem = cdolist_list_var.first()) {
                    SubLTrampolineFile.checkType(elem, CYCL_TERM_OR_OWL_QUASI_TERM_P);
                }
            }
        }
        return NIL != list_utilities.singletonP(terms) ? ((SubLObject) (list_utilities.only_one(terms))) : czer_main.canonicalize_term(list($$CollectionUnionFn, make_el_formula($$TheSet, terms, UNPROVIDED)), UNPROVIDED);
    }

    public static SubLObject owl_term_union(final SubLObject terms, final SubLObject import_parameters) {
        assert NIL != non_dotted_list_p(terms) : "! list_utilities.non_dotted_list_p(terms) " + ("list_utilities.non_dotted_list_p(terms) " + "CommonSymbols.NIL != list_utilities.non_dotted_list_p(terms) ") + terms;
        SubLObject cdolist_list_var = terms;
        SubLObject elem = NIL;
        elem = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            assert NIL != owl_to_cycl.cycl_term_or_owl_quasi_term_p(elem) : "! owl_to_cycl.cycl_term_or_owl_quasi_term_p(elem) " + ("owl_to_cycl.cycl_term_or_owl_quasi_term_p(elem) " + "CommonSymbols.NIL != owl_to_cycl.cycl_term_or_owl_quasi_term_p(elem) ") + elem;
            cdolist_list_var = cdolist_list_var.rest();
            elem = cdolist_list_var.first();
        } 
        return NIL != singletonP(terms) ? only_one(terms) : owl_to_cycl.owl_find_or_create_nat(list(owl_to_cycl.$$CollectionUnionFn, make_el_formula(owl_to_cycl.$$TheSet, terms, UNPROVIDED)), import_parameters);
    }

    public static final SubLObject cycl_term_or_owl_quasi_term_p_alt(SubLObject v_object) {
        return makeBoolean((NIL != cycl_grammar.cycl_term_p(v_object)) || ((NIL != list_utilities.proper_list_p(v_object)) && (NIL != cycl_utilities.expression_find_if(OWL_QUASI_TERM_P, v_object, UNPROVIDED, UNPROVIDED))));
    }

    public static SubLObject cycl_term_or_owl_quasi_term_p(final SubLObject v_object) {
        return makeBoolean((NIL != cycl_term_p(v_object)) || ((NIL != proper_list_p(v_object)) && (NIL != expression_find_if(owl_to_cycl.OWL_QUASI_TERM_P, v_object, UNPROVIDED, UNPROVIDED))));
    }

    public static final SubLObject owl_term_intersection(SubLObject terms) {
        {
            SubLObject list_var = terms;
            SubLTrampolineFile.checkType(list_var, NON_DOTTED_LIST_P);
            {
                SubLObject cdolist_list_var = list_var;
                SubLObject elem = NIL;
                for (elem = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , elem = cdolist_list_var.first()) {
                    SubLTrampolineFile.checkType(elem, CYCL_TERM_OR_OWL_QUASI_TERM_P);
                }
            }
        }
        return NIL != list_utilities.singletonP(terms) ? ((SubLObject) (list_utilities.only_one(terms))) : NIL != list_utilities.doubletonP(terms) ? ((SubLObject) (czer_main.canonicalize_term(bq_cons($$CollectionIntersection2Fn, terms), UNPROVIDED))) : czer_main.canonicalize_term(list($$CollectionIntersectionFn, make_el_formula($$TheSet, terms, UNPROVIDED)), UNPROVIDED);
    }

    public static SubLObject owl_term_intersection(final SubLObject terms, final SubLObject import_parameters) {
        assert NIL != non_dotted_list_p(terms) : "! list_utilities.non_dotted_list_p(terms) " + ("list_utilities.non_dotted_list_p(terms) " + "CommonSymbols.NIL != list_utilities.non_dotted_list_p(terms) ") + terms;
        SubLObject cdolist_list_var = terms;
        SubLObject elem = NIL;
        elem = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            assert NIL != owl_to_cycl.cycl_term_or_owl_quasi_term_p(elem) : "! owl_to_cycl.cycl_term_or_owl_quasi_term_p(elem) " + ("owl_to_cycl.cycl_term_or_owl_quasi_term_p(elem) " + "CommonSymbols.NIL != owl_to_cycl.cycl_term_or_owl_quasi_term_p(elem) ") + elem;
            cdolist_list_var = cdolist_list_var.rest();
            elem = cdolist_list_var.first();
        } 
        return NIL != singletonP(terms) ? only_one(terms) : NIL != doubletonP(terms) ? owl_to_cycl.owl_find_or_create_nat(bq_cons(owl_to_cycl.$$CollectionIntersection2Fn, terms), import_parameters) : owl_to_cycl.owl_find_or_create_nat(list(owl_to_cycl.$$CollectionIntersectionFn, make_el_formula(owl_to_cycl.$$TheSet, terms, UNPROVIDED)), import_parameters);
    }

    public static final SubLObject owl_term_enumeration(SubLObject terms) {
        {
            SubLObject list_var = terms;
            SubLTrampolineFile.checkType(list_var, NON_DOTTED_LIST_P);
            {
                SubLObject cdolist_list_var = list_var;
                SubLObject elem = NIL;
                for (elem = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , elem = cdolist_list_var.first()) {
                    SubLTrampolineFile.checkType(elem, CYCL_TERM_OR_OWL_QUASI_TERM_P);
                }
            }
        }
        return NIL != list_utilities.singletonP(terms) ? ((SubLObject) (list($$SingletonCollectionFn, list_utilities.only_one(terms)))) : czer_main.canonicalize_term(bq_cons($$TheCollection, terms), UNPROVIDED);
    }

    public static SubLObject owl_term_enumeration(final SubLObject terms, final SubLObject import_parameters) {
        assert NIL != non_dotted_list_p(terms) : "! list_utilities.non_dotted_list_p(terms) " + ("list_utilities.non_dotted_list_p(terms) " + "CommonSymbols.NIL != list_utilities.non_dotted_list_p(terms) ") + terms;
        SubLObject cdolist_list_var = terms;
        SubLObject elem = NIL;
        elem = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            assert NIL != owl_to_cycl.cycl_term_or_owl_quasi_term_p(elem) : "! owl_to_cycl.cycl_term_or_owl_quasi_term_p(elem) " + ("owl_to_cycl.cycl_term_or_owl_quasi_term_p(elem) " + "CommonSymbols.NIL != owl_to_cycl.cycl_term_or_owl_quasi_term_p(elem) ") + elem;
            cdolist_list_var = cdolist_list_var.rest();
            elem = cdolist_list_var.first();
        } 
        return owl_to_cycl.owl_find_or_create_nat(NIL != singletonP(terms) ? list(owl_to_cycl.$$SingletonCollectionFn, only_one(terms)) : bq_cons(owl_to_cycl.$$TheCollection, terms), import_parameters);
    }

    public static final SubLObject oip_pred_prefix_alt(SubLObject import_parameters) {
        return string_utilities.downcase_leading(com.cyc.cycjava.cycl.owl.owl_to_cycl.oip_constant_prefix(import_parameters));
    }

    public static SubLObject oip_pred_prefix(final SubLObject import_parameters) {
        return downcase_leading(owl_to_cycl.oip_constant_prefix(import_parameters));
    }

    public static final SubLObject owl_define_one_pred_alt(SubLObject pred_info, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject pred_name = com.cyc.cycjava.cycl.owl.owl_to_cycl.opi_cyc_name(pred_info);
                SubLObject external_name = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_lookup(pred_info, $EXTERNAL_NAME, UNPROVIDED);
                SubLObject isas = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_types_from_info(pred_info, import_parameters);
                SubLObject defining_mt = $$UniversalVocabularyMt;
                SubLObject unconstrainedP = NIL;
                SubLObject pred = NIL;
                SubLObject item_var = $$OWLProperty;
                if (NIL == member(item_var, isas, $sym380$SPEC_, symbol_function(IDENTITY))) {
                    isas = cons(item_var, isas);
                }
                if (!(((NIL != member(external_name, $cyc_properties_to_not_import$.getGlobalValue(), symbol_function(EQUAL), UNPROVIDED)) && com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_base_uri(import_parameters).isString()) && (NIL != string_utilities.substringP($str_alt278$cyc_com, com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_base_uri(import_parameters), UNPROVIDED, UNPROVIDED, UNPROVIDED)))) {
                    pred = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_pred(external_name, import_parameters);
                    if (NIL == pred) {
                        {
                            SubLObject guid_string = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_lookup(pred_info, $GUID, NIL);
                            if (NIL != Guids.guid_string_p(guid_string)) {
                                pred = constants_high.find_constant_by_guid_string(guid_string);
                            }
                        }
                    }
                    if (NIL == pred) {
                        {
                            SubLObject externalid_string = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_lookup(pred_info, $EXTERNALID, NIL);
                            if (NIL != kb_utilities.compact_hl_external_id_string_p(externalid_string)) {
                                pred = kb_utilities.find_object_by_compact_hl_external_id_string(externalid_string);
                            }
                        }
                    }
                    if (NIL != pred) {
                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt381$Potentially_adding_assertions_to_, $str_alt223$__ }), pred);
                            force_output(UNPROVIDED);
                        }
                        {
                            SubLObject cdolist_list_var = isas;
                            SubLObject v_isa = NIL;
                            for (v_isa = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , v_isa = cdolist_list_var.first()) {
                                com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(list($$isa, pred, v_isa), defining_mt, import_parameters);
                            }
                        }
                    }
                    if (NIL == pred) {
                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt383$__Creating_predicate_from__S__, $str_alt223$__ }), pred_info);
                            force_output(UNPROVIDED);
                        }
                        pred = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_create(pred_name, isas, defining_mt, $str_alt85$, NIL, import_parameters);
                    }
                    if (NIL == pred) {
                        if (NIL != owl_utilities.owl_warnP()) {
                            Errors.warn($str_alt384$Failed_to_find_or_create_a_predic, pred_name);
                        }
                    } else {
                        unconstrainedP = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_define_one_pred_internal(pred, pred_info, import_parameters);
                    }
                }
                return values(pred, unconstrainedP);
            }
        }
    }

    public static SubLObject owl_define_one_pred(final SubLObject pred_info, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject pred_name = owl_to_cycl.opi_cyc_name(pred_info);
        final SubLObject external_name = owl_to_cycl.owl_pred_info_plist_lookup(pred_info, $EXTERNAL_NAME, UNPROVIDED);
        final SubLObject suffix = owl_to_cycl.owl_import_parameters_constant_suffix(import_parameters);
        SubLObject isas = owl_to_cycl.owl_pred_types_from_info(pred_info, import_parameters);
        final SubLObject defining_mt = owl_to_cycl.$$UniversalVocabularyMt;
        SubLObject unconstrainedP = NIL;
        SubLObject pred = NIL;
        final SubLObject item_var = owl_to_cycl.$$OWLProperty;
        if (NIL == member(item_var, isas, owl_to_cycl.$sym394$SPEC_, symbol_function(IDENTITY))) {
            isas = cons(item_var, isas);
        }
        if (((NIL == member(external_name, owl_to_cycl.$cyc_properties_to_not_import$.getGlobalValue(), symbol_function(EQUAL), UNPROVIDED)) || (!owl_to_cycl.owl_import_parameters_base_uri(import_parameters).isString())) || (NIL == substringP(owl_to_cycl.$str294$cyc_com, owl_to_cycl.owl_import_parameters_base_uri(import_parameters), UNPROVIDED, UNPROVIDED, UNPROVIDED))) {
            pred = owl_to_cycl.owl_find_pred(external_name, import_parameters);
            if (NIL == pred) {
                final SubLObject guid_string = owl_to_cycl.owl_pred_info_plist_lookup(pred_info, $GUID, NIL);
                if (NIL != Guids.guid_string_p(guid_string)) {
                    pred = find_constant_by_guid_string(guid_string);
                }
            }
            if (NIL == pred) {
                final SubLObject externalid_string = owl_to_cycl.owl_pred_info_plist_lookup(pred_info, $EXTERNALID, NIL);
                if (NIL != compact_hl_external_id_string_p(externalid_string)) {
                    pred = find_object_by_compact_hl_external_id_string(externalid_string);
                }
            }
            if (NIL != pred) {
                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str395$Potentially_adding_assertions_to_, owl_to_cycl.$str239$__ }), pred);
                    force_output(UNPROVIDED);
                }
                SubLObject cdolist_list_var = isas;
                SubLObject v_isa = NIL;
                v_isa = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    owl_to_cycl.owl_enqueue_assert(list(owl_to_cycl.$$isa, pred, v_isa), defining_mt, import_parameters);
                    cdolist_list_var = cdolist_list_var.rest();
                    v_isa = cdolist_list_var.first();
                } 
            }
            if (NIL == pred) {
                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str397$__Creating_predicate_from__S__, owl_to_cycl.$str239$__ }), pred_info);
                    force_output(UNPROVIDED);
                }
                pred = owl_to_cycl.owl_create(pred_name, isas, defining_mt, owl_to_cycl.$str92$, suffix, NIL, import_parameters);
            }
            if (NIL == pred) {
                if (NIL != owl_utilities.owl_warnP()) {
                    Errors.warn(owl_to_cycl.$str398$Failed_to_find_or_create_a_predic, pred_name);
                }
            } else {
                unconstrainedP = owl_to_cycl.owl_define_one_pred_internal(pred, pred_info, import_parameters);
            }
        }
        return values(pred, unconstrainedP);
    }

    public static final SubLObject owl_pred_types_from_info_alt(SubLObject pred_info, SubLObject import_parameters) {
        {
            SubLObject types = NIL;
            SubLObject cdolist_list_var = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_lookup(pred_info, $ISAS, NIL);
            SubLObject v_isa = NIL;
            for (v_isa = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , v_isa = cdolist_list_var.first()) {
                {
                    SubLObject isa_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_for_class(v_isa, import_parameters);
                    types = cons(isa_term, types);
                }
            }
            if (T.eql(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_lookup(pred_info, $SYMMETRIC_, NIL))) {
                types = cons($$OWLSymmetricProperty, types);
            }
            return delete_duplicates(types, symbol_function(EQUAL), UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
    }

    public static SubLObject owl_pred_types_from_info(final SubLObject pred_info, final SubLObject import_parameters) {
        SubLObject types = NIL;
        SubLObject cdolist_list_var = owl_to_cycl.owl_pred_info_plist_lookup(pred_info, $ISAS, NIL);
        SubLObject v_isa = NIL;
        v_isa = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject isa_term = owl_to_cycl.owl_find_or_create_term_for_class(v_isa, import_parameters);
            types = cons(isa_term, types);
            cdolist_list_var = cdolist_list_var.rest();
            v_isa = cdolist_list_var.first();
        } 
        if (T.eql(owl_to_cycl.owl_pred_info_plist_lookup(pred_info, $SYMMETRIC_, NIL))) {
            types = cons(owl_to_cycl.$const399$owl_SymmetricProperty, types);
        }
        return delete_duplicates(types, symbol_function(EQUAL), UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject owl_term_types_from_info_alt(SubLObject term_info, SubLObject import_parameters) {
        {
            SubLObject types = NIL;
            SubLObject cdolist_list_var = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_lookup(term_info, $ISAS, NIL);
            SubLObject v_isa = NIL;
            for (v_isa = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , v_isa = cdolist_list_var.first()) {
                {
                    SubLObject isa_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_for_class(v_isa, import_parameters);
                    types = cons(isa_term, types);
                }
            }
            return delete_duplicates(types, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
    }

    public static SubLObject owl_term_types_from_info(final SubLObject term_info, final SubLObject import_parameters) {
        SubLObject types = NIL;
        SubLObject cdolist_list_var = owl_to_cycl.owl_term_info_plist_lookup(term_info, $ISAS, NIL);
        SubLObject v_isa = NIL;
        v_isa = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject isa_term = owl_to_cycl.owl_find_or_create_term_for_class(v_isa, import_parameters);
            types = cons(isa_term, types);
            cdolist_list_var = cdolist_list_var.rest();
            v_isa = cdolist_list_var.first();
        } 
        return delete_duplicates(types, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject owl_define_one_pred_internal_alt(SubLObject pred, SubLObject pred_info, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject range = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_range(pred_info);
                SubLObject external_name = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_lookup(pred_info, $EXTERNAL_NAME, UNPROVIDED);
                SubLObject ontology = com.cyc.cycjava.cycl.owl.owl_to_cycl.oip_ontology(import_parameters);
                SubLObject ontology_context = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_ontology_context(import_parameters);
                SubLObject unconstrainedP = NIL;
                com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(list($$quotedIsa, pred, com.cyc.cycjava.cycl.owl.owl_to_cycl.oip_quoted_isa(import_parameters)), $$BookkeepingMt, import_parameters);
                if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.nonlocal_owl_term_reference_p(external_name)) {
                    {
                        SubLObject datum = external_name.rest();
                        SubLObject current = datum;
                        SubLObject uri = NIL;
                        SubLObject name = NIL;
                        destructuring_bind_must_consp(current, datum, $list_alt342);
                        uri = current.first();
                        current = current.rest();
                        destructuring_bind_must_consp(current, datum, $list_alt342);
                        name = current.first();
                        current = current.rest();
                        if (NIL == current) {
                            ontology = com.cyc.cycjava.cycl.owl.owl_to_cycl.find_or_create_owl_ontology_for_uri(uri, import_parameters, UNPROVIDED);
                            external_name = name;
                        } else {
                            cdestructuring_bind_error(datum, $list_alt342);
                        }
                    }
                }
                com.cyc.cycjava.cycl.owl.owl_to_cycl.assert_synonymous_external_concept(pred, ontology, external_name, import_parameters);
                if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_domains(pred_info)) {
                    {
                        SubLObject pred_arg1isa = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_pred_arg_isa(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_domains(pred_info), import_parameters);
                        com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(list($const386$rdfs_domain, pred, pred_arg1isa), ontology_context, import_parameters);
                    }
                } else {
                    com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(listS($const386$rdfs_domain, pred, $list_alt387), ontology_context, import_parameters);
                    unconstrainedP = T;
                }
                {
                    SubLObject pred_arg2isa = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_arg2isa_from_range(range, import_parameters);
                    if (NIL != pred_arg2isa) {
                        com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(list($const388$rdfs_range, pred, pred_arg2isa), ontology_context, import_parameters);
                    } else {
                        com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(listS($const388$rdfs_range, pred, $list_alt387), ontology_context, import_parameters);
                        unconstrainedP = T;
                    }
                }
                if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_comment(pred_info)) {
                    com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(list($const104$rdfs_comment, pred, com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_comment(pred_info)), ontology_context, import_parameters);
                }
                {
                    SubLObject cdolist_list_var = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_lookup(pred_info, $LABEL, NIL);
                    SubLObject value = NIL;
                    for (value = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , value = cdolist_list_var.first()) {
                        com.cyc.cycjava.cycl.owl.owl_to_cycl.assert_owl_label(pred, value, import_parameters);
                    }
                }
                {
                    SubLObject genl_property_name = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_lookup(pred_info, $GENL_PROPERTY, NIL);
                    SubLObject genl_property = (NIL != genl_property_name) ? ((SubLObject) (com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_pred(genl_property_name, import_parameters))) : NIL;
                    if (NIL != genl_property) {
                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt389$Asserting_genl_property__S_of__S, $str_alt223$__ }), genl_property, pred);
                            force_output(UNPROVIDED);
                        }
                        com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(list($const390$rdfs_subPropertyOf, pred, genl_property), ontology_context, import_parameters);
                    } else {
                        if (NIL != genl_property_name) {
                            com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_note_spec_property(pred, genl_property_name);
                        }
                    }
                }
                {
                    SubLObject cdolist_list_var = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_lookup_spec_properties(external_name);
                    SubLObject spec_property = NIL;
                    for (spec_property = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , spec_property = cdolist_list_var.first()) {
                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt391$Asserting_spec_property__S_of__S, $str_alt223$__ }), spec_property, pred);
                            force_output(UNPROVIDED);
                        }
                        com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(list($const390$rdfs_subPropertyOf, spec_property, pred), ontology_context, import_parameters);
                    }
                }
                if (!$$InverseBinaryPredicateFn.eql(cycl_utilities.nat_functor(pred))) {
                    {
                        SubLObject inverse = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_lookup(pred_info, $INVERSE, NIL);
                        if (NIL != inverse) {
                            if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.nonlocal_owl_term_reference_p(inverse)) {
                                {
                                    SubLObject datum = inverse.rest();
                                    SubLObject current = datum;
                                    SubLObject uri = NIL;
                                    SubLObject name = NIL;
                                    destructuring_bind_must_consp(current, datum, $list_alt342);
                                    uri = current.first();
                                    current = current.rest();
                                    destructuring_bind_must_consp(current, datum, $list_alt342);
                                    name = current.first();
                                    current = current.rest();
                                    if (NIL == current) {
                                        ontology = com.cyc.cycjava.cycl.owl.owl_to_cycl.find_or_create_owl_ontology_for_uri(uri, import_parameters, UNPROVIDED);
                                        inverse = name;
                                    } else {
                                        cdestructuring_bind_error(datum, $list_alt342);
                                    }
                                }
                            }
                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt393$Asserting_inverse__S_of__S, $str_alt223$__ }), inverse, pred);
                                force_output(UNPROVIDED);
                            }
                            {
                                SubLObject inverse_term = list($$InverseBinaryPredicateFn, pred);
                                SubLObject existsP = narts_high.find_nart(inverse_term);
                                com.cyc.cycjava.cycl.owl.owl_to_cycl.assert_synonymous_external_concept(inverse_term, ontology, inverse, import_parameters);
                                if (NIL == existsP) {
                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(list($$quotedIsa, inverse_term, com.cyc.cycjava.cycl.owl.owl_to_cycl.oip_quoted_isa(import_parameters)), $$BookkeepingMt, import_parameters);
                                }
                            }
                        }
                    }
                }
                {
                    SubLObject cdolist_list_var = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_lookup(pred_info, $EQUIVALENT_PROPERTIES, NIL);
                    SubLObject equivalent_property_name = NIL;
                    for (equivalent_property_name = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , equivalent_property_name = cdolist_list_var.first()) {
                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt394$Asserting_equivalent_property__S_, $str_alt223$__ }), equivalent_property_name, pred);
                            force_output(UNPROVIDED);
                        }
                        {
                            SubLObject equivalent_property_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_of_type(equivalent_property_name, $$OWLProperty, import_parameters);
                            SubLObject existsP = list_utilities.sublisp_boolean(equivalent_property_term);
                            if (NIL == existsP) {
                                Errors.warn($str_alt395$Couldn_t_find_equivalent_property, equivalent_property_name);
                            }
                            com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(list($const396$owl_equivalentProperty, pred, equivalent_property_term), ontology_context, import_parameters);
                        }
                    }
                }
                {
                    SubLObject cdolist_list_var = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_pred_info_plist_lookup(pred_info, $MY_PRED_VALUES, UNPROVIDED);
                    SubLObject pair = NIL;
                    for (pair = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , pair = cdolist_list_var.first()) {
                        {
                            SubLObject datum = pair;
                            SubLObject current = datum;
                            SubLObject property_name = NIL;
                            SubLObject value = NIL;
                            destructuring_bind_must_consp(current, datum, $list_alt397);
                            property_name = current.first();
                            current = current.rest();
                            destructuring_bind_must_consp(current, datum, $list_alt397);
                            value = current.first();
                            current = current.rest();
                            if (NIL == current) {
                                {
                                    SubLObject arg0_pred = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_of_type(property_name, $$OWLProperty, import_parameters);
                                    SubLObject sentence = make_binary_formula(arg0_pred, pred, value);
                                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                        format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt398$__Asserting__S__, $str_alt223$__ }), sentence);
                                        force_output(UNPROVIDED);
                                    }
                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(sentence, ontology_context, import_parameters);
                                }
                            } else {
                                cdestructuring_bind_error(datum, $list_alt397);
                            }
                        }
                    }
                }
                return unconstrainedP;
            }
        }
    }

    public static SubLObject owl_define_one_pred_internal(final SubLObject pred, final SubLObject pred_info, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject range = owl_to_cycl.owl_pred_info_range(pred_info);
        SubLObject external_name = owl_to_cycl.owl_pred_info_plist_lookup(pred_info, $EXTERNAL_NAME, UNPROVIDED);
        SubLObject ontology = owl_to_cycl.oip_ontology(import_parameters);
        final SubLObject ontology_context = owl_to_cycl.owl_import_parameters_ontology_context(import_parameters);
        SubLObject unconstrainedP = NIL;
        owl_to_cycl.owl_enqueue_assert(list(owl_to_cycl.$$quotedIsa, pred, owl_to_cycl.oip_quoted_isa(import_parameters)), owl_to_cycl.$$BookkeepingMt, import_parameters);
        if (NIL != owl_to_cycl.nonlocal_owl_term_reference_p(external_name)) {
            SubLObject current;
            final SubLObject datum = current = external_name.rest();
            SubLObject uri = NIL;
            SubLObject name = NIL;
            destructuring_bind_must_consp(current, datum, owl_to_cycl.$list400);
            uri = current.first();
            current = current.rest();
            destructuring_bind_must_consp(current, datum, owl_to_cycl.$list400);
            name = current.first();
            current = current.rest();
            if (NIL == current) {
                ontology = owl_to_cycl.find_or_create_owl_ontology_for_uri(uri, import_parameters, UNPROVIDED);
                external_name = name;
            } else {
                cdestructuring_bind_error(datum, owl_to_cycl.$list400);
            }
        }
        owl_to_cycl.assert_synonymous_external_concept(pred, ontology, external_name, import_parameters);
        if (NIL != owl_to_cycl.owl_pred_info_domains(pred_info)) {
            final SubLObject pred_arg1isa = owl_to_cycl.owl_find_or_create_pred_arg_isa(owl_to_cycl.owl_pred_info_domains(pred_info), import_parameters);
            owl_to_cycl.owl_enqueue_assert(list(owl_to_cycl.$const401$rdfs_domain, pred, pred_arg1isa), ontology_context, import_parameters);
        } else {
            owl_to_cycl.owl_enqueue_assert(listS(owl_to_cycl.$const401$rdfs_domain, pred, owl_to_cycl.$list402), ontology_context, import_parameters);
            unconstrainedP = T;
        }
        final SubLObject pred_arg2isa = owl_to_cycl.owl_arg2isa_from_range(range, import_parameters);
        if (NIL != pred_arg2isa) {
            owl_to_cycl.owl_enqueue_assert(list(owl_to_cycl.$const403$rdfs_range, pred, pred_arg2isa), ontology_context, import_parameters);
        } else {
            owl_to_cycl.owl_enqueue_assert(listS(owl_to_cycl.$const403$rdfs_range, pred, owl_to_cycl.$list402), ontology_context, import_parameters);
            unconstrainedP = T;
        }
        if (NIL != owl_to_cycl.owl_pred_info_comment(pred_info)) {
            owl_to_cycl.owl_enqueue_assert(list(owl_to_cycl.$const112$rdfs_comment, pred, owl_to_cycl.owl_pred_info_comment(pred_info)), ontology_context, import_parameters);
        }
        SubLObject cdolist_list_var = owl_to_cycl.owl_pred_info_plist_lookup(pred_info, $LABEL, NIL);
        SubLObject value = NIL;
        value = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            owl_to_cycl.assert_owl_label(pred, value, import_parameters);
            cdolist_list_var = cdolist_list_var.rest();
            value = cdolist_list_var.first();
        } 
        final SubLObject genl_property_name = owl_to_cycl.owl_pred_info_plist_lookup(pred_info, $GENL_PROPERTY, NIL);
        final SubLObject genl_property = (NIL != genl_property_name) ? owl_to_cycl.owl_find_pred(genl_property_name, import_parameters) : NIL;
        if (NIL != genl_property) {
            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str404$Asserting_genl_property__S_of__S, owl_to_cycl.$str239$__ }), genl_property, pred);
                force_output(UNPROVIDED);
            }
            owl_to_cycl.owl_enqueue_assert(list(owl_to_cycl.$const405$rdfs_subPropertyOf, pred, genl_property), ontology_context, import_parameters);
        } else
            if (NIL != genl_property_name) {
                owl_to_cycl.owl_note_spec_property(pred, genl_property_name);
            }

        cdolist_list_var = owl_to_cycl.owl_lookup_spec_properties(external_name);
        SubLObject spec_property = NIL;
        spec_property = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str406$Asserting_spec_property__S_of__S, owl_to_cycl.$str239$__ }), spec_property, pred);
                force_output(UNPROVIDED);
            }
            owl_to_cycl.owl_enqueue_assert(list(owl_to_cycl.$const405$rdfs_subPropertyOf, spec_property, pred), ontology_context, import_parameters);
            cdolist_list_var = cdolist_list_var.rest();
            spec_property = cdolist_list_var.first();
        } 
        if (!owl_to_cycl.$$InverseBinaryPredicateFn.eql(nat_functor(pred))) {
            SubLObject inverse = owl_to_cycl.owl_pred_info_plist_lookup(pred_info, $INVERSE, NIL);
            if (NIL != inverse) {
                if (NIL != owl_to_cycl.nonlocal_owl_term_reference_p(inverse)) {
                    SubLObject current2;
                    final SubLObject datum2 = current2 = inverse.rest();
                    SubLObject uri2 = NIL;
                    SubLObject name2 = NIL;
                    destructuring_bind_must_consp(current2, datum2, owl_to_cycl.$list400);
                    uri2 = current2.first();
                    current2 = current2.rest();
                    destructuring_bind_must_consp(current2, datum2, owl_to_cycl.$list400);
                    name2 = current2.first();
                    current2 = current2.rest();
                    if (NIL == current2) {
                        ontology = owl_to_cycl.find_or_create_owl_ontology_for_uri(uri2, import_parameters, UNPROVIDED);
                        inverse = name2;
                    } else {
                        cdestructuring_bind_error(datum2, owl_to_cycl.$list400);
                    }
                }
                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str408$Asserting_inverse__S_of__S, owl_to_cycl.$str239$__ }), inverse, pred);
                    force_output(UNPROVIDED);
                }
                final SubLObject inverse_term = list(owl_to_cycl.$$InverseBinaryPredicateFn, pred);
                final SubLObject existsP = find_nart(inverse_term);
                owl_to_cycl.assert_synonymous_external_concept(inverse_term, ontology, inverse, import_parameters);
                if (NIL == existsP) {
                    owl_to_cycl.owl_enqueue_assert(list(owl_to_cycl.$$quotedIsa, inverse_term, owl_to_cycl.oip_quoted_isa(import_parameters)), owl_to_cycl.$$BookkeepingMt, import_parameters);
                }
            }
        }
        cdolist_list_var = owl_to_cycl.owl_pred_info_plist_lookup(pred_info, $EQUIVALENT_PROPERTIES, NIL);
        SubLObject equivalent_property_name = NIL;
        equivalent_property_name = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str409$Asserting_equivalent_property__S_, owl_to_cycl.$str239$__ }), equivalent_property_name, pred);
                force_output(UNPROVIDED);
            }
            final SubLObject equivalent_property_term = owl_to_cycl.owl_find_or_create_term_of_type(equivalent_property_name, owl_to_cycl.$$OWLProperty, import_parameters);
            final SubLObject existsP2 = sublisp_boolean(equivalent_property_term);
            if (NIL == existsP2) {
                Errors.warn(owl_to_cycl.$str410$Couldn_t_find_equivalent_property, equivalent_property_name);
            }
            owl_to_cycl.owl_enqueue_assert(list(owl_to_cycl.$const411$owl_equivalentProperty, pred, equivalent_property_term), ontology_context, import_parameters);
            cdolist_list_var = cdolist_list_var.rest();
            equivalent_property_name = cdolist_list_var.first();
        } 
        cdolist_list_var = owl_to_cycl.owl_pred_info_plist_lookup(pred_info, owl_to_cycl.$MY_PRED_VALUES, UNPROVIDED);
        SubLObject pair = NIL;
        pair = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            SubLObject current3;
            final SubLObject datum3 = current3 = pair;
            SubLObject property_name = NIL;
            SubLObject value2 = NIL;
            destructuring_bind_must_consp(current3, datum3, owl_to_cycl.$list412);
            property_name = current3.first();
            current3 = current3.rest();
            destructuring_bind_must_consp(current3, datum3, owl_to_cycl.$list412);
            value2 = current3.first();
            current3 = current3.rest();
            if (NIL == current3) {
                final SubLObject arg0_pred = owl_to_cycl.owl_find_or_create_term_of_type(property_name, owl_to_cycl.$$OWLProperty, import_parameters);
                final SubLObject sentence = make_binary_formula(arg0_pred, pred, value2);
                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str413$__Asserting__S__, owl_to_cycl.$str239$__ }), sentence);
                    force_output(UNPROVIDED);
                }
                owl_to_cycl.owl_enqueue_assert(sentence, ontology_context, import_parameters);
            } else {
                cdestructuring_bind_error(datum3, owl_to_cycl.$list412);
            }
            cdolist_list_var = cdolist_list_var.rest();
            pair = cdolist_list_var.first();
        } 
        return unconstrainedP;
    }

    /**
     * Determine if the Cyc predicate corresponding to PRED-NAME already exists.
     */
    @LispMethod(comment = "Determine if the Cyc predicate corresponding to PRED-NAME already exists.")
    public static final SubLObject owl_find_pred_alt(SubLObject pred_name, SubLObject import_parameters) {
        {
            SubLObject ontology = com.cyc.cycjava.cycl.owl.owl_to_cycl.oip_ontology(import_parameters);
            return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_term_of_type(pred_name, $$Predicate, import_parameters, ontology);
        }
    }

    /**
     * Determine if the Cyc predicate corresponding to PRED-NAME already exists.
     */
    @LispMethod(comment = "Determine if the Cyc predicate corresponding to PRED-NAME already exists.")
    public static SubLObject owl_find_pred(final SubLObject pred_name, final SubLObject import_parameters) {
        final SubLObject ontology = owl_to_cycl.oip_ontology(import_parameters);
        return owl_to_cycl.owl_find_term_of_type(pred_name, owl_to_cycl.$$Predicate, import_parameters, ontology);
    }

    /**
     * Determine if the Cyc collection corresponding to CLASS-NAME already
     * exists.
     */
    @LispMethod(comment = "Determine if the Cyc collection corresponding to CLASS-NAME already\r\nexists.\nDetermine if the Cyc collection corresponding to CLASS-NAME already\nexists.")
    public static final SubLObject owl_find_collection_alt(SubLObject class_name, SubLObject import_parameters) {
        {
            SubLObject ontology = com.cyc.cycjava.cycl.owl.owl_to_cycl.oip_ontology(import_parameters);
            return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_term_of_type(class_name, $$Collection, import_parameters, ontology);
        }
    }

    /**
     * Determine if the Cyc collection corresponding to CLASS-NAME already
     * exists.
     */
    @LispMethod(comment = "Determine if the Cyc collection corresponding to CLASS-NAME already\r\nexists.\nDetermine if the Cyc collection corresponding to CLASS-NAME already\nexists.")
    public static SubLObject owl_find_collection(final SubLObject class_name, final SubLObject import_parameters) {
        final SubLObject ontology = owl_to_cycl.oip_ontology(import_parameters);
        return owl_to_cycl.owl_find_term_of_type(class_name, owl_to_cycl.$$Collection, import_parameters, ontology);
    }

    public static final SubLObject note_owl_found_term_alt(SubLObject term_name, SubLObject ontology, SubLObject v_term) {
        return dictionary.dictionary_enter($owl_found_terms$.getGlobalValue(), list(term_name, ontology), v_term);
    }

    public static SubLObject note_owl_found_term(final SubLObject term_name, final SubLObject ontology, final SubLObject v_term) {
        return dictionary_enter(owl_to_cycl.$owl_found_terms$.getGlobalValue(), list(term_name, ontology), v_term);
    }

    public static final SubLObject clear_owl_found_terms_alt() {
        return dictionary.clear_dictionary($owl_found_terms$.getGlobalValue());
    }

    public static SubLObject clear_owl_found_terms() {
        return clear_dictionary(owl_to_cycl.$owl_found_terms$.getGlobalValue());
    }

    public static final SubLObject lookup_owl_found_term_alt(SubLObject term_name, SubLObject ontology) {
        {
            SubLObject key = list(term_name, ontology);
            SubLObject v_term = dictionary.dictionary_lookup_without_values($owl_found_terms$.getGlobalValue(), key, NIL);
            if (NIL != cycl_utilities.expression_find_if($sym400$INVALID_FORT_, v_term, UNPROVIDED, UNPROVIDED)) {
                dictionary.dictionary_remove($owl_found_terms$.getGlobalValue(), list(term_name, ontology));
                v_term = NIL;
            }
            return v_term;
        }
    }

    public static SubLObject lookup_owl_found_term(final SubLObject term_name, final SubLObject ontology) {
        final SubLObject key = list(term_name, ontology);
        SubLObject v_term = dictionary_lookup_without_values(owl_to_cycl.$owl_found_terms$.getGlobalValue(), key, NIL);
        if (NIL != expression_find_if(owl_to_cycl.$sym415$INVALID_FORT_, v_term, UNPROVIDED, UNPROVIDED)) {
            dictionary_remove(owl_to_cycl.$owl_found_terms$.getGlobalValue(), list(term_name, ontology));
            v_term = NIL;
        }
        return v_term;
    }

    /**
     * Determine if the Cyc term corresponding to TERM-NAME already exists.
     */
    @LispMethod(comment = "Determine if the Cyc term corresponding to TERM-NAME already exists.")
    public static final SubLObject owl_find_term_of_type_alt(SubLObject term_name, SubLObject type, SubLObject import_parameters, SubLObject ontology) {
        if (ontology == UNPROVIDED) {
            ontology = com.cyc.cycjava.cycl.owl.owl_to_cycl.oip_ontology(import_parameters);
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject found_term = NIL;
                if (term_name.isString() || (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.nonlocal_owl_term_reference_p(term_name))) {
                    found_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.lookup_owl_found_term(term_name, ontology);
                    if (NIL == found_term) {
                        {
                            SubLObject local_term_name = term_name;
                            SubLObject local_ontology = ontology;
                            if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.nonlocal_owl_term_reference_p(term_name)) {
                                {
                                    SubLObject datum = term_name.rest();
                                    SubLObject current = datum;
                                    SubLObject uri = NIL;
                                    SubLObject name = NIL;
                                    destructuring_bind_must_consp(current, datum, $list_alt342);
                                    uri = current.first();
                                    current = current.rest();
                                    destructuring_bind_must_consp(current, datum, $list_alt342);
                                    name = current.first();
                                    current = current.rest();
                                    if (NIL == current) {
                                        local_ontology = com.cyc.cycjava.cycl.owl.owl_to_cycl.find_or_create_owl_ontology_for_uri(uri, import_parameters, UNPROVIDED);
                                        local_term_name = name;
                                    } else {
                                        cdestructuring_bind_error(datum, $list_alt342);
                                    }
                                }
                            }
                            found_term = ask_utilities.query_template($sym401$_TERM, list($$synonymousExternalConcept, $sym401$_TERM, local_ontology, local_term_name), $$InferencePSC, $list_alt220).first();
                            if (NIL == found_term) {
                                {
                                    SubLObject sentence = com.cyc.cycjava.cycl.owl.owl_to_cycl.get_synonymous_external_concept_sentence($sym401$_TERM, local_ontology, local_term_name, import_parameters);
                                    found_term = ask_utilities.query_template($sym401$_TERM, sentence, $$InferencePSC, $list_alt220).first();
                                }
                            }
                        }
                        if (NIL != found_term) {
                            com.cyc.cycjava.cycl.owl.owl_to_cycl.note_owl_found_term(term_name, ontology, found_term);
                        } else {
                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt402$Couldn_t_find__S, $str_alt223$__ }), term_name);
                                force_output(UNPROVIDED);
                            }
                        }
                    }
                }
                return found_term;
            }
        }
    }

    /**
     * Determine if the Cyc term corresponding to TERM-NAME already exists.
     */
    @LispMethod(comment = "Determine if the Cyc term corresponding to TERM-NAME already exists.")
    public static SubLObject owl_find_term_of_type(final SubLObject term_name, final SubLObject type, final SubLObject import_parameters, SubLObject ontology) {
        if (ontology == UNPROVIDED) {
            ontology = owl_to_cycl.oip_ontology(import_parameters);
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject found_term = NIL;
        if (term_name.isString() || (NIL != owl_to_cycl.nonlocal_owl_term_reference_p(term_name))) {
            found_term = owl_to_cycl.lookup_owl_found_term(term_name, ontology);
            if (NIL == found_term) {
                SubLObject local_term_name = term_name;
                SubLObject local_ontology = ontology;
                if (NIL != owl_to_cycl.nonlocal_owl_term_reference_p(term_name)) {
                    SubLObject current;
                    final SubLObject datum = current = term_name.rest();
                    SubLObject uri = NIL;
                    SubLObject name = NIL;
                    destructuring_bind_must_consp(current, datum, owl_to_cycl.$list400);
                    uri = current.first();
                    current = current.rest();
                    destructuring_bind_must_consp(current, datum, owl_to_cycl.$list400);
                    name = current.first();
                    current = current.rest();
                    if (NIL == current) {
                        local_ontology = owl_to_cycl.find_or_create_owl_ontology_for_uri(uri, import_parameters, UNPROVIDED);
                        local_term_name = name;
                    } else {
                        cdestructuring_bind_error(datum, owl_to_cycl.$list400);
                    }
                }
                found_term = query_template(owl_to_cycl.$sym416$_TERM, list(owl_to_cycl.$$synonymousExternalConcept, owl_to_cycl.$sym416$_TERM, local_ontology, local_term_name), owl_to_cycl.$$InferencePSC, owl_to_cycl.$list236).first();
                if (NIL == found_term) {
                    final SubLObject sentence = owl_to_cycl.get_synonymous_external_concept_sentence(owl_to_cycl.$sym416$_TERM, local_ontology, local_term_name, import_parameters);
                    found_term = query_template(owl_to_cycl.$sym416$_TERM, sentence, owl_to_cycl.$$InferencePSC, owl_to_cycl.$list236).first();
                }
                if (NIL != found_term) {
                    owl_to_cycl.note_owl_found_term(term_name, ontology, found_term);
                } else
                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                        format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str417$Couldn_t_find__S, owl_to_cycl.$str239$__ }), term_name);
                        force_output(UNPROVIDED);
                    }

            }
        }
        return found_term;
    }

    public static final SubLObject owl_arg2isa_from_range_alt(SubLObject range, SubLObject import_parameters) {
        {
            SubLObject pred_arg2isa = NIL;
            if (NIL == range) {
                return NIL;
            } else {
                if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_value_specification_union_p(range)) {
                    {
                        SubLObject components = NIL;
                        SubLObject cdolist_list_var = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_value_specification_union_names(range);
                        SubLObject external_term = NIL;
                        for (external_term = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , external_term = cdolist_list_var.first()) {
                            components = cons(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_arg2isa_from_range(external_term, import_parameters), components);
                        }
                        pred_arg2isa = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_union(components);
                    }
                } else {
                    if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_value_specification_intersection_p(range)) {
                        {
                            SubLObject components = NIL;
                            SubLObject cdolist_list_var = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_value_specification_intersection_names(range);
                            SubLObject external_term = NIL;
                            for (external_term = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , external_term = cdolist_list_var.first()) {
                                {
                                    SubLObject component = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_arg2isa_from_range(external_term, import_parameters);
                                    SubLObject var = component;
                                    if (NIL != var) {
                                        components = cons(var, components);
                                    }
                                }
                            }
                            if (NIL != list_utilities.non_empty_list_p(components)) {
                                pred_arg2isa = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_intersection(components);
                            }
                        }
                    } else {
                        if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_term_enumeration_p(range)) {
                            {
                                SubLObject components = NIL;
                                SubLObject cdolist_list_var = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_term_enumeration_terms(range);
                                SubLObject external_term = NIL;
                                for (external_term = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , external_term = cdolist_list_var.first()) {
                                    components = cons(external_term, components);
                                }
                                pred_arg2isa = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_enumeration(components);
                            }
                        } else {
                            if (range.isString()) {
                                {
                                    SubLObject external_name = com.cyc.cycjava.cycl.owl.owl_to_cycl.process_owl_attribute_value(range);
                                    pred_arg2isa = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_pred_arg_isa(list(external_name), import_parameters);
                                }
                            } else {
                                pred_arg2isa = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_for_class(range, import_parameters);
                            }
                        }
                    }
                }
            }
            return pred_arg2isa;
        }
    }

    public static SubLObject owl_arg2isa_from_range(final SubLObject range, final SubLObject import_parameters) {
        SubLObject pred_arg2isa = NIL;
        if (NIL == range) {
            return NIL;
        }
        if (NIL != owl_to_cycl.owl_external_value_specification_union_p(range)) {
            SubLObject components = NIL;
            SubLObject cdolist_list_var = owl_to_cycl.owl_external_value_specification_union_names(range);
            SubLObject external_term = NIL;
            external_term = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                components = cons(owl_to_cycl.owl_arg2isa_from_range(external_term, import_parameters), components);
                cdolist_list_var = cdolist_list_var.rest();
                external_term = cdolist_list_var.first();
            } 
            pred_arg2isa = owl_to_cycl.owl_term_union(components, import_parameters);
        } else
            if (NIL != owl_to_cycl.owl_external_value_specification_intersection_p(range)) {
                SubLObject components = NIL;
                SubLObject cdolist_list_var = owl_to_cycl.owl_external_value_specification_intersection_names(range);
                SubLObject external_term = NIL;
                external_term = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    final SubLObject var;
                    final SubLObject component = var = owl_to_cycl.owl_arg2isa_from_range(external_term, import_parameters);
                    if (NIL != var) {
                        components = cons(var, components);
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    external_term = cdolist_list_var.first();
                } 
                if (NIL != non_empty_list_p(components)) {
                    pred_arg2isa = owl_to_cycl.owl_term_intersection(components, import_parameters);
                }
            } else
                if (NIL != owl_to_cycl.owl_external_term_enumeration_p(range)) {
                    SubLObject components = NIL;
                    SubLObject cdolist_list_var = owl_to_cycl.owl_external_term_enumeration_terms(range);
                    SubLObject external_term = NIL;
                    external_term = cdolist_list_var.first();
                    while (NIL != cdolist_list_var) {
                        components = cons(external_term, components);
                        cdolist_list_var = cdolist_list_var.rest();
                        external_term = cdolist_list_var.first();
                    } 
                    pred_arg2isa = owl_to_cycl.owl_term_enumeration(components, import_parameters);
                } else
                    if (range.isString()) {
                        final SubLObject external_name = owl_to_cycl.process_owl_attribute_value(range);
                        pred_arg2isa = owl_to_cycl.owl_find_or_create_pred_arg_isa(list(external_name), import_parameters);
                    } else {
                        pred_arg2isa = owl_to_cycl.owl_find_or_create_term_for_class(range, import_parameters);
                    }



        return pred_arg2isa;
    }

    public static final SubLObject note_owl_oe_queue_done_alt(SubLObject owl_oe_queue) {
        if (owl_oe_queue == UNPROVIDED) {
            owl_oe_queue = $owl_oe_queue$.getDynamicValue();
        }
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_oe_queue_enqueue_low($owl_oe_queue_end_marker$.getGlobalValue(), owl_oe_queue, NIL);
    }

    public static SubLObject note_owl_oe_queue_done(SubLObject owl_oe_queue) {
        if (owl_oe_queue == UNPROVIDED) {
            owl_oe_queue = owl_to_cycl.$owl_oe_queue$.getDynamicValue();
        }
        return owl_to_cycl.owl_oe_queue_enqueue_low(owl_to_cycl.$owl_oe_queue_end_marker$.getGlobalValue(), owl_oe_queue, NIL);
    }

    public static final SubLObject new_owl_oe_queue_alt() {
        {
            SubLObject owl_oe_queue = list(NIL, queues.create_queue(), com.cyc.cycjava.cycl.owl.owl_to_cycl.current_owl_importer());
            com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_oe_queue_enqueue_low($owl_oe_queue_marker$.getGlobalValue(), owl_oe_queue, NIL);
            $owl_oe_queues$.setGlobalValue(cons(owl_oe_queue, $owl_oe_queues$.getGlobalValue()));
            com.cyc.cycjava.cycl.owl.owl_to_cycl.ensure_owl_oe_daemon_running();
            return owl_oe_queue;
        }
    }

    public static SubLObject new_owl_oe_queue() {
        final SubLObject owl_oe_queue = list(NIL, create_queue(UNPROVIDED), owl_to_cycl.current_owl_importer());
        owl_to_cycl.owl_oe_queue_enqueue_low(owl_to_cycl.$owl_oe_queue_marker$.getGlobalValue(), owl_oe_queue, NIL);
        owl_to_cycl.$owl_oe_queues$.setGlobalValue(cons(owl_oe_queue, owl_to_cycl.$owl_oe_queues$.getGlobalValue()));
        owl_to_cycl.ensure_owl_oe_daemon_running();
        return owl_oe_queue;
    }

    public static final SubLObject owl_oe_queue_modified_flag_alt(SubLObject owl_oe_queue) {
        return owl_oe_queue.first();
    }

    public static SubLObject owl_oe_queue_modified_flag(final SubLObject owl_oe_queue) {
        return owl_oe_queue.first();
    }

    public static final SubLObject set_owl_oe_queue_modified_flag_alt(SubLObject owl_oe_queue, SubLObject value) {
        set_nth(ZERO_INTEGER, owl_oe_queue, list_utilities.sublisp_boolean(value));
        return owl_oe_queue;
    }

    public static SubLObject set_owl_oe_queue_modified_flag(final SubLObject owl_oe_queue, final SubLObject value) {
        set_nth(ZERO_INTEGER, owl_oe_queue, sublisp_boolean(value));
        return owl_oe_queue;
    }

    public static final SubLObject owl_oe_queue_modifiedP_alt(SubLObject owl_oe_queue) {
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_oe_queue_modified_flag(owl_oe_queue);
    }

    public static SubLObject owl_oe_queue_modifiedP(final SubLObject owl_oe_queue) {
        return owl_to_cycl.owl_oe_queue_modified_flag(owl_oe_queue);
    }

    public static final SubLObject owl_oe_queue_queue_alt(SubLObject owl_oe_queue) {
        return second(owl_oe_queue);
    }

    public static SubLObject owl_oe_queue_queue(final SubLObject owl_oe_queue) {
        return second(owl_oe_queue);
    }

    public static final SubLObject owl_oe_queue_importer_alt(SubLObject owl_oe_queue) {
        return third(owl_oe_queue);
    }

    public static SubLObject owl_oe_queue_importer(final SubLObject owl_oe_queue) {
        return third(owl_oe_queue);
    }

    public static final SubLObject ensure_owl_oe_daemon_running_alt() {
        if (NIL == valid_process_p($owl_oe_daemon$.getGlobalValue())) {
            com.cyc.cycjava.cycl.owl.owl_to_cycl.launch_owl_oe_queue_daemon();
        }
        return $owl_oe_daemon$.getGlobalValue();
    }

    public static SubLObject ensure_owl_oe_daemon_running() {
        if (NIL == valid_process_p(owl_to_cycl.$owl_oe_daemon$.getGlobalValue())) {
            owl_to_cycl.launch_owl_oe_queue_daemon();
        }
        return owl_to_cycl.$owl_oe_daemon$.getGlobalValue();
    }

    public static final SubLObject launch_owl_oe_queue_daemon_alt() {
        $owl_oe_daemon$.setGlobalValue(com.cyc.cycjava.cycl.owl.owl_to_cycl.new_owl_oe_daemon());
        return $owl_oe_daemon$.getGlobalValue();
    }

    public static SubLObject launch_owl_oe_queue_daemon() {
        owl_to_cycl.$owl_oe_daemon$.setGlobalValue(owl_to_cycl.new_owl_oe_daemon());
        return owl_to_cycl.$owl_oe_daemon$.getGlobalValue();
    }

    public static final SubLObject owl_oe_queue_enqueue_alt(SubLObject item, SubLObject owl_oe_queue) {
        if (owl_oe_queue == UNPROVIDED) {
            owl_oe_queue = $owl_oe_queue$.getDynamicValue();
        }
        {
            SubLObject queue = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_oe_queue_queue(owl_oe_queue);
            if (NIL == queues.queue_find(item, queue, symbol_function(EQUAL), UNPROVIDED)) {
                com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_oe_queue_enqueue_low(item, owl_oe_queue, T);
            }
        }
        return item;
    }

    public static SubLObject owl_oe_queue_enqueue(final SubLObject item, SubLObject owl_oe_queue) {
        if (owl_oe_queue == UNPROVIDED) {
            owl_oe_queue = owl_to_cycl.$owl_oe_queue$.getDynamicValue();
        }
        final SubLObject queue = owl_to_cycl.owl_oe_queue_queue(owl_oe_queue);
        if (NIL == queue_find(item, queue, symbol_function(EQUAL), UNPROVIDED)) {
            owl_to_cycl.owl_oe_queue_enqueue_low(item, owl_oe_queue, T);
        }
        return item;
    }

    public static final SubLObject owl_oe_queue_reenqueue_alt(SubLObject item, SubLObject owl_oe_queue) {
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_oe_queue_enqueue_low(item, owl_oe_queue, NIL);
    }

    public static SubLObject owl_oe_queue_reenqueue(final SubLObject item, final SubLObject owl_oe_queue) {
        return owl_to_cycl.owl_oe_queue_enqueue_low(item, owl_oe_queue, NIL);
    }

    public static final SubLObject owl_oe_queue_enqueue_low_alt(SubLObject item, SubLObject owl_oe_queue, SubLObject set_modified_flagP) {
        {
            SubLObject queue = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_oe_queue_queue(owl_oe_queue);
            queues.enqueue(item, queue);
            if (NIL != set_modified_flagP) {
                com.cyc.cycjava.cycl.owl.owl_to_cycl.set_owl_oe_queue_modified_flag(owl_oe_queue, T);
            }
        }
        return item;
    }

    public static SubLObject owl_oe_queue_enqueue_low(final SubLObject item, final SubLObject owl_oe_queue, final SubLObject set_modified_flagP) {
        final SubLObject queue = owl_to_cycl.owl_oe_queue_queue(owl_oe_queue);
        enqueue(item, queue);
        if (NIL != set_modified_flagP) {
            owl_to_cycl.set_owl_oe_queue_modified_flag(owl_oe_queue, T);
        }
        return item;
    }

    public static final SubLObject owl_node_id_index_alt() {
        if (NIL == dictionary.dictionary_p($owl_node_id_index$.getGlobalValue())) {
            $owl_node_id_index$.setGlobalValue(dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED));
        }
        return $owl_node_id_index$.getGlobalValue();
    }

    public static SubLObject owl_node_id_index() {
        if (NIL == dictionary_p(owl_to_cycl.$owl_node_id_index$.getGlobalValue())) {
            owl_to_cycl.$owl_node_id_index$.setGlobalValue(new_dictionary(symbol_function(EQUAL), UNPROVIDED));
        }
        return owl_to_cycl.$owl_node_id_index$.getGlobalValue();
    }

    public static final SubLObject note_node_id_reference_alt(SubLObject node_id, SubLObject value) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                if (value.equal(list($NODE_ID, node_id))) {
                    Errors.error($str_alt406$Circular_node_id_reference___S___, node_id, value);
                }
            }
            return dictionary.dictionary_enter(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_node_id_index(), node_id, value);
        }
    }

    public static SubLObject note_node_id_reference(final SubLObject node_id, final SubLObject value) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && value.equal(list($NODE_ID, node_id))) {
            Errors.error(owl_to_cycl.$str421$Circular_node_id_reference___S___, node_id, value);
        }
        return dictionary_enter(owl_to_cycl.owl_node_id_index(), node_id, value);
    }

    public static final SubLObject lookup_node_id_reference_alt(SubLObject node_id) {
        return dictionary.dictionary_lookup_without_values(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_node_id_index(), node_id, UNPROVIDED);
    }

    public static SubLObject lookup_node_id_reference(final SubLObject node_id) {
        return dictionary_lookup_without_values(owl_to_cycl.owl_node_id_index(), node_id, UNPROVIDED);
    }

    public static final SubLObject owl_create(SubLObject name, SubLObject isas, SubLObject defining_mt, SubLObject prefix, SubLObject capitalizeP, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject new_term = NIL;
                {
                    SubLObject _prev_bind_0 = api_control_vars.$the_cyclist$.currentBinding(thread);
                    try {
                        api_control_vars.$the_cyclist$.bind(NIL, thread);
                        operation_communication.set_the_cyclist(com.cyc.cycjava.cycl.owl.owl_to_cycl.oip_cyclist(import_parameters));
                        new_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_create_internal(name, isas, defining_mt, prefix, capitalizeP);
                    } finally {
                        api_control_vars.$the_cyclist$.rebind(_prev_bind_0, thread);
                    }
                }
                return new_term;
            }
        }
    }

    public static SubLObject owl_create(final SubLObject name, final SubLObject isas, final SubLObject defining_mt, final SubLObject prefix, final SubLObject suffix, final SubLObject initial_case, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject new_term = NIL;
        final SubLObject _prev_bind_0 = $the_cyclist$.currentBinding(thread);
        try {
            $the_cyclist$.bind(NIL, thread);
            set_the_cyclist(owl_to_cycl.oip_cyclist(import_parameters));
            new_term = owl_to_cycl.owl_create_internal(name, isas, defining_mt, prefix, suffix, initial_case);
        } finally {
            $the_cyclist$.rebind(_prev_bind_0, thread);
        }
        return new_term;
    }

    public static final SubLObject owl_create_internal(SubLObject name, SubLObject isas, SubLObject defining_mt, SubLObject prefix, SubLObject capitalizeP) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject known_collections = NIL;
                SubLObject isas_to_postpone = NIL;
                SubLObject new_term = NIL;
                SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(defining_mt);
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                        mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                        mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                        {
                            SubLObject cdolist_list_var = isas;
                            SubLObject v_isa = NIL;
                            for (v_isa = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , v_isa = cdolist_list_var.first()) {
                                {
                                    SubLObject resolved_isa = (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_quasi_term_p(v_isa)) ? ((SubLObject) (com.cyc.cycjava.cycl.owl.owl_to_cycl.resolve_owl_quasi_term(v_isa))) : v_isa;
                                    if (resolved_isa.eql($UNRESOLVED)) {
                                        isas_to_postpone = cons(v_isa, isas_to_postpone);
                                    } else {
                                        if (NIL == fort_types_interface.isa_collectionP(resolved_isa, UNPROVIDED)) {
                                            isas_to_postpone = cons(resolved_isa, isas_to_postpone);
                                        } else {
                                            {
                                                SubLObject item_var = resolved_isa;
                                                if (NIL == member(item_var, known_collections, symbol_function(EQUAL), symbol_function(IDENTITY))) {
                                                    known_collections = cons(item_var, known_collections);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } finally {
                        mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
                    }
                }
                new_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_create_new_constant(name, known_collections, defining_mt, prefix, capitalizeP);
                SubLTrampolineFile.checkType(new_term, CONSTANT_P);
                {
                    SubLObject cdolist_list_var = isas_to_postpone;
                    SubLObject v_isa = NIL;
                    for (v_isa = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , v_isa = cdolist_list_var.first()) {
                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt408$Postponing__isa__S__S__because__S, $str_alt223$__ }), new SubLObject[]{ new_term, v_isa, v_isa });
                            force_output(UNPROVIDED);
                        }
                        com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(list($$isa, new_term, v_isa), defining_mt, UNPROVIDED);
                    }
                }
                return new_term;
            }
        }
    }

    public static SubLObject owl_create_internal(final SubLObject name, final SubLObject isas, final SubLObject defining_mt, final SubLObject prefix, final SubLObject suffix, final SubLObject initial_case) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject known_collections = NIL;
        SubLObject isas_to_postpone = NIL;
        SubLObject new_term = NIL;
        final SubLObject mt_var = with_inference_mt_relevance_validate(defining_mt);
        final SubLObject _prev_bind_0 = $mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = $relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = $relevant_mts$.currentBinding(thread);
        try {
            $mt$.bind(update_inference_mt_relevance_mt(mt_var), thread);
            $relevant_mt_function$.bind(update_inference_mt_relevance_function(mt_var), thread);
            $relevant_mts$.bind(update_inference_mt_relevance_mt_list(mt_var), thread);
            SubLObject cdolist_list_var = isas;
            SubLObject v_isa = NIL;
            v_isa = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                final SubLObject resolved_isa = (NIL != owl_to_cycl.owl_quasi_term_p(v_isa)) ? owl_to_cycl.resolve_owl_quasi_term(v_isa) : v_isa;
                if (resolved_isa.eql($UNRESOLVED)) {
                    isas_to_postpone = cons(v_isa, isas_to_postpone);
                } else
                    if (NIL == isa_collectionP(resolved_isa, UNPROVIDED)) {
                        isas_to_postpone = cons(resolved_isa, isas_to_postpone);
                    } else {
                        final SubLObject item_var = resolved_isa;
                        if (NIL == member(item_var, known_collections, symbol_function(EQUAL), symbol_function(IDENTITY))) {
                            known_collections = cons(item_var, known_collections);
                        }
                    }

                cdolist_list_var = cdolist_list_var.rest();
                v_isa = cdolist_list_var.first();
            } 
        } finally {
            $relevant_mts$.rebind(_prev_bind_3, thread);
            $relevant_mt_function$.rebind(_prev_bind_2, thread);
            $mt$.rebind(_prev_bind_0, thread);
        }
        new_term = owl_to_cycl.owl_create_new_constant(name, known_collections, defining_mt, prefix, suffix, initial_case);
        assert NIL != constant_p(new_term) : "! constant_handles.constant_p(new_term) " + ("constant_handles.constant_p(new_term) " + "CommonSymbols.NIL != constant_handles.constant_p(new_term) ") + new_term;
        SubLObject cdolist_list_var2 = isas_to_postpone;
        SubLObject v_isa2 = NIL;
        v_isa2 = cdolist_list_var2.first();
        while (NIL != cdolist_list_var2) {
            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str423$Postponing__isa__S__S__because__S, owl_to_cycl.$str239$__ }), new SubLObject[]{ new_term, v_isa2, v_isa2 });
                force_output(UNPROVIDED);
            }
            owl_to_cycl.owl_enqueue_assert(list(owl_to_cycl.$$isa, new_term, v_isa2), defining_mt, UNPROVIDED);
            cdolist_list_var2 = cdolist_list_var2.rest();
            v_isa2 = cdolist_list_var2.first();
        } 
        return new_term;
    }

    public static final SubLObject owl_create_new_constant(SubLObject name, SubLObject isas, SubLObject defining_mt, SubLObject prefix, SubLObject capitalizeP) {
        if (NIL != owl_utilities.owl_importer_use_rkfP()) {
            return rkf_term_utilities.create_new_constant(name, isas, NIL, defining_mt, prefix, NIL, capitalizeP, T, UNPROVIDED);
        }
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_create_new_constant_non_rkf(name, isas, defining_mt, prefix, capitalizeP);
    }

    public static SubLObject owl_create_new_constant(SubLObject name, final SubLObject isas, final SubLObject defining_mt, final SubLObject prefix, final SubLObject suffix, final SubLObject capitalizeP) {
        SubLObject new_constant = NIL;
        SubLObject basic_type_doneP = NIL;
        if (NIL != non_empty_string_p(suffix)) {
            name = cconcatenate(name, suffix);
        }
        if (NIL != owl_utilities.owl_importer_use_rkfP()) {
            new_constant = create_new_constant(name, isas, NIL, defining_mt, prefix, NIL, capitalizeP, T, UNPROVIDED);
        }
        if (NIL == new_constant) {
            new_constant = owl_to_cycl.owl_create_new_constant_non_rkf(name, isas, defining_mt, prefix, capitalizeP);
        }
        if (NIL == basic_type_doneP) {
            SubLObject csome_list_var = owl_to_cycl.$list424;
            SubLObject basic_type = NIL;
            basic_type = csome_list_var.first();
            while ((NIL == basic_type_doneP) && (NIL != csome_list_var)) {
                if (NIL != find(basic_type, isas, owl_to_cycl.$sym394$SPEC_, UNPROVIDED, UNPROVIDED, UNPROVIDED)) {
                    owl_to_cycl.owl_assert_low(make_binary_formula(owl_to_cycl.$$isa, new_constant, basic_type), owl_to_cycl.$$UniversalVocabularyMt);
                    basic_type_doneP = T;
                }
                csome_list_var = csome_list_var.rest();
                basic_type = csome_list_var.first();
            } 
        }
        if (NIL == basic_type_doneP) {
            owl_to_cycl.owl_assert_low(make_binary_formula(owl_to_cycl.$$isa, new_constant, owl_to_cycl.$$Thing), owl_to_cycl.$$UniversalVocabularyMt);
        }
        return new_constant;
    }

    public static final SubLObject owl_create_new_constant_non_rkf_alt(SubLObject name, SubLObject known_collections, SubLObject defining_mt, SubLObject prefix, SubLObject capitalizeP) {
        {
            SubLObject full_name = list_utilities.remove_if_not(VALID_CONSTANT_NAME_CHAR_P, NIL != string_utilities.non_empty_string_p(prefix) ? ((SubLObject) (cconcatenate(prefix, new SubLObject[]{ $str_alt410$_, name }))) : name, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            SubLObject new_constant = ke.ke_create_now(NIL != capitalizeP ? ((SubLObject) (string_utilities.upcase_leading(full_name))) : string_utilities.downcase_leading(full_name), UNPROVIDED);
            SubLObject cdolist_list_var = known_collections;
            SubLObject v_isa = NIL;
            for (v_isa = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , v_isa = cdolist_list_var.first()) {
                com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_assert_low(make_binary_formula($$isa, new_constant, v_isa), defining_mt);
            }
            return new_constant;
        }
    }

    public static SubLObject owl_create_new_constant_non_rkf(final SubLObject name, final SubLObject known_collections, final SubLObject defining_mt, final SubLObject prefix, final SubLObject capitalizeP) {
        final SubLObject full_name = remove_if_not(VALID_CONSTANT_NAME_CHAR_P, NIL != non_empty_string_p(prefix) ? cconcatenate(prefix, new SubLObject[]{ owl_to_cycl.$str426$_, name }) : name, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        final SubLObject new_constant = ke_create_now(NIL != capitalizeP ? upcase_leading(full_name) : downcase_leading(full_name), UNPROVIDED);
        SubLObject cdolist_list_var = known_collections;
        SubLObject v_isa = NIL;
        v_isa = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            owl_to_cycl.owl_assert_low(make_binary_formula(owl_to_cycl.$$isa, new_constant, v_isa), defining_mt);
            cdolist_list_var = cdolist_list_var.rest();
            v_isa = cdolist_list_var.first();
        } 
        return new_constant;
    }

    public static final SubLObject owl_enqueue_assert_alt(SubLObject quasi_sentence, SubLObject mt, SubLObject import_parameters) {
        if (import_parameters == UNPROVIDED) {
            import_parameters = $owl_import_parameters$.getDynamicValue();
        }
        SubLTrampolineFile.checkType(import_parameters, OWL_IMPORT_PARAMETERS_P);
        if ((NIL != cycl_utilities.expression_find_if(OWL_QUASI_TERM_P, quasi_sentence, UNPROVIDED, UNPROVIDED)) || (NIL == wff.el_wff_assertibleP(quasi_sentence, mt, UNPROVIDED))) {
            {
                SubLObject assert_spec = list($ASSERT, quasi_sentence, mt, import_parameters);
                com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_oe_queue_enqueue(assert_spec, UNPROVIDED);
            }
        } else {
            com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_assert(quasi_sentence, mt, import_parameters);
        }
        return T;
    }

    public static SubLObject owl_enqueue_assert(final SubLObject quasi_sentence, final SubLObject mt, SubLObject import_parameters) {
        if (import_parameters == UNPROVIDED) {
            import_parameters = owl_to_cycl.$owl_import_parameters$.getDynamicValue();
        }
        assert NIL != owl_to_cycl.owl_import_parameters_p(import_parameters) : "! owl_to_cycl.owl_import_parameters_p(import_parameters) " + ("owl_to_cycl.owl_import_parameters_p(import_parameters) " + "CommonSymbols.NIL != owl_to_cycl.owl_import_parameters_p(import_parameters) ") + import_parameters;
        if ((NIL != expression_find_if(owl_to_cycl.OWL_QUASI_TERM_P, quasi_sentence, UNPROVIDED, UNPROVIDED)) || (NIL == el_wff_assertibleP(quasi_sentence, mt, UNPROVIDED))) {
            final SubLObject assert_spec = list($ASSERT, quasi_sentence, mt, import_parameters);
            owl_to_cycl.owl_oe_queue_enqueue(assert_spec, UNPROVIDED);
        } else {
            owl_to_cycl.owl_assert(quasi_sentence, mt, import_parameters);
        }
        return T;
    }

    public static final SubLObject new_owl_oe_daemon_alt() {
        {
            SubLObject daemon = process_utilities.make_cyc_server_process($$$OWL_OE_Daemon, OWL_OE_DAEMON_RUN);
            return daemon;
        }
    }

    public static SubLObject new_owl_oe_daemon() {
        final SubLObject daemon = process_utilities.make_cyc_server_process(owl_to_cycl.$$$OWL_OE_Daemon, owl_to_cycl.OWL_OE_DAEMON_RUN);
        return daemon;
    }

    public static final SubLObject owl_oe_queue_empty_p_alt(SubLObject owl_oe_queue) {
        return sublisp_null(queues.queue_find_if(CONSP, com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_oe_queue_queue(owl_oe_queue), UNPROVIDED));
    }

    public static SubLObject owl_oe_queue_empty_p(final SubLObject owl_oe_queue) {
        return sublisp_null(queue_find_if(CONSP, owl_to_cycl.owl_oe_queue_queue(owl_oe_queue), UNPROVIDED));
    }

    public static final SubLObject wait_for_owl_oe_queue_to_empty_alt(SubLObject owl_oe_queue) {
        if (owl_oe_queue == UNPROVIDED) {
            owl_oe_queue = $owl_oe_queue$.getDynamicValue();
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject starting_size = queues.queue_size(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_oe_queue_queue(owl_oe_queue));
                SubLObject message = format(NIL, $str_alt415$Waiting_for__D_enqueued_operation, starting_size);
                com.cyc.cycjava.cycl.owl.owl_to_cycl.note_owl_import_section_started();
                if (starting_size.isPositive()) {
                    {
                        SubLObject _prev_bind_0 = $last_percent_progress_index$.currentBinding(thread);
                        SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
                        SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
                        SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
                        try {
                            $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
                            $last_percent_progress_prediction$.bind(NIL, thread);
                            $within_noting_percent_progress$.bind(T, thread);
                            $percent_progress_start_time$.bind(get_universal_time(), thread);
                            noting_percent_progress_preamble(message);
                            while (NIL == com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_oe_queue_empty_p(owl_oe_queue)) {
                                {
                                    SubLObject number_done = subtract(starting_size, queues.queue_size(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_oe_queue_queue(owl_oe_queue)));
                                    SubLObject percent_done = divide(number_done, starting_size);
                                    note_percent_progress(number_done, starting_size);
                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.note_owl_import_section_progress(percent_done);
                                    sleep($float$0_5);
                                }
                            } 
                            noting_percent_progress_postamble();
                        } finally {
                            $percent_progress_start_time$.rebind(_prev_bind_3, thread);
                            $within_noting_percent_progress$.rebind(_prev_bind_2, thread);
                            $last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
                            $last_percent_progress_index$.rebind(_prev_bind_0, thread);
                        }
                    }
                }
                com.cyc.cycjava.cycl.owl.owl_to_cycl.note_owl_import_section_done();
            }
            return NIL;
        }
    }

    public static SubLObject wait_for_owl_oe_queue_to_empty(SubLObject owl_oe_queue) {
        if (owl_oe_queue == UNPROVIDED) {
            owl_oe_queue = owl_to_cycl.$owl_oe_queue$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject starting_size = queue_size(owl_to_cycl.owl_oe_queue_queue(owl_oe_queue));
        final SubLObject message = format(NIL, owl_to_cycl.$str431$Waiting_for__D_enqueued_operation, starting_size);
        owl_to_cycl.note_owl_import_section_started();
        if (starting_size.isPositive()) {
            final SubLObject _prev_bind_0 = $last_percent_progress_index$.currentBinding(thread);
            final SubLObject _prev_bind_2 = $last_percent_progress_prediction$.currentBinding(thread);
            final SubLObject _prev_bind_3 = $within_noting_percent_progress$.currentBinding(thread);
            final SubLObject _prev_bind_4 = $percent_progress_start_time$.currentBinding(thread);
            try {
                $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
                $last_percent_progress_prediction$.bind(NIL, thread);
                $within_noting_percent_progress$.bind(T, thread);
                $percent_progress_start_time$.bind(get_universal_time(), thread);
                try {
                    noting_percent_progress_preamble(message);
                    while (NIL == owl_to_cycl.owl_oe_queue_empty_p(owl_oe_queue)) {
                        final SubLObject number_done = subtract(starting_size, queue_size(owl_to_cycl.owl_oe_queue_queue(owl_oe_queue)));
                        final SubLObject percent_done = divide(number_done, starting_size);
                        note_percent_progress(number_done, starting_size);
                        owl_to_cycl.note_owl_import_section_progress(percent_done);
                        sleep(owl_to_cycl.$float$0_5);
                    } 
                } finally {
                    final SubLObject _prev_bind_0_$68 = $is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        $is_thread_performing_cleanupP$.bind(T, thread);
                        final SubLObject _values = getValuesAsVector();
                        noting_percent_progress_postamble();
                        restoreValuesFromVector(_values);
                    } finally {
                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$68, thread);
                    }
                }
            } finally {
                $percent_progress_start_time$.rebind(_prev_bind_4, thread);
                $within_noting_percent_progress$.rebind(_prev_bind_3, thread);
                $last_percent_progress_prediction$.rebind(_prev_bind_2, thread);
                $last_percent_progress_index$.rebind(_prev_bind_0, thread);
            }
        }
        owl_to_cycl.note_owl_import_section_done();
        return NIL;
    }

    public static final SubLObject owl_oe_daemon_run_alt() {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            while (NIL == list_utilities.empty_list_p($owl_oe_queues$.getGlobalValue())) {
                {
                    SubLObject cdolist_list_var = copy_list($owl_oe_queues$.getGlobalValue());
                    SubLObject owl_oe_queue = NIL;
                    for (owl_oe_queue = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , owl_oe_queue = cdolist_list_var.first()) {
                        {
                            SubLObject queue = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_oe_queue_queue(owl_oe_queue);
                            {
                                SubLObject _prev_bind_0 = $owl_importer$.currentBinding(thread);
                                try {
                                    $owl_importer$.bind(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_oe_queue_importer(owl_oe_queue), thread);
                                    {
                                        SubLObject item = queues.dequeue(queue);
                                        SubLObject queue_closedP = queues.queue_find($owl_oe_queue_end_marker$.getGlobalValue(), queue, UNPROVIDED, UNPROVIDED);
                                        SubLObject oe_performedP = NIL;
                                        if (item.eql($owl_oe_queue_end_marker$.getGlobalValue())) {
                                            if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_oe_queue_empty_p(owl_oe_queue)) {
                                                queues.clear_queue(queue);
                                                $owl_oe_queues$.setGlobalValue(remove(owl_oe_queue, $owl_oe_queues$.getGlobalValue(), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
                                            }
                                        } else {
                                            if (item.eql($owl_oe_queue_marker$.getGlobalValue())) {
                                                if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_oe_queue_modifiedP(owl_oe_queue)) {
                                                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                        format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt417$__Finished_pass_through_queue__Si, $str_alt223$__ }), queues.queue_size(queue));
                                                        force_output(UNPROVIDED);
                                                    }
                                                    force_output(UNPROVIDED);
                                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.set_owl_oe_queue_modified_flag(owl_oe_queue, NIL);
                                                } else {
                                                    if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_oe_queue_empty_p(owl_oe_queue)) {
                                                        if (NIL != list_utilities.singletonP($owl_oe_queues$.getGlobalValue())) {
                                                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt418$__OE_queue_is_empty__Zzz___, $str_alt223$__ }));
                                                                force_output(UNPROVIDED);
                                                            }
                                                            sleep(FIVE_INTEGER);
                                                        }
                                                    } else {
                                                        if (NIL != queue_closedP) {
                                                            {
                                                                SubLObject items_left = list_utilities.remove_if_not(CONSP, queues.queue_elements(queue), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                Errors.warn($str_alt419$Unable_to_perform__D_operation__P, length(items_left), items_left);
                                                                {
                                                                    SubLObject cdolist_list_var_72 = items_left;
                                                                    SubLObject item_73 = NIL;
                                                                    for (item_73 = cdolist_list_var_72.first(); NIL != cdolist_list_var_72; cdolist_list_var_72 = cdolist_list_var_72.rest() , item_73 = cdolist_list_var_72.first()) {
                                                                        com.cyc.cycjava.cycl.owl.owl_to_cycl.note_owl_failure(item_73, UNPROVIDED);
                                                                    }
                                                                }
                                                            }
                                                            queues.clear_queue(queue);
                                                            $owl_oe_queues$.setGlobalValue(remove(owl_oe_queue, $owl_oe_queues$.getGlobalValue(), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
                                                        } else {
                                                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt420$__Can_t_do_anything_with_queue_no, $str_alt223$__ }));
                                                                force_output(UNPROVIDED);
                                                            }
                                                            sleep(FIVE_INTEGER);
                                                        }
                                                    }
                                                }
                                            } else {
                                                if (NIL != pattern_match.tree_matches_pattern(item, $list_alt421)) {
                                                    {
                                                        SubLObject _prev_bind_0_74 = $owl_allow_find_via_creationP$.currentBinding(thread);
                                                        try {
                                                            $owl_allow_find_via_creationP$.bind(queue_closedP, thread);
                                                            oe_performedP = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_oe_daemon_assert(item);
                                                        } finally {
                                                            $owl_allow_find_via_creationP$.rebind(_prev_bind_0_74, thread);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (NIL != oe_performedP) {
                                            if (NIL == com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_oe_queue_modifiedP(owl_oe_queue)) {
                                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt422$__Noting_OE_performed___S__, $str_alt223$__ }), item);
                                                    force_output(UNPROVIDED);
                                                }
                                                force_output(UNPROVIDED);
                                                com.cyc.cycjava.cycl.owl.owl_to_cycl.set_owl_oe_queue_modified_flag(owl_oe_queue, T);
                                            }
                                        } else {
                                            com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_oe_queue_reenqueue(item, owl_oe_queue);
                                        }
                                    }
                                } finally {
                                    $owl_importer$.rebind(_prev_bind_0, thread);
                                }
                            }
                        }
                    }
                }
            } 
            return NIL;
        }
    }

    public static SubLObject owl_oe_daemon_run() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        while (NIL == empty_list_p(owl_to_cycl.$owl_oe_queues$.getGlobalValue())) {
            SubLObject cdolist_list_var = copy_list(owl_to_cycl.$owl_oe_queues$.getGlobalValue());
            SubLObject owl_oe_queue = NIL;
            owl_oe_queue = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                final SubLObject queue = owl_to_cycl.owl_oe_queue_queue(owl_oe_queue);
                final SubLObject _prev_bind_0 = owl_to_cycl.$owl_importer$.currentBinding(thread);
                try {
                    owl_to_cycl.$owl_importer$.bind(owl_to_cycl.owl_oe_queue_importer(owl_oe_queue), thread);
                    final SubLObject item = dequeue(queue);
                    final SubLObject queue_closedP = queue_find(owl_to_cycl.$owl_oe_queue_end_marker$.getGlobalValue(), queue, UNPROVIDED, UNPROVIDED);
                    SubLObject oe_performedP = NIL;
                    if (item.eql(owl_to_cycl.$owl_oe_queue_end_marker$.getGlobalValue())) {
                        if (NIL != owl_to_cycl.owl_oe_queue_empty_p(owl_oe_queue)) {
                            clear_queue(queue);
                            owl_to_cycl.$owl_oe_queues$.setGlobalValue(remove(owl_oe_queue, owl_to_cycl.$owl_oe_queues$.getGlobalValue(), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
                        }
                    } else
                        if (item.eql(owl_to_cycl.$owl_oe_queue_marker$.getGlobalValue())) {
                            if (NIL != owl_to_cycl.owl_oe_queue_modifiedP(owl_oe_queue)) {
                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str433$__Finished_pass_through_queue__Si, owl_to_cycl.$str239$__ }), queue_size(queue));
                                    force_output(UNPROVIDED);
                                }
                                force_output(UNPROVIDED);
                                owl_to_cycl.set_owl_oe_queue_modified_flag(owl_oe_queue, NIL);
                            } else
                                if (NIL != owl_to_cycl.owl_oe_queue_empty_p(owl_oe_queue)) {
                                    if (NIL != singletonP(owl_to_cycl.$owl_oe_queues$.getGlobalValue())) {
                                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str434$__OE_queue_is_empty__Zzz___, owl_to_cycl.$str239$__ }));
                                            force_output(UNPROVIDED);
                                        }
                                        sleep(FIVE_INTEGER);
                                    }
                                } else
                                    if (NIL != queue_closedP) {
                                        final SubLObject items_left = remove_if_not(CONSP, queue_elements(queue), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        Errors.warn(owl_to_cycl.$str435$Unable_to_perform__D_operation__P, length(items_left), items_left);
                                        SubLObject cdolist_list_var_$69 = items_left;
                                        SubLObject item_$70 = NIL;
                                        item_$70 = cdolist_list_var_$69.first();
                                        while (NIL != cdolist_list_var_$69) {
                                            owl_to_cycl.note_owl_failure(item_$70, UNPROVIDED);
                                            cdolist_list_var_$69 = cdolist_list_var_$69.rest();
                                            item_$70 = cdolist_list_var_$69.first();
                                        } 
                                        clear_queue(queue);
                                        owl_to_cycl.$owl_oe_queues$.setGlobalValue(remove(owl_oe_queue, owl_to_cycl.$owl_oe_queues$.getGlobalValue(), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
                                    } else {
                                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str436$__Can_t_do_anything_with_queue_no, owl_to_cycl.$str239$__ }));
                                            force_output(UNPROVIDED);
                                        }
                                        sleep(FIVE_INTEGER);
                                    }


                        } else
                            if (NIL != tree_matches_pattern(item, owl_to_cycl.$list437)) {
                                final SubLObject _prev_bind_0_$71 = owl_to_cycl.$owl_allow_find_via_creationP$.currentBinding(thread);
                                try {
                                    owl_to_cycl.$owl_allow_find_via_creationP$.bind(queue_closedP, thread);
                                    oe_performedP = owl_to_cycl.owl_oe_daemon_assert(item);
                                } finally {
                                    owl_to_cycl.$owl_allow_find_via_creationP$.rebind(_prev_bind_0_$71, thread);
                                }
                            }


                    if (NIL != oe_performedP) {
                        if (NIL == owl_to_cycl.owl_oe_queue_modifiedP(owl_oe_queue)) {
                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str438$__Noting_OE_performed___S__, owl_to_cycl.$str239$__ }), item);
                                force_output(UNPROVIDED);
                            }
                            force_output(UNPROVIDED);
                            owl_to_cycl.set_owl_oe_queue_modified_flag(owl_oe_queue, T);
                        }
                    } else {
                        owl_to_cycl.owl_oe_queue_reenqueue(item, owl_oe_queue);
                    }
                } finally {
                    owl_to_cycl.$owl_importer$.rebind(_prev_bind_0, thread);
                }
                cdolist_list_var = cdolist_list_var.rest();
                owl_oe_queue = cdolist_list_var.first();
            } 
        } 
        return NIL;
    }

    public static final SubLObject note_owl_failure_alt(SubLObject item, SubLObject stream) {
        if (stream == UNPROVIDED) {
            stream = StreamsLow.$standard_output$.getDynamicValue();
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject message = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_failure_message(item);
                if (NIL != $owl_importer$.getDynamicValue(thread)) {
                    com.cyc.cycjava.cycl.owl.owl_to_cycl.note_owl_import_problem(item, message);
                } else {
                    princ(message, stream);
                }
            }
            return NIL;
        }
    }

    public static SubLObject note_owl_failure(final SubLObject item, SubLObject stream) {
        if (stream == UNPROVIDED) {
            stream = StreamsLow.$standard_output$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject message = owl_to_cycl.owl_failure_message(item);
        if (NIL != owl_to_cycl.$owl_importer$.getDynamicValue(thread)) {
            owl_to_cycl.note_owl_import_problem(item, message);
        } else {
            princ(message, stream);
        }
        return NIL;
    }

    public static final SubLObject owl_failure_message_alt(SubLObject item) {
        {
            SubLObject message = NIL;
            SubLObject stream = NIL;
            try {
                stream = make_private_string_output_stream();
                if (NIL != pattern_match.tree_matches_pattern(item, $list_alt421)) {
                    {
                        SubLObject datum = item.rest();
                        SubLObject current = datum;
                        SubLObject quasi_formula = NIL;
                        SubLObject mt = NIL;
                        SubLObject import_parameters = NIL;
                        destructuring_bind_must_consp(current, datum, $list_alt423);
                        quasi_formula = current.first();
                        current = current.rest();
                        destructuring_bind_must_consp(current, datum, $list_alt423);
                        mt = current.first();
                        current = current.rest();
                        destructuring_bind_must_consp(current, datum, $list_alt423);
                        import_parameters = current.first();
                        current = current.rest();
                        if (NIL == current) {
                            {
                                SubLObject cdolist_list_var = cycl_utilities.expression_gather(quasi_formula, OWL_QUASI_TERM_P, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                SubLObject quasi_term = NIL;
                                for (quasi_term = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , quasi_term = cdolist_list_var.first()) {
                                    if ($UNRESOLVED.eql(com.cyc.cycjava.cycl.owl.owl_to_cycl.resolve_owl_quasi_term(quasi_term))) {
                                        format(stream, $str_alt424$__Failed_to_resolve__S__, quasi_term);
                                    }
                                }
                            }
                            {
                                SubLObject resolved_formula = cycl_utilities.expression_transform(quasi_formula, OWL_QUASI_TERM_P, RESOLVE_OWL_QUASI_TERM, UNPROVIDED, UNPROVIDED);
                                if (NIL == cycl_utilities.expression_find($UNRESOLVED, resolved_formula, UNPROVIDED, UNPROVIDED, UNPROVIDED)) {
                                    {
                                        SubLObject why_not_wff = wff.explain_why_not_wff_assert(resolved_formula, mt, UNPROVIDED);
                                        if (NIL != why_not_wff) {
                                            print(why_not_wff, stream);
                                        }
                                    }
                                }
                            }
                        } else {
                            cdestructuring_bind_error(datum, $list_alt423);
                        }
                    }
                } else {
                    format(stream, $str_alt426$Problem_performing__S, item);
                }
                message = get_output_stream_string(stream);
            } finally {
                {
                    SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
                    try {
                        bind($is_thread_performing_cleanupP$, T);
                        close(stream, UNPROVIDED);
                    } finally {
                        rebind($is_thread_performing_cleanupP$, _prev_bind_0);
                    }
                }
            }
            return message;
        }
    }

    public static SubLObject owl_failure_message(final SubLObject item) {
        SubLObject message = NIL;
        SubLObject stream = NIL;
        try {
            stream = make_private_string_output_stream();
            if (NIL != tree_matches_pattern(item, owl_to_cycl.$list437)) {
                SubLObject current;
                final SubLObject datum = current = item.rest();
                SubLObject quasi_formula = NIL;
                SubLObject mt = NIL;
                SubLObject import_parameters = NIL;
                destructuring_bind_must_consp(current, datum, owl_to_cycl.$list439);
                quasi_formula = current.first();
                current = current.rest();
                destructuring_bind_must_consp(current, datum, owl_to_cycl.$list439);
                mt = current.first();
                current = current.rest();
                destructuring_bind_must_consp(current, datum, owl_to_cycl.$list439);
                import_parameters = current.first();
                current = current.rest();
                if (NIL == current) {
                    SubLObject cdolist_list_var = expression_gather(quasi_formula, owl_to_cycl.OWL_QUASI_TERM_P, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    SubLObject quasi_term = NIL;
                    quasi_term = cdolist_list_var.first();
                    while (NIL != cdolist_list_var) {
                        if ($UNRESOLVED.eql(owl_to_cycl.resolve_owl_quasi_term(quasi_term))) {
                            format(stream, owl_to_cycl.$str440$__Failed_to_resolve__S__, quasi_term);
                        }
                        cdolist_list_var = cdolist_list_var.rest();
                        quasi_term = cdolist_list_var.first();
                    } 
                    final SubLObject resolved_formula = expression_transform(quasi_formula, owl_to_cycl.OWL_QUASI_TERM_P, owl_to_cycl.RESOLVE_OWL_QUASI_TERM, UNPROVIDED, UNPROVIDED);
                    if (NIL == expression_find($UNRESOLVED, resolved_formula, UNPROVIDED, UNPROVIDED, UNPROVIDED)) {
                        final SubLObject why_not_wff = explain_why_not_wff_assert(resolved_formula, mt, UNPROVIDED);
                        if (NIL != why_not_wff) {
                            print(why_not_wff, stream);
                        }
                    }
                } else {
                    cdestructuring_bind_error(datum, owl_to_cycl.$list439);
                }
            } else {
                format(stream, owl_to_cycl.$str442$Problem_performing__S, item);
            }
            message = get_output_stream_string(stream);
        } finally {
            final SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
            try {
                bind($is_thread_performing_cleanupP$, T);
                final SubLObject _values = getValuesAsVector();
                close(stream, UNPROVIDED);
                restoreValuesFromVector(_values);
            } finally {
                rebind($is_thread_performing_cleanupP$, _prev_bind_0);
            }
        }
        return message;
    }

    public static final SubLObject owl_oe_daemon_assert_alt(SubLObject item) {
        {
            SubLObject successP = NIL;
            SubLObject datum = item.rest();
            SubLObject current = datum;
            SubLObject quasi_formula = NIL;
            SubLObject mt = NIL;
            SubLObject import_parameters = NIL;
            destructuring_bind_must_consp(current, datum, $list_alt423);
            quasi_formula = current.first();
            current = current.rest();
            destructuring_bind_must_consp(current, datum, $list_alt423);
            mt = current.first();
            current = current.rest();
            destructuring_bind_must_consp(current, datum, $list_alt423);
            import_parameters = current.first();
            current = current.rest();
            if (NIL == current) {
                {
                    SubLObject resolvedP = sublisp_null(cycl_utilities.expression_find_if(OWL_QUASI_TERM_P, quasi_formula, UNPROVIDED, UNPROVIDED));
                    if (NIL == resolvedP) {
                        quasi_formula = cycl_utilities.expression_transform(quasi_formula, OWL_QUASI_TERM_P, RESOLVE_OWL_QUASI_TERM, UNPROVIDED, UNPROVIDED);
                        resolvedP = sublisp_null(cycl_utilities.expression_find($UNRESOLVED, quasi_formula, UNPROVIDED, UNPROVIDED, UNPROVIDED));
                    }
                    if (NIL != resolvedP) {
                        successP = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_assert(quasi_formula, mt, import_parameters);
                    }
                }
            } else {
                cdestructuring_bind_error(datum, $list_alt423);
            }
            return successP;
        }
    }

    public static SubLObject owl_oe_daemon_assert(final SubLObject item) {
        SubLObject successP = NIL;
        SubLObject current;
        final SubLObject datum = current = item.rest();
        SubLObject quasi_formula = NIL;
        SubLObject mt = NIL;
        SubLObject import_parameters = NIL;
        destructuring_bind_must_consp(current, datum, owl_to_cycl.$list439);
        quasi_formula = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, datum, owl_to_cycl.$list439);
        mt = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, datum, owl_to_cycl.$list439);
        import_parameters = current.first();
        current = current.rest();
        if (NIL == current) {
            SubLObject resolvedP = sublisp_null(expression_find_if(owl_to_cycl.OWL_QUASI_TERM_P, quasi_formula, UNPROVIDED, UNPROVIDED));
            if (NIL == resolvedP) {
                quasi_formula = expression_transform(quasi_formula, owl_to_cycl.OWL_QUASI_TERM_P, owl_to_cycl.RESOLVE_OWL_QUASI_TERM, UNPROVIDED, UNPROVIDED);
                resolvedP = sublisp_null(expression_find($UNRESOLVED, quasi_formula, UNPROVIDED, UNPROVIDED, UNPROVIDED));
            }
            if (NIL != resolvedP) {
                successP = owl_to_cycl.owl_assert(quasi_formula, mt, import_parameters);
            }
        } else {
            cdestructuring_bind_error(datum, owl_to_cycl.$list439);
        }
        return successP;
    }

    public static final SubLObject owl_quasi_term_from_specification_alt(SubLObject external_name, SubLObject type, SubLObject ontology, SubLObject import_parameters) {
        return list($OWL_QUASI_TERM, $FIND, external_name, type, ontology, import_parameters);
    }

    public static SubLObject owl_quasi_term_from_specification(final SubLObject external_name, final SubLObject type, final SubLObject ontology, final SubLObject import_parameters) {
        return list(owl_to_cycl.$OWL_QUASI_TERM, $FIND, external_name, type, ontology, import_parameters);
    }

    public static final SubLObject owl_quasi_term_from_node_id_alt(SubLObject node_id, SubLObject type) {
        if (type == UNPROVIDED) {
            type = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                if (NIL == dictionary_utilities.dictionary_has_keyP(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_node_id_index(), node_id)) {
                    Errors.error($str_alt429$_S_is_not_an_OWL_node_ID_, node_id);
                }
            }
            return list($OWL_QUASI_TERM, $NODE_ID, node_id, type);
        }
    }

    public static SubLObject owl_quasi_term_from_node_id(final SubLObject node_id, SubLObject type) {
        if (type == UNPROVIDED) {
            type = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == dictionary_has_keyP(owl_to_cycl.owl_node_id_index(), node_id))) {
            Errors.error(owl_to_cycl.$str445$_S_is_not_an_OWL_node_ID_, node_id);
        }
        return list(owl_to_cycl.$OWL_QUASI_TERM, $NODE_ID, node_id, type);
    }

    public static final SubLObject owl_quasi_term_p_alt(SubLObject v_object) {
        return pattern_match.tree_matches_pattern(v_object, $list_alt430);
    }

    public static SubLObject owl_quasi_term_p(final SubLObject v_object) {
        return tree_matches_pattern(v_object, owl_to_cycl.$list446);
    }

    public static final SubLObject resolve_owl_quasi_term_alt(SubLObject quasi_term) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject v_term = $UNRESOLVED;
                SubLObject pcase_var = second(quasi_term);
                if (pcase_var.eql($NODE_ID)) {
                    {
                        SubLObject result = dictionary.dictionary_lookup_without_values(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_node_id_index(), third(quasi_term), UNPROVIDED);
                        if (NIL != valid_constantP(result, UNPROVIDED)) {
                            v_term = result;
                        }
                    }
                } else {
                    if (pcase_var.eql($FIND)) {
                        {
                            SubLObject datum = subseq(quasi_term, TWO_INTEGER, UNPROVIDED);
                            SubLObject current = datum;
                            SubLObject external_name = NIL;
                            SubLObject type = NIL;
                            SubLObject ontology = NIL;
                            SubLObject import_parameters = NIL;
                            destructuring_bind_must_consp(current, datum, $list_alt431);
                            external_name = current.first();
                            current = current.rest();
                            destructuring_bind_must_consp(current, datum, $list_alt431);
                            type = current.first();
                            current = current.rest();
                            destructuring_bind_must_consp(current, datum, $list_alt431);
                            ontology = current.first();
                            current = current.rest();
                            destructuring_bind_must_consp(current, datum, $list_alt431);
                            import_parameters = current.first();
                            current = current.rest();
                            if (NIL == current) {
                                if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_value_specification_intersection_p(external_name)) {
                                    v_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_intersection(external_name, type, import_parameters, T);
                                } else {
                                    if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_value_specification_union_p(external_name)) {
                                        v_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_union(external_name, type, import_parameters, T);
                                    } else {
                                        {
                                            SubLObject result = (NIL != $owl_allow_find_via_creationP$.getDynamicValue(thread)) ? ((SubLObject) (com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_of_type_in_ontology(external_name, type, ontology, import_parameters, T))) : com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_term_of_type(external_name, type, import_parameters, ontology);
                                            if (NIL != result) {
                                                v_term = result;
                                                com.cyc.cycjava.cycl.owl.owl_to_cycl.note_found_term_resolution(quasi_term, v_term);
                                            }
                                        }
                                    }
                                }
                            } else {
                                cdestructuring_bind_error(datum, $list_alt431);
                            }
                        }
                    }
                }
                return v_term;
            }
        }
    }

    public static SubLObject resolve_owl_quasi_term(final SubLObject quasi_term) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject v_term = $UNRESOLVED;
        final SubLObject pcase_var = second(quasi_term);
        if (pcase_var.eql($NODE_ID)) {
            final SubLObject result = dictionary_lookup_without_values(owl_to_cycl.owl_node_id_index(), third(quasi_term), UNPROVIDED);
            if (NIL != valid_constantP(result, UNPROVIDED)) {
                v_term = result;
            }
        } else
            if (pcase_var.eql($FIND)) {
                SubLObject current;
                final SubLObject datum = current = subseq(quasi_term, TWO_INTEGER, UNPROVIDED);
                SubLObject external_name = NIL;
                SubLObject type = NIL;
                SubLObject ontology = NIL;
                SubLObject import_parameters = NIL;
                destructuring_bind_must_consp(current, datum, owl_to_cycl.$list447);
                external_name = current.first();
                current = current.rest();
                destructuring_bind_must_consp(current, datum, owl_to_cycl.$list447);
                type = current.first();
                current = current.rest();
                destructuring_bind_must_consp(current, datum, owl_to_cycl.$list447);
                ontology = current.first();
                current = current.rest();
                destructuring_bind_must_consp(current, datum, owl_to_cycl.$list447);
                import_parameters = current.first();
                current = current.rest();
                if (NIL == current) {
                    if (NIL != owl_to_cycl.owl_external_value_specification_intersection_p(external_name)) {
                        v_term = owl_to_cycl.owl_find_or_create_intersection(external_name, type, import_parameters, T);
                    } else
                        if (NIL != owl_to_cycl.owl_external_value_specification_union_p(external_name)) {
                            v_term = owl_to_cycl.owl_find_or_create_union(external_name, type, import_parameters, T);
                        } else {
                            final SubLObject result2 = (NIL != owl_to_cycl.$owl_allow_find_via_creationP$.getDynamicValue(thread)) ? owl_to_cycl.owl_find_or_create_term_of_type_in_ontology(external_name, type, ontology, import_parameters, T) : owl_to_cycl.owl_find_term_of_type(external_name, type, import_parameters, ontology);
                            if (NIL != result2) {
                                v_term = result2;
                                owl_to_cycl.note_found_term_resolution(quasi_term, v_term);
                            }
                        }

                } else {
                    cdestructuring_bind_error(datum, owl_to_cycl.$list447);
                }
            }

        return v_term;
    }

    public static final SubLObject clear_note_found_term_resolution_alt() {
        {
            SubLObject cs = $note_found_term_resolution_caching_state$.getGlobalValue();
            if (NIL != cs) {
                memoization_state.caching_state_clear(cs);
            }
        }
        return NIL;
    }

    public static SubLObject clear_note_found_term_resolution() {
        final SubLObject cs = owl_to_cycl.$note_found_term_resolution_caching_state$.getGlobalValue();
        if (NIL != cs) {
            caching_state_clear(cs);
        }
        return NIL;
    }

    public static final SubLObject remove_note_found_term_resolution_alt(SubLObject quasi_term, SubLObject v_term) {
        return memoization_state.caching_state_remove_function_results_with_args($note_found_term_resolution_caching_state$.getGlobalValue(), list(quasi_term, v_term), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_note_found_term_resolution(final SubLObject quasi_term, final SubLObject v_term) {
        return caching_state_remove_function_results_with_args(owl_to_cycl.$note_found_term_resolution_caching_state$.getGlobalValue(), list(quasi_term, v_term), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject note_found_term_resolution_internal_alt(SubLObject quasi_term, SubLObject v_term) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt433$__Resolved__S___to__S__, $str_alt223$__ }), quasi_term, v_term);
                force_output(UNPROVIDED);
            }
            return NIL;
        }
    }

    public static SubLObject note_found_term_resolution_internal(final SubLObject quasi_term, final SubLObject v_term) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str449$__Resolved__S___to__S__, owl_to_cycl.$str239$__ }), quasi_term, v_term);
            force_output(UNPROVIDED);
        }
        return NIL;
    }

    public static final SubLObject note_found_term_resolution_alt(SubLObject quasi_term, SubLObject v_term) {
        {
            SubLObject caching_state = $note_found_term_resolution_caching_state$.getGlobalValue();
            if (NIL == caching_state) {
                caching_state = memoization_state.create_global_caching_state_for_name(NOTE_FOUND_TERM_RESOLUTION, $note_found_term_resolution_caching_state$, NIL, EQUAL, TWO_INTEGER, ZERO_INTEGER);
            }
            {
                SubLObject sxhash = memoization_state.sxhash_calc_2(quasi_term, v_term);
                SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
                if (collisions != $kw15$_MEMOIZED_ITEM_NOT_FOUND_) {
                    {
                        SubLObject cdolist_list_var = collisions;
                        SubLObject collision = NIL;
                        for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , collision = cdolist_list_var.first()) {
                            {
                                SubLObject cached_args = collision.first();
                                SubLObject results2 = second(collision);
                                if (quasi_term.equal(cached_args.first())) {
                                    cached_args = cached_args.rest();
                                    if (((NIL != cached_args) && (NIL == cached_args.rest())) && v_term.equal(cached_args.first())) {
                                        return memoization_state.caching_results(results2);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    SubLObject results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.owl.owl_to_cycl.note_found_term_resolution_internal(quasi_term, v_term)));
                    memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(quasi_term, v_term));
                    return memoization_state.caching_results(results);
                }
            }
        }
    }

    public static SubLObject note_found_term_resolution(final SubLObject quasi_term, final SubLObject v_term) {
        SubLObject caching_state = owl_to_cycl.$note_found_term_resolution_caching_state$.getGlobalValue();
        if (NIL == caching_state) {
            caching_state = create_global_caching_state_for_name(owl_to_cycl.NOTE_FOUND_TERM_RESOLUTION, owl_to_cycl.$note_found_term_resolution_caching_state$, NIL, EQUAL, TWO_INTEGER, ZERO_INTEGER);
        }
        final SubLObject sxhash = sxhash_calc_2(quasi_term, v_term);
        final SubLObject collisions = caching_state_lookup(caching_state, sxhash, UNPROVIDED);
        if (!collisions.eql($memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = NIL;
            collision = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = second(collision);
                if (quasi_term.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (((NIL != cached_args) && (NIL == cached_args.rest())) && v_term.equal(cached_args.first())) {
                        return caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            } 
        }
        final SubLObject results3 = arg2(resetMultipleValues(), multiple_value_list(owl_to_cycl.note_found_term_resolution_internal(quasi_term, v_term)));
        caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(quasi_term, v_term));
        return caching_results(results3);
    }

    public static final SubLObject owl_assert_internal_alt(SubLObject formula, SubLObject mt, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_encoding(import_parameters).equalp($str_alt79$utf_8) && (NIL != cycl_utilities.expression_find_if(NON_ASCII_STRING_P, formula, UNPROVIDED, UNPROVIDED))) {
                {
                    SubLObject transformed = cycl_utilities.expression_transform(formula, NON_ASCII_STRING_P, NON_ASCII_STRING_TO_UNICODE, UNPROVIDED, UNPROVIDED);
                    if (NIL == cycl_utilities.expression_find_if(NON_ASCII_STRING_P, transformed, UNPROVIDED, UNPROVIDED)) {
                        formula = transformed;
                    }
                }
            }
            {
                SubLObject successP = NIL;
                if (NIL != czer_meta.el_asserted_assertion_specP(formula, mt)) {
                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                        format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt438$Already_know__S___in__S, $str_alt223$__ }), formula, mt);
                        force_output(UNPROVIDED);
                    }
                    successP = T;
                } else {
                    {
                        SubLObject _prev_bind_0 = api_control_vars.$the_cyclist$.currentBinding(thread);
                        try {
                            api_control_vars.$the_cyclist$.bind(NIL, thread);
                            operation_communication.set_the_cyclist(com.cyc.cycjava.cycl.owl.owl_to_cycl.oip_cyclist(import_parameters));
                            thread.resetMultipleValues();
                            {
                                SubLObject assertedP = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_assert_low(formula, mt);
                                SubLObject problematic_formula = thread.secondMultipleValue();
                                thread.resetMultipleValues();
                                if (NIL != assertedP) {
                                    successP = T;
                                } else {
                                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                        format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt439$Failed_to_assert__S__, $str_alt223$__ }), problematic_formula);
                                        force_output(UNPROVIDED);
                                    }
                                }
                            }
                        } finally {
                            api_control_vars.$the_cyclist$.rebind(_prev_bind_0, thread);
                        }
                    }
                }
                if (NIL != successP) {
                    owl_utilities.note_sentence_asserted(formula, mt, com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_import_term(import_parameters));
                }
                return successP;
            }
        }
    }

    public static SubLObject owl_assert_internal(SubLObject formula, final SubLObject mt, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (owl_to_cycl.owl_import_parameters_encoding(import_parameters).equalp(owl_to_cycl.$str86$utf_8) && (NIL != expression_find_if(owl_to_cycl.NON_ASCII_STRING_P, formula, UNPROVIDED, UNPROVIDED))) {
            final SubLObject transformed = expression_transform(formula, owl_to_cycl.NON_ASCII_STRING_P, owl_to_cycl.NON_ASCII_STRING_TO_UNICODE, UNPROVIDED, UNPROVIDED);
            if (NIL == expression_find_if(owl_to_cycl.NON_ASCII_STRING_P, transformed, UNPROVIDED, UNPROVIDED)) {
                formula = transformed;
            }
        }
        SubLObject successP = NIL;
        if (NIL != el_asserted_assertion_specP(formula, mt)) {
            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str454$Already_know__S___in__S, owl_to_cycl.$str239$__ }), formula, mt);
                force_output(UNPROVIDED);
            }
            successP = T;
        } else {
            final SubLObject _prev_bind_0 = $the_cyclist$.currentBinding(thread);
            try {
                $the_cyclist$.bind(NIL, thread);
                set_the_cyclist(owl_to_cycl.oip_cyclist(import_parameters));
                thread.resetMultipleValues();
                final SubLObject assertedP = owl_to_cycl.owl_assert_low(formula, mt);
                final SubLObject problematic_formula = thread.secondMultipleValue();
                thread.resetMultipleValues();
                if (NIL != assertedP) {
                    successP = T;
                } else
                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                        format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str455$Failed_to_assert__S__, owl_to_cycl.$str239$__ }), problematic_formula);
                        force_output(UNPROVIDED);
                    }

            } finally {
                $the_cyclist$.rebind(_prev_bind_0, thread);
            }
        }
        if (NIL != successP) {
            owl_utilities.note_sentence_asserted(formula, mt, owl_to_cycl.owl_import_parameters_import_term(import_parameters));
        }
        return successP;
    }

    public static final SubLObject owl_assert_alt(SubLObject formula, SubLObject mt, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
                SubLObject caching_state = NIL;
                if (NIL == v_memoization_state) {
                    return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_assert_internal(formula, mt, import_parameters);
                }
                caching_state = memoization_state.memoization_state_lookup(v_memoization_state, OWL_ASSERT, UNPROVIDED);
                if (NIL == caching_state) {
                    caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), OWL_ASSERT, THREE_INTEGER, NIL, EQUAL, UNPROVIDED);
                    memoization_state.memoization_state_put(v_memoization_state, OWL_ASSERT, caching_state);
                }
                {
                    SubLObject sxhash = memoization_state.sxhash_calc_3(formula, mt, import_parameters);
                    SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
                    if (collisions != $kw15$_MEMOIZED_ITEM_NOT_FOUND_) {
                        {
                            SubLObject cdolist_list_var = collisions;
                            SubLObject collision = NIL;
                            for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , collision = cdolist_list_var.first()) {
                                {
                                    SubLObject cached_args = collision.first();
                                    SubLObject results2 = second(collision);
                                    if (formula.equal(cached_args.first())) {
                                        cached_args = cached_args.rest();
                                        if (mt.equal(cached_args.first())) {
                                            cached_args = cached_args.rest();
                                            if (((NIL != cached_args) && (NIL == cached_args.rest())) && import_parameters.equal(cached_args.first())) {
                                                return memoization_state.caching_results(results2);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    {
                        SubLObject results = arg2(thread.resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_assert_internal(formula, mt, import_parameters)));
                        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(formula, mt, import_parameters));
                        return memoization_state.caching_results(results);
                    }
                }
            }
        }
    }

    public static SubLObject owl_assert(final SubLObject formula, final SubLObject mt, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_memoization_state = $memoization_state$.getDynamicValue(thread);
        SubLObject caching_state = NIL;
        if (NIL == v_memoization_state) {
            return owl_to_cycl.owl_assert_internal(formula, mt, import_parameters);
        }
        caching_state = memoization_state_lookup(v_memoization_state, owl_to_cycl.OWL_ASSERT, UNPROVIDED);
        if (NIL == caching_state) {
            caching_state = create_caching_state(memoization_state_lock(v_memoization_state), owl_to_cycl.OWL_ASSERT, THREE_INTEGER, NIL, EQUAL, UNPROVIDED);
            memoization_state_put(v_memoization_state, owl_to_cycl.OWL_ASSERT, caching_state);
        }
        final SubLObject sxhash = sxhash_calc_3(formula, mt, import_parameters);
        final SubLObject collisions = caching_state_lookup(caching_state, sxhash, UNPROVIDED);
        if (!collisions.eql($memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = NIL;
            collision = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = second(collision);
                if (formula.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (mt.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (((NIL != cached_args) && (NIL == cached_args.rest())) && import_parameters.equal(cached_args.first())) {
                            return caching_results(results2);
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            } 
        }
        final SubLObject results3 = arg2(thread.resetMultipleValues(), multiple_value_list(owl_to_cycl.owl_assert_internal(formula, mt, import_parameters)));
        caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(formula, mt, import_parameters));
        return caching_results(results3);
    }

    public static final SubLObject owl_assert_low_alt(SubLObject formula, SubLObject mt) {
        if (NIL != owl_utilities.owl_importer_use_rkfP()) {
            return rkf_assertion_utilities.rkf_assert_with_implicature(formula, mt, T);
        }
        return values(cyc_kernel.cyc_assert_wff(formula, mt, UNPROVIDED), NIL);
    }

    public static SubLObject owl_assert_low(final SubLObject formula, final SubLObject mt) {
        if (NIL != owl_utilities.owl_importer_use_rkfP()) {
            return rkf_assert_with_implicature(formula, mt, T);
        }
        return values(cyc_assert_wff(formula, mt, UNPROVIDED), NIL);
    }

    /**
     * Creates collections and instances (if they do not exist in the KB already) from a particular OWL file.
     *
     * @param TERM-INFO-LIST
     * 		listp of owl-term-info-p.
     */
    @LispMethod(comment = "Creates collections and instances (if they do not exist in the KB already) from a particular OWL file.\r\n\r\n@param TERM-INFO-LIST\r\n\t\tlistp of owl-term-info-p.")
    public static final SubLObject create_terms_from_owl_data_alt(SubLObject term_info_list, SubLObject import_parameters, SubLObject progress_message) {
        if (progress_message == UNPROVIDED) {
            progress_message = $str_alt440$Processing_term_definitions___;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            com.cyc.cycjava.cycl.owl.owl_to_cycl.note_owl_import_section_started();
            if (NIL != list_utilities.non_empty_list_p(term_info_list)) {
                {
                    SubLObject total = length(term_info_list);
                    SubLObject percent_per = divide(ONE_INTEGER, total);
                    SubLObject percent_done = ZERO_INTEGER;
                    SubLObject list_var = term_info_list;
                    $progress_note$.setDynamicValue(progress_message, thread);
                    $progress_start_time$.setDynamicValue(get_universal_time(), thread);
                    $progress_total$.setDynamicValue(length(list_var), thread);
                    $progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
                    {
                        SubLObject _prev_bind_0 = $last_percent_progress_index$.currentBinding(thread);
                        SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
                        SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
                        SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
                        try {
                            $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
                            $last_percent_progress_prediction$.bind(NIL, thread);
                            $within_noting_percent_progress$.bind(T, thread);
                            $percent_progress_start_time$.bind(get_universal_time(), thread);
                            noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
                            {
                                SubLObject csome_list_var = list_var;
                                SubLObject term_info = NIL;
                                for (term_info = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest() , term_info = csome_list_var.first()) {
                                    note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
                                    $progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
                                    if (NIL == com.cyc.cycjava.cycl.owl.owl_to_cycl.dont_reify_owl_termP(term_info, import_parameters)) {
                                        com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_define_one_term(term_info, import_parameters);
                                    }
                                    percent_done = add(percent_done, percent_per);
                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.note_owl_import_section_progress(percent_done);
                                }
                            }
                            noting_percent_progress_postamble();
                        } finally {
                            $percent_progress_start_time$.rebind(_prev_bind_3, thread);
                            $within_noting_percent_progress$.rebind(_prev_bind_2, thread);
                            $last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
                            $last_percent_progress_index$.rebind(_prev_bind_0, thread);
                        }
                    }
                }
            }
            com.cyc.cycjava.cycl.owl.owl_to_cycl.note_owl_import_section_done();
            return NIL;
        }
    }

    /**
     * Creates collections and instances (if they do not exist in the KB already) from a particular OWL file.
     *
     * @param TERM-INFO-LIST
     * 		listp of owl-term-info-p.
     */
    @LispMethod(comment = "Creates collections and instances (if they do not exist in the KB already) from a particular OWL file.\r\n\r\n@param TERM-INFO-LIST\r\n\t\tlistp of owl-term-info-p.")
    public static SubLObject create_terms_from_owl_data(final SubLObject term_info_list, final SubLObject import_parameters, SubLObject progress_message) {
        if (progress_message == UNPROVIDED) {
            progress_message = owl_to_cycl.$str456$Processing_term_definitions___;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        owl_to_cycl.note_owl_import_section_started();
        if (NIL != non_empty_list_p(term_info_list)) {
            final SubLObject total = length(term_info_list);
            final SubLObject percent_per = divide(ONE_INTEGER, total);
            SubLObject percent_done = ZERO_INTEGER;
            final SubLObject _prev_bind_0 = $progress_note$.currentBinding(thread);
            final SubLObject _prev_bind_2 = $progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_3 = $progress_total$.currentBinding(thread);
            final SubLObject _prev_bind_4 = $progress_sofar$.currentBinding(thread);
            final SubLObject _prev_bind_5 = $last_percent_progress_index$.currentBinding(thread);
            final SubLObject _prev_bind_6 = $last_percent_progress_prediction$.currentBinding(thread);
            final SubLObject _prev_bind_7 = $within_noting_percent_progress$.currentBinding(thread);
            final SubLObject _prev_bind_8 = $percent_progress_start_time$.currentBinding(thread);
            try {
                $progress_note$.bind(NIL != progress_message ? progress_message : owl_to_cycl.$$$cdolist, thread);
                $progress_start_time$.bind(get_universal_time(), thread);
                $progress_total$.bind(length(term_info_list), thread);
                $progress_sofar$.bind(ZERO_INTEGER, thread);
                $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
                $last_percent_progress_prediction$.bind(NIL, thread);
                $within_noting_percent_progress$.bind(T, thread);
                $percent_progress_start_time$.bind(get_universal_time(), thread);
                try {
                    noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
                    SubLObject csome_list_var = term_info_list;
                    SubLObject term_info = NIL;
                    term_info = csome_list_var.first();
                    while (NIL != csome_list_var) {
                        if (NIL == owl_to_cycl.dont_reify_owl_termP(term_info, import_parameters)) {
                            owl_to_cycl.owl_define_one_term(term_info, import_parameters);
                        }
                        percent_done = add(percent_done, percent_per);
                        owl_to_cycl.note_owl_import_section_progress(percent_done);
                        $progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
                        note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
                        csome_list_var = csome_list_var.rest();
                        term_info = csome_list_var.first();
                    } 
                } finally {
                    final SubLObject _prev_bind_0_$72 = $is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        $is_thread_performing_cleanupP$.bind(T, thread);
                        final SubLObject _values = getValuesAsVector();
                        noting_percent_progress_postamble();
                        restoreValuesFromVector(_values);
                    } finally {
                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$72, thread);
                    }
                }
            } finally {
                $percent_progress_start_time$.rebind(_prev_bind_8, thread);
                $within_noting_percent_progress$.rebind(_prev_bind_7, thread);
                $last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
                $last_percent_progress_index$.rebind(_prev_bind_5, thread);
                $progress_sofar$.rebind(_prev_bind_4, thread);
                $progress_total$.rebind(_prev_bind_3, thread);
                $progress_start_time$.rebind(_prev_bind_2, thread);
                $progress_note$.rebind(_prev_bind_0, thread);
            }
        }
        owl_to_cycl.note_owl_import_section_done();
        return NIL;
    }

    public static final SubLObject dont_reify_owl_termP_alt(SubLObject term_info, SubLObject import_parameters) {
        if ((NIL == com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_cyc_name(term_info)) && (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_lookup(term_info, $NODE_ID, UNPROVIDED))) {
            return T;
        } else {
            return NIL;
        }
    }

    public static SubLObject dont_reify_owl_termP(final SubLObject term_info, final SubLObject import_parameters) {
        if ((NIL == owl_to_cycl.owl_term_info_cyc_name(term_info)) && (NIL != owl_to_cycl.owl_term_info_plist_lookup(term_info, $NODE_ID, UNPROVIDED))) {
            return T;
        }
        return NIL;
    }

    public static final SubLObject owl_define_one_term_alt(SubLObject term_info, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject term_name = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_cyc_name(term_info);
                SubLObject external_name = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_lookup(term_info, $EXTERNAL_NAME, UNPROVIDED);
                SubLObject isas = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_types_from_info(term_info, import_parameters);
                SubLObject v_term = (NIL != external_name) ? ((SubLObject) (com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_term_of_type(external_name, isas.first(), import_parameters, UNPROVIDED))) : NIL;
                SubLObject defining_mt = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_ontology_context(import_parameters);
                if (NIL == fort_p(v_term)) {
                    v_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_term_from_info(term_info, import_parameters);
                }
                if (!((NIL != fort_p(v_term)) || (NIL != term_name))) {
                    if (NIL != $create_anonymous_owl_termsP$.getDynamicValue(thread)) {
                        {
                            SubLObject v_isa = find_if(CONSTANT_P, isas, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            SubLObject type = (NIL != v_isa) ? ((SubLObject) (v_isa)) : $$Thing;
                            term_name = cconcatenate($str_alt441$Anonymous_, constants_high.constant_name(type));
                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt442$__Creating__S_____, $str_alt223$__ }), term_name);
                                force_output(UNPROVIDED);
                            }
                        }
                    } else {
                        return NIL;
                    }
                }
                {
                    SubLObject cdolist_list_var = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_lookup(term_info, $ISAS, NIL);
                    SubLObject v_isa = NIL;
                    for (v_isa = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , v_isa = cdolist_list_var.first()) {
                        {
                            SubLObject isa_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_for_class(v_isa, import_parameters);
                            isas = cons(isa_term, isas);
                        }
                    }
                }
                if (NIL != fort_p(v_term)) {
                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                        format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt443$Potentially_adding_assertions_to_, $str_alt223$__ }), v_term);
                        force_output(UNPROVIDED);
                    }
                    {
                        SubLObject cdolist_list_var = isas;
                        SubLObject v_isa = NIL;
                        for (v_isa = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , v_isa = cdolist_list_var.first()) {
                            com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(list($$isa, v_term, v_isa), defining_mt, import_parameters);
                        }
                    }
                }
                if (NIL == fort_p(v_term)) {
                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                        format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt444$__Defining_term_from__S__, $str_alt223$__ }), term_info);
                        force_output(UNPROVIDED);
                    }
                    v_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_create(term_name, isas, defining_mt, $str_alt85$, T, import_parameters);
                }
                if (NIL == v_term) {
                    if (NIL != owl_utilities.owl_warnP()) {
                        Errors.warn($str_alt445$Failed_to_find_or_create_a_term_w, term_name);
                    }
                } else {
                    com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_define_one_term_internal(v_term, defining_mt, term_info, import_parameters);
                    owl_utilities.note_term_acted_on_during_import(v_term, com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_import_term(import_parameters), com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_cyclist(import_parameters));
                }
                return v_term;
            }
        }
    }

    public static SubLObject owl_define_one_term(final SubLObject term_info, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject term_name = owl_to_cycl.owl_term_info_cyc_name(term_info);
        final SubLObject external_name = owl_to_cycl.owl_term_info_plist_lookup(term_info, $EXTERNAL_NAME, UNPROVIDED);
        SubLObject isas = owl_to_cycl.owl_term_types_from_info(term_info, import_parameters);
        SubLObject v_term = (NIL != external_name) ? owl_to_cycl.owl_find_term_of_type(external_name, isas.first(), import_parameters, UNPROVIDED) : NIL;
        final SubLObject defining_mt = owl_to_cycl.owl_import_parameters_ontology_context(import_parameters);
        final SubLObject suffix = owl_to_cycl.owl_import_parameters_constant_suffix(import_parameters);
        if (NIL == forts.fort_p(v_term)) {
            v_term = owl_to_cycl.owl_find_term_from_info(term_info, import_parameters);
        }
        if ((NIL == forts.fort_p(v_term)) && (NIL == term_name)) {
            if (NIL == owl_to_cycl.$create_anonymous_owl_termsP$.getDynamicValue(thread)) {
                return NIL;
            }
            final SubLObject v_isa = find_if(CONSTANT_P, isas, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            final SubLObject type = (NIL != v_isa) ? v_isa : owl_to_cycl.$$Thing;
            term_name = cconcatenate(owl_to_cycl.$str457$Anonymous_, constant_name(type));
            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str458$__Creating__S_____, owl_to_cycl.$str239$__ }), term_name);
                force_output(UNPROVIDED);
            }
        }
        SubLObject cdolist_list_var = owl_to_cycl.owl_term_info_plist_lookup(term_info, $ISAS, NIL);
        SubLObject v_isa2 = NIL;
        v_isa2 = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject isa_term = owl_to_cycl.owl_find_or_create_term_for_class(v_isa2, import_parameters);
            isas = cons(isa_term, isas);
            cdolist_list_var = cdolist_list_var.rest();
            v_isa2 = cdolist_list_var.first();
        } 
        if (NIL != forts.fort_p(v_term)) {
            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str459$Potentially_adding_assertions_to_, owl_to_cycl.$str239$__ }), v_term);
                force_output(UNPROVIDED);
            }
            cdolist_list_var = isas;
            v_isa2 = NIL;
            v_isa2 = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                owl_to_cycl.owl_enqueue_assert(list(owl_to_cycl.$$isa, v_term, v_isa2), defining_mt, import_parameters);
                cdolist_list_var = cdolist_list_var.rest();
                v_isa2 = cdolist_list_var.first();
            } 
        }
        if (NIL == forts.fort_p(v_term)) {
            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str460$__Defining_term_from__S__, owl_to_cycl.$str239$__ }), term_info);
                force_output(UNPROVIDED);
            }
            v_term = owl_to_cycl.owl_create(term_name, isas, defining_mt, owl_to_cycl.$str92$, suffix, $UPCASE, import_parameters);
        }
        if (NIL == v_term) {
            if (NIL != owl_utilities.owl_warnP()) {
                Errors.warn(owl_to_cycl.$str461$Failed_to_find_or_create_a_term_w, term_name);
            }
        } else {
            owl_to_cycl.owl_define_one_term_internal(v_term, defining_mt, term_info, import_parameters);
            owl_utilities.note_term_acted_on_during_import(v_term, owl_to_cycl.owl_import_parameters_import_term(import_parameters), owl_to_cycl.owl_import_parameters_cyclist(import_parameters));
        }
        return v_term;
    }

    public static final SubLObject owl_find_term_from_info_alt(SubLObject term_info, SubLObject import_parameters) {
        {
            SubLObject v_term = NIL;
            SubLObject guid_string = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_lookup(term_info, $GUID, NIL);
            SubLObject externalid_string = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_lookup(term_info, $EXTERNALID, NIL);
            if (NIL != Guids.guid_string_p(guid_string)) {
                v_term = constants_high.find_constant_by_guid_string(guid_string);
            } else {
                if (NIL != kb_utilities.compact_hl_external_id_string_p(externalid_string)) {
                    v_term = kb_utilities.find_object_by_compact_hl_external_id_string(externalid_string);
                } else {
                    if (NIL != kb_utilities.hl_external_id_string_p(externalid_string)) {
                        v_term = kb_utilities.find_object_by_hl_external_id_string(externalid_string);
                    }
                }
            }
            if (NIL == v_term) {
                {
                    SubLObject csome_list_var = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_lookup(term_info, $EQUIVALENT_CLASSES, NIL);
                    SubLObject term_name = NIL;
                    for (term_name = csome_list_var.first(); !((NIL != v_term) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , term_name = csome_list_var.first()) {
                        v_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_for_class(term_name, import_parameters);
                    }
                }
            }
            if (NIL == v_term) {
                {
                    SubLObject component_names = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_lookup(term_info, $UNION_OF, NIL);
                    if (NIL != component_names) {
                        {
                            SubLObject components = NIL;
                            SubLObject cdolist_list_var = component_names;
                            SubLObject name = NIL;
                            for (name = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , name = cdolist_list_var.first()) {
                                {
                                    SubLObject v_class = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_for_class(name, import_parameters);
                                    components = cons(v_class, components);
                                }
                            }
                            v_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_union(components);
                        }
                    }
                }
            }
            return v_term;
        }
    }

    public static SubLObject owl_find_term_from_info(final SubLObject term_info, final SubLObject import_parameters) {
        SubLObject v_term = NIL;
        final SubLObject guid_string = owl_to_cycl.owl_term_info_plist_lookup(term_info, $GUID, NIL);
        final SubLObject externalid_string = owl_to_cycl.owl_term_info_plist_lookup(term_info, $EXTERNALID, NIL);
        if (NIL != Guids.guid_string_p(guid_string)) {
            v_term = find_constant_by_guid_string(guid_string);
        } else
            if (NIL != compact_hl_external_id_string_p(externalid_string)) {
                v_term = find_object_by_compact_hl_external_id_string(externalid_string);
            } else
                if (NIL != hl_external_id_string_p(externalid_string)) {
                    v_term = find_object_by_hl_external_id_string(externalid_string);
                }


        if (NIL == v_term) {
            SubLObject csome_list_var;
            SubLObject term_name;
            for (csome_list_var = owl_to_cycl.owl_term_info_plist_lookup(term_info, $EQUIVALENT_CLASSES, NIL), term_name = NIL, term_name = csome_list_var.first(); (NIL == v_term) && (NIL != csome_list_var); v_term = owl_to_cycl.owl_find_or_create_term_for_class(term_name, import_parameters) , csome_list_var = csome_list_var.rest() , term_name = csome_list_var.first()) {
            }
        }
        if (NIL == v_term) {
            final SubLObject component_names = owl_to_cycl.owl_term_info_plist_lookup(term_info, $UNION_OF, NIL);
            if (NIL != component_names) {
                SubLObject components = NIL;
                SubLObject cdolist_list_var = component_names;
                SubLObject name = NIL;
                name = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    final SubLObject v_class = owl_to_cycl.owl_find_or_create_term_for_class(name, import_parameters);
                    components = cons(v_class, components);
                    cdolist_list_var = cdolist_list_var.rest();
                    name = cdolist_list_var.first();
                } 
                v_term = owl_to_cycl.owl_term_union(components, import_parameters);
            }
        }
        return v_term;
    }

    public static final SubLObject owl_define_one_term_internal_alt(SubLObject v_term, SubLObject defining_mt, SubLObject term_info, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject external_name = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_lookup(term_info, $EXTERNAL_NAME, UNPROVIDED);
                SubLObject ontology = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_ontology(import_parameters);
                com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(list($$quotedIsa, v_term, com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_quoted_isa(import_parameters)), $$BookkeepingMt, import_parameters);
                if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.nonlocal_owl_term_reference_p(external_name)) {
                    {
                        SubLObject datum = external_name.rest();
                        SubLObject current = datum;
                        SubLObject uri = NIL;
                        SubLObject name = NIL;
                        destructuring_bind_must_consp(current, datum, $list_alt342);
                        uri = current.first();
                        current = current.rest();
                        destructuring_bind_must_consp(current, datum, $list_alt342);
                        name = current.first();
                        current = current.rest();
                        if (NIL == current) {
                            ontology = com.cyc.cycjava.cycl.owl.owl_to_cycl.find_or_create_owl_ontology_for_uri(uri, import_parameters, UNPROVIDED);
                            external_name = name;
                        } else {
                            cdestructuring_bind_error(datum, $list_alt342);
                        }
                    }
                }
                if (external_name.isString()) {
                    com.cyc.cycjava.cycl.owl.owl_to_cycl.assert_synonymous_external_concept(v_term, ontology, external_name, import_parameters);
                }
                if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_comment(term_info)) {
                    com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(list($const104$rdfs_comment, v_term, com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_comment(term_info)), defining_mt, import_parameters);
                }
                {
                    SubLObject cdolist_list_var = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_superclasses(term_info);
                    SubLObject genl_class_specification = NIL;
                    for (genl_class_specification = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , genl_class_specification = cdolist_list_var.first()) {
                        if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.node_id_specification_p(genl_class_specification)) {
                            genl_class_specification = com.cyc.cycjava.cycl.owl.owl_to_cycl.try_to_resolve_node_id_specification(genl_class_specification);
                        }
                        if ((genl_class_specification.isString() || (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_value_specification_union_p(genl_class_specification))) || (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.nonlocal_owl_term_reference_p(genl_class_specification))) {
                            {
                                SubLObject genl_class = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_for_class(genl_class_specification, import_parameters);
                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt448$Asserting_genl_class__S_of__S, $str_alt223$__ }), genl_class, v_term);
                                    force_output(UNPROVIDED);
                                }
                                com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(list($const449$rdfs_subClassOf, v_term, genl_class), defining_mt, import_parameters);
                            }
                        } else {
                            if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_restriction_p(genl_class_specification)) {
                                com.cyc.cycjava.cycl.owl.owl_to_cycl.assert_owl_restriction(v_term, genl_class_specification, defining_mt, import_parameters);
                            } else {
                                if (NIL != pattern_match.tree_matches_pattern(genl_class_specification, $list_alt450)) {
                                    {
                                        SubLObject value = second(genl_class_specification);
                                        SubLObject v_class = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_for_class(value, import_parameters);
                                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt451$Asserting_disjoint_class__S_of__S, $str_alt223$__ }), v_class, v_term);
                                            force_output(UNPROVIDED);
                                        }
                                        com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(list($const452$owl_disjointWith, v_class, v_term), defining_mt, import_parameters);
                                    }
                                } else {
                                    Errors.warn($str_alt453$Don_t_know_how_to_handle_supercla, genl_class_specification);
                                }
                            }
                        }
                    }
                }
                {
                    SubLObject cdolist_list_var = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_disjoint_classes(term_info);
                    SubLObject disjoint_class_specification = NIL;
                    for (disjoint_class_specification = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , disjoint_class_specification = cdolist_list_var.first()) {
                        if ((disjoint_class_specification.isString() || (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_value_specification_union_p(disjoint_class_specification))) || (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.nonlocal_owl_term_reference_p(disjoint_class_specification))) {
                            {
                                SubLObject disjoint_class = (NIL != disjoint_class_specification) ? ((SubLObject) (com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_for_class(disjoint_class_specification, import_parameters))) : NIL;
                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt454$Asserting_disjoint___S_and__S, $str_alt223$__ }), disjoint_class, v_term);
                                    force_output(UNPROVIDED);
                                }
                                com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(list($const452$owl_disjointWith, v_term, disjoint_class), defining_mt, import_parameters);
                            }
                        } else {
                            Errors.warn($str_alt455$Don_t_know_how_to_handle_disjoint, disjoint_class_specification);
                        }
                    }
                }
                {
                    SubLObject remainder = NIL;
                    for (remainder = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist(term_info); NIL != remainder; remainder = cddr(remainder)) {
                        {
                            SubLObject property = remainder.first();
                            SubLObject value = cadr(remainder);
                            SubLObject pcase_var = property;
                            if (((pcase_var.eql($EXTERNAL_NAME) || pcase_var.eql($ISAS)) || pcase_var.eql($GUID)) || pcase_var.eql($EXTERNALID)) {
                            } else {
                                if (pcase_var.eql($LABEL)) {
                                    {
                                        SubLObject cdolist_list_var = value;
                                        SubLObject label_info = NIL;
                                        for (label_info = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , label_info = cdolist_list_var.first()) {
                                            com.cyc.cycjava.cycl.owl.owl_to_cycl.assert_owl_label(v_term, label_info, import_parameters);
                                        }
                                    }
                                } else {
                                    if (pcase_var.eql($EQUIVALENT_CLASSES)) {
                                        {
                                            SubLObject cdolist_list_var = value;
                                            SubLObject equivalent_class_name = NIL;
                                            for (equivalent_class_name = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , equivalent_class_name = cdolist_list_var.first()) {
                                                com.cyc.cycjava.cycl.owl.owl_to_cycl.assert_owl_equivalent_class(v_term, equivalent_class_name, defining_mt, import_parameters);
                                            }
                                        }
                                    } else {
                                        if (pcase_var.eql($COMPLEMENT_OF)) {
                                            {
                                                SubLObject external_name_75 = value;
                                                SubLObject v_class = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_for_class(external_name_75, import_parameters);
                                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt451$Asserting_disjoint_class__S_of__S, $str_alt223$__ }), v_class, v_term);
                                                    force_output(UNPROVIDED);
                                                }
                                                com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(list($const452$owl_disjointWith, v_class, v_term), defining_mt, import_parameters);
                                            }
                                        } else {
                                            if (pcase_var.eql($UNION_OF)) {
                                                {
                                                    SubLObject components = NIL;
                                                    SubLObject cdolist_list_var = value;
                                                    SubLObject name = NIL;
                                                    for (name = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , name = cdolist_list_var.first()) {
                                                        {
                                                            SubLObject v_class = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_for_class(name, import_parameters);
                                                            components = cons(v_class, components);
                                                        }
                                                    }
                                                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                        format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt456$Asserting_union__S_of__S, $str_alt223$__ }), v_term, components);
                                                        force_output(UNPROVIDED);
                                                    }
                                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(list($$collectionUnion, v_term, bq_cons($$TheSet, components)), defining_mt, import_parameters);
                                                }
                                            } else {
                                                if (pcase_var.eql($INTERSECTION_OF)) {
                                                    {
                                                        SubLObject components = NIL;
                                                        SubLObject cdolist_list_var = value;
                                                        SubLObject name = NIL;
                                                        for (name = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , name = cdolist_list_var.first()) {
                                                            {
                                                                SubLObject v_class = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_for_class(name, import_parameters);
                                                                components = cons(v_class, components);
                                                            }
                                                        }
                                                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt458$Asserting_intersection__S_of__S, $str_alt223$__ }), v_term, components);
                                                            force_output(UNPROVIDED);
                                                        }
                                                        com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(list($$collectionIntersection, v_term, bq_cons($$TheSet, components)), defining_mt, import_parameters);
                                                    }
                                                } else {
                                                    if (pcase_var.eql($ENUMERATED_INSTANCES)) {
                                                        {
                                                            SubLObject names = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_term_enumeration_terms(value);
                                                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt461$Asserting_enumeration__S_of__S, $str_alt223$__ }), v_term, names);
                                                                force_output(UNPROVIDED);
                                                            }
                                                            {
                                                                SubLObject cdolist_list_var = names;
                                                                SubLObject name = NIL;
                                                                for (name = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , name = cdolist_list_var.first()) {
                                                                    {
                                                                        SubLObject instance = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_of_type(name, v_term, import_parameters);
                                                                        com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(list($$isa, instance, v_term), defining_mt, import_parameters);
                                                                    }
                                                                }
                                                            }
                                                            com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(list($$completelyAssertedCollection, v_term), defining_mt, import_parameters);
                                                        }
                                                    } else {
                                                        if (pcase_var.eql($MY_PRED_VALUES)) {
                                                            {
                                                                SubLObject cdolist_list_var = value;
                                                                SubLObject pair = NIL;
                                                                for (pair = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , pair = cdolist_list_var.first()) {
                                                                    {
                                                                        SubLObject datum = pair;
                                                                        SubLObject current = datum;
                                                                        SubLObject property_name = NIL;
                                                                        SubLObject value_76 = NIL;
                                                                        destructuring_bind_must_consp(current, datum, $list_alt397);
                                                                        property_name = current.first();
                                                                        current = current.rest();
                                                                        destructuring_bind_must_consp(current, datum, $list_alt397);
                                                                        value_76 = current.first();
                                                                        current = current.rest();
                                                                        if (NIL == current) {
                                                                            {
                                                                                SubLObject pred = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_of_type(property_name, $$OWLProperty, import_parameters);
                                                                                SubLObject sentence = make_binary_formula(pred, v_term, value_76);
                                                                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt398$__Asserting__S__, $str_alt223$__ }), sentence);
                                                                                    force_output(UNPROVIDED);
                                                                                }
                                                                                com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(sentence, defining_mt, import_parameters);
                                                                            }
                                                                        } else {
                                                                            cdestructuring_bind_error(datum, $list_alt397);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if (NIL != owl_utilities.owl_warnP()) {
                                                                Errors.warn($str_alt463$Can_t_handle__S__value___S_, property, value);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return v_term;
            }
        }
    }

    public static SubLObject owl_define_one_term_internal(final SubLObject v_term, final SubLObject defining_mt, final SubLObject term_info, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject external_name = owl_to_cycl.owl_term_info_plist_lookup(term_info, $EXTERNAL_NAME, UNPROVIDED);
        SubLObject ontology = owl_to_cycl.owl_import_parameters_ontology(import_parameters);
        owl_to_cycl.owl_enqueue_assert(list(owl_to_cycl.$$quotedIsa, v_term, owl_to_cycl.owl_import_parameters_quoted_isa(import_parameters)), owl_to_cycl.$$BookkeepingMt, import_parameters);
        if (NIL != owl_to_cycl.nonlocal_owl_term_reference_p(external_name)) {
            SubLObject current;
            final SubLObject datum = current = external_name.rest();
            SubLObject uri = NIL;
            SubLObject name = NIL;
            destructuring_bind_must_consp(current, datum, owl_to_cycl.$list400);
            uri = current.first();
            current = current.rest();
            destructuring_bind_must_consp(current, datum, owl_to_cycl.$list400);
            name = current.first();
            current = current.rest();
            if (NIL == current) {
                ontology = owl_to_cycl.find_or_create_owl_ontology_for_uri(uri, import_parameters, UNPROVIDED);
                external_name = name;
            } else {
                cdestructuring_bind_error(datum, owl_to_cycl.$list400);
            }
        }
        if (external_name.isString()) {
            owl_to_cycl.assert_synonymous_external_concept(v_term, ontology, external_name, import_parameters);
        }
        if (NIL != owl_to_cycl.owl_term_info_comment(term_info)) {
            owl_to_cycl.owl_enqueue_assert(list(owl_to_cycl.$const112$rdfs_comment, v_term, owl_to_cycl.owl_term_info_comment(term_info)), defining_mt, import_parameters);
        }
        SubLObject superclasses = owl_to_cycl.owl_term_info_superclasses(term_info);
        if (NIL != empty_list_p(superclasses)) {
            superclasses = cons(owl_utilities.owl_name(owl_to_cycl.$$$Thing), superclasses);
            owl_utilities.note_term_acted_on_during_import(owl_to_cycl.$const465$owl_Thing, owl_to_cycl.owl_import_parameters_import_term(import_parameters), owl_to_cycl.owl_import_parameters_cyclist(import_parameters));
        }
        SubLObject cdolist_list_var = superclasses;
        SubLObject genl_class_specification = NIL;
        genl_class_specification = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != owl_to_cycl.node_id_specification_p(genl_class_specification)) {
                genl_class_specification = owl_to_cycl.try_to_resolve_node_id_specification(genl_class_specification);
            }
            if ((genl_class_specification.isString() || (NIL != owl_to_cycl.owl_external_value_specification_union_p(genl_class_specification))) || (NIL != owl_to_cycl.nonlocal_owl_term_reference_p(genl_class_specification))) {
                final SubLObject genl_class = owl_to_cycl.owl_find_or_create_term_for_class(genl_class_specification, import_parameters);
                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str466$Asserting_genl_class__S_of__S, owl_to_cycl.$str239$__ }), genl_class, v_term);
                    force_output(UNPROVIDED);
                }
                owl_to_cycl.owl_enqueue_assert(list(owl_to_cycl.$const467$rdfs_subClassOf, v_term, genl_class), defining_mt, import_parameters);
            } else
                if (NIL != owl_to_cycl.owl_restriction_p(genl_class_specification)) {
                    owl_to_cycl.assert_owl_restriction(v_term, genl_class_specification, defining_mt, import_parameters);
                } else
                    if (NIL != tree_matches_pattern(genl_class_specification, owl_to_cycl.$list468)) {
                        final SubLObject value = second(genl_class_specification);
                        final SubLObject v_class = owl_to_cycl.owl_find_or_create_term_for_class(value, import_parameters);
                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str469$Asserting_disjoint_class__S_of__S, owl_to_cycl.$str239$__ }), v_class, v_term);
                            force_output(UNPROVIDED);
                        }
                        owl_to_cycl.owl_enqueue_assert(list(owl_to_cycl.$const470$owl_disjointWith, v_class, v_term), defining_mt, import_parameters);
                    } else {
                        Errors.warn(owl_to_cycl.$str471$Don_t_know_how_to_handle_supercla, genl_class_specification);
                    }


            cdolist_list_var = cdolist_list_var.rest();
            genl_class_specification = cdolist_list_var.first();
        } 
        SubLObject cdolist_list_var2 = owl_to_cycl.owl_term_info_disjoint_classes(term_info);
        SubLObject disjoint_class_specification = NIL;
        disjoint_class_specification = cdolist_list_var2.first();
        while (NIL != cdolist_list_var2) {
            if ((disjoint_class_specification.isString() || (NIL != owl_to_cycl.owl_external_value_specification_union_p(disjoint_class_specification))) || (NIL != owl_to_cycl.nonlocal_owl_term_reference_p(disjoint_class_specification))) {
                final SubLObject disjoint_class = (NIL != disjoint_class_specification) ? owl_to_cycl.owl_find_or_create_term_for_class(disjoint_class_specification, import_parameters) : NIL;
                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str472$Asserting_disjoint___S_and__S, owl_to_cycl.$str239$__ }), disjoint_class, v_term);
                    force_output(UNPROVIDED);
                }
                owl_to_cycl.owl_enqueue_assert(list(owl_to_cycl.$const470$owl_disjointWith, v_term, disjoint_class), defining_mt, import_parameters);
            } else {
                Errors.warn(owl_to_cycl.$str473$Don_t_know_how_to_handle_disjoint, disjoint_class_specification);
            }
            cdolist_list_var2 = cdolist_list_var2.rest();
            disjoint_class_specification = cdolist_list_var2.first();
        } 
        SubLObject remainder;
        SubLObject property;
        SubLObject value2;
        SubLObject pcase_var;
        SubLObject cdolist_list_var3;
        SubLObject label_info;
        SubLObject equivalent_class_name;
        SubLObject external_name_$73;
        SubLObject v_class2;
        SubLObject components;
        SubLObject cdolist_list_var4;
        SubLObject name2;
        SubLObject v_class3;
        SubLObject names;
        SubLObject instance;
        SubLObject pair;
        SubLObject current2;
        SubLObject datum2;
        SubLObject property_name;
        SubLObject value_$74;
        SubLObject pred;
        SubLObject sentence;
        for (remainder = NIL, remainder = owl_to_cycl.owl_term_info_plist(term_info); NIL != remainder; remainder = cddr(remainder)) {
            property = remainder.first();
            value2 = cadr(remainder);
            pcase_var = property;
            if (((!pcase_var.eql($EXTERNAL_NAME)) && (!pcase_var.eql($ISAS))) && (!pcase_var.eql($GUID))) {
                if (!pcase_var.eql($EXTERNALID)) {
                    if (pcase_var.eql($LABEL)) {
                        cdolist_list_var3 = value2;
                        label_info = NIL;
                        label_info = cdolist_list_var3.first();
                        while (NIL != cdolist_list_var3) {
                            owl_to_cycl.assert_owl_label(v_term, label_info, import_parameters);
                            cdolist_list_var3 = cdolist_list_var3.rest();
                            label_info = cdolist_list_var3.first();
                        } 
                    } else
                        if (pcase_var.eql($EQUIVALENT_CLASSES)) {
                            cdolist_list_var3 = value2;
                            equivalent_class_name = NIL;
                            equivalent_class_name = cdolist_list_var3.first();
                            while (NIL != cdolist_list_var3) {
                                owl_to_cycl.assert_owl_equivalent_class(v_term, equivalent_class_name, defining_mt, import_parameters);
                                cdolist_list_var3 = cdolist_list_var3.rest();
                                equivalent_class_name = cdolist_list_var3.first();
                            } 
                        } else
                            if (pcase_var.eql($COMPLEMENT_OF)) {
                                external_name_$73 = value2;
                                v_class2 = owl_to_cycl.owl_find_or_create_term_for_class(external_name_$73, import_parameters);
                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str469$Asserting_disjoint_class__S_of__S, owl_to_cycl.$str239$__ }), v_class2, v_term);
                                    force_output(UNPROVIDED);
                                }
                                owl_to_cycl.owl_enqueue_assert(list(owl_to_cycl.$const470$owl_disjointWith, v_class2, v_term), defining_mt, import_parameters);
                            } else
                                if (pcase_var.eql($UNION_OF)) {
                                    components = NIL;
                                    cdolist_list_var4 = value2;
                                    name2 = NIL;
                                    name2 = cdolist_list_var4.first();
                                    while (NIL != cdolist_list_var4) {
                                        v_class3 = owl_to_cycl.owl_find_or_create_term_for_class(name2, import_parameters);
                                        components = cons(v_class3, components);
                                        cdolist_list_var4 = cdolist_list_var4.rest();
                                        name2 = cdolist_list_var4.first();
                                    } 
                                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                        format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str474$Asserting_union__S_of__S, owl_to_cycl.$str239$__ }), v_term, components);
                                        force_output(UNPROVIDED);
                                    }
                                    owl_to_cycl.owl_enqueue_assert(list(owl_to_cycl.$$collectionUnion, v_term, bq_cons(owl_to_cycl.$$TheSet, components)), defining_mt, import_parameters);
                                } else
                                    if (pcase_var.eql($INTERSECTION_OF)) {
                                        components = NIL;
                                        cdolist_list_var4 = value2;
                                        name2 = NIL;
                                        name2 = cdolist_list_var4.first();
                                        while (NIL != cdolist_list_var4) {
                                            v_class3 = owl_to_cycl.owl_find_or_create_term_for_class(name2, import_parameters);
                                            components = cons(v_class3, components);
                                            cdolist_list_var4 = cdolist_list_var4.rest();
                                            name2 = cdolist_list_var4.first();
                                        } 
                                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str476$Asserting_intersection__S_of__S, owl_to_cycl.$str239$__ }), v_term, components);
                                            force_output(UNPROVIDED);
                                        }
                                        owl_to_cycl.owl_enqueue_assert(list(owl_to_cycl.$$collectionIntersection, v_term, bq_cons(owl_to_cycl.$$TheSet, components)), defining_mt, import_parameters);
                                    } else
                                        if (pcase_var.eql($ENUMERATED_INSTANCES)) {
                                            names = owl_to_cycl.owl_external_term_enumeration_terms(value2);
                                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str479$Asserting_enumeration__S_of__S, owl_to_cycl.$str239$__ }), v_term, names);
                                                force_output(UNPROVIDED);
                                            }
                                            cdolist_list_var4 = names;
                                            name2 = NIL;
                                            name2 = cdolist_list_var4.first();
                                            while (NIL != cdolist_list_var4) {
                                                instance = owl_to_cycl.owl_find_or_create_term_of_type(name2, v_term, import_parameters);
                                                owl_to_cycl.owl_enqueue_assert(list(owl_to_cycl.$$isa, instance, v_term), defining_mt, import_parameters);
                                                cdolist_list_var4 = cdolist_list_var4.rest();
                                                name2 = cdolist_list_var4.first();
                                            } 
                                            owl_to_cycl.owl_enqueue_assert(list(owl_to_cycl.$$completelyAssertedCollection, v_term), defining_mt, import_parameters);
                                        } else
                                            if (pcase_var.eql(owl_to_cycl.$MY_PRED_VALUES)) {
                                                cdolist_list_var3 = value2;
                                                pair = NIL;
                                                pair = cdolist_list_var3.first();
                                                while (NIL != cdolist_list_var3) {
                                                    datum2 = current2 = pair;
                                                    property_name = NIL;
                                                    value_$74 = NIL;
                                                    destructuring_bind_must_consp(current2, datum2, owl_to_cycl.$list412);
                                                    property_name = current2.first();
                                                    current2 = current2.rest();
                                                    destructuring_bind_must_consp(current2, datum2, owl_to_cycl.$list412);
                                                    value_$74 = current2.first();
                                                    current2 = current2.rest();
                                                    if (NIL == current2) {
                                                        pred = owl_to_cycl.owl_find_or_create_term_of_type(property_name, owl_to_cycl.$$OWLProperty, import_parameters);
                                                        sentence = make_binary_formula(pred, v_term, value_$74);
                                                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str413$__Asserting__S__, owl_to_cycl.$str239$__ }), sentence);
                                                            force_output(UNPROVIDED);
                                                        }
                                                        owl_to_cycl.owl_enqueue_assert(sentence, defining_mt, import_parameters);
                                                    } else {
                                                        cdestructuring_bind_error(datum2, owl_to_cycl.$list412);
                                                    }
                                                    cdolist_list_var3 = cdolist_list_var3.rest();
                                                    pair = cdolist_list_var3.first();
                                                } 
                                            } else
                                                if (NIL != owl_utilities.owl_warnP()) {
                                                    Errors.warn(owl_to_cycl.$str481$Can_t_handle__S__value___S_, property, value2);
                                                }







                }
            }
        }
        return v_term;
    }

    public static final SubLObject assert_owl_label_alt(SubLObject v_term, SubLObject value, SubLObject import_parameters) {
        {
            SubLObject datum = value;
            SubLObject current = datum;
            SubLObject label = NIL;
            SubLObject language = NIL;
            destructuring_bind_must_consp(current, datum, $list_alt464);
            label = current.first();
            current = current.rest();
            language = current;
            {
                SubLObject lexicon = (NIL != language) ? ((SubLObject) (ask_utilities.query_variable($sym465$_LEXICON, listS($$languageHasRootLexicon, language, $list_alt467), $$InferencePSC, $list_alt468).first())) : NIL;
                SubLObject mt = (NIL != lexicon) ? ((SubLObject) (lexicon)) : $$GeneralEnglishMt;
                SubLObject clean_label = string_utilities.strip_chars_meeting_test(label, symbol_function(CONTROL_CHAR_P));
                com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(list($const470$rdfs_label, v_term, clean_label), mt, import_parameters);
            }
            return label;
        }
    }

    public static SubLObject assert_owl_label(final SubLObject v_term, final SubLObject value, final SubLObject import_parameters) {
        SubLObject label = NIL;
        SubLObject language = NIL;
        destructuring_bind_must_consp(value, value, owl_to_cycl.$list482);
        label = value.first();
        final SubLObject current = language = value.rest();
        final SubLObject lexicon = (NIL != language) ? query_variable(owl_to_cycl.$sym483$_LEXICON, listS(owl_to_cycl.$$languageHasRootLexicon, language, owl_to_cycl.$list485), owl_to_cycl.$$InferencePSC, owl_to_cycl.$list486).first() : NIL;
        final SubLObject mt = (NIL != lexicon) ? lexicon : owl_to_cycl.$$GeneralEnglishMt;
        final SubLObject clean_label = strip_chars_meeting_test(label, symbol_function(owl_to_cycl.CONTROL_CHAR_P));
        owl_to_cycl.owl_enqueue_assert(list(owl_to_cycl.$const488$rdfs_label, v_term, clean_label), mt, import_parameters);
        return label;
    }

    public static final SubLObject assert_owl_equivalent_class_alt(SubLObject col, SubLObject external_name, SubLObject defining_mt, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject v_class = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_for_class(external_name, import_parameters);
                if (v_class.equal(col)) {
                } else {
                    if (NIL != v_class) {
                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt471$Asserting_equivalent_class__S_of_, $str_alt223$__ }), v_class, col);
                            force_output(UNPROVIDED);
                        }
                        com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(list($const472$owl_equivalentClass, v_class, col), defining_mt, import_parameters);
                    } else {
                        if (NIL != owl_utilities.owl_warnP()) {
                            Errors.warn($str_alt473$Failed_to_assert_equivalent_class, external_name, col);
                        }
                    }
                }
            }
            return NIL;
        }
    }

    public static SubLObject assert_owl_equivalent_class(final SubLObject col, final SubLObject external_name, final SubLObject defining_mt, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_class = owl_to_cycl.owl_find_or_create_term_for_class(external_name, import_parameters);
        if (!v_class.equal(col)) {
            if (NIL != v_class) {
                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str489$Asserting_equivalent_class__S_of_, owl_to_cycl.$str239$__ }), v_class, col);
                    force_output(UNPROVIDED);
                }
                owl_to_cycl.owl_enqueue_assert(list(owl_to_cycl.$const490$owl_equivalentClass, v_class, col), defining_mt, import_parameters);
            } else
                if (NIL != owl_utilities.owl_warnP()) {
                    Errors.warn(owl_to_cycl.$str491$Failed_to_assert_equivalent_class, external_name, col);
                }

        }
        return NIL;
    }

    public static final SubLObject assert_owl_restriction_alt(SubLObject col, SubLObject restriction, SubLObject defining_mt, SubLObject import_parameters) {
        {
            SubLObject sentence = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_restriction_sentence(col, restriction, import_parameters);
            if (NIL != sentence) {
                com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_enqueue_assert(sentence, defining_mt, import_parameters);
            }
        }
        return NIL;
    }

    public static SubLObject assert_owl_restriction(final SubLObject col, final SubLObject restriction, final SubLObject defining_mt, final SubLObject import_parameters) {
        final SubLObject sentence = owl_to_cycl.owl_restriction_sentence(col, restriction, import_parameters);
        if (NIL != sentence) {
            owl_to_cycl.owl_enqueue_assert(sentence, defining_mt, import_parameters);
        }
        return NIL;
    }

    public static final SubLObject owl_restriction_sentence_alt(SubLObject col, SubLObject restriction, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject datum = restriction.rest();
                SubLObject current = datum;
                SubLObject property = NIL;
                SubLObject type = NIL;
                SubLObject value = NIL;
                destructuring_bind_must_consp(current, datum, $list_alt474);
                property = current.first();
                current = current.rest();
                destructuring_bind_must_consp(current, datum, $list_alt474);
                type = current.first();
                current = current.rest();
                destructuring_bind_must_consp(current, datum, $list_alt474);
                value = current.first();
                current = current.rest();
                if (NIL == current) {
                    {
                        SubLObject pred = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_of_type(property, $$OWLProperty, import_parameters);
                        SubLObject target = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_from_specification(value, $$Thing, import_parameters);
                        SubLObject sentence = NIL;
                        if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.nonlocal_owl_term_reference_p(value)) {
                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt475$Resolved_nonlocal_reference__S___, $str_alt223$__ }), value, target);
                                force_output(UNPROVIDED);
                            }
                        }
                        if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.node_id_specification_p(target)) {
                            if (NIL != owl_utilities.owl_warnP()) {
                                Errors.warn($str_alt476$Node_ID_as_restriction_target___S, target);
                            }
                        }
                        if (NIL == target) {
                            Errors.warn($str_alt477$Can_t_handle__S_restrictions_with, type, value);
                        } else {
                            if (type.equal(owl_utilities.owl_name($$$allValuesFrom))) {
                                sentence = list($$relationAllOnly, pred, col, target);
                            } else {
                                if (type.equal(owl_utilities.owl_name($$$someValuesFrom))) {
                                    sentence = list($$relationAllExists, pred, col, target);
                                } else {
                                    if (type.equal(owl_utilities.owl_name($$$hasValue))) {
                                        sentence = list($$relationAllInstance, pred, col, target);
                                    } else {
                                        if (type.equal(owl_utilities.owl_name($$$minCardinality)) && value.eql(ONE_INTEGER)) {
                                            sentence = list($$requiredArg1Pred, col, pred);
                                        } else {
                                            if (type.equal(owl_utilities.owl_name($$$cardinality))) {
                                                sentence = list($$relationAllExistsCount, pred, col, $$Thing, target);
                                            } else {
                                                if (type.equal(owl_utilities.owl_name($$$minCardinality))) {
                                                    sentence = list($$relationAllExistsMin, pred, col, $$Thing, target);
                                                } else {
                                                    if (type.equal(owl_utilities.owl_name($$$maxCardinality))) {
                                                        sentence = list($$relationAllExistsMax, pred, col, $$Thing, target);
                                                    } else {
                                                        Errors.warn($str_alt477$Can_t_handle__S_restrictions_with, type, value);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        return sentence;
                    }
                } else {
                    cdestructuring_bind_error(datum, $list_alt474);
                }
            }
            return NIL;
        }
    }

    public static SubLObject owl_restriction_sentence(final SubLObject col, final SubLObject restriction, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject current;
        final SubLObject datum = current = restriction.rest();
        SubLObject property = NIL;
        SubLObject type = NIL;
        SubLObject value = NIL;
        SubLObject v_class = NIL;
        destructuring_bind_must_consp(current, datum, owl_to_cycl.$list492);
        property = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, datum, owl_to_cycl.$list492);
        type = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, datum, owl_to_cycl.$list492);
        value = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, datum, owl_to_cycl.$list492);
        v_class = current.first();
        current = current.rest();
        if (NIL == current) {
            final SubLObject pred = owl_to_cycl.owl_find_or_create_term_of_type(property, owl_to_cycl.$$OWLProperty, import_parameters);
            final SubLObject resolved_class = (NIL != forts.fort_p(v_class)) ? v_class : owl_to_cycl.owl_find_or_create_term_of_type(v_class, owl_to_cycl.$const349$owl_Class, import_parameters);
            final SubLObject target = owl_to_cycl.owl_find_or_create_term_from_specification(value, owl_to_cycl.$$Thing, import_parameters);
            SubLObject sentence = NIL;
            if ((NIL != owl_to_cycl.nonlocal_owl_term_reference_p(value)) && (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread))) {
                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str493$Resolved_nonlocal_reference__S___, owl_to_cycl.$str239$__ }), value, target);
                force_output(UNPROVIDED);
            }
            if ((NIL != owl_to_cycl.node_id_specification_p(target)) && (NIL != owl_utilities.owl_warnP())) {
                Errors.warn(owl_to_cycl.$str494$Node_ID_as_restriction_target___S, target);
            }
            if (NIL == target) {
                Errors.warn(owl_to_cycl.$str495$Can_t_handle__S_restrictions_with, type, value);
            } else
                if (type.equal(owl_utilities.owl_name(owl_to_cycl.$$$allValuesFrom))) {
                    sentence = list(owl_to_cycl.$$relationAllOnly, pred, col, target);
                } else
                    if (type.equal(owl_utilities.owl_name(owl_to_cycl.$$$someValuesFrom))) {
                        sentence = list(owl_to_cycl.$$relationAllExists, pred, col, target);
                    } else
                        if (type.equal(owl_utilities.owl_name(owl_to_cycl.$$$hasValue))) {
                            sentence = list(owl_to_cycl.$$relationAllInstance, pred, col, target);
                        } else
                            if ((type.equal(owl_utilities.owl_name(owl_to_cycl.$$$minCardinality)) && value.eql(ONE_INTEGER)) && resolved_class.eql(owl_to_cycl.$$Thing)) {
                                sentence = list(owl_to_cycl.$$requiredArg1Pred, col, pred);
                            } else
                                if (type.equal(owl_utilities.owl_name(owl_to_cycl.$$$cardinality))) {
                                    sentence = list(owl_to_cycl.$$relationAllExistsCount, pred, col, resolved_class, target);
                                } else
                                    if (type.equal(owl_utilities.owl_name(owl_to_cycl.$$$minCardinality))) {
                                        sentence = list(owl_to_cycl.$$relationAllExistsMin, pred, col, resolved_class, target);
                                    } else
                                        if (type.equal(owl_utilities.owl_name(owl_to_cycl.$$$maxCardinality))) {
                                            sentence = list(owl_to_cycl.$$relationAllExistsMax, pred, col, resolved_class, target);
                                        } else {
                                            Errors.warn(owl_to_cycl.$str495$Can_t_handle__S_restrictions_with, type, value);
                                        }







            return sentence;
        }
        cdestructuring_bind_error(datum, owl_to_cycl.$list492);
        return NIL;
    }

    public static final SubLObject owl_restriction_collection(SubLObject restriction, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject datum = restriction.rest();
                SubLObject current = datum;
                SubLObject property = NIL;
                SubLObject type = NIL;
                SubLObject value = NIL;
                destructuring_bind_must_consp(current, datum, $list_alt474);
                property = current.first();
                current = current.rest();
                destructuring_bind_must_consp(current, datum, $list_alt474);
                type = current.first();
                current = current.rest();
                destructuring_bind_must_consp(current, datum, $list_alt474);
                value = current.first();
                current = current.rest();
                if (NIL == current) {
                    {
                        SubLObject pred = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_of_type(property, $$OWLProperty, import_parameters);
                        SubLObject target = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_from_specification(value, $$Thing, import_parameters);
                        SubLObject collection = NIL;
                        if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.nonlocal_owl_term_reference_p(value)) {
                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt475$Resolved_nonlocal_reference__S___, $str_alt223$__ }), value, target);
                                force_output(UNPROVIDED);
                            }
                        }
                        if (type.equal(owl_utilities.owl_name($$$allValuesFrom))) {
                            collection = list($$TheCollectionOf, $sym492$_X, list($$relationInstanceOnly, pred, $sym492$_X, target));
                        } else {
                            if (type.equal(owl_utilities.owl_name($$$someValuesFrom))) {
                                collection = list($$TheCollectionOf, $sym492$_X, list($$relationInstanceExists, pred, $sym492$_X, target));
                            } else {
                                if (type.equal(owl_utilities.owl_name($$$hasValue))) {
                                    collection = list($$TheCollectionOf, $sym492$_X, list(pred, $sym492$_X, target));
                                } else {
                                    if (type.equal(owl_utilities.owl_name($$$cardinality))) {
                                        collection = list($$TheCollectionOf, $sym492$_X, list($$relationInstanceExistsCount, pred, $sym492$_X, $$Thing, target));
                                    } else {
                                        if (type.equal(owl_utilities.owl_name($$$maxCardinality))) {
                                            collection = list($$TheCollectionOf, $sym492$_X, list($$relationInstanceExistsMax, pred, $sym492$_X, $$Thing, target));
                                        } else {
                                            if (type.equal(owl_utilities.owl_name($$$minCardinality))) {
                                                collection = list($$TheCollectionOf, $sym492$_X, list($$relationInstanceExistsMin, pred, $sym492$_X, $$Thing, target));
                                            } else {
                                                Errors.sublisp_break($str_alt498$Can_t_create_collection_from__S_r, new SubLObject[]{ type, value });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        return collection;
                    }
                } else {
                    cdestructuring_bind_error(datum, $list_alt474);
                }
            }
            return NIL;
        }
    }

    public static SubLObject owl_restriction_collection(final SubLObject restriction, final SubLObject import_parameters, SubLObject genl) {
        if (genl == UNPROVIDED) {
            genl = owl_to_cycl.$$Thing;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject current;
        final SubLObject datum = current = restriction.rest();
        SubLObject property = NIL;
        SubLObject type = NIL;
        SubLObject value = NIL;
        SubLObject v_class = NIL;
        destructuring_bind_must_consp(current, datum, owl_to_cycl.$list492);
        property = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, datum, owl_to_cycl.$list492);
        type = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, datum, owl_to_cycl.$list492);
        value = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, datum, owl_to_cycl.$list492);
        v_class = current.first();
        current = current.rest();
        if (NIL == current) {
            final SubLObject pred = owl_to_cycl.owl_find_or_create_term_of_type(property, owl_to_cycl.$$OWLProperty, import_parameters);
            final SubLObject resolved_class = (NIL != forts.fort_p(v_class)) ? v_class : owl_to_cycl.owl_find_or_create_term_of_type(v_class, owl_to_cycl.$const349$owl_Class, import_parameters);
            final SubLObject target = owl_to_cycl.owl_find_or_create_term_from_specification(value, owl_to_cycl.$$Thing, import_parameters);
            SubLObject collection = NIL;
            if ((NIL != owl_to_cycl.nonlocal_owl_term_reference_p(value)) && (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread))) {
                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str493$Resolved_nonlocal_reference__S___, owl_to_cycl.$str239$__ }), value, target);
                force_output(UNPROVIDED);
            }
            final SubLObject template = alist_lookup_without_values(owl_to_cycl.$owl_restriction_collection_templates$.getGlobalValue(), type, symbol_function(EQUAL), UNPROVIDED);
            if (NIL != template) {
                collection = formula_subst(pred, $PRED, formula_subst(resolved_class, $CLASS, formula_subst(target, $TARGET, formula_subst(genl, $GENL, template, UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED);
            } else {
                Errors.sublisp_break(owl_to_cycl.$str518$Can_t_create_collection_from__S_r, new SubLObject[]{ type, value });
            }
            return collection;
        }
        cdestructuring_bind_error(datum, owl_to_cycl.$list492);
        return NIL;
    }

    public static final SubLObject find_or_create_owl_class_from_restriction_internal(SubLObject restriction, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject term_formula = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_restriction_collection(restriction, import_parameters);
                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt500$Created__S_from__S, $str_alt223$__ }), term_formula, restriction);
                    force_output(UNPROVIDED);
                }
                return NIL != term_formula ? ((SubLObject) (czer_main.canonicalize_term(term_formula, UNPROVIDED))) : NIL;
            }
        }
    }

    public static SubLObject find_or_create_owl_class_from_restriction_internal(final SubLObject restriction, final SubLObject import_parameters, SubLObject genl) {
        if (genl == UNPROVIDED) {
            genl = owl_to_cycl.$$Thing;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject term_formula = owl_to_cycl.owl_restriction_collection(restriction, import_parameters, genl);
        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str520$Created__S_from__S, owl_to_cycl.$str239$__ }), term_formula, restriction);
            force_output(UNPROVIDED);
        }
        return owl_to_cycl.owl_find_or_create_nat(term_formula, import_parameters);
    }

    public static final SubLObject find_or_create_owl_class_from_restriction(SubLObject restriction, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
                SubLObject caching_state = NIL;
                if (NIL == v_memoization_state) {
                    return com.cyc.cycjava.cycl.owl.owl_to_cycl.find_or_create_owl_class_from_restriction_internal(restriction, import_parameters);
                }
                caching_state = memoization_state.memoization_state_lookup(v_memoization_state, FIND_OR_CREATE_OWL_CLASS_FROM_RESTRICTION, UNPROVIDED);
                if (NIL == caching_state) {
                    caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), FIND_OR_CREATE_OWL_CLASS_FROM_RESTRICTION, TWO_INTEGER, NIL, EQUAL, UNPROVIDED);
                    memoization_state.memoization_state_put(v_memoization_state, FIND_OR_CREATE_OWL_CLASS_FROM_RESTRICTION, caching_state);
                }
                {
                    SubLObject sxhash = memoization_state.sxhash_calc_2(restriction, import_parameters);
                    SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
                    if (collisions != $kw15$_MEMOIZED_ITEM_NOT_FOUND_) {
                        {
                            SubLObject cdolist_list_var = collisions;
                            SubLObject collision = NIL;
                            for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , collision = cdolist_list_var.first()) {
                                {
                                    SubLObject cached_args = collision.first();
                                    SubLObject results2 = second(collision);
                                    if (restriction.equal(cached_args.first())) {
                                        cached_args = cached_args.rest();
                                        if (((NIL != cached_args) && (NIL == cached_args.rest())) && import_parameters.equal(cached_args.first())) {
                                            return memoization_state.caching_results(results2);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    {
                        SubLObject results = arg2(thread.resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.owl.owl_to_cycl.find_or_create_owl_class_from_restriction_internal(restriction, import_parameters)));
                        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(restriction, import_parameters));
                        return memoization_state.caching_results(results);
                    }
                }
            }
        }
    }

    public static SubLObject find_or_create_owl_class_from_restriction(final SubLObject restriction, final SubLObject import_parameters, SubLObject genl) {
        if (genl == UNPROVIDED) {
            genl = owl_to_cycl.$$Thing;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_memoization_state = $memoization_state$.getDynamicValue(thread);
        SubLObject caching_state = NIL;
        if (NIL == v_memoization_state) {
            return owl_to_cycl.find_or_create_owl_class_from_restriction_internal(restriction, import_parameters, genl);
        }
        caching_state = memoization_state_lookup(v_memoization_state, owl_to_cycl.FIND_OR_CREATE_OWL_CLASS_FROM_RESTRICTION, UNPROVIDED);
        if (NIL == caching_state) {
            caching_state = create_caching_state(memoization_state_lock(v_memoization_state), owl_to_cycl.FIND_OR_CREATE_OWL_CLASS_FROM_RESTRICTION, THREE_INTEGER, NIL, EQUAL, UNPROVIDED);
            memoization_state_put(v_memoization_state, owl_to_cycl.FIND_OR_CREATE_OWL_CLASS_FROM_RESTRICTION, caching_state);
        }
        final SubLObject sxhash = sxhash_calc_3(restriction, import_parameters, genl);
        final SubLObject collisions = caching_state_lookup(caching_state, sxhash, UNPROVIDED);
        if (!collisions.eql($memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = NIL;
            collision = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = second(collision);
                if (restriction.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (import_parameters.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (((NIL != cached_args) && (NIL == cached_args.rest())) && genl.equal(cached_args.first())) {
                            return caching_results(results2);
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            } 
        }
        final SubLObject results3 = arg2(thread.resetMultipleValues(), multiple_value_list(owl_to_cycl.find_or_create_owl_class_from_restriction_internal(restriction, import_parameters, genl)));
        caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(restriction, import_parameters, genl));
        return caching_results(results3);
    }

    public static SubLObject owl_find_or_create_nat(final SubLObject term_formula, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject term_type = owl_to_cycl.find_or_create_term_type_for_ontology(owl_to_cycl.owl_import_parameters_ontology(import_parameters), UNPROVIDED);
        owl_to_cycl.owl_enqueue_assert(list(owl_to_cycl.$$quotedIsa, term_formula, term_type), owl_to_cycl.$$BookkeepingMt, import_parameters);
        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str521$__Asserting__S, owl_to_cycl.$str239$__ }), list(owl_to_cycl.$$quotedIsa, term_formula, term_type));
            force_output(UNPROVIDED);
        }
        owl_utilities.note_term_acted_on_during_import(term_formula, owl_to_cycl.owl_import_parameters_import_term(import_parameters), owl_to_cycl.owl_import_parameters_cyclist(import_parameters));
        return NIL != term_formula ? canonicalize_term(term_formula, UNPROVIDED) : NIL;
    }

    public static final SubLObject try_to_resolve_node_id_specification_alt(SubLObject specification) {
        SubLTrampolineFile.checkType(specification, NODE_ID_SPECIFICATION_P);
        {
            SubLObject resolved = com.cyc.cycjava.cycl.owl.owl_to_cycl.lookup_node_id_reference(second(specification));
            return NIL != resolved ? ((SubLObject) (resolved)) : specification;
        }
    }

    public static SubLObject try_to_resolve_node_id_specification(final SubLObject specification) {
        assert NIL != owl_to_cycl.node_id_specification_p(specification) : "! owl_to_cycl.node_id_specification_p(specification) " + ("owl_to_cycl.node_id_specification_p(specification) " + "CommonSymbols.NIL != owl_to_cycl.node_id_specification_p(specification) ") + specification;
        final SubLObject resolved = owl_to_cycl.lookup_node_id_reference(second(specification));
        return NIL != resolved ? resolved : specification;
    }

    public static final SubLObject owl_find_or_create_term_from_specification_alt(SubLObject specification, SubLObject type, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject v_term = NIL;
                {
                    SubLObject _prev_bind_0 = $owl_term_from_specification_depth$.currentBinding(thread);
                    try {
                        $owl_term_from_specification_depth$.bind(number_utilities.f_1X($owl_term_from_specification_depth$.getDynamicValue(thread)), thread);
                        if ($owl_term_from_specification_depth$.getDynamicValue(thread).numG(TEN_INTEGER)) {
                            Errors.warn($str_alt502$Nested_calls_resolving__S, specification);
                        }
                        if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.node_id_specification_p(specification)) {
                            v_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_from_node_id(specification, type, import_parameters);
                        } else {
                            if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_value_specification_union_p(specification)) {
                                v_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_union(specification, type, import_parameters, UNPROVIDED);
                            } else {
                                if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_value_specification_intersection_p(specification)) {
                                    v_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_intersection(specification, type, import_parameters, UNPROVIDED);
                                } else {
                                    if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_restriction_p(specification)) {
                                        v_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.find_or_create_owl_class_from_restriction(specification, import_parameters);
                                    } else {
                                        if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_term_enumeration_p(specification)) {
                                            {
                                                SubLObject terms = NIL;
                                                SubLObject cdolist_list_var = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_term_enumeration_terms(specification);
                                                SubLObject sub_spec = NIL;
                                                for (sub_spec = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , sub_spec = cdolist_list_var.first()) {
                                                    terms = cons(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_from_specification(sub_spec, $$Thing, import_parameters), terms);
                                                }
                                                v_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_enumeration(terms);
                                            }
                                        } else {
                                            if (NIL != pattern_match.tree_matches_pattern(specification, $list_alt503)) {
                                                {
                                                    SubLObject complement = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_from_specification(second(specification), type, import_parameters);
                                                    if (NIL != complement) {
                                                        v_term = list($$CollectionDifferenceFn, $$Thing, complement);
                                                    }
                                                }
                                            } else {
                                                if (specification.isString()) {
                                                    v_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_of_type(specification, type, import_parameters);
                                                } else {
                                                    if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.nonlocal_owl_term_reference_p(specification)) {
                                                        v_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_of_type(specification, type, import_parameters);
                                                    } else {
                                                        if ((NIL != cycl_grammar.cycl_denotational_term_p(specification)) && ((NIL == el_formula_p(specification)) || (NIL != cycl_utilities.expression_find_if($sym505$VALID_CONSTANT_, specification, UNPROVIDED, UNPROVIDED)))) {
                                                            v_term = specification;
                                                        } else {
                                                            if (NIL != cycl_utilities.expression_find_if(OWL_QUASI_TERM_P, specification, UNPROVIDED, UNPROVIDED)) {
                                                                v_term = specification;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } finally {
                        $owl_term_from_specification_depth$.rebind(_prev_bind_0, thread);
                    }
                }
                if (NIL == v_term) {
                    Errors.sublisp_break($str_alt506$Can_t_find_or_create__S_term_from, new SubLObject[]{ type, specification });
                }
                return v_term;
            }
        }
    }

    public static SubLObject owl_find_or_create_term_from_specification(final SubLObject specification, final SubLObject type, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject v_term = NIL;
        final SubLObject _prev_bind_0 = owl_to_cycl.$owl_term_from_specification_depth$.currentBinding(thread);
        try {
            owl_to_cycl.$owl_term_from_specification_depth$.bind(f_1X(owl_to_cycl.$owl_term_from_specification_depth$.getDynamicValue(thread)), thread);
            if (owl_to_cycl.$owl_term_from_specification_depth$.getDynamicValue(thread).numG(TEN_INTEGER)) {
                Errors.warn(owl_to_cycl.$str523$Nested_calls_resolving__S, specification);
            }
            if (NIL != owl_to_cycl.node_id_specification_p(specification)) {
                v_term = owl_to_cycl.owl_find_or_create_term_from_node_id(specification, type, import_parameters);
            } else
                if (NIL != owl_to_cycl.owl_external_value_specification_union_p(specification)) {
                    v_term = owl_to_cycl.owl_find_or_create_union(specification, type, import_parameters, UNPROVIDED);
                } else
                    if (NIL != owl_to_cycl.owl_external_value_specification_intersection_p(specification)) {
                        v_term = owl_to_cycl.owl_find_or_create_intersection(specification, type, import_parameters, UNPROVIDED);
                    } else
                        if (NIL != owl_to_cycl.owl_restriction_p(specification)) {
                            v_term = owl_to_cycl.find_or_create_owl_class_from_restriction(specification, import_parameters, UNPROVIDED);
                        } else
                            if (NIL != owl_to_cycl.owl_external_term_enumeration_p(specification)) {
                                SubLObject terms = NIL;
                                SubLObject cdolist_list_var = owl_to_cycl.owl_external_term_enumeration_terms(specification);
                                SubLObject sub_spec = NIL;
                                sub_spec = cdolist_list_var.first();
                                while (NIL != cdolist_list_var) {
                                    terms = cons(owl_to_cycl.owl_find_or_create_term_from_specification(sub_spec, owl_to_cycl.$$Thing, import_parameters), terms);
                                    cdolist_list_var = cdolist_list_var.rest();
                                    sub_spec = cdolist_list_var.first();
                                } 
                                v_term = owl_to_cycl.owl_term_enumeration(terms, import_parameters);
                            } else
                                if (NIL != tree_matches_pattern(specification, owl_to_cycl.$list524)) {
                                    final SubLObject complement = owl_to_cycl.owl_find_or_create_term_from_specification(second(specification), type, import_parameters);
                                    if (NIL != complement) {
                                        v_term = list(owl_to_cycl.$$CollectionDifferenceFn, owl_to_cycl.$$Thing, complement);
                                    }
                                } else
                                    if (specification.isString()) {
                                        v_term = owl_to_cycl.owl_find_or_create_term_of_type(specification, type, import_parameters);
                                    } else
                                        if (NIL != owl_to_cycl.nonlocal_owl_term_reference_p(specification)) {
                                            v_term = owl_to_cycl.owl_find_or_create_term_of_type(specification, type, import_parameters);
                                        } else
                                            if ((NIL != cycl_denotational_term_p(specification)) && ((NIL == el_formula_p(specification)) || (NIL != expression_find_if(owl_to_cycl.$sym526$VALID_CONSTANT_, specification, UNPROVIDED, UNPROVIDED)))) {
                                                v_term = specification;
                                            } else
                                                if (NIL != expression_find_if(owl_to_cycl.OWL_QUASI_TERM_P, specification, UNPROVIDED, UNPROVIDED)) {
                                                    v_term = specification;
                                                }









        } finally {
            owl_to_cycl.$owl_term_from_specification_depth$.rebind(_prev_bind_0, thread);
        }
        if (NIL == v_term) {
            Errors.sublisp_break(owl_to_cycl.$str527$Can_t_find_or_create__S_term_from, new SubLObject[]{ type, specification });
        }
        return v_term;
    }

    public static final SubLObject owl_find_or_create_union_alt(SubLObject specification, SubLObject type, SubLObject import_parameters, SubLObject resolve_node_idsP) {
        if (resolve_node_idsP == UNPROVIDED) {
            resolve_node_idsP = NIL;
        }
        {
            SubLObject names = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_value_specification_union_names(specification);
            SubLObject v_term = NIL;
            if ((NIL == resolve_node_idsP) && (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.node_id_specification_p(names))) {
                v_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_quasi_term_from_specification(specification, type, NIL, import_parameters);
            } else {
                if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.node_id_specification_p(names)) {
                    v_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_union(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_classes_from_node_id(names, type, import_parameters));
                } else {
                    {
                        SubLObject terms = NIL;
                        SubLObject cdolist_list_var = names;
                        SubLObject sub_spec = NIL;
                        for (sub_spec = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , sub_spec = cdolist_list_var.first()) {
                            terms = cons(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_from_specification(sub_spec, type, import_parameters), terms);
                        }
                        v_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_union(terms);
                    }
                }
            }
            return v_term;
        }
    }

    public static SubLObject owl_find_or_create_union(final SubLObject specification, final SubLObject type, final SubLObject import_parameters, SubLObject resolve_node_idsP) {
        if (resolve_node_idsP == UNPROVIDED) {
            resolve_node_idsP = NIL;
        }
        final SubLObject names = owl_to_cycl.owl_external_value_specification_union_names(specification);
        SubLObject v_term = NIL;
        if ((NIL == resolve_node_idsP) && (NIL != owl_to_cycl.node_id_specification_p(names))) {
            v_term = owl_to_cycl.owl_quasi_term_from_specification(specification, type, NIL, import_parameters);
        } else
            if (NIL != owl_to_cycl.node_id_specification_p(names)) {
                v_term = owl_to_cycl.owl_term_union(owl_to_cycl.owl_find_or_create_classes_from_node_id(names, type, import_parameters), import_parameters);
            } else {
                SubLObject terms = NIL;
                SubLObject cdolist_list_var = names;
                SubLObject sub_spec = NIL;
                sub_spec = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    terms = cons(owl_to_cycl.owl_find_or_create_term_from_specification(sub_spec, type, import_parameters), terms);
                    cdolist_list_var = cdolist_list_var.rest();
                    sub_spec = cdolist_list_var.first();
                } 
                v_term = owl_to_cycl.owl_term_union(terms, import_parameters);
            }

        return v_term;
    }

    public static final SubLObject owl_find_or_create_intersection_alt(SubLObject specification, SubLObject type, SubLObject import_parameters, SubLObject resolve_node_idsP) {
        if (resolve_node_idsP == UNPROVIDED) {
            resolve_node_idsP = NIL;
        }
        {
            SubLObject names = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_value_specification_intersection_names(specification);
            SubLObject v_term = NIL;
            if ((NIL == resolve_node_idsP) && (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.node_id_specification_p(names))) {
                v_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_quasi_term_from_specification(specification, type, NIL, import_parameters);
            } else {
                if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.node_id_specification_p(names)) {
                    v_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_intersection(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_classes_from_node_id(names, type, import_parameters));
                } else {
                    {
                        SubLObject terms = NIL;
                        SubLObject cdolist_list_var = names;
                        SubLObject sub_spec = NIL;
                        for (sub_spec = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , sub_spec = cdolist_list_var.first()) {
                            terms = cons(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_from_specification(sub_spec, type, import_parameters), terms);
                        }
                        v_term = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_intersection(terms);
                    }
                }
            }
            return v_term;
        }
    }

    public static SubLObject owl_find_or_create_intersection(final SubLObject specification, final SubLObject type, final SubLObject import_parameters, SubLObject resolve_node_idsP) {
        if (resolve_node_idsP == UNPROVIDED) {
            resolve_node_idsP = NIL;
        }
        final SubLObject names = owl_to_cycl.owl_external_value_specification_intersection_names(specification);
        SubLObject v_term = NIL;
        if ((NIL == resolve_node_idsP) && (NIL != owl_to_cycl.node_id_specification_p(names))) {
            v_term = owl_to_cycl.owl_quasi_term_from_specification(specification, type, NIL, import_parameters);
        } else
            if (NIL != owl_to_cycl.node_id_specification_p(names)) {
                v_term = owl_to_cycl.owl_term_intersection(owl_to_cycl.owl_find_or_create_classes_from_node_id(names, type, import_parameters), import_parameters);
            } else {
                SubLObject terms = NIL;
                SubLObject cdolist_list_var = remove_if(owl_to_cycl.OWL_RESTRICTION_P, names, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                SubLObject sub_spec = NIL;
                sub_spec = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    terms = cons(owl_to_cycl.owl_find_or_create_term_from_specification(sub_spec, type, import_parameters), terms);
                    cdolist_list_var = cdolist_list_var.rest();
                    sub_spec = cdolist_list_var.first();
                } 
                final SubLObject genl = (NIL != non_empty_list_p(terms)) ? terms.first() : owl_to_cycl.$$Thing;
                SubLObject cdolist_list_var2 = remove_if_not(owl_to_cycl.OWL_RESTRICTION_P, names, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                SubLObject sub_spec2 = NIL;
                sub_spec2 = cdolist_list_var2.first();
                while (NIL != cdolist_list_var2) {
                    terms = cons(owl_to_cycl.find_or_create_owl_class_from_restriction(sub_spec2, import_parameters, genl), terms);
                    cdolist_list_var2 = cdolist_list_var2.rest();
                    sub_spec2 = cdolist_list_var2.first();
                } 
                v_term = owl_to_cycl.owl_term_intersection(terms, import_parameters);
            }

        return v_term;
    }

    public static final SubLObject owl_find_or_create_classes_from_node_id_alt(SubLObject node_id_specification, SubLObject type, SubLObject import_parameters) {
        SubLTrampolineFile.checkType(node_id_specification, NODE_ID_SPECIFICATION_P);
        {
            SubLObject reference = com.cyc.cycjava.cycl.owl.owl_to_cycl.lookup_node_id_reference(second(node_id_specification));
            SubLObject v_classes = NIL;
            if (NIL == reference) {
            } else {
                if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.possible_read_owl_list_p(reference)) {
                    {
                        SubLObject items = reference;
                        SubLObject cdolist_list_var = items;
                        SubLObject item = NIL;
                        for (item = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , item = cdolist_list_var.first()) {
                            {
                                SubLObject external_name = (item.isString()) ? ((SubLObject) (com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_term_reference(item, import_parameters))) : com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_class_or_restriction(item, import_parameters);
                                v_classes = cons(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_from_specification(external_name, type, import_parameters), v_classes);
                            }
                        }
                        v_classes = nreverse(v_classes);
                    }
                } else {
                    if (NIL != list_utilities.list_of_type_p(OWL_EXTERNAL_VALUE_SPECIFICATION_P, reference)) {
                        {
                            SubLObject cdolist_list_var = reference;
                            SubLObject item = NIL;
                            for (item = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , item = cdolist_list_var.first()) {
                                v_classes = cons(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_from_specification(item, type, import_parameters), v_classes);
                            }
                        }
                        v_classes = nreverse(v_classes);
                    }
                }
            }
            if (NIL != v_classes) {
                com.cyc.cycjava.cycl.owl.owl_to_cycl.note_node_id_reference(second(node_id_specification), v_classes);
            }
            return v_classes;
        }
    }

    public static SubLObject owl_find_or_create_classes_from_node_id(final SubLObject node_id_specification, final SubLObject type, final SubLObject import_parameters) {
        assert NIL != owl_to_cycl.node_id_specification_p(node_id_specification) : "! owl_to_cycl.node_id_specification_p(node_id_specification) " + ("owl_to_cycl.node_id_specification_p(node_id_specification) " + "CommonSymbols.NIL != owl_to_cycl.node_id_specification_p(node_id_specification) ") + node_id_specification;
        final SubLObject reference = owl_to_cycl.lookup_node_id_reference(second(node_id_specification));
        SubLObject v_classes = NIL;
        if (NIL != reference) {
            if (NIL != owl_to_cycl.possible_read_owl_list_p(reference)) {
                SubLObject cdolist_list_var;
                final SubLObject items = cdolist_list_var = reference;
                SubLObject item = NIL;
                item = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    final SubLObject external_name = (item.isString()) ? owl_to_cycl.read_owl_term_reference(item, import_parameters) : owl_to_cycl.read_owl_class_or_restriction(item, import_parameters);
                    v_classes = cons(owl_to_cycl.owl_find_or_create_term_from_specification(external_name, type, import_parameters), v_classes);
                    cdolist_list_var = cdolist_list_var.rest();
                    item = cdolist_list_var.first();
                } 
                v_classes = nreverse(v_classes);
            } else
                if (NIL != list_of_type_p(owl_to_cycl.OWL_EXTERNAL_VALUE_SPECIFICATION_P, reference)) {
                    SubLObject cdolist_list_var2 = reference;
                    SubLObject item2 = NIL;
                    item2 = cdolist_list_var2.first();
                    while (NIL != cdolist_list_var2) {
                        v_classes = cons(owl_to_cycl.owl_find_or_create_term_from_specification(item2, type, import_parameters), v_classes);
                        cdolist_list_var2 = cdolist_list_var2.rest();
                        item2 = cdolist_list_var2.first();
                    } 
                    v_classes = nreverse(v_classes);
                }

        }
        if (NIL != v_classes) {
            owl_to_cycl.note_node_id_reference(second(node_id_specification), v_classes);
        }
        return v_classes;
    }

    public static final SubLObject owl_find_or_create_term_from_node_id_alt(SubLObject node_id_specification, SubLObject type, SubLObject import_parameters) {
        SubLTrampolineFile.checkType(node_id_specification, NODE_ID_SPECIFICATION_P);
        {
            SubLObject reference = com.cyc.cycjava.cycl.owl.owl_to_cycl.lookup_node_id_reference(second(node_id_specification));
            SubLObject v_term = node_id_specification;
            if (NIL != cycl_utilities.expression_find_if(OWL_QUASI_TERM_P, reference, UNPROVIDED, UNPROVIDED)) {
                format(T, $str_alt507$__Trying_to_resolve__S__, reference);
                {
                    SubLObject maybe_resolved = cycl_utilities.expression_transform(copy_expression(reference), OWL_QUASI_TERM_P, RESOLVE_OWL_QUASI_TERM, UNPROVIDED, UNPROVIDED);
                    if (NIL == cycl_utilities.expression_find($UNRESOLVED, maybe_resolved, UNPROVIDED, UNPROVIDED, UNPROVIDED)) {
                        reference = maybe_resolved;
                    }
                }
                format(T, $str_alt508$__Result___S__, reference);
            }
            if (NIL == reference) {
            } else {
                if (((NIL != cycl_grammar.cycl_denotational_term_p(reference)) && (NIL != cycl_utilities.expression_find_if(CONSTANT_P, reference, UNPROVIDED, UNPROVIDED))) && (NIL == cycl_utilities.expression_find_if(KEYWORDP, reference, UNPROVIDED, UNPROVIDED))) {
                    v_term = reference;
                } else {
                    if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_value_specification_p(reference)) {
                        {
                            SubLObject resolved = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_from_specification(reference, type, import_parameters);
                            if (NIL != resolved) {
                                format(T, $str_alt433$__Resolved__S___to__S__, node_id_specification, resolved);
                                v_term = resolved;
                                com.cyc.cycjava.cycl.owl.owl_to_cycl.note_node_id_reference(second(node_id_specification), v_term);
                            }
                        }
                    } else {
                        Errors.warn($str_alt509$Trying_to_create_term_from__S, reference);
                    }
                }
            }
            return v_term;
        }
    }

    public static SubLObject owl_find_or_create_term_from_node_id(final SubLObject node_id_specification, final SubLObject type, final SubLObject import_parameters) {
        assert NIL != owl_to_cycl.node_id_specification_p(node_id_specification) : "! owl_to_cycl.node_id_specification_p(node_id_specification) " + ("owl_to_cycl.node_id_specification_p(node_id_specification) " + "CommonSymbols.NIL != owl_to_cycl.node_id_specification_p(node_id_specification) ") + node_id_specification;
        SubLObject reference = owl_to_cycl.lookup_node_id_reference(second(node_id_specification));
        SubLObject v_term = node_id_specification;
        if (NIL != expression_find_if(owl_to_cycl.OWL_QUASI_TERM_P, reference, UNPROVIDED, UNPROVIDED)) {
            format(T, owl_to_cycl.$str529$__Trying_to_resolve__S__, reference);
            final SubLObject maybe_resolved = expression_transform(copy_expression(reference), owl_to_cycl.OWL_QUASI_TERM_P, owl_to_cycl.RESOLVE_OWL_QUASI_TERM, UNPROVIDED, UNPROVIDED);
            if (NIL == expression_find($UNRESOLVED, maybe_resolved, UNPROVIDED, UNPROVIDED, UNPROVIDED)) {
                reference = maybe_resolved;
            }
            format(T, owl_to_cycl.$str530$__Result___S__, reference);
        }
        if (NIL != reference) {
            if (((NIL != cycl_denotational_term_p(reference)) && (NIL != expression_find_if(CONSTANT_P, reference, UNPROVIDED, UNPROVIDED))) && (NIL == expression_find_if(KEYWORDP, reference, UNPROVIDED, UNPROVIDED))) {
                v_term = reference;
            } else
                if (NIL != owl_to_cycl.owl_external_value_specification_p(reference)) {
                    final SubLObject resolved = owl_to_cycl.owl_find_or_create_term_from_specification(reference, type, import_parameters);
                    if (NIL != resolved) {
                        format(T, owl_to_cycl.$str449$__Resolved__S___to__S__, node_id_specification, resolved);
                        v_term = resolved;
                        owl_to_cycl.note_node_id_reference(second(node_id_specification), v_term);
                    }
                } else {
                    Errors.warn(owl_to_cycl.$str531$Trying_to_create_term_from__S, reference);
                }

        }
        return v_term;
    }

    public static final SubLObject owl_term_info_print_function_trampoline_alt(SubLObject v_object, SubLObject stream) {
        com.cyc.cycjava.cycl.owl.owl_to_cycl.print_owl_term_info(v_object, stream, ZERO_INTEGER);
        return NIL;
    }

    public static SubLObject owl_term_info_print_function_trampoline(final SubLObject v_object, final SubLObject stream) {
        owl_to_cycl.print_owl_term_info(v_object, stream, ZERO_INTEGER);
        return NIL;
    }

    public static final SubLObject owl_term_info_p_alt(SubLObject v_object) {
        return v_object.getClass() == com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_term_info_native.class ? ((SubLObject) (T)) : NIL;
    }

    public static SubLObject owl_term_info_p(final SubLObject v_object) {
        return v_object.getClass() == com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_term_info_native.class ? T : NIL;
    }

    public static final SubLObject oti_cyc_name_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, OWL_TERM_INFO_P);
        return v_object.getField2();
    }

    public static SubLObject oti_cyc_name(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_term_info_p(v_object) : "! owl_to_cycl.owl_term_info_p(v_object) " + "owl_to_cycl.owl_term_info_p error :" + v_object;
        return v_object.getField2();
    }

    public static final SubLObject oti_comment_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, OWL_TERM_INFO_P);
        return v_object.getField3();
    }

    public static SubLObject oti_comment(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_term_info_p(v_object) : "! owl_to_cycl.owl_term_info_p(v_object) " + "owl_to_cycl.owl_term_info_p error :" + v_object;
        return v_object.getField3();
    }

    public static final SubLObject oti_superclasses_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, OWL_TERM_INFO_P);
        return v_object.getField4();
    }

    public static SubLObject oti_superclasses(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_term_info_p(v_object) : "! owl_to_cycl.owl_term_info_p(v_object) " + "owl_to_cycl.owl_term_info_p error :" + v_object;
        return v_object.getField4();
    }

    public static final SubLObject oti_disjoint_classes_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, OWL_TERM_INFO_P);
        return v_object.getField5();
    }

    public static SubLObject oti_disjoint_classes(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_term_info_p(v_object) : "! owl_to_cycl.owl_term_info_p(v_object) " + "owl_to_cycl.owl_term_info_p error :" + v_object;
        return v_object.getField5();
    }

    public static final SubLObject oti_plist_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, OWL_TERM_INFO_P);
        return v_object.getField6();
    }

    public static SubLObject oti_plist(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_term_info_p(v_object) : "! owl_to_cycl.owl_term_info_p(v_object) " + "owl_to_cycl.owl_term_info_p error :" + v_object;
        return v_object.getField6();
    }

    public static final SubLObject _csetf_oti_cyc_name_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, OWL_TERM_INFO_P);
        return v_object.setField2(value);
    }

    public static SubLObject _csetf_oti_cyc_name(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_term_info_p(v_object) : "! owl_to_cycl.owl_term_info_p(v_object) " + "owl_to_cycl.owl_term_info_p error :" + v_object;
        return v_object.setField2(value);
    }

    public static final SubLObject _csetf_oti_comment_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, OWL_TERM_INFO_P);
        return v_object.setField3(value);
    }

    public static SubLObject _csetf_oti_comment(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_term_info_p(v_object) : "! owl_to_cycl.owl_term_info_p(v_object) " + "owl_to_cycl.owl_term_info_p error :" + v_object;
        return v_object.setField3(value);
    }

    public static final SubLObject _csetf_oti_superclasses_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, OWL_TERM_INFO_P);
        return v_object.setField4(value);
    }

    public static SubLObject _csetf_oti_superclasses(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_term_info_p(v_object) : "! owl_to_cycl.owl_term_info_p(v_object) " + "owl_to_cycl.owl_term_info_p error :" + v_object;
        return v_object.setField4(value);
    }

    public static final SubLObject _csetf_oti_disjoint_classes_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, OWL_TERM_INFO_P);
        return v_object.setField5(value);
    }

    public static SubLObject _csetf_oti_disjoint_classes(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_term_info_p(v_object) : "! owl_to_cycl.owl_term_info_p(v_object) " + "owl_to_cycl.owl_term_info_p error :" + v_object;
        return v_object.setField5(value);
    }

    public static final SubLObject _csetf_oti_plist_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, OWL_TERM_INFO_P);
        return v_object.setField6(value);
    }

    public static SubLObject _csetf_oti_plist(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_term_info_p(v_object) : "! owl_to_cycl.owl_term_info_p(v_object) " + "owl_to_cycl.owl_term_info_p error :" + v_object;
        return v_object.setField6(value);
    }

    public static final SubLObject make_owl_term_info_alt(SubLObject arglist) {
        if (arglist == UNPROVIDED) {
            arglist = NIL;
        }
        {
            SubLObject v_new = new com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_term_info_native();
            SubLObject next = NIL;
            for (next = arglist; NIL != next; next = cddr(next)) {
                {
                    SubLObject current_arg = next.first();
                    SubLObject current_value = cadr(next);
                    SubLObject pcase_var = current_arg;
                    if (pcase_var.eql($CYC_NAME)) {
                        com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oti_cyc_name(v_new, current_value);
                    } else {
                        if (pcase_var.eql($COMMENT)) {
                            com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oti_comment(v_new, current_value);
                        } else {
                            if (pcase_var.eql($SUPERCLASSES)) {
                                com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oti_superclasses(v_new, current_value);
                            } else {
                                if (pcase_var.eql($DISJOINT_CLASSES)) {
                                    com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oti_disjoint_classes(v_new, current_value);
                                } else {
                                    if (pcase_var.eql($PLIST)) {
                                        com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oti_plist(v_new, current_value);
                                    } else {
                                        Errors.error($str_alt137$Invalid_slot__S_for_construction_, current_arg);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return v_new;
        }
    }

    public static SubLObject make_owl_term_info(SubLObject arglist) {
        if (arglist == UNPROVIDED) {
            arglist = NIL;
        }
        final SubLObject v_new = new com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_term_info_native();
        SubLObject next;
        SubLObject current_arg;
        SubLObject current_value;
        SubLObject pcase_var;
        for (next = NIL, next = arglist; NIL != next; next = cddr(next)) {
            current_arg = next.first();
            current_value = cadr(next);
            pcase_var = current_arg;
            if (pcase_var.eql($CYC_NAME)) {
                owl_to_cycl._csetf_oti_cyc_name(v_new, current_value);
            } else
                if (pcase_var.eql($COMMENT)) {
                    owl_to_cycl._csetf_oti_comment(v_new, current_value);
                } else
                    if (pcase_var.eql($SUPERCLASSES)) {
                        owl_to_cycl._csetf_oti_superclasses(v_new, current_value);
                    } else
                        if (pcase_var.eql($DISJOINT_CLASSES)) {
                            owl_to_cycl._csetf_oti_disjoint_classes(v_new, current_value);
                        } else
                            if (pcase_var.eql($PLIST)) {
                                owl_to_cycl._csetf_oti_plist(v_new, current_value);
                            } else {
                                Errors.error(owl_to_cycl.$str147$Invalid_slot__S_for_construction_, current_arg);
                            }




        }
        return v_new;
    }

    public static SubLObject visit_defstruct_owl_term_info(final SubLObject obj, final SubLObject visitor_fn) {
        funcall(visitor_fn, obj, $BEGIN, owl_to_cycl.MAKE_OWL_TERM_INFO, FIVE_INTEGER);
        funcall(visitor_fn, obj, $SLOT, $CYC_NAME, owl_to_cycl.oti_cyc_name(obj));
        funcall(visitor_fn, obj, $SLOT, $COMMENT, owl_to_cycl.oti_comment(obj));
        funcall(visitor_fn, obj, $SLOT, $SUPERCLASSES, owl_to_cycl.oti_superclasses(obj));
        funcall(visitor_fn, obj, $SLOT, $DISJOINT_CLASSES, owl_to_cycl.oti_disjoint_classes(obj));
        funcall(visitor_fn, obj, $SLOT, $PLIST, owl_to_cycl.oti_plist(obj));
        funcall(visitor_fn, obj, $END, owl_to_cycl.MAKE_OWL_TERM_INFO, FIVE_INTEGER);
        return obj;
    }

    public static SubLObject visit_defstruct_object_owl_term_info_method(final SubLObject obj, final SubLObject visitor_fn) {
        return owl_to_cycl.visit_defstruct_owl_term_info(obj, visitor_fn);
    }

    public static final SubLObject print_owl_term_info_alt(SubLObject v_object, SubLObject stream, SubLObject depth) {
        format(stream, $str_alt529$_OWL_TERM_INFO__A_, com.cyc.cycjava.cycl.owl.owl_to_cycl.oti_cyc_name(v_object));
        return v_object;
    }

    public static SubLObject print_owl_term_info(final SubLObject v_object, final SubLObject stream, final SubLObject depth) {
        format(stream, owl_to_cycl.$str554$_OWL_TERM_INFO__A_, owl_to_cycl.oti_cyc_name(v_object));
        return v_object;
    }

    public static final SubLObject find_or_create_owl_term_info_alt(SubLObject cyc_name) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject term_info = NIL;
                if ((NIL != cyc_name) && (NIL != misc_utilities.initialized_p($owl_definition_accumulator$.getDynamicValue(thread)))) {
                    if (NIL == term_info) {
                        {
                            SubLObject csome_list_var = $list_alt530;
                            SubLObject type = NIL;
                            for (type = csome_list_var.first(); !((NIL != term_info) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , type = csome_list_var.first()) {
                                term_info = com.cyc.cycjava.cycl.owl.owl_to_cycl.find_accumulated_owl_definition(cyc_name, type);
                            }
                        }
                    }
                }
                return NIL != term_info ? ((SubLObject) (term_info)) : com.cyc.cycjava.cycl.owl.owl_to_cycl.new_owl_term_info(cyc_name, UNPROVIDED);
            }
        }
    }

    public static SubLObject find_or_create_owl_term_info(final SubLObject cyc_name) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject term_info = NIL;
        if (((NIL != cyc_name) && (NIL != initialized_p(owl_to_cycl.$owl_definition_accumulator$.getDynamicValue(thread)))) && (NIL == term_info)) {
            SubLObject csome_list_var;
            SubLObject type;
            for (csome_list_var = owl_to_cycl.$list555, type = NIL, type = csome_list_var.first(); (NIL == term_info) && (NIL != csome_list_var); term_info = owl_to_cycl.find_accumulated_owl_definition(cyc_name, type) , csome_list_var = csome_list_var.rest() , type = csome_list_var.first()) {
            }
        }
        return NIL != term_info ? term_info : owl_to_cycl.new_owl_term_info(cyc_name, UNPROVIDED);
    }

    public static final SubLObject new_owl_term_info_alt(SubLObject cyc_name, SubLObject comment) {
        if (cyc_name == UNPROVIDED) {
            cyc_name = NIL;
        }
        if (comment == UNPROVIDED) {
            comment = NIL;
        }
        {
            SubLObject term_info = com.cyc.cycjava.cycl.owl.owl_to_cycl.make_owl_term_info(UNPROVIDED);
            if (NIL != cyc_name) {
                com.cyc.cycjava.cycl.owl.owl_to_cycl.set_owl_term_info_cyc_name(term_info, cyc_name);
            }
            com.cyc.cycjava.cycl.owl.owl_to_cycl.set_owl_term_info_comment(term_info, comment);
            com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oti_plist(term_info, NIL);
            return term_info;
        }
    }

    public static SubLObject new_owl_term_info(SubLObject cyc_name, SubLObject comment) {
        if (cyc_name == UNPROVIDED) {
            cyc_name = NIL;
        }
        if (comment == UNPROVIDED) {
            comment = NIL;
        }
        final SubLObject term_info = owl_to_cycl.make_owl_term_info(UNPROVIDED);
        if (NIL != cyc_name) {
            owl_to_cycl.set_owl_term_info_cyc_name(term_info, cyc_name);
        }
        owl_to_cycl.set_owl_term_info_comment(term_info, comment);
        owl_to_cycl._csetf_oti_plist(term_info, NIL);
        return term_info;
    }

    public static final SubLObject owl_term_info_cyc_name_alt(SubLObject term_info) {
        SubLTrampolineFile.checkType(term_info, OWL_TERM_INFO_P);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.oti_cyc_name(term_info);
    }

    public static SubLObject owl_term_info_cyc_name(final SubLObject term_info) {
        assert NIL != owl_to_cycl.owl_term_info_p(term_info) : "! owl_to_cycl.owl_term_info_p(term_info) " + ("owl_to_cycl.owl_term_info_p(term_info) " + "CommonSymbols.NIL != owl_to_cycl.owl_term_info_p(term_info) ") + term_info;
        return owl_to_cycl.oti_cyc_name(term_info);
    }

    public static final SubLObject owl_term_info_comment_alt(SubLObject term_info) {
        SubLTrampolineFile.checkType(term_info, OWL_TERM_INFO_P);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.oti_comment(term_info);
    }

    public static SubLObject owl_term_info_comment(final SubLObject term_info) {
        assert NIL != owl_to_cycl.owl_term_info_p(term_info) : "! owl_to_cycl.owl_term_info_p(term_info) " + ("owl_to_cycl.owl_term_info_p(term_info) " + "CommonSymbols.NIL != owl_to_cycl.owl_term_info_p(term_info) ") + term_info;
        return owl_to_cycl.oti_comment(term_info);
    }

    public static final SubLObject owl_term_info_superclasses_alt(SubLObject term_info) {
        SubLTrampolineFile.checkType(term_info, OWL_TERM_INFO_P);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.oti_superclasses(term_info);
    }

    public static SubLObject owl_term_info_superclasses(final SubLObject term_info) {
        assert NIL != owl_to_cycl.owl_term_info_p(term_info) : "! owl_to_cycl.owl_term_info_p(term_info) " + ("owl_to_cycl.owl_term_info_p(term_info) " + "CommonSymbols.NIL != owl_to_cycl.owl_term_info_p(term_info) ") + term_info;
        return owl_to_cycl.oti_superclasses(term_info);
    }

    public static final SubLObject owl_term_info_disjoint_classes_alt(SubLObject term_info) {
        SubLTrampolineFile.checkType(term_info, OWL_TERM_INFO_P);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.oti_disjoint_classes(term_info);
    }

    public static SubLObject owl_term_info_disjoint_classes(final SubLObject term_info) {
        assert NIL != owl_to_cycl.owl_term_info_p(term_info) : "! owl_to_cycl.owl_term_info_p(term_info) " + ("owl_to_cycl.owl_term_info_p(term_info) " + "CommonSymbols.NIL != owl_to_cycl.owl_term_info_p(term_info) ") + term_info;
        return owl_to_cycl.oti_disjoint_classes(term_info);
    }

    public static final SubLObject owl_term_info_plist_alt(SubLObject term_info) {
        SubLTrampolineFile.checkType(term_info, OWL_TERM_INFO_P);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.oti_plist(term_info);
    }

    public static SubLObject owl_term_info_plist(final SubLObject term_info) {
        assert NIL != owl_to_cycl.owl_term_info_p(term_info) : "! owl_to_cycl.owl_term_info_p(term_info) " + ("owl_to_cycl.owl_term_info_p(term_info) " + "CommonSymbols.NIL != owl_to_cycl.owl_term_info_p(term_info) ") + term_info;
        return owl_to_cycl.oti_plist(term_info);
    }

    public static final SubLObject owl_term_info_plist_lookup_alt(SubLObject term_info, SubLObject key, SubLObject default_value) {
        if (default_value == UNPROVIDED) {
            default_value = NIL;
        }
        return getf(com.cyc.cycjava.cycl.owl.owl_to_cycl.oti_plist(term_info), key, default_value);
    }

    public static SubLObject owl_term_info_plist_lookup(final SubLObject term_info, final SubLObject key, SubLObject default_value) {
        if (default_value == UNPROVIDED) {
            default_value = NIL;
        }
        return getf(owl_to_cycl.oti_plist(term_info), key, default_value);
    }

    public static final SubLObject owl_term_info_external_name_alt(SubLObject term_info, SubLObject default_value) {
        if (default_value == UNPROVIDED) {
            default_value = NIL;
        }
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_lookup(term_info, $EXTERNAL_NAME, default_value);
    }

    public static SubLObject owl_term_info_external_name(final SubLObject term_info, SubLObject default_value) {
        if (default_value == UNPROVIDED) {
            default_value = NIL;
        }
        return owl_to_cycl.owl_term_info_plist_lookup(term_info, $EXTERNAL_NAME, default_value);
    }

    public static final SubLObject set_owl_term_info_cyc_name_alt(SubLObject term_info, SubLObject name) {
        SubLTrampolineFile.checkType(term_info, OWL_TERM_INFO_P);
        SubLTrampolineFile.checkType(name, STRINGP);
        com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oti_cyc_name(term_info, name);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.oti_cyc_name(term_info);
    }

    public static SubLObject set_owl_term_info_cyc_name(final SubLObject term_info, final SubLObject name) {
        assert NIL != owl_to_cycl.owl_term_info_p(term_info) : "! owl_to_cycl.owl_term_info_p(term_info) " + ("owl_to_cycl.owl_term_info_p(term_info) " + "CommonSymbols.NIL != owl_to_cycl.owl_term_info_p(term_info) ") + term_info;
        assert NIL != stringp(name) : "! stringp(name) " + ("Types.stringp(name) " + "CommonSymbols.NIL != Types.stringp(name) ") + name;
        owl_to_cycl._csetf_oti_cyc_name(term_info, name);
        return owl_to_cycl.oti_cyc_name(term_info);
    }

    public static final SubLObject set_owl_term_info_comment_alt(SubLObject term_info, SubLObject comment) {
        SubLTrampolineFile.checkType(term_info, OWL_TERM_INFO_P);
        if (NIL != comment) {
            SubLTrampolineFile.checkType(comment, STRINGP);
        }
        com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oti_comment(term_info, comment);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.oti_comment(term_info);
    }

    public static SubLObject set_owl_term_info_comment(final SubLObject term_info, final SubLObject comment) {
        assert NIL != owl_to_cycl.owl_term_info_p(term_info) : "! owl_to_cycl.owl_term_info_p(term_info) " + ("owl_to_cycl.owl_term_info_p(term_info) " + "CommonSymbols.NIL != owl_to_cycl.owl_term_info_p(term_info) ") + term_info;
        if (((NIL != comment) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == stringp(comment))) {
            throw new AssertionError(comment);
        }
        owl_to_cycl._csetf_oti_comment(term_info, comment);
        return owl_to_cycl.oti_comment(term_info);
    }

    public static final SubLObject add_owl_term_info_superclass_alt(SubLObject term_info, SubLObject superclass) {
        SubLTrampolineFile.checkType(term_info, OWL_TERM_INFO_P);
        SubLTrampolineFile.checkType(superclass, OWL_EXTERNAL_VALUE_SPECIFICATION_P);
        {
            SubLObject item_var = superclass;
            if (NIL == member(item_var, com.cyc.cycjava.cycl.owl.owl_to_cycl.oti_superclasses(term_info), symbol_function(EQUAL), symbol_function(IDENTITY))) {
                com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oti_superclasses(term_info, cons(item_var, com.cyc.cycjava.cycl.owl.owl_to_cycl.oti_superclasses(term_info)));
            }
        }
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.oti_superclasses(term_info);
    }

    public static SubLObject add_owl_term_info_superclass(final SubLObject term_info, final SubLObject superclass) {
        assert NIL != owl_to_cycl.owl_term_info_p(term_info) : "! owl_to_cycl.owl_term_info_p(term_info) " + ("owl_to_cycl.owl_term_info_p(term_info) " + "CommonSymbols.NIL != owl_to_cycl.owl_term_info_p(term_info) ") + term_info;
        assert NIL != owl_to_cycl.owl_external_value_specification_p(superclass) : "! owl_to_cycl.owl_external_value_specification_p(superclass) " + ("owl_to_cycl.owl_external_value_specification_p(superclass) " + "CommonSymbols.NIL != owl_to_cycl.owl_external_value_specification_p(superclass) ") + superclass;
        if (NIL == member(superclass, owl_to_cycl.oti_superclasses(term_info), symbol_function(EQUAL), symbol_function(IDENTITY))) {
            owl_to_cycl._csetf_oti_superclasses(term_info, cons(superclass, owl_to_cycl.oti_superclasses(term_info)));
        }
        return owl_to_cycl.oti_superclasses(term_info);
    }

    public static final SubLObject add_owl_term_info_disjoint_class_alt(SubLObject term_info, SubLObject disjoint_class) {
        SubLTrampolineFile.checkType(term_info, OWL_TERM_INFO_P);
        SubLTrampolineFile.checkType(disjoint_class, OWL_EXTERNAL_VALUE_SPECIFICATION_P);
        {
            SubLObject item_var = disjoint_class;
            if (NIL == member(item_var, com.cyc.cycjava.cycl.owl.owl_to_cycl.oti_disjoint_classes(term_info), symbol_function(EQUAL), symbol_function(IDENTITY))) {
                com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oti_disjoint_classes(term_info, cons(item_var, com.cyc.cycjava.cycl.owl.owl_to_cycl.oti_disjoint_classes(term_info)));
            }
        }
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.oti_disjoint_classes(term_info);
    }

    public static SubLObject add_owl_term_info_disjoint_class(final SubLObject term_info, final SubLObject disjoint_class) {
        assert NIL != owl_to_cycl.owl_term_info_p(term_info) : "! owl_to_cycl.owl_term_info_p(term_info) " + ("owl_to_cycl.owl_term_info_p(term_info) " + "CommonSymbols.NIL != owl_to_cycl.owl_term_info_p(term_info) ") + term_info;
        assert NIL != owl_to_cycl.owl_external_value_specification_p(disjoint_class) : "! owl_to_cycl.owl_external_value_specification_p(disjoint_class) " + ("owl_to_cycl.owl_external_value_specification_p(disjoint_class) " + "CommonSymbols.NIL != owl_to_cycl.owl_external_value_specification_p(disjoint_class) ") + disjoint_class;
        if (NIL == member(disjoint_class, owl_to_cycl.oti_disjoint_classes(term_info), symbol_function(EQUAL), symbol_function(IDENTITY))) {
            owl_to_cycl._csetf_oti_disjoint_classes(term_info, cons(disjoint_class, owl_to_cycl.oti_disjoint_classes(term_info)));
        }
        return owl_to_cycl.oti_disjoint_classes(term_info);
    }

    public static final SubLObject owl_term_info_plist_enter_alt(SubLObject term_info, SubLObject key, SubLObject value) {
        com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_oti_plist(term_info, putf(com.cyc.cycjava.cycl.owl.owl_to_cycl.oti_plist(term_info), key, value));
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.oti_plist(term_info);
    }

    public static SubLObject owl_term_info_plist_enter(final SubLObject term_info, final SubLObject key, final SubLObject value) {
        owl_to_cycl._csetf_oti_plist(term_info, putf(owl_to_cycl.oti_plist(term_info), key, value));
        return owl_to_cycl.oti_plist(term_info);
    }

    public static final SubLObject owl_term_info_plist_push_alt(SubLObject term_info, SubLObject key, SubLObject value) {
        SubLTrampolineFile.checkType(term_info, OWL_TERM_INFO_P);
        {
            SubLObject existing = getf(com.cyc.cycjava.cycl.owl.owl_to_cycl.oti_plist(term_info), key, NIL);
            SubLObject v_new = cons(value, existing);
            com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_enter(term_info, key, v_new);
        }
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.oti_plist(term_info);
    }

    public static SubLObject owl_term_info_plist_push(final SubLObject term_info, final SubLObject key, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_term_info_p(term_info) : "! owl_to_cycl.owl_term_info_p(term_info) " + ("owl_to_cycl.owl_term_info_p(term_info) " + "CommonSymbols.NIL != owl_to_cycl.owl_term_info_p(term_info) ") + term_info;
        final SubLObject existing = getf(owl_to_cycl.oti_plist(term_info), key, NIL);
        final SubLObject v_new = (NIL != find(value, existing, symbol_function(EQUAL), UNPROVIDED, UNPROVIDED, UNPROVIDED)) ? existing : cons(value, existing);
        owl_to_cycl.owl_term_info_plist_enter(term_info, key, v_new);
        return owl_to_cycl.oti_plist(term_info);
    }

    public static SubLObject owl_term_info_plist_list_propertyP(final SubLObject key) {
        if (((((key.eql($ISAS) || key.eql($LABEL)) || key.eql($EQUIVALENT_CLASSES)) || key.eql(owl_to_cycl.$MY_PRED_VALUES)) || key.eql($UNION_OF)) || key.eql($INTERSECTION_OF)) {
            return T;
        }
        if (((((key.eql($NODE_ID) || key.eql($EXTERNAL_NAME)) || key.eql($COMPLEMENT_CLASS)) || key.eql($ENUMERATED_INSTANCES)) || key.eql($GUID)) || key.eql($EXTERNALID)) {
            return NIL;
        }
        if (key.eql($GENL_PROPERTY) || key.eql($INVERSE)) {
            return NIL;
        }
        Errors.sublisp_break(owl_to_cycl.$str556$Don_t_know_about__S, new SubLObject[]{ key });
        return NIL;
    }

    public static SubLObject merge_owl_term_definitions(final SubLObject from, final SubLObject onto) {
        final SubLObject cyc_name = owl_to_cycl.owl_term_info_cyc_name(from);
        if (cyc_name.isString()) {
            owl_to_cycl.set_owl_term_info_cyc_name(onto, cyc_name);
        }
        owl_to_cycl.set_owl_term_info_comment(onto, owl_to_cycl.owl_term_info_comment(from));
        SubLObject cdolist_list_var = owl_to_cycl.owl_term_info_superclasses(from);
        SubLObject superclass = NIL;
        superclass = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            owl_to_cycl.add_owl_term_info_superclass(onto, superclass);
            cdolist_list_var = cdolist_list_var.rest();
            superclass = cdolist_list_var.first();
        } 
        cdolist_list_var = owl_to_cycl.owl_term_info_disjoint_classes(from);
        SubLObject disjoint_class = NIL;
        disjoint_class = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            owl_to_cycl.add_owl_term_info_disjoint_class(onto, disjoint_class);
            cdolist_list_var = cdolist_list_var.rest();
            disjoint_class = cdolist_list_var.first();
        } 
        SubLObject remainder;
        SubLObject property;
        SubLObject from_value;
        SubLObject onto_value;
        SubLObject new_value;
        for (remainder = NIL, remainder = owl_to_cycl.owl_term_info_plist(from); NIL != remainder; remainder = cddr(remainder)) {
            property = remainder.first();
            from_value = cadr(remainder);
            onto_value = owl_to_cycl.owl_term_info_plist_lookup(onto, property, UNPROVIDED);
            new_value = (NIL != owl_to_cycl.owl_term_info_plist_list_propertyP(property)) ? union(from_value, onto_value, symbol_function(EQUAL), UNPROVIDED) : from_value;
            owl_to_cycl.owl_term_info_plist_enter(onto, property, new_value);
        }
        return onto;
    }

    public static final SubLObject sxhash_owl_term_info_method_alt(SubLObject v_object) {
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.sxhash_owl_term_info(v_object);
    }

    public static SubLObject sxhash_owl_term_info_method(final SubLObject v_object) {
        return owl_to_cycl.sxhash_owl_term_info(v_object);
    }

    /**
     *
     *
     * @unknown 
     */
    @LispMethod(comment = "@unknown")
    public static final SubLObject sxhash_owl_term_info_alt(SubLObject term_info) {
        return Sxhash.sxhash(com.cyc.cycjava.cycl.owl.owl_to_cycl.oti_cyc_name(term_info));
    }

    /**
     *
     *
     * @unknown 
     */
    @LispMethod(comment = "@unknown")
    public static SubLObject sxhash_owl_term_info(final SubLObject term_info) {
        return Sxhash.sxhash(owl_to_cycl.oti_cyc_name(term_info));
    }

    public static final SubLObject import_named_bnodes_alt(SubLObject original_tokens, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject _prev_bind_0 = $owl_definition_type$.currentBinding(thread);
                try {
                    $owl_definition_type$.bind($BNODE, thread);
                    {
                        SubLObject tokens = original_tokens;
                        while (NIL != tokens) {
                            {
                                SubLObject new_tokens = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_one_named_bnode(tokens, import_parameters);
                                tokens = new_tokens;
                            }
                        } 
                    }
                } finally {
                    $owl_definition_type$.rebind(_prev_bind_0, thread);
                }
            }
            return NIL;
        }
    }

    public static SubLObject import_named_bnodes(final SubLObject original_tokens, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = owl_to_cycl.$owl_definition_type$.currentBinding(thread);
        try {
            owl_to_cycl.$owl_definition_type$.bind($BNODE, thread);
            SubLObject new_tokens;
            for (SubLObject tokens = original_tokens; NIL != tokens; new_tokens = tokens = owl_to_cycl.read_one_named_bnode(tokens, import_parameters)) {
            }
        } finally {
            owl_to_cycl.$owl_definition_type$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    public static final SubLObject read_one_named_bnode_alt(SubLObject original_tokens, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject tokens = original_tokens;
                SubLObject current_token = tokens.first();
                SubLObject doneP = NIL;
                while (!((NIL != doneP) || (NIL != list_utilities.empty_list_p(tokens)))) {
                    if (NIL != web_utilities.xml_token_element_nameP(current_token, rdf_utilities.rdf_name($$$Description))) {
                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt533$__Reading_Description___S__, $str_alt223$__ }), current_token);
                            force_output(UNPROVIDED);
                        }
                        {
                            SubLObject node_id = web_utilities.xml_tag_attribute_value(current_token, rdf_utilities.rdf_name($$$nodeID), UNPROVIDED);
                            if ((NIL != node_id) && (NIL != web_utilities.xml_token_element_nameP(second(tokens), rdf_utilities.rdf_name($$$first)))) {
                                {
                                    SubLObject list = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_list(tokens.rest(), import_parameters);
                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.note_node_id_reference(node_id, list);
                                    doneP = T;
                                }
                            } else {
                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt534$Skipping_rdf_Description_element_, $str_alt223$__ }));
                                    force_output(UNPROVIDED);
                                }
                            }
                        }
                        tokens = web_utilities.advance_xml_tokens_to_end_of_element(tokens);
                    } else {
                        if (NIL != web_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name($$$Restriction))) {
                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt535$__Reading_Restriction___S__, $str_alt223$__ }), current_token);
                                force_output(UNPROVIDED);
                            }
                            {
                                SubLObject node_id = web_utilities.xml_tag_attribute_value(current_token, rdf_utilities.rdf_name($$$nodeID), UNPROVIDED);
                                if (NIL != node_id) {
                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_restriction(tokens, import_parameters);
                                    doneP = T;
                                } else {
                                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                        format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt536$Skipping_owl_Restriction_element_, $str_alt223$__ }));
                                        force_output(UNPROVIDED);
                                    }
                                }
                            }
                            tokens = web_utilities.advance_xml_tokens_to_end_of_element(tokens);
                        } else {
                            if ((NIL != web_utilities.xml_token_element_nameP(current_token, rdf_utilities.rdf_name($$$RDF))) && (NIL != web_utilities.xml_opening_tag_p(current_token))) {
                                tokens = web_utilities.advance_xml_tokens(tokens, com.cyc.cycjava.cycl.owl.owl_to_cycl.next_noninitial_non_whitespace_xml_token_position(tokens));
                            } else {
                                if ((NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_class_token_p(current_token)) && (NIL != web_utilities.xml_tag_attribute_value(current_token, rdf_utilities.rdf_name($$$nodeID), UNPROVIDED))) {
                                    format(T, $str_alt537$Reading_top_level_named_class__S, current_token);
                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_class(tokens, import_parameters);
                                    tokens = web_utilities.advance_xml_tokens_to_end_of_element(tokens);
                                } else {
                                    if (NIL != web_utilities.xml_opening_tag_p(current_token)) {
                                        tokens = web_utilities.advance_xml_tokens_to_end_of_element(tokens);
                                    } else {
                                        {
                                            SubLObject position = com.cyc.cycjava.cycl.owl.owl_to_cycl.next_noninitial_non_whitespace_xml_token_position(tokens);
                                            tokens = (NIL != position) ? ((SubLObject) (web_utilities.advance_xml_tokens(tokens, position))) : NIL;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    current_token = (NIL != list_utilities.non_empty_list_p(tokens)) ? ((SubLObject) (tokens.first())) : NIL;
                } 
                return tokens;
            }
        }
    }

    public static SubLObject read_one_named_bnode(final SubLObject original_tokens, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject tokens = original_tokens;
        SubLObject current_token = tokens.first();
        SubLObject doneP = NIL;
        while ((NIL == doneP) && (NIL == empty_list_p(tokens))) {
            if (NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, rdf_name(owl_to_cycl.$$$Description))) {
                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str559$__Reading_Description___S__, owl_to_cycl.$str239$__ }), current_token);
                    force_output(UNPROVIDED);
                }
                final SubLObject node_id = xml_parsing_utilities.xml_tag_attribute_value(current_token, rdf_name(owl_to_cycl.$$$nodeID), UNPROVIDED);
                if ((NIL != node_id) && (NIL != xml_parsing_utilities.xml_token_element_nameP(second(tokens), rdf_name(owl_to_cycl.$$$first)))) {
                    final SubLObject list = owl_to_cycl.read_owl_list(tokens.rest(), import_parameters);
                    owl_to_cycl.note_node_id_reference(node_id, list);
                    doneP = T;
                } else
                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                        format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str560$Skipping_rdf_Description_element_, owl_to_cycl.$str239$__ }));
                        force_output(UNPROVIDED);
                    }

                tokens = xml_parsing_utilities.advance_xml_tokens_to_end_of_element(tokens);
            } else
                if (NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name(owl_to_cycl.$$$Restriction))) {
                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                        format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str561$__Reading_Restriction___S__, owl_to_cycl.$str239$__ }), current_token);
                        force_output(UNPROVIDED);
                    }
                    final SubLObject node_id = xml_parsing_utilities.xml_tag_attribute_value(current_token, rdf_name(owl_to_cycl.$$$nodeID), UNPROVIDED);
                    if (NIL != node_id) {
                        owl_to_cycl.read_owl_restriction(tokens, import_parameters);
                        doneP = T;
                    } else
                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str562$Skipping_owl_Restriction_element_, owl_to_cycl.$str239$__ }));
                            force_output(UNPROVIDED);
                        }

                    tokens = xml_parsing_utilities.advance_xml_tokens_to_end_of_element(tokens);
                } else
                    if ((NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, rdf_name(owl_to_cycl.$$$RDF))) && (NIL != xml_parsing_utilities.xml_opening_tag_p(current_token))) {
                        tokens = xml_parsing_utilities.advance_xml_tokens(tokens, owl_to_cycl.next_noninitial_non_whitespace_xml_token_position(tokens));
                    } else
                        if ((NIL != owl_to_cycl.owl_class_token_p(current_token)) && (NIL != xml_parsing_utilities.xml_tag_attribute_value(current_token, rdf_name(owl_to_cycl.$$$nodeID), UNPROVIDED))) {
                            format(T, owl_to_cycl.$str563$Reading_top_level_named_class__S, current_token);
                            owl_to_cycl.read_owl_class(tokens, import_parameters);
                            tokens = xml_parsing_utilities.advance_xml_tokens_to_end_of_element(tokens);
                        } else
                            if (NIL != xml_parsing_utilities.xml_opening_tag_p(current_token)) {
                                tokens = xml_parsing_utilities.advance_xml_tokens_to_end_of_element(tokens);
                            } else {
                                final SubLObject position = owl_to_cycl.next_noninitial_non_whitespace_xml_token_position(tokens);
                                tokens = (NIL != position) ? xml_parsing_utilities.advance_xml_tokens(tokens, position) : NIL;
                            }




            current_token = (NIL != non_empty_list_p(tokens)) ? tokens.first() : NIL;
        } 
        return tokens;
    }

    public static final SubLObject read_class_info_from_owl_tokens_alt(SubLObject original_tokens, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject _prev_bind_0 = $owl_definition_type$.currentBinding(thread);
                try {
                    $owl_definition_type$.bind($CLASS, thread);
                    {
                        SubLObject tokens = original_tokens;
                        while (NIL != tokens) {
                            {
                                SubLObject new_tokens = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_one_class_info_from_owl_tokens(tokens, import_parameters);
                                tokens = new_tokens;
                            }
                        } 
                    }
                } finally {
                    $owl_definition_type$.rebind(_prev_bind_0, thread);
                }
            }
            return NIL;
        }
    }

    public static SubLObject read_class_info_from_owl_tokens(final SubLObject original_tokens, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = owl_to_cycl.$owl_definition_type$.currentBinding(thread);
        try {
            owl_to_cycl.$owl_definition_type$.bind($CLASS, thread);
            SubLObject new_tokens;
            for (SubLObject tokens = original_tokens; NIL != tokens; new_tokens = tokens = owl_to_cycl.read_one_class_info_from_owl_tokens(tokens, import_parameters)) {
            }
        } finally {
            owl_to_cycl.$owl_definition_type$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    public static final SubLObject read_one_class_info_from_owl_tokens_alt(SubLObject original_tokens, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject tokens = original_tokens;
                SubLObject current_token = tokens.first();
                SubLObject term_info = NIL;
                SubLObject doneP = NIL;
                while (!((NIL != doneP) || (NIL != list_utilities.empty_list_p(tokens)))) {
                    thread.resetMultipleValues();
                    {
                        SubLObject new_term_info = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_one_owl_chunk_for_class_info(current_token, term_info, import_parameters, tokens);
                        SubLObject token_advance_spec = thread.secondMultipleValue();
                        SubLObject term_info_doneP = thread.thirdMultipleValue();
                        thread.resetMultipleValues();
                        if (!term_info.eql(new_term_info)) {
                            term_info = new_term_info;
                        }
                        if (NIL != term_info_doneP) {
                            if (NIL == term_info) {
                                if (NIL != owl_utilities.owl_warnP()) {
                                    Errors.warn($str_alt538$Failed_or_declined_to_read_a_clas);
                                }
                            } else {
                                if ((NIL != list_utilities.empty_list_p(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_superclasses(term_info))) && (NIL != list_utilities.empty_list_p(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_lookup(term_info, $INTERSECTION_OF, UNPROVIDED)))) {
                                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                        format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt539$There_are_no_superclasses_for__S, $str_alt223$__ }), term_info);
                                        force_output(UNPROVIDED);
                                    }
                                }
                            }
                            if (NIL != term_info) {
                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt540$Finished__S____Superclasses___S__, $str_alt223$__ }), new SubLObject[]{ term_info, com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_superclasses(term_info), com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_disjoint_classes(term_info), com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_lookup(term_info, $ISAS, UNPROVIDED) });
                                    force_output(UNPROVIDED);
                                }
                            }
                            if (NIL != term_info) {
                                com.cyc.cycjava.cycl.owl.owl_to_cycl.accumulate_owl_definition(term_info, $CLASS);
                            }
                            doneP = T;
                        }
                        if (NIL != subl_promotions.positive_integer_p(token_advance_spec)) {
                            tokens = web_utilities.advance_xml_tokens(tokens, token_advance_spec);
                        } else {
                            if (token_advance_spec.isString()) {
                                tokens = web_utilities.advance_xml_tokens(web_utilities.advance_xml_tokens_to(tokens, token_advance_spec, UNPROVIDED), UNPROVIDED);
                            } else {
                                if (token_advance_spec.eql($CLOSE)) {
                                    tokens = web_utilities.advance_xml_tokens_to_end_of_element(tokens);
                                } else {
                                    {
                                        SubLObject position = com.cyc.cycjava.cycl.owl.owl_to_cycl.next_noninitial_non_whitespace_xml_token_position(tokens);
                                        tokens = (NIL != position) ? ((SubLObject) (web_utilities.advance_xml_tokens(tokens, position))) : NIL;
                                    }
                                }
                            }
                        }
                        current_token = (NIL != list_utilities.non_empty_list_p(tokens)) ? ((SubLObject) (tokens.first())) : NIL;
                    }
                } 
                return values(tokens, term_info);
            }
        }
    }

    public static SubLObject read_one_class_info_from_owl_tokens(final SubLObject original_tokens, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject tokens = original_tokens;
        SubLObject current_token = tokens.first();
        SubLObject term_info = NIL;
        SubLObject doneP = NIL;
        while ((NIL == doneP) && (NIL == empty_list_p(tokens))) {
            thread.resetMultipleValues();
            final SubLObject new_term_info = owl_to_cycl.read_one_owl_chunk_for_class_info(current_token, term_info, import_parameters, tokens);
            final SubLObject token_advance_spec = thread.secondMultipleValue();
            final SubLObject term_info_doneP = thread.thirdMultipleValue();
            thread.resetMultipleValues();
            if (!term_info.eql(new_term_info)) {
                term_info = new_term_info;
            }
            if (NIL != term_info_doneP) {
                if (NIL == term_info) {
                    if (NIL != owl_utilities.owl_warnP()) {
                        Errors.warn(owl_to_cycl.$str564$Failed_or_declined_to_read_a_clas);
                    }
                } else
                    if (((NIL != empty_list_p(owl_to_cycl.owl_term_info_superclasses(term_info))) && (NIL != empty_list_p(owl_to_cycl.owl_term_info_plist_lookup(term_info, $INTERSECTION_OF, UNPROVIDED)))) && (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread))) {
                        format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str565$There_are_no_superclasses_for__S, owl_to_cycl.$str239$__ }), term_info);
                        force_output(UNPROVIDED);
                    }

                if ((NIL != term_info) && (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread))) {
                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str566$Finished__S____Superclasses___S__, owl_to_cycl.$str239$__ }), new SubLObject[]{ term_info, owl_to_cycl.owl_term_info_superclasses(term_info), owl_to_cycl.owl_term_info_disjoint_classes(term_info), owl_to_cycl.owl_term_info_plist_lookup(term_info, $ISAS, UNPROVIDED) });
                    force_output(UNPROVIDED);
                }
                if (NIL != term_info) {
                    owl_to_cycl.accumulate_owl_definition(term_info, $CLASS);
                }
                doneP = T;
            }
            if (NIL != positive_integer_p(token_advance_spec)) {
                tokens = xml_parsing_utilities.advance_xml_tokens(tokens, token_advance_spec);
            } else
                if (token_advance_spec.isString()) {
                    tokens = xml_parsing_utilities.advance_xml_tokens(xml_parsing_utilities.advance_xml_tokens_to(tokens, token_advance_spec, UNPROVIDED), UNPROVIDED);
                } else
                    if (token_advance_spec.eql($CLOSE)) {
                        tokens = xml_parsing_utilities.advance_xml_tokens_to_end_of_element(tokens);
                    } else {
                        final SubLObject position = owl_to_cycl.next_noninitial_non_whitespace_xml_token_position(tokens);
                        tokens = (NIL != position) ? xml_parsing_utilities.advance_xml_tokens(tokens, position) : NIL;
                    }


            current_token = (NIL != non_empty_list_p(tokens)) ? tokens.first() : NIL;
        } 
        return values(tokens, term_info);
    }

    public static final SubLObject read_one_owl_chunk_for_class_info_alt(SubLObject current_token, SubLObject term_info, SubLObject import_parameters, SubLObject tokens) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject new_term_info = term_info;
                SubLObject token_advance_spec = NIL;
                SubLObject term_info_doneP = NIL;
                if (NIL != web_utilities.xml_token_starts_with(current_token, $str_alt240$____)) {
                    {
                        SubLObject comment_close_position = web_utilities.next_xml_token_position(tokens, $str_alt241$___, UNPROVIDED);
                        if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                            if (!comment_close_position.isInteger()) {
                                Errors.error($str_alt242$Couldn_t_find_end_of_HTML_comment, list_utilities.first_n(TEN_INTEGER, tokens));
                            }
                        }
                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt541$Skipping_HTML_comment___S, $str_alt223$__ }), list_utilities.first_n(number_utilities.f_1X(comment_close_position), tokens));
                            force_output(UNPROVIDED);
                        }
                        token_advance_spec = number_utilities.f_1X(comment_close_position);
                    }
                } else {
                    if ((NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_class_token_p(current_token)) && (NIL != web_utilities.xml_closing_tag_p(current_token))) {
                        term_info_doneP = T;
                        token_advance_spec = $NEXT_NON_WHITESPACE_TOKEN;
                    } else {
                        if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_class_token_p(current_token)) {
                            {
                                SubLObject external_name = NIL;
                                SubLObject cyc_name = NIL;
                                if (NIL == list_utilities.empty_list_p(web_utilities.parse_xml_token(current_token).rest())) {
                                    thread.resetMultipleValues();
                                    {
                                        SubLObject external_name_77 = com.cyc.cycjava.cycl.owl.owl_to_cycl.term_names_from_token(current_token, import_parameters);
                                        SubLObject cyc_name_78 = thread.secondMultipleValue();
                                        thread.resetMultipleValues();
                                        external_name = external_name_77;
                                        cyc_name = cyc_name_78;
                                    }
                                }
                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt542$Reading_definition_of__S, $str_alt223$__ }), external_name);
                                    force_output(UNPROVIDED);
                                }
                                new_term_info = com.cyc.cycjava.cycl.owl.owl_to_cycl.find_or_create_owl_term_info(cyc_name);
                                {
                                    SubLObject type = web_utilities.xml_token_element_name(current_token);
                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_push(new_term_info, $ISAS, type);
                                }
                                {
                                    SubLObject node_id = web_utilities.xml_tag_attribute_value(current_token, rdf_utilities.rdf_name($$$nodeID), UNPROVIDED);
                                    if (NIL != node_id) {
                                        com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_enter(new_term_info, $NODE_ID, node_id);
                                    }
                                }
                                if (NIL != cyc_name) {
                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.set_owl_term_info_cyc_name(new_term_info, cyc_name);
                                }
                                if (NIL != external_name) {
                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_enter(new_term_info, $EXTERNAL_NAME, external_name);
                                }
                            }
                            if (NIL != web_utilities.xml_empty_tagP(current_token)) {
                                term_info_doneP = T;
                            }
                            token_advance_spec = $NEXT_NON_WHITESPACE_TOKEN;
                        } else {
                            if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_property_token_p(current_token)) {
                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt543$Skipping__S_to_close_tag, $str_alt223$__ }), current_token);
                                    force_output(UNPROVIDED);
                                }
                                token_advance_spec = $CLOSE;
                            } else {
                                if (NIL == term_info) {
                                    token_advance_spec = com.cyc.cycjava.cycl.owl.owl_to_cycl.handle_non_target_owl_token(current_token);
                                } else {
                                    token_advance_spec = com.cyc.cycjava.cycl.owl.owl_to_cycl.handle_term_info_token(new_term_info, tokens, import_parameters);
                                }
                            }
                        }
                    }
                }
                return values(new_term_info, token_advance_spec, term_info_doneP);
            }
        }
    }

    public static SubLObject read_one_owl_chunk_for_class_info(final SubLObject current_token, final SubLObject term_info, final SubLObject import_parameters, final SubLObject tokens) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject new_term_info = term_info;
        SubLObject token_advance_spec = NIL;
        SubLObject term_info_doneP = NIL;
        if (NIL != xml_parsing_utilities.xml_token_starts_with(current_token, owl_to_cycl.$str256$____)) {
            final SubLObject comment_close_position = xml_parsing_utilities.next_xml_token_position(tokens, owl_to_cycl.$str257$___, UNPROVIDED);
            if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (!comment_close_position.isInteger())) {
                Errors.error(owl_to_cycl.$str258$Couldn_t_find_end_of_HTML_comment, first_n(TEN_INTEGER, tokens));
            }
            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str567$Skipping_HTML_comment___S, owl_to_cycl.$str239$__ }), first_n(f_1X(comment_close_position), tokens));
                force_output(UNPROVIDED);
            }
            token_advance_spec = f_1X(comment_close_position);
        } else
            if ((NIL != owl_to_cycl.owl_class_token_p(current_token)) && (NIL != xml_parsing_utilities.xml_closing_tag_p(current_token))) {
                term_info_doneP = T;
                token_advance_spec = owl_to_cycl.$NEXT_NON_WHITESPACE_TOKEN;
            } else
                if (NIL != owl_to_cycl.owl_class_token_p(current_token)) {
                    SubLObject external_name = NIL;
                    SubLObject cyc_name = NIL;
                    if (NIL == empty_list_p(xml_parsing_utilities.parse_xml_token(current_token).rest())) {
                        thread.resetMultipleValues();
                        final SubLObject external_name_$75 = owl_to_cycl.term_names_from_token(current_token, import_parameters);
                        final SubLObject cyc_name_$76 = thread.secondMultipleValue();
                        thread.resetMultipleValues();
                        external_name = external_name_$75;
                        cyc_name = cyc_name_$76;
                    }
                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                        format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str568$Reading_definition_of__S, owl_to_cycl.$str239$__ }), external_name);
                        force_output(UNPROVIDED);
                    }
                    new_term_info = owl_to_cycl.find_or_create_owl_term_info(cyc_name);
                    final SubLObject type = xml_parsing_utilities.xml_token_element_name(current_token);
                    owl_to_cycl.owl_term_info_plist_push(new_term_info, $ISAS, type);
                    final SubLObject node_id = xml_parsing_utilities.xml_tag_attribute_value(current_token, rdf_name(owl_to_cycl.$$$nodeID), UNPROVIDED);
                    if (NIL != node_id) {
                        owl_to_cycl.owl_term_info_plist_enter(new_term_info, $NODE_ID, node_id);
                    }
                    if (NIL != cyc_name) {
                        owl_to_cycl.set_owl_term_info_cyc_name(new_term_info, cyc_name);
                    }
                    if (NIL != external_name) {
                        owl_to_cycl.owl_term_info_plist_enter(new_term_info, $EXTERNAL_NAME, external_name);
                    }
                    if (NIL != xml_parsing_utilities.xml_empty_tagP(current_token)) {
                        term_info_doneP = T;
                    }
                    token_advance_spec = owl_to_cycl.$NEXT_NON_WHITESPACE_TOKEN;
                } else
                    if (NIL != owl_to_cycl.owl_property_token_p(current_token)) {
                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str569$Skipping__S_to_close_tag, owl_to_cycl.$str239$__ }), current_token);
                            force_output(UNPROVIDED);
                        }
                        token_advance_spec = $CLOSE;
                    } else
                        if (NIL == term_info) {
                            token_advance_spec = owl_to_cycl.handle_non_target_owl_token(current_token);
                        } else {
                            token_advance_spec = owl_to_cycl.handle_term_info_token(new_term_info, tokens, import_parameters);
                        }




        return values(new_term_info, token_advance_spec, term_info_doneP);
    }

    public static final SubLObject read_instance_info_from_owl_tokens_alt(SubLObject original_tokens, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject _prev_bind_0 = $owl_definition_type$.currentBinding(thread);
                try {
                    $owl_definition_type$.bind($INSTANCE, thread);
                    {
                        SubLObject tokens = original_tokens;
                        while (NIL != tokens) {
                            tokens = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_one_instance_info_from_owl_tokens(tokens, import_parameters);
                        } 
                    }
                } finally {
                    $owl_definition_type$.rebind(_prev_bind_0, thread);
                }
            }
            return NIL;
        }
    }

    public static SubLObject read_instance_info_from_owl_tokens(final SubLObject original_tokens, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = owl_to_cycl.$owl_definition_type$.currentBinding(thread);
        try {
            owl_to_cycl.$owl_definition_type$.bind($INSTANCE, thread);
            for (SubLObject tokens = original_tokens; NIL != tokens; tokens = owl_to_cycl.read_one_instance_info_from_owl_tokens(tokens, import_parameters)) {
            }
        } finally {
            owl_to_cycl.$owl_definition_type$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    public static final SubLObject read_one_instance_info_from_owl_tokens_alt(SubLObject original_tokens, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject tokens = original_tokens;
                SubLObject current_token = tokens.first();
                SubLObject term_info = NIL;
                SubLObject doneP = NIL;
                while (!((NIL != doneP) || (NIL != list_utilities.empty_list_p(tokens)))) {
                    thread.resetMultipleValues();
                    {
                        SubLObject new_term_info = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_one_owl_chunk_for_instance_info(current_token, term_info, import_parameters, tokens);
                        SubLObject token_advance_spec = thread.secondMultipleValue();
                        SubLObject term_info_doneP = thread.thirdMultipleValue();
                        thread.resetMultipleValues();
                        if (!term_info.eql(new_term_info)) {
                            term_info = new_term_info;
                        }
                        if (NIL != term_info_doneP) {
                            if (NIL == term_info) {
                                if (NIL != owl_utilities.owl_warnP()) {
                                    Errors.warn($str_alt544$Failed_or_declined_to_read_an_ins);
                                }
                            }
                            if (NIL != term_info) {
                                com.cyc.cycjava.cycl.owl.owl_to_cycl.accumulate_owl_definition(term_info, $INSTANCE);
                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt545$Finished__S_, $str_alt223$__ }), term_info);
                                    force_output(UNPROVIDED);
                                }
                            }
                            doneP = T;
                        }
                        if (NIL != subl_promotions.positive_integer_p(token_advance_spec)) {
                            tokens = web_utilities.advance_xml_tokens(tokens, token_advance_spec);
                        } else {
                            if (token_advance_spec.isString()) {
                                tokens = web_utilities.advance_xml_tokens(web_utilities.advance_xml_tokens_to(tokens, token_advance_spec, UNPROVIDED), UNPROVIDED);
                            } else {
                                if (token_advance_spec.eql($CLOSE)) {
                                    tokens = web_utilities.advance_xml_tokens_to_end_of_element(tokens);
                                } else {
                                    {
                                        SubLObject position = com.cyc.cycjava.cycl.owl.owl_to_cycl.next_noninitial_non_whitespace_xml_token_position(tokens);
                                        tokens = (NIL != position) ? ((SubLObject) (web_utilities.advance_xml_tokens(tokens, position))) : NIL;
                                    }
                                }
                            }
                        }
                        current_token = (NIL != list_utilities.non_empty_list_p(tokens)) ? ((SubLObject) (tokens.first())) : NIL;
                    }
                } 
                return values(tokens, term_info);
            }
        }
    }

    public static SubLObject read_one_instance_info_from_owl_tokens(final SubLObject original_tokens, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject tokens = original_tokens;
        SubLObject current_token = tokens.first();
        SubLObject term_info = NIL;
        SubLObject doneP = NIL;
        while ((NIL == doneP) && (NIL == empty_list_p(tokens))) {
            thread.resetMultipleValues();
            final SubLObject new_term_info = owl_to_cycl.read_one_owl_chunk_for_instance_info(current_token, term_info, import_parameters, tokens);
            final SubLObject token_advance_spec = thread.secondMultipleValue();
            final SubLObject term_info_doneP = thread.thirdMultipleValue();
            thread.resetMultipleValues();
            if (!term_info.eql(new_term_info)) {
                term_info = new_term_info;
            }
            if (NIL != term_info_doneP) {
                if ((NIL == term_info) && (NIL != owl_utilities.owl_warnP())) {
                    Errors.warn(owl_to_cycl.$str570$Failed_or_declined_to_read_an_ins);
                }
                if (NIL != term_info) {
                    owl_to_cycl.accumulate_owl_definition(term_info, $INSTANCE);
                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                        format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str571$Finished__S_, owl_to_cycl.$str239$__ }), term_info);
                        force_output(UNPROVIDED);
                    }
                }
                doneP = T;
            }
            if (NIL != positive_integer_p(token_advance_spec)) {
                tokens = xml_parsing_utilities.advance_xml_tokens(tokens, token_advance_spec);
            } else
                if (token_advance_spec.isString()) {
                    tokens = xml_parsing_utilities.advance_xml_tokens(xml_parsing_utilities.advance_xml_tokens_to(tokens, token_advance_spec, UNPROVIDED), UNPROVIDED);
                } else
                    if (token_advance_spec.eql($CLOSE)) {
                        tokens = xml_parsing_utilities.advance_xml_tokens_to_end_of_element(tokens);
                    } else {
                        final SubLObject position = owl_to_cycl.next_noninitial_non_whitespace_xml_token_position(tokens);
                        tokens = (NIL != position) ? xml_parsing_utilities.advance_xml_tokens(tokens, position) : NIL;
                    }


            current_token = (NIL != non_empty_list_p(tokens)) ? tokens.first() : NIL;
        } 
        return values(tokens, term_info);
    }

    public static final SubLObject read_one_owl_chunk_for_instance_info_alt(SubLObject current_token, SubLObject term_info, SubLObject import_parameters, SubLObject tokens) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject new_term_info = term_info;
                SubLObject token_advance_spec = NIL;
                SubLObject maybe_instance_tokenP = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_maybe_instance_tokenP(current_token, import_parameters);
                SubLObject term_info_doneP = NIL;
                if (NIL != web_utilities.xml_comment_p(current_token)) {
                    {
                        SubLObject comment_close_position = web_utilities.next_xml_token_position(tokens, $str_alt241$___, UNPROVIDED);
                        if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                            if (!comment_close_position.isInteger()) {
                                Errors.error($str_alt242$Couldn_t_find_end_of_HTML_comment, list_utilities.first_n(TEN_INTEGER, tokens));
                            }
                        }
                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt541$Skipping_HTML_comment___S, $str_alt223$__ }), list_utilities.first_n(number_utilities.f_1X(comment_close_position), tokens));
                            force_output(UNPROVIDED);
                        }
                        token_advance_spec = number_utilities.f_1X(comment_close_position);
                    }
                } else {
                    if ((NIL != maybe_instance_tokenP) && (NIL != web_utilities.xml_closing_tag_p(current_token))) {
                        term_info_doneP = T;
                        token_advance_spec = $NEXT_NON_WHITESPACE_TOKEN;
                    } else {
                        if ((NIL == term_info) && (NIL != maybe_instance_tokenP)) {
                            {
                                SubLObject external_name = NIL;
                                SubLObject cyc_name = NIL;
                                if (NIL == list_utilities.empty_list_p(web_utilities.parse_xml_token(current_token).rest())) {
                                    thread.resetMultipleValues();
                                    {
                                        SubLObject external_name_79 = com.cyc.cycjava.cycl.owl.owl_to_cycl.term_names_from_token(current_token, import_parameters);
                                        SubLObject cyc_name_80 = thread.secondMultipleValue();
                                        thread.resetMultipleValues();
                                        external_name = external_name_79;
                                        cyc_name = cyc_name_80;
                                    }
                                }
                                new_term_info = com.cyc.cycjava.cycl.owl.owl_to_cycl.find_or_create_owl_term_info(cyc_name);
                                if (NIL == web_utilities.xml_token_element_nameP(current_token, rdf_utilities.rdf_name($$$Description))) {
                                    {
                                        SubLObject type = web_utilities.xml_token_element_name(current_token);
                                        com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_push(new_term_info, $ISAS, type);
                                    }
                                }
                                if (NIL != cyc_name) {
                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.set_owl_term_info_cyc_name(new_term_info, cyc_name);
                                }
                                if (NIL != external_name) {
                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_enter(new_term_info, $EXTERNAL_NAME, external_name);
                                }
                            }
                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt546$__Defining__S_as_an_instance_of__, $str_alt223$__ }), new_term_info, web_utilities.xml_token_element_name(current_token));
                                force_output(UNPROVIDED);
                            }
                            if (NIL != web_utilities.xml_empty_tagP(current_token)) {
                                term_info_doneP = T;
                            }
                            token_advance_spec = $NEXT_NON_WHITESPACE_TOKEN;
                        } else {
                            if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_property_token_p(current_token)) {
                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt543$Skipping__S_to_close_tag, $str_alt223$__ }), current_token);
                                    force_output(UNPROVIDED);
                                }
                                token_advance_spec = $CLOSE;
                            } else {
                                if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_class_token_p(current_token)) {
                                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                        format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt543$Skipping__S_to_close_tag, $str_alt223$__ }), current_token);
                                        force_output(UNPROVIDED);
                                    }
                                    token_advance_spec = $CLOSE;
                                } else {
                                    if (NIL != web_utilities.xml_token_element_nameP(current_token, rdf_utilities.rdf_name($$$Description))) {
                                        {
                                            SubLObject node_id = web_utilities.xml_tag_attribute_value(current_token, rdf_utilities.rdf_name($$$nodeID), UNPROVIDED);
                                            if ((NIL != node_id) && (NIL != web_utilities.xml_token_element_nameP(second(tokens), rdf_utilities.rdf_name($$$first)))) {
                                                {
                                                    SubLObject list = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_list(tokens.rest(), import_parameters);
                                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.note_node_id_reference(node_id, list);
                                                }
                                            } else {
                                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt534$Skipping_rdf_Description_element_, $str_alt223$__ }));
                                                    force_output(UNPROVIDED);
                                                }
                                            }
                                        }
                                        token_advance_spec = $CLOSE;
                                    } else {
                                        if (NIL == term_info) {
                                            token_advance_spec = com.cyc.cycjava.cycl.owl.owl_to_cycl.handle_non_target_owl_token(current_token);
                                        } else {
                                            token_advance_spec = com.cyc.cycjava.cycl.owl.owl_to_cycl.handle_term_info_token(new_term_info, tokens, import_parameters);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return values(new_term_info, token_advance_spec, term_info_doneP);
            }
        }
    }

    public static SubLObject read_one_owl_chunk_for_instance_info(final SubLObject current_token, final SubLObject term_info, final SubLObject import_parameters, final SubLObject tokens) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject new_term_info = term_info;
        SubLObject token_advance_spec = NIL;
        final SubLObject maybe_instance_tokenP = owl_to_cycl.owl_maybe_instance_tokenP(current_token, import_parameters);
        SubLObject term_info_doneP = NIL;
        if (NIL != xml_parsing_utilities.xml_comment_p(current_token)) {
            final SubLObject comment_close_position = xml_parsing_utilities.next_xml_token_position(tokens, owl_to_cycl.$str257$___, UNPROVIDED);
            if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (!comment_close_position.isInteger())) {
                Errors.error(owl_to_cycl.$str258$Couldn_t_find_end_of_HTML_comment, first_n(TEN_INTEGER, tokens));
            }
            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str567$Skipping_HTML_comment___S, owl_to_cycl.$str239$__ }), first_n(f_1X(comment_close_position), tokens));
                force_output(UNPROVIDED);
            }
            token_advance_spec = f_1X(comment_close_position);
        } else
            if ((NIL != maybe_instance_tokenP) && (NIL != xml_parsing_utilities.xml_closing_tag_p(current_token))) {
                term_info_doneP = T;
                token_advance_spec = owl_to_cycl.$NEXT_NON_WHITESPACE_TOKEN;
            } else
                if ((NIL == term_info) && (NIL != maybe_instance_tokenP)) {
                    SubLObject external_name = NIL;
                    SubLObject cyc_name = NIL;
                    if (NIL == empty_list_p(xml_parsing_utilities.parse_xml_token(current_token).rest())) {
                        thread.resetMultipleValues();
                        final SubLObject external_name_$77 = owl_to_cycl.term_names_from_token(current_token, import_parameters);
                        final SubLObject cyc_name_$78 = thread.secondMultipleValue();
                        thread.resetMultipleValues();
                        external_name = external_name_$77;
                        cyc_name = cyc_name_$78;
                    }
                    new_term_info = owl_to_cycl.find_or_create_owl_term_info(cyc_name);
                    if (NIL == xml_parsing_utilities.xml_token_element_nameP(current_token, rdf_name(owl_to_cycl.$$$Description))) {
                        final SubLObject type = xml_parsing_utilities.xml_token_element_name(current_token);
                        owl_to_cycl.owl_term_info_plist_push(new_term_info, $ISAS, type);
                    }
                    if (NIL != cyc_name) {
                        owl_to_cycl.set_owl_term_info_cyc_name(new_term_info, cyc_name);
                    }
                    if (NIL != external_name) {
                        owl_to_cycl.owl_term_info_plist_enter(new_term_info, $EXTERNAL_NAME, external_name);
                    }
                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                        format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str572$__Defining__S_as_an_instance_of__, owl_to_cycl.$str239$__ }), new_term_info, xml_parsing_utilities.xml_token_element_name(current_token));
                        force_output(UNPROVIDED);
                    }
                    if (NIL != xml_parsing_utilities.xml_empty_tagP(current_token)) {
                        term_info_doneP = T;
                    }
                    token_advance_spec = owl_to_cycl.$NEXT_NON_WHITESPACE_TOKEN;
                } else
                    if (NIL != owl_to_cycl.owl_property_token_p(current_token)) {
                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str569$Skipping__S_to_close_tag, owl_to_cycl.$str239$__ }), current_token);
                            force_output(UNPROVIDED);
                        }
                        token_advance_spec = $CLOSE;
                    } else
                        if (NIL != owl_to_cycl.owl_class_token_p(current_token)) {
                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str569$Skipping__S_to_close_tag, owl_to_cycl.$str239$__ }), current_token);
                                force_output(UNPROVIDED);
                            }
                            token_advance_spec = $CLOSE;
                        } else
                            if (NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, rdf_name(owl_to_cycl.$$$Description))) {
                                final SubLObject node_id = xml_parsing_utilities.xml_tag_attribute_value(current_token, rdf_name(owl_to_cycl.$$$nodeID), UNPROVIDED);
                                if ((NIL != node_id) && (NIL != xml_parsing_utilities.xml_token_element_nameP(second(tokens), rdf_name(owl_to_cycl.$$$first)))) {
                                    final SubLObject list = owl_to_cycl.read_owl_list(tokens.rest(), import_parameters);
                                    owl_to_cycl.note_node_id_reference(node_id, list);
                                } else
                                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                        format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str560$Skipping_rdf_Description_element_, owl_to_cycl.$str239$__ }));
                                        force_output(UNPROVIDED);
                                    }

                                token_advance_spec = $CLOSE;
                            } else
                                if (NIL == term_info) {
                                    token_advance_spec = owl_to_cycl.handle_non_target_owl_token(current_token);
                                } else {
                                    token_advance_spec = owl_to_cycl.handle_term_info_token(new_term_info, tokens, import_parameters);
                                }






        return values(new_term_info, token_advance_spec, term_info_doneP);
    }

    public static final SubLObject owl_maybe_instance_tokenP_alt(SubLObject token, SubLObject import_parameters) {
        {
            SubLObject ans = makeBoolean((NIL != web_utilities.xml_tagP(token)) && (NIL == com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_non_instance_tokenP(token, import_parameters)));
            return ans;
        }
    }

    public static SubLObject owl_maybe_instance_tokenP(final SubLObject token, final SubLObject import_parameters) {
        final SubLObject ans = makeBoolean((NIL != xml_parsing_utilities.xml_tagP(token)) && (NIL == owl_to_cycl.owl_non_instance_tokenP(token, import_parameters)));
        return ans;
    }

    public static final SubLObject owl_non_instance_tokenP_alt(SubLObject token, SubLObject import_parameters) {
        if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_class_token_p(token)) {
            return T;
        } else {
            if (NIL != web_utilities.xml_token_element_nameP(token, $str_alt80$_xml)) {
                return T;
            } else {
                if (NIL != web_utilities.xml_doctype_tag_p(token)) {
                    return T;
                } else {
                    if (((NIL != member(web_utilities.xml_token_element_name(token), $cyc_properties_to_not_import$.getGlobalValue(), symbol_function(EQUAL), UNPROVIDED)) && com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_base_uri(import_parameters).isString()) && (NIL != string_utilities.substringP($str_alt278$cyc_com, com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_base_uri(import_parameters), UNPROVIDED, UNPROVIDED, UNPROVIDED))) {
                        return T;
                    } else {
                        if ((NIL != web_utilities.xml_token_element_nameP(token, rdf_utilities.rdf_name($$$Description))) && (NIL != web_utilities.xml_tag_attribute_value(token, rdf_utilities.rdf_name($$$nodeID), UNPROVIDED))) {
                            return T;
                        } else {
                            if ((NIL != web_utilities.xml_prefixed_name_p(web_utilities.xml_token_element_name(token))) && (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_reserved_namespace_p(web_utilities.xml_prefixed_name_namespace(web_utilities.xml_token_element_name(token))))) {
                                return T;
                            } else {
                                return NIL;
                            }
                        }
                    }
                }
            }
        }
    }

    public static SubLObject owl_non_instance_tokenP(final SubLObject token, final SubLObject import_parameters) {
        if (NIL != owl_to_cycl.owl_class_token_p(token)) {
            return T;
        }
        if (NIL != xml_parsing_utilities.xml_token_element_nameP(token, owl_to_cycl.$str87$_xml)) {
            return T;
        }
        if (NIL != xml_parsing_utilities.xml_doctype_tag_p(token)) {
            return T;
        }
        if (((NIL != member(xml_parsing_utilities.xml_token_element_name(token), owl_to_cycl.$cyc_properties_to_not_import$.getGlobalValue(), symbol_function(EQUAL), UNPROVIDED)) && owl_to_cycl.owl_import_parameters_base_uri(import_parameters).isString()) && (NIL != substringP(owl_to_cycl.$str294$cyc_com, owl_to_cycl.owl_import_parameters_base_uri(import_parameters), UNPROVIDED, UNPROVIDED, UNPROVIDED))) {
            return T;
        }
        if ((NIL != xml_parsing_utilities.xml_token_element_nameP(token, rdf_name(owl_to_cycl.$$$Description))) && (NIL != xml_parsing_utilities.xml_tag_attribute_value(token, rdf_name(owl_to_cycl.$$$nodeID), UNPROVIDED))) {
            return T;
        }
        if ((NIL != xml_parsing_utilities.xml_prefixed_name_p(xml_parsing_utilities.xml_token_element_name(token))) && (NIL != owl_to_cycl.owl_reserved_namespace_p(xml_parsing_utilities.xml_prefixed_name_namespace(xml_parsing_utilities.xml_token_element_name(token))))) {
            return T;
        }
        return NIL;
    }

    public static final SubLObject handle_non_target_owl_token_alt(SubLObject current_token) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject token_advance_spec = NIL;
                if (NIL != web_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name($$$Ontology))) {
                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                        format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt543$Skipping__S_to_close_tag, $str_alt223$__ }), current_token);
                        force_output(UNPROVIDED);
                    }
                    token_advance_spec = $CLOSE;
                } else {
                    if (NIL != web_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name($$$AllDifferent))) {
                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt543$Skipping__S_to_close_tag, $str_alt223$__ }), current_token);
                            force_output(UNPROVIDED);
                        }
                        token_advance_spec = $CLOSE;
                    } else {
                        if (NIL != web_utilities.xml_token_element_nameP(current_token, rdf_utilities.rdf_name($$$RDF))) {
                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt548$Skipping__S, $str_alt223$__ }), current_token);
                                force_output(UNPROVIDED);
                            }
                            token_advance_spec = $NEXT_NON_WHITESPACE_TOKEN;
                        } else {
                            if ((NIL != web_utilities.xml_declaration_p(current_token)) || (NIL != web_utilities.xml_doctype_tag_p(current_token))) {
                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt548$Skipping__S, $str_alt223$__ }), current_token);
                                    force_output(UNPROVIDED);
                                }
                                token_advance_spec = $NEXT_NON_WHITESPACE_TOKEN;
                            } else {
                                if (NIL == web_utilities.xml_tagP(current_token)) {
                                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                        format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt548$Skipping__S, $str_alt223$__ }), current_token);
                                        force_output(UNPROVIDED);
                                    }
                                    token_advance_spec = $NEXT_NON_WHITESPACE_TOKEN;
                                } else {
                                    if ((NIL != web_utilities.xml_tagP(current_token)) && (NIL == web_utilities.xml_prefixed_name_p(web_utilities.xml_token_element_name(current_token)))) {
                                        if (NIL != lower_case_p(string_utilities.first_char(web_utilities.xml_token_element_name(current_token)))) {
                                            if (NIL != owl_utilities.owl_warnP()) {
                                                Errors.warn($str_alt549$Skipping_locally_defined__S_to_cl, current_token);
                                            }
                                        }
                                        token_advance_spec = $CLOSE;
                                    } else {
                                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt548$Skipping__S, $str_alt223$__ }), current_token);
                                            force_output(UNPROVIDED);
                                        }
                                        token_advance_spec = $CLOSE;
                                    }
                                }
                            }
                        }
                    }
                }
                return token_advance_spec;
            }
        }
    }

    public static SubLObject handle_non_target_owl_token(final SubLObject current_token) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject token_advance_spec = NIL;
        if (NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name(owl_to_cycl.$$$Ontology))) {
            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str569$Skipping__S_to_close_tag, owl_to_cycl.$str239$__ }), current_token);
                force_output(UNPROVIDED);
            }
            token_advance_spec = $CLOSE;
        } else
            if (NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name(owl_to_cycl.$$$AllDifferent))) {
                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str569$Skipping__S_to_close_tag, owl_to_cycl.$str239$__ }), current_token);
                    force_output(UNPROVIDED);
                }
                token_advance_spec = $CLOSE;
            } else
                if (NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, rdf_name(owl_to_cycl.$$$RDF))) {
                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                        format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str574$Skipping__S, owl_to_cycl.$str239$__ }), current_token);
                        force_output(UNPROVIDED);
                    }
                    token_advance_spec = owl_to_cycl.$NEXT_NON_WHITESPACE_TOKEN;
                } else
                    if ((NIL != xml_parsing_utilities.xml_declaration_p(current_token)) || (NIL != xml_parsing_utilities.xml_doctype_tag_p(current_token))) {
                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str574$Skipping__S, owl_to_cycl.$str239$__ }), current_token);
                            force_output(UNPROVIDED);
                        }
                        token_advance_spec = owl_to_cycl.$NEXT_NON_WHITESPACE_TOKEN;
                    } else
                        if (NIL == xml_parsing_utilities.xml_tagP(current_token)) {
                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str574$Skipping__S, owl_to_cycl.$str239$__ }), current_token);
                                force_output(UNPROVIDED);
                            }
                            token_advance_spec = owl_to_cycl.$NEXT_NON_WHITESPACE_TOKEN;
                        } else
                            if ((NIL != xml_parsing_utilities.xml_tagP(current_token)) && (NIL == xml_parsing_utilities.xml_prefixed_name_p(xml_parsing_utilities.xml_token_element_name(current_token)))) {
                                if ((NIL != lower_case_p(first_char(xml_parsing_utilities.xml_token_element_name(current_token)))) && (NIL != owl_utilities.owl_warnP())) {
                                    Errors.warn(owl_to_cycl.$str575$Skipping_locally_defined__S_to_cl, current_token);
                                }
                                token_advance_spec = $CLOSE;
                            } else {
                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str574$Skipping__S, owl_to_cycl.$str239$__ }), current_token);
                                    force_output(UNPROVIDED);
                                }
                                token_advance_spec = $CLOSE;
                            }





        return token_advance_spec;
    }

    public static final SubLObject handle_term_info_token_alt(SubLObject new_term_info, SubLObject tokens, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject token_advance_spec = $NEXT_NON_WHITESPACE_TOKEN;
                SubLObject current_token = tokens.first();
                if (NIL != string_utilities.whitespace_stringP(current_token)) {
                    token_advance_spec = $NEXT_NON_WHITESPACE_TOKEN;
                } else {
                    if (NIL != web_utilities.xml_token_element_nameP(current_token, rdf_utilities.rdfs_name($$$label))) {
                        if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                            if (NIL != web_utilities.xml_empty_tagP(current_token)) {
                                Errors.error($str_alt247$Can_t_interpret_empty_label_token, current_token);
                            }
                        }
                        {
                            SubLObject lang_value = web_utilities.xml_tag_attribute_value(current_token, com.cyc.cycjava.cycl.owl.owl_to_cycl.xml_name($$$lang), NIL);
                            SubLObject language = decode_html_language_abbreviation(lang_value);
                            SubLObject label = second(tokens);
                            if ((NIL != lang_value) && (NIL == language)) {
                                if (NIL != owl_utilities.owl_warnP()) {
                                    Errors.warn($str_alt248$Can_t_decode_language_abbreviatio, lang_value);
                                }
                            }
                            com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_push(new_term_info, $LABEL, cons(label, language));
                        }
                        token_advance_spec = $CLOSE;
                    } else {
                        if (NIL != web_utilities.xml_token_element_nameP(current_token, rdf_utilities.rdf_name($$$type))) {
                            com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_push(new_term_info, $ISAS, com.cyc.cycjava.cycl.owl.owl_to_cycl.term_names_from_token(current_token, import_parameters));
                            token_advance_spec = $CLOSE;
                        } else {
                            if (NIL != web_utilities.xml_token_element_nameP(current_token, rdf_utilities.rdfs_name($$$comment))) {
                                com.cyc.cycjava.cycl.owl.owl_to_cycl.set_owl_term_info_comment(new_term_info, com.cyc.cycjava.cycl.owl.owl_to_cycl.next_noninitial_non_whitespace_xml_token(tokens));
                                token_advance_spec = $CLOSE;
                            } else {
                                if ((NIL != web_utilities.xml_token_element_nameP(current_token, rdf_utilities.rdfs_name($$$subClassOf))) && (NIL != web_utilities.xml_opening_tag_p(current_token))) {
                                    {
                                        SubLObject superclass = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_class_or_restriction(tokens.rest(), import_parameters);
                                        com.cyc.cycjava.cycl.owl.owl_to_cycl.add_owl_term_info_superclass(new_term_info, superclass);
                                    }
                                    token_advance_spec = $CLOSE;
                                } else {
                                    if (NIL != web_utilities.xml_token_element_nameP(current_token, rdf_utilities.rdfs_name($$$subClassOf))) {
                                        com.cyc.cycjava.cycl.owl.owl_to_cycl.add_owl_term_info_superclass(new_term_info, com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_term_reference(current_token, import_parameters));
                                        token_advance_spec = $NEXT_NON_WHITESPACE_TOKEN;
                                    } else {
                                        if ((NIL != web_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name($$$disjointWith))) && (NIL != web_utilities.xml_opening_tag_p(current_token))) {
                                            com.cyc.cycjava.cycl.owl.owl_to_cycl.add_owl_term_info_disjoint_class(new_term_info, com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_class_or_restriction(tokens.rest(), import_parameters));
                                            token_advance_spec = $CLOSE;
                                        } else {
                                            if (NIL != web_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name($$$disjointWith))) {
                                                com.cyc.cycjava.cycl.owl.owl_to_cycl.add_owl_term_info_disjoint_class(new_term_info, com.cyc.cycjava.cycl.owl.owl_to_cycl.process_owl_attribute_value(web_utilities.xml_tag_attribute_value(current_token, rdf_utilities.rdf_name($$$resource), UNPROVIDED)));
                                                token_advance_spec = $NEXT_NON_WHITESPACE_TOKEN;
                                            } else {
                                                if ((NIL != web_utilities.xml_opening_tag_p(current_token)) && (NIL != member(web_utilities.xml_token_element_name(current_token), list(owl_utilities.owl_name($$$equivalentClass), $$$owlEquivalentClass), symbol_function(EQUAL), UNPROVIDED))) {
                                                    {
                                                        SubLObject equivalent_class = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_class_or_restriction(tokens.rest(), import_parameters);
                                                        com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_push(new_term_info, $EQUIVALENT_CLASSES, equivalent_class);
                                                    }
                                                    token_advance_spec = $CLOSE;
                                                } else {
                                                    if (NIL != member(web_utilities.xml_token_element_name(current_token), list(owl_utilities.owl_name($$$equivalentClass), $$$owlEquivalentClass), symbol_function(EQUAL), UNPROVIDED)) {
                                                        {
                                                            SubLObject equivalent_class = com.cyc.cycjava.cycl.owl.owl_to_cycl.process_owl_attribute_value(web_utilities.xml_tag_attribute_value(current_token, rdf_utilities.rdf_name($$$resource), UNPROVIDED));
                                                            com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_push(new_term_info, $EQUIVALENT_CLASSES, equivalent_class);
                                                        }
                                                        token_advance_spec = $NEXT_NON_WHITESPACE_TOKEN;
                                                    } else {
                                                        if ((NIL != web_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name($$$complementOf))) && (NIL != web_utilities.xml_opening_tag_p(current_token))) {
                                                            com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_enter(new_term_info, $COMPLEMENT_CLASS, com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_class_or_restriction(tokens.rest(), import_parameters));
                                                            token_advance_spec = $CLOSE;
                                                        } else {
                                                            if (NIL != web_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name($$$complementOf))) {
                                                                {
                                                                    SubLObject complement_class = com.cyc.cycjava.cycl.owl.owl_to_cycl.process_owl_attribute_value(web_utilities.xml_tag_attribute_value(current_token, rdf_utilities.rdf_name($$$resource), UNPROVIDED));
                                                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_enter(new_term_info, $COMPLEMENT_CLASS, complement_class);
                                                                }
                                                                token_advance_spec = $NEXT_NON_WHITESPACE_TOKEN;
                                                            } else {
                                                                if ((NIL != web_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name($$$intersectionOf))) && (NIL == web_utilities.xml_empty_tagP(current_token))) {
                                                                    {
                                                                        SubLObject v_classes = NIL;
                                                                        tokens = tokens.rest();
                                                                        while (NIL == web_utilities.xml_closing_tokenP(owl_utilities.owl_name($$$intersectionOf), tokens.first())) {
                                                                            {
                                                                                SubLObject v_class = NIL;
                                                                                SubLObject first_token = tokens.first();
                                                                                if ((NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_class_token_p(first_token)) || (NIL != web_utilities.xml_token_element_nameP(first_token, owl_utilities.owl_name($$$Restriction)))) {
                                                                                    v_class = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_class_or_restriction(tokens, import_parameters);
                                                                                } else {
                                                                                    if (NIL != web_utilities.xml_token_element_nameP(first_token, rdf_utilities.rdf_name($$$Description))) {
                                                                                        v_class = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_name_from_token(first_token, import_parameters);
                                                                                    }
                                                                                }
                                                                                if (NIL != v_class) {
                                                                                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                                        format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt556$Read_one_intersection_element___S, $str_alt223$__ }), v_class);
                                                                                        force_output(UNPROVIDED);
                                                                                    }
                                                                                    v_classes = cons(v_class, v_classes);
                                                                                }
                                                                            }
                                                                            tokens = web_utilities.advance_xml_tokens_to_end_of_element(tokens);
                                                                        } 
                                                                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt557$Intersection___S, $str_alt223$__ }), v_classes);
                                                                            force_output(UNPROVIDED);
                                                                        }
                                                                        com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_enter(new_term_info, $INTERSECTION_OF, v_classes);
                                                                    }
                                                                    token_advance_spec = $CLOSE;
                                                                } else {
                                                                    if ((NIL != web_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name($$$intersectionOf))) && (NIL != web_utilities.xml_tag_attribute_value(current_token, rdf_utilities.rdf_name($$$nodeID), UNPROVIDED))) {
                                                                        {
                                                                            SubLObject node_id = web_utilities.xml_tag_attribute_value(current_token, rdf_utilities.rdf_name($$$nodeID), UNPROVIDED);
                                                                            SubLObject v_classes = list($NODE_ID, node_id);
                                                                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                                format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt557$Intersection___S, $str_alt223$__ }), v_classes);
                                                                                force_output(UNPROVIDED);
                                                                            }
                                                                            com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_enter(new_term_info, $INTERSECTION_OF, v_classes);
                                                                        }
                                                                        token_advance_spec = $CLOSE;
                                                                    } else {
                                                                        if ((NIL != web_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name($$$unionOf))) && (NIL == web_utilities.xml_empty_tagP(current_token))) {
                                                                            {
                                                                                SubLObject v_classes = NIL;
                                                                                tokens = tokens.rest();
                                                                                while (NIL == web_utilities.xml_closing_tokenP(owl_utilities.owl_name($$$unionOf), tokens.first())) {
                                                                                    {
                                                                                        SubLObject v_class = NIL;
                                                                                        SubLObject first_token = tokens.first();
                                                                                        if ((NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_class_token_p(first_token)) || (NIL != web_utilities.xml_token_element_nameP(first_token, owl_utilities.owl_name($$$Restriction)))) {
                                                                                            v_class = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_class_or_restriction(tokens, import_parameters);
                                                                                        } else {
                                                                                            if (NIL != web_utilities.xml_token_element_nameP(first_token, rdf_utilities.rdf_name($$$Description))) {
                                                                                                v_class = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_name_from_token(first_token, import_parameters);
                                                                                            }
                                                                                        }
                                                                                        if (NIL != v_class) {
                                                                                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                                                format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt558$Read_one_union_element___S, $str_alt223$__ }), v_class);
                                                                                                force_output(UNPROVIDED);
                                                                                            }
                                                                                            v_classes = cons(v_class, v_classes);
                                                                                        }
                                                                                    }
                                                                                    tokens = web_utilities.advance_xml_tokens_to_end_of_element(tokens);
                                                                                } 
                                                                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt559$Union___S, $str_alt223$__ }), v_classes);
                                                                                    force_output(UNPROVIDED);
                                                                                }
                                                                                com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_enter(new_term_info, $UNION_OF, v_classes);
                                                                            }
                                                                            token_advance_spec = $CLOSE;
                                                                        } else {
                                                                            if (NIL != web_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name($$$oneOf))) {
                                                                                {
                                                                                    SubLObject enumeration = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_enumeration(tokens, import_parameters);
                                                                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_enter(new_term_info, $ENUMERATED_INSTANCES, enumeration);
                                                                                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                                        format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt560$Read_enumerated_instances___S, $str_alt223$__ }), enumeration);
                                                                                        force_output(UNPROVIDED);
                                                                                    }
                                                                                }
                                                                                token_advance_spec = $CLOSE;
                                                                            } else {
                                                                                if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.cyc_token_with_nameP(current_token, $$$guid, import_parameters)) {
                                                                                    com.cyc.cycjava.cycl.owl.owl_to_cycl.handle_cyc_guid(new_term_info, tokens);
                                                                                    token_advance_spec = $CLOSE;
                                                                                } else {
                                                                                    if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.cyc_token_with_nameP(current_token, $$$externalID, import_parameters)) {
                                                                                        com.cyc.cycjava.cycl.owl.owl_to_cycl.handle_cyc_external_id(new_term_info, tokens);
                                                                                        token_advance_spec = $CLOSE;
                                                                                    } else {
                                                                                        if (NIL != web_utilities.xml_tagP(current_token)) {
                                                                                            com.cyc.cycjava.cycl.owl.owl_to_cycl.handle_property_value_pair(new_term_info, current_token, tokens, import_parameters);
                                                                                            token_advance_spec = $CLOSE;
                                                                                        } else {
                                                                                            if (NIL != owl_utilities.owl_warnP()) {
                                                                                                Errors.warn($str_alt277$Ignoring_unrecognized_token___S, current_token);
                                                                                            }
                                                                                            token_advance_spec = $NEXT_NON_WHITESPACE_TOKEN;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return token_advance_spec;
            }
        }
    }

    public static SubLObject handle_term_info_token(final SubLObject new_term_info, SubLObject tokens, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject token_advance_spec = owl_to_cycl.$NEXT_NON_WHITESPACE_TOKEN;
        final SubLObject current_token = tokens.first();
        if (NIL != whitespace_stringP(current_token)) {
            token_advance_spec = owl_to_cycl.$NEXT_NON_WHITESPACE_TOKEN;
        } else
            if (NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, rdfs_name(owl_to_cycl.$$$label))) {
                if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL != xml_parsing_utilities.xml_empty_tagP(current_token))) {
                    Errors.error(owl_to_cycl.$str263$Can_t_interpret_empty_label_token, current_token);
                }
                final SubLObject lang_value = xml_parsing_utilities.xml_tag_attribute_value(current_token, owl_to_cycl.xml_name(owl_to_cycl.$$$lang), NIL);
                final SubLObject language = (NIL != lang_value) ? decode_html_language_abbreviation(lang_value) : owl_to_cycl.$$EnglishLanguage;
                final SubLObject label = second(tokens);
                if (((NIL != lang_value) && (NIL == language)) && (NIL != owl_utilities.owl_warnP())) {
                    Errors.warn(owl_to_cycl.$str264$Can_t_decode_language_abbreviatio, lang_value);
                }
                owl_to_cycl.owl_term_info_plist_push(new_term_info, $LABEL, cons(label, language));
                token_advance_spec = $CLOSE;
            } else
                if (NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, rdf_name(owl_to_cycl.$$$type))) {
                    owl_to_cycl.owl_term_info_plist_push(new_term_info, $ISAS, owl_to_cycl.term_names_from_token(current_token, import_parameters));
                    token_advance_spec = $CLOSE;
                } else
                    if (NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, rdfs_name(owl_to_cycl.$$$comment))) {
                        owl_to_cycl.set_owl_term_info_comment(new_term_info, owl_to_cycl.next_noninitial_non_whitespace_xml_token(tokens));
                        token_advance_spec = $CLOSE;
                    } else
                        if ((NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, rdfs_name(owl_to_cycl.$$$subClassOf))) && (NIL != xml_parsing_utilities.xml_opening_tag_p(current_token))) {
                            final SubLObject superclass = owl_to_cycl.read_owl_class_or_restriction(tokens.rest(), import_parameters);
                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str577$Read_superclass___S, owl_to_cycl.$str239$__ }), superclass);
                                force_output(UNPROVIDED);
                            }
                            owl_to_cycl.add_owl_term_info_superclass(new_term_info, superclass);
                            token_advance_spec = $CLOSE;
                        } else
                            if (NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, rdfs_name(owl_to_cycl.$$$subClassOf))) {
                                owl_to_cycl.add_owl_term_info_superclass(new_term_info, owl_to_cycl.read_owl_term_reference(current_token, import_parameters));
                                token_advance_spec = owl_to_cycl.$NEXT_NON_WHITESPACE_TOKEN;
                            } else
                                if ((NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name(owl_to_cycl.$$$disjointWith))) && (NIL != xml_parsing_utilities.xml_opening_tag_p(current_token))) {
                                    owl_to_cycl.add_owl_term_info_disjoint_class(new_term_info, owl_to_cycl.read_owl_class_or_restriction(tokens.rest(), import_parameters));
                                    token_advance_spec = $CLOSE;
                                } else
                                    if (NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name(owl_to_cycl.$$$disjointWith))) {
                                        owl_to_cycl.add_owl_term_info_disjoint_class(new_term_info, owl_to_cycl.process_owl_attribute_value(xml_parsing_utilities.xml_tag_attribute_value(current_token, rdf_name(owl_to_cycl.$$$resource), UNPROVIDED)));
                                        token_advance_spec = owl_to_cycl.$NEXT_NON_WHITESPACE_TOKEN;
                                    } else
                                        if ((NIL != xml_parsing_utilities.xml_opening_tag_p(current_token)) && (NIL != member(xml_parsing_utilities.xml_token_element_name(current_token), list(owl_utilities.owl_name(owl_to_cycl.$$$equivalentClass), owl_to_cycl.$$$owlEquivalentClass), symbol_function(EQUAL), UNPROVIDED))) {
                                            final SubLObject equivalent_class = owl_to_cycl.read_owl_class_or_restriction(tokens.rest(), import_parameters);
                                            owl_to_cycl.owl_term_info_plist_push(new_term_info, $EQUIVALENT_CLASSES, equivalent_class);
                                            token_advance_spec = $CLOSE;
                                        } else
                                            if (NIL != member(xml_parsing_utilities.xml_token_element_name(current_token), list(owl_utilities.owl_name(owl_to_cycl.$$$equivalentClass), owl_to_cycl.$$$owlEquivalentClass), symbol_function(EQUAL), UNPROVIDED)) {
                                                final SubLObject equivalent_class = owl_to_cycl.process_owl_attribute_value(xml_parsing_utilities.xml_tag_attribute_value(current_token, rdf_name(owl_to_cycl.$$$resource), UNPROVIDED));
                                                owl_to_cycl.owl_term_info_plist_push(new_term_info, $EQUIVALENT_CLASSES, equivalent_class);
                                                token_advance_spec = owl_to_cycl.$NEXT_NON_WHITESPACE_TOKEN;
                                            } else
                                                if ((NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name(owl_to_cycl.$$$complementOf))) && (NIL != xml_parsing_utilities.xml_opening_tag_p(current_token))) {
                                                    owl_to_cycl.owl_term_info_plist_enter(new_term_info, $COMPLEMENT_CLASS, owl_to_cycl.read_owl_class_or_restriction(tokens.rest(), import_parameters));
                                                    token_advance_spec = $CLOSE;
                                                } else
                                                    if (NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name(owl_to_cycl.$$$complementOf))) {
                                                        final SubLObject complement_class = owl_to_cycl.process_owl_attribute_value(xml_parsing_utilities.xml_tag_attribute_value(current_token, rdf_name(owl_to_cycl.$$$resource), UNPROVIDED));
                                                        owl_to_cycl.owl_term_info_plist_enter(new_term_info, $COMPLEMENT_CLASS, complement_class);
                                                        token_advance_spec = owl_to_cycl.$NEXT_NON_WHITESPACE_TOKEN;
                                                    } else
                                                        if ((NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name(owl_to_cycl.$$$intersectionOf))) && (NIL == xml_parsing_utilities.xml_empty_tagP(current_token))) {
                                                            SubLObject v_classes = NIL;
                                                            SubLObject v_class;
                                                            SubLObject first_token;
                                                            for (tokens = tokens.rest(); NIL == xml_parsing_utilities.xml_closing_tokenP(owl_utilities.owl_name(owl_to_cycl.$$$intersectionOf), tokens.first()); tokens = xml_parsing_utilities.advance_xml_tokens_to_end_of_element(tokens)) {
                                                                v_class = NIL;
                                                                first_token = tokens.first();
                                                                if ((NIL != owl_to_cycl.owl_class_token_p(first_token)) || (NIL != xml_parsing_utilities.xml_token_element_nameP(first_token, owl_utilities.owl_name(owl_to_cycl.$$$Restriction)))) {
                                                                    v_class = owl_to_cycl.read_owl_class_or_restriction(tokens, import_parameters);
                                                                } else
                                                                    if (NIL != xml_parsing_utilities.xml_token_element_nameP(first_token, rdf_name(owl_to_cycl.$$$Description))) {
                                                                        v_class = owl_to_cycl.owl_external_name_from_token(first_token, import_parameters);
                                                                    }

                                                                if (NIL != v_class) {
                                                                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                        format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str583$Read_one_intersection_element___S, owl_to_cycl.$str239$__ }), v_class);
                                                                        force_output(UNPROVIDED);
                                                                    }
                                                                    v_classes = cons(v_class, v_classes);
                                                                }
                                                            }
                                                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str584$Intersection___S, owl_to_cycl.$str239$__ }), v_classes);
                                                                force_output(UNPROVIDED);
                                                            }
                                                            owl_to_cycl.owl_term_info_plist_enter(new_term_info, $INTERSECTION_OF, v_classes);
                                                            token_advance_spec = $CLOSE;
                                                        } else
                                                            if ((NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name(owl_to_cycl.$$$intersectionOf))) && (NIL != xml_parsing_utilities.xml_tag_attribute_value(current_token, rdf_name(owl_to_cycl.$$$nodeID), UNPROVIDED))) {
                                                                final SubLObject node_id = xml_parsing_utilities.xml_tag_attribute_value(current_token, rdf_name(owl_to_cycl.$$$nodeID), UNPROVIDED);
                                                                final SubLObject v_classes2 = list($NODE_ID, node_id);
                                                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str584$Intersection___S, owl_to_cycl.$str239$__ }), v_classes2);
                                                                    force_output(UNPROVIDED);
                                                                }
                                                                owl_to_cycl.owl_term_info_plist_enter(new_term_info, $INTERSECTION_OF, v_classes2);
                                                                token_advance_spec = $CLOSE;
                                                            } else
                                                                if ((NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name(owl_to_cycl.$$$unionOf))) && (NIL == xml_parsing_utilities.xml_empty_tagP(current_token))) {
                                                                    SubLObject v_classes = NIL;
                                                                    SubLObject v_class;
                                                                    SubLObject first_token;
                                                                    for (tokens = tokens.rest(); NIL == xml_parsing_utilities.xml_closing_tokenP(owl_utilities.owl_name(owl_to_cycl.$$$unionOf), tokens.first()); tokens = xml_parsing_utilities.advance_xml_tokens_to_end_of_element(tokens)) {
                                                                        v_class = NIL;
                                                                        first_token = tokens.first();
                                                                        if ((NIL != owl_to_cycl.owl_class_token_p(first_token)) || (NIL != xml_parsing_utilities.xml_token_element_nameP(first_token, owl_utilities.owl_name(owl_to_cycl.$$$Restriction)))) {
                                                                            v_class = owl_to_cycl.read_owl_class_or_restriction(tokens, import_parameters);
                                                                        } else
                                                                            if (NIL != xml_parsing_utilities.xml_token_element_nameP(first_token, rdf_name(owl_to_cycl.$$$Description))) {
                                                                                v_class = owl_to_cycl.owl_external_name_from_token(first_token, import_parameters);
                                                                            }

                                                                        if (NIL != v_class) {
                                                                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str585$Read_one_union_element___S, owl_to_cycl.$str239$__ }), v_class);
                                                                                force_output(UNPROVIDED);
                                                                            }
                                                                            v_classes = cons(v_class, v_classes);
                                                                        }
                                                                    }
                                                                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                        format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str586$Union___S, owl_to_cycl.$str239$__ }), v_classes);
                                                                        force_output(UNPROVIDED);
                                                                    }
                                                                    owl_to_cycl.owl_term_info_plist_enter(new_term_info, $UNION_OF, v_classes);
                                                                    token_advance_spec = $CLOSE;
                                                                } else
                                                                    if (NIL != xml_parsing_utilities.xml_token_element_nameP(current_token, owl_utilities.owl_name(owl_to_cycl.$$$oneOf))) {
                                                                        final SubLObject enumeration = owl_to_cycl.read_owl_enumeration(tokens, import_parameters);
                                                                        owl_to_cycl.owl_term_info_plist_enter(new_term_info, $ENUMERATED_INSTANCES, enumeration);
                                                                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str587$Read_enumerated_instances___S, owl_to_cycl.$str239$__ }), enumeration);
                                                                            force_output(UNPROVIDED);
                                                                        }
                                                                        token_advance_spec = $CLOSE;
                                                                    } else
                                                                        if (NIL != owl_to_cycl.cyc_token_with_nameP(current_token, owl_to_cycl.$$$guid, import_parameters)) {
                                                                            owl_to_cycl.handle_cyc_guid(new_term_info, tokens);
                                                                            token_advance_spec = $CLOSE;
                                                                        } else
                                                                            if (NIL != owl_to_cycl.cyc_token_with_nameP(current_token, owl_to_cycl.$$$externalID, import_parameters)) {
                                                                                owl_to_cycl.handle_cyc_external_id(new_term_info, tokens);
                                                                                token_advance_spec = $CLOSE;
                                                                            } else
                                                                                if (NIL != xml_parsing_utilities.xml_tagP(current_token)) {
                                                                                    owl_to_cycl.handle_property_value_pair(new_term_info, current_token, tokens, import_parameters);
                                                                                    token_advance_spec = $CLOSE;
                                                                                } else {
                                                                                    if (NIL != owl_utilities.owl_warnP()) {
                                                                                        Errors.warn(owl_to_cycl.$str293$Ignoring_unrecognized_token___S, current_token);
                                                                                    }
                                                                                    token_advance_spec = owl_to_cycl.$NEXT_NON_WHITESPACE_TOKEN;
                                                                                }


















        return token_advance_spec;
    }

    public static final SubLObject handle_cyc_guid_alt(SubLObject new_term_info, SubLObject tokens) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject next_token = second(tokens);
                SubLObject guid = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_value_from_string(next_token, $$$string);
                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt267$__Noting_Cyc_guid_for__S_S__, $str_alt223$__ }), guid, new_term_info);
                    force_output(UNPROVIDED);
                }
                com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_enter(new_term_info, $GUID, guid);
            }
            return NIL;
        }
    }

    public static SubLObject handle_cyc_guid(final SubLObject new_term_info, final SubLObject tokens) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject next_token = second(tokens);
        final SubLObject guid = owl_to_cycl.owl_value_from_string(next_token, owl_to_cycl.$$$string);
        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str283$__Noting_Cyc_guid_for__S_S__, owl_to_cycl.$str239$__ }), guid, new_term_info);
            force_output(UNPROVIDED);
        }
        owl_to_cycl.owl_term_info_plist_enter(new_term_info, $GUID, guid);
        return NIL;
    }

    public static final SubLObject handle_cyc_external_id_alt(SubLObject new_term_info, SubLObject tokens) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject next_token = second(tokens);
                SubLObject externalid = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_value_from_string(next_token, $$$string);
                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt270$__Noting_Cyc_externalID_for__S_S_, $str_alt223$__ }), externalid, new_term_info);
                    force_output(UNPROVIDED);
                }
                com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_enter(new_term_info, $EXTERNALID, externalid);
            }
            return NIL;
        }
    }

    public static SubLObject handle_cyc_external_id(final SubLObject new_term_info, final SubLObject tokens) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject next_token = second(tokens);
        final SubLObject externalid = owl_to_cycl.owl_value_from_string(next_token, owl_to_cycl.$$$string);
        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str286$__Noting_Cyc_externalID_for__S_S_, owl_to_cycl.$str239$__ }), externalid, new_term_info);
            force_output(UNPROVIDED);
        }
        owl_to_cycl.owl_term_info_plist_enter(new_term_info, $EXTERNALID, externalid);
        return NIL;
    }

    public static final SubLObject handle_property_value_pair_alt(SubLObject new_term_info, SubLObject current_token, SubLObject tokens, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject property_name = web_utilities.xml_token_element_name(current_token);
                SubLObject value_name = (NIL != web_utilities.xml_empty_tagP(current_token)) ? ((SubLObject) (com.cyc.cycjava.cycl.owl.owl_to_cycl.term_names_from_token(current_token, import_parameters))) : NIL;
                SubLObject value = NIL;
                if (NIL != value_name) {
                    value = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_of_type(value_name, $$Thing, import_parameters);
                } else {
                    if (NIL != web_utilities.xml_closing_tag_p(second(tokens))) {
                        value = $str_alt85$;
                    } else {
                        if (NIL != web_utilities.xml_tagP(second(tokens))) {
                            {
                                SubLObject term_info = nth_value_step_2(nth_value_step_1(ONE_INTEGER), com.cyc.cycjava.cycl.owl.owl_to_cycl.read_one_instance_info_from_owl_tokens(tokens.rest(), import_parameters));
                                SubLTrampolineFile.checkType(term_info, OWL_TERM_INFO_P);
                                value = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_lookup(term_info, $EXTERNAL_NAME, UNPROVIDED);
                            }
                        } else {
                            {
                                SubLObject datatype = com.cyc.cycjava.cycl.owl.owl_to_cycl.process_owl_attribute_value(web_utilities.xml_tag_attribute_value(current_token, rdf_utilities.rdf_name($$$datatype), UNPROVIDED));
                                SubLObject next_token = second(tokens);
                                value = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_value_from_string(next_token, datatype);
                            }
                        }
                    }
                }
                if (NIL == value) {
                    Errors.warn($str_alt561$Couldn_t_determine_value_from__S_, current_token, second(tokens));
                } else {
                    if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.cyc_token_with_nameP(current_token, $$$isa, import_parameters)) {
                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt274$__Noting__isa__S__S___, $str_alt223$__ }), new_term_info, value);
                            force_output(UNPROVIDED);
                        }
                        com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_push(new_term_info, $ISAS, value);
                    } else {
                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt275$__Noting__S__S__, $str_alt223$__ }), property_name, value);
                            force_output(UNPROVIDED);
                        }
                        com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_push(new_term_info, $MY_PRED_VALUES, list(property_name, value));
                    }
                }
            }
            return NIL;
        }
    }

    public static SubLObject handle_property_value_pair(final SubLObject new_term_info, final SubLObject current_token, final SubLObject tokens, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject property_name = xml_parsing_utilities.xml_token_element_name(current_token);
        final SubLObject value_name = (NIL != xml_parsing_utilities.xml_empty_tagP(current_token)) ? owl_to_cycl.term_names_from_token(current_token, import_parameters) : NIL;
        SubLObject value = NIL;
        if (NIL != value_name) {
            value = owl_to_cycl.owl_find_or_create_term_of_type(value_name, owl_to_cycl.$$Thing, import_parameters);
        } else
            if (NIL != xml_parsing_utilities.xml_closing_tag_p(second(tokens))) {
                value = owl_to_cycl.$str92$;
            } else
                if (NIL != xml_parsing_utilities.xml_tagP(second(tokens))) {
                    final SubLObject term_info = nth_value_step_2(nth_value_step_1(ONE_INTEGER), owl_to_cycl.read_one_instance_info_from_owl_tokens(tokens.rest(), import_parameters));
                    assert NIL != owl_to_cycl.owl_term_info_p(term_info) : "! owl_to_cycl.owl_term_info_p(term_info) " + ("owl_to_cycl.owl_term_info_p(term_info) " + "CommonSymbols.NIL != owl_to_cycl.owl_term_info_p(term_info) ") + term_info;
                    value = owl_to_cycl.owl_term_info_plist_lookup(term_info, $EXTERNAL_NAME, UNPROVIDED);
                } else {
                    final SubLObject datatype = owl_to_cycl.process_owl_attribute_value(xml_parsing_utilities.xml_tag_attribute_value(current_token, rdf_name(owl_to_cycl.$$$datatype), UNPROVIDED));
                    final SubLObject next_token = second(tokens);
                    value = owl_to_cycl.owl_value_from_string(next_token, datatype);
                }


        if (NIL == value) {
            Errors.warn(owl_to_cycl.$str588$Couldn_t_determine_value_from__S_, current_token, second(tokens));
        } else
            if (NIL != owl_to_cycl.cyc_token_with_nameP(current_token, owl_to_cycl.$$$isa, import_parameters)) {
                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str290$__Noting__isa__S__S___, owl_to_cycl.$str239$__ }), new_term_info, value);
                    force_output(UNPROVIDED);
                }
                owl_to_cycl.owl_term_info_plist_push(new_term_info, $ISAS, value);
            } else {
                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str291$__Noting__S__S__, owl_to_cycl.$str239$__ }), property_name, value);
                    force_output(UNPROVIDED);
                }
                owl_to_cycl.owl_term_info_plist_push(new_term_info, owl_to_cycl.$MY_PRED_VALUES, list(property_name, value));
            }

        return NIL;
    }

    public static final SubLObject read_owl_term_reference_alt(SubLObject token, SubLObject import_parameters) {
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.term_names_from_token(token, import_parameters);
    }

    public static SubLObject read_owl_term_reference(final SubLObject token, final SubLObject import_parameters) {
        return owl_to_cycl.term_names_from_token(token, import_parameters);
    }

    public static final SubLObject owl_import_parameters_class_prefix_alt(SubLObject import_parameters) {
        return string_utilities.upcase_leading(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_constant_prefix(import_parameters));
    }

    public static SubLObject owl_import_parameters_class_prefix(final SubLObject import_parameters) {
        return upcase_leading(owl_to_cycl.owl_import_parameters_constant_prefix(import_parameters));
    }

    public static final SubLObject term_names_from_token_alt(SubLObject token, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject class_prefix = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_class_prefix(import_parameters);
                SubLObject about_value = web_utilities.xml_tag_attribute_value(token, rdf_utilities.rdf_name($$$about), UNPROVIDED);
                SubLObject id_value = web_utilities.xml_tag_attribute_value(token, rdf_utilities.rdf_name($$$ID), UNPROVIDED);
                SubLObject node_id_value = web_utilities.xml_tag_attribute_value(token, rdf_utilities.rdf_name($$$nodeID), UNPROVIDED);
                SubLObject resource_value = web_utilities.xml_tag_attribute_value(token, rdf_utilities.rdf_name($$$resource), UNPROVIDED);
                SubLObject external_name = NIL;
                SubLObject cyc_name = NIL;
                if (NIL != about_value) {
                    if ((NIL != web_utilities.xml_token_element_nameP(token, rdf_utilities.rdf_name($$$Description))) && ((NIL != string_utilities.alphanumeric_stringP(about_value)) || (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.lookup_node_id_reference(about_value)))) {
                        external_name = list($NODE_ID, about_value);
                    } else {
                        external_name = com.cyc.cycjava.cycl.owl.owl_to_cycl.process_owl_attribute_value(about_value);
                    }
                } else {
                    if (NIL != id_value) {
                        external_name = com.cyc.cycjava.cycl.owl.owl_to_cycl.process_owl_attribute_value(id_value);
                    } else {
                        if (NIL != node_id_value) {
                            external_name = list($NODE_ID, node_id_value);
                        } else {
                            if (NIL != resource_value) {
                                external_name = com.cyc.cycjava.cycl.owl.owl_to_cycl.process_owl_attribute_value(resource_value);
                            } else {
                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt562$Apparently_anonymous_instance___S, $str_alt223$__ }), token);
                                    force_output(UNPROVIDED);
                                }
                            }
                        }
                    }
                }
                if ((NIL != external_name) && (NIL == com.cyc.cycjava.cycl.owl.owl_to_cycl.node_id_specification_p(external_name))) {
                    cyc_name = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_class_cyc_name_from_external_name(external_name, class_prefix);
                }
                return values(external_name, cyc_name);
            }
        }
    }

    public static SubLObject term_names_from_token(final SubLObject token, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject class_prefix = owl_to_cycl.owl_import_parameters_class_prefix(import_parameters);
        final SubLObject about_value = xml_parsing_utilities.xml_tag_attribute_value(token, rdf_name(owl_to_cycl.$$$about), UNPROVIDED);
        final SubLObject id_value = xml_parsing_utilities.xml_tag_attribute_value(token, rdf_name(owl_to_cycl.$$$ID), UNPROVIDED);
        final SubLObject node_id_value = xml_parsing_utilities.xml_tag_attribute_value(token, rdf_name(owl_to_cycl.$$$nodeID), UNPROVIDED);
        final SubLObject resource_value = xml_parsing_utilities.xml_tag_attribute_value(token, rdf_name(owl_to_cycl.$$$resource), UNPROVIDED);
        SubLObject external_name = NIL;
        SubLObject cyc_name = NIL;
        if (NIL != about_value) {
            if ((NIL != xml_parsing_utilities.xml_token_element_nameP(token, rdf_name(owl_to_cycl.$$$Description))) && ((NIL != alphanumeric_stringP(about_value)) || (NIL != owl_to_cycl.lookup_node_id_reference(about_value)))) {
                external_name = list($NODE_ID, about_value);
            } else {
                external_name = owl_to_cycl.process_owl_attribute_value(about_value);
            }
        } else
            if (NIL != id_value) {
                external_name = owl_to_cycl.process_owl_attribute_value(id_value);
            } else
                if (NIL != node_id_value) {
                    external_name = list($NODE_ID, node_id_value);
                } else
                    if (NIL != resource_value) {
                        external_name = owl_to_cycl.process_owl_attribute_value(resource_value);
                    } else
                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str589$Apparently_anonymous_instance___S, owl_to_cycl.$str239$__ }), token);
                            force_output(UNPROVIDED);
                        }




        if ((NIL != external_name) && (NIL == owl_to_cycl.node_id_specification_p(external_name))) {
            cyc_name = owl_to_cycl.owl_class_cyc_name_from_external_name(external_name, class_prefix);
        }
        return values(external_name, cyc_name);
    }

    public static final SubLObject owl_external_name_from_token_alt(SubLObject token, SubLObject import_parameters) {
        return nth_value_step_2(nth_value_step_1(ZERO_INTEGER), com.cyc.cycjava.cycl.owl.owl_to_cycl.term_names_from_token(token, import_parameters));
    }

    public static SubLObject owl_external_name_from_token(final SubLObject token, final SubLObject import_parameters) {
        return nth_value_step_2(nth_value_step_1(ZERO_INTEGER), owl_to_cycl.term_names_from_token(token, import_parameters));
    }

    public static final SubLObject owl_class_cyc_name_from_external_name_alt(SubLObject external_name, SubLObject class_prefix) {
        {
            SubLObject cyc_name_base = (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.nonlocal_owl_term_reference_p(external_name)) ? ((SubLObject) (third(external_name))) : external_name;
            SubLObject clean_name = string_utilities.char_subst(CHAR_hyphen, CHAR_period, cconcatenate(class_prefix, string_utilities.upcase_leading(cyc_name_base)));
            if (NIL != lower_case_p(string_utilities.first_char(clean_name))) {
                clean_name = string_utilities.upcase_leading(clean_name);
            }
            return clean_name;
        }
    }

    public static SubLObject owl_class_cyc_name_from_external_name(final SubLObject external_name, final SubLObject class_prefix) {
        final SubLObject cyc_name_base = (NIL != owl_to_cycl.nonlocal_owl_term_reference_p(external_name)) ? third(external_name) : external_name;
        SubLObject clean_name = char_subst(CHAR_hyphen, CHAR_period, cconcatenate(class_prefix, upcase_leading(cyc_name_base)));
        if (NIL != lower_case_p(first_char(clean_name))) {
            clean_name = upcase_leading(clean_name);
        }
        return clean_name;
    }

    public static final SubLObject nonlocal_owl_term_reference_p_alt(SubLObject v_object) {
        return pattern_match.tree_matches_pattern(v_object, $list_alt563);
    }

    public static SubLObject nonlocal_owl_term_reference_p(final SubLObject v_object) {
        return tree_matches_pattern(v_object, owl_to_cycl.$list590);
    }

    public static SubLObject resolve_nonlocal_owl_term_reference(final SubLObject external_name, final SubLObject type, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str591$Finding_or_creating_nonlocal_term, owl_to_cycl.$str239$__ }));
            force_output(UNPROVIDED);
        }
        SubLObject current;
        final SubLObject datum = current = external_name.rest();
        SubLObject uri = NIL;
        SubLObject name = NIL;
        destructuring_bind_must_consp(current, datum, owl_to_cycl.$list400);
        uri = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, datum, owl_to_cycl.$list400);
        name = current.first();
        current = current.rest();
        if (NIL == current) {
            final SubLObject ontology = owl_to_cycl.find_or_create_owl_ontology_for_uri(uri, import_parameters, UNPROVIDED);
            final SubLObject v_term = owl_to_cycl.owl_find_or_create_term_of_type_in_ontology(name, type, ontology, import_parameters, UNPROVIDED);
            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str592$Result___S, owl_to_cycl.$str239$__ }), v_term);
                force_output(UNPROVIDED);
            }
            return v_term;
        }
        cdestructuring_bind_error(datum, owl_to_cycl.$list400);
        return NIL;
    }

    public static final SubLObject read_owl_class_or_restriction_alt(SubLObject tokens, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject next_token = tokens.first();
                SubLObject v_class = NIL;
                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt564$Reading_OWL_class_or_restriction_, $str_alt223$__ }), list_utilities.first_n(FOUR_INTEGER, tokens));
                    force_output(UNPROVIDED);
                }
                if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_class_token_p(next_token)) {
                    v_class = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_class(tokens, import_parameters);
                } else {
                    if (NIL != web_utilities.xml_token_element_nameP(next_token, owl_utilities.owl_name($$$Restriction))) {
                        thread.resetMultipleValues();
                        {
                            SubLObject property = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_restriction(tokens, import_parameters);
                            SubLObject type = thread.secondMultipleValue();
                            SubLObject value = thread.thirdMultipleValue();
                            thread.resetMultipleValues();
                            {
                                SubLObject restriction = list($RESTRICTION, property, type, value);
                                v_class = restriction;
                            }
                        }
                    } else {
                        if (NIL != web_utilities.xml_empty_tagP(next_token)) {
                            v_class = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_external_name_from_token(next_token, import_parameters);
                        } else {
                            Errors.warn($str_alt566$Can_t_read_class_starting_with__S, next_token);
                        }
                    }
                }
                return v_class;
            }
        }
    }

    public static SubLObject read_owl_class_or_restriction(final SubLObject tokens, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject next_token = tokens.first();
        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str593$Reading_OWL_class_or_restriction_, owl_to_cycl.$str239$__ }), first_n(FOUR_INTEGER, tokens));
            force_output(UNPROVIDED);
        }
        if (NIL != owl_to_cycl.owl_class_token_p(next_token)) {
            return owl_to_cycl.read_owl_class(tokens, import_parameters);
        }
        if (NIL != xml_parsing_utilities.xml_token_element_nameP(next_token, owl_utilities.owl_name(owl_to_cycl.$$$Restriction))) {
            thread.resetMultipleValues();
            final SubLObject property = owl_to_cycl.read_owl_restriction(tokens, import_parameters);
            final SubLObject type = thread.secondMultipleValue();
            final SubLObject value = thread.thirdMultipleValue();
            final SubLObject v_class = thread.fourthMultipleValue();
            thread.resetMultipleValues();
            return list($RESTRICTION, property, type, value, v_class);
        }
        if (NIL != xml_parsing_utilities.xml_empty_tagP(next_token)) {
            return owl_to_cycl.owl_external_name_from_token(next_token, import_parameters);
        }
        Errors.warn(owl_to_cycl.$str595$Can_t_read_class_starting_with__S, next_token);
        return NIL;
    }

    /**
     * Finds the restriction defined by an <owl:Restriction> element.
     *
     * @param TOKENS
     * 		listp; a list of strings that are XML tokens
     * @return 0 PROPERTY owl-external-value-specification-p;
     * @return 1 TYPE
     * @return 2 VALUE
     */
    @LispMethod(comment = "Finds the restriction defined by an <owl:Restriction> element.\r\n\r\n@param TOKENS\r\n\t\tlistp; a list of strings that are XML tokens\r\n@return 0 PROPERTY owl-external-value-specification-p;\r\n@return 1 TYPE\r\n@return 2 VALUE")
    public static final SubLObject read_owl_restriction_alt(SubLObject original_tokens, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                if (NIL == web_utilities.xml_token_element_nameP(original_tokens.first(), owl_utilities.owl_name($$$Restriction))) {
                    Errors.error($str_alt567$_S___is_not_the_start_of_an_OWL_r, list_utilities.first_n(TEN_INTEGER, original_tokens));
                }
            }
            {
                SubLObject node_id = web_utilities.xml_tag_attribute_value(original_tokens.first(), rdf_utilities.rdf_name($$$nodeID), UNPROVIDED);
                SubLObject tokens = original_tokens;
                SubLObject state = $INITIAL;
                SubLObject property = NIL;
                SubLObject type = NIL;
                SubLObject datatype = NIL;
                SubLObject value = NIL;
                while ((NIL != tokens) && (state != $DONE)) {
                    {
                        SubLObject token_advance_spec = NIL;
                        thread.resetMultipleValues();
                        {
                            SubLObject state_81 = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_part_of_owl_restriction(state, property, type, datatype, value, tokens, import_parameters);
                            SubLObject property_82 = thread.secondMultipleValue();
                            SubLObject type_83 = thread.thirdMultipleValue();
                            SubLObject datatype_84 = thread.fourthMultipleValue();
                            SubLObject value_85 = thread.fifthMultipleValue();
                            SubLObject token_advance_spec_86 = thread.sixthMultipleValue();
                            thread.resetMultipleValues();
                            state = state_81;
                            property = property_82;
                            type = type_83;
                            datatype = datatype_84;
                            value = value_85;
                            token_advance_spec = token_advance_spec_86;
                        }
                        if (NIL != subl_promotions.positive_integer_p(token_advance_spec)) {
                            tokens = web_utilities.advance_xml_tokens(tokens, token_advance_spec);
                        } else {
                            if (token_advance_spec.isString()) {
                                tokens = web_utilities.advance_xml_tokens(web_utilities.advance_xml_tokens_to(tokens, token_advance_spec, UNPROVIDED), UNPROVIDED);
                            } else {
                                if (token_advance_spec.eql($CLOSE)) {
                                    tokens = web_utilities.advance_xml_tokens_to_end_of_element(tokens);
                                } else {
                                    if (state != $DONE) {
                                        {
                                            SubLObject position = com.cyc.cycjava.cycl.owl.owl_to_cycl.next_noninitial_non_whitespace_xml_token_position(tokens);
                                            tokens = (NIL != position) ? ((SubLObject) (web_utilities.advance_xml_tokens(tokens, position))) : NIL;
                                        }
                                    }
                                }
                            }
                        }
                    }
                } 
                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt570$Read_restriction___S__S__S, $str_alt223$__ }), new SubLObject[]{ property, type, value });
                    force_output(UNPROVIDED);
                }
                if (NIL != string_utilities.non_empty_string_p(node_id)) {
                    com.cyc.cycjava.cycl.owl.owl_to_cycl.note_node_id_reference(node_id, list($RESTRICTION, property, type, value));
                }
                return values(property, type, value);
            }
        }
    }

    /**
     * Finds the restriction defined by an <owl:Restriction> element.
     *
     * @param TOKENS
     * 		listp; a list of strings that are XML tokens
     * @return 0 PROPERTY owl-external-value-specification-p;
     * @return 1 TYPE
     * @return 2 VALUE
     */
    @LispMethod(comment = "Finds the restriction defined by an <owl:Restriction> element.\r\n\r\n@param TOKENS\r\n\t\tlistp; a list of strings that are XML tokens\r\n@return 0 PROPERTY owl-external-value-specification-p;\r\n@return 1 TYPE\r\n@return 2 VALUE")
    public static SubLObject read_owl_restriction(final SubLObject original_tokens, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == xml_parsing_utilities.xml_token_element_nameP(original_tokens.first(), owl_utilities.owl_name(owl_to_cycl.$$$Restriction)))) {
            Errors.error(owl_to_cycl.$str596$_S___is_not_the_start_of_an_OWL_r, first_n(TEN_INTEGER, original_tokens));
        }
        final SubLObject node_id = xml_parsing_utilities.xml_tag_attribute_value(original_tokens.first(), rdf_name(owl_to_cycl.$$$nodeID), UNPROVIDED);
        SubLObject tokens = original_tokens;
        SubLObject state = $INITIAL;
        SubLObject property = NIL;
        SubLObject v_class = owl_to_cycl.$$Thing;
        SubLObject type = NIL;
        SubLObject datatype = NIL;
        SubLObject value = NIL;
        while ((NIL != tokens) && (state != $DONE)) {
            SubLObject token_advance_spec = NIL;
            thread.resetMultipleValues();
            final SubLObject state_$79 = owl_to_cycl.read_part_of_owl_restriction(state, property, v_class, type, datatype, value, tokens, import_parameters);
            final SubLObject property_$80 = thread.secondMultipleValue();
            final SubLObject v_class_$81 = thread.thirdMultipleValue();
            final SubLObject type_$82 = thread.fourthMultipleValue();
            final SubLObject datatype_$83 = thread.fifthMultipleValue();
            final SubLObject value_$84 = thread.sixthMultipleValue();
            final SubLObject token_advance_spec_$85 = thread.seventhMultipleValue();
            thread.resetMultipleValues();
            state = state_$79;
            property = property_$80;
            v_class = v_class_$81;
            type = type_$82;
            datatype = datatype_$83;
            value = value_$84;
            token_advance_spec = token_advance_spec_$85;
            if (NIL != positive_integer_p(token_advance_spec)) {
                tokens = xml_parsing_utilities.advance_xml_tokens(tokens, token_advance_spec);
            } else
                if (token_advance_spec.isString()) {
                    tokens = xml_parsing_utilities.advance_xml_tokens(xml_parsing_utilities.advance_xml_tokens_to(tokens, token_advance_spec, UNPROVIDED), UNPROVIDED);
                } else
                    if (token_advance_spec.eql($CLOSE)) {
                        tokens = xml_parsing_utilities.advance_xml_tokens_to_end_of_element(tokens);
                    } else {
                        if (state == $DONE) {
                            continue;
                        }
                        final SubLObject position = owl_to_cycl.next_noninitial_non_whitespace_xml_token_position(tokens);
                        tokens = (NIL != position) ? xml_parsing_utilities.advance_xml_tokens(tokens, position) : NIL;
                    }


        } 
        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str599$Read_restriction___S__S__S__S, owl_to_cycl.$str239$__ }), new SubLObject[]{ property, type, value, v_class });
            force_output(UNPROVIDED);
        }
        if (NIL != non_empty_string_p(node_id)) {
            owl_to_cycl.note_node_id_reference(node_id, list($RESTRICTION, property, type, value, v_class));
        }
        return values(property, type, value, v_class);
    }

    public static final SubLObject read_part_of_owl_restriction(SubLObject state, SubLObject property, SubLObject type, SubLObject datatype, SubLObject value, SubLObject tokens, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject token = tokens.first();
                SubLObject token_advance_spec = NIL;
                if ((NIL != web_utilities.xml_token_element_nameP(token, owl_utilities.owl_name($$$Restriction))) && (NIL != web_utilities.xml_closing_tag_p(token))) {
                    state = $DONE;
                } else {
                    if (((NIL != web_utilities.xml_token_element_nameP(token, owl_utilities.owl_name($$$Restriction))) && (NIL != web_utilities.xml_opening_tag_p(token))) && (!(((NIL != property) || (NIL != type)) || (NIL != value)))) {
                    } else {
                        if ((NIL != web_utilities.xml_token_element_nameP(token, owl_utilities.owl_name($$$onProperty))) && (NIL != web_utilities.xml_opening_tag_p(token))) {
                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt572$Reading_restriction_property___, $str_alt223$__ }));
                                force_output(UNPROVIDED);
                            }
                            state = $READING_PROPERTY;
                        } else {
                            if ((NIL != web_utilities.xml_token_element_nameP(token, owl_utilities.owl_name($$$onProperty))) && (NIL != web_utilities.xml_empty_tagP(token))) {
                                property = com.cyc.cycjava.cycl.owl.owl_to_cycl.term_names_from_token(token, import_parameters);
                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt574$Read_restriction_property__S, $str_alt223$__ }), property);
                                    force_output(UNPROVIDED);
                                }
                                state = (NIL != value) ? ((SubLObject) ($DONE)) : $READ_PROPERTY;
                            } else {
                                if ((NIL != web_utilities.xml_token_element_nameP(token, owl_utilities.owl_name($$$onProperty))) && (NIL != web_utilities.xml_closing_tag_p(token))) {
                                    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                                        if (state != $READING_PROPERTY) {
                                            Errors.error($str_alt576$Got_onProperty_close_tag_when_we_);
                                        }
                                    }
                                    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                                        if (NIL == property) {
                                            Errors.error($str_alt577$Failed_to_read_property_);
                                        }
                                    }
                                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                        format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt574$Read_restriction_property__S, $str_alt223$__ }), property);
                                        force_output(UNPROVIDED);
                                    }
                                    state = (NIL != value) ? ((SubLObject) ($DONE)) : $READ_PROPERTY;
                                } else {
                                    if (state == $READING_PROPERTY) {
                                        property = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_restriction_property(tokens, import_parameters);
                                        token_advance_spec = $CLOSE;
                                    } else {
                                        if (NIL != member(web_utilities.xml_token_element_name(token), list(owl_utilities.owl_name($$$allValuesFrom), owl_utilities.owl_name($$$someValuesFrom), owl_utilities.owl_name($$$hasValue), owl_utilities.owl_name($$$cardinality), owl_utilities.owl_name($$$minCardinality), owl_utilities.owl_name($$$maxCardinality)), symbol_function(EQUAL), UNPROVIDED)) {
                                            type = web_utilities.xml_token_element_name(token);
                                            datatype = com.cyc.cycjava.cycl.owl.owl_to_cycl.process_owl_attribute_value(web_utilities.xml_tag_attribute_value(token, rdf_utilities.rdf_name($$$datatype), UNPROVIDED));
                                            if (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.nonlocal_owl_term_reference_p(datatype)) {
                                                datatype = third(datatype);
                                            }
                                            if (NIL != datatype) {
                                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt578$Read_datatype__S_from__S, $str_alt223$__ }), datatype, token);
                                                    force_output(UNPROVIDED);
                                                }
                                            }
                                            state = $READ_TYPE;
                                            if (NIL != web_utilities.xml_empty_tagP(token)) {
                                                {
                                                    SubLObject class_name = com.cyc.cycjava.cycl.owl.owl_to_cycl.term_names_from_token(token, import_parameters);
                                                    value = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_from_specification(class_name, $$OWLClass, import_parameters);
                                                }
                                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt580$Read_value__S_from__S, $str_alt223$__ }), value, token);
                                                    force_output(UNPROVIDED);
                                                }
                                                state = (NIL != property) ? ((SubLObject) ($DONE)) : $READ_VALUE;
                                            }
                                        } else {
                                            if ((state == $READ_TYPE) && (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_class_token_p(token))) {
                                                {
                                                    SubLObject class_name = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_class(tokens, import_parameters);
                                                    SubLObject type_name = com.cyc.cycjava.cycl.owl.owl_to_cycl.process_owl_attribute_value(web_utilities.xml_token_element_name(token));
                                                    {
                                                        SubLObject _prev_bind_0 = $owl_force_new_term_creationP$.currentBinding(thread);
                                                        try {
                                                            $owl_force_new_term_creationP$.bind(T, thread);
                                                            {
                                                                SubLObject type_87 = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_from_specification(type_name, $$OWLClass, import_parameters);
                                                                SubLObject this_class = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_find_or_create_term_from_specification(class_name, type_87, import_parameters);
                                                                if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                                                                    if (NIL == this_class) {
                                                                        Errors.error($str_alt582$Failed_to_read_restriction_value_);
                                                                    }
                                                                }
                                                                value = this_class;
                                                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt583$Read_restriction_value__S, $str_alt223$__ }), value);
                                                                    force_output(UNPROVIDED);
                                                                }
                                                                state = (NIL != property) ? ((SubLObject) ($DONE)) : $READ_VALUE;
                                                            }
                                                        } finally {
                                                            $owl_force_new_term_creationP$.rebind(_prev_bind_0, thread);
                                                        }
                                                    }
                                                }
                                            } else {
                                                if ((state == $READ_TYPE) && (NIL == web_utilities.xml_tagP(token))) {
                                                    value = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_value_from_string(token, datatype);
                                                    if (NIL != value) {
                                                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt583$Read_restriction_value__S, $str_alt223$__ }), value);
                                                            force_output(UNPROVIDED);
                                                        }
                                                        state = (NIL != property) ? ((SubLObject) ($DONE)) : $READ_VALUE;
                                                    }
                                                } else {
                                                    if ((state == $READ_TYPE) && ((NIL != web_utilities.xml_opening_tag_p(token)) || (NIL != web_utilities.xml_empty_tagP(token)))) {
                                                        {
                                                            SubLObject term_info = nth_value_step_2(nth_value_step_1(ONE_INTEGER), com.cyc.cycjava.cycl.owl.owl_to_cycl.read_one_instance_info_from_owl_tokens(tokens, import_parameters));
                                                            SubLTrampolineFile.checkType(term_info, OWL_TERM_INFO_P);
                                                            value = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_term_info_plist_lookup(term_info, $EXTERNAL_NAME, UNPROVIDED);
                                                            if (NIL != value) {
                                                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt583$Read_restriction_value__S, $str_alt223$__ }), value);
                                                                    force_output(UNPROVIDED);
                                                                }
                                                                state = (NIL != property) ? ((SubLObject) ($DONE)) : $READ_VALUE;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return values(state, property, type, datatype, value, token_advance_spec);
            }
        }
    }

    public static SubLObject read_part_of_owl_restriction(SubLObject state, SubLObject property, SubLObject v_class, SubLObject type, SubLObject datatype, SubLObject value, final SubLObject tokens, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject token = tokens.first();
        SubLObject token_advance_spec = NIL;
        if ((NIL != xml_parsing_utilities.xml_token_element_nameP(token, owl_utilities.owl_name(owl_to_cycl.$$$Restriction))) && (NIL != xml_parsing_utilities.xml_closing_tag_p(token))) {
            state = $DONE;
        } else
            if (((((NIL == xml_parsing_utilities.xml_token_element_nameP(token, owl_utilities.owl_name(owl_to_cycl.$$$Restriction))) || (NIL == xml_parsing_utilities.xml_opening_tag_p(token))) || (NIL != property)) || (NIL != type)) || (NIL != value)) {
                if ((NIL != xml_parsing_utilities.xml_token_element_nameP(token, owl_utilities.owl_name(owl_to_cycl.$$$onProperty))) && (NIL != xml_parsing_utilities.xml_opening_tag_p(token))) {
                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                        format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str601$Reading_restriction_property___, owl_to_cycl.$str239$__ }));
                        force_output(UNPROVIDED);
                    }
                    state = $READING_PROPERTY;
                } else
                    if ((NIL != xml_parsing_utilities.xml_token_element_nameP(token, owl_utilities.owl11_name(owl_to_cycl.$$$onClass))) && (NIL != xml_parsing_utilities.xml_opening_tag_p(token))) {
                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str604$Reading_restriction_class___, owl_to_cycl.$str239$__ }));
                            force_output(UNPROVIDED);
                        }
                        state = $READING_CLASS;
                    } else
                        if ((NIL != xml_parsing_utilities.xml_token_element_nameP(token, owl_utilities.owl_name(owl_to_cycl.$$$onProperty))) && (NIL != xml_parsing_utilities.xml_empty_tagP(token))) {
                            property = owl_to_cycl.term_names_from_token(token, import_parameters);
                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str606$Read_restriction_property__S, owl_to_cycl.$str239$__ }), property);
                                force_output(UNPROVIDED);
                            }
                            state = (NIL != value) ? $DONE : $READ_PROPERTY;
                        } else
                            if ((NIL != xml_parsing_utilities.xml_token_element_nameP(token, owl_utilities.owl11_name(owl_to_cycl.$$$onClass))) && (NIL != xml_parsing_utilities.xml_empty_tagP(token))) {
                                v_class = owl_to_cycl.term_names_from_token(token, import_parameters);
                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str608$Read_restriction_class__S, owl_to_cycl.$str239$__ }), v_class);
                                    force_output(UNPROVIDED);
                                }
                                state = (NIL != value) ? $DONE : $READ_CLASS;
                            } else
                                if ((NIL != xml_parsing_utilities.xml_token_element_nameP(token, owl_utilities.owl_name(owl_to_cycl.$$$onProperty))) && (NIL != xml_parsing_utilities.xml_closing_tag_p(token))) {
                                    if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (state != $READING_PROPERTY)) {
                                        Errors.error(owl_to_cycl.$str610$Got_onProperty_close_tag_when_we_);
                                    }
                                    if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == property)) {
                                        Errors.error(owl_to_cycl.$str611$Failed_to_read_property_);
                                    }
                                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                        format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str606$Read_restriction_property__S, owl_to_cycl.$str239$__ }), property);
                                        force_output(UNPROVIDED);
                                    }
                                    state = (NIL != value) ? $DONE : $READ_PROPERTY;
                                } else
                                    if ((NIL != xml_parsing_utilities.xml_token_element_nameP(token, owl_utilities.owl11_name(owl_to_cycl.$$$onClass))) && (NIL != xml_parsing_utilities.xml_closing_tag_p(token))) {
                                        if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (state != $READING_CLASS)) {
                                            Errors.error(owl_to_cycl.$str612$Got_onClass_close_tag_when_we_wer);
                                        }
                                        if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == v_class)) {
                                            Errors.error(owl_to_cycl.$str613$Failed_to_read_class_);
                                        }
                                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str608$Read_restriction_class__S, owl_to_cycl.$str239$__ }), v_class);
                                            force_output(UNPROVIDED);
                                        }
                                        state = (NIL != value) ? $DONE : $READ_CLASS;
                                    } else
                                        if (state == $READING_PROPERTY) {
                                            property = owl_to_cycl.read_owl_restriction_property(tokens, import_parameters);
                                            token_advance_spec = $CLOSE;
                                        } else
                                            if (state == $READING_CLASS) {
                                                v_class = owl_to_cycl.read_owl_restriction_class(tokens, import_parameters);
                                                token_advance_spec = $CLOSE;
                                            } else
                                                if (NIL != member(xml_parsing_utilities.xml_token_element_name(token), list(owl_utilities.owl_name(owl_to_cycl.$$$allValuesFrom), owl_utilities.owl_name(owl_to_cycl.$$$someValuesFrom), owl_utilities.owl_name(owl_to_cycl.$$$hasValue), owl_utilities.owl_name(owl_to_cycl.$$$cardinality), owl_utilities.owl_name(owl_to_cycl.$$$minCardinality), owl_utilities.owl_name(owl_to_cycl.$$$maxCardinality)), symbol_function(EQUAL), UNPROVIDED)) {
                                                    type = xml_parsing_utilities.xml_token_element_name(token);
                                                    datatype = owl_to_cycl.process_owl_attribute_value(xml_parsing_utilities.xml_tag_attribute_value(token, rdf_name(owl_to_cycl.$$$datatype), UNPROVIDED));
                                                    if (NIL != owl_to_cycl.nonlocal_owl_term_reference_p(datatype)) {
                                                        datatype = third(datatype);
                                                    }
                                                    if ((NIL != datatype) && (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread))) {
                                                        format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str614$Read_datatype__S_from__S, owl_to_cycl.$str239$__ }), datatype, token);
                                                        force_output(UNPROVIDED);
                                                    }
                                                    state = $READ_TYPE;
                                                    if (NIL != xml_parsing_utilities.xml_empty_tagP(token)) {
                                                        final SubLObject class_name = owl_to_cycl.term_names_from_token(token, import_parameters);
                                                        value = owl_to_cycl.owl_find_or_create_term_from_specification(class_name, owl_to_cycl.$const349$owl_Class, import_parameters);
                                                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                            format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str616$Read_value__S_from__S, owl_to_cycl.$str239$__ }), value, token);
                                                            force_output(UNPROVIDED);
                                                        }
                                                        state = (NIL != property) ? $DONE : $READ_VALUE;
                                                    }
                                                } else
                                                    if ((state == $READ_TYPE) && (NIL != owl_to_cycl.owl_class_token_p(token))) {
                                                        final SubLObject class_name = owl_to_cycl.read_owl_class(tokens, import_parameters);
                                                        final SubLObject type_name = owl_to_cycl.process_owl_attribute_value(xml_parsing_utilities.xml_token_element_name(token));
                                                        final SubLObject _prev_bind_0 = owl_to_cycl.$owl_force_new_term_creationP$.currentBinding(thread);
                                                        try {
                                                            owl_to_cycl.$owl_force_new_term_creationP$.bind(T, thread);
                                                            final SubLObject type_$86 = owl_to_cycl.owl_find_or_create_term_from_specification(type_name, owl_to_cycl.$const349$owl_Class, import_parameters);
                                                            final SubLObject this_class = owl_to_cycl.owl_find_or_create_term_from_specification(class_name, type_$86, import_parameters);
                                                            if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == this_class)) {
                                                                Errors.error(owl_to_cycl.$str618$Failed_to_read_restriction_value_);
                                                            }
                                                            value = this_class;
                                                            if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str619$Read_restriction_value__S, owl_to_cycl.$str239$__ }), value);
                                                                force_output(UNPROVIDED);
                                                            }
                                                            state = $READ_VALUE;
                                                        } finally {
                                                            owl_to_cycl.$owl_force_new_term_creationP$.rebind(_prev_bind_0, thread);
                                                        }
                                                    } else
                                                        if ((state == $READ_TYPE) && (NIL == xml_parsing_utilities.xml_tagP(token))) {
                                                            value = owl_to_cycl.owl_value_from_string(token, datatype);
                                                            if (NIL != value) {
                                                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str619$Read_restriction_value__S, owl_to_cycl.$str239$__ }), value);
                                                                    force_output(UNPROVIDED);
                                                                }
                                                                state = $READ_VALUE;
                                                            }
                                                        } else
                                                            if ((state == $READ_TYPE) && ((NIL != xml_parsing_utilities.xml_opening_tag_p(token)) || (NIL != xml_parsing_utilities.xml_empty_tagP(token)))) {
                                                                final SubLObject term_info = nth_value_step_2(nth_value_step_1(ONE_INTEGER), owl_to_cycl.read_one_instance_info_from_owl_tokens(tokens, import_parameters));
                                                                assert NIL != owl_to_cycl.owl_term_info_p(term_info) : "! owl_to_cycl.owl_term_info_p(term_info) " + ("owl_to_cycl.owl_term_info_p(term_info) " + "CommonSymbols.NIL != owl_to_cycl.owl_term_info_p(term_info) ") + term_info;
                                                                value = owl_to_cycl.owl_term_info_plist_lookup(term_info, $EXTERNAL_NAME, UNPROVIDED);
                                                                if (NIL != value) {
                                                                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                                                        format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str619$Read_restriction_value__S, owl_to_cycl.$str239$__ }), value);
                                                                        force_output(UNPROVIDED);
                                                                    }
                                                                    state = (NIL != property) ? $DONE : $READ_VALUE;
                                                                }
                                                            }











            }

        return values(state, property, v_class, type, datatype, value, token_advance_spec);
    }

    public static final SubLObject read_owl_restriction_property_alt(SubLObject tokens, SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject first_token = tokens.first();
                SubLObject name = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_owl_term_reference(first_token, import_parameters);
                {
                    SubLObject _prev_bind_0 = $owl_definition_type$.currentBinding(thread);
                    try {
                        $owl_definition_type$.bind($PROPERTY, thread);
                        {
                            SubLObject pred_info = NIL;
                            SubLObject current_token = first_token;
                            SubLObject doneP = NIL;
                            while (NIL == doneP) {
                                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                    format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt584$__Reading_OWL_property_starting_w, $str_alt223$__ }), list_utilities.first_n(FOUR_INTEGER, tokens));
                                    force_output(UNPROVIDED);
                                }
                                thread.resetMultipleValues();
                                {
                                    SubLObject new_pred_info = com.cyc.cycjava.cycl.owl.owl_to_cycl.read_one_owl_chunk_for_pred_info(current_token, pred_info, import_parameters, tokens);
                                    SubLObject token_advance_spec = thread.secondMultipleValue();
                                    SubLObject pred_info_doneP = thread.thirdMultipleValue();
                                    thread.resetMultipleValues();
                                    pred_info = new_pred_info;
                                    if (NIL != pred_info_doneP) {
                                        com.cyc.cycjava.cycl.owl.owl_to_cycl.accumulate_owl_definition(new_pred_info, $PROPERTY);
                                        doneP = T;
                                        if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                                            format(T, cconcatenate($str_alt221$__, new SubLObject[]{ $str_alt585$__Done_with__S__, $str_alt223$__ }), new_pred_info);
                                            force_output(UNPROVIDED);
                                        }
                                    }
                                    if (NIL != subl_promotions.positive_integer_p(token_advance_spec)) {
                                        tokens = web_utilities.advance_xml_tokens(tokens, token_advance_spec);
                                    } else {
                                        if (token_advance_spec.isString()) {
                                            tokens = web_utilities.advance_xml_tokens(web_utilities.advance_xml_tokens_to(tokens, token_advance_spec, UNPROVIDED), UNPROVIDED);
                                        } else {
                                            if (token_advance_spec.eql($CLOSE)) {
                                                tokens = web_utilities.advance_xml_tokens_to_end_of_element(tokens);
                                            } else {
                                                {
                                                    SubLObject position = com.cyc.cycjava.cycl.owl.owl_to_cycl.next_noninitial_non_whitespace_xml_token_position(tokens);
                                                    tokens = (NIL != position) ? ((SubLObject) (web_utilities.advance_xml_tokens(tokens, position))) : NIL;
                                                }
                                            }
                                        }
                                    }
                                }
                                current_token = tokens.first();
                            } 
                        }
                    } finally {
                        $owl_definition_type$.rebind(_prev_bind_0, thread);
                    }
                }
                return name;
            }
        }
    }

    public static SubLObject read_owl_restriction_property(SubLObject tokens, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject first_token = tokens.first();
        final SubLObject name = owl_to_cycl.read_owl_term_reference(first_token, import_parameters);
        final SubLObject _prev_bind_0 = owl_to_cycl.$owl_definition_type$.currentBinding(thread);
        try {
            owl_to_cycl.$owl_definition_type$.bind($PROPERTY, thread);
            SubLObject pred_info = NIL;
            SubLObject current_token = first_token;
            SubLObject doneP = NIL;
            while (NIL == doneP) {
                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str620$__Reading_OWL_property_starting_w, owl_to_cycl.$str239$__ }), first_n(FOUR_INTEGER, tokens));
                    force_output(UNPROVIDED);
                }
                thread.resetMultipleValues();
                final SubLObject new_pred_info = owl_to_cycl.read_one_owl_chunk_for_pred_info(current_token, pred_info, import_parameters, tokens);
                final SubLObject token_advance_spec = thread.secondMultipleValue();
                final SubLObject pred_info_doneP = thread.thirdMultipleValue();
                thread.resetMultipleValues();
                pred_info = new_pred_info;
                if (NIL != pred_info_doneP) {
                    owl_to_cycl.accumulate_owl_definition(new_pred_info, $PROPERTY);
                    doneP = T;
                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                        format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str621$__Done_with__S__, owl_to_cycl.$str239$__ }), new_pred_info);
                        force_output(UNPROVIDED);
                    }
                }
                if (NIL != positive_integer_p(token_advance_spec)) {
                    tokens = xml_parsing_utilities.advance_xml_tokens(tokens, token_advance_spec);
                } else
                    if (token_advance_spec.isString()) {
                        tokens = xml_parsing_utilities.advance_xml_tokens(xml_parsing_utilities.advance_xml_tokens_to(tokens, token_advance_spec, UNPROVIDED), UNPROVIDED);
                    } else
                        if (token_advance_spec.eql($CLOSE)) {
                            tokens = xml_parsing_utilities.advance_xml_tokens_to_end_of_element(tokens);
                        } else {
                            final SubLObject position = owl_to_cycl.next_noninitial_non_whitespace_xml_token_position(tokens);
                            tokens = (NIL != position) ? xml_parsing_utilities.advance_xml_tokens(tokens, position) : NIL;
                        }


                current_token = tokens.first();
            } 
        } finally {
            owl_to_cycl.$owl_definition_type$.rebind(_prev_bind_0, thread);
        }
        return name;
    }

    public static SubLObject read_owl_restriction_class(SubLObject tokens, final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject first_token = tokens.first();
        final SubLObject name = owl_to_cycl.read_owl_term_reference(first_token, import_parameters);
        final SubLObject _prev_bind_0 = owl_to_cycl.$owl_definition_type$.currentBinding(thread);
        try {
            owl_to_cycl.$owl_definition_type$.bind($CLASS, thread);
            SubLObject term_info = NIL;
            SubLObject current_token = first_token;
            SubLObject doneP = NIL;
            while (NIL == doneP) {
                if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                    format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str622$__Reading_OWL_class_starting_with, owl_to_cycl.$str239$__ }), first_n(FOUR_INTEGER, tokens));
                    force_output(UNPROVIDED);
                }
                thread.resetMultipleValues();
                final SubLObject new_term_info = owl_to_cycl.read_one_owl_chunk_for_class_info(current_token, term_info, import_parameters, tokens);
                final SubLObject token_advance_spec = thread.secondMultipleValue();
                final SubLObject term_info_doneP = thread.thirdMultipleValue();
                thread.resetMultipleValues();
                term_info = new_term_info;
                if (NIL != term_info_doneP) {
                    owl_to_cycl.accumulate_owl_definition(new_term_info, $CLASS);
                    doneP = T;
                    if (NIL != owl_utilities.$owl_verboseP$.getDynamicValue(thread)) {
                        format(T, cconcatenate(owl_to_cycl.$str237$__, new SubLObject[]{ owl_to_cycl.$str621$__Done_with__S__, owl_to_cycl.$str239$__ }), new_term_info);
                        force_output(UNPROVIDED);
                    }
                }
                if (NIL != positive_integer_p(token_advance_spec)) {
                    tokens = xml_parsing_utilities.advance_xml_tokens(tokens, token_advance_spec);
                } else
                    if (token_advance_spec.isString()) {
                        tokens = xml_parsing_utilities.advance_xml_tokens(xml_parsing_utilities.advance_xml_tokens_to(tokens, token_advance_spec, UNPROVIDED), UNPROVIDED);
                    } else
                        if (token_advance_spec.eql($CLOSE)) {
                            tokens = xml_parsing_utilities.advance_xml_tokens_to_end_of_element(tokens);
                        } else {
                            final SubLObject position = owl_to_cycl.next_noninitial_non_whitespace_xml_token_position(tokens);
                            tokens = (NIL != position) ? xml_parsing_utilities.advance_xml_tokens(tokens, position) : NIL;
                        }


                current_token = tokens.first();
            } 
        } finally {
            owl_to_cycl.$owl_definition_type$.rebind(_prev_bind_0, thread);
        }
        return name;
    }

    public static final SubLObject owl_value_from_string_alt(SubLObject token, SubLObject datatype) {
        {
            SubLObject local_datatype = (NIL != com.cyc.cycjava.cycl.owl.owl_to_cycl.nonlocal_owl_term_reference_p(datatype)) ? ((SubLObject) (third(datatype))) : datatype;
            SubLObject trimmed_token = string_utilities.trim_whitespace(token);
            SubLObject value = NIL;
            if (NIL != Guids.guid_string_p(trimmed_token)) {
                return trimmed_token;
            } else {
                if ((NIL != member(local_datatype, $owl_interval_datatypes$.getGlobalValue(), EQUALP, UNPROVIDED)) || (NIL == local_datatype)) {
                    {
                        SubLObject parsed_value = numeral_parser.string_to_interval(trimmed_token);
                        SubLObject read_value = (parsed_value.isNumber()) ? ((SubLObject) (NIL)) : read_from_string_ignoring_errors(trimmed_token, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        SubLObject numeric_value = (parsed_value.isNumber()) ? ((SubLObject) (parsed_value)) : read_value.isNumber() ? ((SubLObject) (read_value)) : NIL;
                        if (!((NIL == local_datatype) || (NIL != numeric_value))) {
                            Errors.warn($str_alt587$Can_t_parse__S_as_a__A, token, local_datatype);
                        }
                        value = (NIL != numeric_value) ? ((SubLObject) (numeric_value)) : token;
                    }
                } else {
                    if (local_datatype.equalp($$$string)) {
                        return token;
                    } else {
                        if (local_datatype.equalp($$$boolean)) {
                            if (NIL != subl_promotions.memberP(trimmed_token, $list_alt589, symbol_function(EQUALP), UNPROVIDED)) {
                                value = $$True;
                            } else {
                                if (NIL != subl_promotions.memberP(trimmed_token, $list_alt591, symbol_function(EQUALP), UNPROVIDED)) {
                                    value = $$False;
                                } else {
                                    Errors.warn($str_alt593$Couldn_t_read_boolean_value_from_, token);
                                }
                            }
                        } else {
                            if (local_datatype.equalp($$$date)) {
                                {
                                    SubLObject dates = date_utilities.parse_date_from_string_fast(trimmed_token, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    SubLObject pcase_var = length(dates);
                                    if (pcase_var.eql(ONE_INTEGER)) {
                                        value = list_utilities.only_one(dates);
                                    } else {
                                        if (pcase_var.eql(ZERO_INTEGER)) {
                                            Errors.warn($str_alt595$Couldn_t_parse_date_from__S, token);
                                        } else {
                                            {
                                                SubLObject days = list_utilities.find_all($$DayFn, dates, symbol_function(EQL), NAT_FUNCTOR);
                                                if (NIL != list_utilities.singletonP(days)) {
                                                    value = list_utilities.only_one(days);
                                                } else {
                                                    Errors.warn($str_alt598$Got_multiple_dates_from__S_____S, token, dates);
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                Errors.warn($str_alt599$Don_t_know_how_to_parse_value_fro, token, local_datatype);
                            }
                        }
                    }
                }
            }
            return value;
        }
    }

    public static SubLObject owl_value_from_string(final SubLObject token, final SubLObject datatype) {
        final SubLObject local_datatype = (NIL != owl_to_cycl.nonlocal_owl_term_reference_p(datatype)) ? third(datatype) : datatype;
        final SubLObject trimmed_token = trim_whitespace(token);
        SubLObject value = NIL;
        if (NIL != Guids.guid_string_p(trimmed_token)) {
            return trimmed_token;
        }
        if ((NIL != member(local_datatype, owl_to_cycl.$owl_interval_datatypes$.getGlobalValue(), EQUALP, UNPROVIDED)) || (NIL == local_datatype)) {
            final SubLObject parsed_value = string_to_interval(trimmed_token);
            final SubLObject read_value = (parsed_value.isNumber()) ? NIL : read_from_string_ignoring_errors(trimmed_token, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            final SubLObject numeric_value = (parsed_value.isNumber()) ? parsed_value : read_value.isNumber() ? read_value : NIL;
            if ((NIL != local_datatype) && (NIL == numeric_value)) {
                Errors.warn(owl_to_cycl.$str624$Can_t_parse__S_as_a__A, token, local_datatype);
            }
            value = (NIL != numeric_value) ? numeric_value : token;
        } else {
            if (local_datatype.equalp(owl_to_cycl.$$$string)) {
                return token;
            }
            if (local_datatype.equalp(owl_to_cycl.$$$boolean)) {
                if (NIL != memberP(trimmed_token, owl_to_cycl.$list626, symbol_function(EQUALP), UNPROVIDED)) {
                    value = owl_to_cycl.$$True;
                } else
                    if (NIL != memberP(trimmed_token, owl_to_cycl.$list628, symbol_function(EQUALP), UNPROVIDED)) {
                        value = owl_to_cycl.$$False;
                    } else {
                        Errors.warn(owl_to_cycl.$str630$Couldn_t_read_boolean_value_from_, token);
                    }

            } else
                if (local_datatype.equalp(owl_to_cycl.$$$date)) {
                    final SubLObject dates = parse_date_from_string_fast(trimmed_token, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    final SubLObject pcase_var = length(dates);
                    if (pcase_var.eql(ONE_INTEGER)) {
                        value = only_one(dates);
                    } else
                        if (pcase_var.eql(ZERO_INTEGER)) {
                            Errors.warn(owl_to_cycl.$str632$Couldn_t_parse_date_from__S, token);
                        } else {
                            final SubLObject days = find_all(owl_to_cycl.$$DayFn, dates, symbol_function(EQL), owl_to_cycl.NAT_FUNCTOR);
                            if (NIL != singletonP(days)) {
                                value = only_one(days);
                            } else {
                                Errors.warn(owl_to_cycl.$str635$Got_multiple_dates_from__S_____S, token, dates);
                            }
                        }

                } else {
                    Errors.warn(owl_to_cycl.$str636$Don_t_know_how_to_parse_value_fro, token, local_datatype);
                }

        }
        return value;
    }

    public static final SubLObject clear_xml_name_alt() {
        {
            SubLObject cs = $xml_name_caching_state$.getGlobalValue();
            if (NIL != cs) {
                memoization_state.caching_state_clear(cs);
            }
        }
        return NIL;
    }

    public static SubLObject clear_xml_name() {
        final SubLObject cs = owl_to_cycl.$xml_name_caching_state$.getGlobalValue();
        if (NIL != cs) {
            caching_state_clear(cs);
        }
        return NIL;
    }

    public static final SubLObject remove_xml_name_alt(SubLObject local_name) {
        return memoization_state.caching_state_remove_function_results_with_args($xml_name_caching_state$.getGlobalValue(), list(local_name), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_xml_name(final SubLObject local_name) {
        return caching_state_remove_function_results_with_args(owl_to_cycl.$xml_name_caching_state$.getGlobalValue(), list(local_name), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject xml_name_internal_alt(SubLObject local_name) {
        return cconcatenate($str_alt601$xml_, local_name);
    }

    public static SubLObject xml_name_internal(final SubLObject local_name) {
        return cconcatenate(owl_to_cycl.$str638$xml_, local_name);
    }

    public static final SubLObject xml_name_alt(SubLObject local_name) {
        {
            SubLObject caching_state = $xml_name_caching_state$.getGlobalValue();
            if (NIL == caching_state) {
                caching_state = memoization_state.create_global_caching_state_for_name(XML_NAME, $xml_name_caching_state$, NIL, EQUAL, ONE_INTEGER, ZERO_INTEGER);
            }
            {
                SubLObject results = memoization_state.caching_state_lookup(caching_state, local_name, $kw15$_MEMOIZED_ITEM_NOT_FOUND_);
                if (results == $kw15$_MEMOIZED_ITEM_NOT_FOUND_) {
                    results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.owl.owl_to_cycl.xml_name_internal(local_name)));
                    memoization_state.caching_state_put(caching_state, local_name, results, UNPROVIDED);
                }
                return memoization_state.caching_results(results);
            }
        }
    }

    public static SubLObject xml_name(final SubLObject local_name) {
        SubLObject caching_state = owl_to_cycl.$xml_name_caching_state$.getGlobalValue();
        if (NIL == caching_state) {
            caching_state = create_global_caching_state_for_name(owl_to_cycl.XML_NAME, owl_to_cycl.$xml_name_caching_state$, NIL, EQUAL, ONE_INTEGER, ZERO_INTEGER);
        }
        SubLObject results = caching_state_lookup(caching_state, local_name, $memoized_item_not_found$.getGlobalValue());
        if (results.eql($memoized_item_not_found$.getGlobalValue())) {
            results = arg2(resetMultipleValues(), multiple_value_list(owl_to_cycl.xml_name_internal(local_name)));
            caching_state_put(caching_state, local_name, results, UNPROVIDED);
        }
        return caching_results(results);
    }

    public static final SubLObject owl_importer_print_function_trampoline_alt(SubLObject v_object, SubLObject stream) {
        com.cyc.cycjava.cycl.owl.owl_to_cycl.print_owl_importer(v_object, stream, ZERO_INTEGER);
        return NIL;
    }

    public static SubLObject owl_importer_print_function_trampoline(final SubLObject v_object, final SubLObject stream) {
        owl_to_cycl.print_owl_importer(v_object, stream, ZERO_INTEGER);
        return NIL;
    }

    public static final SubLObject owl_importer_p_alt(SubLObject v_object) {
        return v_object.getClass() == com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_importer_native.class ? ((SubLObject) (T)) : NIL;
    }

    public static SubLObject owl_importer_p(final SubLObject v_object) {
        return v_object.getClass() == com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_importer_native.class ? T : NIL;
    }

    public static final SubLObject owl_imp_id_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, OWL_IMPORTER_P);
        return v_object.getField2();
    }

    public static SubLObject owl_imp_id(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_importer_p(v_object) : "! owl_to_cycl.owl_importer_p(v_object) " + "owl_to_cycl.owl_importer_p error :" + v_object;
        return v_object.getField2();
    }

    public static final SubLObject owl_imp_progress_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, OWL_IMPORTER_P);
        return v_object.getField3();
    }

    public static SubLObject owl_imp_progress(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_importer_p(v_object) : "! owl_to_cycl.owl_importer_p(v_object) " + "owl_to_cycl.owl_importer_p error :" + v_object;
        return v_object.getField3();
    }

    public static final SubLObject owl_imp_error_info_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, OWL_IMPORTER_P);
        return v_object.getField4();
    }

    public static SubLObject owl_imp_error_info(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_importer_p(v_object) : "! owl_to_cycl.owl_importer_p(v_object) " + "owl_to_cycl.owl_importer_p error :" + v_object;
        return v_object.getField4();
    }

    public static final SubLObject owl_imp_import_parameters_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, OWL_IMPORTER_P);
        return v_object.getField5();
    }

    public static SubLObject owl_imp_import_parameters(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_importer_p(v_object) : "! owl_to_cycl.owl_importer_p(v_object) " + "owl_to_cycl.owl_importer_p error :" + v_object;
        return v_object.getField5();
    }

    public static final SubLObject owl_imp_thread_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, OWL_IMPORTER_P);
        return v_object.getField6();
    }

    public static SubLObject owl_imp_thread(final SubLObject v_object) {
        assert NIL != owl_to_cycl.owl_importer_p(v_object) : "! owl_to_cycl.owl_importer_p(v_object) " + "owl_to_cycl.owl_importer_p error :" + v_object;
        return v_object.getField6();
    }

    public static final SubLObject _csetf_owl_imp_id_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, OWL_IMPORTER_P);
        return v_object.setField2(value);
    }

    public static SubLObject _csetf_owl_imp_id(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_importer_p(v_object) : "! owl_to_cycl.owl_importer_p(v_object) " + "owl_to_cycl.owl_importer_p error :" + v_object;
        return v_object.setField2(value);
    }

    public static final SubLObject _csetf_owl_imp_progress_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, OWL_IMPORTER_P);
        return v_object.setField3(value);
    }

    public static SubLObject _csetf_owl_imp_progress(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_importer_p(v_object) : "! owl_to_cycl.owl_importer_p(v_object) " + "owl_to_cycl.owl_importer_p error :" + v_object;
        return v_object.setField3(value);
    }

    public static final SubLObject _csetf_owl_imp_error_info_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, OWL_IMPORTER_P);
        return v_object.setField4(value);
    }

    public static SubLObject _csetf_owl_imp_error_info(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_importer_p(v_object) : "! owl_to_cycl.owl_importer_p(v_object) " + "owl_to_cycl.owl_importer_p error :" + v_object;
        return v_object.setField4(value);
    }

    public static final SubLObject _csetf_owl_imp_import_parameters_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, OWL_IMPORTER_P);
        return v_object.setField5(value);
    }

    public static SubLObject _csetf_owl_imp_import_parameters(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_importer_p(v_object) : "! owl_to_cycl.owl_importer_p(v_object) " + "owl_to_cycl.owl_importer_p error :" + v_object;
        return v_object.setField5(value);
    }

    public static final SubLObject _csetf_owl_imp_thread_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, OWL_IMPORTER_P);
        return v_object.setField6(value);
    }

    public static SubLObject _csetf_owl_imp_thread(final SubLObject v_object, final SubLObject value) {
        assert NIL != owl_to_cycl.owl_importer_p(v_object) : "! owl_to_cycl.owl_importer_p(v_object) " + "owl_to_cycl.owl_importer_p error :" + v_object;
        return v_object.setField6(value);
    }

    public static final SubLObject make_owl_importer_alt(SubLObject arglist) {
        if (arglist == UNPROVIDED) {
            arglist = NIL;
        }
        {
            SubLObject v_new = new com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_importer_native();
            SubLObject next = NIL;
            for (next = arglist; NIL != next; next = cddr(next)) {
                {
                    SubLObject current_arg = next.first();
                    SubLObject current_value = cadr(next);
                    SubLObject pcase_var = current_arg;
                    if (pcase_var.eql($ID)) {
                        com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_owl_imp_id(v_new, current_value);
                    } else {
                        if (pcase_var.eql($PROGRESS)) {
                            com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_owl_imp_progress(v_new, current_value);
                        } else {
                            if (pcase_var.eql($ERROR_INFO)) {
                                com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_owl_imp_error_info(v_new, current_value);
                            } else {
                                if (pcase_var.eql($IMPORT_PARAMETERS)) {
                                    com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_owl_imp_import_parameters(v_new, current_value);
                                } else {
                                    if (pcase_var.eql($THREAD)) {
                                        com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_owl_imp_thread(v_new, current_value);
                                    } else {
                                        Errors.error($str_alt137$Invalid_slot__S_for_construction_, current_arg);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return v_new;
        }
    }

    public static SubLObject make_owl_importer(SubLObject arglist) {
        if (arglist == UNPROVIDED) {
            arglist = NIL;
        }
        final SubLObject v_new = new com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_importer_native();
        SubLObject next;
        SubLObject current_arg;
        SubLObject current_value;
        SubLObject pcase_var;
        for (next = NIL, next = arglist; NIL != next; next = cddr(next)) {
            current_arg = next.first();
            current_value = cadr(next);
            pcase_var = current_arg;
            if (pcase_var.eql($ID)) {
                owl_to_cycl._csetf_owl_imp_id(v_new, current_value);
            } else
                if (pcase_var.eql($PROGRESS)) {
                    owl_to_cycl._csetf_owl_imp_progress(v_new, current_value);
                } else
                    if (pcase_var.eql($ERROR_INFO)) {
                        owl_to_cycl._csetf_owl_imp_error_info(v_new, current_value);
                    } else
                        if (pcase_var.eql($IMPORT_PARAMETERS)) {
                            owl_to_cycl._csetf_owl_imp_import_parameters(v_new, current_value);
                        } else
                            if (pcase_var.eql($THREAD)) {
                                owl_to_cycl._csetf_owl_imp_thread(v_new, current_value);
                            } else {
                                Errors.error(owl_to_cycl.$str147$Invalid_slot__S_for_construction_, current_arg);
                            }




        }
        return v_new;
    }

    public static SubLObject visit_defstruct_owl_importer(final SubLObject obj, final SubLObject visitor_fn) {
        funcall(visitor_fn, obj, $BEGIN, owl_to_cycl.MAKE_OWL_IMPORTER, FIVE_INTEGER);
        funcall(visitor_fn, obj, $SLOT, $ID, owl_to_cycl.owl_imp_id(obj));
        funcall(visitor_fn, obj, $SLOT, $PROGRESS, owl_to_cycl.owl_imp_progress(obj));
        funcall(visitor_fn, obj, $SLOT, $ERROR_INFO, owl_to_cycl.owl_imp_error_info(obj));
        funcall(visitor_fn, obj, $SLOT, $IMPORT_PARAMETERS, owl_to_cycl.owl_imp_import_parameters(obj));
        funcall(visitor_fn, obj, $SLOT, $THREAD, owl_to_cycl.owl_imp_thread(obj));
        funcall(visitor_fn, obj, $END, owl_to_cycl.MAKE_OWL_IMPORTER, FIVE_INTEGER);
        return obj;
    }

    public static SubLObject visit_defstruct_object_owl_importer_method(final SubLObject obj, final SubLObject visitor_fn) {
        return owl_to_cycl.visit_defstruct_owl_importer(obj, visitor_fn);
    }

    public static final SubLObject print_owl_importer_alt(SubLObject v_object, SubLObject stream, SubLObject depth) {
        format(stream, $str_alt626$_OWL_IMPORTER__D_, com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_imp_id(v_object));
        return v_object;
    }

    public static SubLObject print_owl_importer(final SubLObject v_object, final SubLObject stream, final SubLObject depth) {
        format(stream, owl_to_cycl.$str666$_OWL_IMPORTER__D_, owl_to_cycl.owl_imp_id(v_object));
        return v_object;
    }

    public static final SubLObject new_owl_importer_alt() {
        {
            SubLObject importer = com.cyc.cycjava.cycl.owl.owl_to_cycl.make_owl_importer(UNPROVIDED);
            SubLObject id = id_index_reserve(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_importer_id_index());
            com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_owl_imp_id(importer, id);
            id_index_enter(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_importer_id_index(), id, importer);
            return importer;
        }
    }

    public static SubLObject new_owl_importer() {
        final SubLObject importer = owl_to_cycl.make_owl_importer(UNPROVIDED);
        final SubLObject id = id_index_reserve(owl_to_cycl.owl_importer_id_index());
        owl_to_cycl._csetf_owl_imp_id(importer, id);
        id_index_enter(owl_to_cycl.owl_importer_id_index(), id, importer);
        return importer;
    }

    public static final SubLObject owl_importer_id_alt(SubLObject importer) {
        SubLTrampolineFile.checkType(importer, OWL_IMPORTER_P);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_imp_id(importer);
    }

    public static SubLObject owl_importer_id(final SubLObject importer) {
        assert NIL != owl_to_cycl.owl_importer_p(importer) : "! owl_to_cycl.owl_importer_p(importer) " + ("owl_to_cycl.owl_importer_p(importer) " + "CommonSymbols.NIL != owl_to_cycl.owl_importer_p(importer) ") + importer;
        return owl_to_cycl.owl_imp_id(importer);
    }

    public static final SubLObject owl_importer_progress_alt(SubLObject importer) {
        SubLTrampolineFile.checkType(importer, OWL_IMPORTER_P);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_imp_progress(importer);
    }

    public static SubLObject owl_importer_progress(final SubLObject importer) {
        assert NIL != owl_to_cycl.owl_importer_p(importer) : "! owl_to_cycl.owl_importer_p(importer) " + ("owl_to_cycl.owl_importer_p(importer) " + "CommonSymbols.NIL != owl_to_cycl.owl_importer_p(importer) ") + importer;
        return owl_to_cycl.owl_imp_progress(importer);
    }

    public static final SubLObject owl_importer_error_info_alt(SubLObject importer) {
        SubLTrampolineFile.checkType(importer, OWL_IMPORTER_P);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_imp_error_info(importer);
    }

    public static SubLObject owl_importer_error_info(final SubLObject importer) {
        assert NIL != owl_to_cycl.owl_importer_p(importer) : "! owl_to_cycl.owl_importer_p(importer) " + ("owl_to_cycl.owl_importer_p(importer) " + "CommonSymbols.NIL != owl_to_cycl.owl_importer_p(importer) ") + importer;
        return owl_to_cycl.owl_imp_error_info(importer);
    }

    public static final SubLObject owl_importer_import_parameters_alt(SubLObject importer) {
        SubLTrampolineFile.checkType(importer, OWL_IMPORTER_P);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_imp_import_parameters(importer);
    }

    public static SubLObject owl_importer_import_parameters(final SubLObject importer) {
        assert NIL != owl_to_cycl.owl_importer_p(importer) : "! owl_to_cycl.owl_importer_p(importer) " + ("owl_to_cycl.owl_importer_p(importer) " + "CommonSymbols.NIL != owl_to_cycl.owl_importer_p(importer) ") + importer;
        return owl_to_cycl.owl_imp_import_parameters(importer);
    }

    public static final SubLObject owl_importer_thread_alt(SubLObject importer) {
        SubLTrampolineFile.checkType(importer, OWL_IMPORTER_P);
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_imp_thread(importer);
    }

    public static SubLObject owl_importer_thread(final SubLObject importer) {
        assert NIL != owl_to_cycl.owl_importer_p(importer) : "! owl_to_cycl.owl_importer_p(importer) " + ("owl_to_cycl.owl_importer_p(importer) " + "CommonSymbols.NIL != owl_to_cycl.owl_importer_p(importer) ") + importer;
        return owl_to_cycl.owl_imp_thread(importer);
    }

    public static final SubLObject sxhash_owl_importer_method_alt(SubLObject v_object) {
        return com.cyc.cycjava.cycl.owl.owl_to_cycl.sxhash_owl_importer(v_object);
    }

    public static SubLObject sxhash_owl_importer_method(final SubLObject v_object) {
        return owl_to_cycl.sxhash_owl_importer(v_object);
    }

    /**
     *
     *
     * @unknown 
     */
    @LispMethod(comment = "@unknown")
    public static final SubLObject sxhash_owl_importer_alt(SubLObject importer) {
        return Sxhash.sxhash(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_imp_id(importer));
    }

    /**
     *
     *
     * @unknown 
     */
    @LispMethod(comment = "@unknown")
    public static SubLObject sxhash_owl_importer(final SubLObject importer) {
        return Sxhash.sxhash(owl_to_cycl.owl_imp_id(importer));
    }

    /**
     * Imports an OWL ontology.
     *
     * @param URI
     * 		uri-p; The URI for this ontology.
     * @param CONSTANT-PREFIX
     * 		STRINGP; A string that is prefixed to names of new constants (first-char downcased for preds).
     * @param SOURCE
     * 		file or url; Where to import from. Defaults to URI.
     * @param ONTOLOGY
     * 		CYCL-DENOTATIONAL-TERM-P; The #$Ontology wrt which #$synonymousExternalConcept assertions are made.
     * @param QUOTED-ISA
     * 		CYCL-DENOTATIONAL-TERM-P; A collection of which all newly reified constants will be quoted instances.
     * @param CYCLIST
     * 		CYCLIST?; The Cyclist cited as the creator of all new constants and assertions.
     * @return NON-NEGATIVE-INTEGERP the id of the importer doing the work.
     */
    @LispMethod(comment = "Imports an OWL ontology.\r\n\r\n@param URI\r\n\t\turi-p; The URI for this ontology.\r\n@param CONSTANT-PREFIX\r\n\t\tSTRINGP; A string that is prefixed to names of new constants (first-char downcased for preds).\r\n@param SOURCE\r\n\t\tfile or url; Where to import from. Defaults to URI.\r\n@param ONTOLOGY\r\n\t\tCYCL-DENOTATIONAL-TERM-P; The #$Ontology wrt which #$synonymousExternalConcept assertions are made.\r\n@param QUOTED-ISA\r\n\t\tCYCL-DENOTATIONAL-TERM-P; A collection of which all newly reified constants will be quoted instances.\r\n@param CYCLIST\r\n\t\tCYCLIST?; The Cyclist cited as the creator of all new constants and assertions.\r\n@return NON-NEGATIVE-INTEGERP the id of the importer doing the work.")
    public static final SubLObject import_owl_ontology_with_importer_alt(SubLObject uri, SubLObject constant_prefix, SubLObject source, SubLObject ontology, SubLObject contextualizeP, SubLObject use_namespaceP, SubLObject quoted_isa, SubLObject cyclist) {
        if (source == UNPROVIDED) {
            source = uri;
        }
        if (ontology == UNPROVIDED) {
            ontology = NIL;
        }
        if (contextualizeP == UNPROVIDED) {
            contextualizeP = NIL;
        }
        if (use_namespaceP == UNPROVIDED) {
            use_namespaceP = NIL;
        }
        if (quoted_isa == UNPROVIDED) {
            quoted_isa = NIL;
        }
        if (cyclist == UNPROVIDED) {
            cyclist = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            uri = string_utilities.strip_final_if_char(uri, CHAR_hash);
            if (NIL == ontology) {
                ontology = com.cyc.cycjava.cycl.owl.owl_to_cycl.find_or_create_owl_ontology_for_uri(uri, UNPROVIDED, UNPROVIDED);
            }
            if (NIL == quoted_isa) {
                quoted_isa = com.cyc.cycjava.cycl.owl.owl_to_cycl.find_or_create_term_type_for_ontology(ontology, UNPROVIDED);
            }
            if (NIL == string_utilities.non_empty_string_p(source)) {
                source = uri;
            }
            if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                if (!((NIL != web_utilities.uri_p(source, UNPROVIDED)) || (NIL != file_utilities.file_existsP(source)))) {
                    Errors.error($str_alt64$Can_only_import_OWL_ontologies_fr);
                }
            }
            {
                SubLObject _prev_bind_0 = api_control_vars.$the_cyclist$.currentBinding(thread);
                try {
                    api_control_vars.$the_cyclist$.bind(NIL, thread);
                    operation_communication.set_the_cyclist(cyclist);
                    ke.ensure_cyclist_ok();
                } finally {
                    api_control_vars.$the_cyclist$.rebind(_prev_bind_0, thread);
                }
            }
            SubLTrampolineFile.checkType(uri, URI_P);
            {
                SubLObject importer = com.cyc.cycjava.cycl.owl.owl_to_cycl.new_owl_importer();
                process_utilities.make_cyc_server_process_with_args($$$OWL_Importer, OWL_IMPORTER_RUN, list(new SubLObject[]{ importer, uri, constant_prefix, source, ontology, quoted_isa, cyclist, contextualizeP, use_namespaceP }));
                return com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_importer_id(importer);
            }
        }
    }

    @LispMethod(comment = "Imports an OWL ontology.\r\n\r\n@param URI\r\n\t\turi-p; The URI for this ontology.\r\n@param CONSTANT-PREFIX\r\n\t\tSTRINGP; A string that is prefixed to names of new constants (first-char downcased for preds).\r\n@param SOURCE\r\n\t\tfile or url; Where to import from. Defaults to URI.\r\n@param ONTOLOGY\r\n\t\tCYCL-DENOTATIONAL-TERM-P; The #$Ontology wrt which #$synonymousExternalConcept assertions are made.\r\n@param QUOTED-ISA\r\n\t\tCYCL-DENOTATIONAL-TERM-P; A collection of which all newly reified constants will be quoted instances.\r\n@param CYCLIST\r\n\t\tCYCLIST?; The Cyclist cited as the creator of all new constants and assertions.\r\n@return NON-NEGATIVE-INTEGERP the id of the importer doing the work.")
    public static SubLObject import_owl_ontology_with_importer(final SubLObject uri, final SubLObject constant_prefix, SubLObject source, SubLObject ontology, SubLObject prefix_external_namesP, SubLObject abbreviate_prefixesP, SubLObject quoted_isa, SubLObject cyclist) {
        if (source == UNPROVIDED) {
            source = uri;
        }
        if (ontology == UNPROVIDED) {
            ontology = NIL;
        }
        if (prefix_external_namesP == UNPROVIDED) {
            prefix_external_namesP = NIL;
        }
        if (abbreviate_prefixesP == UNPROVIDED) {
            abbreviate_prefixesP = NIL;
        }
        if (quoted_isa == UNPROVIDED) {
            quoted_isa = NIL;
        }
        if (cyclist == UNPROVIDED) {
            cyclist = $the_cyclist$.getDynamicValue();
        }
        return owl_to_cycl.import_owl_ontology_with_importer_from_info(make_plist(owl_to_cycl.$list669, list(uri, constant_prefix, source, ontology, prefix_external_namesP, abbreviate_prefixesP, quoted_isa, cyclist)));
    }

    public static SubLObject import_owl_ontology_with_importer_from_info(final SubLObject import_info) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject uri = getf(import_info, $URI, UNPROVIDED);
        final SubLObject uri_prefix = getf(import_info, $URI_PREFIX, UNPROVIDED);
        final SubLObject constant_prefix = getf(import_info, $CONSTANT_PREFIX, UNPROVIDED);
        final SubLObject constant_suffix = getf(import_info, $CONSTANT_SUFFIX, UNPROVIDED);
        SubLObject source = getf(import_info, $SOURCE, UNPROVIDED);
        SubLObject ontology = getf(import_info, $ONTOLOGY, UNPROVIDED);
        final SubLObject prefix_external_namesP = getf(import_info, owl_to_cycl.$kw69$PREFIX_EXTERNAL_NAMES_, UNPROVIDED);
        final SubLObject abbreviate_prefixesP = getf(import_info, owl_to_cycl.$kw70$ABBREVIATE_PREFIXES_, UNPROVIDED);
        SubLObject quoted_isa = getf(import_info, $QUOTED_ISA, UNPROVIDED);
        SubLObject cyclist = getf(import_info, $CYCLIST, UNPROVIDED);
        if (NIL == cyclist) {
            cyclist = $the_cyclist$.getDynamicValue(thread);
        }
        uri = strip_final_if_char(uri, CHAR_hash);
        if (NIL == ontology) {
            ontology = owl_to_cycl.find_or_create_owl_ontology_for_uri(uri, UNPROVIDED, UNPROVIDED);
        }
        if (NIL == quoted_isa) {
            quoted_isa = owl_to_cycl.find_or_create_term_type_for_ontology(ontology, UNPROVIDED);
        }
        if (NIL == non_empty_string_p(source)) {
            source = uri;
        }
        if (((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == uri_p(source, UNPROVIDED))) && (NIL == file_existsP(source))) {
            Errors.error(owl_to_cycl.$str71$Can_only_import_OWL_ontologies_fr);
        }
        final SubLObject _prev_bind_0 = $the_cyclist$.currentBinding(thread);
        try {
            $the_cyclist$.bind(NIL, thread);
            set_the_cyclist(cyclist);
            ensure_cyclist_ok();
        } finally {
            $the_cyclist$.rebind(_prev_bind_0, thread);
        }
        assert NIL != uri_p(uri, UNPROVIDED) : "! web_utilities.uri_p(uri, .UNPROVIDED) " + ("web_utilities.uri_p(uri, CommonSymbols.UNPROVIDED) " + "CommonSymbols.NIL != web_utilities.uri_p(uri, CommonSymbols.UNPROVIDED) ") + uri;
        final SubLObject importer = owl_to_cycl.new_owl_importer();
        process_utilities.make_cyc_server_process_with_args(owl_to_cycl.$$$OWL_Importer, owl_to_cycl.OWL_IMPORTER_RUN, list(make_plist(owl_to_cycl.$list672, list(new SubLObject[]{ importer, uri, constant_prefix, constant_suffix, uri_prefix, source, ontology, quoted_isa, cyclist, prefix_external_namesP, abbreviate_prefixesP }))));
        return owl_to_cycl.owl_importer_id(importer);
    }

    public static final SubLObject get_owl_importer_ontology_alt(SubLObject importer_id) {
        {
            SubLObject importer = com.cyc.cycjava.cycl.owl.owl_to_cycl.find_owl_importer_by_id(importer_id);
            SubLObject import_parameters = (NIL != importer) ? ((SubLObject) (com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_importer_import_parameters(importer))) : NIL;
            return NIL != import_parameters ? ((SubLObject) (com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_import_parameters_ontology(import_parameters))) : NIL;
        }
    }

    public static SubLObject get_owl_importer_ontology(final SubLObject importer_id) {
        final SubLObject importer = owl_to_cycl.find_owl_importer_by_id(importer_id);
        final SubLObject import_parameters = (NIL != importer) ? owl_to_cycl.owl_importer_import_parameters(importer) : NIL;
        return NIL != import_parameters ? owl_to_cycl.owl_import_parameters_ontology(import_parameters) : NIL;
    }

    public static final SubLObject get_owl_importer_progress_alt(SubLObject importer_id) {
        {
            SubLObject importer = com.cyc.cycjava.cycl.owl.owl_to_cycl.find_owl_importer_by_id(importer_id);
            return NIL != importer ? ((SubLObject) (copy_list(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_importer_progress(importer)))) : NIL;
        }
    }

    public static SubLObject get_owl_importer_progress(final SubLObject importer_id) {
        final SubLObject importer = owl_to_cycl.find_owl_importer_by_id(importer_id);
        return NIL != importer ? copy_list(owl_to_cycl.owl_importer_progress(importer)) : NIL;
    }

    public static final SubLObject get_owl_importer_error_info_alt(SubLObject importer_id) {
        {
            SubLObject importer = com.cyc.cycjava.cycl.owl.owl_to_cycl.find_owl_importer_by_id(importer_id);
            return NIL != importer ? ((SubLObject) (copy_list(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_importer_error_info(importer)))) : NIL;
        }
    }

    public static SubLObject get_owl_importer_error_info(final SubLObject importer_id) {
        final SubLObject importer = owl_to_cycl.find_owl_importer_by_id(importer_id);
        return NIL != importer ? copy_list(owl_to_cycl.owl_importer_error_info(importer)) : NIL;
    }

    public static final SubLObject owl_importer_done_p_alt(SubLObject importer_id) {
        {
            SubLObject importer = com.cyc.cycjava.cycl.owl.owl_to_cycl.find_owl_importer_by_id(importer_id);
            return eql(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_importer_progress(importer).first(), $DONE);
        }
    }

    public static SubLObject owl_importer_done_p(final SubLObject importer_id) {
        final SubLObject importer = owl_to_cycl.find_owl_importer_by_id(importer_id);
        return eql(owl_to_cycl.owl_importer_progress(importer).first(), $DONE);
    }

    public static final SubLObject owl_importer_exists_p_alt(SubLObject importer_id) {
        return list_utilities.sublisp_boolean(com.cyc.cycjava.cycl.owl.owl_to_cycl.find_owl_importer_by_id(importer_id));
    }

    public static SubLObject owl_importer_exists_p(final SubLObject importer_id) {
        return sublisp_boolean(owl_to_cycl.find_owl_importer_by_id(importer_id));
    }

    public static final SubLObject owl_importer_id_index_alt() {
        if (NIL == id_index_p($owl_importer_id_index$.getGlobalValue())) {
            $owl_importer_id_index$.setGlobalValue(new_id_index($int$32, ZERO_INTEGER));
        }
        return $owl_importer_id_index$.getGlobalValue();
    }

    public static SubLObject owl_importer_id_index() {
        if (NIL == id_index_p(owl_to_cycl.$owl_importer_id_index$.getGlobalValue())) {
            owl_to_cycl.$owl_importer_id_index$.setGlobalValue(new_id_index($int$32, ZERO_INTEGER));
        }
        return owl_to_cycl.$owl_importer_id_index$.getGlobalValue();
    }

    public static final SubLObject find_owl_importer_by_id_alt(SubLObject id) {
        return id_index_lookup(com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_importer_id_index(), id, NIL);
    }

    public static SubLObject find_owl_importer_by_id(final SubLObject id) {
        return id_index_lookup(owl_to_cycl.owl_importer_id_index(), id, NIL);
    }

    public static final SubLObject note_owl_import_parameters_alt(SubLObject import_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (NIL != $owl_importer$.getDynamicValue(thread)) {
                com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_owl_imp_import_parameters($owl_importer$.getDynamicValue(thread), import_parameters);
            }
            return import_parameters;
        }
    }

    public static SubLObject note_owl_import_parameters(final SubLObject import_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != owl_to_cycl.$owl_importer$.getDynamicValue(thread)) {
            owl_to_cycl._csetf_owl_imp_import_parameters(owl_to_cycl.$owl_importer$.getDynamicValue(thread), import_parameters);
        }
        return import_parameters;
    }

    public static final SubLObject note_owl_import_section_progress_alt(SubLObject percent_done) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (NIL != $owl_importer$.getDynamicValue(thread)) {
                {
                    SubLObject item = com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_importer_progress($owl_importer$.getDynamicValue(thread)).first();
                    SubLObject start_time = item.first();
                    set_nth(ONE_INTEGER, item, percent_done);
                    set_nth(TWO_INTEGER, item, subl_promotions.elapsed_universal_time(start_time, UNPROVIDED));
                }
            }
            return NIL;
        }
    }

    public static SubLObject note_owl_import_section_progress(final SubLObject percent_done) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != owl_to_cycl.$owl_importer$.getDynamicValue(thread)) {
            final SubLObject item = owl_to_cycl.owl_importer_progress(owl_to_cycl.$owl_importer$.getDynamicValue(thread)).first();
            final SubLObject start_time = item.first();
            set_nth(ONE_INTEGER, item, percent_done);
            set_nth(TWO_INTEGER, item, elapsed_universal_time(start_time, UNPROVIDED));
        }
        return NIL;
    }

    public static final SubLObject note_owl_import_section_started_alt() {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (NIL != $owl_importer$.getDynamicValue(thread)) {
                com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_owl_imp_progress($owl_importer$.getDynamicValue(thread), cons(list(get_universal_time(), ZERO_INTEGER, ZERO_INTEGER), com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_imp_progress($owl_importer$.getDynamicValue(thread))));
            }
            return NIL;
        }
    }

    public static SubLObject note_owl_import_section_started() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != owl_to_cycl.$owl_importer$.getDynamicValue(thread)) {
            owl_to_cycl._csetf_owl_imp_progress(owl_to_cycl.$owl_importer$.getDynamicValue(thread), cons(list(get_universal_time(), ZERO_INTEGER, ZERO_INTEGER), owl_to_cycl.owl_imp_progress(owl_to_cycl.$owl_importer$.getDynamicValue(thread))));
        }
        return NIL;
    }

    public static final SubLObject note_owl_import_section_done_alt() {
        com.cyc.cycjava.cycl.owl.owl_to_cycl.note_owl_import_section_progress(ONE_INTEGER);
        return NIL;
    }

    public static SubLObject note_owl_import_section_done() {
        owl_to_cycl.note_owl_import_section_progress(ONE_INTEGER);
        return NIL;
    }

    public static final SubLObject note_owl_import_done_alt() {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (NIL != $owl_importer$.getDynamicValue(thread)) {
                com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_owl_imp_progress($owl_importer$.getDynamicValue(thread), cons($DONE, com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_imp_progress($owl_importer$.getDynamicValue(thread))));
            }
            return NIL;
        }
    }

    public static SubLObject note_owl_import_done() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != owl_to_cycl.$owl_importer$.getDynamicValue(thread)) {
            owl_to_cycl._csetf_owl_imp_progress(owl_to_cycl.$owl_importer$.getDynamicValue(thread), cons($DONE, owl_to_cycl.owl_imp_progress(owl_to_cycl.$owl_importer$.getDynamicValue(thread))));
        }
        return NIL;
    }

    public static final SubLObject note_owl_import_problem_alt(SubLObject item, SubLObject message) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (NIL != $owl_importer$.getDynamicValue(thread)) {
                com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_owl_imp_error_info($owl_importer$.getDynamicValue(thread), cons(list(item, message), com.cyc.cycjava.cycl.owl.owl_to_cycl.owl_imp_error_info($owl_importer$.getDynamicValue(thread))));
            }
            return NIL;
        }
    }

    public static SubLObject note_owl_import_problem(final SubLObject item, final SubLObject message) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != owl_to_cycl.$owl_importer$.getDynamicValue(thread)) {
            owl_to_cycl._csetf_owl_imp_error_info(owl_to_cycl.$owl_importer$.getDynamicValue(thread), cons(list(item, message), owl_to_cycl.owl_imp_error_info(owl_to_cycl.$owl_importer$.getDynamicValue(thread))));
        }
        return NIL;
    }

    public static final SubLObject owl_importer_run(SubLObject importer, SubLObject uri, SubLObject constant_prefix, SubLObject source, SubLObject ontology, SubLObject quoted_isa, SubLObject cyclist, SubLObject contextualizeP, SubLObject use_namespaceP) {
        if (source == UNPROVIDED) {
            source = uri;
        }
        if (ontology == UNPROVIDED) {
            ontology = NIL;
        }
        if (quoted_isa == UNPROVIDED) {
            quoted_isa = NIL;
        }
        if (cyclist == UNPROVIDED) {
            cyclist = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        if (contextualizeP == UNPROVIDED) {
            contextualizeP = NIL;
        }
        if (use_namespaceP == UNPROVIDED) {
            use_namespaceP = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            com.cyc.cycjava.cycl.owl.owl_to_cycl._csetf_owl_imp_thread(importer, current_process());
            {
                SubLObject _prev_bind_0 = $owl_importer$.currentBinding(thread);
                SubLObject _prev_bind_1 = $silent_progressP$.currentBinding(thread);
                try {
                    $owl_importer$.bind(importer, thread);
                    $silent_progressP$.bind(T, thread);
                    com.cyc.cycjava.cycl.owl.owl_to_cycl.import_owl_ontology(uri, constant_prefix, source, ontology, quoted_isa, cyclist, contextualizeP, use_namespaceP);
                } finally {
                    $silent_progressP$.rebind(_prev_bind_1, thread);
                    $owl_importer$.rebind(_prev_bind_0, thread);
                }
            }
            return importer;
        }
    }

    public static SubLObject owl_importer_run(final SubLObject import_info) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject importer = getf(import_info, $IMPORTER, UNPROVIDED);
        owl_to_cycl._csetf_owl_imp_thread(importer, current_process());
        final SubLObject _prev_bind_0 = owl_to_cycl.$owl_importer$.currentBinding(thread);
        final SubLObject _prev_bind_2 = $silent_progressP$.currentBinding(thread);
        try {
            owl_to_cycl.$owl_importer$.bind(importer, thread);
            $silent_progressP$.bind(T, thread);
            owl_to_cycl.import_owl_ontology_from_info(import_info);
        } finally {
            $silent_progressP$.rebind(_prev_bind_2, thread);
            owl_to_cycl.$owl_importer$.rebind(_prev_bind_0, thread);
        }
        return importer;
    }

    public static final SubLObject import_sample_ontologies_alt() {
        com.cyc.cycjava.cycl.owl.owl_to_cycl.import_owl_ontology($str_alt634$http___www_w3_org_TR_owl_guide_wi, $str_alt635$WINE_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        {
            SubLObject cdolist_list_var = $sweet_ontologies$.getGlobalValue();
            SubLObject ontology = NIL;
            for (ontology = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , ontology = cdolist_list_var.first()) {
                com.cyc.cycjava.cycl.owl.owl_to_cycl.import_owl_ontology(cconcatenate($sweet_root$.getGlobalValue(), new SubLObject[]{ ontology, $str_alt636$_owl }), $str_alt637$SWEET_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
        }
        com.cyc.cycjava.cycl.owl.owl_to_cycl.import_owl_ontology($str_alt638$http___reliant_teknowledge_com_DA, $str_alt639$SUMO_, $str_alt640$http___open_meta_com_SUMO_owl, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        com.cyc.cycjava.cycl.owl.owl_to_cycl.import_owl_ontology($str_alt641$http___kmf_patrick_afspc_ds_af_mi, $str_alt642$KMF_, $str_alt643$_home_baxter_tmp_decision_support, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        return NIL;
    }

    public static SubLObject import_sample_ontologies() {
        owl_to_cycl.import_owl_ontology(owl_to_cycl.$str677$http___www_w3_org_TR_owl_guide_wi, owl_to_cycl.$str678$WINE_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        SubLObject cdolist_list_var = owl_to_cycl.$sweet_ontologies$.getGlobalValue();
        SubLObject ontology = NIL;
        ontology = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            owl_to_cycl.import_owl_ontology(cconcatenate(owl_to_cycl.$sweet_root$.getGlobalValue(), new SubLObject[]{ ontology, owl_to_cycl.$str679$_owl }), owl_to_cycl.$str680$SWEET_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            ontology = cdolist_list_var.first();
        } 
        owl_to_cycl.import_owl_ontology(owl_to_cycl.$str681$http___reliant_teknowledge_com_DA, owl_to_cycl.$str682$SUMO_, owl_to_cycl.$str683$http___open_meta_com_SUMO_owl, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        owl_to_cycl.import_owl_ontology(owl_to_cycl.$str684$http___kmf_patrick_afspc_ds_af_mi, owl_to_cycl.$str685$KMF_, owl_to_cycl.$str686$_home_baxter_tmp_decision_support, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        return NIL;
    }

    public static final SubLObject declare_owl_to_cycl_file_alt() {
        declareFunction("owl_importer_v1_version_number", "OWL-IMPORTER-V1-VERSION-NUMBER", 0, 0, false);
        declareFunction("current_owl_importer", "CURRENT-OWL-IMPORTER", 0, 0, false);
        declareFunction("guess_terms_for_owl_term", "GUESS-TERMS-FOR-OWL-TERM", 3, 0, false);
        declareFunction("root_classes_of_owl_ontology", "ROOT-CLASSES-OF-OWL-ONTOLOGY", 1, 0, false);
        declareFunction("clear_owl_importer_caches", "CLEAR-OWL-IMPORTER-CACHES", 0, 0, false);
        declareFunction("root_classes_of_owl_ontology_via_inference", "ROOT-CLASSES-OF-OWL-ONTOLOGY-VIA-INFERENCE", 1, 0, false);
        declareFunction("term_of_owl_ontologyP_via_index", "TERM-OF-OWL-ONTOLOGY?-VIA-INDEX", 2, 0, false);
        declareFunction("term_of_some_owl_ontologyP_via_index_internal", "TERM-OF-SOME-OWL-ONTOLOGY?-VIA-INDEX-INTERNAL", 1, 0, false);
        declareFunction("term_of_some_owl_ontologyP_via_index", "TERM-OF-SOME-OWL-ONTOLOGY?-VIA-INDEX", 1, 0, false);
        declareFunction("all_terms_of_owl_ontology_via_index", "ALL-TERMS-OF-OWL-ONTOLOGY-VIA-INDEX", 1, 0, false);
        declareFunction("owl_ontology_percent_of_classes_merged", "OWL-ONTOLOGY-PERCENT-OF-CLASSES-MERGED", 1, 0, false);
        declareFunction("owl_ontology_average_class_depth", "OWL-ONTOLOGY-AVERAGE-CLASS-DEPTH", 1, 0, false);
        declareFunction("owl_ontology_average_root_class_depth", "OWL-ONTOLOGY-AVERAGE-ROOT-CLASS-DEPTH", 1, 0, false);
        declareFunction("all_classes_of_owl_ontology_via_index", "ALL-CLASSES-OF-OWL-ONTOLOGY-VIA-INDEX", 1, 0, false);
        declareFunction("owl_class_mergedP_via_index", "OWL-CLASS-MERGED?-VIA-INDEX", 1, 0, false);
        declareFunction("owl_class_merged_upwardP_via_index", "OWL-CLASS-MERGED-UPWARD?-VIA-INDEX", 1, 0, false);
        declareFunction("owl_class_merged_downwardP_via_index", "OWL-CLASS-MERGED-DOWNWARD?-VIA-INDEX", 1, 0, false);
        declareFunction("owl_merge_mt", "OWL-MERGE-MT", 0, 0, false);
        declareFunction("owl_merge_assert", "OWL-MERGE-ASSERT", 1, 0, false);
        declareFunction("merge_owl_class_with_collection", "MERGE-OWL-CLASS-WITH-COLLECTION", 2, 0, false);
        declareFunction("merge_owl_term_with_cyc_term", "MERGE-OWL-TERM-WITH-CYC-TERM", 2, 0, false);
        declareFunction("link_owl_class_down_to_collection", "LINK-OWL-CLASS-DOWN-TO-COLLECTION", 2, 0, false);
        declareFunction("link_owl_class_up_to_collection", "LINK-OWL-CLASS-UP-TO-COLLECTION", 2, 0, false);
        declareFunction("next_owl_term_to_merge_for_ontology", "NEXT-OWL-TERM-TO-MERGE-FOR-ONTOLOGY", 1, 0, false);
        declareFunction("memoized_count_all_specs_internal", "MEMOIZED-COUNT-ALL-SPECS-INTERNAL", 1, 0, false);
        declareFunction("memoized_count_all_specs", "MEMOIZED-COUNT-ALL-SPECS", 1, 0, false);
        declareFunction("longest_acyclic_genls_path_length", "LONGEST-ACYCLIC-GENLS-PATH-LENGTH", 2, 1, false);
        declareFunction("longest_acyclic_genls_path", "LONGEST-ACYCLIC-GENLS-PATH", 2, 1, false);
        declareFunction("longest_acyclic_genls_path_internal_internal", "LONGEST-ACYCLIC-GENLS-PATH-INTERNAL-INTERNAL", 3, 0, false);
        declareFunction("longest_acyclic_genls_path_internal", "LONGEST-ACYCLIC-GENLS-PATH-INTERNAL", 3, 0, false);
        declareFunction("owl_min_genls_memoized_internal", "OWL-MIN-GENLS-MEMOIZED-INTERNAL", 1, 0, false);
        declareFunction("owl_min_genls_memoized", "OWL-MIN-GENLS-MEMOIZED", 1, 0, false);
        declareFunction("genls_tree_with_root_via_index", "GENLS-TREE-WITH-ROOT-VIA-INDEX", 1, 2, false);
        declareFunction("genls_tree_with_root_via_index_internal", "GENLS-TREE-WITH-ROOT-VIA-INDEX-INTERNAL", 4, 0, false);
        declareFunction("root_classes_of_owl_ontology_via_index", "ROOT-CLASSES-OF-OWL-ONTOLOGY-VIA-INDEX", 1, 0, false);
        declareFunction("guess_forts_from_owl_term_name", "GUESS-FORTS-FROM-OWL-TERM-NAME", 1, 0, false);
        declareFunction("guess_forts_from_owl_term_name_non_partitioned", "GUESS-FORTS-FROM-OWL-TERM-NAME-NON-PARTITIONED", 1, 0, false);
        declareFunction("partition_cycl_terms_for_owl_term_name", "PARTITION-CYCL-TERMS-FOR-OWL-TERM-NAME", 2, 0, false);
        declareFunction("owl_term_names", "OWL-TERM-NAMES", 0, 0, false);
        declareFunction("new_owl_definition_accumulator", "NEW-OWL-DEFINITION-ACCUMULATOR", 0, 0, false);
        declareFunction("accumulate_owl_definition", "ACCUMULATE-OWL-DEFINITION", 2, 0, false);
        declareFunction("find_accumulated_owl_definition", "FIND-ACCUMULATED-OWL-DEFINITION", 2, 0, false);
        declareFunction("accumulated_owl_definitions_of_type", "ACCUMULATED-OWL-DEFINITIONS-OF-TYPE", 1, 0, false);
        declareFunction("set_accumulated_owl_definitions_of_type", "SET-ACCUMULATED-OWL-DEFINITIONS-OF-TYPE", 2, 0, false);
        declareFunction("owl_accumulator_index_for_type", "OWL-ACCUMULATOR-INDEX-FOR-TYPE", 1, 0, false);
        declareFunction("import_owl_ontology", "IMPORT-OWL-ONTOLOGY", 2, 6, false);
        declareFunction("clear_xml_tokens_from_file", "CLEAR-XML-TOKENS-FROM-FILE", 0, 0, false);
        declareFunction("remove_xml_tokens_from_file", "REMOVE-XML-TOKENS-FROM-FILE", 1, 0, false);
        declareFunction("xml_tokens_from_file_internal", "XML-TOKENS-FROM-FILE-INTERNAL", 1, 0, false);
        declareFunction("xml_tokens_from_file", "XML-TOKENS-FROM-FILE", 1, 0, false);
        declareFunction("import_owl_ontology_internal", "IMPORT-OWL-ONTOLOGY-INTERNAL", 4, 0, false);
        declareFunction("note_owl_file_encoding", "NOTE-OWL-FILE-ENCODING", 2, 0, false);
        declareFunction("reify_term_for_new_import", "REIFY-TERM-FOR-NEW-IMPORT", 1, 0, false);
        declareFunction("owl_ontology_name", "OWL-ONTOLOGY-NAME", 1, 0, false);
        declareFunction("note_import_start_time", "NOTE-IMPORT-START-TIME", 2, 0, false);
        declareFunction("note_import_ontology", "NOTE-IMPORT-ONTOLOGY", 2, 0, false);
        declareFunction("note_import_cyclist", "NOTE-IMPORT-CYCLIST", 2, 0, false);
        declareFunction("note_import_end_time", "NOTE-IMPORT-END-TIME", 2, 0, false);
        declareFunction("import_owl_ontology_info", "IMPORT-OWL-ONTOLOGY-INFO", 3, 0, false);
        declareFunction("note_owl_ontology_base_uri", "NOTE-OWL-ONTOLOGY-BASE-URI", 2, 0, false);
        declareFunction("find_owl_ontology_base_uri", "FIND-OWL-ONTOLOGY-BASE-URI", 1, 0, false);
        declareFunction("clear_owl_import_parameters_ontology_context", "CLEAR-OWL-IMPORT-PARAMETERS-ONTOLOGY-CONTEXT", 0, 0, false);
        declareFunction("remove_owl_import_parameters_ontology_context", "REMOVE-OWL-IMPORT-PARAMETERS-ONTOLOGY-CONTEXT", 1, 0, false);
        declareFunction("owl_import_parameters_ontology_context_internal", "OWL-IMPORT-PARAMETERS-ONTOLOGY-CONTEXT-INTERNAL", 1, 0, false);
        declareFunction("owl_import_parameters_ontology_context", "OWL-IMPORT-PARAMETERS-ONTOLOGY-CONTEXT", 1, 0, false);
        declareFunction("get_owl_ontology_context", "GET-OWL-ONTOLOGY-CONTEXT", 1, 0, false);
        declareFunction("import_owl_ontology_info_internal", "IMPORT-OWL-ONTOLOGY-INFO-INTERNAL", 3, 0, false);
        declareFunction("owl_pred_info_print_function_trampoline", "OWL-PRED-INFO-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
        declareFunction("owl_pred_info_p", "OWL-PRED-INFO-P", 1, 0, false);
        new com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_pred_info_p$UnaryFunction();
        declareFunction("opi_cyc_name", "OPI-CYC-NAME", 1, 0, false);
        declareFunction("opi_comment", "OPI-COMMENT", 1, 0, false);
        declareFunction("opi_domains", "OPI-DOMAINS", 1, 0, false);
        declareFunction("opi_range", "OPI-RANGE", 1, 0, false);
        declareFunction("opi_plist", "OPI-PLIST", 1, 0, false);
        declareFunction("_csetf_opi_cyc_name", "_CSETF-OPI-CYC-NAME", 2, 0, false);
        declareFunction("_csetf_opi_comment", "_CSETF-OPI-COMMENT", 2, 0, false);
        declareFunction("_csetf_opi_domains", "_CSETF-OPI-DOMAINS", 2, 0, false);
        declareFunction("_csetf_opi_range", "_CSETF-OPI-RANGE", 2, 0, false);
        declareFunction("_csetf_opi_plist", "_CSETF-OPI-PLIST", 2, 0, false);
        declareFunction("make_owl_pred_info", "MAKE-OWL-PRED-INFO", 0, 1, false);
        declareFunction("print_owl_pred_info", "PRINT-OWL-PRED-INFO", 3, 0, false);
        declareFunction("find_or_create_owl_pred_info", "FIND-OR-CREATE-OWL-PRED-INFO", 1, 0, false);
        declareFunction("new_owl_pred_info", "NEW-OWL-PRED-INFO", 1, 4, false);
        declareFunction("owl_pred_info_cyc_name", "OWL-PRED-INFO-CYC-NAME", 1, 0, false);
        declareFunction("owl_pred_info_comment", "OWL-PRED-INFO-COMMENT", 1, 0, false);
        declareFunction("owl_pred_info_domains", "OWL-PRED-INFO-DOMAINS", 1, 0, false);
        declareFunction("owl_pred_info_range", "OWL-PRED-INFO-RANGE", 1, 0, false);
        declareFunction("owl_pred_info_plist", "OWL-PRED-INFO-PLIST", 1, 0, false);
        declareFunction("owl_pred_info_plist_lookup", "OWL-PRED-INFO-PLIST-LOOKUP", 2, 1, false);
        declareFunction("owl_pred_info_external_name", "OWL-PRED-INFO-EXTERNAL-NAME", 1, 1, false);
        declareFunction("set_owl_pred_info_cyc_name", "SET-OWL-PRED-INFO-CYC-NAME", 2, 0, false);
        declareFunction("set_owl_pred_info_comment", "SET-OWL-PRED-INFO-COMMENT", 2, 0, false);
        declareFunction("set_owl_pred_info_domains", "SET-OWL-PRED-INFO-DOMAINS", 2, 0, false);
        declareFunction("set_owl_pred_info_range", "SET-OWL-PRED-INFO-RANGE", 2, 0, false);
        declareFunction("owl_external_value_specification_p", "OWL-EXTERNAL-VALUE-SPECIFICATION-P", 1, 0, false);
        declareFunction("node_id_specification_p", "NODE-ID-SPECIFICATION-P", 1, 0, false);
        declareFunction("owl_restriction_p", "OWL-RESTRICTION-P", 1, 0, false);
        declareFunction("owl_external_value_specification_union_p", "OWL-EXTERNAL-VALUE-SPECIFICATION-UNION-P", 1, 0, false);
        declareFunction("owl_external_value_specification_union_names", "OWL-EXTERNAL-VALUE-SPECIFICATION-UNION-NAMES", 1, 0, false);
        declareFunction("owl_external_value_specification_intersection_p", "OWL-EXTERNAL-VALUE-SPECIFICATION-INTERSECTION-P", 1, 0, false);
        declareFunction("owl_external_value_specification_intersection_names", "OWL-EXTERNAL-VALUE-SPECIFICATION-INTERSECTION-NAMES", 1, 0, false);
        declareFunction("owl_external_term_enumeration_p", "OWL-EXTERNAL-TERM-ENUMERATION-P", 1, 0, false);
        declareFunction("owl_external_term_enumeration_terms", "OWL-EXTERNAL-TERM-ENUMERATION-TERMS", 1, 0, false);
        declareFunction("owl_pred_info_plist_enter", "OWL-PRED-INFO-PLIST-ENTER", 3, 0, false);
        declareFunction("owl_pred_info_plist_push", "OWL-PRED-INFO-PLIST-PUSH", 3, 0, false);
        declareFunction("sxhash_owl_pred_info_method", "SXHASH-OWL-PRED-INFO-METHOD", 1, 0, false);
        declareFunction("sxhash_owl_pred_info", "SXHASH-OWL-PRED-INFO", 1, 0, false);
        declareFunction("owl_import_parameters_print_function_trampoline", "OWL-IMPORT-PARAMETERS-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
        declareFunction("owl_import_parameters_p", "OWL-IMPORT-PARAMETERS-P", 1, 0, false);
        new com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_import_parameters_p$UnaryFunction();
        declareFunction("oip_ontology", "OIP-ONTOLOGY", 1, 0, false);
        declareFunction("oip_namespace_map", "OIP-NAMESPACE-MAP", 1, 0, false);
        declareFunction("oip_constant_prefix", "OIP-CONSTANT-PREFIX", 1, 0, false);
        declareFunction("oip_base_uri", "OIP-BASE-URI", 1, 0, false);
        declareFunction("oip_cyclist", "OIP-CYCLIST", 1, 0, false);
        declareFunction("oip_quoted_isa", "OIP-QUOTED-ISA", 1, 0, false);
        declareFunction("oip_prefix_external_namesP", "OIP-PREFIX-EXTERNAL-NAMES?", 1, 0, false);
        declareFunction("oip_abbreviate_prefixesP", "OIP-ABBREVIATE-PREFIXES?", 1, 0, false);
        declareFunction("oip_import_term", "OIP-IMPORT-TERM", 1, 0, false);
        declareFunction("oip_encoding", "OIP-ENCODING", 1, 0, false);
        declareFunction("_csetf_oip_ontology", "_CSETF-OIP-ONTOLOGY", 2, 0, false);
        declareFunction("_csetf_oip_namespace_map", "_CSETF-OIP-NAMESPACE-MAP", 2, 0, false);
        declareFunction("_csetf_oip_constant_prefix", "_CSETF-OIP-CONSTANT-PREFIX", 2, 0, false);
        declareFunction("_csetf_oip_base_uri", "_CSETF-OIP-BASE-URI", 2, 0, false);
        declareFunction("_csetf_oip_cyclist", "_CSETF-OIP-CYCLIST", 2, 0, false);
        declareFunction("_csetf_oip_quoted_isa", "_CSETF-OIP-QUOTED-ISA", 2, 0, false);
        declareFunction("_csetf_oip_prefix_external_namesP", "_CSETF-OIP-PREFIX-EXTERNAL-NAMES?", 2, 0, false);
        declareFunction("_csetf_oip_abbreviate_prefixesP", "_CSETF-OIP-ABBREVIATE-PREFIXES?", 2, 0, false);
        declareFunction("_csetf_oip_import_term", "_CSETF-OIP-IMPORT-TERM", 2, 0, false);
        declareFunction("_csetf_oip_encoding", "_CSETF-OIP-ENCODING", 2, 0, false);
        declareFunction("make_owl_import_parameters", "MAKE-OWL-IMPORT-PARAMETERS", 0, 1, false);
        declareFunction("print_owl_import_parameters", "PRINT-OWL-IMPORT-PARAMETERS", 3, 0, false);
        declareFunction("new_owl_import_parameters", "NEW-OWL-IMPORT-PARAMETERS", 5, 2, false);
        declareFunction("cyclist_using_owl_importer_v1", "CYCLIST-USING-OWL-IMPORTER-V1", 1, 0, false);
        declareFunction("owl_import_parameters_ontology", "OWL-IMPORT-PARAMETERS-ONTOLOGY", 1, 0, false);
        declareFunction("owl_import_parameters_lookup_namespace", "OWL-IMPORT-PARAMETERS-LOOKUP-NAMESPACE", 2, 0, false);
        declareFunction("owl_import_parameters_constant_prefix", "OWL-IMPORT-PARAMETERS-CONSTANT-PREFIX", 1, 0, false);
        declareFunction("owl_import_parameters_base_uri", "OWL-IMPORT-PARAMETERS-BASE-URI", 1, 0, false);
        declareFunction("owl_import_parameters_cyclist", "OWL-IMPORT-PARAMETERS-CYCLIST", 1, 0, false);
        declareFunction("owl_import_parameters_quoted_isa", "OWL-IMPORT-PARAMETERS-QUOTED-ISA", 1, 0, false);
        declareFunction("owl_import_parameters_prefix_external_namesP", "OWL-IMPORT-PARAMETERS-PREFIX-EXTERNAL-NAMES?", 1, 0, false);
        declareFunction("owl_import_parameters_abbreviate_prefixesP", "OWL-IMPORT-PARAMETERS-ABBREVIATE-PREFIXES?", 1, 0, false);
        declareFunction("owl_import_parameters_import_term", "OWL-IMPORT-PARAMETERS-IMPORT-TERM", 1, 0, false);
        declareFunction("owl_import_parameters_encoding", "OWL-IMPORT-PARAMETERS-ENCODING", 1, 0, false);
        declareFunction("owl_import_parameters_note_namespace", "OWL-IMPORT-PARAMETERS-NOTE-NAMESPACE", 3, 0, false);
        declareFunction("owl_import_parameters_note_base_uri", "OWL-IMPORT-PARAMETERS-NOTE-BASE-URI", 2, 0, false);
        declareFunction("owl_import_parameters_note_import_term", "OWL-IMPORT-PARAMETERS-NOTE-IMPORT-TERM", 2, 0, false);
        declareFunction("owl_import_parameters_note_encoding", "OWL-IMPORT-PARAMETERS-NOTE-ENCODING", 2, 0, false);
        declareFunction("sxhash_owl_import_parameters_method", "SXHASH-OWL-IMPORT-PARAMETERS-METHOD", 1, 0, false);
        declareFunction("sxhash_owl_import_parameters", "SXHASH-OWL-IMPORT-PARAMETERS", 1, 0, false);
        declareFunction("verify_imports_for_ontology_tokens", "VERIFY-IMPORTS-FOR-ONTOLOGY-TOKENS", 3, 0, false);
        declareFunction("validate_and_note_owl_namespaces", "VALIDATE-AND-NOTE-OWL-NAMESPACES", 3, 0, false);
        declareFunction("validate_and_note_owl_namespaces_for_token", "VALIDATE-AND-NOTE-OWL-NAMESPACES-FOR-TOKEN", 3, 0, false);
        declareFunction("validate_and_note_owl_namespace", "VALIDATE-AND-NOTE-OWL-NAMESPACE", 4, 0, false);
        declareFunction("owl_reserved_namespace_p", "OWL-RESERVED-NAMESPACE-P", 1, 0, false);
        declareFunction("owl_reserved_namespace_problem", "OWL-RESERVED-NAMESPACE-PROBLEM", 2, 0, false);
        declareFunction("owl_imported_namespace_problem", "OWL-IMPORTED-NAMESPACE-PROBLEM", 2, 0, false);
        declareFunction("clear_find_or_create_owl_ontology_for_uri", "CLEAR-FIND-OR-CREATE-OWL-ONTOLOGY-FOR-URI", 0, 0, false);
        declareFunction("remove_find_or_create_owl_ontology_for_uri", "REMOVE-FIND-OR-CREATE-OWL-ONTOLOGY-FOR-URI", 1, 2, false);
        declareFunction("find_or_create_owl_ontology_for_uri_internal", "FIND-OR-CREATE-OWL-ONTOLOGY-FOR-URI-INTERNAL", 3, 0, false);
        declareFunction("find_or_create_owl_ontology_for_uri", "FIND-OR-CREATE-OWL-ONTOLOGY-FOR-URI", 1, 2, false);
        declareFunction("find_or_create_term_type_for_ontology", "FIND-OR-CREATE-TERM-TYPE-FOR-ONTOLOGY", 1, 1, false);
        declareFunction("read_pred_info_from_owl_tokens", "READ-PRED-INFO-FROM-OWL-TOKENS", 2, 0, false);
        declareFunction("clear_owl_property_element_names", "CLEAR-OWL-PROPERTY-ELEMENT-NAMES", 0, 0, false);
        declareFunction("remove_owl_property_element_names", "REMOVE-OWL-PROPERTY-ELEMENT-NAMES", 0, 0, false);
        declareFunction("owl_property_element_names_internal", "OWL-PROPERTY-ELEMENT-NAMES-INTERNAL", 0, 0, false);
        declareFunction("owl_property_element_names", "OWL-PROPERTY-ELEMENT-NAMES", 0, 0, false);
        declareFunction("owl_property_token_p", "OWL-PROPERTY-TOKEN-P", 1, 0, false);
        declareFunction("read_one_owl_chunk_for_pred_info", "READ-ONE-OWL-CHUNK-FOR-PRED-INFO", 4, 0, false);
        declareFunction("cyc_token_with_nameP", "CYC-TOKEN-WITH-NAME?", 3, 0, false);
        declareFunction("process_owl_attribute_value", "PROCESS-OWL-ATTRIBUTE-VALUE", 1, 0, false);
        declareFunction("owl_note_spec_property", "OWL-NOTE-SPEC-PROPERTY", 2, 0, false);
        declareFunction("owl_lookup_spec_properties", "OWL-LOOKUP-SPEC-PROPERTIES", 1, 0, false);
        declareFunction("create_preds_from_owl_data", "CREATE-PREDS-FROM-OWL-DATA", 2, 0, false);
        declareFunction("process_domain_list", "PROCESS-DOMAIN-LIST", 2, 0, false);
        declareFunction("process_range_list", "PROCESS-RANGE-LIST", 2, 0, false);
        declareFunction("clear_owl_class_element_names", "CLEAR-OWL-CLASS-ELEMENT-NAMES", 0, 0, false);
        declareFunction("remove_owl_class_element_names", "REMOVE-OWL-CLASS-ELEMENT-NAMES", 0, 0, false);
        declareFunction("owl_class_element_names_internal", "OWL-CLASS-ELEMENT-NAMES-INTERNAL", 0, 0, false);
        declareFunction("owl_class_element_names", "OWL-CLASS-ELEMENT-NAMES", 0, 0, false);
        declareFunction("owl_class_token_p", "OWL-CLASS-TOKEN-P", 1, 0, false);
        declareFunction("read_owl_class", "READ-OWL-CLASS", 2, 0, false);
        declareFunction("handle_open_class_tag", "HANDLE-OPEN-CLASS-TAG", 3, 0, false);
        declareFunction("read_owl_enumeration", "READ-OWL-ENUMERATION", 2, 0, false);
        declareFunction("possible_read_owl_list_p", "POSSIBLE-READ-OWL-LIST-P", 1, 0, false);
        declareFunction("read_owl_list", "READ-OWL-LIST", 2, 0, false);
        declareFunction("read_owl_list_recursive", "READ-OWL-LIST-RECURSIVE", 2, 0, false);
        declareFunction("read_one_owl_list_item", "READ-ONE-OWL-LIST-ITEM", 2, 0, false);
        declareFunction("owl_external_value_specification_union", "OWL-EXTERNAL-VALUE-SPECIFICATION-UNION", 1, 0, false);
        declareFunction("first_non_whitespace_xml_token_position", "FIRST-NON-WHITESPACE-XML-TOKEN-POSITION", 1, 0, false);
        declareFunction("next_noninitial_non_whitespace_xml_token_position", "NEXT-NONINITIAL-NON-WHITESPACE-XML-TOKEN-POSITION", 1, 0, false);
        declareFunction("next_noninitial_non_whitespace_xml_token", "NEXT-NONINITIAL-NON-WHITESPACE-XML-TOKEN", 1, 0, false);
        declareFunction("pred_names_from_token", "PRED-NAMES-FROM-TOKEN", 2, 0, false);
        declareFunction("owl_pred_cyc_name_from_external_name", "OWL-PRED-CYC-NAME-FROM-EXTERNAL-NAME", 2, 0, false);
        declareFunction("owl_pred_cyc_name_base", "OWL-PRED-CYC-NAME-BASE", 1, 0, false);
        declareFunction("owl_find_or_create_pred_arg_isa", "OWL-FIND-OR-CREATE-PRED-ARG-ISA", 2, 0, false);
        declareFunction("xml_schema_class_uris_internal", "XML-SCHEMA-CLASS-URIS-INTERNAL", 0, 0, false);
        declareFunction("xml_schema_class_uris", "XML-SCHEMA-CLASS-URIS", 0, 0, false);
        declareFunction("owl_find_or_create_term_for_class", "OWL-FIND-OR-CREATE-TERM-FOR-CLASS", 1, 1, false);
        declareFunction("owl_uri_from_prefix", "OWL-URI-FROM-PREFIX", 2, 0, false);
        declareFunction("owl_find_or_create_term_of_type_internal", "OWL-FIND-OR-CREATE-TERM-OF-TYPE-INTERNAL", 3, 0, false);
        declareFunction("owl_find_or_create_term_of_type", "OWL-FIND-OR-CREATE-TERM-OF-TYPE", 3, 0, false);
        declareFunction("owl_find_or_create_term_for_class_in_ontology", "OWL-FIND-OR-CREATE-TERM-FOR-CLASS-IN-ONTOLOGY", 3, 0, false);
        declareFunction("owl_find_or_create_term_of_type_in_ontology_internal", "OWL-FIND-OR-CREATE-TERM-OF-TYPE-IN-ONTOLOGY-INTERNAL", 4, 1, false);
        declareFunction("owl_find_or_create_term_of_type_in_ontology", "OWL-FIND-OR-CREATE-TERM-OF-TYPE-IN-ONTOLOGY", 4, 1, false);
        declareFunction("create_owl_term", "CREATE-OWL-TERM", 4, 0, false);
        declareFunction("assert_synonymous_external_concept", "ASSERT-SYNONYMOUS-EXTERNAL-CONCEPT", 4, 0, false);
        declareFunction("get_synonymous_external_concept_sentence", "GET-SYNONYMOUS-EXTERNAL-CONCEPT-SENTENCE", 4, 0, false);
        declareFunction("prefix_external_owl_name", "PREFIX-EXTERNAL-OWL-NAME", 3, 0, false);
        declareFunction("uri_for_owl_ontology", "URI-FOR-OWL-ONTOLOGY", 2, 0, false);
        declareFunction("get_uri_for_owl_ontology", "GET-URI-FOR-OWL-ONTOLOGY", 1, 0, false);
        declareFunction("stringify_uri", "STRINGIFY-URI", 1, 0, false);
        declareFunction("try_to_abbreviate_owl_uri_internal", "TRY-TO-ABBREVIATE-OWL-URI-INTERNAL", 2, 0, false);
        declareFunction("try_to_abbreviate_owl_uri", "TRY-TO-ABBREVIATE-OWL-URI", 2, 0, false);
        declareFunction("load_namespace_transcripts", "LOAD-NAMESPACE-TRANSCRIPTS", 0, 0, false);
        declareFunction("try_to_abbreviate_owl_uri_recursive", "TRY-TO-ABBREVIATE-OWL-URI-RECURSIVE", 3, 0, false);
        declareFunction("owl_term_union", "OWL-TERM-UNION", 1, 0, false);
        declareFunction("cycl_term_or_owl_quasi_term_p", "CYCL-TERM-OR-OWL-QUASI-TERM-P", 1, 0, false);
        declareFunction("owl_term_intersection", "OWL-TERM-INTERSECTION", 1, 0, false);
        declareFunction("owl_term_enumeration", "OWL-TERM-ENUMERATION", 1, 0, false);
        declareFunction("oip_pred_prefix", "OIP-PRED-PREFIX", 1, 0, false);
        declareFunction("owl_define_one_pred", "OWL-DEFINE-ONE-PRED", 2, 0, false);
        declareFunction("owl_pred_types_from_info", "OWL-PRED-TYPES-FROM-INFO", 2, 0, false);
        declareFunction("owl_term_types_from_info", "OWL-TERM-TYPES-FROM-INFO", 2, 0, false);
        declareFunction("owl_define_one_pred_internal", "OWL-DEFINE-ONE-PRED-INTERNAL", 3, 0, false);
        declareFunction("owl_find_pred", "OWL-FIND-PRED", 2, 0, false);
        declareFunction("owl_find_collection", "OWL-FIND-COLLECTION", 2, 0, false);
        declareFunction("note_owl_found_term", "NOTE-OWL-FOUND-TERM", 3, 0, false);
        declareFunction("clear_owl_found_terms", "CLEAR-OWL-FOUND-TERMS", 0, 0, false);
        declareFunction("lookup_owl_found_term", "LOOKUP-OWL-FOUND-TERM", 2, 0, false);
        declareFunction("owl_find_term_of_type", "OWL-FIND-TERM-OF-TYPE", 3, 1, false);
        declareFunction("owl_arg2isa_from_range", "OWL-ARG2ISA-FROM-RANGE", 2, 0, false);
        declareFunction("note_owl_oe_queue_done", "NOTE-OWL-OE-QUEUE-DONE", 0, 1, false);
        declareFunction("new_owl_oe_queue", "NEW-OWL-OE-QUEUE", 0, 0, false);
        declareFunction("owl_oe_queue_modified_flag", "OWL-OE-QUEUE-MODIFIED-FLAG", 1, 0, false);
        declareFunction("set_owl_oe_queue_modified_flag", "SET-OWL-OE-QUEUE-MODIFIED-FLAG", 2, 0, false);
        declareFunction("owl_oe_queue_modifiedP", "OWL-OE-QUEUE-MODIFIED?", 1, 0, false);
        declareFunction("owl_oe_queue_queue", "OWL-OE-QUEUE-QUEUE", 1, 0, false);
        declareFunction("owl_oe_queue_importer", "OWL-OE-QUEUE-IMPORTER", 1, 0, false);
        declareFunction("ensure_owl_oe_daemon_running", "ENSURE-OWL-OE-DAEMON-RUNNING", 0, 0, false);
        declareFunction("launch_owl_oe_queue_daemon", "LAUNCH-OWL-OE-QUEUE-DAEMON", 0, 0, false);
        declareFunction("owl_oe_queue_enqueue", "OWL-OE-QUEUE-ENQUEUE", 1, 1, false);
        declareFunction("owl_oe_queue_reenqueue", "OWL-OE-QUEUE-REENQUEUE", 2, 0, false);
        declareFunction("owl_oe_queue_enqueue_low", "OWL-OE-QUEUE-ENQUEUE-LOW", 3, 0, false);
        declareFunction("owl_node_id_index", "OWL-NODE-ID-INDEX", 0, 0, false);
        declareFunction("note_node_id_reference", "NOTE-NODE-ID-REFERENCE", 2, 0, false);
        declareFunction("lookup_node_id_reference", "LOOKUP-NODE-ID-REFERENCE", 1, 0, false);
        declareFunction("owl_create", "OWL-CREATE", 6, 0, false);
        declareFunction("owl_create_internal", "OWL-CREATE-INTERNAL", 5, 0, false);
        declareFunction("owl_create_new_constant", "OWL-CREATE-NEW-CONSTANT", 5, 0, false);
        declareFunction("owl_create_new_constant_non_rkf", "OWL-CREATE-NEW-CONSTANT-NON-RKF", 5, 0, false);
        declareFunction("owl_enqueue_assert", "OWL-ENQUEUE-ASSERT", 2, 1, false);
        declareFunction("new_owl_oe_daemon", "NEW-OWL-OE-DAEMON", 0, 0, false);
        declareFunction("owl_oe_queue_empty_p", "OWL-OE-QUEUE-EMPTY-P", 1, 0, false);
        declareFunction("wait_for_owl_oe_queue_to_empty", "WAIT-FOR-OWL-OE-QUEUE-TO-EMPTY", 0, 1, false);
        declareFunction("owl_oe_daemon_run", "OWL-OE-DAEMON-RUN", 0, 0, false);
        declareFunction("note_owl_failure", "NOTE-OWL-FAILURE", 1, 1, false);
        declareFunction("owl_failure_message", "OWL-FAILURE-MESSAGE", 1, 0, false);
        declareFunction("owl_oe_daemon_assert", "OWL-OE-DAEMON-ASSERT", 1, 0, false);
        declareFunction("owl_quasi_term_from_specification", "OWL-QUASI-TERM-FROM-SPECIFICATION", 4, 0, false);
        declareFunction("owl_quasi_term_from_node_id", "OWL-QUASI-TERM-FROM-NODE-ID", 1, 1, false);
        declareFunction("owl_quasi_term_p", "OWL-QUASI-TERM-P", 1, 0, false);
        declareFunction("resolve_owl_quasi_term", "RESOLVE-OWL-QUASI-TERM", 1, 0, false);
        declareFunction("clear_note_found_term_resolution", "CLEAR-NOTE-FOUND-TERM-RESOLUTION", 0, 0, false);
        declareFunction("remove_note_found_term_resolution", "REMOVE-NOTE-FOUND-TERM-RESOLUTION", 2, 0, false);
        declareFunction("note_found_term_resolution_internal", "NOTE-FOUND-TERM-RESOLUTION-INTERNAL", 2, 0, false);
        declareFunction("note_found_term_resolution", "NOTE-FOUND-TERM-RESOLUTION", 2, 0, false);
        declareFunction("owl_assert_internal", "OWL-ASSERT-INTERNAL", 3, 0, false);
        declareFunction("owl_assert", "OWL-ASSERT", 3, 0, false);
        declareFunction("owl_assert_low", "OWL-ASSERT-LOW", 2, 0, false);
        declareFunction("create_terms_from_owl_data", "CREATE-TERMS-FROM-OWL-DATA", 2, 1, false);
        declareFunction("dont_reify_owl_termP", "DONT-REIFY-OWL-TERM?", 2, 0, false);
        declareFunction("owl_define_one_term", "OWL-DEFINE-ONE-TERM", 2, 0, false);
        declareFunction("owl_find_term_from_info", "OWL-FIND-TERM-FROM-INFO", 2, 0, false);
        declareFunction("owl_define_one_term_internal", "OWL-DEFINE-ONE-TERM-INTERNAL", 4, 0, false);
        declareFunction("assert_owl_label", "ASSERT-OWL-LABEL", 3, 0, false);
        declareFunction("assert_owl_equivalent_class", "ASSERT-OWL-EQUIVALENT-CLASS", 4, 0, false);
        declareFunction("assert_owl_restriction", "ASSERT-OWL-RESTRICTION", 4, 0, false);
        declareFunction("owl_restriction_sentence", "OWL-RESTRICTION-SENTENCE", 3, 0, false);
        declareFunction("owl_restriction_collection", "OWL-RESTRICTION-COLLECTION", 2, 0, false);
        declareFunction("find_or_create_owl_class_from_restriction_internal", "FIND-OR-CREATE-OWL-CLASS-FROM-RESTRICTION-INTERNAL", 2, 0, false);
        declareFunction("find_or_create_owl_class_from_restriction", "FIND-OR-CREATE-OWL-CLASS-FROM-RESTRICTION", 2, 0, false);
        declareFunction("try_to_resolve_node_id_specification", "TRY-TO-RESOLVE-NODE-ID-SPECIFICATION", 1, 0, false);
        declareFunction("owl_find_or_create_term_from_specification", "OWL-FIND-OR-CREATE-TERM-FROM-SPECIFICATION", 3, 0, false);
        declareFunction("owl_find_or_create_union", "OWL-FIND-OR-CREATE-UNION", 3, 1, false);
        declareFunction("owl_find_or_create_intersection", "OWL-FIND-OR-CREATE-INTERSECTION", 3, 1, false);
        declareFunction("owl_find_or_create_classes_from_node_id", "OWL-FIND-OR-CREATE-CLASSES-FROM-NODE-ID", 3, 0, false);
        declareFunction("owl_find_or_create_term_from_node_id", "OWL-FIND-OR-CREATE-TERM-FROM-NODE-ID", 3, 0, false);
        declareFunction("owl_term_info_print_function_trampoline", "OWL-TERM-INFO-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
        declareFunction("owl_term_info_p", "OWL-TERM-INFO-P", 1, 0, false);
        new com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_term_info_p$UnaryFunction();
        declareFunction("oti_cyc_name", "OTI-CYC-NAME", 1, 0, false);
        declareFunction("oti_comment", "OTI-COMMENT", 1, 0, false);
        declareFunction("oti_superclasses", "OTI-SUPERCLASSES", 1, 0, false);
        declareFunction("oti_disjoint_classes", "OTI-DISJOINT-CLASSES", 1, 0, false);
        declareFunction("oti_plist", "OTI-PLIST", 1, 0, false);
        declareFunction("_csetf_oti_cyc_name", "_CSETF-OTI-CYC-NAME", 2, 0, false);
        declareFunction("_csetf_oti_comment", "_CSETF-OTI-COMMENT", 2, 0, false);
        declareFunction("_csetf_oti_superclasses", "_CSETF-OTI-SUPERCLASSES", 2, 0, false);
        declareFunction("_csetf_oti_disjoint_classes", "_CSETF-OTI-DISJOINT-CLASSES", 2, 0, false);
        declareFunction("_csetf_oti_plist", "_CSETF-OTI-PLIST", 2, 0, false);
        declareFunction("make_owl_term_info", "MAKE-OWL-TERM-INFO", 0, 1, false);
        declareFunction("print_owl_term_info", "PRINT-OWL-TERM-INFO", 3, 0, false);
        declareFunction("find_or_create_owl_term_info", "FIND-OR-CREATE-OWL-TERM-INFO", 1, 0, false);
        declareFunction("new_owl_term_info", "NEW-OWL-TERM-INFO", 0, 2, false);
        declareFunction("owl_term_info_cyc_name", "OWL-TERM-INFO-CYC-NAME", 1, 0, false);
        declareFunction("owl_term_info_comment", "OWL-TERM-INFO-COMMENT", 1, 0, false);
        declareFunction("owl_term_info_superclasses", "OWL-TERM-INFO-SUPERCLASSES", 1, 0, false);
        declareFunction("owl_term_info_disjoint_classes", "OWL-TERM-INFO-DISJOINT-CLASSES", 1, 0, false);
        declareFunction("owl_term_info_plist", "OWL-TERM-INFO-PLIST", 1, 0, false);
        declareFunction("owl_term_info_plist_lookup", "OWL-TERM-INFO-PLIST-LOOKUP", 2, 1, false);
        declareFunction("owl_term_info_external_name", "OWL-TERM-INFO-EXTERNAL-NAME", 1, 1, false);
        declareFunction("set_owl_term_info_cyc_name", "SET-OWL-TERM-INFO-CYC-NAME", 2, 0, false);
        declareFunction("set_owl_term_info_comment", "SET-OWL-TERM-INFO-COMMENT", 2, 0, false);
        declareFunction("add_owl_term_info_superclass", "ADD-OWL-TERM-INFO-SUPERCLASS", 2, 0, false);
        declareFunction("add_owl_term_info_disjoint_class", "ADD-OWL-TERM-INFO-DISJOINT-CLASS", 2, 0, false);
        declareFunction("owl_term_info_plist_enter", "OWL-TERM-INFO-PLIST-ENTER", 3, 0, false);
        declareFunction("owl_term_info_plist_push", "OWL-TERM-INFO-PLIST-PUSH", 3, 0, false);
        declareFunction("sxhash_owl_term_info_method", "SXHASH-OWL-TERM-INFO-METHOD", 1, 0, false);
        declareFunction("sxhash_owl_term_info", "SXHASH-OWL-TERM-INFO", 1, 0, false);
        declareFunction("import_named_bnodes", "IMPORT-NAMED-BNODES", 2, 0, false);
        declareFunction("read_one_named_bnode", "READ-ONE-NAMED-BNODE", 2, 0, false);
        declareFunction("read_class_info_from_owl_tokens", "READ-CLASS-INFO-FROM-OWL-TOKENS", 2, 0, false);
        declareFunction("read_one_class_info_from_owl_tokens", "READ-ONE-CLASS-INFO-FROM-OWL-TOKENS", 2, 0, false);
        declareFunction("read_one_owl_chunk_for_class_info", "READ-ONE-OWL-CHUNK-FOR-CLASS-INFO", 4, 0, false);
        declareFunction("read_instance_info_from_owl_tokens", "READ-INSTANCE-INFO-FROM-OWL-TOKENS", 2, 0, false);
        declareFunction("read_one_instance_info_from_owl_tokens", "READ-ONE-INSTANCE-INFO-FROM-OWL-TOKENS", 2, 0, false);
        declareFunction("read_one_owl_chunk_for_instance_info", "READ-ONE-OWL-CHUNK-FOR-INSTANCE-INFO", 4, 0, false);
        declareFunction("owl_maybe_instance_tokenP", "OWL-MAYBE-INSTANCE-TOKEN?", 2, 0, false);
        declareFunction("owl_non_instance_tokenP", "OWL-NON-INSTANCE-TOKEN?", 2, 0, false);
        declareFunction("handle_non_target_owl_token", "HANDLE-NON-TARGET-OWL-TOKEN", 1, 0, false);
        declareFunction("handle_term_info_token", "HANDLE-TERM-INFO-TOKEN", 3, 0, false);
        declareFunction("handle_cyc_guid", "HANDLE-CYC-GUID", 2, 0, false);
        declareFunction("handle_cyc_external_id", "HANDLE-CYC-EXTERNAL-ID", 2, 0, false);
        declareFunction("handle_property_value_pair", "HANDLE-PROPERTY-VALUE-PAIR", 4, 0, false);
        declareFunction("read_owl_term_reference", "READ-OWL-TERM-REFERENCE", 2, 0, false);
        declareFunction("owl_import_parameters_class_prefix", "OWL-IMPORT-PARAMETERS-CLASS-PREFIX", 1, 0, false);
        declareFunction("term_names_from_token", "TERM-NAMES-FROM-TOKEN", 2, 0, false);
        declareFunction("owl_external_name_from_token", "OWL-EXTERNAL-NAME-FROM-TOKEN", 2, 0, false);
        declareFunction("owl_class_cyc_name_from_external_name", "OWL-CLASS-CYC-NAME-FROM-EXTERNAL-NAME", 2, 0, false);
        declareFunction("nonlocal_owl_term_reference_p", "NONLOCAL-OWL-TERM-REFERENCE-P", 1, 0, false);
        declareFunction("read_owl_class_or_restriction", "READ-OWL-CLASS-OR-RESTRICTION", 2, 0, false);
        declareFunction("read_owl_restriction", "READ-OWL-RESTRICTION", 2, 0, false);
        declareFunction("read_part_of_owl_restriction", "READ-PART-OF-OWL-RESTRICTION", 7, 0, false);
        declareFunction("read_owl_restriction_property", "READ-OWL-RESTRICTION-PROPERTY", 2, 0, false);
        declareFunction("owl_value_from_string", "OWL-VALUE-FROM-STRING", 2, 0, false);
        declareFunction("clear_xml_name", "CLEAR-XML-NAME", 0, 0, false);
        declareFunction("remove_xml_name", "REMOVE-XML-NAME", 1, 0, false);
        declareFunction("xml_name_internal", "XML-NAME-INTERNAL", 1, 0, false);
        declareFunction("xml_name", "XML-NAME", 1, 0, false);
        declareFunction("owl_importer_print_function_trampoline", "OWL-IMPORTER-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
        declareFunction("owl_importer_p", "OWL-IMPORTER-P", 1, 0, false);
        new com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_importer_p$UnaryFunction();
        declareFunction("owl_imp_id", "OWL-IMP-ID", 1, 0, false);
        declareFunction("owl_imp_progress", "OWL-IMP-PROGRESS", 1, 0, false);
        declareFunction("owl_imp_error_info", "OWL-IMP-ERROR-INFO", 1, 0, false);
        declareFunction("owl_imp_import_parameters", "OWL-IMP-IMPORT-PARAMETERS", 1, 0, false);
        declareFunction("owl_imp_thread", "OWL-IMP-THREAD", 1, 0, false);
        declareFunction("_csetf_owl_imp_id", "_CSETF-OWL-IMP-ID", 2, 0, false);
        declareFunction("_csetf_owl_imp_progress", "_CSETF-OWL-IMP-PROGRESS", 2, 0, false);
        declareFunction("_csetf_owl_imp_error_info", "_CSETF-OWL-IMP-ERROR-INFO", 2, 0, false);
        declareFunction("_csetf_owl_imp_import_parameters", "_CSETF-OWL-IMP-IMPORT-PARAMETERS", 2, 0, false);
        declareFunction("_csetf_owl_imp_thread", "_CSETF-OWL-IMP-THREAD", 2, 0, false);
        declareFunction("make_owl_importer", "MAKE-OWL-IMPORTER", 0, 1, false);
        declareFunction("print_owl_importer", "PRINT-OWL-IMPORTER", 3, 0, false);
        declareFunction("new_owl_importer", "NEW-OWL-IMPORTER", 0, 0, false);
        declareFunction("owl_importer_id", "OWL-IMPORTER-ID", 1, 0, false);
        declareFunction("owl_importer_progress", "OWL-IMPORTER-PROGRESS", 1, 0, false);
        declareFunction("owl_importer_error_info", "OWL-IMPORTER-ERROR-INFO", 1, 0, false);
        declareFunction("owl_importer_import_parameters", "OWL-IMPORTER-IMPORT-PARAMETERS", 1, 0, false);
        declareFunction("owl_importer_thread", "OWL-IMPORTER-THREAD", 1, 0, false);
        declareFunction("sxhash_owl_importer_method", "SXHASH-OWL-IMPORTER-METHOD", 1, 0, false);
        declareFunction("sxhash_owl_importer", "SXHASH-OWL-IMPORTER", 1, 0, false);
        declareFunction("import_owl_ontology_with_importer", "IMPORT-OWL-ONTOLOGY-WITH-IMPORTER", 2, 6, false);
        declareFunction("get_owl_importer_ontology", "GET-OWL-IMPORTER-ONTOLOGY", 1, 0, false);
        declareFunction("get_owl_importer_progress", "GET-OWL-IMPORTER-PROGRESS", 1, 0, false);
        declareFunction("get_owl_importer_error_info", "GET-OWL-IMPORTER-ERROR-INFO", 1, 0, false);
        declareFunction("owl_importer_done_p", "OWL-IMPORTER-DONE-P", 1, 0, false);
        declareFunction("owl_importer_exists_p", "OWL-IMPORTER-EXISTS-P", 1, 0, false);
        declareFunction("owl_importer_id_index", "OWL-IMPORTER-ID-INDEX", 0, 0, false);
        declareFunction("find_owl_importer_by_id", "FIND-OWL-IMPORTER-BY-ID", 1, 0, false);
        declareFunction("note_owl_import_parameters", "NOTE-OWL-IMPORT-PARAMETERS", 1, 0, false);
        declareFunction("note_owl_import_section_progress", "NOTE-OWL-IMPORT-SECTION-PROGRESS", 1, 0, false);
        declareFunction("note_owl_import_section_started", "NOTE-OWL-IMPORT-SECTION-STARTED", 0, 0, false);
        declareFunction("note_owl_import_section_done", "NOTE-OWL-IMPORT-SECTION-DONE", 0, 0, false);
        declareFunction("note_owl_import_done", "NOTE-OWL-IMPORT-DONE", 0, 0, false);
        declareFunction("note_owl_import_problem", "NOTE-OWL-IMPORT-PROBLEM", 2, 0, false);
        declareFunction("owl_importer_run", "OWL-IMPORTER-RUN", 3, 6, false);
        declareFunction("import_sample_ontologies", "IMPORT-SAMPLE-ONTOLOGIES", 0, 0, false);
        return NIL;
    }

    public static SubLObject declare_owl_to_cycl_file() {
        if (SubLFiles.USE_V1) {
            declareFunction("owl_importer_v1_version_number", "OWL-IMPORTER-V1-VERSION-NUMBER", 0, 0, false);
            declareFunction("current_owl_importer", "CURRENT-OWL-IMPORTER", 0, 0, false);
            declareFunction("guess_terms_for_owl_term", "GUESS-TERMS-FOR-OWL-TERM", 3, 0, false);
            declareFunction("root_classes_of_owl_ontology", "ROOT-CLASSES-OF-OWL-ONTOLOGY", 1, 0, false);
            declareFunction("clear_owl_importer_caches", "CLEAR-OWL-IMPORTER-CACHES", 0, 0, false);
            declareFunction("root_classes_of_owl_ontology_via_inference", "ROOT-CLASSES-OF-OWL-ONTOLOGY-VIA-INFERENCE", 1, 0, false);
            declareFunction("term_of_owl_ontologyP_via_index", "TERM-OF-OWL-ONTOLOGY?-VIA-INDEX", 2, 0, false);
            declareFunction("term_of_some_owl_ontologyP_via_index_internal", "TERM-OF-SOME-OWL-ONTOLOGY?-VIA-INDEX-INTERNAL", 1, 0, false);
            declareFunction("term_of_some_owl_ontologyP_via_index", "TERM-OF-SOME-OWL-ONTOLOGY?-VIA-INDEX", 1, 0, false);
            declareFunction("all_terms_of_owl_ontology_via_index", "ALL-TERMS-OF-OWL-ONTOLOGY-VIA-INDEX", 1, 0, false);
            declareFunction("owl_ontology_percent_of_classes_merged", "OWL-ONTOLOGY-PERCENT-OF-CLASSES-MERGED", 1, 0, false);
            declareFunction("owl_ontology_average_class_depth", "OWL-ONTOLOGY-AVERAGE-CLASS-DEPTH", 1, 0, false);
            declareFunction("owl_ontology_average_root_class_depth", "OWL-ONTOLOGY-AVERAGE-ROOT-CLASS-DEPTH", 1, 0, false);
            declareFunction("all_classes_of_owl_ontology_via_index", "ALL-CLASSES-OF-OWL-ONTOLOGY-VIA-INDEX", 1, 0, false);
            declareFunction("owl_class_mergedP_via_index", "OWL-CLASS-MERGED?-VIA-INDEX", 1, 0, false);
            declareFunction("owl_class_merged_upwardP_via_index", "OWL-CLASS-MERGED-UPWARD?-VIA-INDEX", 1, 0, false);
            declareFunction("owl_class_merged_downwardP_via_index", "OWL-CLASS-MERGED-DOWNWARD?-VIA-INDEX", 1, 0, false);
            declareFunction("owl_merge_mt", "OWL-MERGE-MT", 0, 0, false);
            declareFunction("owl_merge_assert", "OWL-MERGE-ASSERT", 1, 0, false);
            declareFunction("merge_owl_class_with_collection", "MERGE-OWL-CLASS-WITH-COLLECTION", 2, 0, false);
            declareFunction("merge_owl_term_with_cyc_term", "MERGE-OWL-TERM-WITH-CYC-TERM", 2, 0, false);
            declareFunction("link_owl_class_down_to_collection", "LINK-OWL-CLASS-DOWN-TO-COLLECTION", 2, 0, false);
            declareFunction("link_owl_class_up_to_collection", "LINK-OWL-CLASS-UP-TO-COLLECTION", 2, 0, false);
            declareFunction("next_owl_term_to_merge_for_ontology", "NEXT-OWL-TERM-TO-MERGE-FOR-ONTOLOGY", 1, 0, false);
            declareFunction("memoized_count_all_specs_internal", "MEMOIZED-COUNT-ALL-SPECS-INTERNAL", 1, 0, false);
            declareFunction("memoized_count_all_specs", "MEMOIZED-COUNT-ALL-SPECS", 1, 0, false);
            declareFunction("longest_acyclic_genls_path_length", "LONGEST-ACYCLIC-GENLS-PATH-LENGTH", 2, 1, false);
            declareFunction("longest_acyclic_genls_path", "LONGEST-ACYCLIC-GENLS-PATH", 2, 1, false);
            declareFunction("longest_acyclic_genls_path_internal_internal", "LONGEST-ACYCLIC-GENLS-PATH-INTERNAL-INTERNAL", 3, 0, false);
            declareFunction("longest_acyclic_genls_path_internal", "LONGEST-ACYCLIC-GENLS-PATH-INTERNAL", 3, 0, false);
            declareFunction("owl_min_genls_memoized_internal", "OWL-MIN-GENLS-MEMOIZED-INTERNAL", 1, 0, false);
            declareFunction("owl_min_genls_memoized", "OWL-MIN-GENLS-MEMOIZED", 1, 0, false);
            declareFunction("genls_tree_with_root_via_index", "GENLS-TREE-WITH-ROOT-VIA-INDEX", 1, 2, false);
            declareFunction("genls_tree_with_root_via_index_internal", "GENLS-TREE-WITH-ROOT-VIA-INDEX-INTERNAL", 4, 0, false);
            declareFunction("root_classes_of_owl_ontology_via_index", "ROOT-CLASSES-OF-OWL-ONTOLOGY-VIA-INDEX", 1, 0, false);
            declareFunction("guess_forts_from_owl_term_name", "GUESS-FORTS-FROM-OWL-TERM-NAME", 1, 0, false);
            declareFunction("guess_forts_from_owl_term_name_non_partitioned", "GUESS-FORTS-FROM-OWL-TERM-NAME-NON-PARTITIONED", 1, 0, false);
            declareFunction("partition_cycl_terms_for_owl_term_name", "PARTITION-CYCL-TERMS-FOR-OWL-TERM-NAME", 2, 0, false);
            declareFunction("owl_term_names", "OWL-TERM-NAMES", 0, 0, false);
            declareFunction("new_owl_definition_accumulator", "NEW-OWL-DEFINITION-ACCUMULATOR", 0, 0, false);
            declareFunction("accumulate_owl_definition", "ACCUMULATE-OWL-DEFINITION", 2, 0, false);
            declareFunction("merge_owl_definitions", "MERGE-OWL-DEFINITIONS", 2, 0, false);
            declareFunction("find_accumulated_owl_definition", "FIND-ACCUMULATED-OWL-DEFINITION", 2, 0, false);
            declareFunction("find_owl_definition_of_type", "FIND-OWL-DEFINITION-OF-TYPE", 3, 0, false);
            declareFunction("owl_definition_name", "OWL-DEFINITION-NAME", 1, 1, false);
            declareFunction("accumulated_owl_definitions_of_type", "ACCUMULATED-OWL-DEFINITIONS-OF-TYPE", 1, 0, false);
            declareFunction("set_accumulated_owl_definitions_of_type", "SET-ACCUMULATED-OWL-DEFINITIONS-OF-TYPE", 2, 0, false);
            declareFunction("owl_accumulator_index_for_type", "OWL-ACCUMULATOR-INDEX-FOR-TYPE", 1, 0, false);
            declareFunction("import_owl_ontology", "IMPORT-OWL-ONTOLOGY", 2, 6, false);
            declareFunction("import_owl_ontology_from_info", "IMPORT-OWL-ONTOLOGY-FROM-INFO", 1, 0, false);
            declareFunction("clear_xml_tokens_from_file", "CLEAR-XML-TOKENS-FROM-FILE", 0, 0, false);
            declareFunction("remove_xml_tokens_from_file", "REMOVE-XML-TOKENS-FROM-FILE", 1, 0, false);
            declareFunction("xml_tokens_from_file_internal", "XML-TOKENS-FROM-FILE-INTERNAL", 1, 0, false);
            declareFunction("xml_tokens_from_file", "XML-TOKENS-FROM-FILE", 1, 0, false);
            declareFunction("import_owl_ontology_internal", "IMPORT-OWL-ONTOLOGY-INTERNAL", 4, 0, false);
            declareFunction("note_owl_file_encoding", "NOTE-OWL-FILE-ENCODING", 2, 0, false);
            declareFunction("reify_term_for_new_import", "REIFY-TERM-FOR-NEW-IMPORT", 1, 0, false);
            declareFunction("owl_ontology_name", "OWL-ONTOLOGY-NAME", 1, 0, false);
            declareFunction("note_import_start_time", "NOTE-IMPORT-START-TIME", 2, 0, false);
            declareFunction("note_import_ontology", "NOTE-IMPORT-ONTOLOGY", 2, 0, false);
            declareFunction("note_import_cyclist", "NOTE-IMPORT-CYCLIST", 2, 0, false);
            declareFunction("note_import_end_time", "NOTE-IMPORT-END-TIME", 2, 0, false);
            declareFunction("import_owl_ontology_info", "IMPORT-OWL-ONTOLOGY-INFO", 3, 0, false);
            declareFunction("note_owl_ontology_base_uri", "NOTE-OWL-ONTOLOGY-BASE-URI", 2, 0, false);
            declareFunction("find_owl_ontology_base_uri", "FIND-OWL-ONTOLOGY-BASE-URI", 1, 0, false);
            declareFunction("clear_owl_import_parameters_ontology_context", "CLEAR-OWL-IMPORT-PARAMETERS-ONTOLOGY-CONTEXT", 0, 0, false);
            declareFunction("remove_owl_import_parameters_ontology_context", "REMOVE-OWL-IMPORT-PARAMETERS-ONTOLOGY-CONTEXT", 1, 0, false);
            declareFunction("owl_import_parameters_ontology_context_internal", "OWL-IMPORT-PARAMETERS-ONTOLOGY-CONTEXT-INTERNAL", 1, 0, false);
            declareFunction("owl_import_parameters_ontology_context", "OWL-IMPORT-PARAMETERS-ONTOLOGY-CONTEXT", 1, 0, false);
            declareFunction("get_owl_ontology_context", "GET-OWL-ONTOLOGY-CONTEXT", 1, 0, false);
            declareFunction("import_owl_ontology_info_internal", "IMPORT-OWL-ONTOLOGY-INFO-INTERNAL", 3, 0, false);
            declareFunction("owl_pred_info_print_function_trampoline", "OWL-PRED-INFO-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
            declareFunction("owl_pred_info_p", "OWL-PRED-INFO-P", 1, 0, false);
            new owl_to_cycl.$owl_pred_info_p$UnaryFunction();
            declareFunction("opi_cyc_name", "OPI-CYC-NAME", 1, 0, false);
            declareFunction("opi_comment", "OPI-COMMENT", 1, 0, false);
            declareFunction("opi_domains", "OPI-DOMAINS", 1, 0, false);
            declareFunction("opi_range", "OPI-RANGE", 1, 0, false);
            declareFunction("opi_plist", "OPI-PLIST", 1, 0, false);
            declareFunction("_csetf_opi_cyc_name", "_CSETF-OPI-CYC-NAME", 2, 0, false);
            declareFunction("_csetf_opi_comment", "_CSETF-OPI-COMMENT", 2, 0, false);
            declareFunction("_csetf_opi_domains", "_CSETF-OPI-DOMAINS", 2, 0, false);
            declareFunction("_csetf_opi_range", "_CSETF-OPI-RANGE", 2, 0, false);
            declareFunction("_csetf_opi_plist", "_CSETF-OPI-PLIST", 2, 0, false);
            declareFunction("make_owl_pred_info", "MAKE-OWL-PRED-INFO", 0, 1, false);
            declareFunction("visit_defstruct_owl_pred_info", "VISIT-DEFSTRUCT-OWL-PRED-INFO", 2, 0, false);
            declareFunction("visit_defstruct_object_owl_pred_info_method", "VISIT-DEFSTRUCT-OBJECT-OWL-PRED-INFO-METHOD", 2, 0, false);
            declareFunction("print_owl_pred_info", "PRINT-OWL-PRED-INFO", 3, 0, false);
            declareFunction("find_or_create_owl_pred_info", "FIND-OR-CREATE-OWL-PRED-INFO", 1, 0, false);
            declareFunction("new_owl_pred_info", "NEW-OWL-PRED-INFO", 1, 4, false);
            declareFunction("owl_pred_info_cyc_name", "OWL-PRED-INFO-CYC-NAME", 1, 0, false);
            declareFunction("owl_pred_info_comment", "OWL-PRED-INFO-COMMENT", 1, 0, false);
            declareFunction("owl_pred_info_domains", "OWL-PRED-INFO-DOMAINS", 1, 0, false);
            declareFunction("owl_pred_info_range", "OWL-PRED-INFO-RANGE", 1, 0, false);
            declareFunction("owl_pred_info_plist", "OWL-PRED-INFO-PLIST", 1, 0, false);
            declareFunction("owl_pred_info_plist_lookup", "OWL-PRED-INFO-PLIST-LOOKUP", 2, 1, false);
            declareFunction("owl_pred_info_external_name", "OWL-PRED-INFO-EXTERNAL-NAME", 1, 1, false);
            declareFunction("set_owl_pred_info_cyc_name", "SET-OWL-PRED-INFO-CYC-NAME", 2, 0, false);
            declareFunction("set_owl_pred_info_comment", "SET-OWL-PRED-INFO-COMMENT", 2, 0, false);
            declareFunction("set_owl_pred_info_domains", "SET-OWL-PRED-INFO-DOMAINS", 2, 0, false);
            declareFunction("set_owl_pred_info_range", "SET-OWL-PRED-INFO-RANGE", 2, 0, false);
            declareFunction("merge_owl_pred_definitions", "MERGE-OWL-PRED-DEFINITIONS", 2, 0, false);
            declareFunction("owl_external_value_specification_p", "OWL-EXTERNAL-VALUE-SPECIFICATION-P", 1, 0, false);
            declareFunction("node_id_specification_p", "NODE-ID-SPECIFICATION-P", 1, 0, false);
            declareFunction("owl_restriction_p", "OWL-RESTRICTION-P", 1, 0, false);
            declareFunction("owl_external_value_specification_union_p", "OWL-EXTERNAL-VALUE-SPECIFICATION-UNION-P", 1, 0, false);
            declareFunction("owl_external_value_specification_union_names", "OWL-EXTERNAL-VALUE-SPECIFICATION-UNION-NAMES", 1, 0, false);
            declareFunction("owl_external_value_specification_intersection_p", "OWL-EXTERNAL-VALUE-SPECIFICATION-INTERSECTION-P", 1, 0, false);
            declareFunction("owl_external_value_specification_intersection_names", "OWL-EXTERNAL-VALUE-SPECIFICATION-INTERSECTION-NAMES", 1, 0, false);
            declareFunction("owl_external_term_enumeration_p", "OWL-EXTERNAL-TERM-ENUMERATION-P", 1, 0, false);
            declareFunction("owl_external_term_enumeration_terms", "OWL-EXTERNAL-TERM-ENUMERATION-TERMS", 1, 0, false);
            declareFunction("owl_pred_info_plist_enter", "OWL-PRED-INFO-PLIST-ENTER", 3, 0, false);
            declareFunction("owl_pred_info_plist_push", "OWL-PRED-INFO-PLIST-PUSH", 3, 0, false);
            declareFunction("sxhash_owl_pred_info_method", "SXHASH-OWL-PRED-INFO-METHOD", 1, 0, false);
            declareFunction("sxhash_owl_pred_info", "SXHASH-OWL-PRED-INFO", 1, 0, false);
            declareFunction("owl_import_parameters_print_function_trampoline", "OWL-IMPORT-PARAMETERS-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
            declareFunction("owl_import_parameters_p", "OWL-IMPORT-PARAMETERS-P", 1, 0, false);
            new owl_to_cycl.$owl_import_parameters_p$UnaryFunction();
            declareFunction("oip_ontology", "OIP-ONTOLOGY", 1, 0, false);
            declareFunction("oip_namespace_map", "OIP-NAMESPACE-MAP", 1, 0, false);
            declareFunction("oip_constant_prefix", "OIP-CONSTANT-PREFIX", 1, 0, false);
            declareFunction("oip_constant_suffix", "OIP-CONSTANT-SUFFIX", 1, 0, false);
            declareFunction("oip_base_uri", "OIP-BASE-URI", 1, 0, false);
            declareFunction("oip_uri_prefix", "OIP-URI-PREFIX", 1, 0, false);
            declareFunction("oip_cyclist", "OIP-CYCLIST", 1, 0, false);
            declareFunction("oip_quoted_isa", "OIP-QUOTED-ISA", 1, 0, false);
            declareFunction("oip_prefix_external_namesP", "OIP-PREFIX-EXTERNAL-NAMES?", 1, 0, false);
            declareFunction("oip_abbreviate_prefixesP", "OIP-ABBREVIATE-PREFIXES?", 1, 0, false);
            declareFunction("oip_import_term", "OIP-IMPORT-TERM", 1, 0, false);
            declareFunction("oip_encoding", "OIP-ENCODING", 1, 0, false);
            declareFunction("_csetf_oip_ontology", "_CSETF-OIP-ONTOLOGY", 2, 0, false);
            declareFunction("_csetf_oip_namespace_map", "_CSETF-OIP-NAMESPACE-MAP", 2, 0, false);
            declareFunction("_csetf_oip_constant_prefix", "_CSETF-OIP-CONSTANT-PREFIX", 2, 0, false);
            declareFunction("_csetf_oip_constant_suffix", "_CSETF-OIP-CONSTANT-SUFFIX", 2, 0, false);
            declareFunction("_csetf_oip_base_uri", "_CSETF-OIP-BASE-URI", 2, 0, false);
            declareFunction("_csetf_oip_uri_prefix", "_CSETF-OIP-URI-PREFIX", 2, 0, false);
            declareFunction("_csetf_oip_cyclist", "_CSETF-OIP-CYCLIST", 2, 0, false);
            declareFunction("_csetf_oip_quoted_isa", "_CSETF-OIP-QUOTED-ISA", 2, 0, false);
            declareFunction("_csetf_oip_prefix_external_namesP", "_CSETF-OIP-PREFIX-EXTERNAL-NAMES?", 2, 0, false);
            declareFunction("_csetf_oip_abbreviate_prefixesP", "_CSETF-OIP-ABBREVIATE-PREFIXES?", 2, 0, false);
            declareFunction("_csetf_oip_import_term", "_CSETF-OIP-IMPORT-TERM", 2, 0, false);
            declareFunction("_csetf_oip_encoding", "_CSETF-OIP-ENCODING", 2, 0, false);
            declareFunction("make_owl_import_parameters", "MAKE-OWL-IMPORT-PARAMETERS", 0, 1, false);
            declareFunction("visit_defstruct_owl_import_parameters", "VISIT-DEFSTRUCT-OWL-IMPORT-PARAMETERS", 2, 0, false);
            declareFunction("visit_defstruct_object_owl_import_parameters_method", "VISIT-DEFSTRUCT-OBJECT-OWL-IMPORT-PARAMETERS-METHOD", 2, 0, false);
            declareFunction("print_owl_import_parameters", "PRINT-OWL-IMPORT-PARAMETERS", 3, 0, false);
            declareFunction("new_owl_import_parameters", "NEW-OWL-IMPORT-PARAMETERS", 7, 2, false);
            declareFunction("cyclist_using_owl_importer_v1", "CYCLIST-USING-OWL-IMPORTER-V1", 1, 0, false);
            declareFunction("owl_import_parameters_ontology", "OWL-IMPORT-PARAMETERS-ONTOLOGY", 1, 0, false);
            declareFunction("owl_import_parameters_lookup_namespace", "OWL-IMPORT-PARAMETERS-LOOKUP-NAMESPACE", 2, 0, false);
            declareFunction("owl_import_parameters_constant_prefix", "OWL-IMPORT-PARAMETERS-CONSTANT-PREFIX", 1, 0, false);
            declareFunction("owl_import_parameters_constant_suffix", "OWL-IMPORT-PARAMETERS-CONSTANT-SUFFIX", 1, 0, false);
            declareFunction("owl_import_parameters_base_uri", "OWL-IMPORT-PARAMETERS-BASE-URI", 1, 0, false);
            declareFunction("owl_import_parameters_uri_prefix", "OWL-IMPORT-PARAMETERS-URI-PREFIX", 1, 0, false);
            declareFunction("owl_import_parameters_cyclist", "OWL-IMPORT-PARAMETERS-CYCLIST", 1, 0, false);
            declareFunction("owl_import_parameters_quoted_isa", "OWL-IMPORT-PARAMETERS-QUOTED-ISA", 1, 0, false);
            declareFunction("owl_import_parameters_prefix_external_namesP", "OWL-IMPORT-PARAMETERS-PREFIX-EXTERNAL-NAMES?", 1, 0, false);
            declareFunction("owl_import_parameters_abbreviate_prefixesP", "OWL-IMPORT-PARAMETERS-ABBREVIATE-PREFIXES?", 1, 0, false);
            declareFunction("owl_import_parameters_import_term", "OWL-IMPORT-PARAMETERS-IMPORT-TERM", 1, 0, false);
            declareFunction("owl_import_parameters_encoding", "OWL-IMPORT-PARAMETERS-ENCODING", 1, 0, false);
            declareFunction("owl_import_parameters_note_namespace", "OWL-IMPORT-PARAMETERS-NOTE-NAMESPACE", 3, 0, false);
            declareFunction("owl_import_parameters_note_base_uri", "OWL-IMPORT-PARAMETERS-NOTE-BASE-URI", 2, 0, false);
            declareFunction("owl_import_parameters_note_import_term", "OWL-IMPORT-PARAMETERS-NOTE-IMPORT-TERM", 2, 0, false);
            declareFunction("owl_import_parameters_note_encoding", "OWL-IMPORT-PARAMETERS-NOTE-ENCODING", 2, 0, false);
            declareFunction("sxhash_owl_import_parameters_method", "SXHASH-OWL-IMPORT-PARAMETERS-METHOD", 1, 0, false);
            declareFunction("sxhash_owl_import_parameters", "SXHASH-OWL-IMPORT-PARAMETERS", 1, 0, false);
            declareFunction("verify_imports_for_ontology_tokens", "VERIFY-IMPORTS-FOR-ONTOLOGY-TOKENS", 3, 0, false);
            declareFunction("validate_and_note_owl_namespaces", "VALIDATE-AND-NOTE-OWL-NAMESPACES", 3, 0, false);
            declareFunction("validate_and_note_owl_namespaces_for_token", "VALIDATE-AND-NOTE-OWL-NAMESPACES-FOR-TOKEN", 3, 0, false);
            declareFunction("validate_and_note_owl_namespace", "VALIDATE-AND-NOTE-OWL-NAMESPACE", 4, 0, false);
            declareFunction("owl_reserved_namespace_p", "OWL-RESERVED-NAMESPACE-P", 1, 0, false);
            declareFunction("owl_reserved_namespace_problem", "OWL-RESERVED-NAMESPACE-PROBLEM", 2, 0, false);
            declareFunction("owl_imported_namespace_problem", "OWL-IMPORTED-NAMESPACE-PROBLEM", 2, 0, false);
            declareFunction("clear_find_or_create_owl_ontology_for_uri", "CLEAR-FIND-OR-CREATE-OWL-ONTOLOGY-FOR-URI", 0, 0, false);
            declareFunction("remove_find_or_create_owl_ontology_for_uri", "REMOVE-FIND-OR-CREATE-OWL-ONTOLOGY-FOR-URI", 1, 2, false);
            declareFunction("find_or_create_owl_ontology_for_uri_internal", "FIND-OR-CREATE-OWL-ONTOLOGY-FOR-URI-INTERNAL", 3, 0, false);
            declareFunction("find_or_create_owl_ontology_for_uri", "FIND-OR-CREATE-OWL-ONTOLOGY-FOR-URI", 1, 2, false);
            declareFunction("find_or_create_term_type_for_ontology", "FIND-OR-CREATE-TERM-TYPE-FOR-ONTOLOGY", 1, 1, false);
            declareFunction("read_pred_info_from_owl_tokens", "READ-PRED-INFO-FROM-OWL-TOKENS", 2, 0, false);
            declareFunction("clear_owl_property_element_names", "CLEAR-OWL-PROPERTY-ELEMENT-NAMES", 0, 0, false);
            declareFunction("remove_owl_property_element_names", "REMOVE-OWL-PROPERTY-ELEMENT-NAMES", 0, 0, false);
            declareFunction("owl_property_element_names_internal", "OWL-PROPERTY-ELEMENT-NAMES-INTERNAL", 0, 0, false);
            declareFunction("owl_property_element_names", "OWL-PROPERTY-ELEMENT-NAMES", 0, 0, false);
            declareFunction("owl_property_token_p", "OWL-PROPERTY-TOKEN-P", 1, 0, false);
            declareFunction("read_one_owl_chunk_for_pred_info", "READ-ONE-OWL-CHUNK-FOR-PRED-INFO", 4, 0, false);
            declareFunction("cyc_token_with_nameP", "CYC-TOKEN-WITH-NAME?", 3, 0, false);
            declareFunction("process_owl_attribute_value", "PROCESS-OWL-ATTRIBUTE-VALUE", 1, 0, false);
            declareFunction("owl_note_spec_property", "OWL-NOTE-SPEC-PROPERTY", 2, 0, false);
            declareFunction("owl_lookup_spec_properties", "OWL-LOOKUP-SPEC-PROPERTIES", 1, 0, false);
            declareFunction("create_preds_from_owl_data", "CREATE-PREDS-FROM-OWL-DATA", 2, 0, false);
            declareFunction("process_domain_list", "PROCESS-DOMAIN-LIST", 2, 0, false);
            declareFunction("process_range_list", "PROCESS-RANGE-LIST", 2, 0, false);
            declareFunction("clear_owl_class_element_names", "CLEAR-OWL-CLASS-ELEMENT-NAMES", 0, 0, false);
            declareFunction("remove_owl_class_element_names", "REMOVE-OWL-CLASS-ELEMENT-NAMES", 0, 0, false);
            declareFunction("owl_class_element_names_internal", "OWL-CLASS-ELEMENT-NAMES-INTERNAL", 0, 0, false);
            declareFunction("owl_class_element_names", "OWL-CLASS-ELEMENT-NAMES", 0, 0, false);
            declareFunction("owl_class_token_p", "OWL-CLASS-TOKEN-P", 1, 0, false);
            declareFunction("read_owl_class", "READ-OWL-CLASS", 2, 0, false);
            declareFunction("handle_open_class_tag", "HANDLE-OPEN-CLASS-TAG", 3, 0, false);
            declareFunction("read_owl_enumeration", "READ-OWL-ENUMERATION", 2, 0, false);
            declareFunction("possible_read_owl_list_p", "POSSIBLE-READ-OWL-LIST-P", 1, 0, false);
            declareFunction("read_owl_list", "READ-OWL-LIST", 2, 0, false);
            declareFunction("read_owl_list_recursive", "READ-OWL-LIST-RECURSIVE", 2, 0, false);
            declareFunction("read_one_owl_list_item", "READ-ONE-OWL-LIST-ITEM", 2, 0, false);
            declareFunction("owl_external_value_specification_union", "OWL-EXTERNAL-VALUE-SPECIFICATION-UNION", 1, 0, false);
            declareFunction("first_non_whitespace_xml_token_position", "FIRST-NON-WHITESPACE-XML-TOKEN-POSITION", 1, 0, false);
            declareFunction("next_noninitial_non_whitespace_xml_token_position", "NEXT-NONINITIAL-NON-WHITESPACE-XML-TOKEN-POSITION", 1, 0, false);
            declareFunction("next_noninitial_non_whitespace_xml_token", "NEXT-NONINITIAL-NON-WHITESPACE-XML-TOKEN", 1, 0, false);
            declareFunction("pred_names_from_token", "PRED-NAMES-FROM-TOKEN", 2, 0, false);
            declareFunction("owl_pred_cyc_name_from_external_name", "OWL-PRED-CYC-NAME-FROM-EXTERNAL-NAME", 2, 0, false);
            declareFunction("owl_pred_cyc_name_base", "OWL-PRED-CYC-NAME-BASE", 1, 0, false);
            declareFunction("owl_find_or_create_pred_arg_isa", "OWL-FIND-OR-CREATE-PRED-ARG-ISA", 2, 0, false);
            declareFunction("xml_schema_class_uris_internal", "XML-SCHEMA-CLASS-URIS-INTERNAL", 0, 0, false);
            declareFunction("xml_schema_class_uris", "XML-SCHEMA-CLASS-URIS", 0, 0, false);
            declareFunction("owl_find_or_create_term_for_class", "OWL-FIND-OR-CREATE-TERM-FOR-CLASS", 1, 1, false);
            declareFunction("owl_uri_from_prefix", "OWL-URI-FROM-PREFIX", 2, 0, false);
            declareFunction("owl_find_or_create_term_of_type_internal", "OWL-FIND-OR-CREATE-TERM-OF-TYPE-INTERNAL", 3, 0, false);
            declareFunction("owl_find_or_create_term_of_type", "OWL-FIND-OR-CREATE-TERM-OF-TYPE", 3, 0, false);
            declareFunction("owl_find_or_create_term_for_class_in_ontology", "OWL-FIND-OR-CREATE-TERM-FOR-CLASS-IN-ONTOLOGY", 3, 0, false);
            declareFunction("owl_find_or_create_term_of_type_in_ontology_internal", "OWL-FIND-OR-CREATE-TERM-OF-TYPE-IN-ONTOLOGY-INTERNAL", 4, 1, false);
            declareFunction("owl_find_or_create_term_of_type_in_ontology", "OWL-FIND-OR-CREATE-TERM-OF-TYPE-IN-ONTOLOGY", 4, 1, false);
            declareFunction("create_owl_term", "CREATE-OWL-TERM", 4, 0, false);
            declareFunction("assert_synonymous_external_concept", "ASSERT-SYNONYMOUS-EXTERNAL-CONCEPT", 4, 0, false);
            declareFunction("get_synonymous_external_concept_sentence", "GET-SYNONYMOUS-EXTERNAL-CONCEPT-SENTENCE", 4, 0, false);
            declareFunction("prefix_external_owl_name", "PREFIX-EXTERNAL-OWL-NAME", 3, 0, false);
            declareFunction("uri_for_owl_ontology", "URI-FOR-OWL-ONTOLOGY", 2, 0, false);
            declareFunction("get_uri_for_owl_ontology", "GET-URI-FOR-OWL-ONTOLOGY", 1, 0, false);
            declareFunction("stringify_uri", "STRINGIFY-URI", 1, 0, false);
            declareFunction("try_to_abbreviate_owl_uri_internal", "TRY-TO-ABBREVIATE-OWL-URI-INTERNAL", 2, 0, false);
            declareFunction("try_to_abbreviate_owl_uri", "TRY-TO-ABBREVIATE-OWL-URI", 2, 0, false);
            declareFunction("load_namespace_transcripts", "LOAD-NAMESPACE-TRANSCRIPTS", 0, 0, false);
            declareFunction("try_to_abbreviate_owl_uri_recursive", "TRY-TO-ABBREVIATE-OWL-URI-RECURSIVE", 3, 0, false);
            declareFunction("owl_term_union", "OWL-TERM-UNION", 2, 0, false);
            declareFunction("cycl_term_or_owl_quasi_term_p", "CYCL-TERM-OR-OWL-QUASI-TERM-P", 1, 0, false);
            declareFunction("owl_term_intersection", "OWL-TERM-INTERSECTION", 2, 0, false);
            declareFunction("owl_term_enumeration", "OWL-TERM-ENUMERATION", 2, 0, false);
            declareFunction("oip_pred_prefix", "OIP-PRED-PREFIX", 1, 0, false);
            declareFunction("owl_define_one_pred", "OWL-DEFINE-ONE-PRED", 2, 0, false);
            declareFunction("owl_pred_types_from_info", "OWL-PRED-TYPES-FROM-INFO", 2, 0, false);
            declareFunction("owl_term_types_from_info", "OWL-TERM-TYPES-FROM-INFO", 2, 0, false);
            declareFunction("owl_define_one_pred_internal", "OWL-DEFINE-ONE-PRED-INTERNAL", 3, 0, false);
            declareFunction("owl_find_pred", "OWL-FIND-PRED", 2, 0, false);
            declareFunction("owl_find_collection", "OWL-FIND-COLLECTION", 2, 0, false);
            declareFunction("note_owl_found_term", "NOTE-OWL-FOUND-TERM", 3, 0, false);
            declareFunction("clear_owl_found_terms", "CLEAR-OWL-FOUND-TERMS", 0, 0, false);
            declareFunction("lookup_owl_found_term", "LOOKUP-OWL-FOUND-TERM", 2, 0, false);
            declareFunction("owl_find_term_of_type", "OWL-FIND-TERM-OF-TYPE", 3, 1, false);
            declareFunction("owl_arg2isa_from_range", "OWL-ARG2ISA-FROM-RANGE", 2, 0, false);
            declareFunction("note_owl_oe_queue_done", "NOTE-OWL-OE-QUEUE-DONE", 0, 1, false);
            declareFunction("new_owl_oe_queue", "NEW-OWL-OE-QUEUE", 0, 0, false);
            declareFunction("owl_oe_queue_modified_flag", "OWL-OE-QUEUE-MODIFIED-FLAG", 1, 0, false);
            declareFunction("set_owl_oe_queue_modified_flag", "SET-OWL-OE-QUEUE-MODIFIED-FLAG", 2, 0, false);
            declareFunction("owl_oe_queue_modifiedP", "OWL-OE-QUEUE-MODIFIED?", 1, 0, false);
            declareFunction("owl_oe_queue_queue", "OWL-OE-QUEUE-QUEUE", 1, 0, false);
            declareFunction("owl_oe_queue_importer", "OWL-OE-QUEUE-IMPORTER", 1, 0, false);
            declareFunction("ensure_owl_oe_daemon_running", "ENSURE-OWL-OE-DAEMON-RUNNING", 0, 0, false);
            declareFunction("launch_owl_oe_queue_daemon", "LAUNCH-OWL-OE-QUEUE-DAEMON", 0, 0, false);
            declareFunction("owl_oe_queue_enqueue", "OWL-OE-QUEUE-ENQUEUE", 1, 1, false);
            declareFunction("owl_oe_queue_reenqueue", "OWL-OE-QUEUE-REENQUEUE", 2, 0, false);
            declareFunction("owl_oe_queue_enqueue_low", "OWL-OE-QUEUE-ENQUEUE-LOW", 3, 0, false);
            declareFunction("owl_node_id_index", "OWL-NODE-ID-INDEX", 0, 0, false);
            declareFunction("note_node_id_reference", "NOTE-NODE-ID-REFERENCE", 2, 0, false);
            declareFunction("lookup_node_id_reference", "LOOKUP-NODE-ID-REFERENCE", 1, 0, false);
            declareFunction("owl_create", "OWL-CREATE", 7, 0, false);
            declareFunction("owl_create_internal", "OWL-CREATE-INTERNAL", 6, 0, false);
            declareFunction("owl_create_new_constant", "OWL-CREATE-NEW-CONSTANT", 6, 0, false);
            declareFunction("owl_create_new_constant_non_rkf", "OWL-CREATE-NEW-CONSTANT-NON-RKF", 5, 0, false);
            declareFunction("owl_enqueue_assert", "OWL-ENQUEUE-ASSERT", 2, 1, false);
            declareFunction("new_owl_oe_daemon", "NEW-OWL-OE-DAEMON", 0, 0, false);
            declareFunction("owl_oe_queue_empty_p", "OWL-OE-QUEUE-EMPTY-P", 1, 0, false);
            declareFunction("wait_for_owl_oe_queue_to_empty", "WAIT-FOR-OWL-OE-QUEUE-TO-EMPTY", 0, 1, false);
            declareFunction("owl_oe_daemon_run", "OWL-OE-DAEMON-RUN", 0, 0, false);
            declareFunction("note_owl_failure", "NOTE-OWL-FAILURE", 1, 1, false);
            declareFunction("owl_failure_message", "OWL-FAILURE-MESSAGE", 1, 0, false);
            declareFunction("owl_oe_daemon_assert", "OWL-OE-DAEMON-ASSERT", 1, 0, false);
            declareFunction("owl_quasi_term_from_specification", "OWL-QUASI-TERM-FROM-SPECIFICATION", 4, 0, false);
            declareFunction("owl_quasi_term_from_node_id", "OWL-QUASI-TERM-FROM-NODE-ID", 1, 1, false);
            declareFunction("owl_quasi_term_p", "OWL-QUASI-TERM-P", 1, 0, false);
            declareFunction("resolve_owl_quasi_term", "RESOLVE-OWL-QUASI-TERM", 1, 0, false);
            declareFunction("clear_note_found_term_resolution", "CLEAR-NOTE-FOUND-TERM-RESOLUTION", 0, 0, false);
            declareFunction("remove_note_found_term_resolution", "REMOVE-NOTE-FOUND-TERM-RESOLUTION", 2, 0, false);
            declareFunction("note_found_term_resolution_internal", "NOTE-FOUND-TERM-RESOLUTION-INTERNAL", 2, 0, false);
            declareFunction("note_found_term_resolution", "NOTE-FOUND-TERM-RESOLUTION", 2, 0, false);
            declareFunction("owl_assert_internal", "OWL-ASSERT-INTERNAL", 3, 0, false);
            declareFunction("owl_assert", "OWL-ASSERT", 3, 0, false);
            declareFunction("owl_assert_low", "OWL-ASSERT-LOW", 2, 0, false);
            declareFunction("create_terms_from_owl_data", "CREATE-TERMS-FROM-OWL-DATA", 2, 1, false);
            declareFunction("dont_reify_owl_termP", "DONT-REIFY-OWL-TERM?", 2, 0, false);
            declareFunction("owl_define_one_term", "OWL-DEFINE-ONE-TERM", 2, 0, false);
            declareFunction("owl_find_term_from_info", "OWL-FIND-TERM-FROM-INFO", 2, 0, false);
            declareFunction("owl_define_one_term_internal", "OWL-DEFINE-ONE-TERM-INTERNAL", 4, 0, false);
            declareFunction("assert_owl_label", "ASSERT-OWL-LABEL", 3, 0, false);
            declareFunction("assert_owl_equivalent_class", "ASSERT-OWL-EQUIVALENT-CLASS", 4, 0, false);
            declareFunction("assert_owl_restriction", "ASSERT-OWL-RESTRICTION", 4, 0, false);
            declareFunction("owl_restriction_sentence", "OWL-RESTRICTION-SENTENCE", 3, 0, false);
            declareFunction("owl_restriction_collection", "OWL-RESTRICTION-COLLECTION", 2, 1, false);
            declareFunction("find_or_create_owl_class_from_restriction_internal", "FIND-OR-CREATE-OWL-CLASS-FROM-RESTRICTION-INTERNAL", 2, 1, false);
            declareFunction("find_or_create_owl_class_from_restriction", "FIND-OR-CREATE-OWL-CLASS-FROM-RESTRICTION", 2, 1, false);
            declareFunction("owl_find_or_create_nat", "OWL-FIND-OR-CREATE-NAT", 2, 0, false);
            declareFunction("try_to_resolve_node_id_specification", "TRY-TO-RESOLVE-NODE-ID-SPECIFICATION", 1, 0, false);
            declareFunction("owl_find_or_create_term_from_specification", "OWL-FIND-OR-CREATE-TERM-FROM-SPECIFICATION", 3, 0, false);
            declareFunction("owl_find_or_create_union", "OWL-FIND-OR-CREATE-UNION", 3, 1, false);
            declareFunction("owl_find_or_create_intersection", "OWL-FIND-OR-CREATE-INTERSECTION", 3, 1, false);
            declareFunction("owl_find_or_create_classes_from_node_id", "OWL-FIND-OR-CREATE-CLASSES-FROM-NODE-ID", 3, 0, false);
            declareFunction("owl_find_or_create_term_from_node_id", "OWL-FIND-OR-CREATE-TERM-FROM-NODE-ID", 3, 0, false);
            declareFunction("owl_term_info_print_function_trampoline", "OWL-TERM-INFO-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
            declareFunction("owl_term_info_p", "OWL-TERM-INFO-P", 1, 0, false);
            new owl_to_cycl.$owl_term_info_p$UnaryFunction();
            declareFunction("oti_cyc_name", "OTI-CYC-NAME", 1, 0, false);
            declareFunction("oti_comment", "OTI-COMMENT", 1, 0, false);
            declareFunction("oti_superclasses", "OTI-SUPERCLASSES", 1, 0, false);
            declareFunction("oti_disjoint_classes", "OTI-DISJOINT-CLASSES", 1, 0, false);
            declareFunction("oti_plist", "OTI-PLIST", 1, 0, false);
            declareFunction("_csetf_oti_cyc_name", "_CSETF-OTI-CYC-NAME", 2, 0, false);
            declareFunction("_csetf_oti_comment", "_CSETF-OTI-COMMENT", 2, 0, false);
            declareFunction("_csetf_oti_superclasses", "_CSETF-OTI-SUPERCLASSES", 2, 0, false);
            declareFunction("_csetf_oti_disjoint_classes", "_CSETF-OTI-DISJOINT-CLASSES", 2, 0, false);
            declareFunction("_csetf_oti_plist", "_CSETF-OTI-PLIST", 2, 0, false);
            declareFunction("make_owl_term_info", "MAKE-OWL-TERM-INFO", 0, 1, false);
            declareFunction("visit_defstruct_owl_term_info", "VISIT-DEFSTRUCT-OWL-TERM-INFO", 2, 0, false);
            declareFunction("visit_defstruct_object_owl_term_info_method", "VISIT-DEFSTRUCT-OBJECT-OWL-TERM-INFO-METHOD", 2, 0, false);
            declareFunction("print_owl_term_info", "PRINT-OWL-TERM-INFO", 3, 0, false);
            declareFunction("find_or_create_owl_term_info", "FIND-OR-CREATE-OWL-TERM-INFO", 1, 0, false);
            declareFunction("new_owl_term_info", "NEW-OWL-TERM-INFO", 0, 2, false);
            declareFunction("owl_term_info_cyc_name", "OWL-TERM-INFO-CYC-NAME", 1, 0, false);
            declareFunction("owl_term_info_comment", "OWL-TERM-INFO-COMMENT", 1, 0, false);
            declareFunction("owl_term_info_superclasses", "OWL-TERM-INFO-SUPERCLASSES", 1, 0, false);
            declareFunction("owl_term_info_disjoint_classes", "OWL-TERM-INFO-DISJOINT-CLASSES", 1, 0, false);
            declareFunction("owl_term_info_plist", "OWL-TERM-INFO-PLIST", 1, 0, false);
            declareFunction("owl_term_info_plist_lookup", "OWL-TERM-INFO-PLIST-LOOKUP", 2, 1, false);
            declareFunction("owl_term_info_external_name", "OWL-TERM-INFO-EXTERNAL-NAME", 1, 1, false);
            declareFunction("set_owl_term_info_cyc_name", "SET-OWL-TERM-INFO-CYC-NAME", 2, 0, false);
            declareFunction("set_owl_term_info_comment", "SET-OWL-TERM-INFO-COMMENT", 2, 0, false);
            declareFunction("add_owl_term_info_superclass", "ADD-OWL-TERM-INFO-SUPERCLASS", 2, 0, false);
            declareFunction("add_owl_term_info_disjoint_class", "ADD-OWL-TERM-INFO-DISJOINT-CLASS", 2, 0, false);
            declareFunction("owl_term_info_plist_enter", "OWL-TERM-INFO-PLIST-ENTER", 3, 0, false);
            declareFunction("owl_term_info_plist_push", "OWL-TERM-INFO-PLIST-PUSH", 3, 0, false);
            declareFunction("owl_term_info_plist_list_propertyP", "OWL-TERM-INFO-PLIST-LIST-PROPERTY?", 1, 0, false);
            declareFunction("merge_owl_term_definitions", "MERGE-OWL-TERM-DEFINITIONS", 2, 0, false);
            declareFunction("sxhash_owl_term_info_method", "SXHASH-OWL-TERM-INFO-METHOD", 1, 0, false);
            declareFunction("sxhash_owl_term_info", "SXHASH-OWL-TERM-INFO", 1, 0, false);
            declareFunction("import_named_bnodes", "IMPORT-NAMED-BNODES", 2, 0, false);
            declareFunction("read_one_named_bnode", "READ-ONE-NAMED-BNODE", 2, 0, false);
            declareFunction("read_class_info_from_owl_tokens", "READ-CLASS-INFO-FROM-OWL-TOKENS", 2, 0, false);
            declareFunction("read_one_class_info_from_owl_tokens", "READ-ONE-CLASS-INFO-FROM-OWL-TOKENS", 2, 0, false);
            declareFunction("read_one_owl_chunk_for_class_info", "READ-ONE-OWL-CHUNK-FOR-CLASS-INFO", 4, 0, false);
            declareFunction("read_instance_info_from_owl_tokens", "READ-INSTANCE-INFO-FROM-OWL-TOKENS", 2, 0, false);
            declareFunction("read_one_instance_info_from_owl_tokens", "READ-ONE-INSTANCE-INFO-FROM-OWL-TOKENS", 2, 0, false);
            declareFunction("read_one_owl_chunk_for_instance_info", "READ-ONE-OWL-CHUNK-FOR-INSTANCE-INFO", 4, 0, false);
            declareFunction("owl_maybe_instance_tokenP", "OWL-MAYBE-INSTANCE-TOKEN?", 2, 0, false);
            declareFunction("owl_non_instance_tokenP", "OWL-NON-INSTANCE-TOKEN?", 2, 0, false);
            declareFunction("handle_non_target_owl_token", "HANDLE-NON-TARGET-OWL-TOKEN", 1, 0, false);
            declareFunction("handle_term_info_token", "HANDLE-TERM-INFO-TOKEN", 3, 0, false);
            declareFunction("handle_cyc_guid", "HANDLE-CYC-GUID", 2, 0, false);
            declareFunction("handle_cyc_external_id", "HANDLE-CYC-EXTERNAL-ID", 2, 0, false);
            declareFunction("handle_property_value_pair", "HANDLE-PROPERTY-VALUE-PAIR", 4, 0, false);
            declareFunction("read_owl_term_reference", "READ-OWL-TERM-REFERENCE", 2, 0, false);
            declareFunction("owl_import_parameters_class_prefix", "OWL-IMPORT-PARAMETERS-CLASS-PREFIX", 1, 0, false);
            declareFunction("term_names_from_token", "TERM-NAMES-FROM-TOKEN", 2, 0, false);
            declareFunction("owl_external_name_from_token", "OWL-EXTERNAL-NAME-FROM-TOKEN", 2, 0, false);
            declareFunction("owl_class_cyc_name_from_external_name", "OWL-CLASS-CYC-NAME-FROM-EXTERNAL-NAME", 2, 0, false);
            declareFunction("nonlocal_owl_term_reference_p", "NONLOCAL-OWL-TERM-REFERENCE-P", 1, 0, false);
            declareFunction("resolve_nonlocal_owl_term_reference", "RESOLVE-NONLOCAL-OWL-TERM-REFERENCE", 3, 0, false);
            declareFunction("read_owl_class_or_restriction", "READ-OWL-CLASS-OR-RESTRICTION", 2, 0, false);
            declareFunction("read_owl_restriction", "READ-OWL-RESTRICTION", 2, 0, false);
            declareFunction("read_part_of_owl_restriction", "READ-PART-OF-OWL-RESTRICTION", 8, 0, false);
            declareFunction("read_owl_restriction_property", "READ-OWL-RESTRICTION-PROPERTY", 2, 0, false);
            declareFunction("read_owl_restriction_class", "READ-OWL-RESTRICTION-CLASS", 2, 0, false);
            declareFunction("owl_value_from_string", "OWL-VALUE-FROM-STRING", 2, 0, false);
            declareFunction("clear_xml_name", "CLEAR-XML-NAME", 0, 0, false);
            declareFunction("remove_xml_name", "REMOVE-XML-NAME", 1, 0, false);
            declareFunction("xml_name_internal", "XML-NAME-INTERNAL", 1, 0, false);
            declareFunction("xml_name", "XML-NAME", 1, 0, false);
            declareFunction("owl_importer_print_function_trampoline", "OWL-IMPORTER-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
            declareFunction("owl_importer_p", "OWL-IMPORTER-P", 1, 0, false);
            new owl_to_cycl.$owl_importer_p$UnaryFunction();
            declareFunction("owl_imp_id", "OWL-IMP-ID", 1, 0, false);
            declareFunction("owl_imp_progress", "OWL-IMP-PROGRESS", 1, 0, false);
            declareFunction("owl_imp_error_info", "OWL-IMP-ERROR-INFO", 1, 0, false);
            declareFunction("owl_imp_import_parameters", "OWL-IMP-IMPORT-PARAMETERS", 1, 0, false);
            declareFunction("owl_imp_thread", "OWL-IMP-THREAD", 1, 0, false);
            declareFunction("_csetf_owl_imp_id", "_CSETF-OWL-IMP-ID", 2, 0, false);
            declareFunction("_csetf_owl_imp_progress", "_CSETF-OWL-IMP-PROGRESS", 2, 0, false);
            declareFunction("_csetf_owl_imp_error_info", "_CSETF-OWL-IMP-ERROR-INFO", 2, 0, false);
            declareFunction("_csetf_owl_imp_import_parameters", "_CSETF-OWL-IMP-IMPORT-PARAMETERS", 2, 0, false);
            declareFunction("_csetf_owl_imp_thread", "_CSETF-OWL-IMP-THREAD", 2, 0, false);
            declareFunction("make_owl_importer", "MAKE-OWL-IMPORTER", 0, 1, false);
            declareFunction("visit_defstruct_owl_importer", "VISIT-DEFSTRUCT-OWL-IMPORTER", 2, 0, false);
            declareFunction("visit_defstruct_object_owl_importer_method", "VISIT-DEFSTRUCT-OBJECT-OWL-IMPORTER-METHOD", 2, 0, false);
            declareFunction("print_owl_importer", "PRINT-OWL-IMPORTER", 3, 0, false);
            declareFunction("new_owl_importer", "NEW-OWL-IMPORTER", 0, 0, false);
            declareFunction("owl_importer_id", "OWL-IMPORTER-ID", 1, 0, false);
            declareFunction("owl_importer_progress", "OWL-IMPORTER-PROGRESS", 1, 0, false);
            declareFunction("owl_importer_error_info", "OWL-IMPORTER-ERROR-INFO", 1, 0, false);
            declareFunction("owl_importer_import_parameters", "OWL-IMPORTER-IMPORT-PARAMETERS", 1, 0, false);
            declareFunction("owl_importer_thread", "OWL-IMPORTER-THREAD", 1, 0, false);
            declareFunction("sxhash_owl_importer_method", "SXHASH-OWL-IMPORTER-METHOD", 1, 0, false);
            declareFunction("sxhash_owl_importer", "SXHASH-OWL-IMPORTER", 1, 0, false);
            declareFunction("import_owl_ontology_with_importer", "IMPORT-OWL-ONTOLOGY-WITH-IMPORTER", 2, 6, false);
            declareFunction("import_owl_ontology_with_importer_from_info", "IMPORT-OWL-ONTOLOGY-WITH-IMPORTER-FROM-INFO", 1, 0, false);
            declareFunction("get_owl_importer_ontology", "GET-OWL-IMPORTER-ONTOLOGY", 1, 0, false);
            declareFunction("get_owl_importer_progress", "GET-OWL-IMPORTER-PROGRESS", 1, 0, false);
            declareFunction("get_owl_importer_error_info", "GET-OWL-IMPORTER-ERROR-INFO", 1, 0, false);
            declareFunction("owl_importer_done_p", "OWL-IMPORTER-DONE-P", 1, 0, false);
            declareFunction("owl_importer_exists_p", "OWL-IMPORTER-EXISTS-P", 1, 0, false);
            declareFunction("owl_importer_id_index", "OWL-IMPORTER-ID-INDEX", 0, 0, false);
            declareFunction("find_owl_importer_by_id", "FIND-OWL-IMPORTER-BY-ID", 1, 0, false);
            declareFunction("note_owl_import_parameters", "NOTE-OWL-IMPORT-PARAMETERS", 1, 0, false);
            declareFunction("note_owl_import_section_progress", "NOTE-OWL-IMPORT-SECTION-PROGRESS", 1, 0, false);
            declareFunction("note_owl_import_section_started", "NOTE-OWL-IMPORT-SECTION-STARTED", 0, 0, false);
            declareFunction("note_owl_import_section_done", "NOTE-OWL-IMPORT-SECTION-DONE", 0, 0, false);
            declareFunction("note_owl_import_done", "NOTE-OWL-IMPORT-DONE", 0, 0, false);
            declareFunction("note_owl_import_problem", "NOTE-OWL-IMPORT-PROBLEM", 2, 0, false);
            declareFunction("owl_importer_run", "OWL-IMPORTER-RUN", 1, 0, false);
            declareFunction("import_sample_ontologies", "IMPORT-SAMPLE-ONTOLOGIES", 0, 0, false);
        }
        if (SubLFiles.USE_V2) {
            declareFunction("new_owl_import_parameters", "NEW-OWL-IMPORT-PARAMETERS", 5, 2, false);
            declareFunction("owl_term_union", "OWL-TERM-UNION", 1, 0, false);
            declareFunction("owl_term_intersection", "OWL-TERM-INTERSECTION", 1, 0, false);
            declareFunction("owl_term_enumeration", "OWL-TERM-ENUMERATION", 1, 0, false);
            declareFunction("owl_create", "OWL-CREATE", 6, 0, false);
            declareFunction("owl_create_internal", "OWL-CREATE-INTERNAL", 5, 0, false);
            declareFunction("owl_create_new_constant", "OWL-CREATE-NEW-CONSTANT", 5, 0, false);
            declareFunction("owl_restriction_collection", "OWL-RESTRICTION-COLLECTION", 2, 0, false);
            declareFunction("find_or_create_owl_class_from_restriction_internal", "FIND-OR-CREATE-OWL-CLASS-FROM-RESTRICTION-INTERNAL", 2, 0, false);
            declareFunction("find_or_create_owl_class_from_restriction", "FIND-OR-CREATE-OWL-CLASS-FROM-RESTRICTION", 2, 0, false);
            declareFunction("read_part_of_owl_restriction", "READ-PART-OF-OWL-RESTRICTION", 7, 0, false);
            declareFunction("owl_importer_run", "OWL-IMPORTER-RUN", 3, 6, false);
        }
        return NIL;
    }

    public static SubLObject declare_owl_to_cycl_file_Previous() {
        declareFunction("owl_importer_v1_version_number", "OWL-IMPORTER-V1-VERSION-NUMBER", 0, 0, false);
        declareFunction("current_owl_importer", "CURRENT-OWL-IMPORTER", 0, 0, false);
        declareFunction("guess_terms_for_owl_term", "GUESS-TERMS-FOR-OWL-TERM", 3, 0, false);
        declareFunction("root_classes_of_owl_ontology", "ROOT-CLASSES-OF-OWL-ONTOLOGY", 1, 0, false);
        declareFunction("clear_owl_importer_caches", "CLEAR-OWL-IMPORTER-CACHES", 0, 0, false);
        declareFunction("root_classes_of_owl_ontology_via_inference", "ROOT-CLASSES-OF-OWL-ONTOLOGY-VIA-INFERENCE", 1, 0, false);
        declareFunction("term_of_owl_ontologyP_via_index", "TERM-OF-OWL-ONTOLOGY?-VIA-INDEX", 2, 0, false);
        declareFunction("term_of_some_owl_ontologyP_via_index_internal", "TERM-OF-SOME-OWL-ONTOLOGY?-VIA-INDEX-INTERNAL", 1, 0, false);
        declareFunction("term_of_some_owl_ontologyP_via_index", "TERM-OF-SOME-OWL-ONTOLOGY?-VIA-INDEX", 1, 0, false);
        declareFunction("all_terms_of_owl_ontology_via_index", "ALL-TERMS-OF-OWL-ONTOLOGY-VIA-INDEX", 1, 0, false);
        declareFunction("owl_ontology_percent_of_classes_merged", "OWL-ONTOLOGY-PERCENT-OF-CLASSES-MERGED", 1, 0, false);
        declareFunction("owl_ontology_average_class_depth", "OWL-ONTOLOGY-AVERAGE-CLASS-DEPTH", 1, 0, false);
        declareFunction("owl_ontology_average_root_class_depth", "OWL-ONTOLOGY-AVERAGE-ROOT-CLASS-DEPTH", 1, 0, false);
        declareFunction("all_classes_of_owl_ontology_via_index", "ALL-CLASSES-OF-OWL-ONTOLOGY-VIA-INDEX", 1, 0, false);
        declareFunction("owl_class_mergedP_via_index", "OWL-CLASS-MERGED?-VIA-INDEX", 1, 0, false);
        declareFunction("owl_class_merged_upwardP_via_index", "OWL-CLASS-MERGED-UPWARD?-VIA-INDEX", 1, 0, false);
        declareFunction("owl_class_merged_downwardP_via_index", "OWL-CLASS-MERGED-DOWNWARD?-VIA-INDEX", 1, 0, false);
        declareFunction("owl_merge_mt", "OWL-MERGE-MT", 0, 0, false);
        declareFunction("owl_merge_assert", "OWL-MERGE-ASSERT", 1, 0, false);
        declareFunction("merge_owl_class_with_collection", "MERGE-OWL-CLASS-WITH-COLLECTION", 2, 0, false);
        declareFunction("merge_owl_term_with_cyc_term", "MERGE-OWL-TERM-WITH-CYC-TERM", 2, 0, false);
        declareFunction("link_owl_class_down_to_collection", "LINK-OWL-CLASS-DOWN-TO-COLLECTION", 2, 0, false);
        declareFunction("link_owl_class_up_to_collection", "LINK-OWL-CLASS-UP-TO-COLLECTION", 2, 0, false);
        declareFunction("next_owl_term_to_merge_for_ontology", "NEXT-OWL-TERM-TO-MERGE-FOR-ONTOLOGY", 1, 0, false);
        declareFunction("memoized_count_all_specs_internal", "MEMOIZED-COUNT-ALL-SPECS-INTERNAL", 1, 0, false);
        declareFunction("memoized_count_all_specs", "MEMOIZED-COUNT-ALL-SPECS", 1, 0, false);
        declareFunction("longest_acyclic_genls_path_length", "LONGEST-ACYCLIC-GENLS-PATH-LENGTH", 2, 1, false);
        declareFunction("longest_acyclic_genls_path", "LONGEST-ACYCLIC-GENLS-PATH", 2, 1, false);
        declareFunction("longest_acyclic_genls_path_internal_internal", "LONGEST-ACYCLIC-GENLS-PATH-INTERNAL-INTERNAL", 3, 0, false);
        declareFunction("longest_acyclic_genls_path_internal", "LONGEST-ACYCLIC-GENLS-PATH-INTERNAL", 3, 0, false);
        declareFunction("owl_min_genls_memoized_internal", "OWL-MIN-GENLS-MEMOIZED-INTERNAL", 1, 0, false);
        declareFunction("owl_min_genls_memoized", "OWL-MIN-GENLS-MEMOIZED", 1, 0, false);
        declareFunction("genls_tree_with_root_via_index", "GENLS-TREE-WITH-ROOT-VIA-INDEX", 1, 2, false);
        declareFunction("genls_tree_with_root_via_index_internal", "GENLS-TREE-WITH-ROOT-VIA-INDEX-INTERNAL", 4, 0, false);
        declareFunction("root_classes_of_owl_ontology_via_index", "ROOT-CLASSES-OF-OWL-ONTOLOGY-VIA-INDEX", 1, 0, false);
        declareFunction("guess_forts_from_owl_term_name", "GUESS-FORTS-FROM-OWL-TERM-NAME", 1, 0, false);
        declareFunction("guess_forts_from_owl_term_name_non_partitioned", "GUESS-FORTS-FROM-OWL-TERM-NAME-NON-PARTITIONED", 1, 0, false);
        declareFunction("partition_cycl_terms_for_owl_term_name", "PARTITION-CYCL-TERMS-FOR-OWL-TERM-NAME", 2, 0, false);
        declareFunction("owl_term_names", "OWL-TERM-NAMES", 0, 0, false);
        declareFunction("new_owl_definition_accumulator", "NEW-OWL-DEFINITION-ACCUMULATOR", 0, 0, false);
        declareFunction("accumulate_owl_definition", "ACCUMULATE-OWL-DEFINITION", 2, 0, false);
        declareFunction("merge_owl_definitions", "MERGE-OWL-DEFINITIONS", 2, 0, false);
        declareFunction("find_accumulated_owl_definition", "FIND-ACCUMULATED-OWL-DEFINITION", 2, 0, false);
        declareFunction("find_owl_definition_of_type", "FIND-OWL-DEFINITION-OF-TYPE", 3, 0, false);
        declareFunction("owl_definition_name", "OWL-DEFINITION-NAME", 1, 1, false);
        declareFunction("accumulated_owl_definitions_of_type", "ACCUMULATED-OWL-DEFINITIONS-OF-TYPE", 1, 0, false);
        declareFunction("set_accumulated_owl_definitions_of_type", "SET-ACCUMULATED-OWL-DEFINITIONS-OF-TYPE", 2, 0, false);
        declareFunction("owl_accumulator_index_for_type", "OWL-ACCUMULATOR-INDEX-FOR-TYPE", 1, 0, false);
        declareFunction("import_owl_ontology", "IMPORT-OWL-ONTOLOGY", 2, 6, false);
        declareFunction("import_owl_ontology_from_info", "IMPORT-OWL-ONTOLOGY-FROM-INFO", 1, 0, false);
        declareFunction("clear_xml_tokens_from_file", "CLEAR-XML-TOKENS-FROM-FILE", 0, 0, false);
        declareFunction("remove_xml_tokens_from_file", "REMOVE-XML-TOKENS-FROM-FILE", 1, 0, false);
        declareFunction("xml_tokens_from_file_internal", "XML-TOKENS-FROM-FILE-INTERNAL", 1, 0, false);
        declareFunction("xml_tokens_from_file", "XML-TOKENS-FROM-FILE", 1, 0, false);
        declareFunction("import_owl_ontology_internal", "IMPORT-OWL-ONTOLOGY-INTERNAL", 4, 0, false);
        declareFunction("note_owl_file_encoding", "NOTE-OWL-FILE-ENCODING", 2, 0, false);
        declareFunction("reify_term_for_new_import", "REIFY-TERM-FOR-NEW-IMPORT", 1, 0, false);
        declareFunction("owl_ontology_name", "OWL-ONTOLOGY-NAME", 1, 0, false);
        declareFunction("note_import_start_time", "NOTE-IMPORT-START-TIME", 2, 0, false);
        declareFunction("note_import_ontology", "NOTE-IMPORT-ONTOLOGY", 2, 0, false);
        declareFunction("note_import_cyclist", "NOTE-IMPORT-CYCLIST", 2, 0, false);
        declareFunction("note_import_end_time", "NOTE-IMPORT-END-TIME", 2, 0, false);
        declareFunction("import_owl_ontology_info", "IMPORT-OWL-ONTOLOGY-INFO", 3, 0, false);
        declareFunction("note_owl_ontology_base_uri", "NOTE-OWL-ONTOLOGY-BASE-URI", 2, 0, false);
        declareFunction("find_owl_ontology_base_uri", "FIND-OWL-ONTOLOGY-BASE-URI", 1, 0, false);
        declareFunction("clear_owl_import_parameters_ontology_context", "CLEAR-OWL-IMPORT-PARAMETERS-ONTOLOGY-CONTEXT", 0, 0, false);
        declareFunction("remove_owl_import_parameters_ontology_context", "REMOVE-OWL-IMPORT-PARAMETERS-ONTOLOGY-CONTEXT", 1, 0, false);
        declareFunction("owl_import_parameters_ontology_context_internal", "OWL-IMPORT-PARAMETERS-ONTOLOGY-CONTEXT-INTERNAL", 1, 0, false);
        declareFunction("owl_import_parameters_ontology_context", "OWL-IMPORT-PARAMETERS-ONTOLOGY-CONTEXT", 1, 0, false);
        declareFunction("get_owl_ontology_context", "GET-OWL-ONTOLOGY-CONTEXT", 1, 0, false);
        declareFunction("import_owl_ontology_info_internal", "IMPORT-OWL-ONTOLOGY-INFO-INTERNAL", 3, 0, false);
        declareFunction("owl_pred_info_print_function_trampoline", "OWL-PRED-INFO-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
        declareFunction("owl_pred_info_p", "OWL-PRED-INFO-P", 1, 0, false);
        new owl_to_cycl.$owl_pred_info_p$UnaryFunction();
        declareFunction("opi_cyc_name", "OPI-CYC-NAME", 1, 0, false);
        declareFunction("opi_comment", "OPI-COMMENT", 1, 0, false);
        declareFunction("opi_domains", "OPI-DOMAINS", 1, 0, false);
        declareFunction("opi_range", "OPI-RANGE", 1, 0, false);
        declareFunction("opi_plist", "OPI-PLIST", 1, 0, false);
        declareFunction("_csetf_opi_cyc_name", "_CSETF-OPI-CYC-NAME", 2, 0, false);
        declareFunction("_csetf_opi_comment", "_CSETF-OPI-COMMENT", 2, 0, false);
        declareFunction("_csetf_opi_domains", "_CSETF-OPI-DOMAINS", 2, 0, false);
        declareFunction("_csetf_opi_range", "_CSETF-OPI-RANGE", 2, 0, false);
        declareFunction("_csetf_opi_plist", "_CSETF-OPI-PLIST", 2, 0, false);
        declareFunction("make_owl_pred_info", "MAKE-OWL-PRED-INFO", 0, 1, false);
        declareFunction("visit_defstruct_owl_pred_info", "VISIT-DEFSTRUCT-OWL-PRED-INFO", 2, 0, false);
        declareFunction("visit_defstruct_object_owl_pred_info_method", "VISIT-DEFSTRUCT-OBJECT-OWL-PRED-INFO-METHOD", 2, 0, false);
        declareFunction("print_owl_pred_info", "PRINT-OWL-PRED-INFO", 3, 0, false);
        declareFunction("find_or_create_owl_pred_info", "FIND-OR-CREATE-OWL-PRED-INFO", 1, 0, false);
        declareFunction("new_owl_pred_info", "NEW-OWL-PRED-INFO", 1, 4, false);
        declareFunction("owl_pred_info_cyc_name", "OWL-PRED-INFO-CYC-NAME", 1, 0, false);
        declareFunction("owl_pred_info_comment", "OWL-PRED-INFO-COMMENT", 1, 0, false);
        declareFunction("owl_pred_info_domains", "OWL-PRED-INFO-DOMAINS", 1, 0, false);
        declareFunction("owl_pred_info_range", "OWL-PRED-INFO-RANGE", 1, 0, false);
        declareFunction("owl_pred_info_plist", "OWL-PRED-INFO-PLIST", 1, 0, false);
        declareFunction("owl_pred_info_plist_lookup", "OWL-PRED-INFO-PLIST-LOOKUP", 2, 1, false);
        declareFunction("owl_pred_info_external_name", "OWL-PRED-INFO-EXTERNAL-NAME", 1, 1, false);
        declareFunction("set_owl_pred_info_cyc_name", "SET-OWL-PRED-INFO-CYC-NAME", 2, 0, false);
        declareFunction("set_owl_pred_info_comment", "SET-OWL-PRED-INFO-COMMENT", 2, 0, false);
        declareFunction("set_owl_pred_info_domains", "SET-OWL-PRED-INFO-DOMAINS", 2, 0, false);
        declareFunction("set_owl_pred_info_range", "SET-OWL-PRED-INFO-RANGE", 2, 0, false);
        declareFunction("merge_owl_pred_definitions", "MERGE-OWL-PRED-DEFINITIONS", 2, 0, false);
        declareFunction("owl_external_value_specification_p", "OWL-EXTERNAL-VALUE-SPECIFICATION-P", 1, 0, false);
        declareFunction("node_id_specification_p", "NODE-ID-SPECIFICATION-P", 1, 0, false);
        declareFunction("owl_restriction_p", "OWL-RESTRICTION-P", 1, 0, false);
        declareFunction("owl_external_value_specification_union_p", "OWL-EXTERNAL-VALUE-SPECIFICATION-UNION-P", 1, 0, false);
        declareFunction("owl_external_value_specification_union_names", "OWL-EXTERNAL-VALUE-SPECIFICATION-UNION-NAMES", 1, 0, false);
        declareFunction("owl_external_value_specification_intersection_p", "OWL-EXTERNAL-VALUE-SPECIFICATION-INTERSECTION-P", 1, 0, false);
        declareFunction("owl_external_value_specification_intersection_names", "OWL-EXTERNAL-VALUE-SPECIFICATION-INTERSECTION-NAMES", 1, 0, false);
        declareFunction("owl_external_term_enumeration_p", "OWL-EXTERNAL-TERM-ENUMERATION-P", 1, 0, false);
        declareFunction("owl_external_term_enumeration_terms", "OWL-EXTERNAL-TERM-ENUMERATION-TERMS", 1, 0, false);
        declareFunction("owl_pred_info_plist_enter", "OWL-PRED-INFO-PLIST-ENTER", 3, 0, false);
        declareFunction("owl_pred_info_plist_push", "OWL-PRED-INFO-PLIST-PUSH", 3, 0, false);
        declareFunction("sxhash_owl_pred_info_method", "SXHASH-OWL-PRED-INFO-METHOD", 1, 0, false);
        declareFunction("sxhash_owl_pred_info", "SXHASH-OWL-PRED-INFO", 1, 0, false);
        declareFunction("owl_import_parameters_print_function_trampoline", "OWL-IMPORT-PARAMETERS-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
        declareFunction("owl_import_parameters_p", "OWL-IMPORT-PARAMETERS-P", 1, 0, false);
        new owl_to_cycl.$owl_import_parameters_p$UnaryFunction();
        declareFunction("oip_ontology", "OIP-ONTOLOGY", 1, 0, false);
        declareFunction("oip_namespace_map", "OIP-NAMESPACE-MAP", 1, 0, false);
        declareFunction("oip_constant_prefix", "OIP-CONSTANT-PREFIX", 1, 0, false);
        declareFunction("oip_constant_suffix", "OIP-CONSTANT-SUFFIX", 1, 0, false);
        declareFunction("oip_base_uri", "OIP-BASE-URI", 1, 0, false);
        declareFunction("oip_uri_prefix", "OIP-URI-PREFIX", 1, 0, false);
        declareFunction("oip_cyclist", "OIP-CYCLIST", 1, 0, false);
        declareFunction("oip_quoted_isa", "OIP-QUOTED-ISA", 1, 0, false);
        declareFunction("oip_prefix_external_namesP", "OIP-PREFIX-EXTERNAL-NAMES?", 1, 0, false);
        declareFunction("oip_abbreviate_prefixesP", "OIP-ABBREVIATE-PREFIXES?", 1, 0, false);
        declareFunction("oip_import_term", "OIP-IMPORT-TERM", 1, 0, false);
        declareFunction("oip_encoding", "OIP-ENCODING", 1, 0, false);
        declareFunction("_csetf_oip_ontology", "_CSETF-OIP-ONTOLOGY", 2, 0, false);
        declareFunction("_csetf_oip_namespace_map", "_CSETF-OIP-NAMESPACE-MAP", 2, 0, false);
        declareFunction("_csetf_oip_constant_prefix", "_CSETF-OIP-CONSTANT-PREFIX", 2, 0, false);
        declareFunction("_csetf_oip_constant_suffix", "_CSETF-OIP-CONSTANT-SUFFIX", 2, 0, false);
        declareFunction("_csetf_oip_base_uri", "_CSETF-OIP-BASE-URI", 2, 0, false);
        declareFunction("_csetf_oip_uri_prefix", "_CSETF-OIP-URI-PREFIX", 2, 0, false);
        declareFunction("_csetf_oip_cyclist", "_CSETF-OIP-CYCLIST", 2, 0, false);
        declareFunction("_csetf_oip_quoted_isa", "_CSETF-OIP-QUOTED-ISA", 2, 0, false);
        declareFunction("_csetf_oip_prefix_external_namesP", "_CSETF-OIP-PREFIX-EXTERNAL-NAMES?", 2, 0, false);
        declareFunction("_csetf_oip_abbreviate_prefixesP", "_CSETF-OIP-ABBREVIATE-PREFIXES?", 2, 0, false);
        declareFunction("_csetf_oip_import_term", "_CSETF-OIP-IMPORT-TERM", 2, 0, false);
        declareFunction("_csetf_oip_encoding", "_CSETF-OIP-ENCODING", 2, 0, false);
        declareFunction("make_owl_import_parameters", "MAKE-OWL-IMPORT-PARAMETERS", 0, 1, false);
        declareFunction("visit_defstruct_owl_import_parameters", "VISIT-DEFSTRUCT-OWL-IMPORT-PARAMETERS", 2, 0, false);
        declareFunction("visit_defstruct_object_owl_import_parameters_method", "VISIT-DEFSTRUCT-OBJECT-OWL-IMPORT-PARAMETERS-METHOD", 2, 0, false);
        declareFunction("print_owl_import_parameters", "PRINT-OWL-IMPORT-PARAMETERS", 3, 0, false);
        declareFunction("new_owl_import_parameters", "NEW-OWL-IMPORT-PARAMETERS", 7, 2, false);
        declareFunction("cyclist_using_owl_importer_v1", "CYCLIST-USING-OWL-IMPORTER-V1", 1, 0, false);
        declareFunction("owl_import_parameters_ontology", "OWL-IMPORT-PARAMETERS-ONTOLOGY", 1, 0, false);
        declareFunction("owl_import_parameters_lookup_namespace", "OWL-IMPORT-PARAMETERS-LOOKUP-NAMESPACE", 2, 0, false);
        declareFunction("owl_import_parameters_constant_prefix", "OWL-IMPORT-PARAMETERS-CONSTANT-PREFIX", 1, 0, false);
        declareFunction("owl_import_parameters_constant_suffix", "OWL-IMPORT-PARAMETERS-CONSTANT-SUFFIX", 1, 0, false);
        declareFunction("owl_import_parameters_base_uri", "OWL-IMPORT-PARAMETERS-BASE-URI", 1, 0, false);
        declareFunction("owl_import_parameters_uri_prefix", "OWL-IMPORT-PARAMETERS-URI-PREFIX", 1, 0, false);
        declareFunction("owl_import_parameters_cyclist", "OWL-IMPORT-PARAMETERS-CYCLIST", 1, 0, false);
        declareFunction("owl_import_parameters_quoted_isa", "OWL-IMPORT-PARAMETERS-QUOTED-ISA", 1, 0, false);
        declareFunction("owl_import_parameters_prefix_external_namesP", "OWL-IMPORT-PARAMETERS-PREFIX-EXTERNAL-NAMES?", 1, 0, false);
        declareFunction("owl_import_parameters_abbreviate_prefixesP", "OWL-IMPORT-PARAMETERS-ABBREVIATE-PREFIXES?", 1, 0, false);
        declareFunction("owl_import_parameters_import_term", "OWL-IMPORT-PARAMETERS-IMPORT-TERM", 1, 0, false);
        declareFunction("owl_import_parameters_encoding", "OWL-IMPORT-PARAMETERS-ENCODING", 1, 0, false);
        declareFunction("owl_import_parameters_note_namespace", "OWL-IMPORT-PARAMETERS-NOTE-NAMESPACE", 3, 0, false);
        declareFunction("owl_import_parameters_note_base_uri", "OWL-IMPORT-PARAMETERS-NOTE-BASE-URI", 2, 0, false);
        declareFunction("owl_import_parameters_note_import_term", "OWL-IMPORT-PARAMETERS-NOTE-IMPORT-TERM", 2, 0, false);
        declareFunction("owl_import_parameters_note_encoding", "OWL-IMPORT-PARAMETERS-NOTE-ENCODING", 2, 0, false);
        declareFunction("sxhash_owl_import_parameters_method", "SXHASH-OWL-IMPORT-PARAMETERS-METHOD", 1, 0, false);
        declareFunction("sxhash_owl_import_parameters", "SXHASH-OWL-IMPORT-PARAMETERS", 1, 0, false);
        declareFunction("verify_imports_for_ontology_tokens", "VERIFY-IMPORTS-FOR-ONTOLOGY-TOKENS", 3, 0, false);
        declareFunction("validate_and_note_owl_namespaces", "VALIDATE-AND-NOTE-OWL-NAMESPACES", 3, 0, false);
        declareFunction("validate_and_note_owl_namespaces_for_token", "VALIDATE-AND-NOTE-OWL-NAMESPACES-FOR-TOKEN", 3, 0, false);
        declareFunction("validate_and_note_owl_namespace", "VALIDATE-AND-NOTE-OWL-NAMESPACE", 4, 0, false);
        declareFunction("owl_reserved_namespace_p", "OWL-RESERVED-NAMESPACE-P", 1, 0, false);
        declareFunction("owl_reserved_namespace_problem", "OWL-RESERVED-NAMESPACE-PROBLEM", 2, 0, false);
        declareFunction("owl_imported_namespace_problem", "OWL-IMPORTED-NAMESPACE-PROBLEM", 2, 0, false);
        declareFunction("clear_find_or_create_owl_ontology_for_uri", "CLEAR-FIND-OR-CREATE-OWL-ONTOLOGY-FOR-URI", 0, 0, false);
        declareFunction("remove_find_or_create_owl_ontology_for_uri", "REMOVE-FIND-OR-CREATE-OWL-ONTOLOGY-FOR-URI", 1, 2, false);
        declareFunction("find_or_create_owl_ontology_for_uri_internal", "FIND-OR-CREATE-OWL-ONTOLOGY-FOR-URI-INTERNAL", 3, 0, false);
        declareFunction("find_or_create_owl_ontology_for_uri", "FIND-OR-CREATE-OWL-ONTOLOGY-FOR-URI", 1, 2, false);
        declareFunction("find_or_create_term_type_for_ontology", "FIND-OR-CREATE-TERM-TYPE-FOR-ONTOLOGY", 1, 1, false);
        declareFunction("read_pred_info_from_owl_tokens", "READ-PRED-INFO-FROM-OWL-TOKENS", 2, 0, false);
        declareFunction("clear_owl_property_element_names", "CLEAR-OWL-PROPERTY-ELEMENT-NAMES", 0, 0, false);
        declareFunction("remove_owl_property_element_names", "REMOVE-OWL-PROPERTY-ELEMENT-NAMES", 0, 0, false);
        declareFunction("owl_property_element_names_internal", "OWL-PROPERTY-ELEMENT-NAMES-INTERNAL", 0, 0, false);
        declareFunction("owl_property_element_names", "OWL-PROPERTY-ELEMENT-NAMES", 0, 0, false);
        declareFunction("owl_property_token_p", "OWL-PROPERTY-TOKEN-P", 1, 0, false);
        declareFunction("read_one_owl_chunk_for_pred_info", "READ-ONE-OWL-CHUNK-FOR-PRED-INFO", 4, 0, false);
        declareFunction("cyc_token_with_nameP", "CYC-TOKEN-WITH-NAME?", 3, 0, false);
        declareFunction("process_owl_attribute_value", "PROCESS-OWL-ATTRIBUTE-VALUE", 1, 0, false);
        declareFunction("owl_note_spec_property", "OWL-NOTE-SPEC-PROPERTY", 2, 0, false);
        declareFunction("owl_lookup_spec_properties", "OWL-LOOKUP-SPEC-PROPERTIES", 1, 0, false);
        declareFunction("create_preds_from_owl_data", "CREATE-PREDS-FROM-OWL-DATA", 2, 0, false);
        declareFunction("process_domain_list", "PROCESS-DOMAIN-LIST", 2, 0, false);
        declareFunction("process_range_list", "PROCESS-RANGE-LIST", 2, 0, false);
        declareFunction("clear_owl_class_element_names", "CLEAR-OWL-CLASS-ELEMENT-NAMES", 0, 0, false);
        declareFunction("remove_owl_class_element_names", "REMOVE-OWL-CLASS-ELEMENT-NAMES", 0, 0, false);
        declareFunction("owl_class_element_names_internal", "OWL-CLASS-ELEMENT-NAMES-INTERNAL", 0, 0, false);
        declareFunction("owl_class_element_names", "OWL-CLASS-ELEMENT-NAMES", 0, 0, false);
        declareFunction("owl_class_token_p", "OWL-CLASS-TOKEN-P", 1, 0, false);
        declareFunction("read_owl_class", "READ-OWL-CLASS", 2, 0, false);
        declareFunction("handle_open_class_tag", "HANDLE-OPEN-CLASS-TAG", 3, 0, false);
        declareFunction("read_owl_enumeration", "READ-OWL-ENUMERATION", 2, 0, false);
        declareFunction("possible_read_owl_list_p", "POSSIBLE-READ-OWL-LIST-P", 1, 0, false);
        declareFunction("read_owl_list", "READ-OWL-LIST", 2, 0, false);
        declareFunction("read_owl_list_recursive", "READ-OWL-LIST-RECURSIVE", 2, 0, false);
        declareFunction("read_one_owl_list_item", "READ-ONE-OWL-LIST-ITEM", 2, 0, false);
        declareFunction("owl_external_value_specification_union", "OWL-EXTERNAL-VALUE-SPECIFICATION-UNION", 1, 0, false);
        declareFunction("first_non_whitespace_xml_token_position", "FIRST-NON-WHITESPACE-XML-TOKEN-POSITION", 1, 0, false);
        declareFunction("next_noninitial_non_whitespace_xml_token_position", "NEXT-NONINITIAL-NON-WHITESPACE-XML-TOKEN-POSITION", 1, 0, false);
        declareFunction("next_noninitial_non_whitespace_xml_token", "NEXT-NONINITIAL-NON-WHITESPACE-XML-TOKEN", 1, 0, false);
        declareFunction("pred_names_from_token", "PRED-NAMES-FROM-TOKEN", 2, 0, false);
        declareFunction("owl_pred_cyc_name_from_external_name", "OWL-PRED-CYC-NAME-FROM-EXTERNAL-NAME", 2, 0, false);
        declareFunction("owl_pred_cyc_name_base", "OWL-PRED-CYC-NAME-BASE", 1, 0, false);
        declareFunction("owl_find_or_create_pred_arg_isa", "OWL-FIND-OR-CREATE-PRED-ARG-ISA", 2, 0, false);
        declareFunction("xml_schema_class_uris_internal", "XML-SCHEMA-CLASS-URIS-INTERNAL", 0, 0, false);
        declareFunction("xml_schema_class_uris", "XML-SCHEMA-CLASS-URIS", 0, 0, false);
        declareFunction("owl_find_or_create_term_for_class", "OWL-FIND-OR-CREATE-TERM-FOR-CLASS", 1, 1, false);
        declareFunction("owl_uri_from_prefix", "OWL-URI-FROM-PREFIX", 2, 0, false);
        declareFunction("owl_find_or_create_term_of_type_internal", "OWL-FIND-OR-CREATE-TERM-OF-TYPE-INTERNAL", 3, 0, false);
        declareFunction("owl_find_or_create_term_of_type", "OWL-FIND-OR-CREATE-TERM-OF-TYPE", 3, 0, false);
        declareFunction("owl_find_or_create_term_for_class_in_ontology", "OWL-FIND-OR-CREATE-TERM-FOR-CLASS-IN-ONTOLOGY", 3, 0, false);
        declareFunction("owl_find_or_create_term_of_type_in_ontology_internal", "OWL-FIND-OR-CREATE-TERM-OF-TYPE-IN-ONTOLOGY-INTERNAL", 4, 1, false);
        declareFunction("owl_find_or_create_term_of_type_in_ontology", "OWL-FIND-OR-CREATE-TERM-OF-TYPE-IN-ONTOLOGY", 4, 1, false);
        declareFunction("create_owl_term", "CREATE-OWL-TERM", 4, 0, false);
        declareFunction("assert_synonymous_external_concept", "ASSERT-SYNONYMOUS-EXTERNAL-CONCEPT", 4, 0, false);
        declareFunction("get_synonymous_external_concept_sentence", "GET-SYNONYMOUS-EXTERNAL-CONCEPT-SENTENCE", 4, 0, false);
        declareFunction("prefix_external_owl_name", "PREFIX-EXTERNAL-OWL-NAME", 3, 0, false);
        declareFunction("uri_for_owl_ontology", "URI-FOR-OWL-ONTOLOGY", 2, 0, false);
        declareFunction("get_uri_for_owl_ontology", "GET-URI-FOR-OWL-ONTOLOGY", 1, 0, false);
        declareFunction("stringify_uri", "STRINGIFY-URI", 1, 0, false);
        declareFunction("try_to_abbreviate_owl_uri_internal", "TRY-TO-ABBREVIATE-OWL-URI-INTERNAL", 2, 0, false);
        declareFunction("try_to_abbreviate_owl_uri", "TRY-TO-ABBREVIATE-OWL-URI", 2, 0, false);
        declareFunction("load_namespace_transcripts", "LOAD-NAMESPACE-TRANSCRIPTS", 0, 0, false);
        declareFunction("try_to_abbreviate_owl_uri_recursive", "TRY-TO-ABBREVIATE-OWL-URI-RECURSIVE", 3, 0, false);
        declareFunction("owl_term_union", "OWL-TERM-UNION", 2, 0, false);
        declareFunction("cycl_term_or_owl_quasi_term_p", "CYCL-TERM-OR-OWL-QUASI-TERM-P", 1, 0, false);
        declareFunction("owl_term_intersection", "OWL-TERM-INTERSECTION", 2, 0, false);
        declareFunction("owl_term_enumeration", "OWL-TERM-ENUMERATION", 2, 0, false);
        declareFunction("oip_pred_prefix", "OIP-PRED-PREFIX", 1, 0, false);
        declareFunction("owl_define_one_pred", "OWL-DEFINE-ONE-PRED", 2, 0, false);
        declareFunction("owl_pred_types_from_info", "OWL-PRED-TYPES-FROM-INFO", 2, 0, false);
        declareFunction("owl_term_types_from_info", "OWL-TERM-TYPES-FROM-INFO", 2, 0, false);
        declareFunction("owl_define_one_pred_internal", "OWL-DEFINE-ONE-PRED-INTERNAL", 3, 0, false);
        declareFunction("owl_find_pred", "OWL-FIND-PRED", 2, 0, false);
        declareFunction("owl_find_collection", "OWL-FIND-COLLECTION", 2, 0, false);
        declareFunction("note_owl_found_term", "NOTE-OWL-FOUND-TERM", 3, 0, false);
        declareFunction("clear_owl_found_terms", "CLEAR-OWL-FOUND-TERMS", 0, 0, false);
        declareFunction("lookup_owl_found_term", "LOOKUP-OWL-FOUND-TERM", 2, 0, false);
        declareFunction("owl_find_term_of_type", "OWL-FIND-TERM-OF-TYPE", 3, 1, false);
        declareFunction("owl_arg2isa_from_range", "OWL-ARG2ISA-FROM-RANGE", 2, 0, false);
        declareFunction("note_owl_oe_queue_done", "NOTE-OWL-OE-QUEUE-DONE", 0, 1, false);
        declareFunction("new_owl_oe_queue", "NEW-OWL-OE-QUEUE", 0, 0, false);
        declareFunction("owl_oe_queue_modified_flag", "OWL-OE-QUEUE-MODIFIED-FLAG", 1, 0, false);
        declareFunction("set_owl_oe_queue_modified_flag", "SET-OWL-OE-QUEUE-MODIFIED-FLAG", 2, 0, false);
        declareFunction("owl_oe_queue_modifiedP", "OWL-OE-QUEUE-MODIFIED?", 1, 0, false);
        declareFunction("owl_oe_queue_queue", "OWL-OE-QUEUE-QUEUE", 1, 0, false);
        declareFunction("owl_oe_queue_importer", "OWL-OE-QUEUE-IMPORTER", 1, 0, false);
        declareFunction("ensure_owl_oe_daemon_running", "ENSURE-OWL-OE-DAEMON-RUNNING", 0, 0, false);
        declareFunction("launch_owl_oe_queue_daemon", "LAUNCH-OWL-OE-QUEUE-DAEMON", 0, 0, false);
        declareFunction("owl_oe_queue_enqueue", "OWL-OE-QUEUE-ENQUEUE", 1, 1, false);
        declareFunction("owl_oe_queue_reenqueue", "OWL-OE-QUEUE-REENQUEUE", 2, 0, false);
        declareFunction("owl_oe_queue_enqueue_low", "OWL-OE-QUEUE-ENQUEUE-LOW", 3, 0, false);
        declareFunction("owl_node_id_index", "OWL-NODE-ID-INDEX", 0, 0, false);
        declareFunction("note_node_id_reference", "NOTE-NODE-ID-REFERENCE", 2, 0, false);
        declareFunction("lookup_node_id_reference", "LOOKUP-NODE-ID-REFERENCE", 1, 0, false);
        declareFunction("owl_create", "OWL-CREATE", 7, 0, false);
        declareFunction("owl_create_internal", "OWL-CREATE-INTERNAL", 6, 0, false);
        declareFunction("owl_create_new_constant", "OWL-CREATE-NEW-CONSTANT", 6, 0, false);
        declareFunction("owl_create_new_constant_non_rkf", "OWL-CREATE-NEW-CONSTANT-NON-RKF", 5, 0, false);
        declareFunction("owl_enqueue_assert", "OWL-ENQUEUE-ASSERT", 2, 1, false);
        declareFunction("new_owl_oe_daemon", "NEW-OWL-OE-DAEMON", 0, 0, false);
        declareFunction("owl_oe_queue_empty_p", "OWL-OE-QUEUE-EMPTY-P", 1, 0, false);
        declareFunction("wait_for_owl_oe_queue_to_empty", "WAIT-FOR-OWL-OE-QUEUE-TO-EMPTY", 0, 1, false);
        declareFunction("owl_oe_daemon_run", "OWL-OE-DAEMON-RUN", 0, 0, false);
        declareFunction("note_owl_failure", "NOTE-OWL-FAILURE", 1, 1, false);
        declareFunction("owl_failure_message", "OWL-FAILURE-MESSAGE", 1, 0, false);
        declareFunction("owl_oe_daemon_assert", "OWL-OE-DAEMON-ASSERT", 1, 0, false);
        declareFunction("owl_quasi_term_from_specification", "OWL-QUASI-TERM-FROM-SPECIFICATION", 4, 0, false);
        declareFunction("owl_quasi_term_from_node_id", "OWL-QUASI-TERM-FROM-NODE-ID", 1, 1, false);
        declareFunction("owl_quasi_term_p", "OWL-QUASI-TERM-P", 1, 0, false);
        declareFunction("resolve_owl_quasi_term", "RESOLVE-OWL-QUASI-TERM", 1, 0, false);
        declareFunction("clear_note_found_term_resolution", "CLEAR-NOTE-FOUND-TERM-RESOLUTION", 0, 0, false);
        declareFunction("remove_note_found_term_resolution", "REMOVE-NOTE-FOUND-TERM-RESOLUTION", 2, 0, false);
        declareFunction("note_found_term_resolution_internal", "NOTE-FOUND-TERM-RESOLUTION-INTERNAL", 2, 0, false);
        declareFunction("note_found_term_resolution", "NOTE-FOUND-TERM-RESOLUTION", 2, 0, false);
        declareFunction("owl_assert_internal", "OWL-ASSERT-INTERNAL", 3, 0, false);
        declareFunction("owl_assert", "OWL-ASSERT", 3, 0, false);
        declareFunction("owl_assert_low", "OWL-ASSERT-LOW", 2, 0, false);
        declareFunction("create_terms_from_owl_data", "CREATE-TERMS-FROM-OWL-DATA", 2, 1, false);
        declareFunction("dont_reify_owl_termP", "DONT-REIFY-OWL-TERM?", 2, 0, false);
        declareFunction("owl_define_one_term", "OWL-DEFINE-ONE-TERM", 2, 0, false);
        declareFunction("owl_find_term_from_info", "OWL-FIND-TERM-FROM-INFO", 2, 0, false);
        declareFunction("owl_define_one_term_internal", "OWL-DEFINE-ONE-TERM-INTERNAL", 4, 0, false);
        declareFunction("assert_owl_label", "ASSERT-OWL-LABEL", 3, 0, false);
        declareFunction("assert_owl_equivalent_class", "ASSERT-OWL-EQUIVALENT-CLASS", 4, 0, false);
        declareFunction("assert_owl_restriction", "ASSERT-OWL-RESTRICTION", 4, 0, false);
        declareFunction("owl_restriction_sentence", "OWL-RESTRICTION-SENTENCE", 3, 0, false);
        declareFunction("owl_restriction_collection", "OWL-RESTRICTION-COLLECTION", 2, 1, false);
        declareFunction("find_or_create_owl_class_from_restriction_internal", "FIND-OR-CREATE-OWL-CLASS-FROM-RESTRICTION-INTERNAL", 2, 1, false);
        declareFunction("find_or_create_owl_class_from_restriction", "FIND-OR-CREATE-OWL-CLASS-FROM-RESTRICTION", 2, 1, false);
        declareFunction("owl_find_or_create_nat", "OWL-FIND-OR-CREATE-NAT", 2, 0, false);
        declareFunction("try_to_resolve_node_id_specification", "TRY-TO-RESOLVE-NODE-ID-SPECIFICATION", 1, 0, false);
        declareFunction("owl_find_or_create_term_from_specification", "OWL-FIND-OR-CREATE-TERM-FROM-SPECIFICATION", 3, 0, false);
        declareFunction("owl_find_or_create_union", "OWL-FIND-OR-CREATE-UNION", 3, 1, false);
        declareFunction("owl_find_or_create_intersection", "OWL-FIND-OR-CREATE-INTERSECTION", 3, 1, false);
        declareFunction("owl_find_or_create_classes_from_node_id", "OWL-FIND-OR-CREATE-CLASSES-FROM-NODE-ID", 3, 0, false);
        declareFunction("owl_find_or_create_term_from_node_id", "OWL-FIND-OR-CREATE-TERM-FROM-NODE-ID", 3, 0, false);
        declareFunction("owl_term_info_print_function_trampoline", "OWL-TERM-INFO-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
        declareFunction("owl_term_info_p", "OWL-TERM-INFO-P", 1, 0, false);
        new owl_to_cycl.$owl_term_info_p$UnaryFunction();
        declareFunction("oti_cyc_name", "OTI-CYC-NAME", 1, 0, false);
        declareFunction("oti_comment", "OTI-COMMENT", 1, 0, false);
        declareFunction("oti_superclasses", "OTI-SUPERCLASSES", 1, 0, false);
        declareFunction("oti_disjoint_classes", "OTI-DISJOINT-CLASSES", 1, 0, false);
        declareFunction("oti_plist", "OTI-PLIST", 1, 0, false);
        declareFunction("_csetf_oti_cyc_name", "_CSETF-OTI-CYC-NAME", 2, 0, false);
        declareFunction("_csetf_oti_comment", "_CSETF-OTI-COMMENT", 2, 0, false);
        declareFunction("_csetf_oti_superclasses", "_CSETF-OTI-SUPERCLASSES", 2, 0, false);
        declareFunction("_csetf_oti_disjoint_classes", "_CSETF-OTI-DISJOINT-CLASSES", 2, 0, false);
        declareFunction("_csetf_oti_plist", "_CSETF-OTI-PLIST", 2, 0, false);
        declareFunction("make_owl_term_info", "MAKE-OWL-TERM-INFO", 0, 1, false);
        declareFunction("visit_defstruct_owl_term_info", "VISIT-DEFSTRUCT-OWL-TERM-INFO", 2, 0, false);
        declareFunction("visit_defstruct_object_owl_term_info_method", "VISIT-DEFSTRUCT-OBJECT-OWL-TERM-INFO-METHOD", 2, 0, false);
        declareFunction("print_owl_term_info", "PRINT-OWL-TERM-INFO", 3, 0, false);
        declareFunction("find_or_create_owl_term_info", "FIND-OR-CREATE-OWL-TERM-INFO", 1, 0, false);
        declareFunction("new_owl_term_info", "NEW-OWL-TERM-INFO", 0, 2, false);
        declareFunction("owl_term_info_cyc_name", "OWL-TERM-INFO-CYC-NAME", 1, 0, false);
        declareFunction("owl_term_info_comment", "OWL-TERM-INFO-COMMENT", 1, 0, false);
        declareFunction("owl_term_info_superclasses", "OWL-TERM-INFO-SUPERCLASSES", 1, 0, false);
        declareFunction("owl_term_info_disjoint_classes", "OWL-TERM-INFO-DISJOINT-CLASSES", 1, 0, false);
        declareFunction("owl_term_info_plist", "OWL-TERM-INFO-PLIST", 1, 0, false);
        declareFunction("owl_term_info_plist_lookup", "OWL-TERM-INFO-PLIST-LOOKUP", 2, 1, false);
        declareFunction("owl_term_info_external_name", "OWL-TERM-INFO-EXTERNAL-NAME", 1, 1, false);
        declareFunction("set_owl_term_info_cyc_name", "SET-OWL-TERM-INFO-CYC-NAME", 2, 0, false);
        declareFunction("set_owl_term_info_comment", "SET-OWL-TERM-INFO-COMMENT", 2, 0, false);
        declareFunction("add_owl_term_info_superclass", "ADD-OWL-TERM-INFO-SUPERCLASS", 2, 0, false);
        declareFunction("add_owl_term_info_disjoint_class", "ADD-OWL-TERM-INFO-DISJOINT-CLASS", 2, 0, false);
        declareFunction("owl_term_info_plist_enter", "OWL-TERM-INFO-PLIST-ENTER", 3, 0, false);
        declareFunction("owl_term_info_plist_push", "OWL-TERM-INFO-PLIST-PUSH", 3, 0, false);
        declareFunction("owl_term_info_plist_list_propertyP", "OWL-TERM-INFO-PLIST-LIST-PROPERTY?", 1, 0, false);
        declareFunction("merge_owl_term_definitions", "MERGE-OWL-TERM-DEFINITIONS", 2, 0, false);
        declareFunction("sxhash_owl_term_info_method", "SXHASH-OWL-TERM-INFO-METHOD", 1, 0, false);
        declareFunction("sxhash_owl_term_info", "SXHASH-OWL-TERM-INFO", 1, 0, false);
        declareFunction("import_named_bnodes", "IMPORT-NAMED-BNODES", 2, 0, false);
        declareFunction("read_one_named_bnode", "READ-ONE-NAMED-BNODE", 2, 0, false);
        declareFunction("read_class_info_from_owl_tokens", "READ-CLASS-INFO-FROM-OWL-TOKENS", 2, 0, false);
        declareFunction("read_one_class_info_from_owl_tokens", "READ-ONE-CLASS-INFO-FROM-OWL-TOKENS", 2, 0, false);
        declareFunction("read_one_owl_chunk_for_class_info", "READ-ONE-OWL-CHUNK-FOR-CLASS-INFO", 4, 0, false);
        declareFunction("read_instance_info_from_owl_tokens", "READ-INSTANCE-INFO-FROM-OWL-TOKENS", 2, 0, false);
        declareFunction("read_one_instance_info_from_owl_tokens", "READ-ONE-INSTANCE-INFO-FROM-OWL-TOKENS", 2, 0, false);
        declareFunction("read_one_owl_chunk_for_instance_info", "READ-ONE-OWL-CHUNK-FOR-INSTANCE-INFO", 4, 0, false);
        declareFunction("owl_maybe_instance_tokenP", "OWL-MAYBE-INSTANCE-TOKEN?", 2, 0, false);
        declareFunction("owl_non_instance_tokenP", "OWL-NON-INSTANCE-TOKEN?", 2, 0, false);
        declareFunction("handle_non_target_owl_token", "HANDLE-NON-TARGET-OWL-TOKEN", 1, 0, false);
        declareFunction("handle_term_info_token", "HANDLE-TERM-INFO-TOKEN", 3, 0, false);
        declareFunction("handle_cyc_guid", "HANDLE-CYC-GUID", 2, 0, false);
        declareFunction("handle_cyc_external_id", "HANDLE-CYC-EXTERNAL-ID", 2, 0, false);
        declareFunction("handle_property_value_pair", "HANDLE-PROPERTY-VALUE-PAIR", 4, 0, false);
        declareFunction("read_owl_term_reference", "READ-OWL-TERM-REFERENCE", 2, 0, false);
        declareFunction("owl_import_parameters_class_prefix", "OWL-IMPORT-PARAMETERS-CLASS-PREFIX", 1, 0, false);
        declareFunction("term_names_from_token", "TERM-NAMES-FROM-TOKEN", 2, 0, false);
        declareFunction("owl_external_name_from_token", "OWL-EXTERNAL-NAME-FROM-TOKEN", 2, 0, false);
        declareFunction("owl_class_cyc_name_from_external_name", "OWL-CLASS-CYC-NAME-FROM-EXTERNAL-NAME", 2, 0, false);
        declareFunction("nonlocal_owl_term_reference_p", "NONLOCAL-OWL-TERM-REFERENCE-P", 1, 0, false);
        declareFunction("resolve_nonlocal_owl_term_reference", "RESOLVE-NONLOCAL-OWL-TERM-REFERENCE", 3, 0, false);
        declareFunction("read_owl_class_or_restriction", "READ-OWL-CLASS-OR-RESTRICTION", 2, 0, false);
        declareFunction("read_owl_restriction", "READ-OWL-RESTRICTION", 2, 0, false);
        declareFunction("read_part_of_owl_restriction", "READ-PART-OF-OWL-RESTRICTION", 8, 0, false);
        declareFunction("read_owl_restriction_property", "READ-OWL-RESTRICTION-PROPERTY", 2, 0, false);
        declareFunction("read_owl_restriction_class", "READ-OWL-RESTRICTION-CLASS", 2, 0, false);
        declareFunction("owl_value_from_string", "OWL-VALUE-FROM-STRING", 2, 0, false);
        declareFunction("clear_xml_name", "CLEAR-XML-NAME", 0, 0, false);
        declareFunction("remove_xml_name", "REMOVE-XML-NAME", 1, 0, false);
        declareFunction("xml_name_internal", "XML-NAME-INTERNAL", 1, 0, false);
        declareFunction("xml_name", "XML-NAME", 1, 0, false);
        declareFunction("owl_importer_print_function_trampoline", "OWL-IMPORTER-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
        declareFunction("owl_importer_p", "OWL-IMPORTER-P", 1, 0, false);
        new owl_to_cycl.$owl_importer_p$UnaryFunction();
        declareFunction("owl_imp_id", "OWL-IMP-ID", 1, 0, false);
        declareFunction("owl_imp_progress", "OWL-IMP-PROGRESS", 1, 0, false);
        declareFunction("owl_imp_error_info", "OWL-IMP-ERROR-INFO", 1, 0, false);
        declareFunction("owl_imp_import_parameters", "OWL-IMP-IMPORT-PARAMETERS", 1, 0, false);
        declareFunction("owl_imp_thread", "OWL-IMP-THREAD", 1, 0, false);
        declareFunction("_csetf_owl_imp_id", "_CSETF-OWL-IMP-ID", 2, 0, false);
        declareFunction("_csetf_owl_imp_progress", "_CSETF-OWL-IMP-PROGRESS", 2, 0, false);
        declareFunction("_csetf_owl_imp_error_info", "_CSETF-OWL-IMP-ERROR-INFO", 2, 0, false);
        declareFunction("_csetf_owl_imp_import_parameters", "_CSETF-OWL-IMP-IMPORT-PARAMETERS", 2, 0, false);
        declareFunction("_csetf_owl_imp_thread", "_CSETF-OWL-IMP-THREAD", 2, 0, false);
        declareFunction("make_owl_importer", "MAKE-OWL-IMPORTER", 0, 1, false);
        declareFunction("visit_defstruct_owl_importer", "VISIT-DEFSTRUCT-OWL-IMPORTER", 2, 0, false);
        declareFunction("visit_defstruct_object_owl_importer_method", "VISIT-DEFSTRUCT-OBJECT-OWL-IMPORTER-METHOD", 2, 0, false);
        declareFunction("print_owl_importer", "PRINT-OWL-IMPORTER", 3, 0, false);
        declareFunction("new_owl_importer", "NEW-OWL-IMPORTER", 0, 0, false);
        declareFunction("owl_importer_id", "OWL-IMPORTER-ID", 1, 0, false);
        declareFunction("owl_importer_progress", "OWL-IMPORTER-PROGRESS", 1, 0, false);
        declareFunction("owl_importer_error_info", "OWL-IMPORTER-ERROR-INFO", 1, 0, false);
        declareFunction("owl_importer_import_parameters", "OWL-IMPORTER-IMPORT-PARAMETERS", 1, 0, false);
        declareFunction("owl_importer_thread", "OWL-IMPORTER-THREAD", 1, 0, false);
        declareFunction("sxhash_owl_importer_method", "SXHASH-OWL-IMPORTER-METHOD", 1, 0, false);
        declareFunction("sxhash_owl_importer", "SXHASH-OWL-IMPORTER", 1, 0, false);
        declareFunction("import_owl_ontology_with_importer", "IMPORT-OWL-ONTOLOGY-WITH-IMPORTER", 2, 6, false);
        declareFunction("import_owl_ontology_with_importer_from_info", "IMPORT-OWL-ONTOLOGY-WITH-IMPORTER-FROM-INFO", 1, 0, false);
        declareFunction("get_owl_importer_ontology", "GET-OWL-IMPORTER-ONTOLOGY", 1, 0, false);
        declareFunction("get_owl_importer_progress", "GET-OWL-IMPORTER-PROGRESS", 1, 0, false);
        declareFunction("get_owl_importer_error_info", "GET-OWL-IMPORTER-ERROR-INFO", 1, 0, false);
        declareFunction("owl_importer_done_p", "OWL-IMPORTER-DONE-P", 1, 0, false);
        declareFunction("owl_importer_exists_p", "OWL-IMPORTER-EXISTS-P", 1, 0, false);
        declareFunction("owl_importer_id_index", "OWL-IMPORTER-ID-INDEX", 0, 0, false);
        declareFunction("find_owl_importer_by_id", "FIND-OWL-IMPORTER-BY-ID", 1, 0, false);
        declareFunction("note_owl_import_parameters", "NOTE-OWL-IMPORT-PARAMETERS", 1, 0, false);
        declareFunction("note_owl_import_section_progress", "NOTE-OWL-IMPORT-SECTION-PROGRESS", 1, 0, false);
        declareFunction("note_owl_import_section_started", "NOTE-OWL-IMPORT-SECTION-STARTED", 0, 0, false);
        declareFunction("note_owl_import_section_done", "NOTE-OWL-IMPORT-SECTION-DONE", 0, 0, false);
        declareFunction("note_owl_import_done", "NOTE-OWL-IMPORT-DONE", 0, 0, false);
        declareFunction("note_owl_import_problem", "NOTE-OWL-IMPORT-PROBLEM", 2, 0, false);
        declareFunction("owl_importer_run", "OWL-IMPORTER-RUN", 1, 0, false);
        declareFunction("import_sample_ontologies", "IMPORT-SAMPLE-ONTOLOGIES", 0, 0, false);
        return NIL;
    }

    public static final SubLObject init_owl_to_cycl_file_alt() {
        deflexical("*OWL-IMPORTER-V1-VERSION-NUMBER*", NIL != boundp($sym0$_OWL_IMPORTER_V1_VERSION_NUMBER_) ? ((SubLObject) ($owl_importer_v1_version_number$.getGlobalValue())) : NIL);
        defparameter("*OWL-IMPORTER*", NIL);
        deflexical("*OWL-MERGE-MT*", $$OWLMappingMt);
        deflexical("*OWL-TERM-NAMES-PRECEDED-BY-ID*", $list_alt51);
        deflexical("*OWL-TERM-NAMES-PRECEDED-BY-ABOUT*", $list_alt52);
        deflexical("*OWL-TERM-NAMES-PRECEDED-BY-RESOURCE*", $list_alt53);
        deflexical("*OWL-TERM-NAMES-PRECEDED-BY-PARSE-TYPE*", $list_alt54);
        defparameter("*OWL-DEFINITION-TYPES*", $list_alt55);
        defparameter("*OWL-DEFINITION-TYPE*", NIL);
        defparameter("*OWL-DEFINITION-ACCUMULATOR*", misc_utilities.uninitialized());
        defparameter("*OWL-OE-QUEUE*", NIL);
        defparameter("*OWL-IMPORT-PARAMETERS*", NIL);
        deflexical("*XML-TOKENS-FROM-FILE-CACHING-STATE*", NIL);
        deflexical("*DEFAULT-OWL-FILE-ENCODING*", $str_alt79$utf_8);
        deflexical("*OWL-IMPORT-PARAMETERS-ONTOLOGY-CONTEXT-CACHING-STATE*", NIL);
        defconstant("*DTP-OWL-PRED-INFO*", OWL_PRED_INFO);
        defconstant("*DTP-OWL-IMPORT-PARAMETERS*", OWL_IMPORT_PARAMETERS);
        deflexical("*OWL-RESERVED-NAMESPACES*", $list_alt207);
        deflexical("*FIND-OR-CREATE-OWL-ONTOLOGY-FOR-URI-CACHING-STATE*", NIL);
        deflexical("*OWL-PROPERTY-ELEMENT-NAMES-CACHING-STATE*", NIL);
        defparameter("*OWL-SPEC-PROPERTIES*", misc_utilities.uninitialized());
        deflexical("*OWL-CLASS-ELEMENT-NAMES-CACHING-STATE*", NIL);
        defparameter("*OWL-FORCE-NEW-TERM-CREATION?*", NIL);
        defparameter("*OWL-ALLOW-FIND-VIA-CREATION?*", NIL);
        deflexical("*CYC-PROPERTIES-TO-NOT-IMPORT*", $list_alt378);
        deflexical("*OWL-FOUND-TERMS*", dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED));
        deflexical("*OWL-OE-QUEUES*", NIL != boundp($owl_oe_queues$) ? ((SubLObject) ($owl_oe_queues$.getGlobalValue())) : NIL);
        deflexical("*OWL-OE-DAEMON*", NIL != boundp($owl_oe_daemon$) ? ((SubLObject) ($owl_oe_daemon$.getGlobalValue())) : NIL);
        deflexical("*OWL-OE-QUEUE-MARKER*", CHAR_vertical);
        deflexical("*OWL-OE-QUEUE-END-MARKER*", CHAR_exclamation);
        deflexical("*OWL-NODE-ID-INDEX*", NIL != boundp($owl_node_id_index$) ? ((SubLObject) ($owl_node_id_index$.getGlobalValue())) : NIL);
        deflexical("*NOTE-FOUND-TERM-RESOLUTION-CACHING-STATE*", NIL);
        defparameter("*CREATE-ANONYMOUS-OWL-TERMS?*", NIL);
        defparameter("*OWL-TERM-FROM-SPECIFICATION-DEPTH*", ZERO_INTEGER);
        defconstant("*DTP-OWL-TERM-INFO*", OWL_TERM_INFO);
        deflexical("*OWL-INTERVAL-DATATYPES*", $list_alt586);
        deflexical("*XML-NAME-CACHING-STATE*", NIL);
        defconstant("*DTP-OWL-IMPORTER*", OWL_IMPORTER);
        deflexical("*OWL-IMPORTER-ID-INDEX*", NIL != boundp($owl_importer_id_index$) ? ((SubLObject) ($owl_importer_id_index$.getGlobalValue())) : NIL);
        deflexical("*SWEET-ROOT*", $str_alt632$http___sweet_jpl_nasa_gov_ontolog);
        deflexical("*SWEET-ONTOLOGIES*", $list_alt633);
        return NIL;
    }

    public static SubLObject init_owl_to_cycl_file() {
        if (SubLFiles.USE_V1) {
            deflexical("*OWL-IMPORTER-V1-VERSION-NUMBER*", SubLTrampolineFile.maybeDefault(owl_to_cycl.$sym0$_OWL_IMPORTER_V1_VERSION_NUMBER_, owl_to_cycl.$owl_importer_v1_version_number$, NIL));
            defparameter("*OWL-IMPORTER*", NIL);
            deflexical("*OWL-MERGE-MT*", owl_to_cycl.$$OWLMappingMt);
            deflexical("*OWL-TERM-NAMES-PRECEDED-BY-ID*", owl_to_cycl.$list49);
            deflexical("*OWL-TERM-NAMES-PRECEDED-BY-ABOUT*", owl_to_cycl.$list50);
            deflexical("*OWL-TERM-NAMES-PRECEDED-BY-RESOURCE*", owl_to_cycl.$list51);
            deflexical("*OWL-TERM-NAMES-PRECEDED-BY-PARSE-TYPE*", owl_to_cycl.$list52);
            defparameter("*OWL-DEFINITION-TYPES*", owl_to_cycl.$list53);
            defparameter("*OWL-DEFINITION-TYPE*", NIL);
            defparameter("*OWL-DEFINITION-ACCUMULATOR*", uninitialized());
            defparameter("*OWL-OE-QUEUE*", NIL);
            defparameter("*OWL-IMPORT-PARAMETERS*", NIL);
            deflexical("*XML-TOKENS-FROM-FILE-CACHING-STATE*", NIL);
            deflexical("*DEFAULT-OWL-FILE-ENCODING*", owl_to_cycl.$str86$utf_8);
            deflexical("*OWL-IMPORT-PARAMETERS-ONTOLOGY-CONTEXT-CACHING-STATE*", NIL);
            defconstant("*DTP-OWL-PRED-INFO*", owl_to_cycl.OWL_PRED_INFO);
            defconstant("*DTP-OWL-IMPORT-PARAMETERS*", owl_to_cycl.OWL_IMPORT_PARAMETERS);
            deflexical("*OWL-RESERVED-NAMESPACES*", owl_to_cycl.$list223);
            deflexical("*FIND-OR-CREATE-OWL-ONTOLOGY-FOR-URI-CACHING-STATE*", NIL);
            deflexical("*OWL-PROPERTY-ELEMENT-NAMES-CACHING-STATE*", NIL);
            defparameter("*OWL-SPEC-PROPERTIES*", uninitialized());
            deflexical("*OWL-CLASS-ELEMENT-NAMES-CACHING-STATE*", NIL);
            defparameter("*OWL-FORCE-NEW-TERM-CREATION?*", NIL);
            defparameter("*OWL-ALLOW-FIND-VIA-CREATION?*", NIL);
            deflexical("*CYC-PROPERTIES-TO-NOT-IMPORT*", owl_to_cycl.$list392);
            deflexical("*OWL-FOUND-TERMS*", new_dictionary(symbol_function(EQUAL), UNPROVIDED));
            deflexical("*OWL-OE-QUEUES*", SubLTrampolineFile.maybeDefault(owl_to_cycl.$owl_oe_queues$, owl_to_cycl.$owl_oe_queues$, NIL));
            deflexical("*OWL-OE-DAEMON*", SubLTrampolineFile.maybeDefault(owl_to_cycl.$owl_oe_daemon$, owl_to_cycl.$owl_oe_daemon$, NIL));
            deflexical("*OWL-OE-QUEUE-MARKER*", CHAR_vertical);
            deflexical("*OWL-OE-QUEUE-END-MARKER*", CHAR_exclamation);
            deflexical("*OWL-NODE-ID-INDEX*", SubLTrampolineFile.maybeDefault(owl_to_cycl.$owl_node_id_index$, owl_to_cycl.$owl_node_id_index$, NIL));
            deflexical("*NOTE-FOUND-TERM-RESOLUTION-CACHING-STATE*", NIL);
            defparameter("*CREATE-ANONYMOUS-OWL-TERMS?*", NIL);
            deflexical("*OWL-RESTRICTION-COLLECTION-TEMPLATES*", list(bq_cons(owl_utilities.owl_name(owl_to_cycl.$$$allValuesFrom), owl_to_cycl.$list509), bq_cons(owl_utilities.owl_name(owl_to_cycl.$$$someValuesFrom), owl_to_cycl.$list510), bq_cons(owl_utilities.owl_name(owl_to_cycl.$$$hasValue), owl_to_cycl.$list511), bq_cons(owl_utilities.owl_name(owl_to_cycl.$$$cardinality), owl_to_cycl.$list512), bq_cons(owl_utilities.owl_name(owl_to_cycl.$$$maxCardinality), owl_to_cycl.$list513), bq_cons(owl_utilities.owl_name(owl_to_cycl.$$$minCardinality), owl_to_cycl.$list514)));
            defparameter("*OWL-TERM-FROM-SPECIFICATION-DEPTH*", ZERO_INTEGER);
            defconstant("*DTP-OWL-TERM-INFO*", owl_to_cycl.OWL_TERM_INFO);
            deflexical("*OWL-INTERVAL-DATATYPES*", owl_to_cycl.$list623);
            deflexical("*XML-NAME-CACHING-STATE*", NIL);
            defconstant("*DTP-OWL-IMPORTER*", owl_to_cycl.OWL_IMPORTER);
            deflexical("*OWL-IMPORTER-ID-INDEX*", SubLTrampolineFile.maybeDefault(owl_to_cycl.$owl_importer_id_index$, owl_to_cycl.$owl_importer_id_index$, NIL));
            deflexical("*SWEET-ROOT*", owl_to_cycl.$str675$http___sweet_jpl_nasa_gov_ontolog);
            deflexical("*SWEET-ONTOLOGIES*", owl_to_cycl.$list676);
        }
        if (SubLFiles.USE_V2) {
            deflexical("*OWL-IMPORTER-V1-VERSION-NUMBER*", NIL != boundp($sym0$_OWL_IMPORTER_V1_VERSION_NUMBER_) ? ((SubLObject) ($owl_importer_v1_version_number$.getGlobalValue())) : NIL);
            deflexical("*OWL-TERM-NAMES-PRECEDED-BY-ID*", $list_alt51);
            deflexical("*OWL-TERM-NAMES-PRECEDED-BY-ABOUT*", $list_alt52);
            deflexical("*OWL-TERM-NAMES-PRECEDED-BY-RESOURCE*", $list_alt53);
            deflexical("*OWL-TERM-NAMES-PRECEDED-BY-PARSE-TYPE*", $list_alt54);
            defparameter("*OWL-DEFINITION-TYPES*", $list_alt55);
            deflexical("*DEFAULT-OWL-FILE-ENCODING*", $str_alt79$utf_8);
            deflexical("*OWL-RESERVED-NAMESPACES*", $list_alt207);
            deflexical("*CYC-PROPERTIES-TO-NOT-IMPORT*", $list_alt378);
            deflexical("*OWL-OE-QUEUES*", NIL != boundp($owl_oe_queues$) ? ((SubLObject) ($owl_oe_queues$.getGlobalValue())) : NIL);
            deflexical("*OWL-OE-DAEMON*", NIL != boundp($owl_oe_daemon$) ? ((SubLObject) ($owl_oe_daemon$.getGlobalValue())) : NIL);
            deflexical("*OWL-NODE-ID-INDEX*", NIL != boundp($owl_node_id_index$) ? ((SubLObject) ($owl_node_id_index$.getGlobalValue())) : NIL);
            deflexical("*OWL-INTERVAL-DATATYPES*", $list_alt586);
            deflexical("*OWL-IMPORTER-ID-INDEX*", NIL != boundp($owl_importer_id_index$) ? ((SubLObject) ($owl_importer_id_index$.getGlobalValue())) : NIL);
            deflexical("*SWEET-ROOT*", $str_alt632$http___sweet_jpl_nasa_gov_ontolog);
            deflexical("*SWEET-ONTOLOGIES*", $list_alt633);
        }
        return NIL;
    }

    public static SubLObject init_owl_to_cycl_file_Previous() {
        deflexical("*OWL-IMPORTER-V1-VERSION-NUMBER*", SubLTrampolineFile.maybeDefault(owl_to_cycl.$sym0$_OWL_IMPORTER_V1_VERSION_NUMBER_, owl_to_cycl.$owl_importer_v1_version_number$, NIL));
        defparameter("*OWL-IMPORTER*", NIL);
        deflexical("*OWL-MERGE-MT*", owl_to_cycl.$$OWLMappingMt);
        deflexical("*OWL-TERM-NAMES-PRECEDED-BY-ID*", owl_to_cycl.$list49);
        deflexical("*OWL-TERM-NAMES-PRECEDED-BY-ABOUT*", owl_to_cycl.$list50);
        deflexical("*OWL-TERM-NAMES-PRECEDED-BY-RESOURCE*", owl_to_cycl.$list51);
        deflexical("*OWL-TERM-NAMES-PRECEDED-BY-PARSE-TYPE*", owl_to_cycl.$list52);
        defparameter("*OWL-DEFINITION-TYPES*", owl_to_cycl.$list53);
        defparameter("*OWL-DEFINITION-TYPE*", NIL);
        defparameter("*OWL-DEFINITION-ACCUMULATOR*", uninitialized());
        defparameter("*OWL-OE-QUEUE*", NIL);
        defparameter("*OWL-IMPORT-PARAMETERS*", NIL);
        deflexical("*XML-TOKENS-FROM-FILE-CACHING-STATE*", NIL);
        deflexical("*DEFAULT-OWL-FILE-ENCODING*", owl_to_cycl.$str86$utf_8);
        deflexical("*OWL-IMPORT-PARAMETERS-ONTOLOGY-CONTEXT-CACHING-STATE*", NIL);
        defconstant("*DTP-OWL-PRED-INFO*", owl_to_cycl.OWL_PRED_INFO);
        defconstant("*DTP-OWL-IMPORT-PARAMETERS*", owl_to_cycl.OWL_IMPORT_PARAMETERS);
        deflexical("*OWL-RESERVED-NAMESPACES*", owl_to_cycl.$list223);
        deflexical("*FIND-OR-CREATE-OWL-ONTOLOGY-FOR-URI-CACHING-STATE*", NIL);
        deflexical("*OWL-PROPERTY-ELEMENT-NAMES-CACHING-STATE*", NIL);
        defparameter("*OWL-SPEC-PROPERTIES*", uninitialized());
        deflexical("*OWL-CLASS-ELEMENT-NAMES-CACHING-STATE*", NIL);
        defparameter("*OWL-FORCE-NEW-TERM-CREATION?*", NIL);
        defparameter("*OWL-ALLOW-FIND-VIA-CREATION?*", NIL);
        deflexical("*CYC-PROPERTIES-TO-NOT-IMPORT*", owl_to_cycl.$list392);
        deflexical("*OWL-FOUND-TERMS*", new_dictionary(symbol_function(EQUAL), UNPROVIDED));
        deflexical("*OWL-OE-QUEUES*", SubLTrampolineFile.maybeDefault(owl_to_cycl.$owl_oe_queues$, owl_to_cycl.$owl_oe_queues$, NIL));
        deflexical("*OWL-OE-DAEMON*", SubLTrampolineFile.maybeDefault(owl_to_cycl.$owl_oe_daemon$, owl_to_cycl.$owl_oe_daemon$, NIL));
        deflexical("*OWL-OE-QUEUE-MARKER*", CHAR_vertical);
        deflexical("*OWL-OE-QUEUE-END-MARKER*", CHAR_exclamation);
        deflexical("*OWL-NODE-ID-INDEX*", SubLTrampolineFile.maybeDefault(owl_to_cycl.$owl_node_id_index$, owl_to_cycl.$owl_node_id_index$, NIL));
        deflexical("*NOTE-FOUND-TERM-RESOLUTION-CACHING-STATE*", NIL);
        defparameter("*CREATE-ANONYMOUS-OWL-TERMS?*", NIL);
        deflexical("*OWL-RESTRICTION-COLLECTION-TEMPLATES*", list(bq_cons(owl_utilities.owl_name(owl_to_cycl.$$$allValuesFrom), owl_to_cycl.$list509), bq_cons(owl_utilities.owl_name(owl_to_cycl.$$$someValuesFrom), owl_to_cycl.$list510), bq_cons(owl_utilities.owl_name(owl_to_cycl.$$$hasValue), owl_to_cycl.$list511), bq_cons(owl_utilities.owl_name(owl_to_cycl.$$$cardinality), owl_to_cycl.$list512), bq_cons(owl_utilities.owl_name(owl_to_cycl.$$$maxCardinality), owl_to_cycl.$list513), bq_cons(owl_utilities.owl_name(owl_to_cycl.$$$minCardinality), owl_to_cycl.$list514)));
        defparameter("*OWL-TERM-FROM-SPECIFICATION-DEPTH*", ZERO_INTEGER);
        defconstant("*DTP-OWL-TERM-INFO*", owl_to_cycl.OWL_TERM_INFO);
        deflexical("*OWL-INTERVAL-DATATYPES*", owl_to_cycl.$list623);
        deflexical("*XML-NAME-CACHING-STATE*", NIL);
        defconstant("*DTP-OWL-IMPORTER*", owl_to_cycl.OWL_IMPORTER);
        deflexical("*OWL-IMPORTER-ID-INDEX*", SubLTrampolineFile.maybeDefault(owl_to_cycl.$owl_importer_id_index$, owl_to_cycl.$owl_importer_id_index$, NIL));
        deflexical("*SWEET-ROOT*", owl_to_cycl.$str675$http___sweet_jpl_nasa_gov_ontolog);
        deflexical("*SWEET-ONTOLOGIES*", owl_to_cycl.$list676);
        return NIL;
    }

    public static final SubLObject setup_owl_to_cycl_file_alt() {
        declare_defglobal($sym0$_OWL_IMPORTER_V1_VERSION_NUMBER_);
        $owl_importer_v1_version_number$.setGlobalValue($str_alt2$_Revision__126686__);
        memoization_state.note_memoized_function($sym10$TERM_OF_SOME_OWL_ONTOLOGY__VIA_INDEX);
        memoization_state.note_memoized_function(MEMOIZED_COUNT_ALL_SPECS);
        memoization_state.note_memoized_function(LONGEST_ACYCLIC_GENLS_PATH_INTERNAL);
        memoization_state.note_memoized_function(OWL_MIN_GENLS_MEMOIZED);
        register_external_symbol(IMPORT_OWL_ONTOLOGY);
        memoization_state.note_globally_cached_function(XML_TOKENS_FROM_FILE);
        memoization_state.note_globally_cached_function(OWL_IMPORT_PARAMETERS_ONTOLOGY_CONTEXT);
        register_method($print_object_method_table$.getGlobalValue(), $dtp_owl_pred_info$.getGlobalValue(), symbol_function(OWL_PRED_INFO_PRINT_FUNCTION_TRAMPOLINE));
        def_csetf(OPI_CYC_NAME, _CSETF_OPI_CYC_NAME);
        def_csetf(OPI_COMMENT, _CSETF_OPI_COMMENT);
        def_csetf(OPI_DOMAINS, _CSETF_OPI_DOMAINS);
        def_csetf(OPI_RANGE, _CSETF_OPI_RANGE);
        def_csetf(OPI_PLIST, _CSETF_OPI_PLIST);
        identity(OWL_PRED_INFO);
        note_funcall_helper_function(PRINT_OWL_PRED_INFO);
        register_method(Sxhash.$sxhash_method_table$.getGlobalValue(), $dtp_owl_pred_info$.getGlobalValue(), symbol_function(SXHASH_OWL_PRED_INFO_METHOD));
        register_method($print_object_method_table$.getGlobalValue(), $dtp_owl_import_parameters$.getGlobalValue(), symbol_function(OWL_IMPORT_PARAMETERS_PRINT_FUNCTION_TRAMPOLINE));
        def_csetf(OIP_ONTOLOGY, _CSETF_OIP_ONTOLOGY);
        def_csetf(OIP_NAMESPACE_MAP, _CSETF_OIP_NAMESPACE_MAP);
        def_csetf(OIP_CONSTANT_PREFIX, _CSETF_OIP_CONSTANT_PREFIX);
        def_csetf(OIP_BASE_URI, _CSETF_OIP_BASE_URI);
        def_csetf(OIP_CYCLIST, _CSETF_OIP_CYCLIST);
        def_csetf(OIP_QUOTED_ISA, _CSETF_OIP_QUOTED_ISA);
        def_csetf($sym172$OIP_PREFIX_EXTERNAL_NAMES_, $sym173$_CSETF_OIP_PREFIX_EXTERNAL_NAMES_);
        def_csetf($sym174$OIP_ABBREVIATE_PREFIXES_, $sym175$_CSETF_OIP_ABBREVIATE_PREFIXES_);
        def_csetf(OIP_IMPORT_TERM, _CSETF_OIP_IMPORT_TERM);
        def_csetf(OIP_ENCODING, _CSETF_OIP_ENCODING);
        identity(OWL_IMPORT_PARAMETERS);
        note_funcall_helper_function(PRINT_OWL_IMPORT_PARAMETERS);
        register_method(Sxhash.$sxhash_method_table$.getGlobalValue(), $dtp_owl_import_parameters$.getGlobalValue(), symbol_function(SXHASH_OWL_IMPORT_PARAMETERS_METHOD));
        memoization_state.note_globally_cached_function(FIND_OR_CREATE_OWL_ONTOLOGY_FOR_URI);
        memoization_state.note_globally_cached_function(OWL_PROPERTY_ELEMENT_NAMES);
        memoization_state.note_globally_cached_function(OWL_CLASS_ELEMENT_NAMES);
        memoization_state.note_memoized_function(XML_SCHEMA_CLASS_URIS);
        memoization_state.note_memoized_function(OWL_FIND_OR_CREATE_TERM_OF_TYPE);
        memoization_state.note_memoized_function(OWL_FIND_OR_CREATE_TERM_OF_TYPE_IN_ONTOLOGY);
        memoization_state.note_memoized_function(TRY_TO_ABBREVIATE_OWL_URI);
        declare_defglobal($owl_oe_queues$);
        declare_defglobal($owl_oe_daemon$);
        declare_defglobal($owl_node_id_index$);
        memoization_state.note_globally_cached_function(NOTE_FOUND_TERM_RESOLUTION);
        memoization_state.note_memoized_function(OWL_ASSERT);
        memoization_state.note_memoized_function(FIND_OR_CREATE_OWL_CLASS_FROM_RESTRICTION);
        register_method($print_object_method_table$.getGlobalValue(), $dtp_owl_term_info$.getGlobalValue(), symbol_function(OWL_TERM_INFO_PRINT_FUNCTION_TRAMPOLINE));
        def_csetf(OTI_CYC_NAME, _CSETF_OTI_CYC_NAME);
        def_csetf(OTI_COMMENT, _CSETF_OTI_COMMENT);
        def_csetf(OTI_SUPERCLASSES, _CSETF_OTI_SUPERCLASSES);
        def_csetf(OTI_DISJOINT_CLASSES, _CSETF_OTI_DISJOINT_CLASSES);
        def_csetf(OTI_PLIST, _CSETF_OTI_PLIST);
        identity(OWL_TERM_INFO);
        note_funcall_helper_function(PRINT_OWL_TERM_INFO);
        register_method(Sxhash.$sxhash_method_table$.getGlobalValue(), $dtp_owl_term_info$.getGlobalValue(), symbol_function(SXHASH_OWL_TERM_INFO_METHOD));
        memoization_state.note_globally_cached_function(XML_NAME);
        register_method($print_object_method_table$.getGlobalValue(), $dtp_owl_importer$.getGlobalValue(), symbol_function(OWL_IMPORTER_PRINT_FUNCTION_TRAMPOLINE));
        def_csetf(OWL_IMP_ID, _CSETF_OWL_IMP_ID);
        def_csetf(OWL_IMP_PROGRESS, _CSETF_OWL_IMP_PROGRESS);
        def_csetf(OWL_IMP_ERROR_INFO, _CSETF_OWL_IMP_ERROR_INFO);
        def_csetf(OWL_IMP_IMPORT_PARAMETERS, _CSETF_OWL_IMP_IMPORT_PARAMETERS);
        def_csetf(OWL_IMP_THREAD, _CSETF_OWL_IMP_THREAD);
        identity(OWL_IMPORTER);
        note_funcall_helper_function(PRINT_OWL_IMPORTER);
        register_method(Sxhash.$sxhash_method_table$.getGlobalValue(), $dtp_owl_importer$.getGlobalValue(), symbol_function(SXHASH_OWL_IMPORTER_METHOD));
        register_external_symbol(IMPORT_OWL_ONTOLOGY_WITH_IMPORTER);
        declare_defglobal($owl_importer_id_index$);
        return NIL;
    }

    public static SubLObject setup_owl_to_cycl_file() {
        if (SubLFiles.USE_V1) {
            declare_defglobal(owl_to_cycl.$sym0$_OWL_IMPORTER_V1_VERSION_NUMBER_);
            owl_to_cycl.$owl_importer_v1_version_number$.setGlobalValue(owl_to_cycl.$str2$_Revision__138034__);
            note_memoized_function(owl_to_cycl.$sym10$TERM_OF_SOME_OWL_ONTOLOGY__VIA_INDEX);
            note_memoized_function(owl_to_cycl.MEMOIZED_COUNT_ALL_SPECS);
            note_memoized_function(owl_to_cycl.LONGEST_ACYCLIC_GENLS_PATH_INTERNAL);
            note_memoized_function(owl_to_cycl.OWL_MIN_GENLS_MEMOIZED);
            register_external_symbol(owl_to_cycl.IMPORT_OWL_ONTOLOGY);
            note_globally_cached_function(owl_to_cycl.XML_TOKENS_FROM_FILE);
            note_globally_cached_function(owl_to_cycl.OWL_IMPORT_PARAMETERS_ONTOLOGY_CONTEXT);
            register_method($print_object_method_table$.getGlobalValue(), owl_to_cycl.$dtp_owl_pred_info$.getGlobalValue(), symbol_function(owl_to_cycl.OWL_PRED_INFO_PRINT_FUNCTION_TRAMPOLINE));
            SubLSpecialOperatorDeclarations.proclaim(owl_to_cycl.$list131);
            def_csetf(owl_to_cycl.OPI_CYC_NAME, owl_to_cycl._CSETF_OPI_CYC_NAME);
            def_csetf(owl_to_cycl.OPI_COMMENT, owl_to_cycl._CSETF_OPI_COMMENT);
            def_csetf(owl_to_cycl.OPI_DOMAINS, owl_to_cycl._CSETF_OPI_DOMAINS);
            def_csetf(owl_to_cycl.OPI_RANGE, owl_to_cycl._CSETF_OPI_RANGE);
            def_csetf(owl_to_cycl.OPI_PLIST, owl_to_cycl._CSETF_OPI_PLIST);
            identity(owl_to_cycl.OWL_PRED_INFO);
            register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), owl_to_cycl.$dtp_owl_pred_info$.getGlobalValue(), symbol_function(owl_to_cycl.VISIT_DEFSTRUCT_OBJECT_OWL_PRED_INFO_METHOD));
            note_funcall_helper_function(owl_to_cycl.PRINT_OWL_PRED_INFO);
            register_method(Sxhash.$sxhash_method_table$.getGlobalValue(), owl_to_cycl.$dtp_owl_pred_info$.getGlobalValue(), symbol_function(owl_to_cycl.SXHASH_OWL_PRED_INFO_METHOD));
            register_method($print_object_method_table$.getGlobalValue(), owl_to_cycl.$dtp_owl_import_parameters$.getGlobalValue(), symbol_function(owl_to_cycl.OWL_IMPORT_PARAMETERS_PRINT_FUNCTION_TRAMPOLINE));
            SubLSpecialOperatorDeclarations.proclaim(owl_to_cycl.$list175);
            def_csetf(owl_to_cycl.OIP_ONTOLOGY, owl_to_cycl._CSETF_OIP_ONTOLOGY);
            def_csetf(owl_to_cycl.OIP_NAMESPACE_MAP, owl_to_cycl._CSETF_OIP_NAMESPACE_MAP);
            def_csetf(owl_to_cycl.OIP_CONSTANT_PREFIX, owl_to_cycl._CSETF_OIP_CONSTANT_PREFIX);
            def_csetf(owl_to_cycl.OIP_CONSTANT_SUFFIX, owl_to_cycl._CSETF_OIP_CONSTANT_SUFFIX);
            def_csetf(owl_to_cycl.OIP_BASE_URI, owl_to_cycl._CSETF_OIP_BASE_URI);
            def_csetf(owl_to_cycl.OIP_URI_PREFIX, owl_to_cycl._CSETF_OIP_URI_PREFIX);
            def_csetf(owl_to_cycl.OIP_CYCLIST, owl_to_cycl._CSETF_OIP_CYCLIST);
            def_csetf(owl_to_cycl.OIP_QUOTED_ISA, owl_to_cycl._CSETF_OIP_QUOTED_ISA);
            def_csetf(owl_to_cycl.$sym192$OIP_PREFIX_EXTERNAL_NAMES_, owl_to_cycl.$sym193$_CSETF_OIP_PREFIX_EXTERNAL_NAMES_);
            def_csetf(owl_to_cycl.$sym194$OIP_ABBREVIATE_PREFIXES_, owl_to_cycl.$sym195$_CSETF_OIP_ABBREVIATE_PREFIXES_);
            def_csetf(owl_to_cycl.OIP_IMPORT_TERM, owl_to_cycl._CSETF_OIP_IMPORT_TERM);
            def_csetf(owl_to_cycl.OIP_ENCODING, owl_to_cycl._CSETF_OIP_ENCODING);
            identity(owl_to_cycl.OWL_IMPORT_PARAMETERS);
            register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), owl_to_cycl.$dtp_owl_import_parameters$.getGlobalValue(), symbol_function(owl_to_cycl.VISIT_DEFSTRUCT_OBJECT_OWL_IMPORT_PARAMETERS_METHOD));
            note_funcall_helper_function(owl_to_cycl.PRINT_OWL_IMPORT_PARAMETERS);
            register_method(Sxhash.$sxhash_method_table$.getGlobalValue(), owl_to_cycl.$dtp_owl_import_parameters$.getGlobalValue(), symbol_function(owl_to_cycl.SXHASH_OWL_IMPORT_PARAMETERS_METHOD));
            note_globally_cached_function(owl_to_cycl.FIND_OR_CREATE_OWL_ONTOLOGY_FOR_URI);
            note_globally_cached_function(owl_to_cycl.OWL_PROPERTY_ELEMENT_NAMES);
            note_globally_cached_function(owl_to_cycl.OWL_CLASS_ELEMENT_NAMES);
            note_memoized_function(owl_to_cycl.XML_SCHEMA_CLASS_URIS);
            note_memoized_function(owl_to_cycl.OWL_FIND_OR_CREATE_TERM_OF_TYPE);
            note_memoized_function(owl_to_cycl.OWL_FIND_OR_CREATE_TERM_OF_TYPE_IN_ONTOLOGY);
            note_memoized_function(owl_to_cycl.TRY_TO_ABBREVIATE_OWL_URI);
            declare_defglobal(owl_to_cycl.$owl_oe_queues$);
            declare_defglobal(owl_to_cycl.$owl_oe_daemon$);
            declare_defglobal(owl_to_cycl.$owl_node_id_index$);
            note_globally_cached_function(owl_to_cycl.NOTE_FOUND_TERM_RESOLUTION);
            note_memoized_function(owl_to_cycl.OWL_ASSERT);
            note_memoized_function(owl_to_cycl.FIND_OR_CREATE_OWL_CLASS_FROM_RESTRICTION);
            register_method($print_object_method_table$.getGlobalValue(), owl_to_cycl.$dtp_owl_term_info$.getGlobalValue(), symbol_function(owl_to_cycl.OWL_TERM_INFO_PRINT_FUNCTION_TRAMPOLINE));
            SubLSpecialOperatorDeclarations.proclaim(owl_to_cycl.$list539);
            def_csetf(owl_to_cycl.OTI_CYC_NAME, owl_to_cycl._CSETF_OTI_CYC_NAME);
            def_csetf(owl_to_cycl.OTI_COMMENT, owl_to_cycl._CSETF_OTI_COMMENT);
            def_csetf(owl_to_cycl.OTI_SUPERCLASSES, owl_to_cycl._CSETF_OTI_SUPERCLASSES);
            def_csetf(owl_to_cycl.OTI_DISJOINT_CLASSES, owl_to_cycl._CSETF_OTI_DISJOINT_CLASSES);
            def_csetf(owl_to_cycl.OTI_PLIST, owl_to_cycl._CSETF_OTI_PLIST);
            identity(owl_to_cycl.OWL_TERM_INFO);
            register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), owl_to_cycl.$dtp_owl_term_info$.getGlobalValue(), symbol_function(owl_to_cycl.VISIT_DEFSTRUCT_OBJECT_OWL_TERM_INFO_METHOD));
            note_funcall_helper_function(owl_to_cycl.PRINT_OWL_TERM_INFO);
            register_method(Sxhash.$sxhash_method_table$.getGlobalValue(), owl_to_cycl.$dtp_owl_term_info$.getGlobalValue(), symbol_function(owl_to_cycl.SXHASH_OWL_TERM_INFO_METHOD));
            note_globally_cached_function(owl_to_cycl.XML_NAME);
            register_method($print_object_method_table$.getGlobalValue(), owl_to_cycl.$dtp_owl_importer$.getGlobalValue(), symbol_function(owl_to_cycl.OWL_IMPORTER_PRINT_FUNCTION_TRAMPOLINE));
            SubLSpecialOperatorDeclarations.proclaim(owl_to_cycl.$list648);
            def_csetf(owl_to_cycl.OWL_IMP_ID, owl_to_cycl._CSETF_OWL_IMP_ID);
            def_csetf(owl_to_cycl.OWL_IMP_PROGRESS, owl_to_cycl._CSETF_OWL_IMP_PROGRESS);
            def_csetf(owl_to_cycl.OWL_IMP_ERROR_INFO, owl_to_cycl._CSETF_OWL_IMP_ERROR_INFO);
            def_csetf(owl_to_cycl.OWL_IMP_IMPORT_PARAMETERS, owl_to_cycl._CSETF_OWL_IMP_IMPORT_PARAMETERS);
            def_csetf(owl_to_cycl.OWL_IMP_THREAD, owl_to_cycl._CSETF_OWL_IMP_THREAD);
            identity(owl_to_cycl.OWL_IMPORTER);
            register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), owl_to_cycl.$dtp_owl_importer$.getGlobalValue(), symbol_function(owl_to_cycl.VISIT_DEFSTRUCT_OBJECT_OWL_IMPORTER_METHOD));
            note_funcall_helper_function(owl_to_cycl.PRINT_OWL_IMPORTER);
            register_method(Sxhash.$sxhash_method_table$.getGlobalValue(), owl_to_cycl.$dtp_owl_importer$.getGlobalValue(), symbol_function(owl_to_cycl.SXHASH_OWL_IMPORTER_METHOD));
            register_external_symbol(owl_to_cycl.IMPORT_OWL_ONTOLOGY_WITH_IMPORTER);
            declare_defglobal(owl_to_cycl.$owl_importer_id_index$);
        }
        if (SubLFiles.USE_V2) {
            $owl_importer_v1_version_number$.setGlobalValue($str_alt2$_Revision__126686__);
            def_csetf($sym172$OIP_PREFIX_EXTERNAL_NAMES_, $sym173$_CSETF_OIP_PREFIX_EXTERNAL_NAMES_);
            def_csetf($sym174$OIP_ABBREVIATE_PREFIXES_, $sym175$_CSETF_OIP_ABBREVIATE_PREFIXES_);
        }
        return NIL;
    }

    public static SubLObject setup_owl_to_cycl_file_Previous() {
        declare_defglobal(owl_to_cycl.$sym0$_OWL_IMPORTER_V1_VERSION_NUMBER_);
        owl_to_cycl.$owl_importer_v1_version_number$.setGlobalValue(owl_to_cycl.$str2$_Revision__138034__);
        note_memoized_function(owl_to_cycl.$sym10$TERM_OF_SOME_OWL_ONTOLOGY__VIA_INDEX);
        note_memoized_function(owl_to_cycl.MEMOIZED_COUNT_ALL_SPECS);
        note_memoized_function(owl_to_cycl.LONGEST_ACYCLIC_GENLS_PATH_INTERNAL);
        note_memoized_function(owl_to_cycl.OWL_MIN_GENLS_MEMOIZED);
        register_external_symbol(owl_to_cycl.IMPORT_OWL_ONTOLOGY);
        note_globally_cached_function(owl_to_cycl.XML_TOKENS_FROM_FILE);
        note_globally_cached_function(owl_to_cycl.OWL_IMPORT_PARAMETERS_ONTOLOGY_CONTEXT);
        register_method($print_object_method_table$.getGlobalValue(), owl_to_cycl.$dtp_owl_pred_info$.getGlobalValue(), symbol_function(owl_to_cycl.OWL_PRED_INFO_PRINT_FUNCTION_TRAMPOLINE));
        SubLSpecialOperatorDeclarations.proclaim(owl_to_cycl.$list131);
        def_csetf(owl_to_cycl.OPI_CYC_NAME, owl_to_cycl._CSETF_OPI_CYC_NAME);
        def_csetf(owl_to_cycl.OPI_COMMENT, owl_to_cycl._CSETF_OPI_COMMENT);
        def_csetf(owl_to_cycl.OPI_DOMAINS, owl_to_cycl._CSETF_OPI_DOMAINS);
        def_csetf(owl_to_cycl.OPI_RANGE, owl_to_cycl._CSETF_OPI_RANGE);
        def_csetf(owl_to_cycl.OPI_PLIST, owl_to_cycl._CSETF_OPI_PLIST);
        identity(owl_to_cycl.OWL_PRED_INFO);
        register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), owl_to_cycl.$dtp_owl_pred_info$.getGlobalValue(), symbol_function(owl_to_cycl.VISIT_DEFSTRUCT_OBJECT_OWL_PRED_INFO_METHOD));
        note_funcall_helper_function(owl_to_cycl.PRINT_OWL_PRED_INFO);
        register_method(Sxhash.$sxhash_method_table$.getGlobalValue(), owl_to_cycl.$dtp_owl_pred_info$.getGlobalValue(), symbol_function(owl_to_cycl.SXHASH_OWL_PRED_INFO_METHOD));
        register_method($print_object_method_table$.getGlobalValue(), owl_to_cycl.$dtp_owl_import_parameters$.getGlobalValue(), symbol_function(owl_to_cycl.OWL_IMPORT_PARAMETERS_PRINT_FUNCTION_TRAMPOLINE));
        SubLSpecialOperatorDeclarations.proclaim(owl_to_cycl.$list175);
        def_csetf(owl_to_cycl.OIP_ONTOLOGY, owl_to_cycl._CSETF_OIP_ONTOLOGY);
        def_csetf(owl_to_cycl.OIP_NAMESPACE_MAP, owl_to_cycl._CSETF_OIP_NAMESPACE_MAP);
        def_csetf(owl_to_cycl.OIP_CONSTANT_PREFIX, owl_to_cycl._CSETF_OIP_CONSTANT_PREFIX);
        def_csetf(owl_to_cycl.OIP_CONSTANT_SUFFIX, owl_to_cycl._CSETF_OIP_CONSTANT_SUFFIX);
        def_csetf(owl_to_cycl.OIP_BASE_URI, owl_to_cycl._CSETF_OIP_BASE_URI);
        def_csetf(owl_to_cycl.OIP_URI_PREFIX, owl_to_cycl._CSETF_OIP_URI_PREFIX);
        def_csetf(owl_to_cycl.OIP_CYCLIST, owl_to_cycl._CSETF_OIP_CYCLIST);
        def_csetf(owl_to_cycl.OIP_QUOTED_ISA, owl_to_cycl._CSETF_OIP_QUOTED_ISA);
        def_csetf(owl_to_cycl.$sym192$OIP_PREFIX_EXTERNAL_NAMES_, owl_to_cycl.$sym193$_CSETF_OIP_PREFIX_EXTERNAL_NAMES_);
        def_csetf(owl_to_cycl.$sym194$OIP_ABBREVIATE_PREFIXES_, owl_to_cycl.$sym195$_CSETF_OIP_ABBREVIATE_PREFIXES_);
        def_csetf(owl_to_cycl.OIP_IMPORT_TERM, owl_to_cycl._CSETF_OIP_IMPORT_TERM);
        def_csetf(owl_to_cycl.OIP_ENCODING, owl_to_cycl._CSETF_OIP_ENCODING);
        identity(owl_to_cycl.OWL_IMPORT_PARAMETERS);
        register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), owl_to_cycl.$dtp_owl_import_parameters$.getGlobalValue(), symbol_function(owl_to_cycl.VISIT_DEFSTRUCT_OBJECT_OWL_IMPORT_PARAMETERS_METHOD));
        note_funcall_helper_function(owl_to_cycl.PRINT_OWL_IMPORT_PARAMETERS);
        register_method(Sxhash.$sxhash_method_table$.getGlobalValue(), owl_to_cycl.$dtp_owl_import_parameters$.getGlobalValue(), symbol_function(owl_to_cycl.SXHASH_OWL_IMPORT_PARAMETERS_METHOD));
        note_globally_cached_function(owl_to_cycl.FIND_OR_CREATE_OWL_ONTOLOGY_FOR_URI);
        note_globally_cached_function(owl_to_cycl.OWL_PROPERTY_ELEMENT_NAMES);
        note_globally_cached_function(owl_to_cycl.OWL_CLASS_ELEMENT_NAMES);
        note_memoized_function(owl_to_cycl.XML_SCHEMA_CLASS_URIS);
        note_memoized_function(owl_to_cycl.OWL_FIND_OR_CREATE_TERM_OF_TYPE);
        note_memoized_function(owl_to_cycl.OWL_FIND_OR_CREATE_TERM_OF_TYPE_IN_ONTOLOGY);
        note_memoized_function(owl_to_cycl.TRY_TO_ABBREVIATE_OWL_URI);
        declare_defglobal(owl_to_cycl.$owl_oe_queues$);
        declare_defglobal(owl_to_cycl.$owl_oe_daemon$);
        declare_defglobal(owl_to_cycl.$owl_node_id_index$);
        note_globally_cached_function(owl_to_cycl.NOTE_FOUND_TERM_RESOLUTION);
        note_memoized_function(owl_to_cycl.OWL_ASSERT);
        note_memoized_function(owl_to_cycl.FIND_OR_CREATE_OWL_CLASS_FROM_RESTRICTION);
        register_method($print_object_method_table$.getGlobalValue(), owl_to_cycl.$dtp_owl_term_info$.getGlobalValue(), symbol_function(owl_to_cycl.OWL_TERM_INFO_PRINT_FUNCTION_TRAMPOLINE));
        SubLSpecialOperatorDeclarations.proclaim(owl_to_cycl.$list539);
        def_csetf(owl_to_cycl.OTI_CYC_NAME, owl_to_cycl._CSETF_OTI_CYC_NAME);
        def_csetf(owl_to_cycl.OTI_COMMENT, owl_to_cycl._CSETF_OTI_COMMENT);
        def_csetf(owl_to_cycl.OTI_SUPERCLASSES, owl_to_cycl._CSETF_OTI_SUPERCLASSES);
        def_csetf(owl_to_cycl.OTI_DISJOINT_CLASSES, owl_to_cycl._CSETF_OTI_DISJOINT_CLASSES);
        def_csetf(owl_to_cycl.OTI_PLIST, owl_to_cycl._CSETF_OTI_PLIST);
        identity(owl_to_cycl.OWL_TERM_INFO);
        register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), owl_to_cycl.$dtp_owl_term_info$.getGlobalValue(), symbol_function(owl_to_cycl.VISIT_DEFSTRUCT_OBJECT_OWL_TERM_INFO_METHOD));
        note_funcall_helper_function(owl_to_cycl.PRINT_OWL_TERM_INFO);
        register_method(Sxhash.$sxhash_method_table$.getGlobalValue(), owl_to_cycl.$dtp_owl_term_info$.getGlobalValue(), symbol_function(owl_to_cycl.SXHASH_OWL_TERM_INFO_METHOD));
        note_globally_cached_function(owl_to_cycl.XML_NAME);
        register_method($print_object_method_table$.getGlobalValue(), owl_to_cycl.$dtp_owl_importer$.getGlobalValue(), symbol_function(owl_to_cycl.OWL_IMPORTER_PRINT_FUNCTION_TRAMPOLINE));
        SubLSpecialOperatorDeclarations.proclaim(owl_to_cycl.$list648);
        def_csetf(owl_to_cycl.OWL_IMP_ID, owl_to_cycl._CSETF_OWL_IMP_ID);
        def_csetf(owl_to_cycl.OWL_IMP_PROGRESS, owl_to_cycl._CSETF_OWL_IMP_PROGRESS);
        def_csetf(owl_to_cycl.OWL_IMP_ERROR_INFO, owl_to_cycl._CSETF_OWL_IMP_ERROR_INFO);
        def_csetf(owl_to_cycl.OWL_IMP_IMPORT_PARAMETERS, owl_to_cycl._CSETF_OWL_IMP_IMPORT_PARAMETERS);
        def_csetf(owl_to_cycl.OWL_IMP_THREAD, owl_to_cycl._CSETF_OWL_IMP_THREAD);
        identity(owl_to_cycl.OWL_IMPORTER);
        register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), owl_to_cycl.$dtp_owl_importer$.getGlobalValue(), symbol_function(owl_to_cycl.VISIT_DEFSTRUCT_OBJECT_OWL_IMPORTER_METHOD));
        note_funcall_helper_function(owl_to_cycl.PRINT_OWL_IMPORTER);
        register_method(Sxhash.$sxhash_method_table$.getGlobalValue(), owl_to_cycl.$dtp_owl_importer$.getGlobalValue(), symbol_function(owl_to_cycl.SXHASH_OWL_IMPORTER_METHOD));
        register_external_symbol(owl_to_cycl.IMPORT_OWL_ONTOLOGY_WITH_IMPORTER);
        declare_defglobal(owl_to_cycl.$owl_importer_id_index$);
        return NIL;
    }

    static private final SubLString $str_alt2$_Revision__126686__ = makeString("$Revision: 126686 $");



    public static final SubLSymbol $kw15$_MEMOIZED_ITEM_NOT_FOUND_ = makeKeyword("&MEMOIZED-ITEM-NOT-FOUND&");



    static private final SubLString $str_alt17$Invalid_attempt_to_reuse_memoizat = makeString("Invalid attempt to reuse memoization state in multiple threads simultaneously.");

    static private final SubLString $str_alt19$Can_t_find_path_from__S_to___Thin = makeString("Can't find path from ~S to #$Thing.");

    static private final SubLString $str_alt26$_A_is_not_a__A = makeString("~A is not a ~A");

    static private final SubLString $str_alt31$_A_is_not_a_valid__sbhl_type_erro = makeString("~A is not a valid *sbhl-type-error-action* value");

    static private final SubLString $str_alt33$attempting_to_bind_direction_link = makeString("attempting to bind direction link variable, to NIL. macro body not executed.");

    static private final SubLString $str_alt34$Node__a_does_not_pass_sbhl_type_t = makeString("Node ~a does not pass sbhl-type-test ~a~%");

    @Override
    public void declareFunctions() {
        owl_to_cycl.declare_owl_to_cycl_file();
    }

    static private final SubLSymbol $sym39$ISA_COLLECTION_ = makeSymbol("ISA-COLLECTION?");

    @Override
    public void initializeVariables() {
        owl_to_cycl.init_owl_to_cycl_file();
    }

    @Override
    public void runTopLevelForms() {
        owl_to_cycl.setup_owl_to_cycl_file();
    }

    static {
    }

    static private final SubLList $list_alt47 = list(makeString("has"), makeString("is"));

    static private final SubLList $list_alt51 = list(new SubLObject[]{ makeString("UnknownOrganization"), makeString("FinancialOrganization"), makeString("GovernmentalOrganization"), makeString("EducationResearchOrganization"), makeString("MilitaryOrganization"), makeString("Organization"), makeString("NGO"), makeString("PoliticalOrganization"), makeString("ReligiousOrganization"), makeString("ResidentialBuilding"), makeString("EmbassyBuilding"), makeString("MinistryBuilding"), makeString("ShoppingMall"), makeString("Road"), makeString("Bridge"), makeString("Hospital"), makeString("TrainingCamp"), makeString("Park"), makeString("ReligousFacility"), makeString("Stadium"), makeString("OfficeBuilding"), makeString("IndustrialFacility"), makeString("EducationalInstitution"), makeString("CivicStructure"), makeString("Airport"), makeString("Hideout"), makeString("Kidnapping"), makeString("Arrest"), makeString("HostageTaking"), makeString("Uncovering"), makeString("Sneaking"), makeString("FailedTerrorPlot"), makeString("Assasination"), makeString("Execution"), makeString("ConflictEvent"), makeString("TerroristAttack"), makeString("Killing"), makeString("CoupAttempt"), makeString("Bombing"), makeString("CitizenPeopleGroup"), makeString("CivilianPeopleGroup"), makeString("Agent"), makeString("Event"), makeString("MinistryOfCulture"), makeString("Ministry"), makeString("Location"), makeString("Insurgent"), makeString("Citizen"), makeString("CivilianPerson"), makeString("HighSchool"), makeString("University"), makeString("Funeral"), makeString("Wedding"), makeString("CivilianEvent"), makeString("UnknownPeopleGroup"), makeString("PeopleGroup"), makeString("MilitaryEvent"), makeString("GovernmentalEvent"), makeString("SocioReligousEvent"), makeString("BookOrManifesto"), makeString("Bank"), makeString("Company"), makeString("CapitalCity"), makeString("City"), makeString("GeneralElection"), makeString("repeatingEvent"), makeString("Election"), makeString("Synagogue"), makeString("Mosque"), makeString("Church"), makeString("Temple"), makeString("departureLocation"), makeString("GeopoliticalLocation"), makeString("destination"), makeString("UnknownPerson"), makeString("GovernmentalPerson"), makeString("Person"), makeString("affiliatedWith"), makeString("PowerPlant"), makeString("NavalFacility"), makeString("NuclearFacility"), makeString("SuicideBombing"), makeString("Anniversary"), makeString("Group"), makeString("numberOfGrupMembers"), makeString("PoliticalParty"), makeString("TerroristOrganization"), makeString("State"), makeString("Country"), makeString("Province"), makeString("InsurgentPeopleGroup"), makeString("GovernmentalPeopleGroup"), makeString("Embassy"), makeString("MilitaryPerson"), makeString("War"), makeString("MilitaryPeopleGroup"), makeString("hasSpokesman"), makeString("isSpokesmanFor"), makeString("hasMember"), makeString("ideologistFor"), makeString("hasIdeologist"), makeString("husbandOf"), makeString("spouseOf"), makeString("wifeOf"), makeString("hasSubevent"), makeString("cityInCountry"), makeString("hasCity"), makeString("presentAt"), makeString("hasAttendant"), makeString("hasFollower"), makeString("followerOf"), makeString("chiefOf"), makeString("hasChief"), makeString("leaderOf"), makeString("memberOf"), makeString("hasDirector"), makeString("directorOf"), makeString("provinceInCountry"), makeString("hasProvince"), makeString("acquiredNationality"), makeString("victimOf"), makeString("hasVictim"), makeString("isPressSecretaryFor"), makeString("hasPressSecretary"), makeString("cousinOf"), makeString("familyRelativeOf"), makeString("subEventOf"), makeString("hasActor"), makeString("isActorOf"), makeString("hasChairman"), makeString("hasLeader"), makeString("isChairmanOf"), makeString("organizerOf"), makeString("organizedBy"), makeString("capitalCityInCountry"), makeString("hasCapitalCity"), makeString("childOf"), makeString("parentOf"), makeString("hasMilitant"), makeString("militantOf"), makeString("countryInState"), makeString("stateInCountry"), makeString("isPrimeMiniterOf"), makeString("hasPrimeMinister"), makeString("contactedBy"), makeString("contacts"), makeString("placeOfBirth"), makeString("residesIn"), makeString("killedAt"), makeString("hasPeopleKilled"), makeString("financedBy"), makeString("financierOf"), makeString("hasWounded"), makeString("woundedAt"), makeString("hasState"), makeString("isTargetOf"), makeString("hasTarget"), makeString("founderOf"), makeString("foundedBy"), makeString("arrestedAt"), makeString("hasPeopleArrested"), makeString("hasAuthor"), makeString("authorOf"), makeString("hasLocation"), makeString("locatedIn"), makeString("funderOf"), makeString("fundedBy"), makeString("isEventLocation"), makeString("locationOfEvent"), makeString("bornNationality"), makeString("employeeOf"), makeString("hasEmployee"), makeString("hasSuborganization"), makeString("subOrganizationOf"), makeString("happensAtPlace"), makeString("hasPart"), makeString("isPartOf"), makeString("contents"), makeString("startDateOfDuty"), makeString("occurenceTimeOfDate"), makeString("wikipediaEnrty"), makeString("currentOrganizationStatus"), makeString("langitude"), makeString("internationalOrganization"), makeString("eventTitles"), makeString("name"), makeString("damage"), makeString("endDateDuty"), makeString("numberHostages"), makeString("numberKilled"), makeString("publicName"), makeString("dateBirth"), makeString("currentPersonStatus"), makeString("dateArrested"), makeString("biography"), makeString("dateOfQuote"), makeString("lastName"), makeString("newsArticleId"), makeString("associatedKeywords"), makeString("filename"), makeString("startDate"), makeString("eventDate"), makeString("acronym"), makeString("firstName"), makeString("numberArrested"), makeString("recurrence"), makeString("currentlyInCharge"), makeString("homepage"), makeString("numberInjured"), makeString("picture"), makeString("endDate"), makeString("otherGivenNames"), makeString("associatedAlerts"), makeString("associatedNewsArticles"), makeString("size"), makeString("purpose"), makeString("dateDeath"), makeString("newsResource"), makeString("zipCode"), makeString("occurrenceDate"), makeString("associatedTitles"), makeString("foundationDate"), makeString("religion"), makeString("duration"), makeString("description"), makeString("email"), makeString("clusterId"), makeString("idEMM"), makeString("address"), makeString("maritalStatus"), makeString("occupation"), makeString("latitude"), makeString("title"), makeString("language"), makeString("colleagueOf"), makeString("siblingOf"), makeString("housemateOf"), makeString("friendOf"), makeString("gender"), makeString("areasOfOperation") });

    public static final class $owl_pred_info_p$UnaryFunction extends UnaryFunction {
        public $owl_pred_info_p$UnaryFunction() {
            super(extractFunctionNamed("OWL-PRED-INFO-P"));
        }

        @Override
        public SubLObject processItem(final SubLObject arg1) {
            return owl_to_cycl.owl_pred_info_p(arg1);
        }
    }

    public static final class $owl_import_parameters_native extends SubLStructNative {
        public SubLObject $ontology;

        public SubLObject $namespace_map;

        public SubLObject $constant_prefix;

        public SubLObject $constant_suffix;

        public SubLObject $base_uri;

        public SubLObject $uri_prefix;

        public SubLObject $cyclist;

        public SubLObject $quoted_isa;

        public SubLObject $prefix_external_namesP;

        public SubLObject $abbreviate_prefixesP;

        public SubLObject $import_term;

        public SubLObject $encoding;

        private static final SubLStructDeclNative structDecl;

        public $owl_import_parameters_native() {
            owl_to_cycl.$owl_import_parameters_native.this.$ontology = Lisp.NIL;
            owl_to_cycl.$owl_import_parameters_native.this.$namespace_map = Lisp.NIL;
            owl_to_cycl.$owl_import_parameters_native.this.$constant_prefix = Lisp.NIL;
            owl_to_cycl.$owl_import_parameters_native.this.$constant_suffix = Lisp.NIL;
            owl_to_cycl.$owl_import_parameters_native.this.$base_uri = Lisp.NIL;
            owl_to_cycl.$owl_import_parameters_native.this.$uri_prefix = Lisp.NIL;
            owl_to_cycl.$owl_import_parameters_native.this.$cyclist = Lisp.NIL;
            owl_to_cycl.$owl_import_parameters_native.this.$quoted_isa = Lisp.NIL;
            owl_to_cycl.$owl_import_parameters_native.this.$prefix_external_namesP = Lisp.NIL;
            owl_to_cycl.$owl_import_parameters_native.this.$abbreviate_prefixesP = Lisp.NIL;
            owl_to_cycl.$owl_import_parameters_native.this.$import_term = Lisp.NIL;
            owl_to_cycl.$owl_import_parameters_native.this.$encoding = Lisp.NIL;
        }

        @Override
        public SubLStructDecl getStructDecl() {
            return structDecl;
        }

        @Override
        public SubLObject getField2() {
            return owl_to_cycl.$owl_import_parameters_native.this.$ontology;
        }

        @Override
        public SubLObject getField3() {
            return owl_to_cycl.$owl_import_parameters_native.this.$namespace_map;
        }

        @Override
        public SubLObject getField4() {
            return owl_to_cycl.$owl_import_parameters_native.this.$constant_prefix;
        }

        @Override
        public SubLObject getField5() {
            return owl_to_cycl.$owl_import_parameters_native.this.$constant_suffix;
        }

        @Override
        public SubLObject getField6() {
            return owl_to_cycl.$owl_import_parameters_native.this.$base_uri;
        }

        @Override
        public SubLObject getField7() {
            return owl_to_cycl.$owl_import_parameters_native.this.$uri_prefix;
        }

        @Override
        public SubLObject getField8() {
            return owl_to_cycl.$owl_import_parameters_native.this.$cyclist;
        }

        @Override
        public SubLObject getField9() {
            return owl_to_cycl.$owl_import_parameters_native.this.$quoted_isa;
        }

        @Override
        public SubLObject getField10() {
            return owl_to_cycl.$owl_import_parameters_native.this.$prefix_external_namesP;
        }

        @Override
        public SubLObject getField11() {
            return owl_to_cycl.$owl_import_parameters_native.this.$abbreviate_prefixesP;
        }

        @Override
        public SubLObject getField12() {
            return owl_to_cycl.$owl_import_parameters_native.this.$import_term;
        }

        @Override
        public SubLObject getField13() {
            return owl_to_cycl.$owl_import_parameters_native.this.$encoding;
        }

        @Override
        public SubLObject setField2(final SubLObject value) {
            return owl_to_cycl.$owl_import_parameters_native.this.$ontology = value;
        }

        @Override
        public SubLObject setField3(final SubLObject value) {
            return owl_to_cycl.$owl_import_parameters_native.this.$namespace_map = value;
        }

        @Override
        public SubLObject setField4(final SubLObject value) {
            return owl_to_cycl.$owl_import_parameters_native.this.$constant_prefix = value;
        }

        @Override
        public SubLObject setField5(final SubLObject value) {
            return owl_to_cycl.$owl_import_parameters_native.this.$constant_suffix = value;
        }

        @Override
        public SubLObject setField6(final SubLObject value) {
            return owl_to_cycl.$owl_import_parameters_native.this.$base_uri = value;
        }

        @Override
        public SubLObject setField7(final SubLObject value) {
            return owl_to_cycl.$owl_import_parameters_native.this.$uri_prefix = value;
        }

        @Override
        public SubLObject setField8(final SubLObject value) {
            return owl_to_cycl.$owl_import_parameters_native.this.$cyclist = value;
        }

        @Override
        public SubLObject setField9(final SubLObject value) {
            return owl_to_cycl.$owl_import_parameters_native.this.$quoted_isa = value;
        }

        @Override
        public SubLObject setField10(final SubLObject value) {
            return owl_to_cycl.$owl_import_parameters_native.this.$prefix_external_namesP = value;
        }

        @Override
        public SubLObject setField11(final SubLObject value) {
            return owl_to_cycl.$owl_import_parameters_native.this.$abbreviate_prefixesP = value;
        }

        @Override
        public SubLObject setField12(final SubLObject value) {
            return owl_to_cycl.$owl_import_parameters_native.this.$import_term = value;
        }

        @Override
        public SubLObject setField13(final SubLObject value) {
            return owl_to_cycl.$owl_import_parameters_native.this.$encoding = value;
        }

        static {
            structDecl = makeStructDeclNative(com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_import_parameters_native.class, owl_to_cycl.OWL_IMPORT_PARAMETERS, owl_to_cycl.OWL_IMPORT_PARAMETERS_P, owl_to_cycl.$list169, owl_to_cycl.$list170, new String[]{ "$ontology", "$namespace_map", "$constant_prefix", "$constant_suffix", "$base_uri", "$uri_prefix", "$cyclist", "$quoted_isa", "$prefix_external_namesP", "$abbreviate_prefixesP", "$import_term", "$encoding" }, owl_to_cycl.$list171, owl_to_cycl.$list172, owl_to_cycl.PRINT_OWL_IMPORT_PARAMETERS);
        }
    }

    static private final SubLList $list_alt52 = list(new SubLObject[]{ makeString("Bridge"), makeString("Citizen"), makeString("Airport"), makeString("Arrest"), makeString("ReligousFacility"), makeString("Bombing"), makeString("Election"), makeString("Sneaking"), makeString("BookOrManifesto"), makeString("Hideout"), makeString("Hospital"), makeString("HostageTaking"), makeString("Wedding"), makeString("GovernmentalPerson"), makeString("Park"), makeString("OfficeBuilding"), makeString("TrainingCamp"), makeString("NGO"), makeString("Church"), makeString("NavalFacility"), makeString("GovernmentalEvent"), makeString("Killing"), makeString("CivilianPeopleGroup"), makeString("NuclearFacility"), makeString("Company"), makeString("MinistryBuilding"), makeString("CivilianEvent"), makeString("University"), makeString("CoupAttempt"), makeString("Uncovering"), makeString("PeopleGroup"), makeString("TerroristOrganization"), makeString("PoliticalOrganization"), makeString("EmbassyBuilding"), makeString("MilitaryOrganization"), makeString("ReligiousOrganization"), makeString("Stadium"), makeString("EducationalInstitution"), makeString("EducationResearchOrganization"), makeString("Temple"), makeString("IndustrialFacility"), makeString("Country"), makeString("Province"), makeString("Mosque"), makeString("Execution"), makeString("Road"), makeString("FailedTerrorPlot"), makeString("SocioReligousEvent"), makeString("Assasination"), makeString("TerroristAttack"), makeString("GovernmentalOrganization"), makeString("ShoppingMall"), makeString("Ministry"), makeString("CivilianPerson"), makeString("CivicStructure"), makeString("FinancialOrganization"), makeString("hasCity"), makeString("wifeOf"), makeString("hasIdeologist"), makeString("departureLocation"), makeString("memberOf"), makeString("hasAttendant"), makeString("stateInCountry"), makeString("hasPeopleKilled"), makeString("hasLeader"), makeString("hasTarget"), makeString("destination"), makeString("City"), makeString("GeopoliticalLocation"), makeString("militantOf"), makeString("hasVictim"), makeString("hasProvince"), makeString("foundedBy"), makeString("locationOfEvent"), makeString("hasPressSecretary"), makeString("followerOf"), makeString("directorOf"), makeString("woundedAt"), makeString("isSpokesmanFor"), makeString("organizedBy"), makeString("hasCapitalCity"), makeString("hasPeopleArrested"), makeString("spouseOf"), makeString("isChairmanOf"), makeString("leaderOf"), makeString("contacts"), makeString("hasMember"), makeString("financierOf"), makeString("hasState"), makeString("hasEmployee"), makeString("authorOf"), makeString("hasPrimeMinister"), makeString("affiliatedWith"), makeString("hasChief"), makeString("isActorOf"), makeString("parentOf"), makeString("fundedBy"), makeString("CapitalCity"), makeString("ConflictEvent"), makeString("MilitaryEvent"), makeString("Agent"), makeString("Event"), makeString("repeatingEvent"), makeString("numberOfGrupMembers"), makeString("eventDate"), makeString("Location"), makeString("Organization"), makeString("Person"), makeString("subOrganizationOf"), makeString("isPartOf"), makeString("locatedIn"), makeString("familyRelativeOf") });

    public static final class $owl_import_parameters_p$UnaryFunction extends UnaryFunction {
        public $owl_import_parameters_p$UnaryFunction() {
            super(extractFunctionNamed("OWL-IMPORT-PARAMETERS-P"));
        }

        @Override
        public SubLObject processItem(final SubLObject arg1) {
            return owl_to_cycl.owl_import_parameters_p(arg1);
        }
    }

    public static final class $owl_term_info_native extends SubLStructNative {
        public SubLObject $cyc_name;

        public SubLObject $comment;

        public SubLObject $superclasses;

        public SubLObject $disjoint_classes;

        public SubLObject $plist;

        private static final SubLStructDeclNative structDecl;

        public $owl_term_info_native() {
            owl_to_cycl.$owl_term_info_native.this.$cyc_name = Lisp.NIL;
            owl_to_cycl.$owl_term_info_native.this.$comment = Lisp.NIL;
            owl_to_cycl.$owl_term_info_native.this.$superclasses = Lisp.NIL;
            owl_to_cycl.$owl_term_info_native.this.$disjoint_classes = Lisp.NIL;
            owl_to_cycl.$owl_term_info_native.this.$plist = Lisp.NIL;
        }

        @Override
        public SubLStructDecl getStructDecl() {
            return structDecl;
        }

        @Override
        public SubLObject getField2() {
            return owl_to_cycl.$owl_term_info_native.this.$cyc_name;
        }

        @Override
        public SubLObject getField3() {
            return owl_to_cycl.$owl_term_info_native.this.$comment;
        }

        @Override
        public SubLObject getField4() {
            return owl_to_cycl.$owl_term_info_native.this.$superclasses;
        }

        @Override
        public SubLObject getField5() {
            return owl_to_cycl.$owl_term_info_native.this.$disjoint_classes;
        }

        @Override
        public SubLObject getField6() {
            return owl_to_cycl.$owl_term_info_native.this.$plist;
        }

        @Override
        public SubLObject setField2(final SubLObject value) {
            return owl_to_cycl.$owl_term_info_native.this.$cyc_name = value;
        }

        @Override
        public SubLObject setField3(final SubLObject value) {
            return owl_to_cycl.$owl_term_info_native.this.$comment = value;
        }

        @Override
        public SubLObject setField4(final SubLObject value) {
            return owl_to_cycl.$owl_term_info_native.this.$superclasses = value;
        }

        @Override
        public SubLObject setField5(final SubLObject value) {
            return owl_to_cycl.$owl_term_info_native.this.$disjoint_classes = value;
        }

        @Override
        public SubLObject setField6(final SubLObject value) {
            return owl_to_cycl.$owl_term_info_native.this.$plist = value;
        }

        static {
            structDecl = makeStructDeclNative(com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_term_info_native.class, owl_to_cycl.OWL_TERM_INFO, owl_to_cycl.OWL_TERM_INFO_P, owl_to_cycl.$list533, owl_to_cycl.$list534, new String[]{ "$cyc_name", "$comment", "$superclasses", "$disjoint_classes", "$plist" }, owl_to_cycl.$list535, owl_to_cycl.$list536, owl_to_cycl.PRINT_OWL_TERM_INFO);
        }
    }

    static private final SubLList $list_alt53 = list(new SubLObject[]{ makeString("Insurgent"), makeString("Funeral"), makeString("CivilianPeopleGroup"), makeString("PowerPlant"), makeString("NavalFacility"), makeString("Bank"), makeString("HighSchool"), makeString("PoliticalParty"), makeString("Church"), makeString("Synagogue"), makeString("Temple"), makeString("CivilianEvent"), makeString("GovernmentalEvent"), makeString("MilitaryEvent"), makeString("Bombing"), makeString("CoupAttempt"), makeString("Execution"), makeString("Uncovering"), makeString("Arrest"), makeString("FailedTerrorPlot"), makeString("Killing"), makeString("Assasination"), makeString("HostageTaking"), makeString("Kidnapping"), makeString("TrainingCamp"), makeString("IndustrialFacility"), makeString("Park"), makeString("MinistryBuilding"), makeString("ResidentialBuilding"), makeString("Stadium"), makeString("Hideout"), makeString("OfficeBuilding"), makeString("Airport"), makeString("EducationalInstitution"), makeString("EmbassyBuilding"), makeString("ReligousFacility"), makeString("Bridge"), makeString("Road"), makeString("Hospital"), makeString("Embassy"), makeString("GovernmentalPeopleGroup"), makeString("GovernmentalPerson"), makeString("UnknownPerson"), makeString("GeopoliticalLocation"), makeString("ReligiousOrganization"), makeString("UnknownOrganization"), makeString("MilitaryOrganization"), makeString("NGO"), makeString("GovernmentalOrganization"), makeString("PoliticalOrganization"), makeString("EducationResearchOrganization"), makeString("cousinOf"), makeString("husbandOf"), makeString("ideologistFor"), makeString("cityInCountry"), makeString("presentAt"), makeString("killedAt"), makeString("isTargetOf"), makeString("Sneaking"), makeString("hasMilitant"), makeString("TerroristOrganization"), makeString("victimOf"), makeString("Province"), makeString("provinceInCountry"), makeString("founderOf"), makeString("isEventLocation"), makeString("isPressSecretaryFor"), makeString("hasFollower"), makeString("hasDirector"), makeString("hasWounded"), makeString("hasSpokesman"), makeString("organizerOf"), makeString("CapitalCity"), makeString("hasCity"), makeString("capitalCityInCountry"), makeString("arrestedAt"), makeString("spouseOf"), makeString("hasChairman"), makeString("contactedBy"), makeString("memberOf"), makeString("financedBy"), makeString("State"), makeString("Country"), makeString("stateInCountry"), makeString("hasMember"), makeString("employeeOf"), makeString("BookOrManifesto"), makeString("hasAuthor"), makeString("isPrimeMiniterOf"), makeString("hasLeader"), makeString("chiefOf"), makeString("hasActor"), makeString("childOf"), makeString("funderOf"), makeString("damage"), makeString("ConflictEvent"), makeString("name"), makeString("Group"), makeString("Event"), makeString("Agent"), makeString("colleagueOf"), makeString("hasSuborganization"), makeString("siblingOf"), makeString("City"), makeString("hasPart"), makeString("CivicStructure"), makeString("hasLocation"), makeString("housemateOf"), makeString("familyRelativeOf"), makeString("friendOf"), makeString("Person"), makeString("Location"), makeString("affiliatedWith"), makeString("Organization") });

    public static final class $owl_term_info_p$UnaryFunction extends UnaryFunction {
        public $owl_term_info_p$UnaryFunction() {
            super(extractFunctionNamed("OWL-TERM-INFO-P"));
        }

        @Override
        public SubLObject processItem(final SubLObject arg1) {
            return owl_to_cycl.owl_term_info_p(arg1);
        }
    }

    public static final class $owl_importer_native extends SubLStructNative {
        public SubLObject $id;

        public SubLObject $progress;

        public SubLObject $error_info;

        public SubLObject $import_parameters;

        public SubLObject $thread;

        private static final SubLStructDeclNative structDecl;

        public $owl_importer_native() {
            owl_to_cycl.$owl_importer_native.this.$id = Lisp.NIL;
            owl_to_cycl.$owl_importer_native.this.$progress = Lisp.NIL;
            owl_to_cycl.$owl_importer_native.this.$error_info = Lisp.NIL;
            owl_to_cycl.$owl_importer_native.this.$import_parameters = Lisp.NIL;
            owl_to_cycl.$owl_importer_native.this.$thread = Lisp.NIL;
        }

        @Override
        public SubLStructDecl getStructDecl() {
            return structDecl;
        }

        @Override
        public SubLObject getField2() {
            return owl_to_cycl.$owl_importer_native.this.$id;
        }

        @Override
        public SubLObject getField3() {
            return owl_to_cycl.$owl_importer_native.this.$progress;
        }

        @Override
        public SubLObject getField4() {
            return owl_to_cycl.$owl_importer_native.this.$error_info;
        }

        @Override
        public SubLObject getField5() {
            return owl_to_cycl.$owl_importer_native.this.$import_parameters;
        }

        @Override
        public SubLObject getField6() {
            return owl_to_cycl.$owl_importer_native.this.$thread;
        }

        @Override
        public SubLObject setField2(final SubLObject value) {
            return owl_to_cycl.$owl_importer_native.this.$id = value;
        }

        @Override
        public SubLObject setField3(final SubLObject value) {
            return owl_to_cycl.$owl_importer_native.this.$progress = value;
        }

        @Override
        public SubLObject setField4(final SubLObject value) {
            return owl_to_cycl.$owl_importer_native.this.$error_info = value;
        }

        @Override
        public SubLObject setField5(final SubLObject value) {
            return owl_to_cycl.$owl_importer_native.this.$import_parameters = value;
        }

        @Override
        public SubLObject setField6(final SubLObject value) {
            return owl_to_cycl.$owl_importer_native.this.$thread = value;
        }

        static {
            structDecl = makeStructDeclNative(com.cyc.cycjava.cycl.owl.owl_to_cycl.$owl_importer_native.class, owl_to_cycl.OWL_IMPORTER, owl_to_cycl.OWL_IMPORTER_P, owl_to_cycl.$list642, owl_to_cycl.$list643, new String[]{ "$id", "$progress", "$error_info", "$import_parameters", "$thread" }, owl_to_cycl.$list644, owl_to_cycl.$list645, owl_to_cycl.PRINT_OWL_IMPORTER);
        }
    }

    static private final SubLList $list_alt54 = list(makeString("Collection"));

    static private final SubLList $list_alt55 = list(makeKeyword("PROPERTY"), makeKeyword("CLASS"), makeKeyword("INSTANCE"), makeKeyword("BNODE"));

    private static final SubLSymbol OWL_PRED_INFO_CYC_NAME = makeSymbol("OWL-PRED-INFO-CYC-NAME");

    private static final SubLSymbol OWL_PRED_INFO_EXTERNAL_NAME = makeSymbol("OWL-PRED-INFO-EXTERNAL-NAME");

    private static final SubLSymbol OWL_TERM_INFO_CYC_NAME = makeSymbol("OWL-TERM-INFO-CYC-NAME");

    private static final SubLSymbol OWL_TERM_INFO_EXTERNAL_NAME = makeSymbol("OWL-TERM-INFO-EXTERNAL-NAME");

    static private final SubLString $str_alt62$_S_is_not_a_valid_definition_type = makeString("~S is not a valid definition type. Must be one of ~S");

    public static final class $owl_importer_p$UnaryFunction extends UnaryFunction {
        public $owl_importer_p$UnaryFunction() {
            super(extractFunctionNamed("OWL-IMPORTER-P"));
        }

        @Override
        public SubLObject processItem(final SubLObject arg1) {
            return owl_to_cycl.owl_importer_p(arg1);
        }
    }

    static private final SubLString $str_alt64$Can_only_import_OWL_ontologies_fr = makeString("Can only import OWL ontologies from valid files or URLs.");

    static private final SubLString $str_alt70$Unable_to_open__S = makeString("Unable to open ~S");

    static private final SubLSymbol $sym71$WHITESPACE_STRING_ = makeSymbol("WHITESPACE-STRING?");

    static private final SubLString $str_alt74$__Importing__S_from__S_____ = makeString("~&Importing ~S from ~S...~%");

    static private final SubLString $str_alt76$Processing__D_class_definition__P = makeString("Processing ~D class definition~:P...");

    static private final SubLString $str_alt78$Processing__D_instance_definition = makeString("Processing ~D instance definition~:P...");

    static private final SubLString $str_alt79$utf_8 = makeString("utf-8");

    static private final SubLString $str_alt80$_xml = makeString("?xml");

    static private final SubLString $str_alt82$OWLImport_ = makeString("OWLImport-");

    static private final SubLList $list_alt83 = list(reader_make_constant_shell("ImportingAnOWLFileIntoAKnowledgeBase"));

    static private final SubLList $list_alt92 = cons(makeSymbol("ELEMENT-NAME"), makeSymbol("ATTRIBUTES"));

    static private final SubLList $list_alt93 = cons(makeSymbol("ATTRIBUTE-NAME"), makeSymbol("VALUE"));

    static private final SubLString $str_alt95$Can_t_recognize_alleged_base_URI_ = makeString("Can't recognize alleged base URI ~S as a URI.");

    static private final SubLString $str_alt99$Expected_ontology_token__got__S = makeString("Expected ontology token, got ~S");

    static private final SubLString $str_alt100$Couldn_t_find_closing_Ontology_ta = makeString("Couldn't find closing Ontology tag.~% ~S");

    static private final SubLString $str_alt103$Expecting_comment__got__S = makeString("Expecting comment, got ~S");

    public static final SubLObject $const104$rdfs_comment = reader_make_constant_shell("rdfs:comment");

    static private final SubLString $str_alt107$Expecting_label__got__S = makeString("Expecting label, got ~S");

    public static final SubLObject $const110$owl_priorVersion = reader_make_constant_shell("owl:priorVersion");

    static private final SubLString $str_alt113$Don_t_know_how_to_handle_ontology = makeString("Don't know how to handle ontology info from ~S");

    static private final SubLList $list_alt116 = list(makeSymbol("CYC-NAME"), makeSymbol("COMMENT"), makeSymbol("DOMAINS"), makeSymbol("RANGE"), makeSymbol("PLIST"));

    static private final SubLList $list_alt117 = list(makeKeyword("CYC-NAME"), makeKeyword("COMMENT"), makeKeyword("DOMAINS"), makeKeyword("RANGE"), makeKeyword("PLIST"));

    static private final SubLList $list_alt118 = list(makeSymbol("OPI-CYC-NAME"), makeSymbol("OPI-COMMENT"), makeSymbol("OPI-DOMAINS"), makeSymbol("OPI-RANGE"), makeSymbol("OPI-PLIST"));

    static private final SubLList $list_alt119 = list(makeSymbol("_CSETF-OPI-CYC-NAME"), makeSymbol("_CSETF-OPI-COMMENT"), makeSymbol("_CSETF-OPI-DOMAINS"), makeSymbol("_CSETF-OPI-RANGE"), makeSymbol("_CSETF-OPI-PLIST"));

    static private final SubLString $str_alt137$Invalid_slot__S_for_construction_ = makeString("Invalid slot ~S for construction function");

    static private final SubLString $str_alt138$_OWL_PRED_INFO__A_ = makeString("<OWL-PRED-INFO ~A>");

    static private final SubLList $list_alt143 = list(makeKeyword("COMPLEMENT-OF"), list(makeSymbol("TEST"), makeSymbol("OWL-EXTERNAL-VALUE-SPECIFICATION-P")));

    static private final SubLList $list_alt145 = list(makeKeyword("NODE-ID"), list($TEST, makeSymbol("STRINGP")));

    static private final SubLList $list_alt146 = list(makeKeyword("RESTRICTION"), makeKeyword("ANYTHING"), makeKeyword("ANYTHING"), makeKeyword("ANYTHING"));

    static private final SubLList $list_alt147 = cons(makeKeyword("UNION"), makeKeyword("ANYTHING"));

    static private final SubLList $list_alt148 = cons(makeKeyword("INTERSECTION-OF"), makeKeyword("ANYTHING"));

    static private final SubLList $list_alt149 = cons(makeKeyword("ONE-OF"), makeKeyword("ANYTHING"));

    static private final SubLList $list_alt154 = list(new SubLObject[]{ makeSymbol("ONTOLOGY"), makeSymbol("NAMESPACE-MAP"), makeSymbol("CONSTANT-PREFIX"), makeSymbol("BASE-URI"), makeSymbol("CYCLIST"), makeSymbol("QUOTED-ISA"), makeSymbol("PREFIX-EXTERNAL-NAMES?"), makeSymbol("ABBREVIATE-PREFIXES?"), makeSymbol("IMPORT-TERM"), makeSymbol("ENCODING") });

    static private final SubLList $list_alt155 = list(new SubLObject[]{ makeKeyword("ONTOLOGY"), makeKeyword("NAMESPACE-MAP"), makeKeyword("CONSTANT-PREFIX"), makeKeyword("BASE-URI"), makeKeyword("CYCLIST"), makeKeyword("QUOTED-ISA"), makeKeyword("PREFIX-EXTERNAL-NAMES?"), makeKeyword("ABBREVIATE-PREFIXES?"), makeKeyword("IMPORT-TERM"), makeKeyword("ENCODING") });

    static private final SubLList $list_alt156 = list(new SubLObject[]{ makeSymbol("OIP-ONTOLOGY"), makeSymbol("OIP-NAMESPACE-MAP"), makeSymbol("OIP-CONSTANT-PREFIX"), makeSymbol("OIP-BASE-URI"), makeSymbol("OIP-CYCLIST"), makeSymbol("OIP-QUOTED-ISA"), makeSymbol("OIP-PREFIX-EXTERNAL-NAMES?"), makeSymbol("OIP-ABBREVIATE-PREFIXES?"), makeSymbol("OIP-IMPORT-TERM"), makeSymbol("OIP-ENCODING") });

    static private final SubLList $list_alt157 = list(new SubLObject[]{ makeSymbol("_CSETF-OIP-ONTOLOGY"), makeSymbol("_CSETF-OIP-NAMESPACE-MAP"), makeSymbol("_CSETF-OIP-CONSTANT-PREFIX"), makeSymbol("_CSETF-OIP-BASE-URI"), makeSymbol("_CSETF-OIP-CYCLIST"), makeSymbol("_CSETF-OIP-QUOTED-ISA"), makeSymbol("_CSETF-OIP-PREFIX-EXTERNAL-NAMES?"), makeSymbol("_CSETF-OIP-ABBREVIATE-PREFIXES?"), makeSymbol("_CSETF-OIP-IMPORT-TERM"), makeSymbol("_CSETF-OIP-ENCODING") });

    static private final SubLSymbol $sym172$OIP_PREFIX_EXTERNAL_NAMES_ = makeSymbol("OIP-PREFIX-EXTERNAL-NAMES?");

    static private final SubLSymbol $sym173$_CSETF_OIP_PREFIX_EXTERNAL_NAMES_ = makeSymbol("_CSETF-OIP-PREFIX-EXTERNAL-NAMES?");

    static private final SubLSymbol $sym174$OIP_ABBREVIATE_PREFIXES_ = makeSymbol("OIP-ABBREVIATE-PREFIXES?");

    static private final SubLSymbol $sym175$_CSETF_OIP_ABBREVIATE_PREFIXES_ = makeSymbol("_CSETF-OIP-ABBREVIATE-PREFIXES?");

    public static final SubLSymbol $kw186$PREFIX_EXTERNAL_NAMES_ = makeKeyword("PREFIX-EXTERNAL-NAMES?");

    public static final SubLSymbol $kw187$ABBREVIATE_PREFIXES_ = makeKeyword("ABBREVIATE-PREFIXES?");

    static private final SubLString $str_alt190$_OWL_IMPORT_PARAMETERS__S_ = makeString("<OWL-IMPORT-PARAMETERS ~S>");

    static private final SubLSymbol $sym192$CYCLIST_ = makeSymbol("CYCLIST?");

    static private final SubLString $str_alt196$Multiple_uris_for__S_____S____S = makeString("Multiple uris for ~S:~% ~S~% ~S");

    static private final SubLString $str_alt200$_ = makeString("#");

    static private final SubLString $str_alt201$interpretation_of_ = makeString("interpretation of ");

    static private final SubLString $str_alt202$_as_a_URI_for_an_imported_ontolog = makeString(" as a URI for an imported ontology.");

    static private final SubLList $list_alt203 = cons(makeSymbol("NAMESPACE"), makeSymbol("PROBLEM-STRING"));

    static private final SubLList $list_alt204 = cons(makeSymbol("ATTRIBUTE-NAME"), makeUninternedSymbol("VALUE"));

    static private final SubLString $str_alt205$Namespace_problem___A = makeString("Namespace problem: ~A");

    static private final SubLList $list_alt207 = list(list(makeString("rdf"), makeString("http://www.w3.org/1999/02/22-rdf-syntax-ns#")), list(makeString("owl"), makeString("http://www.w3.org/2002/07/owl#")), list(makeString("xsd"), makeString("http://www.w3.org/2001/XMLSchema#")), list(makeString("rdfs"), makeString("http://www.w3.org/2000/01/rdf-schema#")), list(makeString("dc"), makeString("http://purl.org/dc/elements/1.1/")));

    static private final SubLString $str_alt208$_is_bound_to_ = makeString(" is bound to ");

    static private final SubLString $str_alt209$_ = makeString(".");

    static private final SubLString $str_alt210$_Must_be_one_of_ = makeString(" Must be one of ");

    static private final SubLString $str_alt211$No_import_statement_for_ = makeString("No import statement for ");

    static private final SubLSymbol $sym213$_ONTOLOGY = makeSymbol("?ONTOLOGY");

    static private final SubLList $list_alt215 = list(reader_make_constant_shell("isa"), makeSymbol("?ONTOLOGY"), reader_make_constant_shell("OWLOntology"));

    static private final SubLList $list_alt220 = list(makeKeyword("ANSWER-LANGUAGE"), makeKeyword("HL"), makeKeyword("MAX-NUMBER"), ONE_INTEGER);

    static private final SubLString $str_alt221$__ = makeString("~&");

    static private final SubLString $str_alt222$Couldn_t_find_ontology_for__S__Cr = makeString("Couldn't find ontology for ~S. Creating a new one.");

    static private final SubLString $str_alt223$__ = makeString("~%");

    static private final SubLSymbol $sym226$_TERM_TYPE = makeSymbol("?TERM-TYPE");

    static private final SubLList $list_alt228 = list(makeSymbol("?TERM-TYPE"));

    static private final SubLString $str_alt231$There_is_no_range_for__S__Name_to = makeString("There is no range for ~S~%Name token: ~S");

    static private final SubLString $str_alt240$____ = makeString("<!--");

    static private final SubLString $str_alt241$___ = makeString("-->");

    static private final SubLString $str_alt242$Couldn_t_find_end_of_HTML_comment = makeString("Couldn't find end of HTML comment: ~S");

    static private final SubLString $str_alt243$Skipping_comment___S = makeString("Skipping comment: ~S");

    static private final SubLString $str_alt247$Can_t_interpret_empty_label_token = makeString("Can't interpret empty label token ~S");

    static private final SubLString $str_alt248$Can_t_decode_language_abbreviatio = makeString("Can't decode language abbreviation ~S");

    static private final SubLString $str_alt251$Couldn_t_identify_domain_from__S = makeString("Couldn't identify domain from ~S");

    static private final SubLString $str_alt253$__ = makeString("/>");

    static private final SubLString $str_alt254$_S_is_its_own_inverse__so_it_s_sy = makeString("~S is its own inverse, so it's symmetric.");

    static private final SubLString $str_alt258$Noting_genl_property__S_of__S = makeString("Noting genl property ~S of ~S");

    static private final SubLString $str_alt261$Noting_equivalent_property__S_of_ = makeString("Noting equivalent property ~S of ~S");

    static private final SubLString $str_alt264$Couldn_t_identify_range_from__S = makeString("Couldn't identify range from ~S");

    static private final SubLString $str_alt267$__Noting_Cyc_guid_for__S_S__ = makeString("~&Noting Cyc guid for ~S~S~%");

    static private final SubLString $str_alt270$__Noting_Cyc_externalID_for__S_S_ = makeString("~&Noting Cyc externalID for ~S~S~%");

    static private final SubLString $str_alt274$__Noting__isa__S__S___ = makeString("~&Noting (isa ~S ~S)~%");

    static private final SubLString $str_alt275$__Noting__S__S__ = makeString("~&Noting ~S ~S~%");

    static private final SubLString $str_alt277$Ignoring_unrecognized_token___S = makeString("Ignoring unrecognized token: ~S");

    static private final SubLString $str_alt278$cyc_com = makeString("cyc.com");

    static private final SubLString $str_alt279$Don_t_know_how_to_interpret_attri = makeString("Don't know how to interpret attribute value ~S");

    static private final SubLString $str_alt281$Processing__D_property_definition = makeString("Processing ~D property definition~:P...");

    static private final SubLString $str_alt284$Can_t_read_range_starting_with__S = makeString("Can't read range starting with ~S");

    static private final SubLString $str_alt285$__rdfs_range_ = makeString("</rdfs:range>");

    static private final SubLString $str_alt286$Finished_range__S_ = makeString("Finished range ~S.");

    static private final SubLString $str_alt292$Reading_OWL_class_starting_with__ = makeString("Reading OWL class starting with~% ~S");

    static private final SubLList $list_alt294 = list(makeKeyword("CLASS"), makeKeyword("BNODE"));

    static private final SubLString $str_alt296$Starting_token___S = makeString("Starting token: ~S");

    static private final SubLString $str_alt297$No_progress_reading_OWL_class__St = makeString("No progress reading OWL class: Stuck on ~A.");

    static private final SubLString $str_alt300$Reading_restriction_starting_with = makeString("Reading restriction starting with ~S");

    static private final SubLString $str_alt302$Don_t_know_what_to_do_with_this_t = makeString("Don't know what to do with this token while reading OWL class:~% ~S~%");

    static private final SubLString $str_alt304$Found_class___S___Components___S = makeString("Found class: ~S~% Components: ~S");

    static private final SubLString $str_alt308$Don_t_know_what_this_class_is_nam = makeString("Don't know what this class is named:~% ~S");

    static private final SubLString $str_alt309$Can_t_read_an_enumeration_that_is = makeString("Can't read an enumeration that isn't a oneOf range:~% ~S");

    static private final SubLString $str_alt312$Couldn_t_get_name_from__S = makeString("Couldn't get name from ~S");

    static private final SubLString $str_alt313$Read_enumeration___S = makeString("Read enumeration: ~S");

    static private final SubLString $str_alt315$http___www_w3_org_1999_02_22_rdf_ = makeString("http://www.w3.org/1999/02/22-rdf-syntax-ns#nil");

    static private final SubLString $str_alt318$Found_non_first__non_rest_token_i = makeString("Found non-first, non-rest token in OWL list:~% ~S");

    static private final SubLString $str_alt319$__Next_item___S__ = makeString("~&Next item: ~S~%");

    static private final SubLList $list_alt322 = list(makeString("is"), makeString("has"));

    static private final SubLString $str_alt323$Got_null_arg_isa_name_in__S = makeString("Got null arg-isa name in ~S");

    static private final SubLList $list_alt325 = cons(makeSymbol("?LOCAL-NAME"), makeSymbol("?COLL"));

    static private final SubLList $list_alt326 = list(reader_make_constant_shell("and"), list(reader_make_constant_shell("owlURI"), makeSymbol("?TERM"), list(reader_make_constant_shell("URLFn"), makeSymbol("?URI"))), list(reader_make_constant_shell("concatenateStrings"), makeSymbol("?URI"), makeString("http://www.w3.org/2000/10/XMLSchema#"), makeSymbol("?LOCAL-NAME")), list(reader_make_constant_shell("owlDataTypeSemanticCorrelation"), makeSymbol("?TERM"), makeSymbol("?COLL")));

    static private final SubLList $list_alt327 = list(makeKeyword("INFERENCE-MODE"), makeKeyword("MINIMAL"));

    static private final SubLList $list_alt330 = list(makeKeyword("NONLOCAL"), makeString("http://www.w3.org/2001/XMLSchema"), makeKeyword("ANYTHING"));

    static private final SubLString $str_alt331$__Found_term_by_guid___S = makeString("~&Found term by guid: ~S");

    static private final SubLString $str_alt332$__Found_term_by_externalID___S = makeString("~&Found term by externalID: ~S");

    static private final SubLSymbol $sym334$_URI = makeSymbol("?URI");

    static private final SubLList $list_alt336 = list(makeKeyword("INFERENCE-MODE"), makeKeyword("MINIMAL"), makeKeyword("ANSWER-LANGUAGE"), makeKeyword("EL"), makeKeyword("MAX-NUMBER"), ONE_INTEGER);

    static private final SubLList $list_alt337 = list(reader_make_constant_shell("URIFn"), list($BIND, makeSymbol("STRING-ARG")));

    static private final SubLString $str_alt340$Couldn_t_find_URI_for_namespace__ = makeString("Couldn't find URI for namespace ~S");

    static private final SubLString $str_alt341$Finding_or_creating_nonlocal_term = makeString("Finding or creating nonlocal term...");

    static private final SubLList $list_alt342 = list(makeSymbol("URI"), makeSymbol("NAME"));

    static private final SubLString $str_alt343$Result___S = makeString("Result: ~S");

    static private final SubLString $str_alt344$Can_t_find_or_create_term_of_type = makeString("Can't find or create term of type ~S from ~S");

    static private final SubLString $str_alt346$external_name_appears_to_contain_ = makeString("external-name appears to contain a control character: ~S");

    static private final SubLString $str_alt347$external_name_appears_to_contain_ = makeString("external-name appears to contain prefix: ~S");

    static private final SubLString $str_alt352$_ = makeString(":");

    static private final SubLList $list_alt353 = list(reader_make_constant_shell("OWLOntologyFn"), list($BIND, makeSymbol("ARG1")));

    static private final SubLList $list_alt356 = list(makeSymbol("?URI"));

    static private final SubLList $list_alt357 = list(makeKeyword("MAX-NUMBER"), ONE_INTEGER, makeKeyword("ANSWER-LANGUAGE"), makeKeyword("HL"), makeKeyword("INFERENCE-MODE"), makeKeyword("MINIMAL"));

    static private final SubLString $str_alt359$_cyc_top_transcripts_0953_jonny2_ = makeString("/cyc/top/transcripts/0953/jonny2-20080324150858-709-local-62-sent.ts");

    static private final SubLString $str_alt360$_cyc_top_transcripts_0953_vela_20 = makeString("/cyc/top/transcripts/0953/vela-20080414111900-21395-local-2-sent.ts");

    static private final SubLString $str_alt361$_cyc_top_transcripts_0953_vela_20 = makeString("/cyc/top/transcripts/0953/vela-20080416102200-16797-local-0-sent.ts");

    static private final SubLString $str_alt362$_cyc_top_transcripts_0953_jonny2_ = makeString("/cyc/top/transcripts/0953/jonny2-20080324150858-709-local-64-sent.ts");

    static private final SubLString $str_alt363$_cyc_top_transcripts_0953_jonny2_ = makeString("/cyc/top/transcripts/0953/jonny2-20080324150858-709-local-68-sent.ts");

    static private final SubLString $str_alt364$_cyc_top_transcripts_0953_jonny2_ = makeString("/cyc/top/transcripts/0953/jonny2-20080324150858-709-local-69-sent.ts");

    static private final SubLString $str_alt365$_cyc_top_transcripts_0953_jonny2_ = makeString("/cyc/top/transcripts/0953/jonny2-20080324150858-709-local-94-sent.ts");

    static private final SubLList $list_alt370 = list(makeKeyword("INFERENCE-MODE"), makeKeyword("MINIMAL"), makeKeyword("ANSWER-LANGUAGE"), makeKeyword("HL"), makeKeyword("MAX-NUMBER"), ONE_INTEGER);

    static private final SubLList $list_alt378 = list(makeString("externalID"), makeString("guid"), makeString("nonAtomicFormula"), makeString("literalValue"), makeString("isa"));

    static private final SubLSymbol $sym380$SPEC_ = makeSymbol("SPEC?");

    static private final SubLString $str_alt381$Potentially_adding_assertions_to_ = makeString("Potentially adding assertions to existing predicate ~S");

    static private final SubLString $str_alt383$__Creating_predicate_from__S__ = makeString("~&Creating predicate from ~S~%");

    static private final SubLString $str_alt384$Failed_to_find_or_create_a_predic = makeString("Failed to find or create a predicate with name: ~S~%");



    public static final SubLObject $const386$rdfs_domain = reader_make_constant_shell("rdfs:domain");

    static private final SubLList $list_alt387 = list(reader_make_constant_shell("Thing"));

    public static final SubLObject $const388$rdfs_range = reader_make_constant_shell("rdfs:range");

    static private final SubLString $str_alt389$Asserting_genl_property__S_of__S = makeString("Asserting genl property ~S of ~S");

    public static final SubLObject $const390$rdfs_subPropertyOf = reader_make_constant_shell("rdfs:subPropertyOf");

    static private final SubLString $str_alt391$Asserting_spec_property__S_of__S = makeString("Asserting spec property ~S of ~S");

    static private final SubLString $str_alt393$Asserting_inverse__S_of__S = makeString("Asserting inverse ~S of ~S");

    static private final SubLString $str_alt394$Asserting_equivalent_property__S_ = makeString("Asserting equivalent-property ~S of ~S");

    static private final SubLString $str_alt395$Couldn_t_find_equivalent_property = makeString("Couldn't find equivalent property ~S");

    public static final SubLObject $const396$owl_equivalentProperty = reader_make_constant_shell("owl:equivalentProperty");

    static private final SubLList $list_alt397 = list(makeSymbol("PROPERTY-NAME"), makeSymbol("VALUE"));

    static private final SubLString $str_alt398$__Asserting__S__ = makeString("~&Asserting ~S~%");

    static private final SubLSymbol $sym400$INVALID_FORT_ = makeSymbol("INVALID-FORT?");

    static private final SubLSymbol $sym401$_TERM = makeSymbol("?TERM");

    static private final SubLString $str_alt402$Couldn_t_find__S = makeString("Couldn't find ~S");

    static private final SubLString $str_alt406$Circular_node_id_reference___S___ = makeString("Circular node id reference: ~S -> ~S");

    static private final SubLString $str_alt408$Postponing__isa__S__S__because__S = makeString("Postponing (isa ~S ~S) because ~S is not (yet) known to be a collection.");

    static private final SubLString $str_alt410$_ = makeString("-");

    static private final SubLString $str_alt415$Waiting_for__D_enqueued_operation = makeString("Waiting for ~D enqueued operation~:P to be processed...");

    static private final SubLString $str_alt417$__Finished_pass_through_queue__Si = makeString("~&Finished pass through queue. Size (including markers) is now ~D. Going around again...~%");

    static private final SubLString $str_alt418$__OE_queue_is_empty__Zzz___ = makeString("~&OE queue is empty. Zzz.~%");

    static private final SubLString $str_alt419$Unable_to_perform__D_operation__P = makeString("Unable to perform ~D operation~:P:~% ~S~%");

    static private final SubLString $str_alt420$__Can_t_do_anything_with_queue_no = makeString("~&Can't do anything with queue now. Waiting further operations. Zzz.~%");

    static private final SubLList $list_alt421 = cons(makeKeyword("ASSERT"), makeKeyword("ANYTHING"));

    static private final SubLString $str_alt422$__Noting_OE_performed___S__ = makeString("~&Noting OE performed: ~S~%");

    static private final SubLList $list_alt423 = list(makeSymbol("QUASI-FORMULA"), makeSymbol("MT"), makeSymbol("IMPORT-PARAMETERS"));

    static private final SubLString $str_alt424$__Failed_to_resolve__S__ = makeString("~&Failed to resolve ~S~%");

    static private final SubLString $str_alt426$Problem_performing__S = makeString("Problem performing ~S");

    static private final SubLString $str_alt429$_S_is_not_an_OWL_node_ID_ = makeString("~S is not an OWL node ID.");

    static private final SubLList $list_alt430 = cons(makeKeyword("OWL-QUASI-TERM"), makeKeyword("ANYTHING"));

    static private final SubLList $list_alt431 = list(makeSymbol("EXTERNAL-NAME"), makeSymbol("TYPE"), makeSymbol("ONTOLOGY"), makeSymbol("IMPORT-PARAMETERS"));

    static private final SubLString $str_alt433$__Resolved__S___to__S__ = makeString("~&Resolved ~S~% to ~S~%");

    static private final SubLString $str_alt438$Already_know__S___in__S = makeString("Already know ~S~% in ~S");

    static private final SubLString $str_alt439$Failed_to_assert__S__ = makeString("Failed to assert ~S~%");

    static private final SubLString $str_alt440$Processing_term_definitions___ = makeString("Processing term definitions...");

    static private final SubLString $str_alt441$Anonymous_ = makeString("Anonymous-");

    static private final SubLString $str_alt442$__Creating__S_____ = makeString("~&Creating ~S...~%");

    static private final SubLString $str_alt443$Potentially_adding_assertions_to_ = makeString("Potentially adding assertions to existing term ~S");

    static private final SubLString $str_alt444$__Defining_term_from__S__ = makeString("~&Defining term from ~S~%");

    static private final SubLString $str_alt445$Failed_to_find_or_create_a_term_w = makeString("Failed to find or create a term with name: ~S~%");

    static private final SubLString $str_alt448$Asserting_genl_class__S_of__S = makeString("Asserting genl class ~S of ~S");

    public static final SubLObject $const449$rdfs_subClassOf = reader_make_constant_shell("rdfs:subClassOf");

    static private final SubLList $list_alt450 = list(makeKeyword("COMPLEMENT-OF"), makeKeyword("ANYTHING"));

    static private final SubLString $str_alt451$Asserting_disjoint_class__S_of__S = makeString("Asserting disjoint class ~S of ~S");

    public static final SubLObject $const452$owl_disjointWith = reader_make_constant_shell("owl:disjointWith");

    static private final SubLString $str_alt453$Don_t_know_how_to_handle_supercla = makeString("Don't know how to handle superclass ~S");

    static private final SubLString $str_alt454$Asserting_disjoint___S_and__S = makeString("Asserting disjoint: ~S and ~S");

    static private final SubLString $str_alt455$Don_t_know_how_to_handle_disjoint = makeString("Don't know how to handle disjoint class ~S");

    static private final SubLString $str_alt456$Asserting_union__S_of__S = makeString("Asserting union ~S of ~S");

    static private final SubLString $str_alt458$Asserting_intersection__S_of__S = makeString("Asserting intersection ~S of ~S");

    static private final SubLString $str_alt461$Asserting_enumeration__S_of__S = makeString("Asserting enumeration ~S of ~S");

    static private final SubLString $str_alt463$Can_t_handle__S__value___S_ = makeString("Can't handle ~S (value: ~S)");

    static private final SubLList $list_alt464 = cons(makeSymbol("LABEL"), makeSymbol("LANGUAGE"));

    static private final SubLSymbol $sym465$_LEXICON = makeSymbol("?LEXICON");

    static private final SubLList $list_alt467 = list(makeSymbol("?LEXICON"));

    static private final SubLList $list_alt468 = list(makeKeyword("ANSWER-LANGUAGE"), makeKeyword("HL"), makeKeyword("MAX-NUMBER"), ONE_INTEGER, makeKeyword("INFERENCE-MODE"), makeKeyword("MINIMAL"));

    public static final SubLObject $const470$rdfs_label = reader_make_constant_shell("rdfs:label");

    static private final SubLString $str_alt471$Asserting_equivalent_class__S_of_ = makeString("Asserting equivalent class ~S of ~S");

    public static final SubLObject $const472$owl_equivalentClass = reader_make_constant_shell("owl:equivalentClass");

    static private final SubLString $str_alt473$Failed_to_assert_equivalent_class = makeString("Failed to assert equivalent class ~S of ~S");

    static private final SubLList $list_alt474 = list(makeSymbol("PROPERTY"), makeSymbol("TYPE"), makeSymbol("VALUE"));

    static private final SubLString $str_alt475$Resolved_nonlocal_reference__S___ = makeString("Resolved nonlocal reference ~S~% to ~S");

    static private final SubLString $str_alt476$Node_ID_as_restriction_target___S = makeString("Node ID as restriction target: ~S");

    static private final SubLString $str_alt477$Can_t_handle__S_restrictions_with = makeString("Can't handle ~S restrictions with value ~S.");



    static private final SubLSymbol $sym492$_X = makeSymbol("?X");











    static private final SubLString $str_alt498$Can_t_create_collection_from__S_r = makeString("Can't create collection from ~S restrictions with value ~S.");

    static private final SubLString $str_alt500$Created__S_from__S = makeString("Created ~S from ~S");

    static private final SubLString $str_alt502$Nested_calls_resolving__S = makeString("Nested calls resolving ~S");

    static private final SubLList $list_alt503 = list(makeKeyword("COMPLEMENT-OF"), list($TEST, makeSymbol("OWL-EXTERNAL-VALUE-SPECIFICATION-P")));

    static private final SubLSymbol $sym505$VALID_CONSTANT_ = makeSymbol("VALID-CONSTANT?");

    static private final SubLString $str_alt506$Can_t_find_or_create__S_term_from = makeString("Can't find or create ~S term from ~S");

    static private final SubLString $str_alt507$__Trying_to_resolve__S__ = makeString("~&Trying to resolve ~S~%");

    static private final SubLString $str_alt508$__Result___S__ = makeString("~&Result: ~S~%");

    static private final SubLString $str_alt509$Trying_to_create_term_from__S = makeString("Trying to create term from ~S");

    static private final SubLList $list_alt511 = list(makeSymbol("CYC-NAME"), makeSymbol("COMMENT"), makeSymbol("SUPERCLASSES"), makeSymbol("DISJOINT-CLASSES"), makeSymbol("PLIST"));

    static private final SubLList $list_alt512 = list(makeKeyword("CYC-NAME"), makeKeyword("COMMENT"), makeKeyword("SUPERCLASSES"), makeKeyword("DISJOINT-CLASSES"), makeKeyword("PLIST"));

    static private final SubLList $list_alt513 = list(makeSymbol("OTI-CYC-NAME"), makeSymbol("OTI-COMMENT"), makeSymbol("OTI-SUPERCLASSES"), makeSymbol("OTI-DISJOINT-CLASSES"), makeSymbol("OTI-PLIST"));

    static private final SubLList $list_alt514 = list(makeSymbol("_CSETF-OTI-CYC-NAME"), makeSymbol("_CSETF-OTI-COMMENT"), makeSymbol("_CSETF-OTI-SUPERCLASSES"), makeSymbol("_CSETF-OTI-DISJOINT-CLASSES"), makeSymbol("_CSETF-OTI-PLIST"));

    static private final SubLString $str_alt529$_OWL_TERM_INFO__A_ = makeString("<OWL-TERM-INFO ~A>");

    static private final SubLList $list_alt530 = list(makeKeyword("CLASS"), makeKeyword("INSTANCE"));

    static private final SubLString $str_alt533$__Reading_Description___S__ = makeString("~&Reading Description: ~S~%");

    static private final SubLString $str_alt534$Skipping_rdf_Description_element_ = makeString("Skipping rdf:Description element.");

    static private final SubLString $str_alt535$__Reading_Restriction___S__ = makeString("~&Reading Restriction: ~S~%");

    static private final SubLString $str_alt536$Skipping_owl_Restriction_element_ = makeString("Skipping owl:Restriction element.");

    static private final SubLString $str_alt537$Reading_top_level_named_class__S = makeString("Reading top-level named class ~S");

    static private final SubLString $str_alt538$Failed_or_declined_to_read_a_clas = makeString("Failed or declined to read a class.");

    static private final SubLString $str_alt539$There_are_no_superclasses_for__S = makeString("There are no superclasses for ~S");

    static private final SubLString $str_alt540$Finished__S____Superclasses___S__ = makeString("Finished ~S.~% Superclasses: ~S.~% Disjoint classes: ~S.~% Isas: ~S.");

    static private final SubLString $str_alt541$Skipping_HTML_comment___S = makeString("Skipping HTML comment: ~S");

    static private final SubLString $str_alt542$Reading_definition_of__S = makeString("Reading definition of ~S");

    static private final SubLString $str_alt543$Skipping__S_to_close_tag = makeString("Skipping ~S to close tag");

    static private final SubLString $str_alt544$Failed_or_declined_to_read_an_ins = makeString("Failed or declined to read an instance.");

    static private final SubLString $str_alt545$Finished__S_ = makeString("Finished ~S.");

    static private final SubLString $str_alt546$__Defining__S_as_an_instance_of__ = makeString("~&Defining ~S as an instance of ~S~%");

    static private final SubLString $str_alt548$Skipping__S = makeString("Skipping ~S");

    static private final SubLString $str_alt549$Skipping_locally_defined__S_to_cl = makeString("Skipping locally-defined ~S to close tag");

    static private final SubLString $str_alt556$Read_one_intersection_element___S = makeString("Read one intersection element: ~S");

    static private final SubLString $str_alt557$Intersection___S = makeString("Intersection: ~S");

    static private final SubLString $str_alt558$Read_one_union_element___S = makeString("Read one union element: ~S");

    static private final SubLString $str_alt559$Union___S = makeString("Union: ~S");

    static private final SubLString $str_alt560$Read_enumerated_instances___S = makeString("Read enumerated instances: ~S");

    static private final SubLString $str_alt561$Couldn_t_determine_value_from__S_ = makeString("Couldn't determine value from ~S~% ~S");

    static private final SubLString $str_alt562$Apparently_anonymous_instance___S = makeString("Apparently anonymous instance: ~S");

    static private final SubLList $list_alt563 = list(makeKeyword("NONLOCAL"), list($TEST, makeSymbol("URI-P")), list($TEST, makeSymbol("STRINGP")));

    static private final SubLString $str_alt564$Reading_OWL_class_or_restriction_ = makeString("Reading OWL class or restriction starting with~% ~S");

    static private final SubLString $str_alt566$Can_t_read_class_starting_with__S = makeString("Can't read class starting with ~S");

    static private final SubLString $str_alt567$_S___is_not_the_start_of_an_OWL_r = makeString("~S~% is not the start of an OWL restriction declaration.");

    static private final SubLString $str_alt570$Read_restriction___S__S__S = makeString("Read restriction: ~S ~S ~S");

    static private final SubLString $str_alt572$Reading_restriction_property___ = makeString("Reading restriction property...");

    static private final SubLString $str_alt574$Read_restriction_property__S = makeString("Read restriction property ~S");

    static private final SubLString $str_alt576$Got_onProperty_close_tag_when_we_ = makeString("Got onProperty close tag when we weren't reading a property.");

    static private final SubLString $str_alt577$Failed_to_read_property_ = makeString("Failed to read property.");

    static private final SubLString $str_alt578$Read_datatype__S_from__S = makeString("Read datatype ~S from ~S");

    static private final SubLString $str_alt580$Read_value__S_from__S = makeString("Read value ~S from ~S");

    static private final SubLString $str_alt582$Failed_to_read_restriction_value_ = makeString("Failed to read restriction value.");

    static private final SubLString $str_alt583$Read_restriction_value__S = makeString("Read restriction value ~S");

    static private final SubLString $str_alt584$__Reading_OWL_property_starting_w = makeString("~&Reading OWL property starting with ~S~%");

    static private final SubLString $str_alt585$__Done_with__S__ = makeString("~&Done with ~S~%");

    static private final SubLList $list_alt586 = list(new SubLObject[]{ makeString("double"), makeString("integer"), makeString("int"), makeString("unsignedInt"), makeString("nonNegativeInteger"), makeString("nonPositiveInteger"), makeString("positiveInteger"), makeString("negativeInteger"), makeString("decimal"), makeString("long"), makeString("unsignedLong"), makeString("short"), makeString("unsignedShort"), makeString("float") });

    static private final SubLString $str_alt587$Can_t_parse__S_as_a__A = makeString("Can't parse ~S as a ~A");

    static private final SubLList $list_alt589 = list(makeString("true"), makeString("1"));

    static private final SubLList $list_alt591 = list(makeString("false"), makeString("0"));

    static private final SubLString $str_alt593$Couldn_t_read_boolean_value_from_ = makeString("Couldn't read boolean value from ~S");

    static private final SubLString $str_alt595$Couldn_t_parse_date_from__S = makeString("Couldn't parse date from ~S");

    static private final SubLString $str_alt598$Got_multiple_dates_from__S_____S = makeString("Got multiple dates from ~S:~% ~S");

    static private final SubLString $str_alt599$Don_t_know_how_to_parse_value_fro = makeString("Don't know how to parse value from ~S with datatype ~S");

    static private final SubLString $str_alt601$xml_ = makeString("xml:");

    static private final SubLList $list_alt605 = list(makeSymbol("ID"), makeSymbol("PROGRESS"), makeSymbol("ERROR-INFO"), makeSymbol("IMPORT-PARAMETERS"), makeSymbol("THREAD"));

    static private final SubLList $list_alt606 = list(makeKeyword("ID"), makeKeyword("PROGRESS"), makeKeyword("ERROR-INFO"), makeKeyword("IMPORT-PARAMETERS"), makeKeyword("THREAD"));

    static private final SubLList $list_alt607 = list(makeSymbol("OWL-IMP-ID"), makeSymbol("OWL-IMP-PROGRESS"), makeSymbol("OWL-IMP-ERROR-INFO"), makeSymbol("OWL-IMP-IMPORT-PARAMETERS"), makeSymbol("OWL-IMP-THREAD"));

    static private final SubLList $list_alt608 = list(makeSymbol("_CSETF-OWL-IMP-ID"), makeSymbol("_CSETF-OWL-IMP-PROGRESS"), makeSymbol("_CSETF-OWL-IMP-ERROR-INFO"), makeSymbol("_CSETF-OWL-IMP-IMPORT-PARAMETERS"), makeSymbol("_CSETF-OWL-IMP-THREAD"));

    static private final SubLString $str_alt626$_OWL_IMPORTER__D_ = makeString("<OWL-IMPORTER ~D>");

    static private final SubLString $str_alt632$http___sweet_jpl_nasa_gov_ontolog = makeString("http://sweet.jpl.nasa.gov/ontology/");

    static private final SubLList $list_alt633 = list(new SubLObject[]{ makeString("units"), makeString("time"), makeString("space"), makeString("sensor"), makeString("numerics"), makeString("phenomena"), makeString("process"), makeString("property"), makeString("substance"), makeString("material_thing"), makeString("human_activities"), makeString("data_center"), makeString("data"), makeString("biosphere"), makeString("earthrealm"), makeString("sunrealm") });

    static private final SubLString $str_alt634$http___www_w3_org_TR_owl_guide_wi = makeString("http://www.w3.org/TR/owl-guide/wine.rdf");

    static private final SubLString $str_alt635$WINE_ = makeString("WINE-");

    static private final SubLString $str_alt636$_owl = makeString(".owl");

    static private final SubLString $str_alt637$SWEET_ = makeString("SWEET-");

    static private final SubLString $str_alt638$http___reliant_teknowledge_com_DA = makeString("http://reliant.teknowledge.com/DAML/SUMO.owl");

    static private final SubLString $str_alt639$SUMO_ = makeString("SUMO-");

    static private final SubLString $str_alt640$http___open_meta_com_SUMO_owl = makeString("http://open-meta.com/SUMO.owl");

    static private final SubLString $str_alt641$http___kmf_patrick_afspc_ds_af_mi = makeString("http://kmf.patrick.afspc.ds.af.mil/KMF.owl");

    static private final SubLString $str_alt642$KMF_ = makeString("KMF-");

    static private final SubLString $str_alt643$_home_baxter_tmp_decision_support = makeString("/home/baxter/tmp/decision-support-kmf.owl");
}

/**
 * Total time: 5552 ms synthetic
 */
