/**
 * Copyright (c) 1995 - 2019 Cycorp, Inc.  All rights reserved.
 */
package com.cyc.cycjava.cycl.cyblack;

import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_question;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.charE;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.cons;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.list;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.listS;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.make_list;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.nconc;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.nth;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.rplaca;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.rplacd;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.set_nth;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.bind;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.currentBinding;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.rebind;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.sublisp_throw;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality.eq;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality.equal;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions.apply;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Locks.release_lock;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Locks.seize_lock;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.add;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.divide;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.multiply;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.numG;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.numGE;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.numL;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.numLE;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.subtract;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Packages.intern;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.PrintLow.format;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.delete;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.length;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.nreverse;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.position;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.reverse;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.symbol_function;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.symbol_name;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.symbol_package;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads.$is_thread_performing_cleanupP$;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.sublisp_null;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.values;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Vectors.aref;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Vectors.set_aref;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeBoolean;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeDouble;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeInteger;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeKeyword;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeString;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeSymbol;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeUninternedSymbol;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind.cdestructuring_bind_error;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind.destructuring_bind_must_consp;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.cadr;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.cddr;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.copy_list;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.copy_tree;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.last;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.member;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.close;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.force_output;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.get_output_stream_string;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.make_private_string_output_stream;
import static com.cyc.tool.subl.util.SubLFiles.declareFunction;
import static com.cyc.tool.subl.util.SubLFiles.defconstant;

import com.cyc.cycjava.cycl.V02;
import com.cyc.cycjava.cycl.classes;
import com.cyc.cycjava.cycl.classes_utilities;
import com.cyc.cycjava.cycl.dictionary;
import com.cyc.cycjava.cycl.dictionary_contents;
import com.cyc.cycjava.cycl.enumerations;
import com.cyc.cycjava.cycl.forts;
import com.cyc.cycjava.cycl.instances;
import com.cyc.cycjava.cycl.interfaces;
import com.cyc.cycjava.cycl.list_utilities;
import com.cyc.cycjava.cycl.methods;
import com.cyc.cycjava.cycl.object;
import com.cyc.cycjava.cycl.slots;
import com.cyc.cycjava.cycl.subloop_collections;
import com.cyc.cycjava.cycl.subloop_structures;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.CommonSymbols;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Guids;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.StreamsLow;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Strings;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLThread;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLList;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObject;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLProcess;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLString;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLFloat;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLInteger;
import com.cyc.tool.subl.jrtl.nativeCode.type.symbol.SubLSymbol;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.bytes;
import com.cyc.tool.subl.util.SubLFile;
import com.cyc.tool.subl.util.SubLTranslatedFile;

/**
 * Copyright (c) 1995 - 2019 Cycorp, Inc.  All rights reserved.
 *  module:      CYBLACK-PRECONDITION-PATTERN
 *  source file: /cyc/top/cycl/cyblack/cyblack-precondition-pattern.lisp
 *  created:     2019/07/03 17:38:45
 */
public final class cyblack_precondition_pattern extends SubLTranslatedFile implements V02 {
    // // Constructor
    private cyblack_precondition_pattern() {
    }

    public static final SubLFile me = new cyblack_precondition_pattern();

    public static final String myName = "com.cyc.cycjava.cycl.cyblack.cyblack_precondition_pattern";

    // // Definitions
    /**
     * Enumerated values of type CYBLACK-PATTERN-OPERATOR.
     */
    // defconstant
    private static final SubLSymbol $valid_cyblack_pattern_operators$ = makeSymbol("*VALID-CYBLACK-PATTERN-OPERATORS*");

    /**
     * Returns a list of all valid members of the CYBLACK-PATTERN-OPERATOR enumeration.
     */
    public static final SubLObject valid_cyblack_pattern_operators() {
	return $valid_cyblack_pattern_operators$.getGlobalValue();
    }

    /**
     * Return T iff OBJECT is a member of the CYBLACK-PATTERN-OPERATOR enumeration.
     */
    public static final SubLObject cyblack_pattern_operator_p(SubLObject v_object) {
	return NIL != member(v_object, $valid_cyblack_pattern_operators$.getGlobalValue(), UNPROVIDED, UNPROVIDED) ? ((SubLObject) (T)) : NIL;
    }

    /**
     * Maps a member of the CYBLACK-PATTERN-OPERATOR enumeration to an integer encoding.
     */
    public static final SubLObject encode_cyblack_pattern_operator(SubLObject value) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject pos = position(value, $valid_cyblack_pattern_operators$.getGlobalValue(), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (NIL == pos) {
			Errors.error(cyblack_precondition_pattern_p2.$str_alt2$_S___S_is_not_a_member_of_the__S_, ENCODE_CYBLACK_PATTERN_OPERATOR, value, CYBLACK_PATTERN_OPERATOR);
		    }
		}
		return pos;
	    }
	}
    }

    /**
     * Maps an encoded value to a member of the CYBLACK-PATTERN-OPERATOR enumeration.
     */
    public static final SubLObject decode_cyblack_pattern_operator(SubLObject value) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject element = nth(value, $valid_cyblack_pattern_operators$.getGlobalValue());
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (NIL == element) {
			Errors.error(cyblack_precondition_pattern_p2.$str_alt4$_S___S_is_not_a_valid_encoding_of, DECODE_CYBLACK_PATTERN_OPERATOR, value, CYBLACK_PATTERN_OPERATOR);
		    }
		}
		return element;
	    }
	}
    }

    /**
     * Provides a LESSP predicate for members of the CYBLACK-PATTERN-OPERATOR enumeration.
     */
    public static final SubLObject cyblack_pattern_operator_less_p(SubLObject value1, SubLObject value2) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_pattern_operator_p(value1)) {
		    Errors.error(cyblack_precondition_pattern_p2.$str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_PATTERN_OPERATOR_P, value1, CYBLACK_PATTERN_OPERATOR);
		}
	    }
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_pattern_operator_p(value2)) {
		    Errors.error(cyblack_precondition_pattern_p2.$str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_PATTERN_OPERATOR_P, value2, CYBLACK_PATTERN_OPERATOR);
		}
	    }
	    {
		SubLObject cdolist_list_var = $valid_cyblack_pattern_operators$.getGlobalValue();
		SubLObject value = NIL;
		for (value = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), value = cdolist_list_var.first()) {
		    if (value == value1) {
			return makeBoolean(value != value2);
		    } else if (value == value2) {
			return NIL;
		    }

		}
	    }
	    return NIL;
	}
    }

    /**
     * Provides a GREATERP predicate for members of the CYBLACK-PATTERN-OPERATOR enumeration.
     */
    public static final SubLObject cyblack_pattern_operator_greater_p(SubLObject value1, SubLObject value2) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_pattern_operator_p(value1)) {
		    Errors.error(cyblack_precondition_pattern_p2.$str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_PATTERN_OPERATOR_P, value1, CYBLACK_PATTERN_OPERATOR);
		}
	    }
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_pattern_operator_p(value2)) {
		    Errors.error(cyblack_precondition_pattern_p2.$str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_PATTERN_OPERATOR_P, value2, CYBLACK_PATTERN_OPERATOR);
		}
	    }
	    {
		SubLObject cdolist_list_var = $valid_cyblack_pattern_operators$.getGlobalValue();
		SubLObject value = NIL;
		for (value = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), value = cdolist_list_var.first()) {
		    if (value == value2) {
			return makeBoolean(value != value1);
		    } else if (value == value1) {
			return NIL;
		    }

		}
	    }
	    return NIL;
	}
    }

    // defconstant
    private static final SubLSymbol $cyblack_var_prefix_char$ = makeSymbol("*CYBLACK-VAR-PREFIX-CHAR*");

    // defconstant
    private static final SubLSymbol $cyblack_empty_string$ = makeSymbol("*CYBLACK-EMPTY-STRING*");

    public static final SubLObject cyblack_variable_symbol_p(SubLObject v_object) {
	if (v_object.isSymbol()) {
	    {
		SubLObject name = symbol_name(v_object);
		if (NIL != name) {
		    {
			SubLObject name_length = length(name);
			return name_length.numG(ZERO_INTEGER) ? ((SubLObject) (charE(aref(name, ZERO_INTEGER), $cyblack_var_prefix_char$.getGlobalValue()))) : NIL;
		    }
		} else {
		    return NIL;
		}
	    }
	} else {
	    return NIL;
	}
    }

    public static final SubLObject cyblack_get_variable_symbol_name(SubLObject variable_symbol) {
	{
	    SubLObject symbol_name = symbol_name(variable_symbol);
	    if (NIL != symbol_name) {
		{
		    SubLObject symbol_name_length = length(symbol_name);
		    if (symbol_name_length.numE(ONE_INTEGER)) {
			return $cyblack_empty_string$.getGlobalValue();
		    } else {
			{
			    SubLObject name = Strings.make_string(subtract(symbol_name_length, ONE_INTEGER), UNPROVIDED);
			    SubLObject cdotimes_end_var = subtract(symbol_name_length, ONE_INTEGER);
			    SubLObject i = NIL;
			    for (i = ZERO_INTEGER; i.numL(cdotimes_end_var); i = add(i, ONE_INTEGER)) {
				set_aref(name, i, aref(symbol_name, add(i, ONE_INTEGER)));
			    }
			    return name;
			}
		    }
		}
	    } else {
		return $cyblack_empty_string$.getGlobalValue();
	    }
	}
    }

    public static final SubLObject cyblack_symbol_to_cyblack_package(SubLObject symbol) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (symbol_package(symbol) == cyblack_globals.$cyblack_package$.getDynamicValue(thread)) {
		return symbol;
	    }
	    return intern(symbol_name(symbol), cyblack_globals.$cyblack_package$.getDynamicValue(thread));
	}
    }

    // defconstant
    private static final SubLSymbol $cyblack_unbound_value$ = makeSymbol("*CYBLACK-UNBOUND-VALUE*");

    public static final SubLObject cyblack_unbound_value_p(SubLObject value) {
	return eq(value, $cyblack_unbound_value$.getGlobalValue());
    }

    // defconstant
    private static final SubLSymbol $cyblack_unnamed_variable_name$ = makeSymbol("*CYBLACK-UNNAMED-VARIABLE-NAME*");

    public static final SubLObject get_cyblack_binding_value(SubLObject cyblack_binding) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_binding, THREE_INTEGER, VALUE);
    }

    public static final SubLObject set_cyblack_binding_value(SubLObject cyblack_binding, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_binding, value, THREE_INTEGER, VALUE);
    }

    public static final SubLObject get_cyblack_binding_type(SubLObject cyblack_binding) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_binding, TWO_INTEGER, TYPE);
    }

    public static final SubLObject set_cyblack_binding_type(SubLObject cyblack_binding, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_binding, value, TWO_INTEGER, TYPE);
    }

    public static final SubLObject get_cyblack_binding_variable(SubLObject cyblack_binding) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_binding, ONE_INTEGER, VARIABLE);
    }

    public static final SubLObject set_cyblack_binding_variable(SubLObject cyblack_binding, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_binding, value, ONE_INTEGER, VARIABLE);
    }

    public static final SubLObject get_cyblack_binding_apriori(SubLObject cyblack_binding) {
	{
	    SubLObject v_class = subloop_structures.instance_class(cyblack_binding);
	    SubLObject slot = slots.slot_assoc(APRIORI, subloop_structures.class_compiled_instance_boolean_slot_access_alist(v_class));
	    instances.instances_access_check_instance_slot(v_class, cyblack_binding, slot);
	}
	return classes.ldb_test(cyblack_precondition_pattern_p3.$int$4097, subloop_structures.instance_boolean_slots(cyblack_binding));
    }

    public static final SubLObject set_cyblack_binding_apriori(SubLObject cyblack_binding, SubLObject value) {
	{
	    SubLObject v_class = subloop_structures.instance_class(cyblack_binding);
	    SubLObject slot = slots.slot_assoc(APRIORI, subloop_structures.class_compiled_instance_boolean_slot_access_alist(v_class));
	    instances.instances_access_check_instance_slot(v_class, cyblack_binding, slot);
	}
	subloop_structures._csetf_instance_boolean_slots(cyblack_binding, bytes.dpb(NIL != value ? ((SubLObject) (ONE_INTEGER)) : ZERO_INTEGER, cyblack_precondition_pattern_p3.$int$4097, subloop_structures.instance_boolean_slots(cyblack_binding)));
	return value;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_binding_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_binding_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BINDING, APRIORI, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BINDING, VARIABLE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BINDING, TYPE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BINDING, VALUE, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_binding_p(SubLObject cyblack_binding) {
	return classes.subloop_instanceof_class(cyblack_binding, CYBLACK_BINDING);
    }

    public static final SubLObject cyblack_binding_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_binding_method = NIL;
	    SubLObject value = get_cyblack_binding_value(self);
	    SubLObject type = get_cyblack_binding_type(self);
	    SubLObject variable = get_cyblack_binding_variable(self);
	    SubLObject apriori = get_cyblack_binding_apriori(self);
	    try {
		try {
		    object.object_initialize_method(self);
		    variable = NIL;
		    type = NIL;
		    value = NIL;
		    apriori = NIL;
		    sublisp_throw($sym26$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_binding_value(self, value);
			    set_cyblack_binding_type(self, type);
			    set_cyblack_binding_variable(self, variable);
			    set_cyblack_binding_apriori(self, apriori);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_binding_method = Errors.handleThrowable(ccatch_env_var, $sym26$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD);
	    }
	    return catch_var_for_cyblack_binding_method;
	}
    }

    public static final SubLObject cyblack_binding_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject catch_var_for_cyblack_binding_method = NIL;
	    SubLObject value = get_cyblack_binding_value(self);
	    SubLObject type = get_cyblack_binding_type(self);
	    SubLObject variable = get_cyblack_binding_variable(self);
	    SubLObject apriori = get_cyblack_binding_apriori(self);
	    try {
		try {
		    if (NIL != apriori) {
			if (NIL != type) {
			    format(stream, cyblack_precondition_pattern_p2.$str_alt33$__S__S__S_, new SubLObject[] { variable, type, value });
			} else {
			    format(stream, cyblack_precondition_pattern_p2.$str_alt34$__S__S_, variable, value);
			}
		    } else {
			if (NIL != type) {
			    format(stream, cyblack_precondition_pattern_p2.$str_alt35$__S__S__S_, new SubLObject[] { variable, type, value });
			} else {
			    format(stream, cyblack_precondition_pattern_p2.$str_alt36$__S__S_, variable, value);
			}
		    }
		    sublisp_throw($sym32$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_binding_value(self, value);
			    set_cyblack_binding_type(self, type);
			    set_cyblack_binding_variable(self, variable);
			    set_cyblack_binding_apriori(self, apriori);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_binding_method = Errors.handleThrowable(ccatch_env_var, $sym32$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD);
	    }
	    return catch_var_for_cyblack_binding_method;
	}
    }

    public static final SubLObject cyblack_binding_clone_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_binding_method = NIL;
	    SubLObject value = get_cyblack_binding_value(self);
	    SubLObject type = get_cyblack_binding_type(self);
	    SubLObject variable = get_cyblack_binding_variable(self);
	    try {
		try {
		    {
			SubLObject new_binding = object.object_clone_method(self);
			cyblack_binding_set_variable_method(new_binding, variable);
			cyblack_binding_set_type_method(new_binding, type);
			cyblack_binding_set_value_method(new_binding, value);
			sublisp_throw($sym40$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD, new_binding);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_binding_value(self, value);
			    set_cyblack_binding_type(self, type);
			    set_cyblack_binding_variable(self, variable);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_binding_method = Errors.handleThrowable(ccatch_env_var, $sym40$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD);
	    }
	    return catch_var_for_cyblack_binding_method;
	}
    }

    public static final SubLObject cyblack_binding_unboundp_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_binding_method = NIL;
	    SubLObject value = get_cyblack_binding_value(self);
	    try {
		try {
		    sublisp_throw($sym44$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD, cyblack_unbound_value_p(value));
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_binding_value(self, value);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_binding_method = Errors.handleThrowable(ccatch_env_var, $sym44$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD);
	    }
	    return catch_var_for_cyblack_binding_method;
	}
    }

    public static final SubLObject cyblack_binding_get_value_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_binding_method = NIL;
	    SubLObject value = get_cyblack_binding_value(self);
	    try {
		try {
		    sublisp_throw($sym48$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD, value);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_binding_value(self, value);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_binding_method = Errors.handleThrowable(ccatch_env_var, $sym48$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD);
	    }
	    return catch_var_for_cyblack_binding_method;
	}
    }

    public static final SubLObject cyblack_binding_set_value_method(SubLObject self, SubLObject new_value) {
	{
	    SubLObject catch_var_for_cyblack_binding_method = NIL;
	    SubLObject value = get_cyblack_binding_value(self);
	    SubLObject type = get_cyblack_binding_type(self);
	    try {
		try {
		    if (NIL != type) {
			{
			    SubLObject posting_type = cyblack_datatype.cyblack_datatype_get_posting_type(type);
			    if (NIL != posting_type) {
			    }
			}
		    }
		    value = new_value;
		    sublisp_throw($sym53$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD, new_value);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_binding_value(self, value);
			    set_cyblack_binding_type(self, type);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_binding_method = Errors.handleThrowable(ccatch_env_var, $sym53$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD);
	    }
	    return catch_var_for_cyblack_binding_method;
	}
    }

    public static final SubLObject cyblack_binding_get_type_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_binding_method = NIL;
	    SubLObject type = get_cyblack_binding_type(self);
	    try {
		try {
		    sublisp_throw($sym57$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD, type);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_binding_type(self, type);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_binding_method = Errors.handleThrowable(ccatch_env_var, $sym57$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD);
	    }
	    return catch_var_for_cyblack_binding_method;
	}
    }

    public static final SubLObject cyblack_binding_set_type_method(SubLObject self, SubLObject new_type) {
	{
	    SubLObject catch_var_for_cyblack_binding_method = NIL;
	    SubLObject type = get_cyblack_binding_type(self);
	    try {
		try {
		    type = new_type;
		    sublisp_throw($sym62$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD, new_type);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_binding_type(self, type);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_binding_method = Errors.handleThrowable(ccatch_env_var, $sym62$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD);
	    }
	    return catch_var_for_cyblack_binding_method;
	}
    }

    public static final SubLObject cyblack_binding_has_type_p_method(SubLObject self, SubLObject some_type) {
	{
	    SubLObject catch_var_for_cyblack_binding_method = NIL;
	    SubLObject type = get_cyblack_binding_type(self);
	    try {
		try {
		    sublisp_throw($sym67$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD, NIL != type ? ((SubLObject) (cyblack_datatype.cyblack_datatype_subtype_p(type, some_type))) : NIL);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_binding_type(self, type);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_binding_method = Errors.handleThrowable(ccatch_env_var, $sym67$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD);
	    }
	    return catch_var_for_cyblack_binding_method;
	}
    }

    public static final SubLObject cyblack_binding_get_variable_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_binding_method = NIL;
	    SubLObject variable = get_cyblack_binding_variable(self);
	    try {
		try {
		    sublisp_throw($sym71$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD, variable);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_binding_variable(self, variable);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_binding_method = Errors.handleThrowable(ccatch_env_var, $sym71$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD);
	    }
	    return catch_var_for_cyblack_binding_method;
	}
    }

    public static final SubLObject cyblack_binding_set_variable_method(SubLObject self, SubLObject new_variable) {
	{
	    SubLObject catch_var_for_cyblack_binding_method = NIL;
	    SubLObject variable = get_cyblack_binding_variable(self);
	    try {
		try {
		    variable = new_variable;
		    sublisp_throw($sym76$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD, new_variable);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_binding_variable(self, variable);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_binding_method = Errors.handleThrowable(ccatch_env_var, $sym76$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD);
	    }
	    return catch_var_for_cyblack_binding_method;
	}
    }

    public static final SubLObject cyblack_binding_apriori_p_method(SubLObject self) {
	{
	    SubLObject apriori = get_cyblack_binding_apriori(self);
	    return apriori;
	}
    }

    public static final SubLObject cyblack_binding_set_apriori_method(SubLObject self, SubLObject new_value) {
	{
	    SubLObject catch_var_for_cyblack_binding_method = NIL;
	    SubLObject apriori = get_cyblack_binding_apriori(self);
	    try {
		try {
		    apriori = new_value;
		    sublisp_throw($sym84$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD, new_value);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_binding_apriori(self, apriori);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_binding_method = Errors.handleThrowable(ccatch_env_var, $sym84$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD);
	    }
	    return catch_var_for_cyblack_binding_method;
	}
    }

    public static final SubLObject cyblack_binding_listify_binding_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_binding_method = NIL;
	    SubLObject value = get_cyblack_binding_value(self);
	    SubLObject type = get_cyblack_binding_type(self);
	    SubLObject variable = get_cyblack_binding_variable(self);
	    try {
		try {
		    {
			SubLObject listified_binding = NIL;
			if (NIL != subloop_structures.instance_p(value)) {
			    listified_binding = list(variable, cyblack_datatype.cyblack_get_typename_if_not_null(type), methods.funcall_instance_method_with_0_args(value, PLISTIFY));
			} else {
			    listified_binding = list(variable, cyblack_datatype.cyblack_get_typename_if_not_null(type), value);
			}
			sublisp_throw($sym88$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD, listified_binding);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_binding_value(self, value);
			    set_cyblack_binding_type(self, type);
			    set_cyblack_binding_variable(self, variable);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_binding_method = Errors.handleThrowable(ccatch_env_var, $sym88$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD);
	    }
	    return catch_var_for_cyblack_binding_method;
	}
    }

    public static final SubLObject cyblack_create_binding(SubLObject variable, SubLObject value) {
	{
	    SubLObject new_binding = object.object_new_method(CYBLACK_BINDING);
	    cyblack_binding_set_variable_method(new_binding, variable);
	    methods.funcall_instance_method_with_1_args(new_binding, SET_VALUE, value);
	    return new_binding;
	}
    }

    public static final SubLObject cyblack_create_typed_binding(SubLObject variable, SubLObject type, SubLObject value) {
	{
	    SubLObject new_binding = object.object_new_method(CYBLACK_BINDING);
	    cyblack_binding_set_variable_method(new_binding, variable);
	    cyblack_binding_set_type_method(new_binding, type);
	    methods.funcall_instance_method_with_1_args(new_binding, SET_VALUE, value);
	    return new_binding;
	}
    }

    public static final SubLObject cyblack_print_binding_list(SubLObject cyblack_bindings, SubLObject stream) {
	if (stream == UNPROVIDED) {
	    stream = T;
	}
	format(stream, cyblack_precondition_pattern_p2.$str_alt91$CYBLACK_BINDINGS__);
	if (NIL == cyblack_bindings) {
	    format(stream, cyblack_precondition_pattern_p2.$str_alt92$_);
	} else if (NIL != list_utilities.singletonP(cyblack_bindings)) {
	    format(stream, cyblack_precondition_pattern_p2.$str_alt93$_S_, cyblack_bindings.first());
	} else {
	    format(stream, cyblack_precondition_pattern_p2.$str_alt94$_S, cyblack_bindings.first());
	    {
		SubLObject cdolist_list_var = cyblack_bindings.rest();
		SubLObject cyblack_binding = NIL;
		for (cyblack_binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), cyblack_binding = cdolist_list_var.first()) {
		    format(stream, cyblack_precondition_pattern_p2.$str_alt95$__S, cyblack_binding);
		}
	    }
	    format(stream, cyblack_precondition_pattern_p2.$str_alt92$_);
	}

	return cyblack_bindings;
    }

    public static final SubLObject cyblack_bindings_p(SubLObject v_object) {
	if (NIL == v_object) {
	    return T;
	} else if (v_object.isCons()) {
	    {
		SubLObject current_cons = v_object;
		while (current_cons.isCons()) {
		    if (NIL == cyblack_binding_p(current_cons.first())) {
			return NIL;
		    }
		    current_cons = current_cons.rest();
		}
		return T;
	    }
	} else {
	    return NIL;
	}

    }

    public static final SubLObject cyblack_type_mentioned_in_bindings_p(SubLObject binding_list, SubLObject type) {
	{
	    SubLObject cdolist_list_var = binding_list;
	    SubLObject binding = NIL;
	    for (binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), binding = cdolist_list_var.first()) {
		if (NIL != cyblack_binding_has_type_p_method(binding, type)) {
		    return T;
		}
	    }
	}
	return NIL;
    }

    public static final SubLObject cyblack_binding_assoc(SubLObject variable, SubLObject cyblack_bindings) {
	{
	    SubLObject cdolist_list_var = cyblack_bindings;
	    SubLObject cyblack_binding = NIL;
	    for (cyblack_binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), cyblack_binding = cdolist_list_var.first()) {
		if (cyblack_binding_get_variable_method(cyblack_binding) == variable) {
		    return cyblack_binding;
		}
	    }
	}
	return NIL;
    }

    public static final SubLObject cyblack_binding_rassoc(SubLObject value, SubLObject cyblack_bindings) {
	{
	    SubLObject cdolist_list_var = cyblack_bindings;
	    SubLObject cyblack_binding = NIL;
	    for (cyblack_binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), cyblack_binding = cdolist_list_var.first()) {
		if (cyblack_binding_get_value_method(cyblack_binding) == value) {
		    return cyblack_binding;
		}
	    }
	}
	return NIL;
    }

    public static final SubLObject cyblack_bindings_copy(SubLObject v_bindings) {
	{
	    SubLObject new_bindings = NIL;
	    SubLObject list_expression = v_bindings;
	    if (NIL == list_expression) {
		new_bindings = NIL;
	    } else if (list_expression.isAtom()) {
		new_bindings = list(list_expression);
	    } else if (NIL == list_expression.rest()) {
		{
		    SubLObject binding = list_expression.first();
		    new_bindings = list(cyblack_binding_clone_method(binding));
		}
	    } else {
		{
		    SubLObject tail_cons = NIL;
		    SubLObject result = NIL;
		    {
			SubLObject binding = list_expression.first();
			new_bindings = list(cyblack_binding_clone_method(binding));
			tail_cons = new_bindings;
		    }
		    {
			SubLObject cdolist_list_var = list_expression.rest();
			SubLObject binding = NIL;
			for (binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), binding = cdolist_list_var.first()) {
			    result = list(cyblack_binding_clone_method(binding));
			    rplacd(tail_cons, result);
			    tail_cons = result;
			}
		    }
		}
	    }

	    return new_bindings;
	}
    }

    public static final SubLObject get_cyblack_environment_local_bindings(SubLObject cyblack_environment) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_environment, SEVEN_INTEGER, LOCAL_BINDINGS);
    }

    public static final SubLObject set_cyblack_environment_local_bindings(SubLObject cyblack_environment, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_environment, value, SEVEN_INTEGER, LOCAL_BINDINGS);
    }

    public static final SubLObject get_cyblack_environment_outer_scope(SubLObject cyblack_environment) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_environment, SIX_INTEGER, OUTER_SCOPE);
    }

    public static final SubLObject set_cyblack_environment_outer_scope(SubLObject cyblack_environment, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_environment, value, SIX_INTEGER, OUTER_SCOPE);
    }

    public static final SubLObject get_cyblack_environment_environment_tag(SubLObject cyblack_environment) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_environment, FIVE_INTEGER, ENVIRONMENT_TAG);
    }

    public static final SubLObject set_cyblack_environment_environment_tag(SubLObject cyblack_environment, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_environment, value, FIVE_INTEGER, ENVIRONMENT_TAG);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_environment_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_environment_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_LOCKABLE, LOCK, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_LOCKABLE, OWNER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_ENVIRONMENT, ENVIRONMENT_TAG, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_ENVIRONMENT, OUTER_SCOPE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_ENVIRONMENT, LOCAL_BINDINGS, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_environment_p(SubLObject cyblack_environment) {
	return classes.subloop_instanceof_class(cyblack_environment, CYBLACK_ENVIRONMENT);
    }

    public static final SubLObject cyblack_environment_instantiate_binding_list_method(SubLObject self, SubLObject binding_list) {
	{
	    SubLObject new_instance = object.object_new_method(self);
	    SubLObject reversed_binding_list = reverse(binding_list);
	    SubLObject cdolist_list_var = reversed_binding_list;
	    SubLObject binding = NIL;
	    for (binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), binding = cdolist_list_var.first()) {
		cyblack_environment_push_typed_local_binding_method(new_instance, nth(ZERO_INTEGER, binding), nth(ONE_INTEGER, binding), nth(TWO_INTEGER, binding), UNPROVIDED);
	    }
	    return new_instance;
	}
    }

    public static final SubLObject cyblack_environment_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_environment_method = NIL;
	    SubLObject local_bindings = get_cyblack_environment_local_bindings(self);
	    SubLObject outer_scope = get_cyblack_environment_outer_scope(self);
	    SubLObject environment_tag = get_cyblack_environment_environment_tag(self);
	    try {
		try {
		    cyblack_lockable.cyblack_basic_lockable_initialize_method(self);
		    environment_tag = NIL;
		    outer_scope = NIL;
		    local_bindings = NIL;
		    sublisp_throw($sym114$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD, NIL);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_environment_local_bindings(self, local_bindings);
			    set_cyblack_environment_outer_scope(self, outer_scope);
			    set_cyblack_environment_environment_tag(self, environment_tag);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_environment_method = Errors.handleThrowable(ccatch_env_var, $sym114$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD);
	    }
	    return catch_var_for_cyblack_environment_method;
	}
    }

    public static final SubLObject cyblack_environment_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject local_bindings = get_cyblack_environment_local_bindings(self);
	    SubLObject outer_scope = get_cyblack_environment_outer_scope(self);
	    SubLObject environment_tag = get_cyblack_environment_environment_tag(self);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt117$CYBLACK_ENVIRONMENT__tag__S_local, environment_tag);
	    cyblack_print_binding_list(local_bindings, stream);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt118$_outer_scope__S_, outer_scope);
	    return self;
	}
    }

    public static final SubLObject cyblack_environment_clone_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_environment_method = NIL;
	    SubLObject local_bindings = get_cyblack_environment_local_bindings(self);
	    SubLObject outer_scope = get_cyblack_environment_outer_scope(self);
	    SubLObject environment_tag = get_cyblack_environment_environment_tag(self);
	    try {
		try {
		    {
			SubLObject new_env = object.object_clone_method(self);
			SubLObject new_local_bindings = cyblack_bindings_copy(local_bindings);
			cyblack_environment_set_local_bindings_method(new_env, new_local_bindings);
			cyblack_environment_set_outer_scope_method(new_env, NIL != outer_scope ? ((SubLObject) (cyblack_environment_clone_method(outer_scope))) : NIL);
			cyblack_environment_set_environment_tag_method(new_env, environment_tag);
			sublisp_throw($sym121$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD, new_env);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_environment_local_bindings(self, local_bindings);
			    set_cyblack_environment_outer_scope(self, outer_scope);
			    set_cyblack_environment_environment_tag(self, environment_tag);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_environment_method = Errors.handleThrowable(ccatch_env_var, $sym121$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD);
	    }
	    return catch_var_for_cyblack_environment_method;
	}
    }

    public static final SubLObject cyblack_environment_get_environment_tag_method(SubLObject self) {
	{
	    SubLObject environment_tag = get_cyblack_environment_environment_tag(self);
	    return environment_tag;
	}
    }

    public static final SubLObject cyblack_environment_set_environment_tag_method(SubLObject self, SubLObject new_tag) {
	{
	    SubLObject catch_var_for_cyblack_environment_method = NIL;
	    SubLObject environment_tag = get_cyblack_environment_environment_tag(self);
	    try {
		try {
		    environment_tag = new_tag;
		    sublisp_throw($sym129$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD, new_tag);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_environment_environment_tag(self, environment_tag);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_environment_method = Errors.handleThrowable(ccatch_env_var, $sym129$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD);
	    }
	    return catch_var_for_cyblack_environment_method;
	}
    }

    public static final SubLObject cyblack_environment_get_outer_scope_method(SubLObject self) {
	{
	    SubLObject outer_scope = get_cyblack_environment_outer_scope(self);
	    return outer_scope;
	}
    }

    public static final SubLObject cyblack_environment_set_outer_scope_method(SubLObject self, SubLObject new_outer_scope) {
	{
	    SubLObject catch_var_for_cyblack_environment_method = NIL;
	    SubLObject outer_scope = get_cyblack_environment_outer_scope(self);
	    try {
		try {
		    outer_scope = new_outer_scope;
		    sublisp_throw($sym137$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD, new_outer_scope);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_environment_outer_scope(self, outer_scope);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_environment_method = Errors.handleThrowable(ccatch_env_var, $sym137$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD);
	    }
	    return catch_var_for_cyblack_environment_method;
	}
    }

    public static final SubLObject cyblack_environment_get_local_bindings_method(SubLObject self) {
	{
	    SubLObject local_bindings = get_cyblack_environment_local_bindings(self);
	    return local_bindings;
	}
    }

    public static final SubLObject cyblack_environment_set_local_bindings_method(SubLObject self, SubLObject new_local_bindings) {
	{
	    SubLObject catch_var_for_cyblack_environment_method = NIL;
	    SubLObject local_bindings = get_cyblack_environment_local_bindings(self);
	    try {
		try {
		    local_bindings = new_local_bindings;
		    sublisp_throw($sym145$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD, new_local_bindings);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_environment_local_bindings(self, local_bindings);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_environment_method = Errors.handleThrowable(ccatch_env_var, $sym145$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD);
	    }
	    return catch_var_for_cyblack_environment_method;
	}
    }

    public static final SubLObject cyblack_environment_get_local_unbound_bindings_method(SubLObject self) {
	{
	    SubLObject local_bindings = get_cyblack_environment_local_bindings(self);
	    SubLObject unbound_local_bindings = NIL;
	    SubLObject list_expression = local_bindings;
	    if (NIL == list_expression) {
		unbound_local_bindings = NIL;
	    } else if (list_expression.isAtom()) {
		unbound_local_bindings = list(list_expression);
	    } else if (NIL == list_expression.rest()) {
		{
		    SubLObject binding = list_expression.first();
		    unbound_local_bindings = (NIL != cyblack_binding_unboundp_method(binding)) ? ((SubLObject) (list(binding))) : NIL;
		}
	    } else {
		{
		    SubLObject tail_cons = NIL;
		    SubLObject result = NIL;
		    unbound_local_bindings = NIL;
		    {
			SubLObject cdolist_list_var = list_expression;
			SubLObject binding = NIL;
			for (binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), binding = cdolist_list_var.first()) {
			    result = (NIL != cyblack_binding_unboundp_method(binding)) ? ((SubLObject) (list(binding))) : NIL;
			    if (NIL != result) {
				if (NIL != tail_cons) {
				    rplacd(tail_cons, result);
				    tail_cons = last(result, UNPROVIDED);
				} else {
				    unbound_local_bindings = (NIL != cyblack_binding_unboundp_method(binding)) ? ((SubLObject) (list(binding))) : NIL;
				    tail_cons = last(unbound_local_bindings, UNPROVIDED);
				}
			    }
			}
		    }
		}
	    }

	    return unbound_local_bindings;
	}
    }

    public static final SubLObject cyblack_environment_push_local_binding_method(SubLObject self, SubLObject variable, SubLObject value, SubLObject apriori_p) {
	if (value == UNPROVIDED) {
	    value = $cyblack_unbound_value$.getGlobalValue();
	}
	if (apriori_p == UNPROVIDED) {
	    apriori_p = NIL;
	}
	{
	    SubLObject catch_var_for_cyblack_environment_method = NIL;
	    SubLObject local_bindings = get_cyblack_environment_local_bindings(self);
	    try {
		try {
		    {
			SubLObject new_binding = cyblack_create_binding(variable, value);
			cyblack_binding_set_apriori_method(new_binding, apriori_p);
			local_bindings = cons(new_binding, local_bindings);
			sublisp_throw($sym153$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD, value);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_environment_local_bindings(self, local_bindings);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_environment_method = Errors.handleThrowable(ccatch_env_var, $sym153$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD);
	    }
	    return catch_var_for_cyblack_environment_method;
	}
    }

    public static final SubLObject cyblack_environment_push_typed_local_binding_method(SubLObject self, SubLObject variable, SubLObject type, SubLObject value, SubLObject apriori_p) {
	if (value == UNPROVIDED) {
	    value = $cyblack_unbound_value$.getGlobalValue();
	}
	if (apriori_p == UNPROVIDED) {
	    apriori_p = NIL;
	}
	{
	    SubLObject catch_var_for_cyblack_environment_method = NIL;
	    SubLObject local_bindings = get_cyblack_environment_local_bindings(self);
	    try {
		try {
		    {
			SubLObject new_binding = cyblack_create_typed_binding(variable, type, value);
			cyblack_binding_set_apriori_method(new_binding, apriori_p);
			local_bindings = cons(new_binding, local_bindings);
			sublisp_throw($sym158$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD, value);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_environment_local_bindings(self, local_bindings);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_environment_method = Errors.handleThrowable(ccatch_env_var, $sym158$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD);
	    }
	    return catch_var_for_cyblack_environment_method;
	}
    }

    public static final SubLObject cyblack_environment_pop_local_binding_method(SubLObject self, SubLObject variable) {
	{
	    SubLObject catch_var_for_cyblack_environment_method = NIL;
	    SubLObject local_bindings = get_cyblack_environment_local_bindings(self);
	    try {
		try {
		    local_bindings = delete(variable, local_bindings, symbol_function(EQ), CYBLACK_BINDING_GET_VARIABLE_METHOD, ZERO_INTEGER, NIL, ONE_INTEGER);
		    sublisp_throw($sym163$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD, variable);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_environment_local_bindings(self, local_bindings);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_environment_method = Errors.handleThrowable(ccatch_env_var, $sym163$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD);
	    }
	    return catch_var_for_cyblack_environment_method;
	}
    }

    public static final SubLObject cyblack_environment_get_binding_method(SubLObject self, SubLObject variable) {
	{
	    SubLObject local_bindings = get_cyblack_environment_local_bindings(self);
	    SubLObject outer_scope = get_cyblack_environment_outer_scope(self);
	    SubLObject existing_binding = cyblack_binding_assoc(variable, local_bindings);
	    if (NIL != existing_binding) {
		return existing_binding;
	    }
	    if (NIL != outer_scope) {
		return cyblack_environment_get_binding_method(outer_scope, variable);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_environment_get_binding_by_value_method(SubLObject self, SubLObject value) {
	{
	    SubLObject local_bindings = get_cyblack_environment_local_bindings(self);
	    SubLObject outer_scope = get_cyblack_environment_outer_scope(self);
	    SubLObject existing_binding = cyblack_binding_rassoc(value, local_bindings);
	    if (NIL != existing_binding) {
		return existing_binding;
	    }
	    if (NIL != outer_scope) {
		return cyblack_environment_get_binding_by_value_method(outer_scope, value);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_environment_get_method(SubLObject self, SubLObject variable, SubLObject v_default) {
	if (v_default == UNPROVIDED) {
	    v_default = $cyblack_unbound_value$.getGlobalValue();
	}
	{
	    SubLObject local_bindings = get_cyblack_environment_local_bindings(self);
	    SubLObject outer_scope = get_cyblack_environment_outer_scope(self);
	    SubLObject existing_binding = cyblack_binding_assoc(variable, local_bindings);
	    if (NIL != existing_binding) {
		return cyblack_binding_get_value_method(existing_binding);
	    }
	    if (NIL != outer_scope) {
		return cyblack_environment_get_method(outer_scope, variable, UNPROVIDED);
	    }
	    return v_default;
	}
    }

    public static final SubLObject cyblack_environment_set_method(SubLObject self, SubLObject variable, SubLObject value) {
	{
	    SubLObject catch_var_for_cyblack_environment_method = NIL;
	    SubLObject local_bindings = get_cyblack_environment_local_bindings(self);
	    SubLObject outer_scope = get_cyblack_environment_outer_scope(self);
	    try {
		try {
		    {
			SubLObject existing_binding = cyblack_binding_assoc(variable, local_bindings);
			if (NIL != existing_binding) {
			    cyblack_binding_set_value_method(existing_binding, value);
			    sublisp_throw($sym179$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD, value);
			}
			if (NIL != outer_scope) {
			    sublisp_throw($sym179$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD, cyblack_environment_set_method(outer_scope, variable, value));
			}
			sublisp_throw($sym179$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD, $cyblack_unbound_value$.getGlobalValue());
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_environment_local_bindings(self, local_bindings);
			    set_cyblack_environment_outer_scope(self, outer_scope);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_environment_method = Errors.handleThrowable(ccatch_env_var, $sym179$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD);
	    }
	    return catch_var_for_cyblack_environment_method;
	}
    }

    public static final SubLObject cyblack_environment_get_local_method(SubLObject self, SubLObject variable) {
	{
	    SubLObject local_bindings = get_cyblack_environment_local_bindings(self);
	    SubLObject existing_binding = cyblack_binding_assoc(variable, local_bindings);
	    if (NIL != existing_binding) {
		return cyblack_binding_get_value_method(existing_binding);
	    }
	    return $cyblack_unbound_value$.getGlobalValue();
	}
    }

    public static final SubLObject cyblack_environment_set_local_method(SubLObject self, SubLObject variable, SubLObject value) {
	{
	    SubLObject catch_var_for_cyblack_environment_method = NIL;
	    SubLObject local_bindings = get_cyblack_environment_local_bindings(self);
	    try {
		try {
		    {
			SubLObject existing_binding = cyblack_binding_assoc(variable, local_bindings);
			if (NIL != existing_binding) {
			    cyblack_binding_set_value_method(existing_binding, value);
			    sublisp_throw($sym186$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD, value);
			}
			sublisp_throw($sym186$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD, $cyblack_unbound_value$.getGlobalValue());
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_environment_local_bindings(self, local_bindings);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_environment_method = Errors.handleThrowable(ccatch_env_var, $sym186$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD);
	    }
	    return catch_var_for_cyblack_environment_method;
	}
    }

    public static final SubLObject cyblack_environment_push_frame_method(SubLObject self, SubLObject new_tag) {
	if (new_tag == UNPROVIDED) {
	    new_tag = NIL;
	}
	return cyblack_new_environment(self, new_tag);
    }

    public static final SubLObject cyblack_environment_pop_frame_method(SubLObject self) {
	{
	    SubLObject outer_scope = get_cyblack_environment_outer_scope(self);
	    return outer_scope;
	}
    }

    public static final SubLObject cyblack_environment_pop_frame_to_method(SubLObject self, SubLObject target_tag) {
	{
	    SubLObject catch_var_for_cyblack_environment_method = NIL;
	    SubLObject outer_scope = get_cyblack_environment_outer_scope(self);
	    SubLObject environment_tag = get_cyblack_environment_environment_tag(self);
	    try {
		try {
		    if (target_tag == environment_tag) {
			sublisp_throw($sym198$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD, self);
		    }
		    sublisp_throw($sym198$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD, cyblack_environment_pop_frame_to_method(outer_scope, target_tag));
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_environment_outer_scope(self, outer_scope);
			    set_cyblack_environment_environment_tag(self, environment_tag);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_environment_method = Errors.handleThrowable(ccatch_env_var, $sym198$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD);
	    }
	    return catch_var_for_cyblack_environment_method;
	}
    }

    public static final SubLObject cyblack_environment_top_frame_method(SubLObject self) {
	{
	    SubLObject outer_scope = get_cyblack_environment_outer_scope(self);
	    if (NIL != outer_scope) {
		return cyblack_environment_top_frame_method(outer_scope);
	    }
	    return self;
	}
    }

    public static final SubLObject cyblack_environment_listify_local_bindings_method(SubLObject self) {
	{
	    SubLObject local_bindings = get_cyblack_environment_local_bindings(self);
	    SubLObject lock = cyblack_lockable.get_cyblack_basic_lockable_lock(self);
	    SubLObject listed_local_bindings = NIL;
	    SubLObject lock_1 = lock;
	    SubLObject release = NIL;
	    try {
		release = seize_lock(lock_1);
		{
		    SubLObject list_expression = local_bindings;
		    if (NIL == list_expression) {
			listed_local_bindings = NIL;
		    } else if (list_expression.isAtom()) {
			listed_local_bindings = list(list_expression);
		    } else if (NIL == list_expression.rest()) {
			{
			    SubLObject binding = list_expression.first();
			    listed_local_bindings = list(cyblack_binding_listify_binding_method(binding));
			}
		    } else {
			{
			    SubLObject tail_cons = NIL;
			    SubLObject result = NIL;
			    {
				SubLObject binding = list_expression.first();
				listed_local_bindings = list(cyblack_binding_listify_binding_method(binding));
				tail_cons = listed_local_bindings;
			    }
			    {
				SubLObject cdolist_list_var = list_expression.rest();
				SubLObject binding = NIL;
				for (binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), binding = cdolist_list_var.first()) {
				    result = list(cyblack_binding_listify_binding_method(binding));
				    rplacd(tail_cons, result);
				    tail_cons = result;
				}
			    }
			}
		    }

		}
	    } finally {
		if (NIL != release) {
		    release_lock(lock_1);
		}
	    }
	    return listed_local_bindings;
	}
    }

    public static final SubLObject cyblack_environment_get_unique_local_bindings_method(SubLObject self) {
	{
	    SubLObject local_bindings = get_cyblack_environment_local_bindings(self);
	    SubLObject unique_local_bindings = NIL;
	    SubLObject list_expression = local_bindings;
	    if (NIL == list_expression) {
		unique_local_bindings = NIL;
	    } else if (list_expression.isAtom()) {
		unique_local_bindings = list(list_expression);
	    } else if (NIL == list_expression.rest()) {
		{
		    SubLObject binding = list_expression.first();
		    unique_local_bindings = (NIL != cyblack_binding_assoc(get_cyblack_binding_variable(binding), unique_local_bindings)) ? ((SubLObject) (NIL)) : list(binding);
		}
	    } else {
		{
		    SubLObject tail_cons = NIL;
		    SubLObject result = NIL;
		    unique_local_bindings = NIL;
		    {
			SubLObject cdolist_list_var = list_expression;
			SubLObject binding = NIL;
			for (binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), binding = cdolist_list_var.first()) {
			    result = (NIL != cyblack_binding_assoc(get_cyblack_binding_variable(binding), unique_local_bindings)) ? ((SubLObject) (NIL)) : list(binding);
			    if (NIL != result) {
				if (NIL != tail_cons) {
				    rplacd(tail_cons, result);
				    tail_cons = last(result, UNPROVIDED);
				} else {
				    unique_local_bindings = (NIL != cyblack_binding_assoc(get_cyblack_binding_variable(binding), unique_local_bindings)) ? ((SubLObject) (NIL)) : list(binding);
				    tail_cons = last(unique_local_bindings, UNPROVIDED);
				}
			    }
			}
		    }
		}
	    }

	    return unique_local_bindings;
	}
    }

    public static final SubLObject cyblack_environment_get_unique_bindings_method(SubLObject self, SubLObject outermost_scope_tag) {
	if (outermost_scope_tag == UNPROVIDED) {
	    outermost_scope_tag = $cyblack_unbound_value$.getGlobalValue();
	}
	{
	    SubLObject catch_var_for_cyblack_environment_method = NIL;
	    SubLObject lock = cyblack_lockable.get_cyblack_basic_lockable_lock(self);
	    try {
		try {
		    {
			SubLObject unique_bindings = NIL;
			SubLObject current_environment = self;
			SubLObject lock_2 = lock;
			SubLObject release = NIL;
			try {
			    release = seize_lock(lock_2);
			    while ((NIL != current_environment) && (cyblack_environment_get_environment_tag_method(current_environment) != outermost_scope_tag)) {
				{
				    SubLObject cdolist_list_var = cyblack_environment_get_local_bindings_method(current_environment);
				    SubLObject binding = NIL;
				    for (binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), binding = cdolist_list_var.first()) {
					if (NIL == cyblack_binding_assoc(get_cyblack_binding_variable(binding), unique_bindings)) {
					    unique_bindings = cons(binding, unique_bindings);
					}
				    }
				}
				current_environment = cyblack_environment_get_outer_scope_method(current_environment);
			    }
			} finally {
			    if (NIL != release) {
				release_lock(lock_2);
			    }
			}
			sublisp_throw($sym212$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD, nreverse(unique_bindings));
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    cyblack_lockable.set_cyblack_basic_lockable_lock(self, lock);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_environment_method = Errors.handleThrowable(ccatch_env_var, $sym212$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD);
	    }
	    return catch_var_for_cyblack_environment_method;
	}
    }

    public static final SubLObject cyblack_environment_get_unique_non_apriori_bindings_method(SubLObject self, SubLObject outermost_scope_tag) {
	if (outermost_scope_tag == UNPROVIDED) {
	    outermost_scope_tag = $cyblack_unbound_value$.getGlobalValue();
	}
	{
	    SubLObject catch_var_for_cyblack_environment_method = NIL;
	    SubLObject lock = cyblack_lockable.get_cyblack_basic_lockable_lock(self);
	    try {
		try {
		    {
			SubLObject unique_bindings = NIL;
			SubLObject current_environment = self;
			SubLObject lock_3 = lock;
			SubLObject release = NIL;
			try {
			    release = seize_lock(lock_3);
			    while ((NIL != current_environment) && (cyblack_environment_get_environment_tag_method(current_environment) != outermost_scope_tag)) {
				{
				    SubLObject cdolist_list_var = cyblack_environment_get_local_bindings_method(current_environment);
				    SubLObject binding = NIL;
				    for (binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), binding = cdolist_list_var.first()) {
					if (!((NIL != cyblack_binding_apriori_p_method(binding)) || (NIL != cyblack_binding_assoc(get_cyblack_binding_variable(binding), unique_bindings)))) {
					    unique_bindings = cons(binding, unique_bindings);
					}
				    }
				}
				current_environment = cyblack_environment_get_outer_scope_method(current_environment);
			    }
			} finally {
			    if (NIL != release) {
				release_lock(lock_3);
			    }
			}
			sublisp_throw($sym216$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD, nreverse(unique_bindings));
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    cyblack_lockable.set_cyblack_basic_lockable_lock(self, lock);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_environment_method = Errors.handleThrowable(ccatch_env_var, $sym216$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD);
	    }
	    return catch_var_for_cyblack_environment_method;
	}
    }

    public static final SubLObject cyblack_environment_get_unique_local_unbound_bindings_method(SubLObject self) {
	{
	    SubLObject unique_local_bindings = NIL;
	    SubLObject list_expression = cyblack_environment_get_local_unbound_bindings_method(self);
	    if (NIL == list_expression) {
		unique_local_bindings = NIL;
	    } else if (list_expression.isAtom()) {
		unique_local_bindings = list(list_expression);
	    } else if (NIL == list_expression.rest()) {
		{
		    SubLObject binding = list_expression.first();
		    unique_local_bindings = (NIL != cyblack_binding_assoc(get_cyblack_binding_variable(binding), unique_local_bindings)) ? ((SubLObject) (NIL)) : list(binding);
		}
	    } else {
		{
		    SubLObject tail_cons = NIL;
		    SubLObject result = NIL;
		    unique_local_bindings = NIL;
		    {
			SubLObject cdolist_list_var = list_expression;
			SubLObject binding = NIL;
			for (binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), binding = cdolist_list_var.first()) {
			    result = (NIL != cyblack_binding_assoc(get_cyblack_binding_variable(binding), unique_local_bindings)) ? ((SubLObject) (NIL)) : list(binding);
			    if (NIL != result) {
				if (NIL != tail_cons) {
				    rplacd(tail_cons, result);
				    tail_cons = last(result, UNPROVIDED);
				} else {
				    unique_local_bindings = (NIL != cyblack_binding_assoc(get_cyblack_binding_variable(binding), unique_local_bindings)) ? ((SubLObject) (NIL)) : list(binding);
				    tail_cons = last(unique_local_bindings, UNPROVIDED);
				}
			    }
			}
		    }
		}
	    }

	    return unique_local_bindings;
	}
    }

    public static final SubLObject cyblack_environment_get_unique_unbound_bindings_method(SubLObject self, SubLObject outermost_scope_tag) {
	if (outermost_scope_tag == UNPROVIDED) {
	    outermost_scope_tag = $cyblack_unbound_value$.getGlobalValue();
	}
	{
	    SubLObject catch_var_for_cyblack_environment_method = NIL;
	    SubLObject lock = cyblack_lockable.get_cyblack_basic_lockable_lock(self);
	    try {
		try {
		    {
			SubLObject unique_bindings = NIL;
			SubLObject current_environment = self;
			SubLObject current_value = NIL;
			SubLObject lock_4 = lock;
			SubLObject release = NIL;
			try {
			    release = seize_lock(lock_4);
			    while ((NIL != current_environment) && (cyblack_environment_get_environment_tag_method(current_environment) != outermost_scope_tag)) {
				{
				    SubLObject cdolist_list_var = cyblack_environment_get_local_bindings_method(current_environment);
				    SubLObject binding = NIL;
				    for (binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), binding = cdolist_list_var.first()) {
					current_value = get_cyblack_binding_value(binding);
					if (!(((NIL != current_value) && (NIL == cyblack_unbound_value_p(current_value))) || (NIL != cyblack_binding_assoc(get_cyblack_binding_variable(binding), unique_bindings)))) {
					    unique_bindings = cons(binding, unique_bindings);
					}
				    }
				}
				current_environment = cyblack_environment_get_outer_scope_method(current_environment);
			    }
			} finally {
			    if (NIL != release) {
				release_lock(lock_4);
			    }
			}
			sublisp_throw($sym223$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD, nreverse(unique_bindings));
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    cyblack_lockable.set_cyblack_basic_lockable_lock(self, lock);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_environment_method = Errors.handleThrowable(ccatch_env_var, $sym223$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD);
	    }
	    return catch_var_for_cyblack_environment_method;
	}
    }

    public static final SubLObject cyblack_environment_listify_unique_bindings_method(SubLObject self) {
	{
	    SubLObject lock = cyblack_lockable.get_cyblack_basic_lockable_lock(self);
	    SubLObject unique_bindings = cyblack_environment_get_unique_bindings_method(self, UNPROVIDED);
	    SubLObject listed_unique_bindings = NIL;
	    SubLObject lock_5 = lock;
	    SubLObject release = NIL;
	    try {
		release = seize_lock(lock_5);
		{
		    SubLObject list_expression = unique_bindings;
		    if (NIL == list_expression) {
			listed_unique_bindings = NIL;
		    } else if (list_expression.isAtom()) {
			listed_unique_bindings = list(list_expression);
		    } else if (NIL == list_expression.rest()) {
			{
			    SubLObject binding = list_expression.first();
			    listed_unique_bindings = list(cyblack_binding_listify_binding_method(binding));
			}
		    } else {
			{
			    SubLObject tail_cons = NIL;
			    SubLObject result = NIL;
			    {
				SubLObject binding = list_expression.first();
				listed_unique_bindings = list(cyblack_binding_listify_binding_method(binding));
				tail_cons = listed_unique_bindings;
			    }
			    {
				SubLObject cdolist_list_var = list_expression.rest();
				SubLObject binding = NIL;
				for (binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), binding = cdolist_list_var.first()) {
				    result = list(cyblack_binding_listify_binding_method(binding));
				    rplacd(tail_cons, result);
				    tail_cons = result;
				}
			    }
			}
		    }

		}
	    } finally {
		if (NIL != release) {
		    release_lock(lock_5);
		}
	    }
	    return listed_unique_bindings;
	}
    }

    public static final SubLObject create_top_level_environment(SubLObject tag, SubLObject variable, SubLObject type, SubLObject value) {
	if (variable == UNPROVIDED) {
	    variable = NIL;
	}
	if (type == UNPROVIDED) {
	    type = NIL;
	}
	if (value == UNPROVIDED) {
	    value = NIL;
	}
	{
	    SubLObject environment = object.new_object_instance(CYBLACK_ENVIRONMENT);
	    cyblack_environment_set_environment_tag_method(environment, tag);
	    if (((NIL != variable) && (NIL != type)) && (NIL != value)) {
		cyblack_environment_push_typed_local_binding_method(environment, variable, type, value, T);
	    }
	    return environment;
	}
    }

    public static final SubLObject cyblack_environment_parse_binding_list(SubLObject v_dictionary, SubLObject binding_list) {
	{
	    SubLObject environment = object.object_new_method(CYBLACK_ENVIRONMENT);
	    SubLObject variable = NIL;
	    SubLObject unparsed_datatype = NIL;
	    SubLObject datatype = NIL;
	    SubLObject cdolist_list_var = binding_list;
	    SubLObject binding_pair = NIL;
	    for (binding_pair = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), binding_pair = cdolist_list_var.first()) {
		variable = binding_pair.first();
		unparsed_datatype = cadr(binding_pair);
		if (NIL != cyblack_datatype.cyblack_datatype_p(unparsed_datatype)) {
		    datatype = unparsed_datatype;
		} else {
		    datatype = methods.funcall_instance_method_with_1_args(v_dictionary, INTERN, unparsed_datatype);
		}
		cyblack_environment_push_typed_local_binding_method(environment, cyblack_symbol_to_cyblack_package(variable), datatype, UNPROVIDED, UNPROVIDED);
	    }
	    return environment;
	}
    }

    public static final SubLObject cyblack_listify_environments(SubLObject cyblack_environments) {
	if (NIL != cyblack_environments) {
	    {
		SubLObject listifed_environments = NIL;
		SubLObject list_expression = cyblack_environments;
		if (NIL == list_expression) {
		    listifed_environments = NIL;
		} else if (list_expression.isAtom()) {
		    listifed_environments = list(list_expression);
		} else if (NIL == list_expression.rest()) {
		    {
			SubLObject environment = list_expression.first();
			listifed_environments = (NIL != cyblack_environment_p(environment)) ? ((SubLObject) (list(cyblack_environment_listify_unique_bindings_method(environment)))) : NIL;
		    }
		} else {
		    {
			SubLObject tail_cons = NIL;
			SubLObject result = NIL;
			listifed_environments = NIL;
			{
			    SubLObject cdolist_list_var = list_expression;
			    SubLObject environment = NIL;
			    for (environment = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), environment = cdolist_list_var.first()) {
				result = (NIL != cyblack_environment_p(environment)) ? ((SubLObject) (list(cyblack_environment_listify_unique_bindings_method(environment)))) : NIL;
				if (NIL != result) {
				    if (NIL != tail_cons) {
					rplacd(tail_cons, result);
					tail_cons = last(result, UNPROVIDED);
				    } else {
					listifed_environments = (NIL != cyblack_environment_p(environment)) ? ((SubLObject) (list(cyblack_environment_listify_unique_bindings_method(environment)))) : NIL;
					tail_cons = last(listifed_environments, UNPROVIDED);
				    }
				}
			    }
			}
		    }
		}

		return listifed_environments;
	    }
	}
	return NIL;
    }

    public static final SubLObject cyblack_listify_local_environments(SubLObject cyblack_environments) {
	if (NIL != cyblack_environments) {
	    {
		SubLObject listifed_environments = NIL;
		SubLObject list_expression = cyblack_environments;
		if (NIL == list_expression) {
		    listifed_environments = NIL;
		} else if (list_expression.isAtom()) {
		    listifed_environments = list(list_expression);
		} else if (NIL == list_expression.rest()) {
		    {
			SubLObject environment = list_expression.first();
			listifed_environments = (NIL != cyblack_environment_p(environment)) ? ((SubLObject) (list(cyblack_environment_listify_local_bindings_method(environment)))) : NIL;
		    }
		} else {
		    {
			SubLObject tail_cons = NIL;
			SubLObject result = NIL;
			listifed_environments = NIL;
			{
			    SubLObject cdolist_list_var = list_expression;
			    SubLObject environment = NIL;
			    for (environment = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), environment = cdolist_list_var.first()) {
				result = (NIL != cyblack_environment_p(environment)) ? ((SubLObject) (list(cyblack_environment_listify_local_bindings_method(environment)))) : NIL;
				if (NIL != result) {
				    if (NIL != tail_cons) {
					rplacd(tail_cons, result);
					tail_cons = last(result, UNPROVIDED);
				    } else {
					listifed_environments = (NIL != cyblack_environment_p(environment)) ? ((SubLObject) (list(cyblack_environment_listify_local_bindings_method(environment)))) : NIL;
					tail_cons = last(listifed_environments, UNPROVIDED);
				    }
				}
			    }
			}
		    }
		}

		return listifed_environments;
	    }
	}
	return NIL;
    }

    public static final SubLObject cyblack_new_environment(SubLObject outer_scope, SubLObject tag) {
	if (outer_scope == UNPROVIDED) {
	    outer_scope = NIL;
	}
	if (tag == UNPROVIDED) {
	    tag = NIL;
	}
	{
	    SubLObject new_environment = object.object_new_method(CYBLACK_ENVIRONMENT);
	    cyblack_environment_set_environment_tag_method(new_environment, tag);
	    cyblack_environment_set_outer_scope_method(new_environment, outer_scope);
	    return new_environment;
	}
    }

    public static final SubLObject cyblack_value_expressions_p(SubLObject v_object) {
	if (NIL == v_object) {
	    return T;
	}
	if (v_object.isAtom()) {
	    return NIL;
	}
	{
	    SubLObject current_cons = v_object;
	    while (current_cons.isCons()) {
		if (NIL == cyblack_value_expression_p(current_cons)) {
		    return NIL;
		}
		current_cons = current_cons.rest();
	    }
	    if (NIL == current_cons) {
		return T;
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_value_expression_p(SubLObject cyblack_value_expression) {
	return interfaces.subloop_instanceof_interface(cyblack_value_expression, CYBLACK_VALUE_EXPRESSION);
    }

    public static final SubLObject cyblack_logical_expression_p(SubLObject cyblack_logical_expression) {
	return interfaces.subloop_instanceof_interface(cyblack_logical_expression, CYBLACK_LOGICAL_EXPRESSION);
    }

    public static final SubLObject get_cyblack_pattern_unparsed_pattern(SubLObject cyblack_pattern) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_pattern, THREE_INTEGER, UNPARSED_PATTERN);
    }

    public static final SubLObject set_cyblack_pattern_unparsed_pattern(SubLObject cyblack_pattern, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_pattern, value, THREE_INTEGER, UNPARSED_PATTERN);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_pattern_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_pattern_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_pattern_p(SubLObject cyblack_pattern) {
	return classes.subloop_instanceof_class(cyblack_pattern, CYBLACK_PATTERN);
    }

    public static final SubLObject cyblack_pattern_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_pattern_method = NIL;
	    SubLObject unparsed_pattern = get_cyblack_pattern_unparsed_pattern(self);
	    try {
		try {
		    cyblack_object.cyblack_object_initialize_method(self);
		    unparsed_pattern = NIL;
		    sublisp_throw($sym238$OUTER_CATCH_FOR_CYBLACK_PATTERN_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_unparsed_pattern(self, unparsed_pattern);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_pattern_method = Errors.handleThrowable(ccatch_env_var, $sym238$OUTER_CATCH_FOR_CYBLACK_PATTERN_METHOD);
	    }
	    return catch_var_for_cyblack_pattern_method;
	}
    }

    public static final SubLObject cyblack_pattern_get_unparsed_pattern_method(SubLObject self) {
	{
	    SubLObject unparsed_pattern = get_cyblack_pattern_unparsed_pattern(self);
	    return unparsed_pattern;
	}
    }

    public static final SubLObject cyblack_pattern_set_unparsed_pattern_method(SubLObject self, SubLObject new_unparsed_pattern) {
	{
	    SubLObject catch_var_for_cyblack_pattern_method = NIL;
	    SubLObject unparsed_pattern = get_cyblack_pattern_unparsed_pattern(self);
	    try {
		try {
		    unparsed_pattern = new_unparsed_pattern;
		    sublisp_throw($sym246$OUTER_CATCH_FOR_CYBLACK_PATTERN_METHOD, new_unparsed_pattern);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_unparsed_pattern(self, unparsed_pattern);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_pattern_method = Errors.handleThrowable(ccatch_env_var, $sym246$OUTER_CATCH_FOR_CYBLACK_PATTERN_METHOD);
	    }
	    return catch_var_for_cyblack_pattern_method;
	}
    }

    public static final SubLObject cyblack_pattern_get_datatype_bag_method(SubLObject self) {
	{
	    SubLObject v_bag = object.object_new_method(BASIC_BAG);
	    methods.funcall_instance_method_with_1_args(self, TRAVERSE_FILLING_DATATYPE_BAG, v_bag);
	    return v_bag;
	}
    }

    public static final SubLObject cyblack_pattern_traverse_filling_datatype_bag_method(SubLObject self, SubLObject v_bag) {
	return v_bag;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_posting_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_posting_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_posting_expression_p(SubLObject cyblack_posting_expression) {
	return classes.subloop_instanceof_class(cyblack_posting_expression, CYBLACK_POSTING_EXPRESSION);
    }

    public static final SubLObject get_cyblack_variable_reference_variable(SubLObject cyblack_variable_reference) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_variable_reference, FOUR_INTEGER, VARIABLE);
    }

    public static final SubLObject set_cyblack_variable_reference_variable(SubLObject cyblack_variable_reference, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_variable_reference, value, FOUR_INTEGER, VARIABLE);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_variable_reference_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_variable_reference_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_VARIABLE_REFERENCE, VARIABLE, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_variable_reference_p(SubLObject cyblack_variable_reference) {
	return classes.subloop_instanceof_class(cyblack_variable_reference, CYBLACK_VARIABLE_REFERENCE);
    }

    public static final SubLObject cyblack_variable_reference_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_variable_reference_method = NIL;
	    SubLObject variable = get_cyblack_variable_reference_variable(self);
	    try {
		try {
		    cyblack_pattern_initialize_method(self);
		    variable = NIL;
		    sublisp_throw($sym265$OUTER_CATCH_FOR_CYBLACK_VARIABLE_REFERENCE_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_variable_reference_variable(self, variable);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_variable_reference_method = Errors.handleThrowable(ccatch_env_var, $sym265$OUTER_CATCH_FOR_CYBLACK_VARIABLE_REFERENCE_METHOD);
	    }
	    return catch_var_for_cyblack_variable_reference_method;
	}
    }

    public static final SubLObject cyblack_variable_reference_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject variable = get_cyblack_variable_reference_variable(self);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt94$_S, variable);
	    return self;
	}
    }

    public static final SubLObject cyblack_variable_reference_get_variable_method(SubLObject self) {
	{
	    SubLObject variable = get_cyblack_variable_reference_variable(self);
	    return variable;
	}
    }

    public static final SubLObject cyblack_variable_reference_set_variable_method(SubLObject self, SubLObject new_variable) {
	{
	    SubLObject catch_var_for_cyblack_variable_reference_method = NIL;
	    SubLObject variable = get_cyblack_variable_reference_variable(self);
	    try {
		try {
		    variable = cyblack_symbol_to_cyblack_package(new_variable);
		    sublisp_throw($sym271$OUTER_CATCH_FOR_CYBLACK_VARIABLE_REFERENCE_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_variable_reference_variable(self, variable);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_variable_reference_method = Errors.handleThrowable(ccatch_env_var, $sym271$OUTER_CATCH_FOR_CYBLACK_VARIABLE_REFERENCE_METHOD);
	    }
	    return catch_var_for_cyblack_variable_reference_method;
	}
    }

    public static final SubLObject cyblack_variable_reference_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject variable = get_cyblack_variable_reference_variable(self);
		if (NIL == environment) {
		    if (NIL != cyblack_globals.$cyblack_tracing_on$.getDynamicValue(thread)) {
			format(cyblack_globals.$cyblack_tracing_output_stream$.getDynamicValue(thread), cyblack_precondition_pattern_p2.$str_alt275$___GET_VALUE__S___environment_is_, self);
		    }
		    return NIL;
		}
		{
		    SubLObject result = cyblack_environment_get_method(environment, variable, UNPROVIDED);
		    if (NIL != cyblack_globals.$cyblack_tracing_on$.getDynamicValue(thread)) {
			format(cyblack_globals.$cyblack_tracing_output_stream$.getDynamicValue(thread), cyblack_precondition_pattern_p2.$str_alt276$___GET_VALUE__S___Result_____S_, self, result);
		    }
		    return result;
		}
	    }
	}
    }

    public static final SubLObject get_cyblack_literal_literal_value(SubLObject cyblack_literal) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_literal, FOUR_INTEGER, LITERAL_VALUE);
    }

    public static final SubLObject set_cyblack_literal_literal_value(SubLObject cyblack_literal, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_literal, value, FOUR_INTEGER, LITERAL_VALUE);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_literal_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_literal_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_LITERAL, LITERAL_VALUE, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_literal_p(SubLObject cyblack_literal) {
	return classes.subloop_instanceof_class(cyblack_literal, CYBLACK_LITERAL);
    }

    public static final SubLObject cyblack_literal_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_literal_method = NIL;
	    SubLObject literal_value = get_cyblack_literal_literal_value(self);
	    try {
		try {
		    cyblack_pattern_initialize_method(self);
		    literal_value = NIL;
		    sublisp_throw($sym284$OUTER_CATCH_FOR_CYBLACK_LITERAL_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_literal_literal_value(self, literal_value);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_literal_method = Errors.handleThrowable(ccatch_env_var, $sym284$OUTER_CATCH_FOR_CYBLACK_LITERAL_METHOD);
	    }
	    return catch_var_for_cyblack_literal_method;
	}
    }

    public static final SubLObject cyblack_literal_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt287$_LITERAL);
	return self;
    }

    public static final SubLObject cyblack_literal_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject literal_value = get_cyblack_literal_literal_value(self);
		if (NIL != cyblack_globals.$cyblack_tracing_on$.getDynamicValue(thread)) {
		    format(cyblack_globals.$cyblack_tracing_output_stream$.getDynamicValue(thread), cyblack_precondition_pattern_p2.$str_alt276$___GET_VALUE__S___Result_____S_, self, literal_value);
		}
		return literal_value;
	    }
	}
    }

    public static final SubLObject cyblack_literal_set_value_method(SubLObject self, SubLObject new_value) {
	{
	    SubLObject catch_var_for_cyblack_literal_method = NIL;
	    SubLObject literal_value = get_cyblack_literal_literal_value(self);
	    try {
		try {
		    literal_value = new_value;
		    sublisp_throw($sym292$OUTER_CATCH_FOR_CYBLACK_LITERAL_METHOD, new_value);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_literal_literal_value(self, literal_value);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_literal_method = Errors.handleThrowable(ccatch_env_var, $sym292$OUTER_CATCH_FOR_CYBLACK_LITERAL_METHOD);
	    }
	    return catch_var_for_cyblack_literal_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_number_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_number_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_LITERAL, LITERAL_VALUE, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_number_p(SubLObject cyblack_number) {
	return classes.subloop_instanceof_class(cyblack_number, CYBLACK_NUMBER);
    }

    public static final SubLObject cyblack_number_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_number_method = NIL;
	    SubLObject literal_value = get_cyblack_literal_literal_value(self);
	    try {
		try {
		    cyblack_literal_initialize_method(self);
		    literal_value = NIL;
		    sublisp_throw($sym298$OUTER_CATCH_FOR_CYBLACK_NUMBER_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_literal_literal_value(self, literal_value);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_number_method = Errors.handleThrowable(ccatch_env_var, $sym298$OUTER_CATCH_FOR_CYBLACK_NUMBER_METHOD);
	    }
	    return catch_var_for_cyblack_number_method;
	}
    }

    public static final SubLObject cyblack_number_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt301$_NUMBER);
	return self;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_integer_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_integer_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_LITERAL, LITERAL_VALUE, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_integer_p(SubLObject cyblack_integer) {
	return classes.subloop_instanceof_class(cyblack_integer, CYBLACK_INTEGER);
    }

    public static final SubLObject cyblack_integer_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_integer_method = NIL;
	    SubLObject literal_value = get_cyblack_literal_literal_value(self);
	    try {
		try {
		    cyblack_number_initialize_method(self);
		    literal_value = ZERO_INTEGER;
		    sublisp_throw($sym308$OUTER_CATCH_FOR_CYBLACK_INTEGER_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_literal_literal_value(self, literal_value);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_integer_method = Errors.handleThrowable(ccatch_env_var, $sym308$OUTER_CATCH_FOR_CYBLACK_INTEGER_METHOD);
	    }
	    return catch_var_for_cyblack_integer_method;
	}
    }

    public static final SubLObject cyblack_integer_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject literal_value = get_cyblack_literal_literal_value(self);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt94$_S, literal_value);
	    return self;
	}
    }

    public static final SubLObject cyblack_integer_set_value_method(SubLObject self, SubLObject new_value) {
	return cyblack_literal_set_value_method(self, new_value);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_real_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_real_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_LITERAL, LITERAL_VALUE, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_real_p(SubLObject cyblack_real) {
	return classes.subloop_instanceof_class(cyblack_real, CYBLACK_REAL);
    }

    public static final SubLObject cyblack_real_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_real_method = NIL;
	    SubLObject literal_value = get_cyblack_literal_literal_value(self);
	    try {
		try {
		    cyblack_number_initialize_method(self);
		    literal_value = cyblack_precondition_pattern_p3.$float$0_0;
		    sublisp_throw($sym318$OUTER_CATCH_FOR_CYBLACK_REAL_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_literal_literal_value(self, literal_value);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_real_method = Errors.handleThrowable(ccatch_env_var, $sym318$OUTER_CATCH_FOR_CYBLACK_REAL_METHOD);
	    }
	    return catch_var_for_cyblack_real_method;
	}
    }

    public static final SubLObject cyblack_real_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject literal_value = get_cyblack_literal_literal_value(self);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt94$_S, literal_value);
	    return self;
	}
    }

    public static final SubLObject cyblack_real_set_value_method(SubLObject self, SubLObject new_value) {
	return cyblack_literal_set_value_method(self, new_value);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_string_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_string_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_LITERAL, LITERAL_VALUE, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_string_p(SubLObject cyblack_string) {
	return classes.subloop_instanceof_class(cyblack_string, CYBLACK_STRING);
    }

    public static final SubLObject cyblack_string_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_string_method = NIL;
	    SubLObject literal_value = get_cyblack_literal_literal_value(self);
	    try {
		try {
		    cyblack_literal_initialize_method(self);
		    literal_value = cyblack_precondition_pattern_p2.$str_alt8$;
		    sublisp_throw($sym328$OUTER_CATCH_FOR_CYBLACK_STRING_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_literal_literal_value(self, literal_value);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_string_method = Errors.handleThrowable(ccatch_env_var, $sym328$OUTER_CATCH_FOR_CYBLACK_STRING_METHOD);
	    }
	    return catch_var_for_cyblack_string_method;
	}
    }

    public static final SubLObject cyblack_string_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject literal_value = get_cyblack_literal_literal_value(self);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt331$__string__S_, literal_value);
	    return self;
	}
    }

    public static final SubLObject cyblack_string_set_value_method(SubLObject self, SubLObject new_value) {
	return cyblack_literal_set_value_method(self, new_value);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_symbol_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_symbol_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_LITERAL, LITERAL_VALUE, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_symbol_p(SubLObject cyblack_symbol) {
	return classes.subloop_instanceof_class(cyblack_symbol, CYBLACK_SYMBOL);
    }

    public static final SubLObject cyblack_symbol_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_symbol_method = NIL;
	    SubLObject literal_value = get_cyblack_literal_literal_value(self);
	    try {
		try {
		    cyblack_literal_initialize_method(self);
		    literal_value = NIL;
		    sublisp_throw($sym338$OUTER_CATCH_FOR_CYBLACK_SYMBOL_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_literal_literal_value(self, literal_value);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_symbol_method = Errors.handleThrowable(ccatch_env_var, $sym338$OUTER_CATCH_FOR_CYBLACK_SYMBOL_METHOD);
	    }
	    return catch_var_for_cyblack_symbol_method;
	}
    }

    public static final SubLObject cyblack_symbol_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject literal_value = get_cyblack_literal_literal_value(self);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt94$_S, literal_value);
	    return self;
	}
    }

    public static final SubLObject cyblack_symbol_set_value_method(SubLObject self, SubLObject new_value) {
	{
	    SubLObject catch_var_for_cyblack_symbol_method = NIL;
	    SubLObject literal_value = get_cyblack_literal_literal_value(self);
	    try {
		try {
		    literal_value = new_value;
		    sublisp_throw($sym342$OUTER_CATCH_FOR_CYBLACK_SYMBOL_METHOD, new_value);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_literal_literal_value(self, literal_value);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_symbol_method = Errors.handleThrowable(ccatch_env_var, $sym342$OUTER_CATCH_FOR_CYBLACK_SYMBOL_METHOD);
	    }
	    return catch_var_for_cyblack_symbol_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_fort_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_fort_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_LITERAL, LITERAL_VALUE, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_fort_p(SubLObject cyblack_fort) {
	return classes.subloop_instanceof_class(cyblack_fort, CYBLACK_FORT);
    }

    public static final SubLObject cyblack_fort_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_fort_method = NIL;
	    SubLObject literal_value = get_cyblack_literal_literal_value(self);
	    try {
		try {
		    cyblack_literal_initialize_method(self);
		    literal_value = NIL;
		    sublisp_throw($sym347$OUTER_CATCH_FOR_CYBLACK_FORT_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_literal_literal_value(self, literal_value);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_fort_method = Errors.handleThrowable(ccatch_env_var, $sym347$OUTER_CATCH_FOR_CYBLACK_FORT_METHOD);
	    }
	    return catch_var_for_cyblack_fort_method;
	}
    }

    public static final SubLObject cyblack_fort_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject literal_value = get_cyblack_literal_literal_value(self);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt94$_S, literal_value);
	    return self;
	}
    }

    public static final SubLObject cyblack_fort_set_value_method(SubLObject self, SubLObject new_value) {
	{
	    SubLObject catch_var_for_cyblack_fort_method = NIL;
	    SubLObject literal_value = get_cyblack_literal_literal_value(self);
	    try {
		try {
		    literal_value = new_value;
		    sublisp_throw($sym351$OUTER_CATCH_FOR_CYBLACK_FORT_METHOD, new_value);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_literal_literal_value(self, literal_value);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_fort_method = Errors.handleThrowable(ccatch_env_var, $sym351$OUTER_CATCH_FOR_CYBLACK_FORT_METHOD);
	    }
	    return catch_var_for_cyblack_fort_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_constant_symbol_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_constant_symbol_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_LITERAL, LITERAL_VALUE, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_constant_symbol_p(SubLObject cyblack_constant_symbol) {
	return classes.subloop_instanceof_class(cyblack_constant_symbol, CYBLACK_CONSTANT_SYMBOL);
    }

    public static final SubLObject cyblack_constant_symbol_set_value_method(SubLObject self, SubLObject new_value) {
	{
	    SubLObject catch_var_for_cyblack_constant_symbol_method = NIL;
	    SubLObject literal_value = get_cyblack_literal_literal_value(self);
	    try {
		try {
		    Errors.error(cyblack_precondition_pattern_p2.$str_alt359$_SET_VALUE__S___Cannot_set_the_va, self, self);
		    sublisp_throw($sym358$OUTER_CATCH_FOR_CYBLACK_CONSTANT_SYMBOL_METHOD, literal_value);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_literal_literal_value(self, literal_value);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_constant_symbol_method = Errors.handleThrowable(ccatch_env_var, $sym358$OUTER_CATCH_FOR_CYBLACK_CONSTANT_SYMBOL_METHOD);
	    }
	    return catch_var_for_cyblack_constant_symbol_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_true_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_true_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_LITERAL, LITERAL_VALUE, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_true_p(SubLObject cyblack_true) {
	return classes.subloop_instanceof_class(cyblack_true, CYBLACK_TRUE);
    }

    public static final SubLObject cyblack_true_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_true_method = NIL;
	    SubLObject literal_value = get_cyblack_literal_literal_value(self);
	    try {
		try {
		    cyblack_symbol_initialize_method(self);
		    literal_value = T;
		    sublisp_throw($sym367$OUTER_CATCH_FOR_CYBLACK_TRUE_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_literal_literal_value(self, literal_value);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_true_method = Errors.handleThrowable(ccatch_env_var, $sym367$OUTER_CATCH_FOR_CYBLACK_TRUE_METHOD);
	    }
	    return catch_var_for_cyblack_true_method;
	}
    }

    public static final SubLObject cyblack_true_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt370$_TRUE);
	return self;
    }

    public static final SubLObject cyblack_true_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	return T;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_false_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_false_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_LITERAL, LITERAL_VALUE, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_false_p(SubLObject cyblack_false) {
	return classes.subloop_instanceof_class(cyblack_false, CYBLACK_FALSE);
    }

    public static final SubLObject cyblack_false_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_false_method = NIL;
	    SubLObject literal_value = get_cyblack_literal_literal_value(self);
	    try {
		try {
		    cyblack_symbol_initialize_method(self);
		    literal_value = NIL;
		    sublisp_throw($sym377$OUTER_CATCH_FOR_CYBLACK_FALSE_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_literal_literal_value(self, literal_value);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_false_method = Errors.handleThrowable(ccatch_env_var, $sym377$OUTER_CATCH_FOR_CYBLACK_FALSE_METHOD);
	    }
	    return catch_var_for_cyblack_false_method;
	}
    }

    public static final SubLObject cyblack_false_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt380$_FALSE);
	return self;
    }

    public static final SubLObject cyblack_false_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	return NIL;
    }

    /**
     * Enumerated values of type CYBLACK-MONITORING-PATTERN-ACTION-TYPE.
     */
    // defconstant
    private static final SubLSymbol $valid_cyblack_monitoring_pattern_action_types$ = makeSymbol("*VALID-CYBLACK-MONITORING-PATTERN-ACTION-TYPES*");

    /**
     * Returns a list of all valid members of the CYBLACK-MONITORING-PATTERN-ACTION-TYPE enumeration.
     */
    public static final SubLObject valid_cyblack_monitoring_pattern_action_types() {
	return $valid_cyblack_monitoring_pattern_action_types$.getGlobalValue();
    }

    /**
     * Return T iff OBJECT is a member of the CYBLACK-MONITORING-PATTERN-ACTION-TYPE enumeration.
     */
    public static final SubLObject cyblack_monitoring_pattern_action_type_p(SubLObject v_object) {
	return NIL != member(v_object, $valid_cyblack_monitoring_pattern_action_types$.getGlobalValue(), UNPROVIDED, UNPROVIDED) ? ((SubLObject) (T)) : NIL;
    }

    /**
     * Maps a member of the CYBLACK-MONITORING-PATTERN-ACTION-TYPE enumeration to an integer encoding.
     */
    public static final SubLObject encode_cyblack_monitoring_pattern_action_type(SubLObject value) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject pos = position(value, $valid_cyblack_monitoring_pattern_action_types$.getGlobalValue(), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (NIL == pos) {
			Errors.error(cyblack_precondition_pattern_p2.$str_alt2$_S___S_is_not_a_member_of_the__S_, ENCODE_CYBLACK_MONITORING_PATTERN_ACTION_TYPE, value, CYBLACK_MONITORING_PATTERN_ACTION_TYPE);
		    }
		}
		return pos;
	    }
	}
    }

    /**
     * Maps an encoded value to a member of the CYBLACK-MONITORING-PATTERN-ACTION-TYPE enumeration.
     */
    public static final SubLObject decode_cyblack_monitoring_pattern_action_type(SubLObject value) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject element = nth(value, $valid_cyblack_monitoring_pattern_action_types$.getGlobalValue());
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (NIL == element) {
			Errors.error(cyblack_precondition_pattern_p2.$str_alt4$_S___S_is_not_a_valid_encoding_of, DECODE_CYBLACK_MONITORING_PATTERN_ACTION_TYPE, value, CYBLACK_MONITORING_PATTERN_ACTION_TYPE);
		    }
		}
		return element;
	    }
	}
    }

    /**
     * Provides a LESSP predicate for members of the CYBLACK-MONITORING-PATTERN-ACTION-TYPE enumeration.
     */
    public static final SubLObject cyblack_monitoring_pattern_action_type_less_p(SubLObject value1, SubLObject value2) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_monitoring_pattern_action_type_p(value1)) {
		    Errors.error(cyblack_precondition_pattern_p2.$str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_MONITORING_PATTERN_ACTION_TYPE_P, value1, CYBLACK_MONITORING_PATTERN_ACTION_TYPE);
		}
	    }
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_monitoring_pattern_action_type_p(value2)) {
		    Errors.error(cyblack_precondition_pattern_p2.$str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_MONITORING_PATTERN_ACTION_TYPE_P, value2, CYBLACK_MONITORING_PATTERN_ACTION_TYPE);
		}
	    }
	    {
		SubLObject cdolist_list_var = $valid_cyblack_monitoring_pattern_action_types$.getGlobalValue();
		SubLObject value = NIL;
		for (value = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), value = cdolist_list_var.first()) {
		    if (value == value1) {
			return makeBoolean(value != value2);
		    } else if (value == value2) {
			return NIL;
		    }

		}
	    }
	    return NIL;
	}
    }

    /**
     * Provides a GREATERP predicate for members of the CYBLACK-MONITORING-PATTERN-ACTION-TYPE enumeration.
     */
    public static final SubLObject cyblack_monitoring_pattern_action_type_greater_p(SubLObject value1, SubLObject value2) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_monitoring_pattern_action_type_p(value1)) {
		    Errors.error(cyblack_precondition_pattern_p2.$str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_MONITORING_PATTERN_ACTION_TYPE_P, value1, CYBLACK_MONITORING_PATTERN_ACTION_TYPE);
		}
	    }
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_monitoring_pattern_action_type_p(value2)) {
		    Errors.error(cyblack_precondition_pattern_p2.$str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_MONITORING_PATTERN_ACTION_TYPE_P, value2, CYBLACK_MONITORING_PATTERN_ACTION_TYPE);
		}
	    }
	    {
		SubLObject cdolist_list_var = $valid_cyblack_monitoring_pattern_action_types$.getGlobalValue();
		SubLObject value = NIL;
		for (value = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), value = cdolist_list_var.first()) {
		    if (value == value2) {
			return makeBoolean(value != value1);
		    } else if (value == value1) {
			return NIL;
		    }

		}
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_monitoring_pattern_get_type_and_qualifiers(SubLObject plist) {
	{
	    SubLObject qualifiers = NIL;
	    SubLObject cdolist_list_var = valid_cyblack_monitoring_pattern_action_types();
	    SubLObject action_type = NIL;
	    for (action_type = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), action_type = cdolist_list_var.first()) {
		qualifiers = classes.classes_getf(plist, action_type);
		if (NIL != qualifiers) {
		    return values(action_type, qualifiers);
		}
	    }
	    return values(NIL, NIL);
	}
    }

    /**
     * Enumerated values of type CYBLACK-MONITORING-PATTERN-ACTION-QUALIFIER-TYPE.
     */
    // defconstant
    private static final SubLSymbol $valid_cyblack_monitoring_pattern_action_qualifier_types$ = makeSymbol("*VALID-CYBLACK-MONITORING-PATTERN-ACTION-QUALIFIER-TYPES*");

    /**
     * Returns a list of all valid members of the CYBLACK-MONITORING-PATTERN-ACTION-QUALIFIER-TYPE enumeration.
     */
    public static final SubLObject valid_cyblack_monitoring_pattern_action_qualifier_types() {
	return $valid_cyblack_monitoring_pattern_action_qualifier_types$.getGlobalValue();
    }

    /**
     * Return T iff OBJECT is a member of the CYBLACK-MONITORING-PATTERN-ACTION-QUALIFIER-TYPE enumeration.
     */
    public static final SubLObject cyblack_monitoring_pattern_action_qualifier_type_p(SubLObject v_object) {
	return NIL != member(v_object, $valid_cyblack_monitoring_pattern_action_qualifier_types$.getGlobalValue(), UNPROVIDED, UNPROVIDED) ? ((SubLObject) (T)) : NIL;
    }

    /**
     * Maps a member of the CYBLACK-MONITORING-PATTERN-ACTION-QUALIFIER-TYPE enumeration to an integer encoding.
     */
    public static final SubLObject encode_cyblack_monitoring_pattern_action_qualifier_type(SubLObject value) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject pos = position(value, $valid_cyblack_monitoring_pattern_action_qualifier_types$.getGlobalValue(), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (NIL == pos) {
			Errors.error(cyblack_precondition_pattern_p2.$str_alt2$_S___S_is_not_a_member_of_the__S_, ENCODE_CYBLACK_MONITORING_PATTERN_ACTION_QUALIFIER_TYPE, value, CYBLACK_MONITORING_PATTERN_ACTION_QUALIFIER_TYPE);
		    }
		}
		return pos;
	    }
	}
    }

    /**
     * Maps an encoded value to a member of the CYBLACK-MONITORING-PATTERN-ACTION-QUALIFIER-TYPE enumeration.
     */
    public static final SubLObject decode_cyblack_monitoring_pattern_action_qualifier_type(SubLObject value) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject element = nth(value, $valid_cyblack_monitoring_pattern_action_qualifier_types$.getGlobalValue());
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (NIL == element) {
			Errors.error(cyblack_precondition_pattern_p2.$str_alt4$_S___S_is_not_a_valid_encoding_of, DECODE_CYBLACK_MONITORING_PATTERN_ACTION_QUALIFIER_TYPE, value, CYBLACK_MONITORING_PATTERN_ACTION_QUALIFIER_TYPE);
		    }
		}
		return element;
	    }
	}
    }

    /**
     * Provides a LESSP predicate for members of the CYBLACK-MONITORING-PATTERN-ACTION-QUALIFIER-TYPE enumeration.
     */
    public static final SubLObject cyblack_monitoring_pattern_action_qualifier_type_less_p(SubLObject value1, SubLObject value2) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_monitoring_pattern_action_qualifier_type_p(value1)) {
		    Errors.error(cyblack_precondition_pattern_p2.$str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_MONITORING_PATTERN_ACTION_QUALIFIER_TYPE_P, value1, CYBLACK_MONITORING_PATTERN_ACTION_QUALIFIER_TYPE);
		}
	    }
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_monitoring_pattern_action_qualifier_type_p(value2)) {
		    Errors.error(cyblack_precondition_pattern_p2.$str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_MONITORING_PATTERN_ACTION_QUALIFIER_TYPE_P, value2, CYBLACK_MONITORING_PATTERN_ACTION_QUALIFIER_TYPE);
		}
	    }
	    {
		SubLObject cdolist_list_var = $valid_cyblack_monitoring_pattern_action_qualifier_types$.getGlobalValue();
		SubLObject value = NIL;
		for (value = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), value = cdolist_list_var.first()) {
		    if (value == value1) {
			return makeBoolean(value != value2);
		    } else if (value == value2) {
			return NIL;
		    }

		}
	    }
	    return NIL;
	}
    }

    /**
     * Provides a GREATERP predicate for members of the CYBLACK-MONITORING-PATTERN-ACTION-QUALIFIER-TYPE enumeration.
     */
    public static final SubLObject cyblack_monitoring_pattern_action_qualifier_type_greater_p(SubLObject value1, SubLObject value2) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_monitoring_pattern_action_qualifier_type_p(value1)) {
		    Errors.error(cyblack_precondition_pattern_p2.$str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_MONITORING_PATTERN_ACTION_QUALIFIER_TYPE_P, value1, CYBLACK_MONITORING_PATTERN_ACTION_QUALIFIER_TYPE);
		}
	    }
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_monitoring_pattern_action_qualifier_type_p(value2)) {
		    Errors.error(cyblack_precondition_pattern_p2.$str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_MONITORING_PATTERN_ACTION_QUALIFIER_TYPE_P, value2, CYBLACK_MONITORING_PATTERN_ACTION_QUALIFIER_TYPE);
		}
	    }
	    {
		SubLObject cdolist_list_var = $valid_cyblack_monitoring_pattern_action_qualifier_types$.getGlobalValue();
		SubLObject value = NIL;
		for (value = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), value = cdolist_list_var.first()) {
		    if (value == value2) {
			return makeBoolean(value != value1);
		    } else if (value == value1) {
			return NIL;
		    }

		}
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_monitoring_pattern_action_qualifier_type_list_p(SubLObject v_object) {
	{
	    SubLObject current_cons = v_object;
	    SubLObject current_element = NIL;
	    current_cons = v_object;
	    while (current_cons.isCons()) {
		current_element = current_cons.first();
		if (NIL == cyblack_monitoring_pattern_action_qualifier_type_p(current_element)) {
		    return NIL;
		}
		current_cons = current_cons.rest();
	    }
	    return sublisp_null(current_cons);
	}
    }

    public static final SubLObject get_cyblack_monitoring_pattern_logical_form(SubLObject cyblack_monitoring_pattern) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_monitoring_pattern, NINE_INTEGER, LOGICAL_FORM);
    }

    public static final SubLObject set_cyblack_monitoring_pattern_logical_form(SubLObject cyblack_monitoring_pattern, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_monitoring_pattern, value, NINE_INTEGER, LOGICAL_FORM);
    }

    public static final SubLObject get_cyblack_monitoring_pattern_local_bindings(SubLObject cyblack_monitoring_pattern) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_monitoring_pattern, EIGHT_INTEGER, LOCAL_BINDINGS);
    }

    public static final SubLObject set_cyblack_monitoring_pattern_local_bindings(SubLObject cyblack_monitoring_pattern, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_monitoring_pattern, value, EIGHT_INTEGER, LOCAL_BINDINGS);
    }

    public static final SubLObject get_cyblack_monitoring_pattern_action_qualifiers(SubLObject cyblack_monitoring_pattern) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_monitoring_pattern, SEVEN_INTEGER, ACTION_QUALIFIERS);
    }

    public static final SubLObject set_cyblack_monitoring_pattern_action_qualifiers(SubLObject cyblack_monitoring_pattern, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_monitoring_pattern, value, SEVEN_INTEGER, ACTION_QUALIFIERS);
    }

    public static final SubLObject get_cyblack_monitoring_pattern_action(SubLObject cyblack_monitoring_pattern) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_monitoring_pattern, SIX_INTEGER, ACTION);
    }

    public static final SubLObject set_cyblack_monitoring_pattern_action(SubLObject cyblack_monitoring_pattern, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_monitoring_pattern, value, SIX_INTEGER, ACTION);
    }

    public static final SubLObject get_cyblack_monitoring_pattern_monitor_args(SubLObject cyblack_monitoring_pattern) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_monitoring_pattern, FIVE_INTEGER, MONITOR_ARGS);
    }

    public static final SubLObject set_cyblack_monitoring_pattern_monitor_args(SubLObject cyblack_monitoring_pattern, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_monitoring_pattern, value, FIVE_INTEGER, MONITOR_ARGS);
    }

    public static final SubLObject get_cyblack_monitoring_pattern_environment(SubLObject cyblack_monitoring_pattern) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_monitoring_pattern, FOUR_INTEGER, ENVIRONMENT);
    }

    public static final SubLObject set_cyblack_monitoring_pattern_environment(SubLObject cyblack_monitoring_pattern, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_monitoring_pattern, value, FOUR_INTEGER, ENVIRONMENT);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_monitoring_pattern_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_monitoring_pattern_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_MONITORING_PATTERN, ENVIRONMENT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_MONITORING_PATTERN, MONITOR_ARGS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_MONITORING_PATTERN, ACTION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_MONITORING_PATTERN, ACTION_QUALIFIERS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_MONITORING_PATTERN, LOCAL_BINDINGS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_MONITORING_PATTERN, LOGICAL_FORM, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_monitoring_pattern_p(SubLObject cyblack_monitoring_pattern) {
	return classes.subloop_instanceof_class(cyblack_monitoring_pattern, CYBLACK_MONITORING_PATTERN);
    }

    public static final SubLObject cyblack_monitoring_pattern_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_monitoring_pattern_method = NIL;
	    SubLObject logical_form = get_cyblack_monitoring_pattern_logical_form(self);
	    SubLObject local_bindings = get_cyblack_monitoring_pattern_local_bindings(self);
	    SubLObject action_qualifiers = get_cyblack_monitoring_pattern_action_qualifiers(self);
	    SubLObject action = get_cyblack_monitoring_pattern_action(self);
	    SubLObject monitor_args = get_cyblack_monitoring_pattern_monitor_args(self);
	    SubLObject environment = get_cyblack_monitoring_pattern_environment(self);
	    try {
		try {
		    cyblack_pattern_initialize_method(self);
		    environment = NIL;
		    monitor_args = NIL;
		    action = NIL;
		    action_qualifiers = NIL;
		    local_bindings = NIL;
		    logical_form = NIL;
		    sublisp_throw($sym404$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_monitoring_pattern_logical_form(self, logical_form);
			    set_cyblack_monitoring_pattern_local_bindings(self, local_bindings);
			    set_cyblack_monitoring_pattern_action_qualifiers(self, action_qualifiers);
			    set_cyblack_monitoring_pattern_action(self, action);
			    set_cyblack_monitoring_pattern_monitor_args(self, monitor_args);
			    set_cyblack_monitoring_pattern_environment(self, environment);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_monitoring_pattern_method = Errors.handleThrowable(ccatch_env_var, $sym404$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_METHOD);
	    }
	    return catch_var_for_cyblack_monitoring_pattern_method;
	}
    }

    public static final SubLObject cyblack_monitoring_pattern_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject logical_form = get_cyblack_monitoring_pattern_logical_form(self);
	    SubLObject local_bindings = get_cyblack_monitoring_pattern_local_bindings(self);
	    SubLObject action_qualifiers = get_cyblack_monitoring_pattern_action_qualifiers(self);
	    SubLObject action = get_cyblack_monitoring_pattern_action(self);
	    SubLObject monitor_args = get_cyblack_monitoring_pattern_monitor_args(self);
	    if ((NIL != monitor_args) && (NIL != local_bindings)) {
		format(stream, cyblack_precondition_pattern_p2.$str_alt407$__MONITOR_PATTERN____MONITOR__S__,
			new SubLObject[] { cyblack_environment_listify_local_bindings_method(monitor_args), action, action_qualifiers, cyblack_environment_listify_local_bindings_method(local_bindings), logical_form });
	    } else {
		format(stream, cyblack_precondition_pattern_p2.$str_alt408$__CYBLACK_MONITORING_PATTERN__UNI);
	    }
	    return self;
	}
    }

    public static final SubLObject cyblack_monitoring_pattern_clone_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_monitoring_pattern_method = NIL;
	    SubLObject logical_form = get_cyblack_monitoring_pattern_logical_form(self);
	    SubLObject local_bindings = get_cyblack_monitoring_pattern_local_bindings(self);
	    SubLObject action_qualifiers = get_cyblack_monitoring_pattern_action_qualifiers(self);
	    SubLObject action = get_cyblack_monitoring_pattern_action(self);
	    try {
		try {
		    {
			SubLObject new_monitoring_pattern = object.object_clone_method(self);
			SubLObject new_local_bindings = (NIL != local_bindings) ? ((SubLObject) (cyblack_environment_clone_method(local_bindings))) : NIL;
			if (NIL != new_local_bindings) {
			    cyblack_environment_set_local_bindings_method(new_monitoring_pattern, new_local_bindings);
			    methods.funcall_instance_method_with_1_args(new_monitoring_pattern, SET_MONITOR_ARGS, cyblack_environment_get_outer_scope_method(new_local_bindings));
			} else {
			    cyblack_environment_set_local_bindings_method(new_monitoring_pattern, NIL);
			    methods.funcall_instance_method_with_1_args(new_monitoring_pattern, SET_MONITORING_ARGS, NIL);
			}
			cyblack_monitoring_pattern_set_action_method(new_monitoring_pattern, action);
			cyblack_monitoring_pattern_set_action_qualifiers_method(new_monitoring_pattern, copy_tree(action_qualifiers));
			cyblack_monitoring_pattern_set_logical_form_method(new_monitoring_pattern, copy_tree(logical_form));
			sublisp_throw($sym411$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_METHOD, new_monitoring_pattern);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_monitoring_pattern_logical_form(self, logical_form);
			    set_cyblack_monitoring_pattern_local_bindings(self, local_bindings);
			    set_cyblack_monitoring_pattern_action_qualifiers(self, action_qualifiers);
			    set_cyblack_monitoring_pattern_action(self, action);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_monitoring_pattern_method = Errors.handleThrowable(ccatch_env_var, $sym411$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_METHOD);
	    }
	    return catch_var_for_cyblack_monitoring_pattern_method;
	}
    }

    public static final SubLObject cyblack_monitoring_pattern_traverse_filling_datatype_bag_method(SubLObject self, SubLObject v_bag) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject unique_bindings = cyblack_monitoring_pattern_get_unique_bindings_method(self);
		SubLObject datatypes = NIL;
		if (NIL != cyblack_globals.$cyblack_tracing_on$.getDynamicValue(thread)) {
		    format(cyblack_globals.$cyblack_tracing_output_stream$.getDynamicValue(thread), cyblack_precondition_pattern_p2.$str_alt417$___TRAVERSE_FILLING_DATATYPE_BAG_, unique_bindings);
		}
		{
		    SubLObject list_expression = unique_bindings;
		    if (NIL == list_expression) {
			datatypes = NIL;
		    } else if (list_expression.isAtom()) {
			datatypes = list(list_expression);
		    } else if (NIL == list_expression.rest()) {
			{
			    SubLObject binding = list_expression.first();
			    datatypes = (NIL != cyblack_binding_get_type_method(binding)) ? ((SubLObject) (list(cyblack_binding_get_type_method(binding)))) : NIL;
			}
		    } else {
			{
			    SubLObject tail_cons = NIL;
			    SubLObject result = NIL;
			    datatypes = NIL;
			    {
				SubLObject cdolist_list_var = list_expression;
				SubLObject binding = NIL;
				for (binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), binding = cdolist_list_var.first()) {
				    result = (NIL != cyblack_binding_get_type_method(binding)) ? ((SubLObject) (list(cyblack_binding_get_type_method(binding)))) : NIL;
				    if (NIL != result) {
					if (NIL != tail_cons) {
					    rplacd(tail_cons, result);
					    tail_cons = last(result, UNPROVIDED);
					} else {
					    datatypes = (NIL != cyblack_binding_get_type_method(binding)) ? ((SubLObject) (list(cyblack_binding_get_type_method(binding)))) : NIL;
					    tail_cons = last(datatypes, UNPROVIDED);
					}
				    }
				}
			    }
			}
		    }

		}
		if (NIL != datatypes) {
		    {
			SubLObject cdolist_list_var = datatypes;
			SubLObject datatype = NIL;
			for (datatype = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), datatype = cdolist_list_var.first()) {
			    subloop_collections.basic_bag_add_method(v_bag, datatype);
			}
		    }
		}
		return v_bag;
	    }
	}
    }

    public static final SubLObject cyblack_monitoring_pattern_get_environment_method(SubLObject self) {
	{
	    SubLObject environment = get_cyblack_monitoring_pattern_environment(self);
	    return environment;
	}
    }

    public static final SubLObject cyblack_monitoring_pattern_set_environment_method(SubLObject self, SubLObject new_environment) {
	{
	    SubLObject catch_var_for_cyblack_monitoring_pattern_method = NIL;
	    SubLObject local_bindings = get_cyblack_monitoring_pattern_local_bindings(self);
	    SubLObject monitor_args = get_cyblack_monitoring_pattern_monitor_args(self);
	    SubLObject environment = get_cyblack_monitoring_pattern_environment(self);
	    try {
		try {
		    environment = new_environment;
		    if (NIL != monitor_args) {
			cyblack_environment_set_outer_scope_method(monitor_args, environment);
			sublisp_throw($sym425$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_METHOD, new_environment);
		    }
		    if (NIL != local_bindings) {
			cyblack_environment_set_outer_scope_method(local_bindings, environment);
		    }
		    sublisp_throw($sym425$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_METHOD, new_environment);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_monitoring_pattern_local_bindings(self, local_bindings);
			    set_cyblack_monitoring_pattern_monitor_args(self, monitor_args);
			    set_cyblack_monitoring_pattern_environment(self, environment);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_monitoring_pattern_method = Errors.handleThrowable(ccatch_env_var, $sym425$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_METHOD);
	    }
	    return catch_var_for_cyblack_monitoring_pattern_method;
	}
    }

    public static final SubLObject cyblack_monitoring_pattern_get_monitor_args_method(SubLObject self) {
	{
	    SubLObject monitor_args = get_cyblack_monitoring_pattern_monitor_args(self);
	    return monitor_args;
	}
    }

    public static final SubLObject cyblack_monitoring_pattern_set_monitor_args_method(SubLObject self, SubLObject new_monitor_args) {
	{
	    SubLObject catch_var_for_cyblack_monitoring_pattern_method = NIL;
	    SubLObject monitor_args = get_cyblack_monitoring_pattern_monitor_args(self);
	    SubLObject environment = get_cyblack_monitoring_pattern_environment(self);
	    try {
		try {
		    monitor_args = new_monitor_args;
		    if (NIL != environment) {
			cyblack_environment_set_outer_scope_method(monitor_args, environment);
		    }
		    sublisp_throw($sym432$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_monitoring_pattern_monitor_args(self, monitor_args);
			    set_cyblack_monitoring_pattern_environment(self, environment);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_monitoring_pattern_method = Errors.handleThrowable(ccatch_env_var, $sym432$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_METHOD);
	    }
	    return catch_var_for_cyblack_monitoring_pattern_method;
	}
    }

    public static final SubLObject cyblack_monitoring_pattern_get_action_method(SubLObject self) {
	{
	    SubLObject action = get_cyblack_monitoring_pattern_action(self);
	    return action;
	}
    }

    public static final SubLObject cyblack_monitoring_pattern_set_action_method(SubLObject self, SubLObject new_action) {
	{
	    SubLObject catch_var_for_cyblack_monitoring_pattern_method = NIL;
	    SubLObject action = get_cyblack_monitoring_pattern_action(self);
	    try {
		try {
		    action = new_action;
		    sublisp_throw($sym440$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_METHOD, new_action);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_monitoring_pattern_action(self, action);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_monitoring_pattern_method = Errors.handleThrowable(ccatch_env_var, $sym440$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_METHOD);
	    }
	    return catch_var_for_cyblack_monitoring_pattern_method;
	}
    }

    public static final SubLObject cyblack_monitoring_pattern_get_action_qualifiers_method(SubLObject self) {
	{
	    SubLObject action_qualifiers = get_cyblack_monitoring_pattern_action_qualifiers(self);
	    return action_qualifiers;
	}
    }

    public static final SubLObject cyblack_monitoring_pattern_set_action_qualifiers_method(SubLObject self, SubLObject new_action_qualifiers) {
	{
	    SubLObject catch_var_for_cyblack_monitoring_pattern_method = NIL;
	    SubLObject action_qualifiers = get_cyblack_monitoring_pattern_action_qualifiers(self);
	    try {
		try {
		    action_qualifiers = copy_tree(new_action_qualifiers);
		    sublisp_throw($sym448$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_METHOD, new_action_qualifiers);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_monitoring_pattern_action_qualifiers(self, action_qualifiers);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_monitoring_pattern_method = Errors.handleThrowable(ccatch_env_var, $sym448$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_METHOD);
	    }
	    return catch_var_for_cyblack_monitoring_pattern_method;
	}
    }

    public static final SubLObject cyblack_monitoring_pattern_get_local_bindings_method(SubLObject self) {
	{
	    SubLObject local_bindings = get_cyblack_monitoring_pattern_local_bindings(self);
	    return local_bindings;
	}
    }

    public static final SubLObject cyblack_monitoring_pattern_set_local_bindings_method(SubLObject self, SubLObject new_local_bindings) {
	{
	    SubLObject catch_var_for_cyblack_monitoring_pattern_method = NIL;
	    SubLObject local_bindings = get_cyblack_monitoring_pattern_local_bindings(self);
	    try {
		try {
		    local_bindings = new_local_bindings;
		    sublisp_throw($sym452$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_METHOD, new_local_bindings);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_monitoring_pattern_local_bindings(self, local_bindings);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_monitoring_pattern_method = Errors.handleThrowable(ccatch_env_var, $sym452$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_METHOD);
	    }
	    return catch_var_for_cyblack_monitoring_pattern_method;
	}
    }

    public static final SubLObject cyblack_monitoring_pattern_get_logical_form_method(SubLObject self) {
	{
	    SubLObject logical_form = get_cyblack_monitoring_pattern_logical_form(self);
	    return logical_form;
	}
    }

    public static final SubLObject cyblack_monitoring_pattern_set_logical_form_method(SubLObject self, SubLObject new_logical_form) {
	{
	    SubLObject catch_var_for_cyblack_monitoring_pattern_method = NIL;
	    SubLObject logical_form = get_cyblack_monitoring_pattern_logical_form(self);
	    try {
		try {
		    logical_form = new_logical_form;
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_monitoring_pattern_logical_form(self, logical_form);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_monitoring_pattern_method = Errors.handleThrowable(ccatch_env_var, $sym460$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_METHOD);
	    }
	    return catch_var_for_cyblack_monitoring_pattern_method;
	}
    }

    public static final SubLObject cyblack_monitoring_pattern_get_unique_bindings_method(SubLObject self) {
	{
	    SubLObject local_bindings = get_cyblack_monitoring_pattern_local_bindings(self);
	    if (NIL != local_bindings) {
		return cyblack_environment_get_unique_bindings_method(local_bindings, UNPROVIDED);
	    } else {
		return NIL;
	    }
	}
    }

    public static final SubLObject get_cyblack_precon_pattern_logical_form(SubLObject cyblack_precon_pattern) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_precon_pattern, SEVEN_INTEGER, LOGICAL_FORM);
    }

    public static final SubLObject set_cyblack_precon_pattern_logical_form(SubLObject cyblack_precon_pattern, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_precon_pattern, value, SEVEN_INTEGER, LOGICAL_FORM);
    }

    public static final SubLObject get_cyblack_precon_pattern_local_bindings(SubLObject cyblack_precon_pattern) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_precon_pattern, SIX_INTEGER, LOCAL_BINDINGS);
    }

    public static final SubLObject set_cyblack_precon_pattern_local_bindings(SubLObject cyblack_precon_pattern, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_precon_pattern, value, SIX_INTEGER, LOCAL_BINDINGS);
    }

    public static final SubLObject get_cyblack_precon_pattern_ks_args(SubLObject cyblack_precon_pattern) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_precon_pattern, FIVE_INTEGER, KS_ARGS);
    }

    public static final SubLObject set_cyblack_precon_pattern_ks_args(SubLObject cyblack_precon_pattern, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_precon_pattern, value, FIVE_INTEGER, KS_ARGS);
    }

    public static final SubLObject get_cyblack_precon_pattern_environment(SubLObject cyblack_precon_pattern) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_precon_pattern, FOUR_INTEGER, ENVIRONMENT);
    }

    public static final SubLObject set_cyblack_precon_pattern_environment(SubLObject cyblack_precon_pattern, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_precon_pattern, value, FOUR_INTEGER, ENVIRONMENT);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_precon_pattern_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_precon_pattern_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PRECON_PATTERN, ENVIRONMENT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PRECON_PATTERN, KS_ARGS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PRECON_PATTERN, LOCAL_BINDINGS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PRECON_PATTERN, LOGICAL_FORM, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_precon_pattern_p(SubLObject cyblack_precon_pattern) {
	return classes.subloop_instanceof_class(cyblack_precon_pattern, CYBLACK_PRECON_PATTERN);
    }

    public static final SubLObject cyblack_precon_pattern_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_precon_pattern_method = NIL;
	    SubLObject logical_form = get_cyblack_precon_pattern_logical_form(self);
	    SubLObject local_bindings = get_cyblack_precon_pattern_local_bindings(self);
	    SubLObject ks_args = get_cyblack_precon_pattern_ks_args(self);
	    try {
		try {
		    cyblack_pattern_initialize_method(self);
		    ks_args = NIL;
		    local_bindings = NIL;
		    logical_form = NIL;
		    sublisp_throw($sym470$OUTER_CATCH_FOR_CYBLACK_PRECON_PATTERN_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_precon_pattern_logical_form(self, logical_form);
			    set_cyblack_precon_pattern_local_bindings(self, local_bindings);
			    set_cyblack_precon_pattern_ks_args(self, ks_args);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_precon_pattern_method = Errors.handleThrowable(ccatch_env_var, $sym470$OUTER_CATCH_FOR_CYBLACK_PRECON_PATTERN_METHOD);
	    }
	    return catch_var_for_cyblack_precon_pattern_method;
	}
    }

    public static final SubLObject cyblack_precon_pattern_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject logical_form = get_cyblack_precon_pattern_logical_form(self);
	    SubLObject local_bindings = get_cyblack_precon_pattern_local_bindings(self);
	    SubLObject ks_args = get_cyblack_precon_pattern_ks_args(self);
	    if ((NIL != ks_args) && (NIL != local_bindings)) {
		format(stream, cyblack_precondition_pattern_p2.$str_alt473$__PRECON___KS_ARGS__S__BINDING_LI, new SubLObject[] { cyblack_environment_listify_local_bindings_method(ks_args), cyblack_environment_listify_local_bindings_method(local_bindings), logical_form });
	    } else {
		format(stream, cyblack_precondition_pattern_p2.$str_alt474$__PRECON__UNINITIALIZED__);
	    }
	    return self;
	}
    }

    public static final SubLObject cyblack_precon_pattern_clone_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_precon_pattern_method = NIL;
	    SubLObject logical_form = get_cyblack_precon_pattern_logical_form(self);
	    SubLObject local_bindings = get_cyblack_precon_pattern_local_bindings(self);
	    try {
		try {
		    {
			SubLObject new_precon_pattern = object.object_clone_method(self);
			SubLObject new_local_bindings = (NIL != local_bindings) ? ((SubLObject) (cyblack_environment_clone_method(local_bindings))) : NIL;
			if (NIL != new_local_bindings) {
			    cyblack_environment_set_local_bindings_method(new_precon_pattern, new_local_bindings);
			    methods.funcall_instance_method_with_1_args(new_precon_pattern, SET_KS_ARGS, cyblack_environment_get_outer_scope_method(new_local_bindings));
			} else {
			    cyblack_environment_set_local_bindings_method(new_precon_pattern, NIL);
			    methods.funcall_instance_method_with_1_args(new_precon_pattern, SET_KS_ARGS, NIL);
			}
			cyblack_precon_pattern_set_logical_form_method(new_precon_pattern, copy_tree(logical_form));
			sublisp_throw($sym477$OUTER_CATCH_FOR_CYBLACK_PRECON_PATTERN_METHOD, new_precon_pattern);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_precon_pattern_logical_form(self, logical_form);
			    set_cyblack_precon_pattern_local_bindings(self, local_bindings);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_precon_pattern_method = Errors.handleThrowable(ccatch_env_var, $sym477$OUTER_CATCH_FOR_CYBLACK_PRECON_PATTERN_METHOD);
	    }
	    return catch_var_for_cyblack_precon_pattern_method;
	}
    }

    public static final SubLObject cyblack_precon_pattern_traverse_filling_datatype_bag_method(SubLObject self, SubLObject v_bag) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject unique_bindings = cyblack_precon_pattern_get_unique_bindings_method(self);
		SubLObject datatypes = NIL;
		if (NIL != cyblack_globals.$cyblack_tracing_on$.getDynamicValue(thread)) {
		    format(cyblack_globals.$cyblack_tracing_output_stream$.getDynamicValue(thread), cyblack_precondition_pattern_p2.$str_alt417$___TRAVERSE_FILLING_DATATYPE_BAG_, unique_bindings);
		}
		{
		    SubLObject list_expression = unique_bindings;
		    if (NIL == list_expression) {
			datatypes = NIL;
		    } else if (list_expression.isAtom()) {
			datatypes = list(list_expression);
		    } else if (NIL == list_expression.rest()) {
			{
			    SubLObject binding = list_expression.first();
			    datatypes = (NIL != cyblack_binding_get_type_method(binding)) ? ((SubLObject) (list(cyblack_binding_get_type_method(binding)))) : NIL;
			}
		    } else {
			{
			    SubLObject tail_cons = NIL;
			    SubLObject result = NIL;
			    datatypes = NIL;
			    {
				SubLObject cdolist_list_var = list_expression;
				SubLObject binding = NIL;
				for (binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), binding = cdolist_list_var.first()) {
				    result = (NIL != cyblack_binding_get_type_method(binding)) ? ((SubLObject) (list(cyblack_binding_get_type_method(binding)))) : NIL;
				    if (NIL != result) {
					if (NIL != tail_cons) {
					    rplacd(tail_cons, result);
					    tail_cons = last(result, UNPROVIDED);
					} else {
					    datatypes = (NIL != cyblack_binding_get_type_method(binding)) ? ((SubLObject) (list(cyblack_binding_get_type_method(binding)))) : NIL;
					    tail_cons = last(datatypes, UNPROVIDED);
					}
				    }
				}
			    }
			}
		    }

		}
		if (NIL != datatypes) {
		    {
			SubLObject cdolist_list_var = datatypes;
			SubLObject datatype = NIL;
			for (datatype = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), datatype = cdolist_list_var.first()) {
			    subloop_collections.basic_bag_add_method(v_bag, datatype);
			}
		    }
		}
		return v_bag;
	    }
	}
    }

    public static final SubLObject cyblack_precon_pattern_get_environment_method(SubLObject self) {
	{
	    SubLObject environment = get_cyblack_precon_pattern_environment(self);
	    return environment;
	}
    }

    public static final SubLObject cyblack_precon_pattern_set_environment_method(SubLObject self, SubLObject new_environment) {
	{
	    SubLObject catch_var_for_cyblack_precon_pattern_method = NIL;
	    SubLObject local_bindings = get_cyblack_precon_pattern_local_bindings(self);
	    SubLObject ks_args = get_cyblack_precon_pattern_ks_args(self);
	    SubLObject environment = get_cyblack_precon_pattern_environment(self);
	    try {
		try {
		    environment = new_environment;
		    if (NIL != ks_args) {
			cyblack_environment_set_outer_scope_method(ks_args, environment);
			sublisp_throw($sym483$OUTER_CATCH_FOR_CYBLACK_PRECON_PATTERN_METHOD, new_environment);
		    }
		    if (NIL != local_bindings) {
			cyblack_environment_set_outer_scope_method(local_bindings, environment);
		    }
		    sublisp_throw($sym483$OUTER_CATCH_FOR_CYBLACK_PRECON_PATTERN_METHOD, new_environment);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_precon_pattern_local_bindings(self, local_bindings);
			    set_cyblack_precon_pattern_ks_args(self, ks_args);
			    set_cyblack_precon_pattern_environment(self, environment);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_precon_pattern_method = Errors.handleThrowable(ccatch_env_var, $sym483$OUTER_CATCH_FOR_CYBLACK_PRECON_PATTERN_METHOD);
	    }
	    return catch_var_for_cyblack_precon_pattern_method;
	}
    }

    public static final SubLObject cyblack_precon_pattern_get_ks_args_method(SubLObject self) {
	{
	    SubLObject ks_args = get_cyblack_precon_pattern_ks_args(self);
	    return ks_args;
	}
    }

    public static final SubLObject cyblack_precon_pattern_set_ks_args_method(SubLObject self, SubLObject new_ks_args) {
	{
	    SubLObject catch_var_for_cyblack_precon_pattern_method = NIL;
	    SubLObject ks_args = get_cyblack_precon_pattern_ks_args(self);
	    SubLObject environment = get_cyblack_precon_pattern_environment(self);
	    try {
		try {
		    ks_args = new_ks_args;
		    if (NIL != environment) {
			cyblack_environment_set_outer_scope_method(ks_args, environment);
		    }
		    sublisp_throw($sym490$OUTER_CATCH_FOR_CYBLACK_PRECON_PATTERN_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_precon_pattern_ks_args(self, ks_args);
			    set_cyblack_precon_pattern_environment(self, environment);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_precon_pattern_method = Errors.handleThrowable(ccatch_env_var, $sym490$OUTER_CATCH_FOR_CYBLACK_PRECON_PATTERN_METHOD);
	    }
	    return catch_var_for_cyblack_precon_pattern_method;
	}
    }

    public static final SubLObject cyblack_precon_pattern_get_local_bindings_method(SubLObject self) {
	{
	    SubLObject local_bindings = get_cyblack_precon_pattern_local_bindings(self);
	    return local_bindings;
	}
    }

    public static final SubLObject cyblack_precon_pattern_set_local_bindings_method(SubLObject self, SubLObject new_local_bindings) {
	{
	    SubLObject catch_var_for_cyblack_precon_pattern_method = NIL;
	    SubLObject local_bindings = get_cyblack_precon_pattern_local_bindings(self);
	    try {
		try {
		    local_bindings = new_local_bindings;
		    sublisp_throw($sym494$OUTER_CATCH_FOR_CYBLACK_PRECON_PATTERN_METHOD, new_local_bindings);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_precon_pattern_local_bindings(self, local_bindings);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_precon_pattern_method = Errors.handleThrowable(ccatch_env_var, $sym494$OUTER_CATCH_FOR_CYBLACK_PRECON_PATTERN_METHOD);
	    }
	    return catch_var_for_cyblack_precon_pattern_method;
	}
    }

    public static final SubLObject cyblack_precon_pattern_get_logical_form_method(SubLObject self) {
	{
	    SubLObject logical_form = get_cyblack_precon_pattern_logical_form(self);
	    return logical_form;
	}
    }

    public static final SubLObject cyblack_precon_pattern_set_logical_form_method(SubLObject self, SubLObject new_logical_form) {
	{
	    SubLObject catch_var_for_cyblack_precon_pattern_method = NIL;
	    SubLObject logical_form = get_cyblack_precon_pattern_logical_form(self);
	    try {
		try {
		    logical_form = new_logical_form;
		    sublisp_throw($sym498$OUTER_CATCH_FOR_CYBLACK_PRECON_PATTERN_METHOD, new_logical_form);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_precon_pattern_logical_form(self, logical_form);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_precon_pattern_method = Errors.handleThrowable(ccatch_env_var, $sym498$OUTER_CATCH_FOR_CYBLACK_PRECON_PATTERN_METHOD);
	    }
	    return catch_var_for_cyblack_precon_pattern_method;
	}
    }

    public static final SubLObject cyblack_precon_pattern_get_unique_bindings_method(SubLObject self) {
	{
	    SubLObject local_bindings = get_cyblack_precon_pattern_local_bindings(self);
	    if (NIL != local_bindings) {
		return cyblack_environment_get_unique_bindings_method(local_bindings, UNPROVIDED);
	    } else {
		return NIL;
	    }
	}
    }

    public static final SubLObject cyblack_precon_pattern_get_value_method(SubLObject self, SubLObject outer_environment) {
	if (outer_environment == UNPROVIDED) {
	    outer_environment = NIL;
	}
	{
	    SubLObject logical_form = get_cyblack_precon_pattern_logical_form(self);
	    SubLObject local_bindings = get_cyblack_precon_pattern_local_bindings(self);
	    SubLObject result = NIL;
	    if (NIL != outer_environment) {
		if (NIL != logical_form) {
		    result = methods.funcall_instance_method_with_1_args(logical_form, GET_VALUE, outer_environment);
		}
	    } else {
		if (NIL != logical_form) {
		    result = methods.funcall_instance_method_with_1_args(logical_form, GET_VALUE, local_bindings);
		}
	    }
	    return result;
	}
    }

    public static final SubLObject get_cyblack_satisfaction_expression_logical_expression(SubLObject cyblack_satisfaction_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_satisfaction_expression, SIX_INTEGER, LOGICAL_EXPRESSION);
    }

    public static final SubLObject set_cyblack_satisfaction_expression_logical_expression(SubLObject cyblack_satisfaction_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_satisfaction_expression, value, SIX_INTEGER, LOGICAL_EXPRESSION);
    }

    public static final SubLObject get_cyblack_satisfaction_expression_local_bindings(SubLObject cyblack_satisfaction_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_satisfaction_expression, FIVE_INTEGER, LOCAL_BINDINGS);
    }

    public static final SubLObject set_cyblack_satisfaction_expression_local_bindings(SubLObject cyblack_satisfaction_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_satisfaction_expression, value, FIVE_INTEGER, LOCAL_BINDINGS);
    }

    public static final SubLObject get_cyblack_satisfaction_expression_environment(SubLObject cyblack_satisfaction_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_satisfaction_expression, FOUR_INTEGER, ENVIRONMENT);
    }

    public static final SubLObject set_cyblack_satisfaction_expression_environment(SubLObject cyblack_satisfaction_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_satisfaction_expression, value, FOUR_INTEGER, ENVIRONMENT);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_satisfaction_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_satisfaction_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_SATISFACTION_EXPRESSION, ENVIRONMENT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_SATISFACTION_EXPRESSION, LOCAL_BINDINGS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_SATISFACTION_EXPRESSION, LOGICAL_EXPRESSION, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_satisfaction_expression_p(SubLObject cyblack_satisfaction_expression) {
	return classes.subloop_instanceof_class(cyblack_satisfaction_expression, CYBLACK_SATISFACTION_EXPRESSION);
    }

    public static final SubLObject cyblack_satisfaction_expression_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_satisfaction_expression_method = NIL;
	    SubLObject logical_expression = get_cyblack_satisfaction_expression_logical_expression(self);
	    SubLObject local_bindings = get_cyblack_satisfaction_expression_local_bindings(self);
	    SubLObject environment = get_cyblack_satisfaction_expression_environment(self);
	    try {
		try {
		    cyblack_pattern_initialize_method(self);
		    environment = NIL;
		    local_bindings = NIL;
		    logical_expression = NIL;
		    sublisp_throw($sym510$OUTER_CATCH_FOR_CYBLACK_SATISFACTION_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_satisfaction_expression_logical_expression(self, logical_expression);
			    set_cyblack_satisfaction_expression_local_bindings(self, local_bindings);
			    set_cyblack_satisfaction_expression_environment(self, environment);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_satisfaction_expression_method = Errors.handleThrowable(ccatch_env_var, $sym510$OUTER_CATCH_FOR_CYBLACK_SATISFACTION_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_satisfaction_expression_method;
	}
    }

    public static final SubLObject cyblack_satisfaction_expression_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject logical_expression = get_cyblack_satisfaction_expression_logical_expression(self);
	    SubLObject local_bindings = get_cyblack_satisfaction_expression_local_bindings(self);
	    if (NIL != local_bindings) {
		format(stream, cyblack_precondition_pattern_p2.$str_alt513$__SATISFACTION_EXPRESSION___SATIS, cyblack_environment_listify_local_bindings_method(local_bindings), logical_expression);
	    } else {
		format(stream, cyblack_precondition_pattern_p2.$str_alt514$__SATISFACTION_EXRESSION__UNINITI);
	    }
	    return self;
	}
    }

    public static final SubLObject cyblack_satisfaction_expression_traverse_filling_datatype_bag_method(SubLObject self, SubLObject v_bag) {
	{
	    SubLObject unique_bindings = (NIL != cyblack_satisfaction_expression_get_local_bindings_method(self)) ? ((SubLObject) (cyblack_environment_get_unique_bindings_method(cyblack_satisfaction_expression_get_local_bindings_method(self), UNPROVIDED))) : NIL;
	    SubLObject datatypes = NIL;
	    SubLObject list_expression = unique_bindings;
	    if (NIL == list_expression) {
		datatypes = NIL;
	    } else if (list_expression.isAtom()) {
		datatypes = list(list_expression);
	    } else if (NIL == list_expression.rest()) {
		{
		    SubLObject binding = list_expression.first();
		    datatypes = (NIL != cyblack_binding_get_type_method(binding)) ? ((SubLObject) (list(cyblack_binding_get_type_method(binding)))) : NIL;
		}
	    } else {
		{
		    SubLObject tail_cons = NIL;
		    SubLObject result = NIL;
		    datatypes = NIL;
		    {
			SubLObject cdolist_list_var = list_expression;
			SubLObject binding = NIL;
			for (binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), binding = cdolist_list_var.first()) {
			    result = (NIL != cyblack_binding_get_type_method(binding)) ? ((SubLObject) (list(cyblack_binding_get_type_method(binding)))) : NIL;
			    if (NIL != result) {
				if (NIL != tail_cons) {
				    rplacd(tail_cons, result);
				    tail_cons = last(result, UNPROVIDED);
				} else {
				    datatypes = (NIL != cyblack_binding_get_type_method(binding)) ? ((SubLObject) (list(cyblack_binding_get_type_method(binding)))) : NIL;
				    tail_cons = last(datatypes, UNPROVIDED);
				}
			    }
			}
		    }
		}
	    }

	    if (NIL != datatypes) {
		{
		    SubLObject cdolist_list_var = datatypes;
		    SubLObject datatype = NIL;
		    for (datatype = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), datatype = cdolist_list_var.first()) {
			subloop_collections.basic_bag_add_method(v_bag, datatype);
		    }
		}
	    }
	    return v_bag;
	}
    }

    public static final SubLObject cyblack_satisfaction_expression_get_value_method(SubLObject self, SubLObject passed_environment) {
	if (passed_environment == UNPROVIDED) {
	    passed_environment = NIL;
	}
	{
	    SubLObject logical_expression = get_cyblack_satisfaction_expression_logical_expression(self);
	    SubLObject local_bindings = get_cyblack_satisfaction_expression_local_bindings(self);
	    SubLObject result = NIL;
	    if (NIL != passed_environment) {
		if (NIL != logical_expression) {
		    result = methods.funcall_instance_method_with_1_args(logical_expression, GET_VALUE, passed_environment);
		}
	    } else {
		if (NIL != logical_expression) {
		    result = methods.funcall_instance_method_with_1_args(logical_expression, GET_VALUE, local_bindings);
		}
	    }
	    return result;
	}
    }

    public static final SubLObject cyblack_satisfaction_expression_get_environment_method(SubLObject self) {
	{
	    SubLObject environment = get_cyblack_satisfaction_expression_environment(self);
	    return environment;
	}
    }

    public static final SubLObject cyblack_satisfaction_expression_set_environment_method(SubLObject self, SubLObject new_environment) {
	{
	    SubLObject catch_var_for_cyblack_satisfaction_expression_method = NIL;
	    SubLObject local_bindings = get_cyblack_satisfaction_expression_local_bindings(self);
	    SubLObject environment = get_cyblack_satisfaction_expression_environment(self);
	    try {
		try {
		    environment = new_environment;
		    if (NIL != local_bindings) {
			cyblack_environment_set_outer_scope_method(local_bindings, environment);
		    }
		    sublisp_throw($sym523$OUTER_CATCH_FOR_CYBLACK_SATISFACTION_EXPRESSION_METHOD, new_environment);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_satisfaction_expression_local_bindings(self, local_bindings);
			    set_cyblack_satisfaction_expression_environment(self, environment);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_satisfaction_expression_method = Errors.handleThrowable(ccatch_env_var, $sym523$OUTER_CATCH_FOR_CYBLACK_SATISFACTION_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_satisfaction_expression_method;
	}
    }

    public static final SubLObject cyblack_satisfaction_expression_get_local_bindings_method(SubLObject self) {
	{
	    SubLObject local_bindings = get_cyblack_satisfaction_expression_local_bindings(self);
	    return local_bindings;
	}
    }

    public static final SubLObject cyblack_satisfaction_expression_set_local_bindings_method(SubLObject self, SubLObject new_local_bindings) {
	{
	    SubLObject catch_var_for_cyblack_satisfaction_expression_method = NIL;
	    SubLObject local_bindings = get_cyblack_satisfaction_expression_local_bindings(self);
	    try {
		try {
		    local_bindings = new_local_bindings;
		    sublisp_throw($sym526$OUTER_CATCH_FOR_CYBLACK_SATISFACTION_EXPRESSION_METHOD, new_local_bindings);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_satisfaction_expression_local_bindings(self, local_bindings);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_satisfaction_expression_method = Errors.handleThrowable(ccatch_env_var, $sym526$OUTER_CATCH_FOR_CYBLACK_SATISFACTION_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_satisfaction_expression_method;
	}
    }

    public static final SubLObject cyblack_satisfaction_expression_get_logical_expression_method(SubLObject self) {
	{
	    SubLObject logical_expression = get_cyblack_satisfaction_expression_logical_expression(self);
	    return logical_expression;
	}
    }

    public static final SubLObject cyblack_satisfaction_expression_set_logical_expression_method(SubLObject self, SubLObject new_logical_expression) {
	{
	    SubLObject catch_var_for_cyblack_satisfaction_expression_method = NIL;
	    SubLObject logical_expression = get_cyblack_satisfaction_expression_logical_expression(self);
	    try {
		try {
		    logical_expression = new_logical_expression;
		    sublisp_throw($sym534$OUTER_CATCH_FOR_CYBLACK_SATISFACTION_EXPRESSION_METHOD, new_logical_expression);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_satisfaction_expression_logical_expression(self, logical_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_satisfaction_expression_method = Errors.handleThrowable(ccatch_env_var, $sym534$OUTER_CATCH_FOR_CYBLACK_SATISFACTION_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_satisfaction_expression_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_simple_satisfaction_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_simple_satisfaction_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_SATISFACTION_EXPRESSION, ENVIRONMENT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_SATISFACTION_EXPRESSION, LOCAL_BINDINGS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_SATISFACTION_EXPRESSION, LOGICAL_EXPRESSION, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_simple_satisfaction_expression_p(SubLObject cyblack_simple_satisfaction_expression) {
	return classes.subloop_instanceof_class(cyblack_simple_satisfaction_expression, CYBLACK_SIMPLE_SATISFACTION_EXPRESSION);
    }

    public static final SubLObject cyblack_simple_satisfaction_expression_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject logical_expression = get_cyblack_satisfaction_expression_logical_expression(self);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt541$__SIMPLE_SATISFACTION_EXPRESSION_, logical_expression);
	    return self;
	}
    }

    public static final SubLObject get_cyblack_type_expression_base_type(SubLObject cyblack_type_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_type_expression, FOUR_INTEGER, BASE_TYPE);
    }

    public static final SubLObject set_cyblack_type_expression_base_type(SubLObject cyblack_type_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_type_expression, value, FOUR_INTEGER, BASE_TYPE);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_type_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_type_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_TYPE_EXPRESSION, BASE_TYPE, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_type_expression_p(SubLObject cyblack_type_expression) {
	return classes.subloop_instanceof_class(cyblack_type_expression, CYBLACK_TYPE_EXPRESSION);
    }

    public static final SubLObject cyblack_type_expression_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_type_expression_method = NIL;
	    SubLObject base_type = get_cyblack_type_expression_base_type(self);
	    try {
		try {
		    cyblack_pattern_initialize_method(self);
		    base_type = NIL;
		    sublisp_throw($sym550$OUTER_CATCH_FOR_CYBLACK_TYPE_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_type_expression_base_type(self, base_type);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_type_expression_method = Errors.handleThrowable(ccatch_env_var, $sym550$OUTER_CATCH_FOR_CYBLACK_TYPE_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_type_expression_method;
	}
    }

    public static final SubLObject cyblack_type_expression_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject base_type = get_cyblack_type_expression_base_type(self);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt553$__TYPE__S_, base_type);
	    return self;
	}
    }

    public static final SubLObject cyblack_type_expression_get_base_type_method(SubLObject self) {
	{
	    SubLObject base_type = get_cyblack_type_expression_base_type(self);
	    return base_type;
	}
    }

    public static final SubLObject cyblack_type_expression_set_base_type_method(SubLObject self, SubLObject new_base_type) {
	{
	    SubLObject catch_var_for_cyblack_type_expression_method = NIL;
	    SubLObject base_type = get_cyblack_type_expression_base_type(self);
	    try {
		try {
		    base_type = new_base_type;
		    sublisp_throw($sym561$OUTER_CATCH_FOR_CYBLACK_TYPE_EXPRESSION_METHOD, new_base_type);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_type_expression_base_type(self, base_type);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_type_expression_method = Errors.handleThrowable(ccatch_env_var, $sym561$OUTER_CATCH_FOR_CYBLACK_TYPE_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_type_expression_method;
	}
    }

    public static final SubLObject cyblack_type_expression_get_panel_method(SubLObject self, SubLObject blackboard, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    SubLObject base_type = get_cyblack_type_expression_base_type(self);
	    if (NIL != base_type) {
		return cyblack_datatype.cyblack_datatype_get_panel(base_type, blackboard, UNPROVIDED);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_type_expression_get_typename_method(SubLObject self) {
	{
	    SubLObject base_type = get_cyblack_type_expression_base_type(self);
	    if (NIL != base_type) {
		return methods.funcall_instance_method_with_0_args(base_type, GET_TYPENAME);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_type_expression_get_supertypes_method(SubLObject self) {
	{
	    SubLObject base_type = get_cyblack_type_expression_base_type(self);
	    if (NIL != base_type) {
		return methods.funcall_instance_method_with_0_args(base_type, GET_SUPERTYPES);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_type_expression_set_supertypes_method(SubLObject self, SubLObject new_supertypes) {
	return new_supertypes;
    }

    public static final SubLObject cyblack_type_expression_get_subtypes_method(SubLObject self) {
	{
	    SubLObject base_type = get_cyblack_type_expression_base_type(self);
	    if (NIL != base_type) {
		return methods.funcall_instance_method_with_0_args(base_type, GET_SUBTYPES);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_type_expression_set_subtypes_method(SubLObject self, SubLObject new_subtypes) {
	return new_subtypes;
    }

    public static final SubLObject cyblack_type_expression_subtype_p_method(SubLObject self, SubLObject other_datatype) {
	{
	    SubLObject base_type = get_cyblack_type_expression_base_type(self);
	    if (other_datatype == self) {
		return T;
	    }
	    if (NIL != base_type) {
		return methods.funcall_instance_method_with_1_args(base_type, SUBTYPE_P, other_datatype);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_type_expression_instance_of_p_method(SubLObject self, SubLObject posting) {
	{
	    SubLObject base_type = get_cyblack_type_expression_base_type(self);
	    if (((NIL != base_type) && (NIL != posting)) && (NIL != methods.funcall_instance_method_with_1_args(base_type, INSTANCE_OF_P, posting))) {
		return T;
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_type_expression_set_panel_type_method(SubLObject self, SubLObject new_panel_type) {
	return new_panel_type;
    }

    public static final SubLObject cyblack_type_expression_get_posting_type_method(SubLObject self) {
	{
	    SubLObject base_type = get_cyblack_type_expression_base_type(self);
	    if (NIL != base_type) {
		return methods.funcall_instance_method_with_0_args(base_type, GET_POSTING_TYPE);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_type_expression_set_posting_type_method(SubLObject self, SubLObject new_posting_type) {
	return new_posting_type;
    }

    public static final SubLObject cyblack_type_expression_create_panel_method(SubLObject self, SubLObject blackboard) {
	{
	    SubLObject base_type = get_cyblack_type_expression_base_type(self);
	    if (NIL != base_type) {
		return methods.funcall_instance_method_with_1_args(base_type, CREATE_PANEL, blackboard);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_type_expression_create_posting_method(SubLObject self) {
	{
	    SubLObject base_type = get_cyblack_type_expression_base_type(self);
	    if (NIL != base_type) {
		return methods.funcall_instance_method_with_0_args(base_type, CREATE_POSTING);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_type_expression_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    SubLObject base_type = get_cyblack_type_expression_base_type(self);
	    return base_type;
	}
    }

    public static final SubLObject get_cyblack_subtype_expression_args(SubLObject cyblack_subtype_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_subtype_expression, SIX_INTEGER, ARGS);
    }

    public static final SubLObject set_cyblack_subtype_expression_args(SubLObject cyblack_subtype_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_subtype_expression, value, SIX_INTEGER, ARGS);
    }

    public static final SubLObject get_cyblack_subtype_expression_predicator_method(SubLObject cyblack_subtype_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_subtype_expression, FIVE_INTEGER, PREDICATOR_METHOD);
    }

    public static final SubLObject set_cyblack_subtype_expression_predicator_method(SubLObject cyblack_subtype_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_subtype_expression, value, FIVE_INTEGER, PREDICATOR_METHOD);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_subtype_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_subtype_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_TYPE_EXPRESSION, BASE_TYPE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_SUBTYPE_EXPRESSION, PREDICATOR_METHOD, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_SUBTYPE_EXPRESSION, ARGS, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_subtype_expression_p(SubLObject cyblack_subtype_expression) {
	return classes.subloop_instanceof_class(cyblack_subtype_expression, CYBLACK_SUBTYPE_EXPRESSION);
    }

    public static final SubLObject cyblack_subtype_expression_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_subtype_expression_method = NIL;
	    SubLObject predicator_method = get_cyblack_subtype_expression_predicator_method(self);
	    try {
		try {
		    cyblack_type_expression_initialize_method(self);
		    predicator_method = NIL;
		    sublisp_throw($sym619$OUTER_CATCH_FOR_CYBLACK_SUBTYPE_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_subtype_expression_predicator_method(self, predicator_method);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_subtype_expression_method = Errors.handleThrowable(ccatch_env_var, $sym619$OUTER_CATCH_FOR_CYBLACK_SUBTYPE_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_subtype_expression_method;
	}
    }

    public static final SubLObject cyblack_subtype_expression_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject predicator_method = get_cyblack_subtype_expression_predicator_method(self);
	    SubLObject base_type = get_cyblack_type_expression_base_type(self);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt622$__SUBTYPE__S__S, base_type, predicator_method);
	    cyblack_subtype_expression_print_args_method(self, stream);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt623$_);
	    return self;
	}
    }

    public static final SubLObject cyblack_subtype_expression_print_args_method(SubLObject self, SubLObject stream) {
	{
	    SubLObject args = get_cyblack_subtype_expression_args(self);
	    SubLObject cdolist_list_var = args;
	    SubLObject arg = NIL;
	    for (arg = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), arg = cdolist_list_var.first()) {
		format(stream, cyblack_precondition_pattern_p2.$str_alt629$__S, arg);
	    }
	    return self;
	}
    }

    public static final SubLObject cyblack_subtype_expression_get_predicator_method_method(SubLObject self) {
	{
	    SubLObject predicator_method = get_cyblack_subtype_expression_predicator_method(self);
	    return predicator_method;
	}
    }

    public static final SubLObject cyblack_subtype_expression_set_predicator_method_method(SubLObject self, SubLObject new_predicator) {
	{
	    SubLObject catch_var_for_cyblack_subtype_expression_method = NIL;
	    SubLObject predicator_method = get_cyblack_subtype_expression_predicator_method(self);
	    try {
		try {
		    predicator_method = new_predicator;
		    sublisp_throw($sym637$OUTER_CATCH_FOR_CYBLACK_SUBTYPE_EXPRESSION_METHOD, new_predicator);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_subtype_expression_predicator_method(self, predicator_method);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_subtype_expression_method = Errors.handleThrowable(ccatch_env_var, $sym637$OUTER_CATCH_FOR_CYBLACK_SUBTYPE_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_subtype_expression_method;
	}
    }

    public static final SubLObject cyblack_subtype_expression_get_args_method(SubLObject self) {
	{
	    SubLObject args = get_cyblack_subtype_expression_args(self);
	    return args;
	}
    }

    public static final SubLObject cyblack_subtype_expression_set_args_method(SubLObject self, SubLObject new_args) {
	{
	    SubLObject catch_var_for_cyblack_subtype_expression_method = NIL;
	    SubLObject args = get_cyblack_subtype_expression_args(self);
	    try {
		try {
		    args = new_args;
		    sublisp_throw($sym645$OUTER_CATCH_FOR_CYBLACK_SUBTYPE_EXPRESSION_METHOD, new_args);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_subtype_expression_args(self, args);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_subtype_expression_method = Errors.handleThrowable(ccatch_env_var, $sym645$OUTER_CATCH_FOR_CYBLACK_SUBTYPE_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_subtype_expression_method;
	}
    }

    public static final SubLObject cyblack_subtype_expression_get_panel_method(SubLObject self, SubLObject blackboard, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    SubLObject args = get_cyblack_subtype_expression_args(self);
	    SubLObject predicator_method = get_cyblack_subtype_expression_predicator_method(self);
	    SubLObject base_panel = cyblack_type_expression_get_panel_method(self, blackboard, UNPROVIDED);
	    SubLObject args_evaluated = NIL;
	    SubLObject list_expression = args;
	    if (NIL == list_expression) {
		args_evaluated = NIL;
	    } else if (list_expression.isAtom()) {
		args_evaluated = list(list_expression);
	    } else if (NIL == list_expression.rest()) {
		{
		    SubLObject arg = list_expression.first();
		    args_evaluated = list(NIL != cyblack_value_expression_p(arg) ? ((SubLObject) (methods.funcall_instance_method_with_1_args(arg, GET_VALUE, environment))) : arg);
		}
	    } else {
		{
		    SubLObject tail_cons = NIL;
		    SubLObject result = NIL;
		    {
			SubLObject arg = list_expression.first();
			args_evaluated = list(NIL != cyblack_value_expression_p(arg) ? ((SubLObject) (methods.funcall_instance_method_with_1_args(arg, GET_VALUE, environment))) : arg);
			tail_cons = args_evaluated;
		    }
		    {
			SubLObject cdolist_list_var = list_expression.rest();
			SubLObject arg = NIL;
			for (arg = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), arg = cdolist_list_var.first()) {
			    result = list(NIL != cyblack_value_expression_p(arg) ? ((SubLObject) (methods.funcall_instance_method_with_1_args(arg, GET_VALUE, environment))) : arg);
			    rplacd(tail_cons, result);
			    tail_cons = result;
			}
		    }
		}
	    }

	    if ((NIL != base_panel) && (NIL != predicator_method)) {
		{
		    SubLObject virtual_panel = object.new_object_instance(CYBLACK_BASIC_VIRTUAL_PANEL);
		    cyblack_panel.cyblack_basic_virtual_panel_set_args_method(virtual_panel, args_evaluated);
		    cyblack_panel.cyblack_basic_virtual_panel_set_subset_predicator_method(virtual_panel, PREDICATOR_METHOD, UNPROVIDED);
		    cyblack_panel.cyblack_basic_virtual_panel_set_base_panel_method(virtual_panel, base_panel);
		    return virtual_panel;
		}
	    }
	    return base_panel;
	}
    }

    public static final SubLObject cyblack_subtype_expression_get_typename_method(SubLObject self) {
	{
	    SubLObject string = NIL;
	    SubLObject stream = NIL;
	    try {
		stream = make_private_string_output_stream();
		cyblack_subtype_expression_print_method(self, stream, ZERO_INTEGER);
		string = get_output_stream_string(stream);
	    } finally {
		{
		    SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
		    try {
			bind($is_thread_performing_cleanupP$, T);
			close(stream, UNPROVIDED);
		    } finally {
			rebind($is_thread_performing_cleanupP$, _prev_bind_0);
		    }
		}
	    }
	    return string;
	}
    }

    public static final SubLObject cyblack_subtype_expression_get_supertypes_method(SubLObject self) {
	{
	    SubLObject base_type = get_cyblack_type_expression_base_type(self);
	    if (NIL != base_type) {
		return list(base_type);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_subtype_expression_get_subtypes_method(SubLObject self) {
	return NIL;
    }

    public static final SubLObject cyblack_subtype_expression_subtype_p_method(SubLObject self, SubLObject other_datatype) {
	{
	    SubLObject base_type = get_cyblack_type_expression_base_type(self);
	    if (self == other_datatype) {
		return T;
	    }
	    if (NIL != base_type) {
		return methods.funcall_instance_method_with_1_args(base_type, SUBTYPE_P, other_datatype);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_subtype_expression_instance_of_p_method(SubLObject self, SubLObject posting) {
	{
	    SubLObject args = get_cyblack_subtype_expression_args(self);
	    SubLObject predicator_method = get_cyblack_subtype_expression_predicator_method(self);
	    SubLObject base_type = get_cyblack_type_expression_base_type(self);
	    if (((NIL != base_type) && (NIL != posting)) && (NIL != methods.funcall_instance_method_with_1_args(base_type, INSTANCE_OF_P, posting))) {
		if (NIL != predicator_method) {
		    return NIL != classes_utilities.apply_instance_method(posting, predicator_method, args) ? ((SubLObject) (T)) : NIL;
		} else {
		    return T;
		}
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_subtype_expression_create_panel_method(SubLObject self, SubLObject blackboard) {
	return NIL;
    }

    public static final SubLObject get_cyblack_panel_expression_blackboard(SubLObject cyblack_panel_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_panel_expression, FIVE_INTEGER, BLACKBOARD);
    }

    public static final SubLObject set_cyblack_panel_expression_blackboard(SubLObject cyblack_panel_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_panel_expression, value, FIVE_INTEGER, BLACKBOARD);
    }

    public static final SubLObject get_cyblack_panel_expression_type_expression(SubLObject cyblack_panel_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_panel_expression, FOUR_INTEGER, TYPE_EXPRESSION);
    }

    public static final SubLObject set_cyblack_panel_expression_type_expression(SubLObject cyblack_panel_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_panel_expression, value, FOUR_INTEGER, TYPE_EXPRESSION);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_panel_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_panel_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PANEL_EXPRESSION, TYPE_EXPRESSION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PANEL_EXPRESSION, BLACKBOARD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_panel_expression_p(SubLObject cyblack_panel_expression) {
	return classes.subloop_instanceof_class(cyblack_panel_expression, CYBLACK_PANEL_EXPRESSION);
    }

    public static final SubLObject cyblack_panel_expression_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_panel_expression_method = NIL;
	    SubLObject blackboard = get_cyblack_panel_expression_blackboard(self);
	    SubLObject type_expression = get_cyblack_panel_expression_type_expression(self);
	    try {
		try {
		    cyblack_pattern_initialize_method(self);
		    type_expression = NIL;
		    blackboard = NIL;
		    sublisp_throw($sym669$OUTER_CATCH_FOR_CYBLACK_PANEL_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_panel_expression_blackboard(self, blackboard);
			    set_cyblack_panel_expression_type_expression(self, type_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_panel_expression_method = Errors.handleThrowable(ccatch_env_var, $sym669$OUTER_CATCH_FOR_CYBLACK_PANEL_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_panel_expression_method;
	}
    }

    public static final SubLObject cyblack_panel_expression_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject catch_var_for_cyblack_panel_expression_method = NIL;
	    SubLObject type_expression = get_cyblack_panel_expression_type_expression(self);
	    try {
		try {
		    format(stream, cyblack_precondition_pattern_p2.$str_alt673$__PANEL__S_, type_expression);
		    sublisp_throw($sym672$OUTER_CATCH_FOR_CYBLACK_PANEL_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_panel_expression_type_expression(self, type_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_panel_expression_method = Errors.handleThrowable(ccatch_env_var, $sym672$OUTER_CATCH_FOR_CYBLACK_PANEL_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_panel_expression_method;
	}
    }

    public static final SubLObject cyblack_panel_expression_get_type_expression_method(SubLObject self) {
	{
	    SubLObject type_expression = get_cyblack_panel_expression_type_expression(self);
	    return type_expression;
	}
    }

    public static final SubLObject cyblack_panel_expression_set_type_expression_method(SubLObject self, SubLObject new_type_expression) {
	{
	    SubLObject catch_var_for_cyblack_panel_expression_method = NIL;
	    SubLObject type_expression = get_cyblack_panel_expression_type_expression(self);
	    try {
		try {
		    type_expression = new_type_expression;
		    sublisp_throw($sym681$OUTER_CATCH_FOR_CYBLACK_PANEL_EXPRESSION_METHOD, new_type_expression);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_panel_expression_type_expression(self, type_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_panel_expression_method = Errors.handleThrowable(ccatch_env_var, $sym681$OUTER_CATCH_FOR_CYBLACK_PANEL_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_panel_expression_method;
	}
    }

    public static final SubLObject cyblack_panel_expression_get_blackboard_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_panel_expression_method = NIL;
	    SubLObject blackboard = get_cyblack_panel_expression_blackboard(self);
	    SubLObject application = cyblack_object.get_cyblack_object_application(self);
	    try {
		try {
		    if (NIL != blackboard) {
			sublisp_throw($sym685$OUTER_CATCH_FOR_CYBLACK_PANEL_EXPRESSION_METHOD, blackboard);
		    }
		    blackboard = cyblack_application.cyblack_application_get_blackboard(application);
		    sublisp_throw($sym685$OUTER_CATCH_FOR_CYBLACK_PANEL_EXPRESSION_METHOD, blackboard);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_panel_expression_blackboard(self, blackboard);
			    cyblack_object.set_cyblack_object_application(self, application);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_panel_expression_method = Errors.handleThrowable(ccatch_env_var, $sym685$OUTER_CATCH_FOR_CYBLACK_PANEL_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_panel_expression_method;
	}
    }

    public static final SubLObject cyblack_panel_expression_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    SubLObject catch_var_for_cyblack_panel_expression_method = NIL;
	    SubLObject type_expression = get_cyblack_panel_expression_type_expression(self);
	    try {
		try {
		    if (NIL != type_expression) {
			sublisp_throw($sym688$OUTER_CATCH_FOR_CYBLACK_PANEL_EXPRESSION_METHOD, cyblack_type_expression_get_panel_method(type_expression, cyblack_panel_expression_get_blackboard_method(self), UNPROVIDED));
		    }
		    sublisp_throw($sym688$OUTER_CATCH_FOR_CYBLACK_PANEL_EXPRESSION_METHOD, NIL);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_panel_expression_type_expression(self, type_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_panel_expression_method = Errors.handleThrowable(ccatch_env_var, $sym688$OUTER_CATCH_FOR_CYBLACK_PANEL_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_panel_expression_method;
	}
    }

    public static final SubLObject get_cyblack_get_expression_key_expression(SubLObject cyblack_get_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_get_expression, FIVE_INTEGER, KEY_EXPRESSION);
    }

    public static final SubLObject set_cyblack_get_expression_key_expression(SubLObject cyblack_get_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_get_expression, value, FIVE_INTEGER, KEY_EXPRESSION);
    }

    public static final SubLObject get_cyblack_get_expression_panel_expression(SubLObject cyblack_get_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_get_expression, FOUR_INTEGER, PANEL_EXPRESSION);
    }

    public static final SubLObject set_cyblack_get_expression_panel_expression(SubLObject cyblack_get_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_get_expression, value, FOUR_INTEGER, PANEL_EXPRESSION);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_get_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_get_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_GET_EXPRESSION, PANEL_EXPRESSION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_GET_EXPRESSION, KEY_EXPRESSION, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_get_expression_p(SubLObject cyblack_get_expression) {
	return classes.subloop_instanceof_class(cyblack_get_expression, CYBLACK_GET_EXPRESSION);
    }

    public static final SubLObject cyblack_get_expression_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_get_expression_method = NIL;
	    SubLObject key_expression = get_cyblack_get_expression_key_expression(self);
	    SubLObject panel_expression = get_cyblack_get_expression_panel_expression(self);
	    try {
		try {
		    cyblack_pattern_initialize_method(self);
		    panel_expression = NIL;
		    key_expression = NIL;
		    sublisp_throw($sym697$OUTER_CATCH_FOR_CYBLACK_GET_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_get_expression_key_expression(self, key_expression);
			    set_cyblack_get_expression_panel_expression(self, panel_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_get_expression_method = Errors.handleThrowable(ccatch_env_var, $sym697$OUTER_CATCH_FOR_CYBLACK_GET_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_get_expression_method;
	}
    }

    public static final SubLObject cyblack_get_expression_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject catch_var_for_cyblack_get_expression_method = NIL;
	    SubLObject key_expression = get_cyblack_get_expression_key_expression(self);
	    SubLObject panel_expression = get_cyblack_get_expression_panel_expression(self);
	    try {
		try {
		    format(stream, cyblack_precondition_pattern_p2.$str_alt701$____GET__S__S_, panel_expression, key_expression);
		    sublisp_throw($sym700$OUTER_CATCH_FOR_CYBLACK_GET_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_get_expression_key_expression(self, key_expression);
			    set_cyblack_get_expression_panel_expression(self, panel_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_get_expression_method = Errors.handleThrowable(ccatch_env_var, $sym700$OUTER_CATCH_FOR_CYBLACK_GET_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_get_expression_method;
	}
    }

    public static final SubLObject cyblack_get_expression_get_panel_expression_method(SubLObject self) {
	{
	    SubLObject panel_expression = get_cyblack_get_expression_panel_expression(self);
	    return panel_expression;
	}
    }

    public static final SubLObject cyblack_get_expression_set_panel_expression_method(SubLObject self, SubLObject new_panel_expression) {
	{
	    SubLObject catch_var_for_cyblack_get_expression_method = NIL;
	    SubLObject panel_expression = get_cyblack_get_expression_panel_expression(self);
	    try {
		try {
		    panel_expression = new_panel_expression;
		    sublisp_throw($sym709$OUTER_CATCH_FOR_CYBLACK_GET_EXPRESSION_METHOD, new_panel_expression);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_get_expression_panel_expression(self, panel_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_get_expression_method = Errors.handleThrowable(ccatch_env_var, $sym709$OUTER_CATCH_FOR_CYBLACK_GET_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_get_expression_method;
	}
    }

    public static final SubLObject cyblack_get_expression_get_key_expression_method(SubLObject self) {
	{
	    SubLObject key_expression = get_cyblack_get_expression_key_expression(self);
	    return key_expression;
	}
    }

    public static final SubLObject cyblack_get_expression_set_key_expression_method(SubLObject self, SubLObject new_key_expression) {
	{
	    SubLObject catch_var_for_cyblack_get_expression_method = NIL;
	    SubLObject key_expression = get_cyblack_get_expression_key_expression(self);
	    try {
		try {
		    key_expression = new_key_expression;
		    sublisp_throw($sym717$OUTER_CATCH_FOR_CYBLACK_GET_EXPRESSION_METHOD, new_key_expression);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_get_expression_key_expression(self, key_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_get_expression_method = Errors.handleThrowable(ccatch_env_var, $sym717$OUTER_CATCH_FOR_CYBLACK_GET_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_get_expression_method;
	}
    }

    public static final SubLObject cyblack_get_expression_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    SubLObject catch_var_for_cyblack_get_expression_method = NIL;
	    SubLObject key_expression = get_cyblack_get_expression_key_expression(self);
	    SubLObject panel_expression = get_cyblack_get_expression_panel_expression(self);
	    try {
		try {
		    if ((NIL != panel_expression) && (NIL != key_expression)) {
			{
			    SubLObject panel = cyblack_panel_expression_get_value_method(panel_expression, environment);
			    SubLObject key = methods.funcall_instance_method_with_1_args(key_expression, GET_VALUE, environment);
			    if ((NIL != panel) && (NIL != key)) {
				sublisp_throw($sym720$OUTER_CATCH_FOR_CYBLACK_GET_EXPRESSION_METHOD, methods.funcall_instance_method_with_1_args(panel, GET, key));
			    }
			}
		    }
		    sublisp_throw($sym720$OUTER_CATCH_FOR_CYBLACK_GET_EXPRESSION_METHOD, NIL);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_get_expression_key_expression(self, key_expression);
			    set_cyblack_get_expression_panel_expression(self, panel_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_get_expression_method = Errors.handleThrowable(ccatch_env_var, $sym720$OUTER_CATCH_FOR_CYBLACK_GET_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_get_expression_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_basic_logical_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_basic_logical_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_basic_logical_expression_p(SubLObject cyblack_basic_logical_expression) {
	return classes.subloop_instanceof_class(cyblack_basic_logical_expression, CYBLACK_BASIC_LOGICAL_EXPRESSION);
    }

    public static final SubLObject cyblack_basic_logical_expression_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	return NIL;
    }

    public static final SubLObject get_cyblack_existential_robot_accumulated_state(SubLObject cyblack_existential_robot) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_existential_robot, EIGHT_INTEGER, ACCUMULATED_STATE);
    }

    public static final SubLObject set_cyblack_existential_robot_accumulated_state(SubLObject cyblack_existential_robot, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_existential_robot, value, EIGHT_INTEGER, ACCUMULATED_STATE);
    }

    public static final SubLObject get_cyblack_existential_robot_last_evaluation_result(SubLObject cyblack_existential_robot) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_existential_robot, SEVEN_INTEGER, LAST_EVALUATION_RESULT);
    }

    public static final SubLObject set_cyblack_existential_robot_last_evaluation_result(SubLObject cyblack_existential_robot, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_existential_robot, value, SEVEN_INTEGER, LAST_EVALUATION_RESULT);
    }

    public static final SubLObject get_cyblack_existential_robot_binding(SubLObject cyblack_existential_robot) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_existential_robot, SIX_INTEGER, BINDING);
    }

    public static final SubLObject set_cyblack_existential_robot_binding(SubLObject cyblack_existential_robot, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_existential_robot, value, SIX_INTEGER, BINDING);
    }

    public static final SubLObject get_cyblack_existential_robot_logical_expression(SubLObject cyblack_existential_robot) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_existential_robot, FIVE_INTEGER, LOGICAL_EXPRESSION);
    }

    public static final SubLObject set_cyblack_existential_robot_logical_expression(SubLObject cyblack_existential_robot, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_existential_robot, value, FIVE_INTEGER, LOGICAL_EXPRESSION);
    }

    public static final SubLObject get_cyblack_existential_robot_environment(SubLObject cyblack_existential_robot) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_existential_robot, FOUR_INTEGER, ENVIRONMENT);
    }

    public static final SubLObject set_cyblack_existential_robot_environment(SubLObject cyblack_existential_robot, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_existential_robot, value, FOUR_INTEGER, ENVIRONMENT);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_existential_robot_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_existential_robot_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_POSTING_VISITOR, CONTINUE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXISTENTIAL_ROBOT, ENVIRONMENT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXISTENTIAL_ROBOT, LOGICAL_EXPRESSION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXISTENTIAL_ROBOT, BINDING, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXISTENTIAL_ROBOT, LAST_EVALUATION_RESULT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXISTENTIAL_ROBOT, ACCUMULATED_STATE, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_existential_robot_p(SubLObject cyblack_existential_robot) {
	return classes.subloop_instanceof_class(cyblack_existential_robot, CYBLACK_EXISTENTIAL_ROBOT);
    }

    public static final SubLObject cyblack_existential_robot_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_existential_robot_method = NIL;
	    SubLObject accumulated_state = get_cyblack_existential_robot_accumulated_state(self);
	    SubLObject last_evaluation_result = get_cyblack_existential_robot_last_evaluation_result(self);
	    try {
		try {
		    cyblack_posting.cyblack_basic_posting_visitor_initialize_method(self);
		    last_evaluation_result = NIL;
		    accumulated_state = NIL;
		    sublisp_throw($sym737$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_ROBOT_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_existential_robot_accumulated_state(self, accumulated_state);
			    set_cyblack_existential_robot_last_evaluation_result(self, last_evaluation_result);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_existential_robot_method = Errors.handleThrowable(ccatch_env_var, $sym737$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_ROBOT_METHOD);
	    }
	    return catch_var_for_cyblack_existential_robot_method;
	}
    }

    public static final SubLObject cyblack_existential_robot_set_initial_state_method(SubLObject self, SubLObject new_application, SubLObject new_state) {
	if (new_state == UNPROVIDED) {
	    new_state = NIL;
	}
	{
	    SubLObject catch_var_for_cyblack_existential_robot_method = NIL;
	    SubLObject environment = get_cyblack_existential_robot_environment(self);
	    try {
		try {
		    cyblack_object.cyblack_object_set_application_method(self, new_application);
		    environment = new_state;
		    methods.funcall_instance_method_with_0_args(self, INITIALIZE_ACCUMULATED_STATE);
		    sublisp_throw($sym742$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_ROBOT_METHOD, new_state);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_existential_robot_environment(self, environment);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_existential_robot_method = Errors.handleThrowable(ccatch_env_var, $sym742$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_ROBOT_METHOD);
	    }
	    return catch_var_for_cyblack_existential_robot_method;
	}
    }

    public static final SubLObject cyblack_existential_robot_initialize_accumulated_state_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_existential_robot_method = NIL;
	    SubLObject accumulated_state = get_cyblack_existential_robot_accumulated_state(self);
	    try {
		try {
		    accumulated_state = T;
		    sublisp_throw($sym746$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_ROBOT_METHOD, T);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_existential_robot_accumulated_state(self, accumulated_state);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_existential_robot_method = Errors.handleThrowable(ccatch_env_var, $sym746$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_ROBOT_METHOD);
	    }
	    return catch_var_for_cyblack_existential_robot_method;
	}
    }

    public static final SubLObject cyblack_existential_robot_visit_method(SubLObject self, SubLObject v_cyblack_posting) {
	{
	    SubLObject last_evaluation_result = get_cyblack_existential_robot_last_evaluation_result(self);
	    SubLObject binding = get_cyblack_existential_robot_binding(self);
	    SubLObject logical_expression = get_cyblack_existential_robot_logical_expression(self);
	    SubLObject environment = get_cyblack_existential_robot_environment(self);
	    if (((NIL != environment) && (NIL != binding)) && (NIL != logical_expression)) {
		cyblack_binding_set_value_method(binding, v_cyblack_posting);
		instances.set_slot(self, LAST_EVALUATION_RESULT, methods.funcall_instance_method_with_1_args(logical_expression, GET_VALUE, environment));
		methods.funcall_instance_method_with_0_args(self, EVALUATE_VISIT);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_existential_robot_evaluate_visit_method(SubLObject self) {
	return NIL;
    }

    public static final SubLObject cyblack_existential_robot_get_final_state_method(SubLObject self) {
	{
	    SubLObject accumulated_state = get_cyblack_existential_robot_accumulated_state(self);
	    return accumulated_state;
	}
    }

    public static final SubLObject cyblack_existential_robot_get_logical_expression_method(SubLObject self) {
	{
	    SubLObject logical_expression = get_cyblack_existential_robot_logical_expression(self);
	    return logical_expression;
	}
    }

    public static final SubLObject cyblack_existential_robot_set_logical_expression_method(SubLObject self, SubLObject new_logical_expression) {
	{
	    SubLObject catch_var_for_cyblack_existential_robot_method = NIL;
	    SubLObject logical_expression = get_cyblack_existential_robot_logical_expression(self);
	    try {
		try {
		    logical_expression = new_logical_expression;
		    sublisp_throw($sym758$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_ROBOT_METHOD, new_logical_expression);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_existential_robot_logical_expression(self, logical_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_existential_robot_method = Errors.handleThrowable(ccatch_env_var, $sym758$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_ROBOT_METHOD);
	    }
	    return catch_var_for_cyblack_existential_robot_method;
	}
    }

    public static final SubLObject cyblack_existential_robot_get_binding_method(SubLObject self) {
	{
	    SubLObject binding = get_cyblack_existential_robot_binding(self);
	    return binding;
	}
    }

    public static final SubLObject cyblack_existential_robot_set_binding_method(SubLObject self, SubLObject new_binding) {
	{
	    SubLObject catch_var_for_cyblack_existential_robot_method = NIL;
	    SubLObject binding = get_cyblack_existential_robot_binding(self);
	    try {
		try {
		    binding = new_binding;
		    sublisp_throw($sym765$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_ROBOT_METHOD, new_binding);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_existential_robot_binding(self, binding);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_existential_robot_method = Errors.handleThrowable(ccatch_env_var, $sym765$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_ROBOT_METHOD);
	    }
	    return catch_var_for_cyblack_existential_robot_method;
	}
    }

    public static final SubLObject get_cyblack_present_expression_variable_reference(SubLObject cyblack_present_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_present_expression, FOUR_INTEGER, VARIABLE_REFERENCE);
    }

    public static final SubLObject set_cyblack_present_expression_variable_reference(SubLObject cyblack_present_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_present_expression, value, FOUR_INTEGER, VARIABLE_REFERENCE);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_present_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_present_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PRESENT_EXPRESSION, VARIABLE_REFERENCE, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_present_expression_p(SubLObject cyblack_present_expression) {
	return classes.subloop_instanceof_class(cyblack_present_expression, CYBLACK_PRESENT_EXPRESSION);
    }

    public static final SubLObject cyblack_present_expression_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_present_expression_method = NIL;
	    SubLObject variable_reference = get_cyblack_present_expression_variable_reference(self);
	    try {
		try {
		    cyblack_pattern_initialize_method(self);
		    variable_reference = NIL;
		    sublisp_throw($sym773$OUTER_CATCH_FOR_CYBLACK_PRESENT_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_present_expression_variable_reference(self, variable_reference);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_present_expression_method = Errors.handleThrowable(ccatch_env_var, $sym773$OUTER_CATCH_FOR_CYBLACK_PRESENT_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_present_expression_method;
	}
    }

    public static final SubLObject cyblack_present_expression_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject variable_reference = get_cyblack_present_expression_variable_reference(self);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt776$__PRESENT__S_, variable_reference);
	    return self;
	}
    }

    public static final SubLObject cyblack_present_expression_get_variable_reference_method(SubLObject self) {
	{
	    SubLObject variable_reference = get_cyblack_present_expression_variable_reference(self);
	    return variable_reference;
	}
    }

    public static final SubLObject cyblack_present_expression_set_variable_reference_method(SubLObject self, SubLObject new_variable_reference) {
	{
	    SubLObject catch_var_for_cyblack_present_expression_method = NIL;
	    SubLObject variable_reference = get_cyblack_present_expression_variable_reference(self);
	    try {
		try {
		    variable_reference = new_variable_reference;
		    sublisp_throw($sym784$OUTER_CATCH_FOR_CYBLACK_PRESENT_EXPRESSION_METHOD, new_variable_reference);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_present_expression_variable_reference(self, variable_reference);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_present_expression_method = Errors.handleThrowable(ccatch_env_var, $sym784$OUTER_CATCH_FOR_CYBLACK_PRESENT_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_present_expression_method;
	}
    }

    public static final SubLObject cyblack_present_expression_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    SubLObject variable_reference = get_cyblack_present_expression_variable_reference(self);
	    if (NIL != variable_reference) {
		{
		    SubLObject variable_value = cyblack_variable_reference_get_value_method(variable_reference, environment);
		    return makeBoolean(!((NIL == variable_value) || (NIL != cyblack_unbound_value_p(variable_value))));
		}
	    } else {
		return NIL;
	    }
	}
    }

    public static final SubLObject get_cyblack_empty_p_expression_datatype(SubLObject cyblack_empty_p_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_empty_p_expression, FOUR_INTEGER, DATATYPE);
    }

    public static final SubLObject set_cyblack_empty_p_expression_datatype(SubLObject cyblack_empty_p_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_empty_p_expression, value, FOUR_INTEGER, DATATYPE);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_empty_p_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_empty_p_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EMPTY_P_EXPRESSION, DATATYPE, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_empty_p_expression_p(SubLObject cyblack_empty_p_expression) {
	return classes.subloop_instanceof_class(cyblack_empty_p_expression, CYBLACK_EMPTY_P_EXPRESSION);
    }

    public static final SubLObject cyblack_empty_p_expression_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_empty_p_expression_method = NIL;
	    SubLObject datatype = get_cyblack_empty_p_expression_datatype(self);
	    try {
		try {
		    cyblack_pattern_initialize_method(self);
		    datatype = NIL;
		    sublisp_throw($sym794$OUTER_CATCH_FOR_CYBLACK_EMPTY_P_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_empty_p_expression_datatype(self, datatype);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_empty_p_expression_method = Errors.handleThrowable(ccatch_env_var, $sym794$OUTER_CATCH_FOR_CYBLACK_EMPTY_P_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_empty_p_expression_method;
	}
    }

    public static final SubLObject cyblack_empty_p_expression_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject datatype = get_cyblack_empty_p_expression_datatype(self);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt797$__EMPTY_P__S_, datatype);
	    return self;
	}
    }

    public static final SubLObject cyblack_empty_p_expression_get_datatype_method(SubLObject self) {
	{
	    SubLObject datatype = get_cyblack_empty_p_expression_datatype(self);
	    return datatype;
	}
    }

    public static final SubLObject cyblack_empty_p_expression_set_datatype_method(SubLObject self, SubLObject new_datatype) {
	{
	    SubLObject catch_var_for_cyblack_empty_p_expression_method = NIL;
	    SubLObject datatype = get_cyblack_empty_p_expression_datatype(self);
	    try {
		try {
		    datatype = new_datatype;
		    sublisp_throw($sym805$OUTER_CATCH_FOR_CYBLACK_EMPTY_P_EXPRESSION_METHOD, new_datatype);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_empty_p_expression_datatype(self, datatype);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_empty_p_expression_method = Errors.handleThrowable(ccatch_env_var, $sym805$OUTER_CATCH_FOR_CYBLACK_EMPTY_P_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_empty_p_expression_method;
	}
    }

    public static final SubLObject cyblack_empty_p_expression_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    SubLObject datatype = get_cyblack_empty_p_expression_datatype(self);
	    SubLObject application = cyblack_object.get_cyblack_object_application(self);
	    SubLObject blackboard = cyblack_application.cyblack_application_get_blackboard(application);
	    SubLObject panel = cyblack_datatype.cyblack_datatype_get_panel(datatype, blackboard, environment);
	    if (NIL != panel) {
		{
		    SubLObject postings = cyblack_panel_dispatch_functions.cyblack_panel_get_all_postings(panel);
		    return sublisp_null(postings);
		}
	    } else {
		return T;
	    }
	}
    }

    public static final SubLObject get_cyblack_existential_expression_logical_expression(SubLObject cyblack_existential_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_existential_expression, SIX_INTEGER, LOGICAL_EXPRESSION);
    }

    public static final SubLObject set_cyblack_existential_expression_logical_expression(SubLObject cyblack_existential_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_existential_expression, value, SIX_INTEGER, LOGICAL_EXPRESSION);
    }

    public static final SubLObject get_cyblack_existential_expression_binding(SubLObject cyblack_existential_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_existential_expression, FIVE_INTEGER, BINDING);
    }

    public static final SubLObject set_cyblack_existential_expression_binding(SubLObject cyblack_existential_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_existential_expression, value, FIVE_INTEGER, BINDING);
    }

    public static final SubLObject get_cyblack_existential_expression_closure(SubLObject cyblack_existential_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_existential_expression, FOUR_INTEGER, CLOSURE);
    }

    public static final SubLObject set_cyblack_existential_expression_closure(SubLObject cyblack_existential_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_existential_expression, value, FOUR_INTEGER, CLOSURE);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_existential_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_existential_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXISTENTIAL_EXPRESSION, CLOSURE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXISTENTIAL_EXPRESSION, BINDING, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXISTENTIAL_EXPRESSION, LOGICAL_EXPRESSION, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_existential_expression_p(SubLObject cyblack_existential_expression) {
	return classes.subloop_instanceof_class(cyblack_existential_expression, CYBLACK_EXISTENTIAL_EXPRESSION);
    }

    public static final SubLObject cyblack_existential_expression_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_existential_expression_method = NIL;
	    SubLObject logical_expression = get_cyblack_existential_expression_logical_expression(self);
	    SubLObject binding = get_cyblack_existential_expression_binding(self);
	    SubLObject closure = get_cyblack_existential_expression_closure(self);
	    try {
		try {
		    cyblack_pattern_initialize_method(self);
		    closure = NIL;
		    binding = NIL;
		    logical_expression = NIL;
		    sublisp_throw($sym815$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_existential_expression_logical_expression(self, logical_expression);
			    set_cyblack_existential_expression_binding(self, binding);
			    set_cyblack_existential_expression_closure(self, closure);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_existential_expression_method = Errors.handleThrowable(ccatch_env_var, $sym815$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_existential_expression_method;
	}
    }

    public static final SubLObject cyblack_existential_expression_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject logical_expression = get_cyblack_existential_expression_logical_expression(self);
	    SubLObject binding = get_cyblack_existential_expression_binding(self);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt818$_);
	    methods.funcall_instance_method_with_1_args(self, PRINT_FUNCTOR, stream);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt820$__S__S_, binding, logical_expression);
	    return self;
	}
    }

    public static final SubLObject cyblack_existential_expression_print_functor_method(SubLObject self, SubLObject stream) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt823$_EXISTENTIAL_FUNCTOR);
	return NIL;
    }

    public static final SubLObject cyblack_existential_expression_get_closure_method(SubLObject self) {
	{
	    SubLObject closure = get_cyblack_existential_expression_closure(self);
	    return closure;
	}
    }

    public static final SubLObject cyblack_existential_expression_set_closure_method(SubLObject self, SubLObject new_closure) {
	{
	    SubLObject catch_var_for_cyblack_existential_expression_method = NIL;
	    SubLObject closure = get_cyblack_existential_expression_closure(self);
	    try {
		try {
		    closure = new_closure;
		    sublisp_throw($sym831$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_EXPRESSION_METHOD, new_closure);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_existential_expression_closure(self, closure);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_existential_expression_method = Errors.handleThrowable(ccatch_env_var, $sym831$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_existential_expression_method;
	}
    }

    public static final SubLObject cyblack_existential_expression_get_binding_method(SubLObject self) {
	{
	    SubLObject binding = get_cyblack_existential_expression_binding(self);
	    return binding;
	}
    }

    public static final SubLObject cyblack_existential_expression_set_binding_method(SubLObject self, SubLObject new_binding) {
	{
	    SubLObject catch_var_for_cyblack_existential_expression_method = NIL;
	    SubLObject binding = get_cyblack_existential_expression_binding(self);
	    try {
		try {
		    binding = new_binding;
		    sublisp_throw($sym835$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_EXPRESSION_METHOD, new_binding);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_existential_expression_binding(self, binding);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_existential_expression_method = Errors.handleThrowable(ccatch_env_var, $sym835$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_existential_expression_method;
	}
    }

    public static final SubLObject cyblack_existential_expression_get_logical_expression_method(SubLObject self) {
	{
	    SubLObject logical_expression = get_cyblack_existential_expression_logical_expression(self);
	    return logical_expression;
	}
    }

    public static final SubLObject cyblack_existential_expression_set_logical_expression_method(SubLObject self, SubLObject new_logical_expression) {
	{
	    SubLObject catch_var_for_cyblack_existential_expression_method = NIL;
	    SubLObject logical_expression = get_cyblack_existential_expression_logical_expression(self);
	    try {
		try {
		    logical_expression = new_logical_expression;
		    sublisp_throw($sym839$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_EXPRESSION_METHOD, new_logical_expression);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_existential_expression_logical_expression(self, logical_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_existential_expression_method = Errors.handleThrowable(ccatch_env_var, $sym839$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_existential_expression_method;
	}
    }

    public static final SubLObject cyblack_existential_expression_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject closure = get_cyblack_existential_expression_closure(self);
		SubLObject result = NIL;
		if (NIL != closure) {
		    cyblack_environment_set_outer_scope_method(closure, environment);
		    result = cyblack_existential_expression_get_value_internal_method(self, closure);
		    cyblack_environment_set_outer_scope_method(closure, NIL);
		} else {
		    result = cyblack_existential_expression_get_value_internal_method(self, environment);
		}
		if (NIL != cyblack_globals.$cyblack_tracing_on$.getDynamicValue(thread)) {
		    format(cyblack_globals.$cyblack_tracing_output_stream$.getDynamicValue(thread), cyblack_precondition_pattern_p2.$str_alt276$___GET_VALUE__S___Result_____S_, self, result);
		}
		return result;
	    }
	}
    }

    public static final SubLObject cyblack_existential_expression_get_value_internal_method(SubLObject self, SubLObject environment) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_existential_expression_method = NIL;
		SubLObject binding = get_cyblack_existential_expression_binding(self);
		SubLObject application = cyblack_object.get_cyblack_object_application(self);
		try {
		    try {
			if (NIL != binding) {
			    {
				SubLObject datatype = cyblack_binding_get_type_method(binding);
				SubLObject application_6 = cyblack_object.cyblack_object_get_application_method(self);
				SubLObject blackboard = (NIL != application_6) ? ((SubLObject) (methods.funcall_instance_method_with_0_args(application_6, GET_BLACKBOARD))) : NIL;
				if (NIL != cyblack_globals.$cyblack_tracing_on$.getDynamicValue(thread)) {
				    format(cyblack_globals.$cyblack_tracing_output_stream$.getDynamicValue(thread), cyblack_precondition_pattern_p2.$str_alt847$___GET_VALUE_INTERNAL__S___dataty, new SubLObject[] { self, datatype, application_6, blackboard });
				}
				if ((NIL != datatype) && (NIL != blackboard)) {
				    {
					SubLObject panel = methods.funcall_instance_method_with_1_args(blackboard, GET_PANEL, datatype);
					if (NIL != panel) {
					    {
						SubLObject posting_visitor = methods.funcall_instance_method_with_0_args(self, CREATE_POSTING_VISITOR);
						methods.funcall_instance_method_with_2_args(posting_visitor, SET_INITIAL_STATE, cyblack_object.cyblack_object_get_application_method(blackboard), environment);
						methods.funcall_instance_method_with_1_args(panel, ITERATE_OVER_ALL_POSTINGS, posting_visitor);
						sublisp_throw($sym846$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_EXPRESSION_METHOD, methods.funcall_instance_method_with_0_args(posting_visitor, GET_FINAL_STATE));
					    }
					}
				    }
				}
			    }
			}
			sublisp_throw($sym846$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_EXPRESSION_METHOD, NIL);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_existential_expression_binding(self, binding);
				cyblack_object.set_cyblack_object_application(self, application);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_existential_expression_method = Errors.handleThrowable(ccatch_env_var, $sym846$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_EXPRESSION_METHOD);
		}
		return catch_var_for_cyblack_existential_expression_method;
	    }
	}
    }

    public static final SubLObject cyblack_existential_expression_create_posting_visitor_method(SubLObject self) {
	{
	    SubLObject logical_expression = get_cyblack_existential_expression_logical_expression(self);
	    SubLObject binding = get_cyblack_existential_expression_binding(self);
	    SubLObject application = cyblack_object.get_cyblack_object_application(self);
	    SubLObject new_robot = methods.funcall_instance_method_with_0_args(self, NEW_POSTING_VISITOR);
	    cyblack_object.cyblack_object_set_application_method(new_robot, application);
	    cyblack_existential_robot_set_binding_method(new_robot, binding);
	    cyblack_existential_robot_set_logical_expression_method(new_robot, logical_expression);
	    return new_robot;
	}
    }

    public static final SubLObject cyblack_existential_expression_new_posting_visitor_method(SubLObject self) {
	return object.object_new_method(CYBLACK_EXISTENTIAL_ROBOT);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_forall_robot_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_forall_robot_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_POSTING_VISITOR, CONTINUE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXISTENTIAL_ROBOT, ENVIRONMENT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXISTENTIAL_ROBOT, LOGICAL_EXPRESSION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXISTENTIAL_ROBOT, BINDING, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXISTENTIAL_ROBOT, LAST_EVALUATION_RESULT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXISTENTIAL_ROBOT, ACCUMULATED_STATE, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_forall_robot_p(SubLObject cyblack_forall_robot) {
	return classes.subloop_instanceof_class(cyblack_forall_robot, CYBLACK_FORALL_ROBOT);
    }

    public static final SubLObject cyblack_forall_robot_initialize_method(SubLObject self) {
	return cyblack_existential_robot_initialize_method(self);
    }

    public static final SubLObject cyblack_forall_robot_initialize_accumulated_state_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_forall_robot_method = NIL;
	    SubLObject accumulated_state = get_cyblack_existential_robot_accumulated_state(self);
	    try {
		try {
		    accumulated_state = T;
		    sublisp_throw($sym862$OUTER_CATCH_FOR_CYBLACK_FORALL_ROBOT_METHOD, T);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_existential_robot_accumulated_state(self, accumulated_state);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_forall_robot_method = Errors.handleThrowable(ccatch_env_var, $sym862$OUTER_CATCH_FOR_CYBLACK_FORALL_ROBOT_METHOD);
	    }
	    return catch_var_for_cyblack_forall_robot_method;
	}
    }

    public static final SubLObject cyblack_forall_robot_evaluate_visit_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_forall_robot_method = NIL;
	    SubLObject accumulated_state = get_cyblack_existential_robot_accumulated_state(self);
	    SubLObject last_evaluation_result = get_cyblack_existential_robot_last_evaluation_result(self);
	    SubLObject v_continue = cyblack_posting.get_cyblack_basic_posting_visitor_continue(self);
	    try {
		try {
		    if (NIL == last_evaluation_result) {
			v_continue = NIL;
			accumulated_state = NIL;
		    }
		    sublisp_throw($sym865$OUTER_CATCH_FOR_CYBLACK_FORALL_ROBOT_METHOD, accumulated_state);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_existential_robot_accumulated_state(self, accumulated_state);
			    set_cyblack_existential_robot_last_evaluation_result(self, last_evaluation_result);
			    cyblack_posting.set_cyblack_basic_posting_visitor_continue(self, v_continue);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_forall_robot_method = Errors.handleThrowable(ccatch_env_var, $sym865$OUTER_CATCH_FOR_CYBLACK_FORALL_ROBOT_METHOD);
	    }
	    return catch_var_for_cyblack_forall_robot_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_forall_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_forall_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXISTENTIAL_EXPRESSION, CLOSURE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXISTENTIAL_EXPRESSION, BINDING, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXISTENTIAL_EXPRESSION, LOGICAL_EXPRESSION, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_forall_expression_p(SubLObject cyblack_forall_expression) {
	return classes.subloop_instanceof_class(cyblack_forall_expression, CYBLACK_FORALL_EXPRESSION);
    }

    public static final SubLObject cyblack_forall_expression_print_functor_method(SubLObject self, SubLObject stream) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt872$_FORALL);
	return self;
    }

    public static final SubLObject cyblack_forall_expression_new_posting_visitor_method(SubLObject self) {
	return object.object_new_method(CYBLACK_FORALL_ROBOT);
    }

    public static final SubLObject get_cyblack_nested_logical_expression_logical_form(SubLObject cyblack_nested_logical_expression) {
	return classes.subloop_get_instance_slot(cyblack_nested_logical_expression, FOUR_INTEGER);
    }

    public static final SubLObject set_cyblack_nested_logical_expression_logical_form(SubLObject cyblack_nested_logical_expression, SubLObject value) {
	return classes.subloop_set_instance_slot(cyblack_nested_logical_expression, value, FOUR_INTEGER);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_nested_logical_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_nested_logical_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_NESTED_LOGICAL_EXPRESSION, LOGICAL_FORM, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_nested_logical_expression_p(SubLObject cyblack_nested_logical_expression) {
	return classes.subloop_instanceof_class(cyblack_nested_logical_expression, CYBLACK_NESTED_LOGICAL_EXPRESSION);
    }

    public static final SubLObject cyblack_nested_logical_expression_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_nested_logical_expression_method = NIL;
	    SubLObject logical_form = get_cyblack_nested_logical_expression_logical_form(self);
	    try {
		try {
		    cyblack_pattern_initialize_method(self);
		    logical_form = NIL;
		    sublisp_throw($sym881$OUTER_CATCH_FOR_CYBLACK_NESTED_LOGICAL_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_nested_logical_expression_logical_form(self, logical_form);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_nested_logical_expression_method = Errors.handleThrowable(ccatch_env_var, $sym881$OUTER_CATCH_FOR_CYBLACK_NESTED_LOGICAL_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_nested_logical_expression_method;
	}
    }

    public static final SubLObject cyblack_nested_logical_expression_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject logical_form = get_cyblack_nested_logical_expression_logical_form(self);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt884$__S_, logical_form);
	    return self;
	}
    }

    public static final SubLObject cyblack_nested_logical_expression_get_logical_form_method(SubLObject self) {
	{
	    SubLObject logical_form = get_cyblack_nested_logical_expression_logical_form(self);
	    return logical_form;
	}
    }

    public static final SubLObject cyblack_nested_logical_expression_set_logical_form_method(SubLObject self, SubLObject new_logical_form) {
	{
	    SubLObject catch_var_for_cyblack_nested_logical_expression_method = NIL;
	    SubLObject logical_form = get_cyblack_nested_logical_expression_logical_form(self);
	    try {
		try {
		    logical_form = new_logical_form;
		    sublisp_throw($sym888$OUTER_CATCH_FOR_CYBLACK_NESTED_LOGICAL_EXPRESSION_METHOD, new_logical_form);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_nested_logical_expression_logical_form(self, logical_form);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_nested_logical_expression_method = Errors.handleThrowable(ccatch_env_var, $sym888$OUTER_CATCH_FOR_CYBLACK_NESTED_LOGICAL_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_nested_logical_expression_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_compound_logical_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_compound_logical_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_compound_logical_expression_p(SubLObject cyblack_compound_logical_expression) {
	return classes.subloop_instanceof_class(cyblack_compound_logical_expression, CYBLACK_COMPOUND_LOGICAL_EXPRESSION);
    }

    public static final SubLObject cyblack_compound_logical_expression_print_operator_method(SubLObject self, SubLObject stream) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt896$_ABSTRACT_COMPOUND_OPERATOR);
	return self;
    }

    public static final SubLObject cyblack_compound_logical_expression_get_arity_method(SubLObject self) {
	return ZERO_INTEGER;
    }

    public static final SubLObject cyblack_compound_logical_expression_get_arg1_method(SubLObject self) {
	return NIL;
    }

    public static final SubLObject cyblack_compound_logical_expression_set_arg1_method(SubLObject self, SubLObject new_arg1) {
	cyblack_utilities.cyblack_silence(self);
	return new_arg1;
    }

    public static final SubLObject get_cyblack_unary_logical_expression_arg1(SubLObject cyblack_unary_logical_expression) {
	return classes.subloop_get_instance_slot(cyblack_unary_logical_expression, FOUR_INTEGER);
    }

    public static final SubLObject set_cyblack_unary_logical_expression_arg1(SubLObject cyblack_unary_logical_expression, SubLObject value) {
	return classes.subloop_set_instance_slot(cyblack_unary_logical_expression, value, FOUR_INTEGER);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_unary_logical_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_unary_logical_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_UNARY_LOGICAL_EXPRESSION, ARG1, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_unary_logical_expression_p(SubLObject cyblack_unary_logical_expression) {
	return classes.subloop_instanceof_class(cyblack_unary_logical_expression, CYBLACK_UNARY_LOGICAL_EXPRESSION);
    }

    public static final SubLObject cyblack_unary_logical_expression_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_unary_logical_expression_method = NIL;
	    SubLObject arg1 = get_cyblack_unary_logical_expression_arg1(self);
	    try {
		try {
		    cyblack_pattern_initialize_method(self);
		    arg1 = NIL;
		    sublisp_throw($sym913$OUTER_CATCH_FOR_CYBLACK_UNARY_LOGICAL_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_unary_logical_expression_arg1(self, arg1);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_unary_logical_expression_method = Errors.handleThrowable(ccatch_env_var, $sym913$OUTER_CATCH_FOR_CYBLACK_UNARY_LOGICAL_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_unary_logical_expression_method;
	}
    }

    public static final SubLObject cyblack_unary_logical_expression_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject arg1 = get_cyblack_unary_logical_expression_arg1(self);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt818$_);
	    methods.funcall_instance_method_with_1_args(self, PRINT_OPERATOR, stream);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt916$__S_, arg1);
	    return self;
	}
    }

    public static final SubLObject cyblack_unary_logical_expression_print_operator_method(SubLObject self, SubLObject stream) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt919$_ABSTRACT_UNARY_OPERATOR);
	return self;
    }

    public static final SubLObject cyblack_unary_logical_expression_get_arity_method(SubLObject self) {
	return ONE_INTEGER;
    }

    public static final SubLObject cyblack_unary_logical_expression_get_arg1_method(SubLObject self) {
	{
	    SubLObject arg1 = get_cyblack_unary_logical_expression_arg1(self);
	    cyblack_compound_logical_expression_get_arg1_method(self);
	    return arg1;
	}
    }

    public static final SubLObject cyblack_unary_logical_expression_set_arg1_method(SubLObject self, SubLObject new_arg1) {
	{
	    SubLObject catch_var_for_cyblack_unary_logical_expression_method = NIL;
	    SubLObject arg1 = get_cyblack_unary_logical_expression_arg1(self);
	    try {
		try {
		    cyblack_compound_logical_expression_set_arg1_method(self, new_arg1);
		    arg1 = new_arg1;
		    sublisp_throw($sym926$OUTER_CATCH_FOR_CYBLACK_UNARY_LOGICAL_EXPRESSION_METHOD, new_arg1);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_unary_logical_expression_arg1(self, arg1);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_unary_logical_expression_method = Errors.handleThrowable(ccatch_env_var, $sym926$OUTER_CATCH_FOR_CYBLACK_UNARY_LOGICAL_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_unary_logical_expression_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_not_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_not_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_UNARY_LOGICAL_EXPRESSION, ARG1, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_not_expression_p(SubLObject cyblack_not_expression) {
	return classes.subloop_instanceof_class(cyblack_not_expression, CYBLACK_NOT_EXPRESSION);
    }

    public static final SubLObject cyblack_not_expression_initialize_method(SubLObject self) {
	return cyblack_unary_logical_expression_initialize_method(self);
    }

    public static final SubLObject cyblack_not_expression_print_operator_method(SubLObject self, SubLObject stream) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt934$_NOT);
	return self;
    }

    public static final SubLObject cyblack_not_expression_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject arg1 = get_cyblack_unary_logical_expression_arg1(self);
		SubLObject subexpression_results = (NIL != arg1) ? ((SubLObject) (methods.funcall_instance_method_with_1_args(arg1, GET_VALUE, environment))) : NIL;
		SubLObject result = makeBoolean(NIL == subexpression_results);
		if (NIL != cyblack_globals.$cyblack_tracing_on$.getDynamicValue(thread)) {
		    format(cyblack_globals.$cyblack_tracing_output_stream$.getDynamicValue(thread), cyblack_precondition_pattern_p2.$str_alt276$___GET_VALUE__S___Result_____S_, self, result);
		}
		return result;
	    }
	}
    }

    public static final SubLObject get_cyblack_nary_logical_expression_arglist(SubLObject cyblack_nary_logical_expression) {
	return classes.subloop_get_instance_slot(cyblack_nary_logical_expression, FOUR_INTEGER);
    }

    public static final SubLObject set_cyblack_nary_logical_expression_arglist(SubLObject cyblack_nary_logical_expression, SubLObject value) {
	return classes.subloop_set_instance_slot(cyblack_nary_logical_expression, value, FOUR_INTEGER);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_nary_logical_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_nary_logical_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_NARY_LOGICAL_EXPRESSION, ARGLIST, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_nary_logical_expression_p(SubLObject cyblack_nary_logical_expression) {
	return classes.subloop_instanceof_class(cyblack_nary_logical_expression, CYBLACK_NARY_LOGICAL_EXPRESSION);
    }

    public static final SubLObject cyblack_nary_logical_expression_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_nary_logical_expression_method = NIL;
	    SubLObject arglist = get_cyblack_nary_logical_expression_arglist(self);
	    try {
		try {
		    cyblack_pattern_initialize_method(self);
		    arglist = NIL;
		    sublisp_throw($sym944$OUTER_CATCH_FOR_CYBLACK_NARY_LOGICAL_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_nary_logical_expression_arglist(self, arglist);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_nary_logical_expression_method = Errors.handleThrowable(ccatch_env_var, $sym944$OUTER_CATCH_FOR_CYBLACK_NARY_LOGICAL_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_nary_logical_expression_method;
	}
    }

    public static final SubLObject cyblack_nary_logical_expression_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject arglist = get_cyblack_nary_logical_expression_arglist(self);
	    SubLObject v_arity = cyblack_nary_logical_expression_get_arity_method(self);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt818$_);
	    methods.funcall_instance_method_with_1_args(self, PRINT_OPERATOR, stream);
	    if (v_arity.numG(ZERO_INTEGER)) {
		{
		    SubLObject cdolist_list_var = arglist;
		    SubLObject arg = NIL;
		    for (arg = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), arg = cdolist_list_var.first()) {
			format(stream, cyblack_precondition_pattern_p2.$str_alt629$__S, arg);
		    }
		}
	    }
	    format(stream, cyblack_precondition_pattern_p2.$str_alt623$_);
	    return self;
	}
    }

    public static final SubLObject cyblack_nary_logical_expression_print_operator_method(SubLObject self, SubLObject stream) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt949$_ABSTRACT_NARY_OPERATOR);
	return self;
    }

    public static final SubLObject cyblack_nary_logical_expression_get_arity_method(SubLObject self) {
	{
	    SubLObject arglist = get_cyblack_nary_logical_expression_arglist(self);
	    return length(arglist);
	}
    }

    public static final SubLObject cyblack_nary_logical_expression_get_arg1_method(SubLObject self) {
	return cyblack_nary_logical_expression_get_argn_method(self, ONE_INTEGER);
    }

    public static final SubLObject cyblack_nary_logical_expression_set_arg1_method(SubLObject self, SubLObject new_arg1) {
	return cyblack_nary_logical_expression_set_argn_method(self, ONE_INTEGER, new_arg1);
    }

    public static final SubLObject cyblack_nary_logical_expression_get_arg2_method(SubLObject self) {
	return cyblack_nary_logical_expression_get_argn_method(self, TWO_INTEGER);
    }

    public static final SubLObject cyblack_nary_logical_expression_set_arg2_method(SubLObject self, SubLObject new_arg2) {
	return cyblack_nary_logical_expression_set_argn_method(self, TWO_INTEGER, new_arg2);
    }

    public static final SubLObject cyblack_nary_logical_expression_get_arg3_method(SubLObject self) {
	return cyblack_nary_logical_expression_get_argn_method(self, THREE_INTEGER);
    }

    public static final SubLObject cyblack_nary_logical_expression_set_arg3_method(SubLObject self, SubLObject new_arg3) {
	return cyblack_nary_logical_expression_set_argn_method(self, THREE_INTEGER, new_arg3);
    }

    public static final SubLObject cyblack_nary_logical_expression_check_n_method(SubLObject self, SubLObject n) {
	cyblack_utilities.cyblack_silence(self);
	cyblack_utilities.cyblack_silence(n);
	return T;
    }

    public static final SubLObject cyblack_nary_logical_expression_get_argn_method(SubLObject self, SubLObject n) {
	{
	    SubLObject arglist = get_cyblack_nary_logical_expression_arglist(self);
	    SubLObject arg = nth(subtract(n, ONE_INTEGER), arglist);
	    return arg;
	}
    }

    public static final SubLObject cyblack_nary_logical_expression_set_argn_method(SubLObject self, SubLObject n, SubLObject new_argn) {
	{
	    SubLObject catch_var_for_cyblack_nary_logical_expression_method = NIL;
	    SubLObject arglist = get_cyblack_nary_logical_expression_arglist(self);
	    try {
		try {
		    {
			SubLObject v_arity = cyblack_nary_logical_expression_get_arity_method(self);
			if (n.numLE(v_arity)) {
			    set_nth(subtract(n, ONE_INTEGER), arglist, new_argn);
			} else {
			    {
				SubLObject grow_by = subtract(n, v_arity);
				SubLObject extension = make_list(grow_by, UNPROVIDED);
				rplaca(last(extension, UNPROVIDED), new_argn);
				arglist = nconc(arglist, extension);
			    }
			}
			sublisp_throw($sym981$OUTER_CATCH_FOR_CYBLACK_NARY_LOGICAL_EXPRESSION_METHOD, new_argn);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_nary_logical_expression_arglist(self, arglist);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_nary_logical_expression_method = Errors.handleThrowable(ccatch_env_var, $sym981$OUTER_CATCH_FOR_CYBLACK_NARY_LOGICAL_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_nary_logical_expression_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_and_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_and_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_NARY_LOGICAL_EXPRESSION, ARGLIST, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_and_expression_p(SubLObject cyblack_and_expression) {
	return classes.subloop_instanceof_class(cyblack_and_expression, CYBLACK_AND_EXPRESSION);
    }

    public static final SubLObject cyblack_and_expression_initialize_method(SubLObject self) {
	return cyblack_nary_logical_expression_initialize_method(self);
    }

    public static final SubLObject cyblack_and_expression_print_operator_method(SubLObject self, SubLObject stream) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt988$_AND);
	return self;
    }

    public static final SubLObject cyblack_and_expression_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    SubLObject arglist = get_cyblack_nary_logical_expression_arglist(self);
	    if (NIL == arglist) {
		return T;
	    }
	    {
		SubLObject cdolist_list_var = arglist;
		SubLObject arg = NIL;
		for (arg = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), arg = cdolist_list_var.first()) {
		    if (NIL == methods.funcall_instance_method_with_1_args(arg, GET_VALUE, environment)) {
			return NIL;
		    }
		}
	    }
	    return T;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_or_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_or_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_NARY_LOGICAL_EXPRESSION, ARGLIST, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_or_expression_p(SubLObject cyblack_or_expression) {
	return classes.subloop_instanceof_class(cyblack_or_expression, CYBLACK_OR_EXPRESSION);
    }

    public static final SubLObject cyblack_or_expression_initialize_method(SubLObject self) {
	return cyblack_nary_logical_expression_initialize_method(self);
    }

    public static final SubLObject cyblack_or_expression_print_operator_method(SubLObject self, SubLObject stream) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt997$_OR);
	return self;
    }

    public static final SubLObject cyblack_or_expression_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    SubLObject arglist = get_cyblack_nary_logical_expression_arglist(self);
	    if (NIL == arglist) {
		return NIL;
	    }
	    {
		SubLObject cdolist_list_var = arglist;
		SubLObject arg = NIL;
		for (arg = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), arg = cdolist_list_var.first()) {
		    if (NIL != methods.funcall_instance_method_with_1_args(arg, GET_VALUE, environment)) {
			return T;
		    }
		}
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_typelist_p(SubLObject v_object) {
	if (NIL == v_object) {
	    return T;
	} else if (v_object.isAtom()) {
	    return NIL;
	} else {
	    {
		SubLObject current_cons = v_object;
		while (current_cons.isCons()) {
		    if (NIL == classes.subloop_type_p(current_cons.first())) {
			return NIL;
		    }
		    current_cons = current_cons.rest();
		}
		return sublisp_null(current_cons);
	    }
	}

    }

    public static final SubLObject get_cyblack_predicate_argtype_list(SubLObject cyblack_predicate) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_predicate, SIX_INTEGER, ARGTYPE_LIST);
    }

    public static final SubLObject set_cyblack_predicate_argtype_list(SubLObject cyblack_predicate, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_predicate, value, SIX_INTEGER, ARGTYPE_LIST);
    }

    public static final SubLObject get_cyblack_predicate_arglist(SubLObject cyblack_predicate) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_predicate, FIVE_INTEGER, ARGLIST);
    }

    public static final SubLObject set_cyblack_predicate_arglist(SubLObject cyblack_predicate, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_predicate, value, FIVE_INTEGER, ARGLIST);
    }

    public static final SubLObject get_cyblack_predicate_arity(SubLObject cyblack_predicate) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_predicate, FOUR_INTEGER, ARITY);
    }

    public static final SubLObject set_cyblack_predicate_arity(SubLObject cyblack_predicate, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_predicate, value, FOUR_INTEGER, ARITY);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_predicate_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_predicate_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARITY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARGLIST, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARGTYPE_LIST, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_predicate_p(SubLObject cyblack_predicate) {
	return classes.subloop_instanceof_class(cyblack_predicate, CYBLACK_PREDICATE);
    }

    public static final SubLObject cyblack_predicate_check_arg_p_method(SubLObject self, SubLObject n, SubLObject value) {
	{
	    SubLObject argtype_list = get_cyblack_predicate_argtype_list(self);
	    SubLObject v_arity = get_cyblack_predicate_arity(self);
	    if (n.numE(ZERO_INTEGER)) {
		return T;
	    }
	    if (NIL == v_arity) {
		return NIL;
	    }
	    {
		SubLObject type = nth(n, argtype_list);
		if (NIL == type) {
		    return T;
		}
		if (NIL == subloop_structures.instance_p(value)) {
		    return NIL;
		}
		return instances.instance_of_p(value, type);
	    }
	}
    }

    public static final SubLObject cyblack_predicate_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_predicate_method = NIL;
	    SubLObject argtype_list = get_cyblack_predicate_argtype_list(self);
	    SubLObject arglist = get_cyblack_predicate_arglist(self);
	    SubLObject v_arity = get_cyblack_predicate_arity(self);
	    try {
		try {
		    cyblack_pattern_initialize_method(self);
		    v_arity = ZERO_INTEGER;
		    arglist = NIL;
		    argtype_list = NIL;
		    sublisp_throw($sym1012$OUTER_CATCH_FOR_CYBLACK_PREDICATE_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_predicate_argtype_list(self, argtype_list);
			    set_cyblack_predicate_arglist(self, arglist);
			    set_cyblack_predicate_arity(self, v_arity);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_predicate_method = Errors.handleThrowable(ccatch_env_var, $sym1012$OUTER_CATCH_FOR_CYBLACK_PREDICATE_METHOD);
	    }
	    return catch_var_for_cyblack_predicate_method;
	}
    }

    public static final SubLObject cyblack_predicate_declare_signature_method(SubLObject self, SubLObject argtypes) {
	{
	    SubLObject catch_var_for_cyblack_predicate_method = NIL;
	    SubLObject argtype_list = get_cyblack_predicate_argtype_list(self);
	    SubLObject v_arity = get_cyblack_predicate_arity(self);
	    try {
		try {
		    v_arity = length(argtypes);
		    argtype_list = copy_list(argtypes);
		    sublisp_throw($sym1017$OUTER_CATCH_FOR_CYBLACK_PREDICATE_METHOD, argtypes);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_predicate_argtype_list(self, argtype_list);
			    set_cyblack_predicate_arity(self, v_arity);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_predicate_method = Errors.handleThrowable(ccatch_env_var, $sym1017$OUTER_CATCH_FOR_CYBLACK_PREDICATE_METHOD);
	    }
	    return catch_var_for_cyblack_predicate_method;
	}
    }

    public static final SubLObject cyblack_predicate_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt818$_);
	methods.funcall_instance_method_with_1_args(self, PRINT_OPERATOR, stream);
	cyblack_predicate_print_arglist_method(self, stream);
	format(stream, cyblack_precondition_pattern_p2.$str_alt623$_);
	return self;
    }

    public static final SubLObject cyblack_predicate_print_operator_method(SubLObject self, SubLObject stream) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt1022$_ABSTRACT_PREDICATE);
	return self;
    }

    public static final SubLObject cyblack_predicate_print_arglist_method(SubLObject self, SubLObject stream) {
	{
	    SubLObject arglist = get_cyblack_predicate_arglist(self);
	    SubLObject cdolist_list_var = arglist;
	    SubLObject arg = NIL;
	    for (arg = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), arg = cdolist_list_var.first()) {
		format(stream, cyblack_precondition_pattern_p2.$str_alt629$__S, arg);
	    }
	    return self;
	}
    }

    public static final SubLObject cyblack_predicate_get_arity_method(SubLObject self) {
	{
	    SubLObject v_arity = get_cyblack_predicate_arity(self);
	    return v_arity;
	}
    }

    public static final SubLObject cyblack_predicate_get_argn_type_method(SubLObject self, SubLObject n) {
	{
	    SubLObject argtype_list = get_cyblack_predicate_argtype_list(self);
	    SubLObject v_arity = get_cyblack_predicate_arity(self);
	    cyblack_utilities.cyblack_silence(v_arity);
	    return nth(subtract(n, ONE_INTEGER), argtype_list);
	}
    }

    public static final SubLObject cyblack_predicate_set_argn_type_method(SubLObject self, SubLObject n, SubLObject class_type) {
	{
	    SubLObject catch_var_for_cyblack_predicate_method = NIL;
	    SubLObject argtype_list = get_cyblack_predicate_argtype_list(self);
	    SubLObject v_arity = get_cyblack_predicate_arity(self);
	    try {
		try {
		    if (n.numLE(v_arity)) {
			set_nth(subtract(n, ONE_INTEGER), argtype_list, class_type);
			sublisp_throw($sym1035$OUTER_CATCH_FOR_CYBLACK_PREDICATE_METHOD, class_type);
		    }
		    {
			SubLObject grow_by = subtract(n, v_arity);
			SubLObject extension = make_list(grow_by, UNPROVIDED);
			v_arity = n;
			rplaca(last(extension, UNPROVIDED), class_type);
			argtype_list = nconc(argtype_list, extension);
		    }
		    sublisp_throw($sym1035$OUTER_CATCH_FOR_CYBLACK_PREDICATE_METHOD, class_type);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_predicate_argtype_list(self, argtype_list);
			    set_cyblack_predicate_arity(self, v_arity);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_predicate_method = Errors.handleThrowable(ccatch_env_var, $sym1035$OUTER_CATCH_FOR_CYBLACK_PREDICATE_METHOD);
	    }
	    return catch_var_for_cyblack_predicate_method;
	}
    }

    public static final SubLObject cyblack_predicate_get_argn_method(SubLObject self, SubLObject n) {
	{
	    SubLObject arglist = get_cyblack_predicate_arglist(self);
	    SubLObject v_arity = get_cyblack_predicate_arity(self);
	    cyblack_utilities.cyblack_silence(v_arity);
	    return nth(subtract(n, ONE_INTEGER), arglist);
	}
    }

    public static final SubLObject cyblack_predicate_set_argn_method(SubLObject self, SubLObject n, SubLObject new_value) {
	{
	    SubLObject catch_var_for_cyblack_predicate_method = NIL;
	    SubLObject arglist = get_cyblack_predicate_arglist(self);
	    SubLObject v_arity = get_cyblack_predicate_arity(self);
	    try {
		try {
		    if (n.numLE(v_arity)) {
			set_nth(subtract(n, ONE_INTEGER), arglist, new_value);
			sublisp_throw($sym1041$OUTER_CATCH_FOR_CYBLACK_PREDICATE_METHOD, new_value);
		    }
		    {
			SubLObject grow_by = subtract(n, v_arity);
			SubLObject extension = make_list(grow_by, UNPROVIDED);
			v_arity = n;
			rplaca(last(extension, UNPROVIDED), new_value);
			arglist = nconc(arglist, extension);
			sublisp_throw($sym1041$OUTER_CATCH_FOR_CYBLACK_PREDICATE_METHOD, new_value);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_predicate_arglist(self, arglist);
			    set_cyblack_predicate_arity(self, v_arity);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_predicate_method = Errors.handleThrowable(ccatch_env_var, $sym1041$OUTER_CATCH_FOR_CYBLACK_PREDICATE_METHOD);
	    }
	    return catch_var_for_cyblack_predicate_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_binary_predicate_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_binary_predicate_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARITY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARGLIST, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARGTYPE_LIST, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_binary_predicate_p(SubLObject cyblack_binary_predicate) {
	return classes.subloop_instanceof_class(cyblack_binary_predicate, CYBLACK_BINARY_PREDICATE);
    }

    public static final SubLObject cyblack_binary_predicate_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_binary_predicate_method = NIL;
	    SubLObject argtype_list = get_cyblack_predicate_argtype_list(self);
	    SubLObject arglist = get_cyblack_predicate_arglist(self);
	    SubLObject v_arity = get_cyblack_predicate_arity(self);
	    try {
		try {
		    cyblack_predicate_initialize_method(self);
		    v_arity = TWO_INTEGER;
		    arglist = list(NIL, NIL);
		    argtype_list = list(OBJECT, OBJECT);
		    sublisp_throw($sym1048$OUTER_CATCH_FOR_CYBLACK_BINARY_PREDICATE_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_predicate_argtype_list(self, argtype_list);
			    set_cyblack_predicate_arglist(self, arglist);
			    set_cyblack_predicate_arity(self, v_arity);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_binary_predicate_method = Errors.handleThrowable(ccatch_env_var, $sym1048$OUTER_CATCH_FOR_CYBLACK_BINARY_PREDICATE_METHOD);
	    }
	    return catch_var_for_cyblack_binary_predicate_method;
	}
    }

    public static final SubLObject cyblack_binary_predicate_declare_signature_method(SubLObject self, SubLObject argtypes) {
	return cyblack_binary_predicate_declare_signature_method(self, argtypes);
    }

    public static final SubLObject cyblack_binary_predicate_print_operator_method(SubLObject self, SubLObject stream) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt1053$_ABSTRACT_BINARY_PREDICATE);
	return self;
    }

    public static final SubLObject cyblack_binary_predicate_get_arity_method(SubLObject self) {
	return TWO_INTEGER;
    }

    public static final SubLObject cyblack_binary_predicate_set_argn_type_method(SubLObject self, SubLObject n, SubLObject class_type) {
	return cyblack_predicate_set_argn_type_method(self, n, class_type);
    }

    public static final SubLObject cyblack_binary_predicate_set_argn_method(SubLObject self, SubLObject n, SubLObject new_value) {
	return cyblack_predicate_set_argn_method(self, n, new_value);
    }

    public static final SubLObject cyblack_binary_predicate_get_arg1_method(SubLObject self) {
	return cyblack_predicate_get_argn_method(self, ONE_INTEGER);
    }

    public static final SubLObject cyblack_binary_predicate_set_arg1_method(SubLObject self, SubLObject new_argn) {
	return cyblack_binary_predicate_set_argn_method(self, ONE_INTEGER, new_argn);
    }

    public static final SubLObject cyblack_binary_predicate_get_arg2_method(SubLObject self) {
	return cyblack_predicate_get_argn_method(self, TWO_INTEGER);
    }

    public static final SubLObject cyblack_binary_predicate_set_arg2_method(SubLObject self, SubLObject new_argn) {
	return cyblack_binary_predicate_set_argn_method(self, TWO_INTEGER, new_argn);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_binary_predicate_over_value_expressions_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_binary_predicate_over_value_expressions_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARITY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARGLIST, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARGTYPE_LIST, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_binary_predicate_over_value_expressions_p(SubLObject cyblack_binary_predicate_over_value_expressions) {
	return classes.subloop_instanceof_class(cyblack_binary_predicate_over_value_expressions, CYBLACK_BINARY_PREDICATE_OVER_VALUE_EXPRESSIONS);
    }

    public static final SubLObject cyblack_binary_predicate_over_value_expressions_initialize_method(SubLObject self) {
	cyblack_binary_predicate_initialize_method(self);
	cyblack_binary_predicate_declare_signature_method(self, list(CYBLACK_VALUE_EXPRESSION, CYBLACK_VALUE_EXPRESSION));
	return self;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_eq_predicate_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_eq_predicate_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARITY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARGLIST, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARGTYPE_LIST, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_eq_predicate_p(SubLObject cyblack_eq_predicate) {
	return classes.subloop_instanceof_class(cyblack_eq_predicate, CYBLACK_EQ_PREDICATE);
    }

    public static final SubLObject cyblack_eq_predicate_initialize_method(SubLObject self) {
	return cyblack_binary_predicate_initialize_method(self);
    }

    public static final SubLObject cyblack_eq_predicate_print_operator_method(SubLObject self, SubLObject stream) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt1079$_EQ);
	return self;
    }

    public static final SubLObject cyblack_eq_predicate_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    SubLObject arg1 = cyblack_predicate_get_argn_method(self, ONE_INTEGER);
	    SubLObject arg2 = cyblack_predicate_get_argn_method(self, TWO_INTEGER);
	    SubLObject result = NIL;
	    if (!((NIL != arg1) || (NIL != arg2))) {
		return T;
	    }
	    if ((NIL != arg1) && (NIL != arg2)) {
		result = eq(methods.funcall_instance_method_with_1_args(arg1, GET_VALUE, environment), methods.funcall_instance_method_with_1_args(arg2, GET_VALUE, environment));
	    }
	    return result;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_equal_predicate_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_equal_predicate_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARITY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARGLIST, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARGTYPE_LIST, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_equal_predicate_p(SubLObject cyblack_equal_predicate) {
	return classes.subloop_instanceof_class(cyblack_equal_predicate, CYBLACK_EQUAL_PREDICATE);
    }

    public static final SubLObject cyblack_equal_predicate_initialize_method(SubLObject self) {
	return cyblack_binary_predicate_initialize_method(self);
    }

    public static final SubLObject cyblack_equal_predicate_print_operator_method(SubLObject self, SubLObject stream) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt1088$_EQUAL);
	return self;
    }

    public static final SubLObject cyblack_equal(SubLObject arg1, SubLObject arg2) {
	if (arg1 == arg2) {
	    return T;
	}
	if ((NIL != Guids.guid_p(arg1)) && (NIL != Guids.guid_p(arg2))) {
	    {
		SubLObject arg1_as_string = Guids.guid_to_string(arg1);
		SubLObject arg2_as_string = Guids.guid_to_string(arg2);
		return Strings.string_equal(arg1_as_string, arg2_as_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	    }
	}
	return equal(arg1, arg2);
    }

    public static final SubLObject cyblack_equal_predicate_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    SubLObject arg1 = cyblack_predicate_get_argn_method(self, ONE_INTEGER);
	    SubLObject arg2 = cyblack_predicate_get_argn_method(self, TWO_INTEGER);
	    SubLObject result = NIL;
	    if (!((NIL != arg1) || (NIL != arg2))) {
		return T;
	    }
	    if ((NIL != arg1) && (NIL != arg2)) {
		result = cyblack_equal(methods.funcall_instance_method_with_1_args(arg1, GET_VALUE, environment), methods.funcall_instance_method_with_1_args(arg2, GET_VALUE, environment));
	    }
	    return result;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_assoc_equal_predicate_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_assoc_equal_predicate_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARITY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARGLIST, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARGTYPE_LIST, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_assoc_equal_predicate_p(SubLObject cyblack_assoc_equal_predicate) {
	return classes.subloop_instanceof_class(cyblack_assoc_equal_predicate, CYBLACK_ASSOC_EQUAL_PREDICATE);
    }

    public static final SubLObject cyblack_assoc_equal_predicate_initialize_method(SubLObject self) {
	return cyblack_binary_predicate_initialize_method(self);
    }

    public static final SubLObject cyblack_assoc_equal_predicate_print_operator_method(SubLObject self, SubLObject stream) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt1097$_ASSOC_EQUAL);
	return self;
    }

    public static final SubLObject cyblack_assoc_equal_predicate_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    SubLObject arg1 = cyblack_predicate_get_argn_method(self, ONE_INTEGER);
	    SubLObject arg2 = cyblack_predicate_get_argn_method(self, TWO_INTEGER);
	    SubLObject result = NIL;
	    if (NIL == arg1) {
		return sublisp_null(arg2);
	    }
	    if (NIL == arg2) {
		return sublisp_null(arg1);
	    }
	    if ((NIL != arg1) && (NIL != arg2)) {
		result = list_utilities.assoc_equal(methods.funcall_instance_method_with_1_args(arg1, GET_VALUE, environment), methods.funcall_instance_method_with_1_args(arg2, GET_VALUE, environment));
	    }
	    return result;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_le_predicate_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_le_predicate_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARITY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARGLIST, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARGTYPE_LIST, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_le_predicate_p(SubLObject cyblack_le_predicate) {
	return classes.subloop_instanceof_class(cyblack_le_predicate, CYBLACK_LE_PREDICATE);
    }

    public static final SubLObject cyblack_le_predicate_initialize_method(SubLObject self) {
	return cyblack_binary_predicate_initialize_method(self);
    }

    public static final SubLObject cyblack_le_predicate_print_operator_method(SubLObject self, SubLObject stream) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt1106$_LE);
	return self;
    }

    public static final SubLObject cyblack_le(SubLObject arg1, SubLObject arg2) {
	if (arg1 == arg2) {
	    return T;
	}
	if ((NIL != Guids.guid_p(arg1)) && (NIL != Guids.guid_p(arg2))) {
	    {
		SubLObject arg1_as_string = Guids.guid_to_string(arg1);
		SubLObject arg2_as_string = Guids.guid_to_string(arg2);
		return Strings.stringLE(arg1_as_string, arg2_as_string);
	    }
	}
	return numLE(arg1, arg2);
    }

    public static final SubLObject cyblack_le_predicate_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    SubLObject arg1 = cyblack_predicate_get_argn_method(self, ONE_INTEGER);
	    SubLObject arg2 = cyblack_predicate_get_argn_method(self, TWO_INTEGER);
	    SubLObject result = NIL;
	    if (!((NIL != arg1) || (NIL != arg2))) {
		return T;
	    }
	    if ((NIL != arg1) && (NIL != arg2)) {
		result = cyblack_le(methods.funcall_instance_method_with_1_args(arg1, GET_VALUE, environment), methods.funcall_instance_method_with_1_args(arg2, GET_VALUE, environment));
	    }
	    return result;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_lt_predicate_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_lt_predicate_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARITY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARGLIST, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARGTYPE_LIST, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_lt_predicate_p(SubLObject cyblack_lt_predicate) {
	return classes.subloop_instanceof_class(cyblack_lt_predicate, CYBLACK_LT_PREDICATE);
    }

    public static final SubLObject cyblack_lt_predicate_initialize_method(SubLObject self) {
	return cyblack_binary_predicate_initialize_method(self);
    }

    public static final SubLObject cyblack_lt_predicate_print_operator_method(SubLObject self, SubLObject stream) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt1115$_LT);
	return self;
    }

    public static final SubLObject cyblack_lt(SubLObject arg1, SubLObject arg2) {
	if (arg1 == arg2) {
	    return NIL;
	}
	if ((NIL != Guids.guid_p(arg1)) && (NIL != Guids.guid_p(arg2))) {
	    {
		SubLObject arg1_as_string = Guids.guid_to_string(arg1);
		SubLObject arg2_as_string = Guids.guid_to_string(arg2);
		return Strings.stringL(arg1_as_string, arg2_as_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	    }
	}
	return numL(arg1, arg2);
    }

    public static final SubLObject cyblack_lt_predicate_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    SubLObject arg1 = cyblack_predicate_get_argn_method(self, ONE_INTEGER);
	    SubLObject arg2 = cyblack_predicate_get_argn_method(self, TWO_INTEGER);
	    SubLObject result = NIL;
	    if (!((NIL != arg1) || (NIL != arg2))) {
		return T;
	    }
	    if ((NIL != arg1) && (NIL != arg2)) {
		result = cyblack_lt(methods.funcall_instance_method_with_1_args(arg1, GET_VALUE, environment), methods.funcall_instance_method_with_1_args(arg2, GET_VALUE, environment));
	    }
	    return result;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_ge_predicate_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_ge_predicate_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARITY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARGLIST, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARGTYPE_LIST, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_ge_predicate_p(SubLObject cyblack_ge_predicate) {
	return classes.subloop_instanceof_class(cyblack_ge_predicate, CYBLACK_GE_PREDICATE);
    }

    public static final SubLObject cyblack_ge_predicate_initialize_method(SubLObject self) {
	return cyblack_binary_predicate_initialize_method(self);
    }

    public static final SubLObject cyblack_ge_predicate_print_operator_method(SubLObject self, SubLObject stream) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt1124$_GE);
	return self;
    }

    public static final SubLObject cyblack_ge(SubLObject arg1, SubLObject arg2) {
	if (arg1 == arg2) {
	    return T;
	}
	if ((NIL != Guids.guid_p(arg1)) && (NIL != Guids.guid_p(arg2))) {
	    {
		SubLObject arg1_as_string = Guids.guid_to_string(arg1);
		SubLObject arg2_as_string = Guids.guid_to_string(arg2);
		return Strings.stringGE(arg1_as_string, arg2_as_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	    }
	}
	return numGE(arg1, arg2);
    }

    public static final SubLObject cyblack_ge_predicate_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    SubLObject arg1 = cyblack_predicate_get_argn_method(self, ONE_INTEGER);
	    SubLObject arg2 = cyblack_predicate_get_argn_method(self, TWO_INTEGER);
	    SubLObject result = NIL;
	    if (!((NIL != arg1) || (NIL != arg2))) {
		return T;
	    }
	    if ((NIL != arg1) && (NIL != arg2)) {
		result = cyblack_ge(methods.funcall_instance_method_with_1_args(arg1, GET_VALUE, environment), methods.funcall_instance_method_with_1_args(arg2, GET_VALUE, environment));
	    }
	    return result;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_gt_predicate_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_gt_predicate_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARITY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARGLIST, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PREDICATE, ARGTYPE_LIST, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_gt_predicate_p(SubLObject cyblack_gt_predicate) {
	return classes.subloop_instanceof_class(cyblack_gt_predicate, CYBLACK_GT_PREDICATE);
    }

    public static final SubLObject cyblack_gt_predicate_initialize_method(SubLObject self) {
	return cyblack_binary_predicate_initialize_method(self);
    }

    public static final SubLObject cyblack_gt_predicate_print_operator_method(SubLObject self, SubLObject stream) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt1124$_GE);
	return self;
    }

    public static final SubLObject cyblack_gt(SubLObject arg1, SubLObject arg2) {
	if (arg1 == arg2) {
	    return NIL;
	}
	if ((NIL != Guids.guid_p(arg1)) && (NIL != Guids.guid_p(arg2))) {
	    {
		SubLObject arg1_as_string = Guids.guid_to_string(arg1);
		SubLObject arg2_as_string = Guids.guid_to_string(arg2);
		return Strings.stringG(arg1_as_string, arg2_as_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	    }
	}
	return numG(arg1, arg2);
    }

    public static final SubLObject cyblack_gt_predicate_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    SubLObject arg1 = cyblack_predicate_get_argn_method(self, ONE_INTEGER);
	    SubLObject arg2 = cyblack_predicate_get_argn_method(self, TWO_INTEGER);
	    SubLObject result = NIL;
	    if (!((NIL != arg1) || (NIL != arg2))) {
		return T;
	    }
	    if ((NIL != arg1) && (NIL != arg2)) {
		result = cyblack_gt(methods.funcall_instance_method_with_1_args(arg1, GET_VALUE, environment), methods.funcall_instance_method_with_1_args(arg2, GET_VALUE, environment));
	    }
	    return result;
	}
    }

    public static final SubLObject get_cyblack_posting_reference_variable(SubLObject cyblack_posting_reference) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_posting_reference, FOUR_INTEGER, VARIABLE);
    }

    public static final SubLObject set_cyblack_posting_reference_variable(SubLObject cyblack_posting_reference, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_posting_reference, value, FOUR_INTEGER, VARIABLE);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_posting_reference_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_posting_reference_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_POSTING_REFERENCE, VARIABLE, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_posting_reference_p(SubLObject cyblack_posting_reference) {
	return classes.subloop_instanceof_class(cyblack_posting_reference, CYBLACK_POSTING_REFERENCE);
    }

    public static final SubLObject cyblack_posting_reference_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_posting_reference_method = NIL;
	    SubLObject variable = get_cyblack_posting_reference_variable(self);
	    try {
		try {
		    cyblack_pattern_initialize_method(self);
		    variable = NIL;
		    sublisp_throw($sym1138$OUTER_CATCH_FOR_CYBLACK_POSTING_REFERENCE_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_posting_reference_variable(self, variable);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_posting_reference_method = Errors.handleThrowable(ccatch_env_var, $sym1138$OUTER_CATCH_FOR_CYBLACK_POSTING_REFERENCE_METHOD);
	    }
	    return catch_var_for_cyblack_posting_reference_method;
	}
    }

    public static final SubLObject cyblack_posting_reference_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject variable = get_cyblack_posting_reference_variable(self);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt94$_S, variable);
	    return self;
	}
    }

    public static final SubLObject cyblack_posting_reference_get_variable_method(SubLObject self) {
	{
	    SubLObject variable = get_cyblack_posting_reference_variable(self);
	    return variable;
	}
    }

    public static final SubLObject cyblack_posting_reference_set_variable_method(SubLObject self, SubLObject new_variable) {
	{
	    SubLObject catch_var_for_cyblack_posting_reference_method = NIL;
	    SubLObject variable = get_cyblack_posting_reference_variable(self);
	    try {
		try {
		    variable = new_variable;
		    sublisp_throw($sym1143$OUTER_CATCH_FOR_CYBLACK_POSTING_REFERENCE_METHOD, new_variable);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_posting_reference_variable(self, variable);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_posting_reference_method = Errors.handleThrowable(ccatch_env_var, $sym1143$OUTER_CATCH_FOR_CYBLACK_POSTING_REFERENCE_METHOD);
	    }
	    return catch_var_for_cyblack_posting_reference_method;
	}
    }

    public static final SubLObject cyblack_posting_reference_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    SubLObject variable = get_cyblack_posting_reference_variable(self);
	    if (NIL == environment) {
		return NIL;
	    }
	    {
		SubLObject result = cyblack_environment_get_method(environment, variable, UNPROVIDED);
		return result;
	    }
	}
    }

    public static final SubLObject get_cyblack_posting_operation_expression_posting_expression(SubLObject cyblack_posting_operation_expression) {
	return classes.subloop_get_instance_slot(cyblack_posting_operation_expression, FOUR_INTEGER);
    }

    public static final SubLObject set_cyblack_posting_operation_expression_posting_expression(SubLObject cyblack_posting_operation_expression, SubLObject value) {
	return classes.subloop_set_instance_slot(cyblack_posting_operation_expression, value, FOUR_INTEGER);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_posting_operation_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_posting_operation_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_POSTING_OPERATION_EXPRESSION, POSTING_EXPRESSION, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_posting_operation_expression_p(SubLObject cyblack_posting_operation_expression) {
	return classes.subloop_instanceof_class(cyblack_posting_operation_expression, CYBLACK_POSTING_OPERATION_EXPRESSION);
    }

    public static final SubLObject cyblack_posting_operation_expression_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_posting_operation_expression_method = NIL;
	    SubLObject posting_expression = get_cyblack_posting_operation_expression_posting_expression(self);
	    try {
		try {
		    cyblack_pattern_initialize_method(self);
		    posting_expression = NIL;
		    sublisp_throw($sym1153$OUTER_CATCH_FOR_CYBLACK_POSTING_OPERATION_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_posting_operation_expression_posting_expression(self, posting_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_posting_operation_expression_method = Errors.handleThrowable(ccatch_env_var, $sym1153$OUTER_CATCH_FOR_CYBLACK_POSTING_OPERATION_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_posting_operation_expression_method;
	}
    }

    public static final SubLObject cyblack_posting_operation_expression_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject posting_expression = get_cyblack_posting_operation_expression_posting_expression(self);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt1156$__POSTING_OPERATION_EXPRESSION__S, posting_expression);
	    return self;
	}
    }

    public static final SubLObject cyblack_posting_operation_expression_get_posting_expression_method(SubLObject self) {
	{
	    SubLObject posting_expression = get_cyblack_posting_operation_expression_posting_expression(self);
	    return posting_expression;
	}
    }

    public static final SubLObject cyblack_posting_operation_expression_set_posting_expression_method(SubLObject self, SubLObject new_posting_expression) {
	{
	    SubLObject catch_var_for_cyblack_posting_operation_expression_method = NIL;
	    SubLObject posting_expression = get_cyblack_posting_operation_expression_posting_expression(self);
	    try {
		try {
		    posting_expression = new_posting_expression;
		    sublisp_throw($sym1164$OUTER_CATCH_FOR_CYBLACK_POSTING_OPERATION_EXPRESSION_METHOD, new_posting_expression);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_posting_operation_expression_posting_expression(self, posting_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_posting_operation_expression_method = Errors.handleThrowable(ccatch_env_var, $sym1164$OUTER_CATCH_FOR_CYBLACK_POSTING_OPERATION_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_posting_operation_expression_method;
	}
    }

    public static final SubLObject cyblack_posting_operation_expression_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    SubLObject posting_expression = get_cyblack_posting_operation_expression_posting_expression(self);
	    if (NIL != posting_expression) {
		{
		    SubLObject posting_expression_evaluated = methods.funcall_instance_method_with_1_args(posting_expression, GET_VALUE, environment);
		    return posting_expression_evaluated;
		}
	    }
	    return NIL;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_type_of_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_type_of_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_POSTING_OPERATION_EXPRESSION, POSTING_EXPRESSION, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_type_of_expression_p(SubLObject cyblack_type_of_expression) {
	return classes.subloop_instanceof_class(cyblack_type_of_expression, CYBLACK_TYPE_OF_EXPRESSION);
    }

    public static final SubLObject cyblack_type_of_expression_initialize_method(SubLObject self) {
	cyblack_posting_operation_expression_initialize_method(self);
	return self;
    }

    public static final SubLObject cyblack_type_of_expression_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject posting_expression = get_cyblack_posting_operation_expression_posting_expression(self);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt1174$__TYPE_OF__S_, posting_expression);
	    return self;
	}
    }

    public static final SubLObject cyblack_type_of_expression_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    SubLObject posting_value = cyblack_posting_operation_expression_get_value_method(self, environment);
	    if (NIL != posting_value) {
		{
		    SubLObject posting_type = cyblack_posting_dispatch_functions.cyblack_posting_get_datatype(posting_value);
		    return cyblack_datatype.cyblack_get_typename_if_not_null(posting_type);
		}
	    }
	    return NIL;
	}
    }

    public static final SubLObject get_cyblack_call_method_expression_actual_args(SubLObject cyblack_call_method_expression) {
	return classes.subloop_get_instance_slot(cyblack_call_method_expression, SIX_INTEGER);
    }

    public static final SubLObject set_cyblack_call_method_expression_actual_args(SubLObject cyblack_call_method_expression, SubLObject value) {
	return classes.subloop_set_instance_slot(cyblack_call_method_expression, value, SIX_INTEGER);
    }

    public static final SubLObject get_cyblack_call_method_expression_method_name_literal(SubLObject cyblack_call_method_expression) {
	return classes.subloop_get_instance_slot(cyblack_call_method_expression, FIVE_INTEGER);
    }

    public static final SubLObject set_cyblack_call_method_expression_method_name_literal(SubLObject cyblack_call_method_expression, SubLObject value) {
	return classes.subloop_set_instance_slot(cyblack_call_method_expression, value, FIVE_INTEGER);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_call_method_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_call_method_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_POSTING_OPERATION_EXPRESSION, POSTING_EXPRESSION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_CALL_METHOD_EXPRESSION, METHOD_NAME_LITERAL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_CALL_METHOD_EXPRESSION, ACTUAL_ARGS, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_call_method_expression_p(SubLObject cyblack_call_method_expression) {
	return classes.subloop_instanceof_class(cyblack_call_method_expression, CYBLACK_CALL_METHOD_EXPRESSION);
    }

    public static final SubLObject cyblack_call_method_expression_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_call_method_expression_method = NIL;
	    SubLObject actual_args = get_cyblack_call_method_expression_actual_args(self);
	    SubLObject method_name_literal = get_cyblack_call_method_expression_method_name_literal(self);
	    try {
		try {
		    cyblack_posting_operation_expression_initialize_method(self);
		    method_name_literal = NIL;
		    actual_args = NIL;
		    sublisp_throw($sym1185$OUTER_CATCH_FOR_CYBLACK_CALL_METHOD_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_call_method_expression_actual_args(self, actual_args);
			    set_cyblack_call_method_expression_method_name_literal(self, method_name_literal);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_call_method_expression_method = Errors.handleThrowable(ccatch_env_var, $sym1185$OUTER_CATCH_FOR_CYBLACK_CALL_METHOD_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_call_method_expression_method;
	}
    }

    public static final SubLObject cyblack_call_method_expression_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject actual_args = get_cyblack_call_method_expression_actual_args(self);
	    SubLObject method_name_literal = get_cyblack_call_method_expression_method_name_literal(self);
	    SubLObject posting_expression = get_cyblack_posting_operation_expression_posting_expression(self);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt1188$__CALL__S__S, posting_expression, method_name_literal);
	    {
		SubLObject cdolist_list_var = actual_args;
		SubLObject actual_arg = NIL;
		for (actual_arg = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), actual_arg = cdolist_list_var.first()) {
		    format(stream, cyblack_precondition_pattern_p2.$str_alt629$__S, actual_arg);
		}
	    }
	    format(stream, cyblack_precondition_pattern_p2.$str_alt623$_);
	    return self;
	}
    }

    public static final SubLObject cyblack_call_method_expression_get_method_name_literal_method(SubLObject self) {
	{
	    SubLObject method_name_literal = get_cyblack_call_method_expression_method_name_literal(self);
	    return method_name_literal;
	}
    }

    public static final SubLObject cyblack_call_method_expression_set_method_name_literal_method(SubLObject self, SubLObject new_method_name_literal) {
	{
	    SubLObject catch_var_for_cyblack_call_method_expression_method = NIL;
	    SubLObject method_name_literal = get_cyblack_call_method_expression_method_name_literal(self);
	    try {
		try {
		    method_name_literal = new_method_name_literal;
		    sublisp_throw($sym1196$OUTER_CATCH_FOR_CYBLACK_CALL_METHOD_EXPRESSION_METHOD, new_method_name_literal);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_call_method_expression_method_name_literal(self, method_name_literal);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_call_method_expression_method = Errors.handleThrowable(ccatch_env_var, $sym1196$OUTER_CATCH_FOR_CYBLACK_CALL_METHOD_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_call_method_expression_method;
	}
    }

    public static final SubLObject cyblack_call_method_expression_get_actual_args_method(SubLObject self) {
	{
	    SubLObject actual_args = get_cyblack_call_method_expression_actual_args(self);
	    return actual_args;
	}
    }

    public static final SubLObject cyblack_call_method_expression_set_actual_args_method(SubLObject self, SubLObject new_actual_args) {
	{
	    SubLObject catch_var_for_cyblack_call_method_expression_method = NIL;
	    SubLObject actual_args = get_cyblack_call_method_expression_actual_args(self);
	    try {
		try {
		    actual_args = new_actual_args;
		    sublisp_throw($sym1204$OUTER_CATCH_FOR_CYBLACK_CALL_METHOD_EXPRESSION_METHOD, new_actual_args);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_call_method_expression_actual_args(self, actual_args);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_call_method_expression_method = Errors.handleThrowable(ccatch_env_var, $sym1204$OUTER_CATCH_FOR_CYBLACK_CALL_METHOD_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_call_method_expression_method;
	}
    }

    public static final SubLObject cyblack_call_method_expression_evaluated_args_method(SubLObject self, SubLObject environment) {
	{
	    SubLObject actual_args = get_cyblack_call_method_expression_actual_args(self);
	    SubLObject evaluated_args = NIL;
	    SubLObject list_expression = actual_args;
	    if (NIL == list_expression) {
		evaluated_args = NIL;
	    } else if (list_expression.isAtom()) {
		evaluated_args = list(list_expression);
	    } else if (NIL == list_expression.rest()) {
		{
		    SubLObject actual_arg = list_expression.first();
		    evaluated_args = list(NIL != cyblack_value_expression_p(actual_arg) ? ((SubLObject) (methods.funcall_instance_method_with_1_args(actual_arg, GET_VALUE, environment))) : actual_arg);
		}
	    } else {
		{
		    SubLObject tail_cons = NIL;
		    SubLObject result = NIL;
		    {
			SubLObject actual_arg = list_expression.first();
			evaluated_args = list(NIL != cyblack_value_expression_p(actual_arg) ? ((SubLObject) (methods.funcall_instance_method_with_1_args(actual_arg, GET_VALUE, environment))) : actual_arg);
			tail_cons = evaluated_args;
		    }
		    {
			SubLObject cdolist_list_var = list_expression.rest();
			SubLObject actual_arg = NIL;
			for (actual_arg = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), actual_arg = cdolist_list_var.first()) {
			    result = list(NIL != cyblack_value_expression_p(actual_arg) ? ((SubLObject) (methods.funcall_instance_method_with_1_args(actual_arg, GET_VALUE, environment))) : actual_arg);
			    rplacd(tail_cons, result);
			    tail_cons = result;
			}
		    }
		}
	    }

	    return evaluated_args;
	}
    }

    public static final SubLObject cyblack_call_method_expression_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    SubLObject catch_var_for_cyblack_call_method_expression_method = NIL;
	    SubLObject method_name_literal = get_cyblack_call_method_expression_method_name_literal(self);
	    try {
		try {
		    {
			SubLObject posting_value = cyblack_posting_operation_expression_get_value_method(self, environment);
			SubLObject method_name_literal_evaluated = methods.funcall_instance_method_with_1_args(method_name_literal, GET_VALUE, environment);
			SubLObject args = cyblack_call_method_expression_evaluated_args_method(self, environment);
			SubLObject class_name = subloop_structures.class_name(subloop_structures.instance_class(posting_value));
			SubLObject function_name = methods.resolve_method(method_name_literal_evaluated, class_name);
			sublisp_throw($sym1210$OUTER_CATCH_FOR_CYBLACK_CALL_METHOD_EXPRESSION_METHOD, apply(function_name, listS(posting_value, args)));
			sublisp_throw($sym1210$OUTER_CATCH_FOR_CYBLACK_CALL_METHOD_EXPRESSION_METHOD, NIL);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_call_method_expression_method_name_literal(self, method_name_literal);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_call_method_expression_method = Errors.handleThrowable(ccatch_env_var, $sym1210$OUTER_CATCH_FOR_CYBLACK_CALL_METHOD_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_call_method_expression_method;
	}
    }

    public static final SubLObject get_cyblack_slot_access_slot_name_literal(SubLObject cyblack_slot_access) {
	return classes.subloop_get_instance_slot(cyblack_slot_access, FIVE_INTEGER);
    }

    public static final SubLObject set_cyblack_slot_access_slot_name_literal(SubLObject cyblack_slot_access, SubLObject value) {
	return classes.subloop_set_instance_slot(cyblack_slot_access, value, FIVE_INTEGER);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_slot_access_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_slot_access_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_POSTING_OPERATION_EXPRESSION, POSTING_EXPRESSION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_SLOT_ACCESS, SLOT_NAME_LITERAL, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_slot_access_p(SubLObject cyblack_slot_access) {
	return classes.subloop_instanceof_class(cyblack_slot_access, CYBLACK_SLOT_ACCESS);
    }

    public static final SubLObject cyblack_slot_access_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_slot_access_method = NIL;
	    SubLObject slot_name_literal = get_cyblack_slot_access_slot_name_literal(self);
	    try {
		try {
		    cyblack_posting_operation_expression_initialize_method(self);
		    slot_name_literal = NIL;
		    sublisp_throw($sym1218$OUTER_CATCH_FOR_CYBLACK_SLOT_ACCESS_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_slot_access_slot_name_literal(self, slot_name_literal);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_slot_access_method = Errors.handleThrowable(ccatch_env_var, $sym1218$OUTER_CATCH_FOR_CYBLACK_SLOT_ACCESS_METHOD);
	    }
	    return catch_var_for_cyblack_slot_access_method;
	}
    }

    public static final SubLObject cyblack_slot_access_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject slot_name_literal = get_cyblack_slot_access_slot_name_literal(self);
	    SubLObject posting_expression = get_cyblack_posting_operation_expression_posting_expression(self);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt1221$__GET_SLOT__S__S_, posting_expression, slot_name_literal);
	    return self;
	}
    }

    public static final SubLObject cyblack_slot_access_get_slot_name_method(SubLObject self) {
	{
	    SubLObject slot_name_literal = get_cyblack_slot_access_slot_name_literal(self);
	    return slot_name_literal;
	}
    }

    public static final SubLObject cyblack_slot_access_set_slot_name_method(SubLObject self, SubLObject new_slot_name) {
	{
	    SubLObject catch_var_for_cyblack_slot_access_method = NIL;
	    SubLObject slot_name_literal = get_cyblack_slot_access_slot_name_literal(self);
	    try {
		try {
		    slot_name_literal = new_slot_name;
		    sublisp_throw($sym1229$OUTER_CATCH_FOR_CYBLACK_SLOT_ACCESS_METHOD, new_slot_name);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_slot_access_slot_name_literal(self, slot_name_literal);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_slot_access_method = Errors.handleThrowable(ccatch_env_var, $sym1229$OUTER_CATCH_FOR_CYBLACK_SLOT_ACCESS_METHOD);
	    }
	    return catch_var_for_cyblack_slot_access_method;
	}
    }

    public static final SubLObject cyblack_slot_access_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    SubLObject slot_name_literal = get_cyblack_slot_access_slot_name_literal(self);
	    SubLObject posting = cyblack_posting_operation_expression_get_value_method(self, environment);
	    SubLObject slot_name = methods.funcall_instance_method_with_1_args(slot_name_literal, GET_VALUE, environment);
	    return instances.get_slot(posting, slot_name);
	}
    }

    public static final SubLObject get_cyblack_arithmetic_expression_arity(SubLObject cyblack_arithmetic_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_arithmetic_expression, FIVE_INTEGER, ARITY);
    }

    public static final SubLObject set_cyblack_arithmetic_expression_arity(SubLObject cyblack_arithmetic_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_arithmetic_expression, value, FIVE_INTEGER, ARITY);
    }

    public static final SubLObject get_cyblack_arithmetic_expression_value_expression_list(SubLObject cyblack_arithmetic_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_arithmetic_expression, FOUR_INTEGER, VALUE_EXPRESSION_LIST);
    }

    public static final SubLObject set_cyblack_arithmetic_expression_value_expression_list(SubLObject cyblack_arithmetic_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_arithmetic_expression, value, FOUR_INTEGER, VALUE_EXPRESSION_LIST);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_arithmetic_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_arithmetic_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_ARITHMETIC_EXPRESSION, VALUE_EXPRESSION_LIST, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_ARITHMETIC_EXPRESSION, ARITY, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_arithmetic_expression_p(SubLObject cyblack_arithmetic_expression) {
	return classes.subloop_instanceof_class(cyblack_arithmetic_expression, CYBLACK_ARITHMETIC_EXPRESSION);
    }

    public static final SubLObject cyblack_arithmetic_expression_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_arithmetic_expression_method = NIL;
	    SubLObject v_arity = get_cyblack_arithmetic_expression_arity(self);
	    SubLObject value_expression_list = get_cyblack_arithmetic_expression_value_expression_list(self);
	    try {
		try {
		    cyblack_pattern_initialize_method(self);
		    value_expression_list = NIL;
		    v_arity = NIL;
		    sublisp_throw($sym1239$OUTER_CATCH_FOR_CYBLACK_ARITHMETIC_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_arithmetic_expression_arity(self, v_arity);
			    set_cyblack_arithmetic_expression_value_expression_list(self, value_expression_list);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_arithmetic_expression_method = Errors.handleThrowable(ccatch_env_var, $sym1239$OUTER_CATCH_FOR_CYBLACK_ARITHMETIC_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_arithmetic_expression_method;
	}
    }

    public static final SubLObject cyblack_arithmetic_expression_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt818$_);
	methods.funcall_instance_method_with_1_args(self, PRINT_OPERATOR, stream);
	methods.funcall_instance_method_with_1_args(self, PRINT_VALUE_EXPRESSION_LIST, stream);
	format(stream, cyblack_precondition_pattern_p2.$str_alt623$_);
	return self;
    }

    public static final SubLObject cyblack_arithmetic_expression_print_operator_method(SubLObject self, SubLObject stream) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt1245$_ABSTRACT_ARITHMETIC_OPERATION);
	return self;
    }

    public static final SubLObject cyblack_arithmetic_expression_print_value_expression_list_method(SubLObject self, SubLObject stream) {
	{
	    SubLObject value_expression_list = get_cyblack_arithmetic_expression_value_expression_list(self);
	    SubLObject cdolist_list_var = value_expression_list;
	    SubLObject value_expression = NIL;
	    for (value_expression = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), value_expression = cdolist_list_var.first()) {
		format(stream, cyblack_precondition_pattern_p2.$str_alt629$__S, value_expression);
	    }
	    return self;
	}
    }

    public static final SubLObject cyblack_arithmetic_expression_get_arity_method(SubLObject self) {
	{
	    SubLObject v_arity = get_cyblack_arithmetic_expression_arity(self);
	    return v_arity;
	}
    }

    public static final SubLObject cyblack_arithmetic_expression_set_arity_method(SubLObject self, SubLObject n) {
	{
	    SubLObject catch_var_for_cyblack_arithmetic_expression_method = NIL;
	    SubLObject v_arity = get_cyblack_arithmetic_expression_arity(self);
	    try {
		try {
		    v_arity = n;
		    sublisp_throw($sym1252$OUTER_CATCH_FOR_CYBLACK_ARITHMETIC_EXPRESSION_METHOD, n);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_arithmetic_expression_arity(self, v_arity);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_arithmetic_expression_method = Errors.handleThrowable(ccatch_env_var, $sym1252$OUTER_CATCH_FOR_CYBLACK_ARITHMETIC_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_arithmetic_expression_method;
	}
    }

    public static final SubLObject cyblack_arithmetic_expression_get_args_method(SubLObject self) {
	{
	    SubLObject value_expression_list = get_cyblack_arithmetic_expression_value_expression_list(self);
	    return value_expression_list;
	}
    }

    public static final SubLObject cyblack_arithmetic_expression_set_args_method(SubLObject self, SubLObject new_args) {
	{
	    SubLObject catch_var_for_cyblack_arithmetic_expression_method = NIL;
	    SubLObject value_expression_list = get_cyblack_arithmetic_expression_value_expression_list(self);
	    try {
		try {
		    value_expression_list = copy_list(new_args);
		    sublisp_throw($sym1257$OUTER_CATCH_FOR_CYBLACK_ARITHMETIC_EXPRESSION_METHOD, new_args);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_arithmetic_expression_value_expression_list(self, value_expression_list);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_arithmetic_expression_method = Errors.handleThrowable(ccatch_env_var, $sym1257$OUTER_CATCH_FOR_CYBLACK_ARITHMETIC_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_arithmetic_expression_method;
	}
    }

    public static final SubLObject cyblack_arithmetic_expression_get_argn_method(SubLObject self, SubLObject n) {
	{
	    SubLObject value_expression_list = get_cyblack_arithmetic_expression_value_expression_list(self);
	    return nth(subtract(n, ONE_INTEGER), value_expression_list);
	}
    }

    public static final SubLObject cyblack_arithmetic_expression_set_argn_method(SubLObject self, SubLObject n, SubLObject new_arg) {
	{
	    SubLObject catch_var_for_cyblack_arithmetic_expression_method = NIL;
	    SubLObject v_arity = get_cyblack_arithmetic_expression_arity(self);
	    SubLObject value_expression_list = get_cyblack_arithmetic_expression_value_expression_list(self);
	    try {
		try {
		    {
			SubLObject actual_args_count = length(value_expression_list);
			if (n.numLE(actual_args_count)) {
			    set_nth(subtract(n, ONE_INTEGER), value_expression_list, new_arg);
			    sublisp_throw($sym1263$OUTER_CATCH_FOR_CYBLACK_ARITHMETIC_EXPRESSION_METHOD, new_arg);
			}
			{
			    SubLObject grow_by = subtract(n, actual_args_count);
			    SubLObject extension = make_list(grow_by, UNPROVIDED);
			    rplaca(last(extension, UNPROVIDED), new_arg);
			    value_expression_list = nconc(value_expression_list, extension);
			    sublisp_throw($sym1263$OUTER_CATCH_FOR_CYBLACK_ARITHMETIC_EXPRESSION_METHOD, new_arg);
			}
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_arithmetic_expression_arity(self, v_arity);
			    set_cyblack_arithmetic_expression_value_expression_list(self, value_expression_list);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_arithmetic_expression_method = Errors.handleThrowable(ccatch_env_var, $sym1263$OUTER_CATCH_FOR_CYBLACK_ARITHMETIC_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_arithmetic_expression_method;
	}
    }

    public static final SubLObject cyblack_arithmetic_expression_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_binary_arithmetic_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_binary_arithmetic_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_ARITHMETIC_EXPRESSION, VALUE_EXPRESSION_LIST, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_ARITHMETIC_EXPRESSION, ARITY, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_binary_arithmetic_expression_p(SubLObject cyblack_binary_arithmetic_expression) {
	return classes.subloop_instanceof_class(cyblack_binary_arithmetic_expression, CYBLACK_BINARY_ARITHMETIC_EXPRESSION);
    }

    public static final SubLObject cyblack_binary_arithmetic_expression_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_binary_arithmetic_expression_method = NIL;
	    SubLObject v_arity = get_cyblack_arithmetic_expression_arity(self);
	    SubLObject value_expression_list = get_cyblack_arithmetic_expression_value_expression_list(self);
	    try {
		try {
		    cyblack_arithmetic_expression_initialize_method(self);
		    value_expression_list = NIL;
		    v_arity = TWO_INTEGER;
		    sublisp_throw($sym1271$OUTER_CATCH_FOR_CYBLACK_BINARY_ARITHMETIC_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_arithmetic_expression_arity(self, v_arity);
			    set_cyblack_arithmetic_expression_value_expression_list(self, value_expression_list);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_binary_arithmetic_expression_method = Errors.handleThrowable(ccatch_env_var, $sym1271$OUTER_CATCH_FOR_CYBLACK_BINARY_ARITHMETIC_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_binary_arithmetic_expression_method;
	}
    }

    public static final SubLObject cyblack_binary_arithmetic_expression_print_operator_method(SubLObject self, SubLObject stream) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt1274$_);
	return self;
    }

    public static final SubLObject cyblack_binary_arithmetic_expression_get_arity_method(SubLObject self) {
	return TWO_INTEGER;
    }

    public static final SubLObject cyblack_binary_arithmetic_expression_set_arity_method(SubLObject self, SubLObject n) {
	return cyblack_arithmetic_expression_set_arity_method(self, n);
    }

    public static final SubLObject cyblack_binary_arithmetic_expression_get_args_method(SubLObject self) {
	{
	    SubLObject value_expression_list = get_cyblack_arithmetic_expression_value_expression_list(self);
	    return value_expression_list;
	}
    }

    public static final SubLObject cyblack_binary_arithmetic_expression_set_args_method(SubLObject self, SubLObject new_args) {
	return cyblack_arithmetic_expression_set_args_method(self, new_args);
    }

    public static final SubLObject cyblack_binary_arithmetic_expression_get_arg1_method(SubLObject self) {
	return cyblack_arithmetic_expression_get_argn_method(self, ONE_INTEGER);
    }

    public static final SubLObject cyblack_binary_arithmetic_expression_set_arg1_method(SubLObject self, SubLObject new_arg1) {
	return cyblack_arithmetic_expression_set_argn_method(self, ONE_INTEGER, new_arg1);
    }

    public static final SubLObject cyblack_binary_arithmetic_expression_get_arg2_method(SubLObject self) {
	return cyblack_arithmetic_expression_get_argn_method(self, TWO_INTEGER);
    }

    public static final SubLObject cyblack_binary_arithmetic_expression_set_arg2_method(SubLObject self, SubLObject new_arg2) {
	return cyblack_arithmetic_expression_set_argn_method(self, TWO_INTEGER, new_arg2);
    }

    public static final SubLObject cyblack_binary_arithmetic_expression_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    SubLObject value_expression_list = get_cyblack_arithmetic_expression_value_expression_list(self);
	    cyblack_utilities.cyblack_silence(value_expression_list);
	    {
		SubLObject result = methods.funcall_instance_method_with_2_args(self, COMPUTE_VALUE, methods.funcall_instance_method_with_1_args(cyblack_binary_arithmetic_expression_get_arg1_method(self), GET_VALUE, environment),
			methods.funcall_instance_method_with_1_args(cyblack_binary_arithmetic_expression_get_arg2_method(self), GET_VALUE, environment));
		return result;
	    }
	}
    }

    public static final SubLObject cyblack_binary_arithmetic_expression_compute_value_method(SubLObject self, SubLObject arg1, SubLObject arg2) {
	return ZERO_INTEGER;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_subtraction_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_subtraction_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_ARITHMETIC_EXPRESSION, VALUE_EXPRESSION_LIST, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_ARITHMETIC_EXPRESSION, ARITY, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_subtraction_expression_p(SubLObject cyblack_subtraction_expression) {
	return classes.subloop_instanceof_class(cyblack_subtraction_expression, CYBLACK_SUBTRACTION_EXPRESSION);
    }

    public static final SubLObject cyblack_subtraction_expression_print_operator_method(SubLObject self, SubLObject stream) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt1274$_);
	return self;
    }

    public static final SubLObject cyblack_subtraction_expression_compute_value_method(SubLObject self, SubLObject arg1, SubLObject arg2) {
	return subtract(arg1, arg2);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_division_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_division_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_ARITHMETIC_EXPRESSION, VALUE_EXPRESSION_LIST, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_ARITHMETIC_EXPRESSION, ARITY, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_division_expression_p(SubLObject cyblack_division_expression) {
	return classes.subloop_instanceof_class(cyblack_division_expression, CYBLACK_DIVISION_EXPRESSION);
    }

    public static final SubLObject cyblack_division_expression_print_operator_method(SubLObject self, SubLObject stream) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt1303$_);
	return self;
    }

    public static final SubLObject cyblack_division_expression_compute_value_method(SubLObject self, SubLObject arg1, SubLObject arg2) {
	cyblack_utilities.cyblack_silence(self);
	return divide(arg1, arg2);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_nary_arithmetic_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_nary_arithmetic_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_ARITHMETIC_EXPRESSION, VALUE_EXPRESSION_LIST, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_ARITHMETIC_EXPRESSION, ARITY, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_nary_arithmetic_expression_p(SubLObject cyblack_nary_arithmetic_expression) {
	return classes.subloop_instanceof_class(cyblack_nary_arithmetic_expression, CYBLACK_NARY_ARITHMETIC_EXPRESSION);
    }

    public static final SubLObject cyblack_nary_arithmetic_expression_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_nary_arithmetic_expression_method = NIL;
	    SubLObject v_arity = get_cyblack_arithmetic_expression_arity(self);
	    try {
		try {
		    cyblack_arithmetic_expression_initialize_method(self);
		    v_arity = NIL;
		    sublisp_throw($sym1312$OUTER_CATCH_FOR_CYBLACK_NARY_ARITHMETIC_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_arithmetic_expression_arity(self, v_arity);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_nary_arithmetic_expression_method = Errors.handleThrowable(ccatch_env_var, $sym1312$OUTER_CATCH_FOR_CYBLACK_NARY_ARITHMETIC_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_nary_arithmetic_expression_method;
	}
    }

    public static final SubLObject cyblack_nary_arithmetic_expression_get_value_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    SubLObject value_expression_list = get_cyblack_arithmetic_expression_value_expression_list(self);
	    SubLObject values = NIL;
	    SubLObject result = NIL;
	    SubLObject list_expression = value_expression_list;
	    if (NIL == list_expression) {
		values = NIL;
	    } else if (list_expression.isAtom()) {
		values = list(list_expression);
	    } else if (NIL == list_expression.rest()) {
		{
		    SubLObject value_expression = list_expression.first();
		    values = list(methods.funcall_instance_method_with_1_args(value_expression, GET_VALUE, environment));
		}
	    } else {
		{
		    SubLObject tail_cons = NIL;
		    SubLObject result_7 = NIL;
		    {
			SubLObject value_expression = list_expression.first();
			values = list(methods.funcall_instance_method_with_1_args(value_expression, GET_VALUE, environment));
			tail_cons = values;
		    }
		    {
			SubLObject cdolist_list_var = list_expression.rest();
			SubLObject value_expression = NIL;
			for (value_expression = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), value_expression = cdolist_list_var.first()) {
			    result_7 = list(methods.funcall_instance_method_with_1_args(value_expression, GET_VALUE, environment));
			    rplacd(tail_cons, result_7);
			    tail_cons = result_7;
			}
		    }
		}
	    }

	    result = methods.funcall_instance_method_with_1_args(self, COMPUTE_VALUE, values);
	    return result;
	}
    }

    public static final SubLObject cyblack_nary_arithmetic_expression_compute_value_method(SubLObject self, SubLObject args) {
	return ZERO_INTEGER;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_addition_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_addition_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_ARITHMETIC_EXPRESSION, VALUE_EXPRESSION_LIST, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_ARITHMETIC_EXPRESSION, ARITY, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_addition_expression_p(SubLObject cyblack_addition_expression) {
	return classes.subloop_instanceof_class(cyblack_addition_expression, CYBLACK_ADDITION_EXPRESSION);
    }

    public static final SubLObject cyblack_addition_expression_print_operator_method(SubLObject self, SubLObject stream) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt1324$_);
	return self;
    }

    public static final SubLObject cyblack_addition_expression_compute_value_method(SubLObject self, SubLObject args) {
	return add_list(args);
    }

    public static final SubLObject add_list(SubLObject list) {
	{
	    SubLObject accumulator = ZERO_INTEGER;
	    SubLObject cdolist_list_var = list;
	    SubLObject value = NIL;
	    for (value = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), value = cdolist_list_var.first()) {
		accumulator = add(accumulator, value);
	    }
	    return accumulator;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_multiplication_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_multiplication_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN, UNPARSED_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_ARITHMETIC_EXPRESSION, VALUE_EXPRESSION_LIST, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_ARITHMETIC_EXPRESSION, ARITY, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_multiplication_expression_p(SubLObject cyblack_multiplication_expression) {
	return classes.subloop_instanceof_class(cyblack_multiplication_expression, CYBLACK_MULTIPLICATION_EXPRESSION);
    }

    public static final SubLObject cyblack_multiplication_expression_print_operator_method(SubLObject self, SubLObject stream) {
	format(stream, cyblack_precondition_pattern_p2.$str_alt1332$_);
	return self;
    }

    public static final SubLObject cyblack_multiplication_expression_compute_value_method(SubLObject self, SubLObject args) {
	return multiply_list(args);
    }

    public static final SubLObject multiply_list(SubLObject list) {
	{
	    SubLObject accumulator = ONE_INTEGER;
	    SubLObject cdolist_list_var = list;
	    SubLObject value = NIL;
	    for (value = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), value = cdolist_list_var.first()) {
		accumulator = multiply(accumulator, value);
	    }
	    return accumulator;
	}
    }

    public static final SubLObject get_cyblack_pattern_processor_keyword(SubLObject cyblack_pattern_processor) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_pattern_processor, FOUR_INTEGER, KEYWORD);
    }

    public static final SubLObject set_cyblack_pattern_processor_keyword(SubLObject cyblack_pattern_processor, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_pattern_processor, value, FOUR_INTEGER, KEYWORD);
    }

    public static final SubLObject get_cyblack_pattern_processor_main_parser(SubLObject cyblack_pattern_processor) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_pattern_processor, THREE_INTEGER, MAIN_PARSER);
    }

    public static final SubLObject set_cyblack_pattern_processor_main_parser(SubLObject cyblack_pattern_processor, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_pattern_processor, value, THREE_INTEGER, MAIN_PARSER);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_pattern_processor_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_pattern_processor_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_pattern_processor_p(SubLObject cyblack_pattern_processor) {
	return classes.subloop_instanceof_class(cyblack_pattern_processor, CYBLACK_PATTERN_PROCESSOR);
    }

    public static final SubLObject cyblack_pattern_processor_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_pattern_processor_method = NIL;
	    SubLObject keyword = get_cyblack_pattern_processor_keyword(self);
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    try {
		try {
		    cyblack_object.cyblack_object_initialize_method(self);
		    main_parser = NIL;
		    keyword = NIL;
		    sublisp_throw($sym1343$OUTER_CATCH_FOR_CYBLACK_PATTERN_PROCESSOR_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_keyword(self, keyword);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_pattern_processor_method = Errors.handleThrowable(ccatch_env_var, $sym1343$OUTER_CATCH_FOR_CYBLACK_PATTERN_PROCESSOR_METHOD);
	    }
	    return catch_var_for_cyblack_pattern_processor_method;
	}
    }

    public static final SubLObject cyblack_pattern_processor_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject keyword = get_cyblack_pattern_processor_keyword(self);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt1346$__CYBLACK_PATTERN_PROCESSOR__S__, keyword);
	    return self;
	}
    }

    public static final SubLObject cyblack_pattern_processor_get_main_parser_method(SubLObject self) {
	{
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    return main_parser;
	}
    }

    public static final SubLObject cyblack_pattern_processor_set_main_parser_method(SubLObject self, SubLObject new_main_parser) {
	{
	    SubLObject catch_var_for_cyblack_pattern_processor_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    try {
		try {
		    main_parser = new_main_parser;
		    sublisp_throw($sym1354$OUTER_CATCH_FOR_CYBLACK_PATTERN_PROCESSOR_METHOD, new_main_parser);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_pattern_processor_method = Errors.handleThrowable(ccatch_env_var, $sym1354$OUTER_CATCH_FOR_CYBLACK_PATTERN_PROCESSOR_METHOD);
	    }
	    return catch_var_for_cyblack_pattern_processor_method;
	}
    }

    public static final SubLObject cyblack_pattern_processor_get_blackboard_method(SubLObject self) {
	{
	    SubLObject application = cyblack_object.get_cyblack_object_application(self);
	    if (NIL != application) {
		return methods.funcall_instance_method_with_0_args(application, GET_BLACKBOARD);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_pattern_processor_get_keyword_method(SubLObject self) {
	{
	    SubLObject keyword = get_cyblack_pattern_processor_keyword(self);
	    return keyword;
	}
    }

    public static final SubLObject cyblack_pattern_processor_set_keyword_method(SubLObject self, SubLObject new_keyword) {
	{
	    SubLObject catch_var_for_cyblack_pattern_processor_method = NIL;
	    SubLObject keyword = get_cyblack_pattern_processor_keyword(self);
	    try {
		try {
		    keyword = new_keyword;
		    sublisp_throw($sym1364$OUTER_CATCH_FOR_CYBLACK_PATTERN_PROCESSOR_METHOD, new_keyword);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_keyword(self, keyword);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_pattern_processor_method = Errors.handleThrowable(ccatch_env_var, $sym1364$OUTER_CATCH_FOR_CYBLACK_PATTERN_PROCESSOR_METHOD);
	    }
	    return catch_var_for_cyblack_pattern_processor_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_item_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_item_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_item_parser_p(SubLObject cyblack_item_parser) {
	return classes.subloop_instanceof_class(cyblack_item_parser, CYBLACK_ITEM_PARSER);
    }

    public static final SubLObject cyblack_item_parser_initialize_method(SubLObject self) {
	return cyblack_pattern_processor_initialize_method(self);
    }

    public static final SubLObject cyblack_item_parser_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject keyword = get_cyblack_pattern_processor_keyword(self);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt1372$__CYBLACK_ITEM_PARSER__S__, keyword);
	    return self;
	}
    }

    public static final SubLObject cyblack_item_parser_parse_method(SubLObject self, SubLObject v_object) {
	return v_object;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_existential_expression_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_existential_expression_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_existential_expression_parser_p(SubLObject cyblack_existential_expression_parser) {
	return classes.subloop_instanceof_class(cyblack_existential_expression_parser, CYBLACK_EXISTENTIAL_EXPRESSION_PARSER);
    }

    public static final SubLObject cyblack_existential_expression_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $EXISTENTIAL_FUNCTOR);
	return self;
    }

    public static final SubLObject cyblack_existential_expression_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_existential_expression_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    SubLObject application = cyblack_object.get_cyblack_object_application(self);
	    try {
		try {
		    {
			SubLObject binding_clause = nth(ONE_INTEGER, v_object);
			SubLObject logical_expression_clause = nth(TWO_INTEGER, v_object);
			SubLObject variable_name = nth(ZERO_INTEGER, binding_clause);
			SubLObject type_string = nth(ONE_INTEGER, binding_clause);
			variable_name = cyblack_symbol_to_cyblack_package(variable_name);
			{
			    SubLObject datatype_dictionary = methods.funcall_instance_method_with_0_args(application, GET_DATATYPE_DICTIONARY);
			    SubLObject datatype = methods.funcall_instance_method_with_1_args(datatype_dictionary, INTERN, type_string);
			    SubLObject environment = object.object_new_method(CYBLACK_ENVIRONMENT);
			    SubLObject expression = methods.funcall_instance_method_with_0_args(self, CREATE_EXPRESSION);
			    cyblack_environment_push_typed_local_binding_method(environment, variable_name, datatype, UNPROVIDED, UNPROVIDED);
			    cyblack_existential_expression_set_closure_method(expression, environment);
			    {
				SubLObject local_bindings = cyblack_environment_get_local_bindings_method(environment);
				SubLObject binding = cyblack_binding_assoc(variable_name, local_bindings);
				cyblack_existential_expression_set_binding_method(expression, binding);
				{
				    SubLObject logical_expression = methods.funcall_instance_method_with_1_args(main_parser, PARSE, logical_expression_clause);
				    cyblack_existential_expression_set_logical_expression_method(expression, logical_expression);
				    if (NIL != instances.instance_of_p(expression, CYBLACK_PATTERN)) {
					cyblack_pattern_set_unparsed_pattern_method(expression, v_object);
				    }
				    sublisp_throw($sym1386$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_EXPRESSION_PARSER_METHOD, expression);
				}
			    }
			}
			sublisp_throw($sym1386$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_EXPRESSION_PARSER_METHOD, NIL);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			    cyblack_object.set_cyblack_object_application(self, application);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_existential_expression_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1386$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_EXPRESSION_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_existential_expression_parser_method;
	}
    }

    public static final SubLObject cyblack_existential_expression_parser_create_expression_method(SubLObject self) {
	return object.object_new_method(CYBLACK_EXISTENTIAL_EXPRESSION);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_forall_expression_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_forall_expression_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_forall_expression_parser_p(SubLObject cyblack_forall_expression_parser) {
	return classes.subloop_instanceof_class(cyblack_forall_expression_parser, CYBLACK_FORALL_EXPRESSION_PARSER);
    }

    public static final SubLObject cyblack_forall_expression_parser_initialize_method(SubLObject self) {
	cyblack_existential_expression_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $FORALL);
	return self;
    }

    public static final SubLObject cyblack_forall_expression_parser_create_expression_method(SubLObject self) {
	{
	    SubLObject application = cyblack_object.get_cyblack_object_application(self);
	    SubLObject expression = object.object_new_method(CYBLACK_FORALL_EXPRESSION);
	    cyblack_object.cyblack_object_set_application_method(expression, application);
	    return expression;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_present_expression_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_present_expression_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_present_expression_parser_p(SubLObject cyblack_present_expression_parser) {
	return classes.subloop_instanceof_class(cyblack_present_expression_parser, CYBLACK_PRESENT_EXPRESSION_PARSER);
    }

    public static final SubLObject cyblack_present_expression_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $PRESENT);
	return self;
    }

    public static final SubLObject cyblack_present_expression_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_present_expression_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    try {
		try {
		    {
			SubLObject args = v_object.rest();
			SubLObject var_expression = cyblack_symbol_to_cyblack_package(args.first());
			SubLObject parsed_var_expression = methods.funcall_instance_method_with_1_args(main_parser, PARSE, var_expression);
			SubLObject present_expression = object.object_new_method(CYBLACK_PRESENT_EXPRESSION);
			cyblack_present_expression_set_variable_reference_method(present_expression, parsed_var_expression);
			if (NIL != instances.instance_of_p(present_expression, CYBLACK_PATTERN)) {
			    cyblack_pattern_set_unparsed_pattern_method(present_expression, v_object);
			}
			sublisp_throw($sym1409$OUTER_CATCH_FOR_CYBLACK_PRESENT_EXPRESSION_PARSER_METHOD, present_expression);
			sublisp_throw($sym1409$OUTER_CATCH_FOR_CYBLACK_PRESENT_EXPRESSION_PARSER_METHOD, NIL);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_present_expression_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1409$OUTER_CATCH_FOR_CYBLACK_PRESENT_EXPRESSION_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_present_expression_parser_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_empty_p_expression_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_empty_p_expression_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_empty_p_expression_parser_p(SubLObject cyblack_empty_p_expression_parser) {
	return classes.subloop_instanceof_class(cyblack_empty_p_expression_parser, CYBLACK_EMPTY_P_EXPRESSION_PARSER);
    }

    public static final SubLObject cyblack_empty_p_expression_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $EMPTY_P);
	return self;
    }

    public static final SubLObject cyblack_empty_p_expression_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_empty_p_expression_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    SubLObject application = cyblack_object.get_cyblack_object_application(self);
	    try {
		try {
		    {
			SubLObject type_string = cadr(v_object);
			SubLObject type = methods.funcall_instance_method_with_1_args(main_parser, PARSE, type_string);
			SubLObject new_instance = object.new_object_instance(CYBLACK_EMPTY_P_EXPRESSION);
			cyblack_object.cyblack_object_set_application_method(new_instance, application);
			cyblack_empty_p_expression_set_datatype_method(new_instance, type);
			if (NIL != instances.instance_of_p(new_instance, CYBLACK_PATTERN)) {
			    cyblack_pattern_set_unparsed_pattern_method(new_instance, v_object);
			}
			sublisp_throw($sym1418$OUTER_CATCH_FOR_CYBLACK_EMPTY_P_EXPRESSION_PARSER_METHOD, new_instance);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			    cyblack_object.set_cyblack_object_application(self, application);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_empty_p_expression_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1418$OUTER_CATCH_FOR_CYBLACK_EMPTY_P_EXPRESSION_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_empty_p_expression_parser_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_type_expression_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_type_expression_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_type_expression_parser_p(SubLObject cyblack_type_expression_parser) {
	return classes.subloop_instanceof_class(cyblack_type_expression_parser, CYBLACK_TYPE_EXPRESSION_PARSER);
    }

    public static final SubLObject cyblack_type_expression_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $TYPE);
	return self;
    }

    public static final SubLObject cyblack_type_expression_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_type_expression_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    SubLObject application = cyblack_object.get_cyblack_object_application(self);
	    try {
		try {
		    {
			SubLObject type_string = cadr(v_object);
			SubLObject type = methods.funcall_instance_method_with_1_args(main_parser, PARSE, type_string);
			SubLObject type_expression = object.new_class_instance(CYBLACK_TYPE_EXPRESSION);
			cyblack_object.cyblack_object_set_application_method(type_expression, application);
			cyblack_type_expression_set_base_type_method(type_expression, type);
			if (NIL != instances.instance_of_p(type_expression, CYBLACK_PATTERN)) {
			    cyblack_pattern_set_unparsed_pattern_method(type_expression, v_object);
			}
			sublisp_throw($sym1427$OUTER_CATCH_FOR_CYBLACK_TYPE_EXPRESSION_PARSER_METHOD, type_expression);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			    cyblack_object.set_cyblack_object_application(self, application);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_type_expression_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1427$OUTER_CATCH_FOR_CYBLACK_TYPE_EXPRESSION_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_type_expression_parser_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_subtype_expression_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_subtype_expression_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_subtype_expression_parser_p(SubLObject cyblack_subtype_expression_parser) {
	return classes.subloop_instanceof_class(cyblack_subtype_expression_parser, CYBLACK_SUBTYPE_EXPRESSION_PARSER);
    }

    public static final SubLObject cyblack_subtype_expression_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $SUBTYPE);
	return self;
    }

    public static final SubLObject cyblack_subtype_expression_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_subtype_expression_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    try {
		try {
		    {
			SubLObject type_string = cadr(v_object);
			SubLObject type = methods.funcall_instance_method_with_1_args(main_parser, PARSE, type_string);
			SubLObject qualifier = cddr(v_object);
			SubLObject method = NIL;
			SubLObject args = NIL;
			if (NIL == qualifier) {
			    method = qualifier.first();
			    args = qualifier.rest();
			    {
				SubLObject parsed_args = NIL;
				SubLObject parsed_method = methods.funcall_instance_method_with_1_args(main_parser, PARSE, method);
				SubLObject list_expression = args;
				if (NIL == list_expression) {
				    parsed_args = NIL;
				} else if (list_expression.isAtom()) {
				    parsed_args = list(list_expression);
				} else if (NIL == list_expression.rest()) {
				    {
					SubLObject component = list_expression.first();
					parsed_args = list(methods.funcall_instance_method_with_1_args(main_parser, PARSE, component));
				    }
				} else {
				    {
					SubLObject tail_cons = NIL;
					SubLObject result = NIL;
					{
					    SubLObject component = list_expression.first();
					    parsed_args = list(methods.funcall_instance_method_with_1_args(main_parser, PARSE, component));
					    tail_cons = parsed_args;
					}
					{
					    SubLObject cdolist_list_var = list_expression.rest();
					    SubLObject component = NIL;
					    for (component = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), component = cdolist_list_var.first()) {
						result = list(methods.funcall_instance_method_with_1_args(main_parser, PARSE, component));
						rplacd(tail_cons, result);
						tail_cons = result;
					    }
					}
				    }
				}

				{
				    SubLObject expression = object.new_object_instance(CYBLACK_SUBTYPE_EXPRESSION);
				    cyblack_type_expression_set_base_type_method(expression, type);
				    cyblack_subtype_expression_set_predicator_method_method(expression, cyblack_literal_get_value_method(parsed_method, UNPROVIDED));
				    cyblack_subtype_expression_set_args_method(expression, parsed_args);
				    if (NIL != instances.instance_of_p(expression, CYBLACK_PATTERN)) {
					cyblack_pattern_set_unparsed_pattern_method(expression, v_object);
				    }
				    sublisp_throw($sym1436$OUTER_CATCH_FOR_CYBLACK_SUBTYPE_EXPRESSION_PARSER_METHOD, expression);
				}
			    }
			}
			sublisp_throw($sym1436$OUTER_CATCH_FOR_CYBLACK_SUBTYPE_EXPRESSION_PARSER_METHOD, NIL);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_subtype_expression_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1436$OUTER_CATCH_FOR_CYBLACK_SUBTYPE_EXPRESSION_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_subtype_expression_parser_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_panel_expression_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_panel_expression_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_panel_expression_parser_p(SubLObject cyblack_panel_expression_parser) {
	return classes.subloop_instanceof_class(cyblack_panel_expression_parser, CYBLACK_PANEL_EXPRESSION_PARSER);
    }

    public static final SubLObject cyblack_panel_expression_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $PANEL);
	return self;
    }

    public static final SubLObject cyblack_panel_expression_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_panel_expression_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    SubLObject application = cyblack_object.get_cyblack_object_application(self);
	    try {
		try {
		    {
			SubLObject datum = v_object;
			SubLObject current = datum;
			SubLObject key = NIL;
			SubLObject unparsed_type_expression = NIL;
			destructuring_bind_must_consp(current, datum, cyblack_precondition_pattern_p3.$list_alt1446);
			key = current.first();
			current = current.rest();
			destructuring_bind_must_consp(current, datum, cyblack_precondition_pattern_p3.$list_alt1446);
			unparsed_type_expression = current.first();
			current = current.rest();
			if (NIL == current) {
			    {
				SubLObject parsed_type_expression = methods.funcall_instance_method_with_1_args(main_parser, PARSE, unparsed_type_expression);
				SubLObject panel_expression = object.new_class_instance(CYBLACK_PANEL_EXPRESSION);
				cyblack_object.cyblack_object_set_application_method(panel_expression, application);
				cyblack_panel_expression_set_type_expression_method(panel_expression, parsed_type_expression);
				if (NIL != instances.instance_of_p(panel_expression, CYBLACK_PATTERN)) {
				    cyblack_pattern_set_unparsed_pattern_method(panel_expression, v_object);
				}
				sublisp_throw($sym1445$OUTER_CATCH_FOR_CYBLACK_PANEL_EXPRESSION_PARSER_METHOD, panel_expression);
			    }
			} else {
			    cdestructuring_bind_error(datum, cyblack_precondition_pattern_p3.$list_alt1446);
			}
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			    cyblack_object.set_cyblack_object_application(self, application);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_panel_expression_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1445$OUTER_CATCH_FOR_CYBLACK_PANEL_EXPRESSION_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_panel_expression_parser_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_get_expression_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_get_expression_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_get_expression_parser_p(SubLObject cyblack_get_expression_parser) {
	return classes.subloop_instanceof_class(cyblack_get_expression_parser, CYBLACK_GET_EXPRESSION_PARSER);
    }

    public static final SubLObject cyblack_get_expression_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $GET);
	return self;
    }

    public static final SubLObject cyblack_get_expression_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_get_expression_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    SubLObject application = cyblack_object.get_cyblack_object_application(self);
	    try {
		try {
		    {
			SubLObject datum = v_object;
			SubLObject current = datum;
			SubLObject key = NIL;
			SubLObject unparsed_panel_expression = NIL;
			SubLObject unparsed_key_expression = NIL;
			destructuring_bind_must_consp(current, datum, cyblack_precondition_pattern_p3.$list_alt1456);
			key = current.first();
			current = current.rest();
			destructuring_bind_must_consp(current, datum, cyblack_precondition_pattern_p3.$list_alt1456);
			unparsed_panel_expression = current.first();
			current = current.rest();
			destructuring_bind_must_consp(current, datum, cyblack_precondition_pattern_p3.$list_alt1456);
			unparsed_key_expression = current.first();
			current = current.rest();
			if (NIL == current) {
			    {
				SubLObject parsed_panel_expression = methods.funcall_instance_method_with_1_args(main_parser, PARSE, unparsed_panel_expression);
				SubLObject parsed_key_expression = methods.funcall_instance_method_with_1_args(main_parser, PARSE, unparsed_key_expression);
				SubLObject get_expression = object.new_class_instance(CYBLACK_GET_EXPRESSION);
				cyblack_object.cyblack_object_set_application_method(get_expression, application);
				cyblack_get_expression_set_panel_expression_method(get_expression, parsed_panel_expression);
				cyblack_get_expression_set_key_expression_method(get_expression, parsed_key_expression);
				if (NIL != instances.instance_of_p(get_expression, CYBLACK_PATTERN)) {
				    cyblack_pattern_set_unparsed_pattern_method(get_expression, v_object);
				}
				sublisp_throw($sym1455$OUTER_CATCH_FOR_CYBLACK_GET_EXPRESSION_PARSER_METHOD, get_expression);
			    }
			} else {
			    cdestructuring_bind_error(datum, cyblack_precondition_pattern_p3.$list_alt1456);
			}
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			    cyblack_object.set_cyblack_object_application(self, application);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_get_expression_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1455$OUTER_CATCH_FOR_CYBLACK_GET_EXPRESSION_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_get_expression_parser_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_string_expression_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_string_expression_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_string_expression_parser_p(SubLObject cyblack_string_expression_parser) {
	return classes.subloop_instanceof_class(cyblack_string_expression_parser, CYBLACK_STRING_EXPRESSION_PARSER);
    }

    public static final SubLObject cyblack_string_expression_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $STRING);
	return self;
    }

    public static final SubLObject cyblack_string_expression_parser_parse_method(SubLObject self, SubLObject v_object) {
	cyblack_utilities.cyblack_silence(self);
	{
	    SubLObject string_literal = object.object_new_method(CYBLACK_STRING);
	    cyblack_string_set_value_method(string_literal, cadr(v_object));
	    if (NIL != instances.instance_of_p(string_literal, CYBLACK_PATTERN)) {
		cyblack_pattern_set_unparsed_pattern_method(string_literal, v_object);
	    }
	    return string_literal;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_monitoring_pattern_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_monitoring_pattern_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_monitoring_pattern_parser_p(SubLObject cyblack_monitoring_pattern_parser) {
	return classes.subloop_instanceof_class(cyblack_monitoring_pattern_parser, CYBLACK_MONITORING_PATTERN_PARSER);
    }

    public static final SubLObject cyblack_monitoring_pattern_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $MONITOR);
	return self;
    }

    public static final SubLObject cyblack_monitoring_pattern_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_monitoring_pattern_parser_method = NIL;
		SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
		SubLObject application = cyblack_object.get_cyblack_object_application(self);
		try {
		    try {
			{
			    SubLObject l_monitor_args = classes.classes_getf(v_object, $MONITOR);
			    SubLObject l_bindings_list = classes.classes_getf(v_object, $BINDINGS);
			    SubLObject l_logical_form = classes.classes_getf(v_object, $WHERE);
			    thread.resetMultipleValues();
			    {
				SubLObject l_action = cyblack_monitoring_pattern_get_type_and_qualifiers(v_object);
				SubLObject l_qualifier_or_qualifiers = thread.secondMultipleValue();
				thread.resetMultipleValues();
				{
				    SubLObject application_8 = methods.funcall_instance_method_with_0_args(main_parser, GET_APPLICATION);
				    SubLObject v_dictionary = (NIL != application_8) ? ((SubLObject) (methods.funcall_instance_method_with_0_args(application_8, GET_DATATYPE_DICTIONARY))) : NIL;
				    SubLObject current_type = NIL;
				    {
					SubLObject cdolist_list_var = l_monitor_args;
					SubLObject binding = NIL;
					for (binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), binding = cdolist_list_var.first()) {
					    current_type = cadr(binding);
					    if (!(current_type.isString() || (NIL != cyblack_datatype.cyblack_datatype_p(current_type)))) {
						rplaca(binding.rest(), methods.funcall_instance_method_with_1_args(main_parser, PARSE, current_type));
					    }
					}
				    }
				    {
					SubLObject cdolist_list_var = l_bindings_list;
					SubLObject binding = NIL;
					for (binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), binding = cdolist_list_var.first()) {
					    current_type = cadr(binding);
					    if (!(current_type.isString() || (NIL != cyblack_datatype.cyblack_datatype_p(current_type)))) {
						rplaca(binding.rest(), methods.funcall_instance_method_with_1_args(main_parser, PARSE, current_type));
					    }
					}
				    }
				    {
					SubLObject parsed_monitor_args = cyblack_environment_parse_binding_list(v_dictionary, l_monitor_args);
					SubLObject parsed_binding_list = cyblack_environment_parse_binding_list(v_dictionary, l_bindings_list);
					SubLObject parsed_where = methods.funcall_instance_method_with_1_args(main_parser, PARSE, l_logical_form);
					SubLObject monitoring_pattern = object.new_object_instance(CYBLACK_MONITORING_PATTERN);
					format(StreamsLow.$standard_output$.getDynamicValue(thread), cyblack_precondition_pattern_p2.$str_alt1477$__Created_new_monitoring_pattern_);
					force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
					cyblack_environment_set_outer_scope_method(parsed_binding_list, parsed_monitor_args);
					cyblack_monitoring_pattern_set_monitor_args_method(monitoring_pattern, parsed_monitor_args);
					cyblack_monitoring_pattern_set_local_bindings_method(monitoring_pattern, parsed_binding_list);
					cyblack_monitoring_pattern_set_action_method(monitoring_pattern, l_action);
					cyblack_monitoring_pattern_set_action_qualifiers_method(monitoring_pattern, l_qualifier_or_qualifiers.isList() ? ((SubLObject) (l_qualifier_or_qualifiers)) : list(l_qualifier_or_qualifiers));
					cyblack_monitoring_pattern_set_logical_form_method(monitoring_pattern, parsed_where);
					if (NIL != instances.instance_of_p(monitoring_pattern, CYBLACK_PATTERN)) {
					    cyblack_pattern_set_unparsed_pattern_method(monitoring_pattern, v_object);
					}
					sublisp_throw($sym1473$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_PARSER_METHOD, monitoring_pattern);
				    }
				}
			    }
			}
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_pattern_processor_main_parser(self, main_parser);
				cyblack_object.set_cyblack_object_application(self, application);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_monitoring_pattern_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1473$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_PARSER_METHOD);
		}
		return catch_var_for_cyblack_monitoring_pattern_parser_method;
	    }
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_precon_pattern_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_precon_pattern_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_precon_pattern_parser_p(SubLObject cyblack_precon_pattern_parser) {
	return classes.subloop_instanceof_class(cyblack_precon_pattern_parser, CYBLACK_PRECON_PATTERN_PARSER);
    }

    public static final SubLObject cyblack_precon_pattern_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $KS_ARGS);
	return self;
    }

    public static final SubLObject cyblack_precon_pattern_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_precon_pattern_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    SubLObject application = cyblack_object.get_cyblack_object_application(self);
	    try {
		try {
		    {
			SubLObject ks_args = classes.classes_getf(v_object, $KS_ARGS);
			SubLObject binding_list = classes.classes_getf(v_object, $BINDING_LIST);
			SubLObject where = classes.classes_getf(v_object, $WHERE);
			SubLObject application_9 = methods.funcall_instance_method_with_0_args(main_parser, GET_APPLICATION);
			SubLObject v_dictionary = (NIL != application_9) ? ((SubLObject) (methods.funcall_instance_method_with_0_args(application_9, GET_DATATYPE_DICTIONARY))) : NIL;
			SubLObject current_type = NIL;
			{
			    SubLObject cdolist_list_var = ks_args;
			    SubLObject binding = NIL;
			    for (binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), binding = cdolist_list_var.first()) {
				current_type = cadr(binding);
				if (!(current_type.isString() || (NIL != cyblack_datatype.cyblack_datatype_p(current_type)))) {
				    rplaca(binding.rest(), methods.funcall_instance_method_with_1_args(main_parser, PARSE, current_type));
				}
			    }
			}
			{
			    SubLObject cdolist_list_var = binding_list;
			    SubLObject binding = NIL;
			    for (binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), binding = cdolist_list_var.first()) {
				current_type = cadr(binding);
				if (!(current_type.isString() || (NIL != cyblack_datatype.cyblack_datatype_p(current_type)))) {
				    rplaca(binding.rest(), methods.funcall_instance_method_with_1_args(main_parser, PARSE, current_type));
				}
			    }
			}
			{
			    SubLObject parsed_ks_args = cyblack_environment_parse_binding_list(v_dictionary, ks_args);
			    SubLObject parsed_binding_list = cyblack_environment_parse_binding_list(v_dictionary, binding_list);
			    SubLObject parsed_where = methods.funcall_instance_method_with_1_args(main_parser, PARSE, where);
			    SubLObject precondition_pattern = object.object_new_method(CYBLACK_PRECON_PATTERN);
			    cyblack_environment_set_outer_scope_method(parsed_binding_list, parsed_ks_args);
			    cyblack_precon_pattern_set_ks_args_method(precondition_pattern, parsed_ks_args);
			    methods.funcall_instance_method_with_1_args(precondition_pattern, SET_LOCAL_BINDINGS, parsed_binding_list);
			    methods.funcall_instance_method_with_1_args(precondition_pattern, SET_LOGICAL_FORM, parsed_where);
			    if (NIL != instances.instance_of_p(precondition_pattern, CYBLACK_PATTERN)) {
				cyblack_pattern_set_unparsed_pattern_method(precondition_pattern, v_object);
			    }
			    sublisp_throw($sym1486$OUTER_CATCH_FOR_CYBLACK_PRECON_PATTERN_PARSER_METHOD, precondition_pattern);
			}
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			    cyblack_object.set_cyblack_object_application(self, application);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_precon_pattern_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1486$OUTER_CATCH_FOR_CYBLACK_PRECON_PATTERN_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_precon_pattern_parser_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_satisfaction_expression_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_satisfaction_expression_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_satisfaction_expression_parser_p(SubLObject cyblack_satisfaction_expression_parser) {
	return classes.subloop_instanceof_class(cyblack_satisfaction_expression_parser, CYBLACK_SATISFACTION_EXPRESSION_PARSER);
    }

    public static final SubLObject cyblack_satisfaction_expression_parser_new_expression_method(SubLObject self) {
	return object.object_new_method(CYBLACK_SATISFACTION_EXPRESSION);
    }

    public static final SubLObject cyblack_satisfaction_expression_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $SATISFY);
	return self;
    }

    public static final SubLObject cyblack_satisfaction_expression_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_satisfaction_expression_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    SubLObject application = cyblack_object.get_cyblack_object_application(self);
	    try {
		try {
		    {
			SubLObject args = v_object.rest();
			SubLObject application_10 = methods.funcall_instance_method_with_0_args(main_parser, GET_APPLICATION);
			SubLObject v_dictionary = (NIL != application_10) ? ((SubLObject) (methods.funcall_instance_method_with_0_args(application_10, GET_DATATYPE_DICTIONARY))) : NIL;
			SubLObject binding_list = args.first();
			SubLObject current_type = NIL;
			SubLObject cdolist_list_var = binding_list;
			SubLObject binding = NIL;
			for (binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), binding = cdolist_list_var.first()) {
			    current_type = cadr(binding);
			    if (!(current_type.isString() || (NIL != cyblack_datatype.cyblack_datatype_p(current_type)))) {
				rplaca(binding.rest(), methods.funcall_instance_method_with_1_args(main_parser, PARSE, current_type));
			    }
			}
			{
			    SubLObject parsed_binding_list = cyblack_environment_parse_binding_list(v_dictionary, binding_list);
			    SubLObject logical_expression = cadr(args);
			    SubLObject parsed_logical_expression = methods.funcall_instance_method_with_1_args(main_parser, PARSE, logical_expression);
			    SubLObject satisfaction_expression = cyblack_satisfaction_expression_parser_new_expression(self);
			    cyblack_satisfaction_expression_set_local_bindings_method(satisfaction_expression, parsed_binding_list);
			    cyblack_satisfaction_expression_set_logical_expression_method(satisfaction_expression, parsed_logical_expression);
			    if (NIL != instances.instance_of_p(satisfaction_expression, CYBLACK_PATTERN)) {
				cyblack_pattern_set_unparsed_pattern_method(satisfaction_expression, v_object);
			    }
			    sublisp_throw($sym1500$OUTER_CATCH_FOR_CYBLACK_SATISFACTION_EXPRESSION_PARSER_METHOD, satisfaction_expression);
			}
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			    cyblack_object.set_cyblack_object_application(self, application);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_satisfaction_expression_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1500$OUTER_CATCH_FOR_CYBLACK_SATISFACTION_EXPRESSION_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_satisfaction_expression_parser_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_simple_satisfaction_expression_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_simple_satisfaction_expression_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_simple_satisfaction_expression_parser_p(SubLObject cyblack_simple_satisfaction_expression_parser) {
	return classes.subloop_instanceof_class(cyblack_simple_satisfaction_expression_parser, CYBLACK_SIMPLE_SATISFACTION_EXPRESSION_PARSER);
    }

    public static final SubLObject cyblack_simple_satisfaction_expression_parser_new_expression_method(SubLObject self) {
	return object.object_new_method(CYBLACK_SIMPLE_SATISFACTION_EXPRESSION);
    }

    public static final SubLObject cyblack_simple_satisfaction_expression_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $SATISFY_SIMPLE);
	return self;
    }

    public static final SubLObject cyblack_simple_satisfaction_expression_parser_parse_method(SubLObject self, SubLObject v_object) {
	return cyblack_item_parser_parse_method(self, list($SATISFY, NIL, cadr(v_object)));
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_and_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_and_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_and_parser_p(SubLObject cyblack_and_parser) {
	return classes.subloop_instanceof_class(cyblack_and_parser, CYBLACK_AND_PARSER);
    }

    public static final SubLObject cyblack_and_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $AND);
	return self;
    }

    public static final SubLObject cyblack_and_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_and_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    try {
		try {
		    {
			SubLObject parsed_args = NIL;
			SubLObject list_expression = v_object.rest();
			if (NIL == list_expression) {
			    parsed_args = NIL;
			} else if (list_expression.isAtom()) {
			    parsed_args = list(list_expression);
			} else if (NIL == list_expression.rest()) {
			    {
				SubLObject unparsed_arg = list_expression.first();
				parsed_args = list(methods.funcall_instance_method_with_1_args(main_parser, PARSE, unparsed_arg));
			    }
			} else {
			    {
				SubLObject tail_cons = NIL;
				SubLObject result = NIL;
				{
				    SubLObject unparsed_arg = list_expression.first();
				    parsed_args = list(methods.funcall_instance_method_with_1_args(main_parser, PARSE, unparsed_arg));
				    tail_cons = parsed_args;
				}
				{
				    SubLObject cdolist_list_var = list_expression.rest();
				    SubLObject unparsed_arg = NIL;
				    for (unparsed_arg = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), unparsed_arg = cdolist_list_var.first()) {
					result = list(methods.funcall_instance_method_with_1_args(main_parser, PARSE, unparsed_arg));
					rplacd(tail_cons, result);
					tail_cons = result;
				    }
				}
			    }
			}

			{
			    SubLObject parsed_and_expression = object.object_new_method(CYBLACK_AND_EXPRESSION);
			    SubLObject arg_index = ONE_INTEGER;
			    SubLObject cdolist_list_var = parsed_args;
			    SubLObject parsed_arg = NIL;
			    for (parsed_arg = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), parsed_arg = cdolist_list_var.first()) {
				cyblack_nary_logical_expression_set_argn_method(parsed_and_expression, arg_index, parsed_arg);
				arg_index = add(arg_index, ONE_INTEGER);
			    }
			    if (NIL != instances.instance_of_p(parsed_and_expression, CYBLACK_PATTERN)) {
				cyblack_pattern_set_unparsed_pattern_method(parsed_and_expression, v_object);
			    }
			    sublisp_throw($sym1519$OUTER_CATCH_FOR_CYBLACK_AND_PARSER_METHOD, parsed_and_expression);
			}
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_and_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1519$OUTER_CATCH_FOR_CYBLACK_AND_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_and_parser_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_or_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_or_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_or_parser_p(SubLObject cyblack_or_parser) {
	return classes.subloop_instanceof_class(cyblack_or_parser, CYBLACK_OR_PARSER);
    }

    public static final SubLObject cyblack_or_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $OR);
	return self;
    }

    public static final SubLObject cyblack_or_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_or_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    try {
		try {
		    {
			SubLObject parsed_args = NIL;
			SubLObject list_expression = v_object.rest();
			if (NIL == list_expression) {
			    parsed_args = NIL;
			} else if (list_expression.isAtom()) {
			    parsed_args = list(list_expression);
			} else if (NIL == list_expression.rest()) {
			    {
				SubLObject unparsed_arg = list_expression.first();
				parsed_args = list(methods.funcall_instance_method_with_1_args(main_parser, PARSE, unparsed_arg));
			    }
			} else {
			    {
				SubLObject tail_cons = NIL;
				SubLObject result = NIL;
				{
				    SubLObject unparsed_arg = list_expression.first();
				    parsed_args = list(methods.funcall_instance_method_with_1_args(main_parser, PARSE, unparsed_arg));
				    tail_cons = parsed_args;
				}
				{
				    SubLObject cdolist_list_var = list_expression.rest();
				    SubLObject unparsed_arg = NIL;
				    for (unparsed_arg = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), unparsed_arg = cdolist_list_var.first()) {
					result = list(methods.funcall_instance_method_with_1_args(main_parser, PARSE, unparsed_arg));
					rplacd(tail_cons, result);
					tail_cons = result;
				    }
				}
			    }
			}

			{
			    SubLObject parsed_or_expression = object.object_new_method(CYBLACK_OR_EXPRESSION);
			    SubLObject arg_index = ONE_INTEGER;
			    SubLObject cdolist_list_var = parsed_args;
			    SubLObject parsed_arg = NIL;
			    for (parsed_arg = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), parsed_arg = cdolist_list_var.first()) {
				cyblack_nary_logical_expression_set_argn_method(parsed_or_expression, arg_index, parsed_arg);
				arg_index = add(arg_index, ONE_INTEGER);
			    }
			    if (NIL != instances.instance_of_p(parsed_or_expression, CYBLACK_PATTERN)) {
				cyblack_pattern_set_unparsed_pattern_method(parsed_or_expression, v_object);
			    }
			    sublisp_throw($sym1528$OUTER_CATCH_FOR_CYBLACK_OR_PARSER_METHOD, parsed_or_expression);
			}
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_or_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1528$OUTER_CATCH_FOR_CYBLACK_OR_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_or_parser_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_not_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_not_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_not_parser_p(SubLObject cyblack_not_parser) {
	return classes.subloop_instanceof_class(cyblack_not_parser, CYBLACK_NOT_PARSER);
    }

    public static final SubLObject cyblack_not_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $NOT);
	return self;
    }

    public static final SubLObject cyblack_not_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_not_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    try {
		try {
		    {
			SubLObject arg = cadr(v_object);
			SubLObject parsed_arg = methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg);
			SubLObject parsed_not_expression = object.object_new_method(CYBLACK_NOT_EXPRESSION);
			cyblack_unary_logical_expression_set_arg1_method(parsed_not_expression, parsed_arg);
			if (NIL != instances.instance_of_p(parsed_not_expression, CYBLACK_PATTERN)) {
			    cyblack_pattern_set_unparsed_pattern_method(parsed_not_expression, v_object);
			}
			sublisp_throw($sym1537$OUTER_CATCH_FOR_CYBLACK_NOT_PARSER_METHOD, parsed_not_expression);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_not_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1537$OUTER_CATCH_FOR_CYBLACK_NOT_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_not_parser_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_eq_predicate_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_eq_predicate_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_eq_predicate_parser_p(SubLObject cyblack_eq_predicate_parser) {
	return classes.subloop_instanceof_class(cyblack_eq_predicate_parser, CYBLACK_EQ_PREDICATE_PARSER);
    }

    public static final SubLObject cyblack_eq_predicate_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $EQ);
	return self;
    }

    public static final SubLObject cyblack_eq_predicate_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_eq_predicate_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    try {
		try {
		    {
			SubLObject args = v_object.rest();
			SubLObject arg1 = args.first();
			SubLObject arg2 = cadr(args);
			SubLObject parsed_arg1 = methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg1);
			SubLObject parsed_arg2 = methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg2);
			SubLObject parsed_eq_predicate = object.object_new_method(CYBLACK_EQ_PREDICATE);
			cyblack_binary_predicate_set_arg1_method(parsed_eq_predicate, parsed_arg1);
			cyblack_binary_predicate_set_arg2_method(parsed_eq_predicate, parsed_arg2);
			if (NIL != instances.instance_of_p(parsed_eq_predicate, CYBLACK_PATTERN)) {
			    cyblack_pattern_set_unparsed_pattern_method(parsed_eq_predicate, v_object);
			}
			sublisp_throw($sym1546$OUTER_CATCH_FOR_CYBLACK_EQ_PREDICATE_PARSER_METHOD, parsed_eq_predicate);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_eq_predicate_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1546$OUTER_CATCH_FOR_CYBLACK_EQ_PREDICATE_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_eq_predicate_parser_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_equal_predicate_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_equal_predicate_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_equal_predicate_parser_p(SubLObject cyblack_equal_predicate_parser) {
	return classes.subloop_instanceof_class(cyblack_equal_predicate_parser, CYBLACK_EQUAL_PREDICATE_PARSER);
    }

    public static final SubLObject cyblack_equal_predicate_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $EQUAL);
	return self;
    }

    public static final SubLObject cyblack_equal_predicate_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_equal_predicate_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    try {
		try {
		    {
			SubLObject args = v_object.rest();
			SubLObject arg1 = args.first();
			SubLObject arg2 = cadr(args);
			SubLObject parsed_arg1 = methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg1);
			SubLObject parsed_arg2 = methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg2);
			SubLObject parsed_equal_predicate = object.object_new_method(CYBLACK_EQUAL_PREDICATE);
			cyblack_binary_predicate_set_arg1_method(parsed_equal_predicate, parsed_arg1);
			cyblack_binary_predicate_set_arg2_method(parsed_equal_predicate, parsed_arg2);
			if (NIL != instances.instance_of_p(parsed_equal_predicate, CYBLACK_PATTERN)) {
			    cyblack_pattern_set_unparsed_pattern_method(parsed_equal_predicate, v_object);
			}
			sublisp_throw($sym1555$OUTER_CATCH_FOR_CYBLACK_EQUAL_PREDICATE_PARSER_METHOD, parsed_equal_predicate);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_equal_predicate_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1555$OUTER_CATCH_FOR_CYBLACK_EQUAL_PREDICATE_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_equal_predicate_parser_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_assoc_equal_predicate_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_assoc_equal_predicate_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_assoc_equal_predicate_parser_p(SubLObject cyblack_assoc_equal_predicate_parser) {
	return classes.subloop_instanceof_class(cyblack_assoc_equal_predicate_parser, CYBLACK_ASSOC_EQUAL_PREDICATE_PARSER);
    }

    public static final SubLObject cyblack_assoc_equal_predicate_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $ASSOC_EQUAL);
	return self;
    }

    public static final SubLObject cyblack_assoc_equal_predicate_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_assoc_equal_predicate_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    try {
		try {
		    {
			SubLObject args = v_object.rest();
			SubLObject arg1 = args.first();
			SubLObject arg2 = cadr(args);
			SubLObject parsed_arg1 = methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg1);
			SubLObject parsed_arg2 = methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg2);
			SubLObject parsed_assoc_equal_predicate = object.object_new_method(CYBLACK_ASSOC_EQUAL_PREDICATE);
			cyblack_binary_predicate_set_arg1_method(parsed_assoc_equal_predicate, parsed_arg1);
			cyblack_binary_predicate_set_arg2_method(parsed_assoc_equal_predicate, parsed_arg2);
			if (NIL != instances.instance_of_p(parsed_assoc_equal_predicate, CYBLACK_PATTERN)) {
			    cyblack_pattern_set_unparsed_pattern_method(parsed_assoc_equal_predicate, v_object);
			}
			sublisp_throw($sym1564$OUTER_CATCH_FOR_CYBLACK_ASSOC_EQUAL_PREDICATE_PARSER_METHOD, parsed_assoc_equal_predicate);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_assoc_equal_predicate_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1564$OUTER_CATCH_FOR_CYBLACK_ASSOC_EQUAL_PREDICATE_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_assoc_equal_predicate_parser_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_le_predicate_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_le_predicate_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_le_predicate_parser_p(SubLObject cyblack_le_predicate_parser) {
	return classes.subloop_instanceof_class(cyblack_le_predicate_parser, CYBLACK_LE_PREDICATE_PARSER);
    }

    public static final SubLObject cyblack_le_predicate_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $LE);
	return self;
    }

    public static final SubLObject cyblack_le_predicate_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_le_predicate_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    try {
		try {
		    {
			SubLObject args = v_object.rest();
			SubLObject arg1 = args.first();
			SubLObject arg2 = cadr(args);
			SubLObject parsed_arg1 = methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg1);
			SubLObject parsed_arg2 = methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg2);
			SubLObject parsed_le_predicate = object.object_new_method(CYBLACK_LE_PREDICATE);
			cyblack_binary_predicate_set_arg1_method(parsed_le_predicate, parsed_arg1);
			cyblack_binary_predicate_set_arg2_method(parsed_le_predicate, parsed_arg2);
			if (NIL != instances.instance_of_p(parsed_le_predicate, CYBLACK_PATTERN)) {
			    cyblack_pattern_set_unparsed_pattern_method(parsed_le_predicate, v_object);
			}
			sublisp_throw($sym1573$OUTER_CATCH_FOR_CYBLACK_LE_PREDICATE_PARSER_METHOD, parsed_le_predicate);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_le_predicate_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1573$OUTER_CATCH_FOR_CYBLACK_LE_PREDICATE_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_le_predicate_parser_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_ge_predicate_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_ge_predicate_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_ge_predicate_parser_p(SubLObject cyblack_ge_predicate_parser) {
	return classes.subloop_instanceof_class(cyblack_ge_predicate_parser, CYBLACK_GE_PREDICATE_PARSER);
    }

    public static final SubLObject cyblack_ge_predicate_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $GE);
	return self;
    }

    public static final SubLObject cyblack_ge_predicate_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_ge_predicate_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    try {
		try {
		    {
			SubLObject args = v_object.rest();
			SubLObject arg1 = args.first();
			SubLObject arg2 = cadr(args);
			SubLObject parsed_arg1 = methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg1);
			SubLObject parsed_arg2 = methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg2);
			SubLObject parsed_ge_predicate = object.object_new_method(CYBLACK_GE_PREDICATE);
			cyblack_binary_predicate_set_arg1_method(parsed_ge_predicate, parsed_arg1);
			cyblack_binary_predicate_set_arg2_method(parsed_ge_predicate, parsed_arg2);
			if (NIL != instances.instance_of_p(parsed_ge_predicate, CYBLACK_PATTERN)) {
			    cyblack_pattern_set_unparsed_pattern_method(parsed_ge_predicate, v_object);
			}
			sublisp_throw($sym1582$OUTER_CATCH_FOR_CYBLACK_GE_PREDICATE_PARSER_METHOD, parsed_ge_predicate);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ge_predicate_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1582$OUTER_CATCH_FOR_CYBLACK_GE_PREDICATE_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_ge_predicate_parser_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_lt_predicate_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_lt_predicate_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_lt_predicate_parser_p(SubLObject cyblack_lt_predicate_parser) {
	return classes.subloop_instanceof_class(cyblack_lt_predicate_parser, CYBLACK_LT_PREDICATE_PARSER);
    }

    public static final SubLObject cyblack_lt_predicate_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $LT);
	return self;
    }

    public static final SubLObject cyblack_lt_predicate_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_lt_predicate_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    try {
		try {
		    {
			SubLObject args = v_object.rest();
			SubLObject arg1 = args.first();
			SubLObject arg2 = cadr(args);
			SubLObject parsed_arg1 = methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg1);
			SubLObject parsed_arg2 = methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg2);
			SubLObject parsed_lt_predicate = object.object_new_method(CYBLACK_LT_PREDICATE);
			cyblack_binary_predicate_set_arg1_method(parsed_lt_predicate, parsed_arg1);
			cyblack_binary_predicate_set_arg2_method(parsed_lt_predicate, parsed_arg2);
			if (NIL != instances.instance_of_p(parsed_lt_predicate, CYBLACK_PATTERN)) {
			    cyblack_pattern_set_unparsed_pattern_method(parsed_lt_predicate, v_object);
			}
			sublisp_throw($sym1591$OUTER_CATCH_FOR_CYBLACK_LT_PREDICATE_PARSER_METHOD, parsed_lt_predicate);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_lt_predicate_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1591$OUTER_CATCH_FOR_CYBLACK_LT_PREDICATE_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_lt_predicate_parser_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_gt_predicate_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_gt_predicate_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_gt_predicate_parser_p(SubLObject cyblack_gt_predicate_parser) {
	return classes.subloop_instanceof_class(cyblack_gt_predicate_parser, CYBLACK_GT_PREDICATE_PARSER);
    }

    public static final SubLObject cyblack_gt_predicate_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $GT);
	return self;
    }

    public static final SubLObject cyblack_gt_predicate_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_gt_predicate_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    try {
		try {
		    {
			SubLObject args = v_object.rest();
			SubLObject arg1 = args.first();
			SubLObject arg2 = cadr(args);
			SubLObject parsed_arg1 = methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg1);
			SubLObject parsed_arg2 = methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg2);
			SubLObject parsed_gt_predicate = object.object_new_method(CYBLACK_GT_PREDICATE);
			cyblack_binary_predicate_set_arg1_method(parsed_gt_predicate, parsed_arg1);
			cyblack_binary_predicate_set_arg2_method(parsed_gt_predicate, parsed_arg2);
			if (NIL != instances.instance_of_p(parsed_gt_predicate, CYBLACK_PATTERN)) {
			    cyblack_pattern_set_unparsed_pattern_method(parsed_gt_predicate, v_object);
			}
			sublisp_throw($sym1600$OUTER_CATCH_FOR_CYBLACK_GT_PREDICATE_PARSER_METHOD, parsed_gt_predicate);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_gt_predicate_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1600$OUTER_CATCH_FOR_CYBLACK_GT_PREDICATE_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_gt_predicate_parser_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_type_of_expression_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_type_of_expression_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_type_of_expression_parser_p(SubLObject cyblack_type_of_expression_parser) {
	return classes.subloop_instanceof_class(cyblack_type_of_expression_parser, CYBLACK_TYPE_OF_EXPRESSION_PARSER);
    }

    public static final SubLObject cyblack_type_of_expression_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $TYPE_OF);
	return self;
    }

    public static final SubLObject cyblack_type_of_expression_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_type_of_expression_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    try {
		try {
		    {
			SubLObject variable_reference_parsed = methods.funcall_instance_method_with_1_args(main_parser, PARSE, cyblack_symbol_to_cyblack_package(cadr(v_object)));
			SubLObject type_of_expression = object.new_object_instance(CYBLACK_TYPE_OF_EXPRESSION);
			cyblack_posting_operation_expression_set_posting_expression_method(type_of_expression, variable_reference_parsed);
			if (NIL != instances.instance_of_p(type_of_expression, CYBLACK_PATTERN)) {
			    cyblack_pattern_set_unparsed_pattern_method(type_of_expression, v_object);
			}
			sublisp_throw($sym1609$OUTER_CATCH_FOR_CYBLACK_TYPE_OF_EXPRESSION_PARSER_METHOD, type_of_expression);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_type_of_expression_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1609$OUTER_CATCH_FOR_CYBLACK_TYPE_OF_EXPRESSION_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_type_of_expression_parser_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_call_method_expression_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_call_method_expression_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_call_method_expression_parser_p(SubLObject cyblack_call_method_expression_parser) {
	return classes.subloop_instanceof_class(cyblack_call_method_expression_parser, CYBLACK_CALL_METHOD_EXPRESSION_PARSER);
    }

    public static final SubLObject cyblack_call_method_expression_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $CALL);
	return self;
    }

    public static final SubLObject cyblack_call_method_expression_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_call_method_expression_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    try {
		try {
		    {
			SubLObject variable_reference = (cadr(v_object).isSymbol()) ? ((SubLObject) (cyblack_symbol_to_cyblack_package(cadr(v_object)))) : cadr(v_object);
			SubLObject symbol_expression = cddr(v_object).first();
			SubLObject variable_reference_parsed = methods.funcall_instance_method_with_1_args(main_parser, PARSE, variable_reference);
			SubLObject symbol_expression_parsed = methods.funcall_instance_method_with_1_args(main_parser, PARSE, symbol_expression);
			SubLObject parsed_args = NIL;
			SubLObject new_parsed_call_method_expression = object.new_object_instance(CYBLACK_CALL_METHOD_EXPRESSION);
			SubLObject list_expression = cddr(v_object).rest();
			if (NIL == list_expression) {
			    parsed_args = NIL;
			} else if (list_expression.isAtom()) {
			    parsed_args = list(list_expression);
			} else if (NIL == list_expression.rest()) {
			    {
				SubLObject arg = list_expression.first();
				parsed_args = list(methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg));
			    }
			} else {
			    {
				SubLObject tail_cons = NIL;
				SubLObject result = NIL;
				{
				    SubLObject arg = list_expression.first();
				    parsed_args = list(methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg));
				    tail_cons = parsed_args;
				}
				{
				    SubLObject cdolist_list_var = list_expression.rest();
				    SubLObject arg = NIL;
				    for (arg = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), arg = cdolist_list_var.first()) {
					result = list(methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg));
					rplacd(tail_cons, result);
					tail_cons = result;
				    }
				}
			    }
			}

			cyblack_posting_operation_expression_set_posting_expression_method(new_parsed_call_method_expression, variable_reference_parsed);
			cyblack_call_method_expression_set_method_name_literal_method(new_parsed_call_method_expression, symbol_expression_parsed);
			cyblack_call_method_expression_set_actual_args_method(new_parsed_call_method_expression, parsed_args);
			if (NIL != instances.instance_of_p(new_parsed_call_method_expression, CYBLACK_PATTERN)) {
			    cyblack_pattern_set_unparsed_pattern_method(new_parsed_call_method_expression, v_object);
			}
			sublisp_throw($sym1618$OUTER_CATCH_FOR_CYBLACK_CALL_METHOD_EXPRESSION_PARSER_METHOD, new_parsed_call_method_expression);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_call_method_expression_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1618$OUTER_CATCH_FOR_CYBLACK_CALL_METHOD_EXPRESSION_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_call_method_expression_parser_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_slot_access_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_slot_access_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_slot_access_parser_p(SubLObject cyblack_slot_access_parser) {
	return classes.subloop_instanceof_class(cyblack_slot_access_parser, CYBLACK_SLOT_ACCESS_PARSER);
    }

    public static final SubLObject cyblack_slot_access_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $GET_SLOT);
	return self;
    }

    public static final SubLObject cyblack_slot_access_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_slot_access_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    try {
		try {
		    {
			SubLObject args = v_object.rest();
			SubLObject arg1 = args.first();
			SubLObject arg2 = cadr(args);
			SubLObject parsed_arg1 = methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg1);
			SubLObject parsed_arg2 = methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg2);
			SubLObject parsed_slot_access = object.object_new_method(CYBLACK_SLOT_ACCESS);
			cyblack_posting_operation_expression_set_posting_expression_method(parsed_slot_access, parsed_arg1);
			cyblack_slot_access_set_slot_name_method(parsed_slot_access, parsed_arg2);
			if (NIL != instances.instance_of_p(parsed_slot_access, CYBLACK_PATTERN)) {
			    cyblack_pattern_set_unparsed_pattern_method(parsed_slot_access, v_object);
			}
			sublisp_throw($sym1627$OUTER_CATCH_FOR_CYBLACK_SLOT_ACCESS_PARSER_METHOD, parsed_slot_access);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_slot_access_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1627$OUTER_CATCH_FOR_CYBLACK_SLOT_ACCESS_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_slot_access_parser_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_subtraction_expression_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_subtraction_expression_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_subtraction_expression_parser_p(SubLObject cyblack_subtraction_expression_parser) {
	return classes.subloop_instanceof_class(cyblack_subtraction_expression_parser, CYBLACK_SUBTRACTION_EXPRESSION_PARSER);
    }

    public static final SubLObject cyblack_subtraction_expression_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $sym1633$_);
	return self;
    }

    public static final SubLObject cyblack_subtraction_expression_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_subtraction_expression_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    try {
		try {
		    {
			SubLObject args = v_object.rest();
			SubLObject arg1 = args.first();
			SubLObject arg2 = cadr(args);
			SubLObject parsed_arg1 = methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg1);
			SubLObject parsed_arg2 = methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg2);
			SubLObject parsed_subtraction_expression = object.object_new_method(CYBLACK_SUBTRACTION_EXPRESSION);
			cyblack_binary_arithmetic_expression_set_arg1_method(parsed_subtraction_expression, parsed_arg1);
			cyblack_binary_arithmetic_expression_set_arg2_method(parsed_subtraction_expression, parsed_arg2);
			if (NIL != instances.instance_of_p(parsed_subtraction_expression, CYBLACK_PATTERN)) {
			    cyblack_pattern_set_unparsed_pattern_method(parsed_subtraction_expression, v_object);
			}
			sublisp_throw($sym1636$OUTER_CATCH_FOR_CYBLACK_SUBTRACTION_EXPRESSION_PARSER_METHOD, parsed_subtraction_expression);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_subtraction_expression_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1636$OUTER_CATCH_FOR_CYBLACK_SUBTRACTION_EXPRESSION_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_subtraction_expression_parser_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_addition_expression_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_addition_expression_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_addition_expression_parser_p(SubLObject cyblack_addition_expression_parser) {
	return classes.subloop_instanceof_class(cyblack_addition_expression_parser, CYBLACK_ADDITION_EXPRESSION_PARSER);
    }

    public static final SubLObject cyblack_addition_expression_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $sym1642$_);
	return self;
    }

    public static final SubLObject cyblack_addition_expression_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_addition_expression_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    try {
		try {
		    {
			SubLObject args = v_object.rest();
			SubLObject arg1 = args.first();
			SubLObject arg2 = cadr(args);
			SubLObject parsed_arg1 = methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg1);
			SubLObject parsed_arg2 = methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg2);
			SubLObject parsed_addition_expression = object.object_new_method(CYBLACK_ADDITION_EXPRESSION);
			methods.funcall_instance_method_with_1_args(parsed_addition_expression, SET_ARG1, parsed_arg1);
			methods.funcall_instance_method_with_1_args(parsed_addition_expression, SET_ARG2, parsed_arg2);
			if (NIL != instances.instance_of_p(parsed_addition_expression, CYBLACK_PATTERN)) {
			    cyblack_pattern_set_unparsed_pattern_method(parsed_addition_expression, v_object);
			}
			sublisp_throw($sym1645$OUTER_CATCH_FOR_CYBLACK_ADDITION_EXPRESSION_PARSER_METHOD, parsed_addition_expression);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_addition_expression_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1645$OUTER_CATCH_FOR_CYBLACK_ADDITION_EXPRESSION_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_addition_expression_parser_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_multiplication_expression_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_multiplication_expression_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_multiplication_expression_parser_p(SubLObject cyblack_multiplication_expression_parser) {
	return classes.subloop_instanceof_class(cyblack_multiplication_expression_parser, CYBLACK_MULTIPLICATION_EXPRESSION_PARSER);
    }

    public static final SubLObject cyblack_multiplication_expression_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $sym1651$_);
	return self;
    }

    public static final SubLObject cyblack_multiplication_expression_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_multiplication_expression_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    try {
		try {
		    {
			SubLObject args = v_object.rest();
			SubLObject arg1 = args.first();
			SubLObject arg2 = cadr(args);
			SubLObject parsed_arg1 = methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg1);
			SubLObject parsed_arg2 = methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg2);
			SubLObject parsed_multiplication_expression = object.object_new_method(CYBLACK_MULTIPLICATION_EXPRESSION);
			methods.funcall_instance_method_with_1_args(parsed_multiplication_expression, SET_ARG1, parsed_arg1);
			methods.funcall_instance_method_with_1_args(parsed_multiplication_expression, SET_ARG2, parsed_arg2);
			if (NIL != instances.instance_of_p(parsed_multiplication_expression, CYBLACK_PATTERN)) {
			    cyblack_pattern_set_unparsed_pattern_method(parsed_multiplication_expression, v_object);
			}
			sublisp_throw($sym1654$OUTER_CATCH_FOR_CYBLACK_MULTIPLICATION_EXPRESSION_PARSER_METHOD, parsed_multiplication_expression);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_multiplication_expression_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1654$OUTER_CATCH_FOR_CYBLACK_MULTIPLICATION_EXPRESSION_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_multiplication_expression_parser_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_division_expression_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_division_expression_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_division_expression_parser_p(SubLObject cyblack_division_expression_parser) {
	return classes.subloop_instanceof_class(cyblack_division_expression_parser, CYBLACK_DIVISION_EXPRESSION_PARSER);
    }

    public static final SubLObject cyblack_division_expression_parser_initialize_method(SubLObject self) {
	cyblack_item_parser_initialize_method(self);
	cyblack_pattern_processor_set_keyword_method(self, $sym1660$_);
	return self;
    }

    public static final SubLObject cyblack_division_expression_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_division_expression_parser_method = NIL;
	    SubLObject main_parser = get_cyblack_pattern_processor_main_parser(self);
	    try {
		try {
		    {
			SubLObject args = v_object.rest();
			SubLObject arg1 = args.first();
			SubLObject arg2 = cadr(args);
			SubLObject parsed_arg1 = methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg1);
			SubLObject parsed_arg2 = methods.funcall_instance_method_with_1_args(main_parser, PARSE, arg2);
			SubLObject parsed_division_expression = object.object_new_method(CYBLACK_DIVISION_EXPRESSION);
			cyblack_binary_arithmetic_expression_set_arg1_method(parsed_division_expression, parsed_arg1);
			cyblack_binary_arithmetic_expression_set_arg2_method(parsed_division_expression, parsed_arg2);
			if (NIL != instances.instance_of_p(parsed_division_expression, CYBLACK_PATTERN)) {
			    cyblack_pattern_set_unparsed_pattern_method(parsed_division_expression, v_object);
			}
			sublisp_throw($sym1663$OUTER_CATCH_FOR_CYBLACK_DIVISION_EXPRESSION_PARSER_METHOD, parsed_division_expression);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_pattern_processor_main_parser(self, main_parser);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_division_expression_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1663$OUTER_CATCH_FOR_CYBLACK_DIVISION_EXPRESSION_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_division_expression_parser_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_item_compiler_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_item_compiler_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, MAIN_PARSER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PATTERN_PROCESSOR, KEYWORD, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_item_compiler_p(SubLObject cyblack_item_compiler) {
	return classes.subloop_instanceof_class(cyblack_item_compiler, CYBLACK_ITEM_COMPILER);
    }

    public static final SubLObject cyblack_item_compiler_initialize_method(SubLObject self) {
	return cyblack_pattern_processor_initialize_method(self);
    }

    public static final SubLObject cyblack_item_compiler_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject keyword = get_cyblack_pattern_processor_keyword(self);
	    format(stream, cyblack_precondition_pattern_p2.$str_alt1671$__CYBLACK_ITEM_COMPILER__S__, keyword);
	    return self;
	}
    }

    public static final SubLObject cyblack_item_compiler_compile_method(SubLObject self, SubLObject v_object) {
	return v_object;
    }

    public static final SubLObject get_cyblack_parser_compiling_dispatch_table(SubLObject cyblack_parser) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_parser, FOUR_INTEGER, COMPILING_DISPATCH_TABLE);
    }

    public static final SubLObject set_cyblack_parser_compiling_dispatch_table(SubLObject cyblack_parser, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_parser, value, FOUR_INTEGER, COMPILING_DISPATCH_TABLE);
    }

    public static final SubLObject get_cyblack_parser_parsing_dispatch_table(SubLObject cyblack_parser) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_parser, THREE_INTEGER, PARSING_DISPATCH_TABLE);
    }

    public static final SubLObject set_cyblack_parser_parsing_dispatch_table(SubLObject cyblack_parser, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_parser, value, THREE_INTEGER, PARSING_DISPATCH_TABLE);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_parser_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_parser_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PARSER, PARSING_DISPATCH_TABLE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PARSER, COMPILING_DISPATCH_TABLE, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_parser_p(SubLObject cyblack_parser) {
	return classes.subloop_instanceof_class(cyblack_parser, CYBLACK_PARSER);
    }

    public static final SubLObject cyblack_parser_register_parsers_method(SubLObject self) {
	cyblack_parser_register_parser_method(self, $KS_ARGS, CYBLACK_PRECON_PATTERN_PARSER);
	cyblack_parser_register_parser_method(self, $MONITOR, CYBLACK_MONITORING_PATTERN_PARSER);
	cyblack_parser_register_parser_method(self, $SATISFY, CYBLACK_SATISFACTION_EXPRESSION_PARSER);
	cyblack_parser_register_parser_method(self, $SATISFY_SIMPLE, CYBLACK_SIMPLE_SATISFACTION_EXPRESSION_PARSER);
	cyblack_parser_register_parser_method(self, $FORALL, CYBLACK_FORALL_EXPRESSION_PARSER);
	cyblack_parser_register_parser_method(self, $PRESENT, CYBLACK_PRESENT_EXPRESSION_PARSER);
	cyblack_parser_register_parser_method(self, $EMPTY_P, CYBLACK_EMPTY_P_EXPRESSION_PARSER);
	cyblack_parser_register_parser_method(self, $TYPE, CYBLACK_TYPE_EXPRESSION_PARSER);
	cyblack_parser_register_parser_method(self, $PANEL, CYBLACK_PANEL_EXPRESSION_PARSER);
	cyblack_parser_register_parser_method(self, $GET, CYBLACK_GET_EXPRESSION_PARSER);
	cyblack_parser_register_parser_method(self, $AND, CYBLACK_AND_PARSER);
	cyblack_parser_register_parser_method(self, $OR, CYBLACK_OR_PARSER);
	cyblack_parser_register_parser_method(self, $NOT, CYBLACK_NOT_PARSER);
	cyblack_parser_register_parser_method(self, $EQ, CYBLACK_EQ_PREDICATE_PARSER);
	cyblack_parser_register_parser_method(self, $EQUAL, CYBLACK_EQUAL_PREDICATE_PARSER);
	cyblack_parser_register_parser_method(self, $ASSOC_EQUAL, CYBLACK_ASSOC_EQUAL_PREDICATE_PARSER);
	cyblack_parser_register_parser_method(self, $LE, CYBLACK_LE_PREDICATE_PARSER);
	cyblack_parser_register_parser_method(self, $GE, CYBLACK_GE_PREDICATE_PARSER);
	cyblack_parser_register_parser_method(self, $LT, CYBLACK_LT_PREDICATE_PARSER);
	cyblack_parser_register_parser_method(self, $GT, CYBLACK_GT_PREDICATE_PARSER);
	cyblack_parser_register_parser_method(self, $TYPE_OF, CYBLACK_TYPE_OF_EXPRESSION_PARSER);
	cyblack_parser_register_parser_method(self, $GET_SLOT, CYBLACK_SLOT_ACCESS_PARSER);
	cyblack_parser_register_parser_method(self, $CALL, CYBLACK_CALL_METHOD_EXPRESSION_PARSER);
	cyblack_parser_register_parser_method(self, $STRING, CYBLACK_STRING_EXPRESSION_PARSER);
	cyblack_parser_register_parser_method(self, $sym1642$_, CYBLACK_ADDITION_EXPRESSION_PARSER);
	cyblack_parser_register_parser_method(self, $sym1633$_, CYBLACK_SUBTRACTION_EXPRESSION_PARSER);
	cyblack_parser_register_parser_method(self, $sym1651$_, CYBLACK_MULTIPLICATION_EXPRESSION_PARSER);
	cyblack_parser_register_parser_method(self, $sym1660$_, CYBLACK_DIVISION_EXPRESSION_PARSER);
	return self;
    }

    public static final SubLObject cyblack_parser_on_startup_method(SubLObject self) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject parsing_dispatch_table = get_cyblack_parser_parsing_dispatch_table(self);
		SubLObject application = cyblack_object.get_cyblack_object_application(self);
		cyblack_object.cyblack_object_on_startup_method(self);
		cyblack_parser_register_parsers_method(self);
		if (NIL != parsing_dispatch_table) {
		    {
			SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(parsing_dispatch_table));
			while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)) {
			    thread.resetMultipleValues();
			    {
				SubLObject key = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
				SubLObject registered_parser = thread.secondMultipleValue();
				thread.resetMultipleValues();
				methods.funcall_instance_method_with_1_args(registered_parser, SET_APPLICATION, application);
				methods.funcall_instance_method_with_0_args(registered_parser, ON_STARTUP);
				iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
			    }
			}
			dictionary_contents.do_dictionary_contents_finalize(iteration_state);
		    }
		}
		return NIL;
	    }
	}
    }

    public static final SubLObject cyblack_parser_on_shutdown_method(SubLObject self) {
	cyblack_parser_on_shutdown_method(self);
	return NIL;
    }

    public static final SubLObject cyblack_parser_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_parser_method = NIL;
	    SubLObject compiling_dispatch_table = get_cyblack_parser_compiling_dispatch_table(self);
	    SubLObject parsing_dispatch_table = get_cyblack_parser_parsing_dispatch_table(self);
	    try {
		try {
		    cyblack_object.cyblack_object_initialize_method(self);
		    parsing_dispatch_table = dictionary.new_dictionary(UNPROVIDED, UNPROVIDED);
		    compiling_dispatch_table = dictionary.new_dictionary(UNPROVIDED, UNPROVIDED);
		    sublisp_throw($sym1692$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_parser_compiling_dispatch_table(self, compiling_dispatch_table);
			    set_cyblack_parser_parsing_dispatch_table(self, parsing_dispatch_table);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1692$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_parser_method;
	}
    }

    public static final SubLObject cyblack_parser_set_application_method(SubLObject self, SubLObject new_application) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject parsing_dispatch_table = get_cyblack_parser_parsing_dispatch_table(self);
		cyblack_object.cyblack_object_set_application_method(self, new_application);
		if (NIL != parsing_dispatch_table) {
		    {
			SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(parsing_dispatch_table));
			while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)) {
			    thread.resetMultipleValues();
			    {
				SubLObject key = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
				SubLObject v_parser = thread.secondMultipleValue();
				thread.resetMultipleValues();
				if ((NIL != v_parser) && (NIL != cyblack_item_parser_p(v_parser))) {
				    cyblack_object.cyblack_object_set_application_method(v_parser, new_application);
				}
				iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
			    }
			}
			dictionary_contents.do_dictionary_contents_finalize(iteration_state);
		    }
		}
		return new_application;
	    }
	}
    }

    public static final SubLObject cyblack_parser_register_parser_method(SubLObject self, SubLObject keyword, SubLObject parser_class) {
	{
	    SubLObject catch_var_for_cyblack_parser_method = NIL;
	    SubLObject parsing_dispatch_table = get_cyblack_parser_parsing_dispatch_table(self);
	    SubLObject application = cyblack_object.get_cyblack_object_application(self);
	    try {
		try {
		    {
			SubLObject new_item_parser = object.object_new_method(parser_class);
			cyblack_pattern_processor_set_main_parser_method(new_item_parser, self);
			cyblack_object.cyblack_object_set_application_method(new_item_parser, application);
			dictionary.dictionary_enter(parsing_dispatch_table, keyword, new_item_parser);
			sublisp_throw($sym1700$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD, new_item_parser);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_parser_parsing_dispatch_table(self, parsing_dispatch_table);
			    cyblack_object.set_cyblack_object_application(self, application);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1700$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_parser_method;
	}
    }

    public static final SubLObject cyblack_parser_retrieve_parser_method(SubLObject self, SubLObject keyword) {
	{
	    SubLObject parsing_dispatch_table = get_cyblack_parser_parsing_dispatch_table(self);
	    return dictionary.dictionary_lookup(parsing_dispatch_table, keyword, UNPROVIDED);
	}
    }

    public static final SubLObject cyblack_parser_register_compiler_method(SubLObject self, SubLObject keyword, SubLObject compiler_class) {
	{
	    SubLObject catch_var_for_cyblack_parser_method = NIL;
	    SubLObject compiling_dispatch_table = get_cyblack_parser_compiling_dispatch_table(self);
	    try {
		try {
		    {
			SubLObject new_item_compiler = object.object_new_method(compiler_class);
			cyblack_pattern_processor_set_main_parser_method(new_item_compiler, self);
			dictionary.dictionary_enter(compiling_dispatch_table, keyword, new_item_compiler);
			sublisp_throw($sym1709$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD, new_item_compiler);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_parser_compiling_dispatch_table(self, compiling_dispatch_table);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1709$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_parser_method;
	}
    }

    public static final SubLObject cyblack_parser_retrieve_compiler_method(SubLObject self, SubLObject keyword) {
	{
	    SubLObject catch_var_for_cyblack_parser_method = NIL;
	    SubLObject compiling_dispatch_table = get_cyblack_parser_compiling_dispatch_table(self);
	    try {
		try {
		    sublisp_throw($sym1713$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD, dictionary.dictionary_lookup(compiling_dispatch_table, keyword, UNPROVIDED));
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_parser_compiling_dispatch_table(self, compiling_dispatch_table);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1713$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_parser_method;
	}
    }

    public static final SubLObject cyblack_parser_parse_method(SubLObject self, SubLObject v_object) {
	{
	    SubLObject catch_var_for_cyblack_parser_method = NIL;
	    SubLObject application = cyblack_object.get_cyblack_object_application(self);
	    try {
		try {
		    if (NIL == v_object) {
			sublisp_throw($sym1716$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD, NIL);
		    } else if (v_object.isString()) {
			{
			    SubLObject application_11 = cyblack_object.cyblack_object_get_application_method(self);
			    if (NIL != application_11) {
				{
				    SubLObject datatype_dictionary = cyblack_application.cyblack_application_get_datatype_dictionary(application_11);
				    if (NIL != datatype_dictionary) {
					sublisp_throw($sym1716$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD, cyblack_datatype_dictionary.cyblack_datatype_dictionary_intern(datatype_dictionary, v_object, UNPROVIDED));
				    }
				}
			    }
			    sublisp_throw($sym1716$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD, NIL);
			}
		    } else if (NIL != forts.fort_p(v_object)) {
			{
			    SubLObject cyblack_fort_instance = object.new_object_instance(CYBLACK_FORT);
			    cyblack_fort_set_value_method(cyblack_fort_instance, v_object);
			    sublisp_throw($sym1716$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD, cyblack_fort_instance);
			}
		    } else if (v_object.isSymbol()) {
			if (NIL != cyblack_variable_symbol_p(v_object)) {
			    {
				SubLObject cyblack_variable_reference = object.object_new_method(CYBLACK_VARIABLE_REFERENCE);
				cyblack_variable_reference_set_variable_method(cyblack_variable_reference, cyblack_symbol_to_cyblack_package(v_object));
				sublisp_throw($sym1716$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD, cyblack_variable_reference);
			    }
			} else {
			    if (v_object == $TRUE) {
				sublisp_throw($sym1716$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD, object.new_object_instance(CYBLACK_TRUE));
			    } else if (v_object == $FALSE) {
				sublisp_throw($sym1716$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD, object.new_object_instance(CYBLACK_FALSE));
			    } else {
				{
				    SubLObject cyblack_symbol = object.object_new_method(CYBLACK_SYMBOL);
				    cyblack_symbol_set_value_method(cyblack_symbol, v_object);
				    sublisp_throw($sym1716$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD, cyblack_symbol);
				}
			    }

			}
		    } else if (v_object.isNumber()) {
			if (v_object.isInteger()) {
			    {
				SubLObject integer_rep = object.object_new_method(CYBLACK_INTEGER);
				cyblack_integer_set_value_method(integer_rep, v_object);
				sublisp_throw($sym1716$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD, integer_rep);
			    }
			} else if (v_object.isDouble()) {
			    {
				SubLObject float_rep = object.object_new_method(CYBLACK_REAL);
				cyblack_real_set_value_method(float_rep, v_object);
				sublisp_throw($sym1716$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD, float_rep);
			    }
			} else {
			    sublisp_throw($sym1716$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD, NIL);
			}

		    } else if (v_object.isCons()) {
			{
			    SubLObject first_element = v_object.first();
			    if ((NIL != cyblack_pattern_operator_p(first_element)) && v_object.rest().isList()) {
				{
				    SubLObject item_parser = cyblack_parser_retrieve_parser_method(self, first_element);
				    if (NIL != item_parser) {
					sublisp_throw($sym1716$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD, methods.funcall_instance_method_with_1_args(item_parser, PARSE, v_object));
				    }
				}
			    } else {
				Errors.warn(cyblack_precondition_pattern_p2.$str_alt1719$_PARSE__S___I_don_t_know_how_to_c, self, v_object);
				sublisp_throw($sym1716$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD, NIL);
			    }
			}
		    } else {
			Errors.warn(cyblack_precondition_pattern_p2.$str_alt1719$_PARSE__S___I_don_t_know_how_to_c, self, v_object);
			sublisp_throw($sym1716$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD, NIL);
		    }

		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    cyblack_object.set_cyblack_object_application(self, application);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_parser_method = Errors.handleThrowable(ccatch_env_var, $sym1716$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD);
	    }
	    return catch_var_for_cyblack_parser_method;
	}
    }

    public static final SubLObject cyblack_parser_compile_method(SubLObject self, SubLObject parsed_object) {
	return NIL;
    }

    public static final SubLObject cyblack_satisfaction_expression_parser_new_expression(SubLObject cyblack_satisfaction_expression_parser) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_satisfaction_expression_parser_p(cyblack_satisfaction_expression_parser)) {
		    Errors.error(cyblack_precondition_pattern_p2.$str_alt1724$CYBLACK_SATISFACTION_EXPRESSION_P, cyblack_satisfaction_expression_parser);
		}
	    }
	    if (NIL != cyblack_simple_satisfaction_expression_parser_p(cyblack_satisfaction_expression_parser)) {
		return cyblack_simple_satisfaction_expression_parser_new_expression_method(cyblack_satisfaction_expression_parser);
	    } else if (NIL != cyblack_satisfaction_expression_parser_p(cyblack_satisfaction_expression_parser)) {
		return cyblack_satisfaction_expression_parser_new_expression_method(cyblack_satisfaction_expression_parser);
	    } else {
		return methods.funcall_instance_method_with_0_args(cyblack_satisfaction_expression_parser, NEW_EXPRESSION);
	    }

	}
    }

    public static final SubLObject cyblack_precon_or_monitoring_pattern_p(SubLObject v_object) {
	return makeBoolean((NIL != cyblack_precon_pattern_p(v_object)) || (NIL != cyblack_monitoring_pattern_p(v_object)));
    }

    public static final SubLObject cyblack_pattern_get_environment(SubLObject mp_or_pp) {
	if (NIL != cyblack_satisfaction_expression_p(mp_or_pp)) {
	    return cyblack_satisfaction_expression_get_environment_method(mp_or_pp);
	}
	if (NIL != cyblack_precon_pattern_p(mp_or_pp)) {
	    return cyblack_precon_pattern_get_environment_method(mp_or_pp);
	}
	if (NIL != cyblack_monitoring_pattern_p(mp_or_pp)) {
	    return cyblack_monitoring_pattern_get_environment_method(mp_or_pp);
	}
	return NIL;
    }

    public static final SubLObject cyblack_pattern_set_environment(SubLObject mp_or_pp, SubLObject new_environment) {
	if (NIL != cyblack_satisfaction_expression_p(mp_or_pp)) {
	    return cyblack_satisfaction_expression_set_environment_method(mp_or_pp, new_environment);
	}
	if (NIL != cyblack_precon_pattern_p(mp_or_pp)) {
	    return cyblack_precon_pattern_set_environment_method(mp_or_pp, new_environment);
	}
	if (NIL != cyblack_monitoring_pattern_p(mp_or_pp)) {
	    return cyblack_monitoring_pattern_set_environment_method(mp_or_pp, new_environment);
	}
	return NIL;
    }

    public static final SubLObject cyblack_pattern_get_local_bindings(SubLObject mp_or_pp) {
	if (NIL != cyblack_precon_pattern_p(mp_or_pp)) {
	    return cyblack_precon_pattern_get_local_bindings_method(mp_or_pp);
	}
	if (NIL != cyblack_monitoring_pattern_p(mp_or_pp)) {
	    return cyblack_monitoring_pattern_get_local_bindings_method(mp_or_pp);
	}
	return NIL;
    }

    public static final SubLObject cyblack_pattern_get_logical_form(SubLObject mp_or_pp) {
	if (NIL != cyblack_precon_pattern_p(mp_or_pp)) {
	    return cyblack_precon_pattern_get_logical_form_method(mp_or_pp);
	}
	if (NIL != cyblack_monitoring_pattern_p(mp_or_pp)) {
	    return cyblack_monitoring_pattern_get_logical_form_method(mp_or_pp);
	}
	return NIL;
    }

    public static final SubLObject cyblack_pattern_get_unique_bindings(SubLObject mp_or_pp) {
	if (NIL != cyblack_precon_pattern_p(mp_or_pp)) {
	    return cyblack_precon_pattern_get_unique_bindings_method(mp_or_pp);
	}
	if (NIL != cyblack_monitoring_pattern_p(mp_or_pp)) {
	    return cyblack_monitoring_pattern_get_unique_bindings_method(mp_or_pp);
	}
	return NIL;
    }

    public static final SubLObject cyblack_get_parameters(SubLObject unparsed_pattern) {
	if (((unparsed_pattern.isCons() && (NIL != member(unparsed_pattern.first(), cyblack_precondition_pattern_p3.$list_alt1725, UNPROVIDED, UNPROVIDED))) && unparsed_pattern.rest().isCons()) && cadr(unparsed_pattern).isList()) {
	    {
		SubLObject parameter_list = cadr(unparsed_pattern);
		SubLObject vars = NIL;
		SubLObject list_expression = parameter_list;
		if (NIL == list_expression) {
		    vars = NIL;
		} else if (list_expression.isAtom()) {
		    vars = list(list_expression);
		} else if (NIL == list_expression.rest()) {
		    {
			SubLObject var_decl = list_expression.first();
			vars = list(var_decl.isCons() ? ((SubLObject) (var_decl.first())) : var_decl);
		    }
		} else {
		    {
			SubLObject tail_cons = NIL;
			SubLObject result = NIL;
			{
			    SubLObject var_decl = list_expression.first();
			    vars = list(var_decl.isCons() ? ((SubLObject) (var_decl.first())) : var_decl);
			    tail_cons = vars;
			}
			{
			    SubLObject cdolist_list_var = list_expression.rest();
			    SubLObject var_decl = NIL;
			    for (var_decl = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), var_decl = cdolist_list_var.first()) {
				result = list(var_decl.isCons() ? ((SubLObject) (var_decl.first())) : var_decl);
				rplacd(tail_cons, result);
				tail_cons = result;
			    }
			}
		    }
		}

		return vars;
	    }
	} else {
	    return NIL;
	}
    }

    public static final SubLObject declare_cyblack_precondition_pattern_file() {
	declareFunction("valid_cyblack_pattern_operators", "VALID-CYBLACK-PATTERN-OPERATORS", 0, 0, false);
	declareFunction("cyblack_pattern_operator_p", "CYBLACK-PATTERN-OPERATOR-P", 1, 0, false);
	declareFunction("encode_cyblack_pattern_operator", "ENCODE-CYBLACK-PATTERN-OPERATOR", 1, 0, false);
	declareFunction("decode_cyblack_pattern_operator", "DECODE-CYBLACK-PATTERN-OPERATOR", 1, 0, false);
	declareFunction("cyblack_pattern_operator_less_p", "CYBLACK-PATTERN-OPERATOR-LESS-P", 2, 0, false);
	declareFunction("cyblack_pattern_operator_greater_p", "CYBLACK-PATTERN-OPERATOR-GREATER-P", 2, 0, false);
	declareFunction("cyblack_variable_symbol_p", "CYBLACK-VARIABLE-SYMBOL-P", 1, 0, false);
	declareFunction("cyblack_get_variable_symbol_name", "CYBLACK-GET-VARIABLE-SYMBOL-NAME", 1, 0, false);
	declareFunction("cyblack_symbol_to_cyblack_package", "CYBLACK-SYMBOL-TO-CYBLACK-PACKAGE", 1, 0, false);
	declareFunction("cyblack_unbound_value_p", "CYBLACK-UNBOUND-VALUE-P", 1, 0, false);
	declareFunction("get_cyblack_binding_value", "GET-CYBLACK-BINDING-VALUE", 1, 0, false);
	declareFunction("set_cyblack_binding_value", "SET-CYBLACK-BINDING-VALUE", 2, 0, false);
	declareFunction("get_cyblack_binding_type", "GET-CYBLACK-BINDING-TYPE", 1, 0, false);
	declareFunction("set_cyblack_binding_type", "SET-CYBLACK-BINDING-TYPE", 2, 0, false);
	declareFunction("get_cyblack_binding_variable", "GET-CYBLACK-BINDING-VARIABLE", 1, 0, false);
	declareFunction("set_cyblack_binding_variable", "SET-CYBLACK-BINDING-VARIABLE", 2, 0, false);
	declareFunction("get_cyblack_binding_apriori", "GET-CYBLACK-BINDING-APRIORI", 1, 0, false);
	declareFunction("set_cyblack_binding_apriori", "SET-CYBLACK-BINDING-APRIORI", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_binding_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-BINDING-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_binding_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-BINDING-INSTANCE", 1, 0, false);
	declareFunction("cyblack_binding_p", "CYBLACK-BINDING-P", 1, 0, false);
	declareFunction("cyblack_binding_initialize_method", "CYBLACK-BINDING-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_binding_print_method", "CYBLACK-BINDING-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_binding_clone_method", "CYBLACK-BINDING-CLONE-METHOD", 1, 0, false);
	declareFunction("cyblack_binding_unboundp_method", "CYBLACK-BINDING-UNBOUNDP-METHOD", 1, 0, false);
	declareFunction("cyblack_binding_get_value_method", "CYBLACK-BINDING-GET-VALUE-METHOD", 1, 0, false);
	declareFunction("cyblack_binding_set_value_method", "CYBLACK-BINDING-SET-VALUE-METHOD", 2, 0, false);
	declareFunction("cyblack_binding_get_type_method", "CYBLACK-BINDING-GET-TYPE-METHOD", 1, 0, false);
	declareFunction("cyblack_binding_set_type_method", "CYBLACK-BINDING-SET-TYPE-METHOD", 2, 0, false);
	declareFunction("cyblack_binding_has_type_p_method", "CYBLACK-BINDING-HAS-TYPE-P-METHOD", 2, 0, false);
	declareFunction("cyblack_binding_get_variable_method", "CYBLACK-BINDING-GET-VARIABLE-METHOD", 1, 0, false);
	declareFunction("cyblack_binding_set_variable_method", "CYBLACK-BINDING-SET-VARIABLE-METHOD", 2, 0, false);
	declareFunction("cyblack_binding_apriori_p_method", "CYBLACK-BINDING-APRIORI-P-METHOD", 1, 0, false);
	declareFunction("cyblack_binding_set_apriori_method", "CYBLACK-BINDING-SET-APRIORI-METHOD", 2, 0, false);
	declareFunction("cyblack_binding_listify_binding_method", "CYBLACK-BINDING-LISTIFY-BINDING-METHOD", 1, 0, false);
	declareFunction("cyblack_create_binding", "CYBLACK-CREATE-BINDING", 2, 0, false);
	declareFunction("cyblack_create_typed_binding", "CYBLACK-CREATE-TYPED-BINDING", 3, 0, false);
	declareFunction("cyblack_print_binding_list", "CYBLACK-PRINT-BINDING-LIST", 1, 1, false);
	declareFunction("cyblack_bindings_p", "CYBLACK-BINDINGS-P", 1, 0, false);
	declareFunction("cyblack_type_mentioned_in_bindings_p", "CYBLACK-TYPE-MENTIONED-IN-BINDINGS-P", 2, 0, false);
	declareFunction("cyblack_binding_assoc", "CYBLACK-BINDING-ASSOC", 2, 0, false);
	declareFunction("cyblack_binding_rassoc", "CYBLACK-BINDING-RASSOC", 2, 0, false);
	declareFunction("cyblack_bindings_copy", "CYBLACK-BINDINGS-COPY", 1, 0, false);
	declareFunction("get_cyblack_environment_local_bindings", "GET-CYBLACK-ENVIRONMENT-LOCAL-BINDINGS", 1, 0, false);
	declareFunction("set_cyblack_environment_local_bindings", "SET-CYBLACK-ENVIRONMENT-LOCAL-BINDINGS", 2, 0, false);
	declareFunction("get_cyblack_environment_outer_scope", "GET-CYBLACK-ENVIRONMENT-OUTER-SCOPE", 1, 0, false);
	declareFunction("set_cyblack_environment_outer_scope", "SET-CYBLACK-ENVIRONMENT-OUTER-SCOPE", 2, 0, false);
	declareFunction("get_cyblack_environment_environment_tag", "GET-CYBLACK-ENVIRONMENT-ENVIRONMENT-TAG", 1, 0, false);
	declareFunction("set_cyblack_environment_environment_tag", "SET-CYBLACK-ENVIRONMENT-ENVIRONMENT-TAG", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_environment_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ENVIRONMENT-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_environment_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ENVIRONMENT-INSTANCE", 1, 0, false);
	declareFunction("cyblack_environment_p", "CYBLACK-ENVIRONMENT-P", 1, 0, false);
	declareFunction("cyblack_environment_instantiate_binding_list_method", "CYBLACK-ENVIRONMENT-INSTANTIATE-BINDING-LIST-METHOD", 2, 0, false);
	declareFunction("cyblack_environment_initialize_method", "CYBLACK-ENVIRONMENT-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_environment_print_method", "CYBLACK-ENVIRONMENT-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_environment_clone_method", "CYBLACK-ENVIRONMENT-CLONE-METHOD", 1, 0, false);
	declareFunction("cyblack_environment_get_environment_tag_method", "CYBLACK-ENVIRONMENT-GET-ENVIRONMENT-TAG-METHOD", 1, 0, false);
	declareFunction("cyblack_environment_set_environment_tag_method", "CYBLACK-ENVIRONMENT-SET-ENVIRONMENT-TAG-METHOD", 2, 0, false);
	declareFunction("cyblack_environment_get_outer_scope_method", "CYBLACK-ENVIRONMENT-GET-OUTER-SCOPE-METHOD", 1, 0, false);
	declareFunction("cyblack_environment_set_outer_scope_method", "CYBLACK-ENVIRONMENT-SET-OUTER-SCOPE-METHOD", 2, 0, false);
	declareFunction("cyblack_environment_get_local_bindings_method", "CYBLACK-ENVIRONMENT-GET-LOCAL-BINDINGS-METHOD", 1, 0, false);
	declareFunction("cyblack_environment_set_local_bindings_method", "CYBLACK-ENVIRONMENT-SET-LOCAL-BINDINGS-METHOD", 2, 0, false);
	declareFunction("cyblack_environment_get_local_unbound_bindings_method", "CYBLACK-ENVIRONMENT-GET-LOCAL-UNBOUND-BINDINGS-METHOD", 1, 0, false);
	declareFunction("cyblack_environment_push_local_binding_method", "CYBLACK-ENVIRONMENT-PUSH-LOCAL-BINDING-METHOD", 2, 2, false);
	declareFunction("cyblack_environment_push_typed_local_binding_method", "CYBLACK-ENVIRONMENT-PUSH-TYPED-LOCAL-BINDING-METHOD", 3, 2, false);
	declareFunction("cyblack_environment_pop_local_binding_method", "CYBLACK-ENVIRONMENT-POP-LOCAL-BINDING-METHOD", 2, 0, false);
	declareFunction("cyblack_environment_get_binding_method", "CYBLACK-ENVIRONMENT-GET-BINDING-METHOD", 2, 0, false);
	declareFunction("cyblack_environment_get_binding_by_value_method", "CYBLACK-ENVIRONMENT-GET-BINDING-BY-VALUE-METHOD", 2, 0, false);
	declareFunction("cyblack_environment_get_method", "CYBLACK-ENVIRONMENT-GET-METHOD", 2, 1, false);
	declareFunction("cyblack_environment_set_method", "CYBLACK-ENVIRONMENT-SET-METHOD", 3, 0, false);
	declareFunction("cyblack_environment_get_local_method", "CYBLACK-ENVIRONMENT-GET-LOCAL-METHOD", 2, 0, false);
	declareFunction("cyblack_environment_set_local_method", "CYBLACK-ENVIRONMENT-SET-LOCAL-METHOD", 3, 0, false);
	declareFunction("cyblack_environment_push_frame_method", "CYBLACK-ENVIRONMENT-PUSH-FRAME-METHOD", 1, 1, false);
	declareFunction("cyblack_environment_pop_frame_method", "CYBLACK-ENVIRONMENT-POP-FRAME-METHOD", 1, 0, false);
	declareFunction("cyblack_environment_pop_frame_to_method", "CYBLACK-ENVIRONMENT-POP-FRAME-TO-METHOD", 2, 0, false);
	declareFunction("cyblack_environment_top_frame_method", "CYBLACK-ENVIRONMENT-TOP-FRAME-METHOD", 1, 0, false);
	declareFunction("cyblack_environment_listify_local_bindings_method", "CYBLACK-ENVIRONMENT-LISTIFY-LOCAL-BINDINGS-METHOD", 1, 0, false);
	declareFunction("cyblack_environment_get_unique_local_bindings_method", "CYBLACK-ENVIRONMENT-GET-UNIQUE-LOCAL-BINDINGS-METHOD", 1, 0, false);
	declareFunction("cyblack_environment_get_unique_bindings_method", "CYBLACK-ENVIRONMENT-GET-UNIQUE-BINDINGS-METHOD", 1, 1, false);
	declareFunction("cyblack_environment_get_unique_non_apriori_bindings_method", "CYBLACK-ENVIRONMENT-GET-UNIQUE-NON-APRIORI-BINDINGS-METHOD", 1, 1, false);
	declareFunction("cyblack_environment_get_unique_local_unbound_bindings_method", "CYBLACK-ENVIRONMENT-GET-UNIQUE-LOCAL-UNBOUND-BINDINGS-METHOD", 1, 0, false);
	declareFunction("cyblack_environment_get_unique_unbound_bindings_method", "CYBLACK-ENVIRONMENT-GET-UNIQUE-UNBOUND-BINDINGS-METHOD", 1, 1, false);
	declareFunction("cyblack_environment_listify_unique_bindings_method", "CYBLACK-ENVIRONMENT-LISTIFY-UNIQUE-BINDINGS-METHOD", 1, 0, false);
	declareFunction("create_top_level_environment", "CREATE-TOP-LEVEL-ENVIRONMENT", 1, 3, false);
	declareFunction("cyblack_environment_parse_binding_list", "CYBLACK-ENVIRONMENT-PARSE-BINDING-LIST", 2, 0, false);
	declareFunction("cyblack_listify_environments", "CYBLACK-LISTIFY-ENVIRONMENTS", 1, 0, false);
	declareFunction("cyblack_listify_local_environments", "CYBLACK-LISTIFY-LOCAL-ENVIRONMENTS", 1, 0, false);
	declareFunction("cyblack_new_environment", "CYBLACK-NEW-ENVIRONMENT", 0, 2, false);
	declareFunction("cyblack_value_expressions_p", "CYBLACK-VALUE-EXPRESSIONS-P", 1, 0, false);
	declareFunction("cyblack_value_expression_p", "CYBLACK-VALUE-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_logical_expression_p", "CYBLACK-LOGICAL-EXPRESSION-P", 1, 0, false);
	declareFunction("get_cyblack_pattern_unparsed_pattern", "GET-CYBLACK-PATTERN-UNPARSED-PATTERN", 1, 0, false);
	declareFunction("set_cyblack_pattern_unparsed_pattern", "SET-CYBLACK-PATTERN-UNPARSED-PATTERN", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_pattern_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PATTERN-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_pattern_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PATTERN-INSTANCE", 1, 0, false);
	declareFunction("cyblack_pattern_p", "CYBLACK-PATTERN-P", 1, 0, false);
	declareFunction("cyblack_pattern_initialize_method", "CYBLACK-PATTERN-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_pattern_get_unparsed_pattern_method", "CYBLACK-PATTERN-GET-UNPARSED-PATTERN-METHOD", 1, 0, false);
	declareFunction("cyblack_pattern_set_unparsed_pattern_method", "CYBLACK-PATTERN-SET-UNPARSED-PATTERN-METHOD", 2, 0, false);
	declareFunction("cyblack_pattern_get_datatype_bag_method", "CYBLACK-PATTERN-GET-DATATYPE-BAG-METHOD", 1, 0, false);
	declareFunction("cyblack_pattern_traverse_filling_datatype_bag_method", "CYBLACK-PATTERN-TRAVERSE-FILLING-DATATYPE-BAG-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_posting_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-POSTING-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_posting_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-POSTING-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_posting_expression_p", "CYBLACK-POSTING-EXPRESSION-P", 1, 0, false);
	declareFunction("get_cyblack_variable_reference_variable", "GET-CYBLACK-VARIABLE-REFERENCE-VARIABLE", 1, 0, false);
	declareFunction("set_cyblack_variable_reference_variable", "SET-CYBLACK-VARIABLE-REFERENCE-VARIABLE", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_variable_reference_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-VARIABLE-REFERENCE-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_variable_reference_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-VARIABLE-REFERENCE-INSTANCE", 1, 0, false);
	declareFunction("cyblack_variable_reference_p", "CYBLACK-VARIABLE-REFERENCE-P", 1, 0, false);
	declareFunction("cyblack_variable_reference_initialize_method", "CYBLACK-VARIABLE-REFERENCE-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_variable_reference_print_method", "CYBLACK-VARIABLE-REFERENCE-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_variable_reference_get_variable_method", "CYBLACK-VARIABLE-REFERENCE-GET-VARIABLE-METHOD", 1, 0, false);
	declareFunction("cyblack_variable_reference_set_variable_method", "CYBLACK-VARIABLE-REFERENCE-SET-VARIABLE-METHOD", 2, 0, false);
	declareFunction("cyblack_variable_reference_get_value_method", "CYBLACK-VARIABLE-REFERENCE-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("get_cyblack_literal_literal_value", "GET-CYBLACK-LITERAL-LITERAL-VALUE", 1, 0, false);
	declareFunction("set_cyblack_literal_literal_value", "SET-CYBLACK-LITERAL-LITERAL-VALUE", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_literal_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-LITERAL-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_literal_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-LITERAL-INSTANCE", 1, 0, false);
	declareFunction("cyblack_literal_p", "CYBLACK-LITERAL-P", 1, 0, false);
	declareFunction("cyblack_literal_initialize_method", "CYBLACK-LITERAL-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_literal_print_method", "CYBLACK-LITERAL-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_literal_get_value_method", "CYBLACK-LITERAL-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("cyblack_literal_set_value_method", "CYBLACK-LITERAL-SET-VALUE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_number_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-NUMBER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_number_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-NUMBER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_number_p", "CYBLACK-NUMBER-P", 1, 0, false);
	declareFunction("cyblack_number_initialize_method", "CYBLACK-NUMBER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_number_print_method", "CYBLACK-NUMBER-PRINT-METHOD", 3, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_integer_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-INTEGER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_integer_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-INTEGER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_integer_p", "CYBLACK-INTEGER-P", 1, 0, false);
	declareFunction("cyblack_integer_initialize_method", "CYBLACK-INTEGER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_integer_print_method", "CYBLACK-INTEGER-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_integer_set_value_method", "CYBLACK-INTEGER-SET-VALUE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_real_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-REAL-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_real_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-REAL-INSTANCE", 1, 0, false);
	declareFunction("cyblack_real_p", "CYBLACK-REAL-P", 1, 0, false);
	declareFunction("cyblack_real_initialize_method", "CYBLACK-REAL-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_real_print_method", "CYBLACK-REAL-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_real_set_value_method", "CYBLACK-REAL-SET-VALUE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_string_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-STRING-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_string_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-STRING-INSTANCE", 1, 0, false);
	declareFunction("cyblack_string_p", "CYBLACK-STRING-P", 1, 0, false);
	declareFunction("cyblack_string_initialize_method", "CYBLACK-STRING-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_string_print_method", "CYBLACK-STRING-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_string_set_value_method", "CYBLACK-STRING-SET-VALUE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_symbol_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SYMBOL-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_symbol_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SYMBOL-INSTANCE", 1, 0, false);
	declareFunction("cyblack_symbol_p", "CYBLACK-SYMBOL-P", 1, 0, false);
	declareFunction("cyblack_symbol_initialize_method", "CYBLACK-SYMBOL-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_symbol_print_method", "CYBLACK-SYMBOL-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_symbol_set_value_method", "CYBLACK-SYMBOL-SET-VALUE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_fort_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-FORT-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_fort_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-FORT-INSTANCE", 1, 0, false);
	declareFunction("cyblack_fort_p", "CYBLACK-FORT-P", 1, 0, false);
	declareFunction("cyblack_fort_initialize_method", "CYBLACK-FORT-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_fort_print_method", "CYBLACK-FORT-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_fort_set_value_method", "CYBLACK-FORT-SET-VALUE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_constant_symbol_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-CONSTANT-SYMBOL-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_constant_symbol_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-CONSTANT-SYMBOL-INSTANCE", 1, 0, false);
	declareFunction("cyblack_constant_symbol_p", "CYBLACK-CONSTANT-SYMBOL-P", 1, 0, false);
	declareFunction("cyblack_constant_symbol_set_value_method", "CYBLACK-CONSTANT-SYMBOL-SET-VALUE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_true_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-TRUE-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_true_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-TRUE-INSTANCE", 1, 0, false);
	declareFunction("cyblack_true_p", "CYBLACK-TRUE-P", 1, 0, false);
	declareFunction("cyblack_true_initialize_method", "CYBLACK-TRUE-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_true_print_method", "CYBLACK-TRUE-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_true_get_value_method", "CYBLACK-TRUE-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("subloop_reserved_initialize_cyblack_false_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-FALSE-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_false_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-FALSE-INSTANCE", 1, 0, false);
	declareFunction("cyblack_false_p", "CYBLACK-FALSE-P", 1, 0, false);
	declareFunction("cyblack_false_initialize_method", "CYBLACK-FALSE-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_false_print_method", "CYBLACK-FALSE-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_false_get_value_method", "CYBLACK-FALSE-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("valid_cyblack_monitoring_pattern_action_types", "VALID-CYBLACK-MONITORING-PATTERN-ACTION-TYPES", 0, 0, false);
	declareFunction("cyblack_monitoring_pattern_action_type_p", "CYBLACK-MONITORING-PATTERN-ACTION-TYPE-P", 1, 0, false);
	declareFunction("encode_cyblack_monitoring_pattern_action_type", "ENCODE-CYBLACK-MONITORING-PATTERN-ACTION-TYPE", 1, 0, false);
	declareFunction("decode_cyblack_monitoring_pattern_action_type", "DECODE-CYBLACK-MONITORING-PATTERN-ACTION-TYPE", 1, 0, false);
	declareFunction("cyblack_monitoring_pattern_action_type_less_p", "CYBLACK-MONITORING-PATTERN-ACTION-TYPE-LESS-P", 2, 0, false);
	declareFunction("cyblack_monitoring_pattern_action_type_greater_p", "CYBLACK-MONITORING-PATTERN-ACTION-TYPE-GREATER-P", 2, 0, false);
	declareFunction("cyblack_monitoring_pattern_get_type_and_qualifiers", "CYBLACK-MONITORING-PATTERN-GET-TYPE-AND-QUALIFIERS", 1, 0, false);
	declareFunction("valid_cyblack_monitoring_pattern_action_qualifier_types", "VALID-CYBLACK-MONITORING-PATTERN-ACTION-QUALIFIER-TYPES", 0, 0, false);
	declareFunction("cyblack_monitoring_pattern_action_qualifier_type_p", "CYBLACK-MONITORING-PATTERN-ACTION-QUALIFIER-TYPE-P", 1, 0, false);
	declareFunction("encode_cyblack_monitoring_pattern_action_qualifier_type", "ENCODE-CYBLACK-MONITORING-PATTERN-ACTION-QUALIFIER-TYPE", 1, 0, false);
	declareFunction("decode_cyblack_monitoring_pattern_action_qualifier_type", "DECODE-CYBLACK-MONITORING-PATTERN-ACTION-QUALIFIER-TYPE", 1, 0, false);
	declareFunction("cyblack_monitoring_pattern_action_qualifier_type_less_p", "CYBLACK-MONITORING-PATTERN-ACTION-QUALIFIER-TYPE-LESS-P", 2, 0, false);
	declareFunction("cyblack_monitoring_pattern_action_qualifier_type_greater_p", "CYBLACK-MONITORING-PATTERN-ACTION-QUALIFIER-TYPE-GREATER-P", 2, 0, false);
	declareFunction("cyblack_monitoring_pattern_action_qualifier_type_list_p", "CYBLACK-MONITORING-PATTERN-ACTION-QUALIFIER-TYPE-LIST-P", 1, 0, false);
	declareFunction("get_cyblack_monitoring_pattern_logical_form", "GET-CYBLACK-MONITORING-PATTERN-LOGICAL-FORM", 1, 0, false);
	declareFunction("set_cyblack_monitoring_pattern_logical_form", "SET-CYBLACK-MONITORING-PATTERN-LOGICAL-FORM", 2, 0, false);
	declareFunction("get_cyblack_monitoring_pattern_local_bindings", "GET-CYBLACK-MONITORING-PATTERN-LOCAL-BINDINGS", 1, 0, false);
	declareFunction("set_cyblack_monitoring_pattern_local_bindings", "SET-CYBLACK-MONITORING-PATTERN-LOCAL-BINDINGS", 2, 0, false);
	declareFunction("get_cyblack_monitoring_pattern_action_qualifiers", "GET-CYBLACK-MONITORING-PATTERN-ACTION-QUALIFIERS", 1, 0, false);
	declareFunction("set_cyblack_monitoring_pattern_action_qualifiers", "SET-CYBLACK-MONITORING-PATTERN-ACTION-QUALIFIERS", 2, 0, false);
	declareFunction("get_cyblack_monitoring_pattern_action", "GET-CYBLACK-MONITORING-PATTERN-ACTION", 1, 0, false);
	declareFunction("set_cyblack_monitoring_pattern_action", "SET-CYBLACK-MONITORING-PATTERN-ACTION", 2, 0, false);
	declareFunction("get_cyblack_monitoring_pattern_monitor_args", "GET-CYBLACK-MONITORING-PATTERN-MONITOR-ARGS", 1, 0, false);
	declareFunction("set_cyblack_monitoring_pattern_monitor_args", "SET-CYBLACK-MONITORING-PATTERN-MONITOR-ARGS", 2, 0, false);
	declareFunction("get_cyblack_monitoring_pattern_environment", "GET-CYBLACK-MONITORING-PATTERN-ENVIRONMENT", 1, 0, false);
	declareFunction("set_cyblack_monitoring_pattern_environment", "SET-CYBLACK-MONITORING-PATTERN-ENVIRONMENT", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_monitoring_pattern_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-MONITORING-PATTERN-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_monitoring_pattern_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-MONITORING-PATTERN-INSTANCE", 1, 0, false);
	declareFunction("cyblack_monitoring_pattern_p", "CYBLACK-MONITORING-PATTERN-P", 1, 0, false);
	declareFunction("cyblack_monitoring_pattern_initialize_method", "CYBLACK-MONITORING-PATTERN-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_monitoring_pattern_print_method", "CYBLACK-MONITORING-PATTERN-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_monitoring_pattern_clone_method", "CYBLACK-MONITORING-PATTERN-CLONE-METHOD", 1, 0, false);
	declareFunction("cyblack_monitoring_pattern_traverse_filling_datatype_bag_method", "CYBLACK-MONITORING-PATTERN-TRAVERSE-FILLING-DATATYPE-BAG-METHOD", 2, 0, false);
	declareFunction("cyblack_monitoring_pattern_get_environment_method", "CYBLACK-MONITORING-PATTERN-GET-ENVIRONMENT-METHOD", 1, 0, false);
	declareFunction("cyblack_monitoring_pattern_set_environment_method", "CYBLACK-MONITORING-PATTERN-SET-ENVIRONMENT-METHOD", 2, 0, false);
	declareFunction("cyblack_monitoring_pattern_get_monitor_args_method", "CYBLACK-MONITORING-PATTERN-GET-MONITOR-ARGS-METHOD", 1, 0, false);
	declareFunction("cyblack_monitoring_pattern_set_monitor_args_method", "CYBLACK-MONITORING-PATTERN-SET-MONITOR-ARGS-METHOD", 2, 0, false);
	declareFunction("cyblack_monitoring_pattern_get_action_method", "CYBLACK-MONITORING-PATTERN-GET-ACTION-METHOD", 1, 0, false);
	declareFunction("cyblack_monitoring_pattern_set_action_method", "CYBLACK-MONITORING-PATTERN-SET-ACTION-METHOD", 2, 0, false);
	declareFunction("cyblack_monitoring_pattern_get_action_qualifiers_method", "CYBLACK-MONITORING-PATTERN-GET-ACTION-QUALIFIERS-METHOD", 1, 0, false);
	declareFunction("cyblack_monitoring_pattern_set_action_qualifiers_method", "CYBLACK-MONITORING-PATTERN-SET-ACTION-QUALIFIERS-METHOD", 2, 0, false);
	declareFunction("cyblack_monitoring_pattern_get_local_bindings_method", "CYBLACK-MONITORING-PATTERN-GET-LOCAL-BINDINGS-METHOD", 1, 0, false);
	declareFunction("cyblack_monitoring_pattern_set_local_bindings_method", "CYBLACK-MONITORING-PATTERN-SET-LOCAL-BINDINGS-METHOD", 2, 0, false);
	declareFunction("cyblack_monitoring_pattern_get_logical_form_method", "CYBLACK-MONITORING-PATTERN-GET-LOGICAL-FORM-METHOD", 1, 0, false);
	declareFunction("cyblack_monitoring_pattern_set_logical_form_method", "CYBLACK-MONITORING-PATTERN-SET-LOGICAL-FORM-METHOD", 2, 0, false);
	declareFunction("cyblack_monitoring_pattern_get_unique_bindings_method", "CYBLACK-MONITORING-PATTERN-GET-UNIQUE-BINDINGS-METHOD", 1, 0, false);
	declareFunction("get_cyblack_precon_pattern_logical_form", "GET-CYBLACK-PRECON-PATTERN-LOGICAL-FORM", 1, 0, false);
	declareFunction("set_cyblack_precon_pattern_logical_form", "SET-CYBLACK-PRECON-PATTERN-LOGICAL-FORM", 2, 0, false);
	declareFunction("get_cyblack_precon_pattern_local_bindings", "GET-CYBLACK-PRECON-PATTERN-LOCAL-BINDINGS", 1, 0, false);
	declareFunction("set_cyblack_precon_pattern_local_bindings", "SET-CYBLACK-PRECON-PATTERN-LOCAL-BINDINGS", 2, 0, false);
	declareFunction("get_cyblack_precon_pattern_ks_args", "GET-CYBLACK-PRECON-PATTERN-KS-ARGS", 1, 0, false);
	declareFunction("set_cyblack_precon_pattern_ks_args", "SET-CYBLACK-PRECON-PATTERN-KS-ARGS", 2, 0, false);
	declareFunction("get_cyblack_precon_pattern_environment", "GET-CYBLACK-PRECON-PATTERN-ENVIRONMENT", 1, 0, false);
	declareFunction("set_cyblack_precon_pattern_environment", "SET-CYBLACK-PRECON-PATTERN-ENVIRONMENT", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_precon_pattern_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PRECON-PATTERN-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_precon_pattern_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PRECON-PATTERN-INSTANCE", 1, 0, false);
	declareFunction("cyblack_precon_pattern_p", "CYBLACK-PRECON-PATTERN-P", 1, 0, false);
	declareFunction("cyblack_precon_pattern_initialize_method", "CYBLACK-PRECON-PATTERN-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_precon_pattern_print_method", "CYBLACK-PRECON-PATTERN-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_precon_pattern_clone_method", "CYBLACK-PRECON-PATTERN-CLONE-METHOD", 1, 0, false);
	declareFunction("cyblack_precon_pattern_traverse_filling_datatype_bag_method", "CYBLACK-PRECON-PATTERN-TRAVERSE-FILLING-DATATYPE-BAG-METHOD", 2, 0, false);
	declareFunction("cyblack_precon_pattern_get_environment_method", "CYBLACK-PRECON-PATTERN-GET-ENVIRONMENT-METHOD", 1, 0, false);
	declareFunction("cyblack_precon_pattern_set_environment_method", "CYBLACK-PRECON-PATTERN-SET-ENVIRONMENT-METHOD", 2, 0, false);
	declareFunction("cyblack_precon_pattern_get_ks_args_method", "CYBLACK-PRECON-PATTERN-GET-KS-ARGS-METHOD", 1, 0, false);
	declareFunction("cyblack_precon_pattern_set_ks_args_method", "CYBLACK-PRECON-PATTERN-SET-KS-ARGS-METHOD", 2, 0, false);
	declareFunction("cyblack_precon_pattern_get_local_bindings_method", "CYBLACK-PRECON-PATTERN-GET-LOCAL-BINDINGS-METHOD", 1, 0, false);
	declareFunction("cyblack_precon_pattern_set_local_bindings_method", "CYBLACK-PRECON-PATTERN-SET-LOCAL-BINDINGS-METHOD", 2, 0, false);
	declareFunction("cyblack_precon_pattern_get_logical_form_method", "CYBLACK-PRECON-PATTERN-GET-LOGICAL-FORM-METHOD", 1, 0, false);
	declareFunction("cyblack_precon_pattern_set_logical_form_method", "CYBLACK-PRECON-PATTERN-SET-LOGICAL-FORM-METHOD", 2, 0, false);
	declareFunction("cyblack_precon_pattern_get_unique_bindings_method", "CYBLACK-PRECON-PATTERN-GET-UNIQUE-BINDINGS-METHOD", 1, 0, false);
	declareFunction("cyblack_precon_pattern_get_value_method", "CYBLACK-PRECON-PATTERN-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("get_cyblack_satisfaction_expression_logical_expression", "GET-CYBLACK-SATISFACTION-EXPRESSION-LOGICAL-EXPRESSION", 1, 0, false);
	declareFunction("set_cyblack_satisfaction_expression_logical_expression", "SET-CYBLACK-SATISFACTION-EXPRESSION-LOGICAL-EXPRESSION", 2, 0, false);
	declareFunction("get_cyblack_satisfaction_expression_local_bindings", "GET-CYBLACK-SATISFACTION-EXPRESSION-LOCAL-BINDINGS", 1, 0, false);
	declareFunction("set_cyblack_satisfaction_expression_local_bindings", "SET-CYBLACK-SATISFACTION-EXPRESSION-LOCAL-BINDINGS", 2, 0, false);
	declareFunction("get_cyblack_satisfaction_expression_environment", "GET-CYBLACK-SATISFACTION-EXPRESSION-ENVIRONMENT", 1, 0, false);
	declareFunction("set_cyblack_satisfaction_expression_environment", "SET-CYBLACK-SATISFACTION-EXPRESSION-ENVIRONMENT", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_satisfaction_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SATISFACTION-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_satisfaction_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SATISFACTION-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_satisfaction_expression_p", "CYBLACK-SATISFACTION-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_satisfaction_expression_initialize_method", "CYBLACK-SATISFACTION-EXPRESSION-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_satisfaction_expression_print_method", "CYBLACK-SATISFACTION-EXPRESSION-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_satisfaction_expression_traverse_filling_datatype_bag_method", "CYBLACK-SATISFACTION-EXPRESSION-TRAVERSE-FILLING-DATATYPE-BAG-METHOD", 2, 0, false);
	declareFunction("cyblack_satisfaction_expression_get_value_method", "CYBLACK-SATISFACTION-EXPRESSION-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("cyblack_satisfaction_expression_get_environment_method", "CYBLACK-SATISFACTION-EXPRESSION-GET-ENVIRONMENT-METHOD", 1, 0, false);
	declareFunction("cyblack_satisfaction_expression_set_environment_method", "CYBLACK-SATISFACTION-EXPRESSION-SET-ENVIRONMENT-METHOD", 2, 0, false);
	declareFunction("cyblack_satisfaction_expression_get_local_bindings_method", "CYBLACK-SATISFACTION-EXPRESSION-GET-LOCAL-BINDINGS-METHOD", 1, 0, false);
	declareFunction("cyblack_satisfaction_expression_set_local_bindings_method", "CYBLACK-SATISFACTION-EXPRESSION-SET-LOCAL-BINDINGS-METHOD", 2, 0, false);
	declareFunction("cyblack_satisfaction_expression_get_logical_expression_method", "CYBLACK-SATISFACTION-EXPRESSION-GET-LOGICAL-EXPRESSION-METHOD", 1, 0, false);
	declareFunction("cyblack_satisfaction_expression_set_logical_expression_method", "CYBLACK-SATISFACTION-EXPRESSION-SET-LOGICAL-EXPRESSION-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_simple_satisfaction_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SIMPLE-SATISFACTION-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_simple_satisfaction_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SIMPLE-SATISFACTION-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_simple_satisfaction_expression_p", "CYBLACK-SIMPLE-SATISFACTION-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_simple_satisfaction_expression_print_method", "CYBLACK-SIMPLE-SATISFACTION-EXPRESSION-PRINT-METHOD", 3, 0, false);
	declareFunction("get_cyblack_type_expression_base_type", "GET-CYBLACK-TYPE-EXPRESSION-BASE-TYPE", 1, 0, false);
	declareFunction("set_cyblack_type_expression_base_type", "SET-CYBLACK-TYPE-EXPRESSION-BASE-TYPE", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_type_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-TYPE-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_type_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-TYPE-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_type_expression_p", "CYBLACK-TYPE-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_type_expression_initialize_method", "CYBLACK-TYPE-EXPRESSION-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_type_expression_print_method", "CYBLACK-TYPE-EXPRESSION-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_type_expression_get_base_type_method", "CYBLACK-TYPE-EXPRESSION-GET-BASE-TYPE-METHOD", 1, 0, false);
	declareFunction("cyblack_type_expression_set_base_type_method", "CYBLACK-TYPE-EXPRESSION-SET-BASE-TYPE-METHOD", 2, 0, false);
	declareFunction("cyblack_type_expression_get_panel_method", "CYBLACK-TYPE-EXPRESSION-GET-PANEL-METHOD", 2, 1, false);
	declareFunction("cyblack_type_expression_get_typename_method", "CYBLACK-TYPE-EXPRESSION-GET-TYPENAME-METHOD", 1, 0, false);
	declareFunction("cyblack_type_expression_get_supertypes_method", "CYBLACK-TYPE-EXPRESSION-GET-SUPERTYPES-METHOD", 1, 0, false);
	declareFunction("cyblack_type_expression_set_supertypes_method", "CYBLACK-TYPE-EXPRESSION-SET-SUPERTYPES-METHOD", 2, 0, false);
	declareFunction("cyblack_type_expression_get_subtypes_method", "CYBLACK-TYPE-EXPRESSION-GET-SUBTYPES-METHOD", 1, 0, false);
	declareFunction("cyblack_type_expression_set_subtypes_method", "CYBLACK-TYPE-EXPRESSION-SET-SUBTYPES-METHOD", 2, 0, false);
	declareFunction("cyblack_type_expression_subtype_p_method", "CYBLACK-TYPE-EXPRESSION-SUBTYPE-P-METHOD", 2, 0, false);
	declareFunction("cyblack_type_expression_instance_of_p_method", "CYBLACK-TYPE-EXPRESSION-INSTANCE-OF-P-METHOD", 2, 0, false);
	declareFunction("cyblack_type_expression_set_panel_type_method", "CYBLACK-TYPE-EXPRESSION-SET-PANEL-TYPE-METHOD", 2, 0, false);
	declareFunction("cyblack_type_expression_get_posting_type_method", "CYBLACK-TYPE-EXPRESSION-GET-POSTING-TYPE-METHOD", 1, 0, false);
	declareFunction("cyblack_type_expression_set_posting_type_method", "CYBLACK-TYPE-EXPRESSION-SET-POSTING-TYPE-METHOD", 2, 0, false);
	declareFunction("cyblack_type_expression_create_panel_method", "CYBLACK-TYPE-EXPRESSION-CREATE-PANEL-METHOD", 2, 0, false);
	declareFunction("cyblack_type_expression_create_posting_method", "CYBLACK-TYPE-EXPRESSION-CREATE-POSTING-METHOD", 1, 0, false);
	declareFunction("cyblack_type_expression_get_value_method", "CYBLACK-TYPE-EXPRESSION-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("get_cyblack_subtype_expression_args", "GET-CYBLACK-SUBTYPE-EXPRESSION-ARGS", 1, 0, false);
	declareFunction("set_cyblack_subtype_expression_args", "SET-CYBLACK-SUBTYPE-EXPRESSION-ARGS", 2, 0, false);
	declareFunction("get_cyblack_subtype_expression_predicator_method", "GET-CYBLACK-SUBTYPE-EXPRESSION-PREDICATOR-METHOD", 1, 0, false);
	declareFunction("set_cyblack_subtype_expression_predicator_method", "SET-CYBLACK-SUBTYPE-EXPRESSION-PREDICATOR-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_subtype_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SUBTYPE-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_subtype_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SUBTYPE-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_subtype_expression_p", "CYBLACK-SUBTYPE-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_subtype_expression_initialize_method", "CYBLACK-SUBTYPE-EXPRESSION-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_subtype_expression_print_method", "CYBLACK-SUBTYPE-EXPRESSION-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_subtype_expression_print_args_method", "CYBLACK-SUBTYPE-EXPRESSION-PRINT-ARGS-METHOD", 2, 0, false);
	declareFunction("cyblack_subtype_expression_get_predicator_method_method", "CYBLACK-SUBTYPE-EXPRESSION-GET-PREDICATOR-METHOD-METHOD", 1, 0, false);
	declareFunction("cyblack_subtype_expression_set_predicator_method_method", "CYBLACK-SUBTYPE-EXPRESSION-SET-PREDICATOR-METHOD-METHOD", 2, 0, false);
	declareFunction("cyblack_subtype_expression_get_args_method", "CYBLACK-SUBTYPE-EXPRESSION-GET-ARGS-METHOD", 1, 0, false);
	declareFunction("cyblack_subtype_expression_set_args_method", "CYBLACK-SUBTYPE-EXPRESSION-SET-ARGS-METHOD", 2, 0, false);
	declareFunction("cyblack_subtype_expression_get_panel_method", "CYBLACK-SUBTYPE-EXPRESSION-GET-PANEL-METHOD", 2, 1, false);
	declareFunction("cyblack_subtype_expression_get_typename_method", "CYBLACK-SUBTYPE-EXPRESSION-GET-TYPENAME-METHOD", 1, 0, false);
	declareFunction("cyblack_subtype_expression_get_supertypes_method", "CYBLACK-SUBTYPE-EXPRESSION-GET-SUPERTYPES-METHOD", 1, 0, false);
	declareFunction("cyblack_subtype_expression_get_subtypes_method", "CYBLACK-SUBTYPE-EXPRESSION-GET-SUBTYPES-METHOD", 1, 0, false);
	declareFunction("cyblack_subtype_expression_subtype_p_method", "CYBLACK-SUBTYPE-EXPRESSION-SUBTYPE-P-METHOD", 2, 0, false);
	declareFunction("cyblack_subtype_expression_instance_of_p_method", "CYBLACK-SUBTYPE-EXPRESSION-INSTANCE-OF-P-METHOD", 2, 0, false);
	declareFunction("cyblack_subtype_expression_create_panel_method", "CYBLACK-SUBTYPE-EXPRESSION-CREATE-PANEL-METHOD", 2, 0, false);
	declareFunction("get_cyblack_panel_expression_blackboard", "GET-CYBLACK-PANEL-EXPRESSION-BLACKBOARD", 1, 0, false);
	declareFunction("set_cyblack_panel_expression_blackboard", "SET-CYBLACK-PANEL-EXPRESSION-BLACKBOARD", 2, 0, false);
	declareFunction("get_cyblack_panel_expression_type_expression", "GET-CYBLACK-PANEL-EXPRESSION-TYPE-EXPRESSION", 1, 0, false);
	declareFunction("set_cyblack_panel_expression_type_expression", "SET-CYBLACK-PANEL-EXPRESSION-TYPE-EXPRESSION", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_panel_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PANEL-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_panel_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PANEL-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_panel_expression_p", "CYBLACK-PANEL-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_panel_expression_initialize_method", "CYBLACK-PANEL-EXPRESSION-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_panel_expression_print_method", "CYBLACK-PANEL-EXPRESSION-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_panel_expression_get_type_expression_method", "CYBLACK-PANEL-EXPRESSION-GET-TYPE-EXPRESSION-METHOD", 1, 0, false);
	declareFunction("cyblack_panel_expression_set_type_expression_method", "CYBLACK-PANEL-EXPRESSION-SET-TYPE-EXPRESSION-METHOD", 2, 0, false);
	declareFunction("cyblack_panel_expression_get_blackboard_method", "CYBLACK-PANEL-EXPRESSION-GET-BLACKBOARD-METHOD", 1, 0, false);
	declareFunction("cyblack_panel_expression_get_value_method", "CYBLACK-PANEL-EXPRESSION-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("get_cyblack_get_expression_key_expression", "GET-CYBLACK-GET-EXPRESSION-KEY-EXPRESSION", 1, 0, false);
	declareFunction("set_cyblack_get_expression_key_expression", "SET-CYBLACK-GET-EXPRESSION-KEY-EXPRESSION", 2, 0, false);
	declareFunction("get_cyblack_get_expression_panel_expression", "GET-CYBLACK-GET-EXPRESSION-PANEL-EXPRESSION", 1, 0, false);
	declareFunction("set_cyblack_get_expression_panel_expression", "SET-CYBLACK-GET-EXPRESSION-PANEL-EXPRESSION", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_get_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-GET-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_get_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-GET-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_get_expression_p", "CYBLACK-GET-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_get_expression_initialize_method", "CYBLACK-GET-EXPRESSION-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_get_expression_print_method", "CYBLACK-GET-EXPRESSION-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_get_expression_get_panel_expression_method", "CYBLACK-GET-EXPRESSION-GET-PANEL-EXPRESSION-METHOD", 1, 0, false);
	declareFunction("cyblack_get_expression_set_panel_expression_method", "CYBLACK-GET-EXPRESSION-SET-PANEL-EXPRESSION-METHOD", 2, 0, false);
	declareFunction("cyblack_get_expression_get_key_expression_method", "CYBLACK-GET-EXPRESSION-GET-KEY-EXPRESSION-METHOD", 1, 0, false);
	declareFunction("cyblack_get_expression_set_key_expression_method", "CYBLACK-GET-EXPRESSION-SET-KEY-EXPRESSION-METHOD", 2, 0, false);
	declareFunction("cyblack_get_expression_get_value_method", "CYBLACK-GET-EXPRESSION-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("subloop_reserved_initialize_cyblack_basic_logical_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-BASIC-LOGICAL-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_basic_logical_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-BASIC-LOGICAL-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_basic_logical_expression_p", "CYBLACK-BASIC-LOGICAL-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_basic_logical_expression_get_value_method", "CYBLACK-BASIC-LOGICAL-EXPRESSION-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("get_cyblack_existential_robot_accumulated_state", "GET-CYBLACK-EXISTENTIAL-ROBOT-ACCUMULATED-STATE", 1, 0, false);
	declareFunction("set_cyblack_existential_robot_accumulated_state", "SET-CYBLACK-EXISTENTIAL-ROBOT-ACCUMULATED-STATE", 2, 0, false);
	declareFunction("get_cyblack_existential_robot_last_evaluation_result", "GET-CYBLACK-EXISTENTIAL-ROBOT-LAST-EVALUATION-RESULT", 1, 0, false);
	declareFunction("set_cyblack_existential_robot_last_evaluation_result", "SET-CYBLACK-EXISTENTIAL-ROBOT-LAST-EVALUATION-RESULT", 2, 0, false);
	declareFunction("get_cyblack_existential_robot_binding", "GET-CYBLACK-EXISTENTIAL-ROBOT-BINDING", 1, 0, false);
	declareFunction("set_cyblack_existential_robot_binding", "SET-CYBLACK-EXISTENTIAL-ROBOT-BINDING", 2, 0, false);
	declareFunction("get_cyblack_existential_robot_logical_expression", "GET-CYBLACK-EXISTENTIAL-ROBOT-LOGICAL-EXPRESSION", 1, 0, false);
	declareFunction("set_cyblack_existential_robot_logical_expression", "SET-CYBLACK-EXISTENTIAL-ROBOT-LOGICAL-EXPRESSION", 2, 0, false);
	declareFunction("get_cyblack_existential_robot_environment", "GET-CYBLACK-EXISTENTIAL-ROBOT-ENVIRONMENT", 1, 0, false);
	declareFunction("set_cyblack_existential_robot_environment", "SET-CYBLACK-EXISTENTIAL-ROBOT-ENVIRONMENT", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_existential_robot_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EXISTENTIAL-ROBOT-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_existential_robot_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EXISTENTIAL-ROBOT-INSTANCE", 1, 0, false);
	declareFunction("cyblack_existential_robot_p", "CYBLACK-EXISTENTIAL-ROBOT-P", 1, 0, false);
	declareFunction("cyblack_existential_robot_initialize_method", "CYBLACK-EXISTENTIAL-ROBOT-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_existential_robot_set_initial_state_method", "CYBLACK-EXISTENTIAL-ROBOT-SET-INITIAL-STATE-METHOD", 2, 1, false);
	declareFunction("cyblack_existential_robot_initialize_accumulated_state_method", "CYBLACK-EXISTENTIAL-ROBOT-INITIALIZE-ACCUMULATED-STATE-METHOD", 1, 0, false);
	declareFunction("cyblack_existential_robot_visit_method", "CYBLACK-EXISTENTIAL-ROBOT-VISIT-METHOD", 2, 0, false);
	declareFunction("cyblack_existential_robot_evaluate_visit_method", "CYBLACK-EXISTENTIAL-ROBOT-EVALUATE-VISIT-METHOD", 1, 0, false);
	declareFunction("cyblack_existential_robot_get_final_state_method", "CYBLACK-EXISTENTIAL-ROBOT-GET-FINAL-STATE-METHOD", 1, 0, false);
	declareFunction("cyblack_existential_robot_get_logical_expression_method", "CYBLACK-EXISTENTIAL-ROBOT-GET-LOGICAL-EXPRESSION-METHOD", 1, 0, false);
	declareFunction("cyblack_existential_robot_set_logical_expression_method", "CYBLACK-EXISTENTIAL-ROBOT-SET-LOGICAL-EXPRESSION-METHOD", 2, 0, false);
	declareFunction("cyblack_existential_robot_get_binding_method", "CYBLACK-EXISTENTIAL-ROBOT-GET-BINDING-METHOD", 1, 0, false);
	declareFunction("cyblack_existential_robot_set_binding_method", "CYBLACK-EXISTENTIAL-ROBOT-SET-BINDING-METHOD", 2, 0, false);
	declareFunction("get_cyblack_present_expression_variable_reference", "GET-CYBLACK-PRESENT-EXPRESSION-VARIABLE-REFERENCE", 1, 0, false);
	declareFunction("set_cyblack_present_expression_variable_reference", "SET-CYBLACK-PRESENT-EXPRESSION-VARIABLE-REFERENCE", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_present_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PRESENT-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_present_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PRESENT-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_present_expression_p", "CYBLACK-PRESENT-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_present_expression_initialize_method", "CYBLACK-PRESENT-EXPRESSION-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_present_expression_print_method", "CYBLACK-PRESENT-EXPRESSION-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_present_expression_get_variable_reference_method", "CYBLACK-PRESENT-EXPRESSION-GET-VARIABLE-REFERENCE-METHOD", 1, 0, false);
	declareFunction("cyblack_present_expression_set_variable_reference_method", "CYBLACK-PRESENT-EXPRESSION-SET-VARIABLE-REFERENCE-METHOD", 2, 0, false);
	declareFunction("cyblack_present_expression_get_value_method", "CYBLACK-PRESENT-EXPRESSION-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("get_cyblack_empty_p_expression_datatype", "GET-CYBLACK-EMPTY-P-EXPRESSION-DATATYPE", 1, 0, false);
	declareFunction("set_cyblack_empty_p_expression_datatype", "SET-CYBLACK-EMPTY-P-EXPRESSION-DATATYPE", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_empty_p_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EMPTY-P-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_empty_p_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EMPTY-P-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_empty_p_expression_p", "CYBLACK-EMPTY-P-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_empty_p_expression_initialize_method", "CYBLACK-EMPTY-P-EXPRESSION-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_empty_p_expression_print_method", "CYBLACK-EMPTY-P-EXPRESSION-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_empty_p_expression_get_datatype_method", "CYBLACK-EMPTY-P-EXPRESSION-GET-DATATYPE-METHOD", 1, 0, false);
	declareFunction("cyblack_empty_p_expression_set_datatype_method", "CYBLACK-EMPTY-P-EXPRESSION-SET-DATATYPE-METHOD", 2, 0, false);
	declareFunction("cyblack_empty_p_expression_get_value_method", "CYBLACK-EMPTY-P-EXPRESSION-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("get_cyblack_existential_expression_logical_expression", "GET-CYBLACK-EXISTENTIAL-EXPRESSION-LOGICAL-EXPRESSION", 1, 0, false);
	declareFunction("set_cyblack_existential_expression_logical_expression", "SET-CYBLACK-EXISTENTIAL-EXPRESSION-LOGICAL-EXPRESSION", 2, 0, false);
	declareFunction("get_cyblack_existential_expression_binding", "GET-CYBLACK-EXISTENTIAL-EXPRESSION-BINDING", 1, 0, false);
	declareFunction("set_cyblack_existential_expression_binding", "SET-CYBLACK-EXISTENTIAL-EXPRESSION-BINDING", 2, 0, false);
	declareFunction("get_cyblack_existential_expression_closure", "GET-CYBLACK-EXISTENTIAL-EXPRESSION-CLOSURE", 1, 0, false);
	declareFunction("set_cyblack_existential_expression_closure", "SET-CYBLACK-EXISTENTIAL-EXPRESSION-CLOSURE", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_existential_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EXISTENTIAL-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_existential_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EXISTENTIAL-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_existential_expression_p", "CYBLACK-EXISTENTIAL-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_existential_expression_initialize_method", "CYBLACK-EXISTENTIAL-EXPRESSION-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_existential_expression_print_method", "CYBLACK-EXISTENTIAL-EXPRESSION-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_existential_expression_print_functor_method", "CYBLACK-EXISTENTIAL-EXPRESSION-PRINT-FUNCTOR-METHOD", 2, 0, false);
	declareFunction("cyblack_existential_expression_get_closure_method", "CYBLACK-EXISTENTIAL-EXPRESSION-GET-CLOSURE-METHOD", 1, 0, false);
	declareFunction("cyblack_existential_expression_set_closure_method", "CYBLACK-EXISTENTIAL-EXPRESSION-SET-CLOSURE-METHOD", 2, 0, false);
	declareFunction("cyblack_existential_expression_get_binding_method", "CYBLACK-EXISTENTIAL-EXPRESSION-GET-BINDING-METHOD", 1, 0, false);
	declareFunction("cyblack_existential_expression_set_binding_method", "CYBLACK-EXISTENTIAL-EXPRESSION-SET-BINDING-METHOD", 2, 0, false);
	declareFunction("cyblack_existential_expression_get_logical_expression_method", "CYBLACK-EXISTENTIAL-EXPRESSION-GET-LOGICAL-EXPRESSION-METHOD", 1, 0, false);
	declareFunction("cyblack_existential_expression_set_logical_expression_method", "CYBLACK-EXISTENTIAL-EXPRESSION-SET-LOGICAL-EXPRESSION-METHOD", 2, 0, false);
	declareFunction("cyblack_existential_expression_get_value_method", "CYBLACK-EXISTENTIAL-EXPRESSION-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("cyblack_existential_expression_get_value_internal_method", "CYBLACK-EXISTENTIAL-EXPRESSION-GET-VALUE-INTERNAL-METHOD", 2, 0, false);
	declareFunction("cyblack_existential_expression_create_posting_visitor_method", "CYBLACK-EXISTENTIAL-EXPRESSION-CREATE-POSTING-VISITOR-METHOD", 1, 0, false);
	declareFunction("cyblack_existential_expression_new_posting_visitor_method", "CYBLACK-EXISTENTIAL-EXPRESSION-NEW-POSTING-VISITOR-METHOD", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_forall_robot_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-FORALL-ROBOT-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_forall_robot_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-FORALL-ROBOT-INSTANCE", 1, 0, false);
	declareFunction("cyblack_forall_robot_p", "CYBLACK-FORALL-ROBOT-P", 1, 0, false);
	declareFunction("cyblack_forall_robot_initialize_method", "CYBLACK-FORALL-ROBOT-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_forall_robot_initialize_accumulated_state_method", "CYBLACK-FORALL-ROBOT-INITIALIZE-ACCUMULATED-STATE-METHOD", 1, 0, false);
	declareFunction("cyblack_forall_robot_evaluate_visit_method", "CYBLACK-FORALL-ROBOT-EVALUATE-VISIT-METHOD", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_forall_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-FORALL-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_forall_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-FORALL-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_forall_expression_p", "CYBLACK-FORALL-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_forall_expression_print_functor_method", "CYBLACK-FORALL-EXPRESSION-PRINT-FUNCTOR-METHOD", 2, 0, false);
	declareFunction("cyblack_forall_expression_new_posting_visitor_method", "CYBLACK-FORALL-EXPRESSION-NEW-POSTING-VISITOR-METHOD", 1, 0, false);
	declareFunction("get_cyblack_nested_logical_expression_logical_form", "GET-CYBLACK-NESTED-LOGICAL-EXPRESSION-LOGICAL-FORM", 1, 0, false);
	declareFunction("set_cyblack_nested_logical_expression_logical_form", "SET-CYBLACK-NESTED-LOGICAL-EXPRESSION-LOGICAL-FORM", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_nested_logical_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-NESTED-LOGICAL-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_nested_logical_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-NESTED-LOGICAL-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_nested_logical_expression_p", "CYBLACK-NESTED-LOGICAL-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_nested_logical_expression_initialize_method", "CYBLACK-NESTED-LOGICAL-EXPRESSION-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_nested_logical_expression_print_method", "CYBLACK-NESTED-LOGICAL-EXPRESSION-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_nested_logical_expression_get_logical_form_method", "CYBLACK-NESTED-LOGICAL-EXPRESSION-GET-LOGICAL-FORM-METHOD", 1, 0, false);
	declareFunction("cyblack_nested_logical_expression_set_logical_form_method", "CYBLACK-NESTED-LOGICAL-EXPRESSION-SET-LOGICAL-FORM-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_compound_logical_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-COMPOUND-LOGICAL-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_compound_logical_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-COMPOUND-LOGICAL-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_compound_logical_expression_p", "CYBLACK-COMPOUND-LOGICAL-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_compound_logical_expression_print_operator_method", "CYBLACK-COMPOUND-LOGICAL-EXPRESSION-PRINT-OPERATOR-METHOD", 2, 0, false);
	declareFunction("cyblack_compound_logical_expression_get_arity_method", "CYBLACK-COMPOUND-LOGICAL-EXPRESSION-GET-ARITY-METHOD", 1, 0, false);
	declareFunction("cyblack_compound_logical_expression_get_arg1_method", "CYBLACK-COMPOUND-LOGICAL-EXPRESSION-GET-ARG1-METHOD", 1, 0, false);
	declareFunction("cyblack_compound_logical_expression_set_arg1_method", "CYBLACK-COMPOUND-LOGICAL-EXPRESSION-SET-ARG1-METHOD", 2, 0, false);
	declareFunction("get_cyblack_unary_logical_expression_arg1", "GET-CYBLACK-UNARY-LOGICAL-EXPRESSION-ARG1", 1, 0, false);
	declareFunction("set_cyblack_unary_logical_expression_arg1", "SET-CYBLACK-UNARY-LOGICAL-EXPRESSION-ARG1", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_unary_logical_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-UNARY-LOGICAL-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_unary_logical_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-UNARY-LOGICAL-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_unary_logical_expression_p", "CYBLACK-UNARY-LOGICAL-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_unary_logical_expression_initialize_method", "CYBLACK-UNARY-LOGICAL-EXPRESSION-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_unary_logical_expression_print_method", "CYBLACK-UNARY-LOGICAL-EXPRESSION-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_unary_logical_expression_print_operator_method", "CYBLACK-UNARY-LOGICAL-EXPRESSION-PRINT-OPERATOR-METHOD", 2, 0, false);
	declareFunction("cyblack_unary_logical_expression_get_arity_method", "CYBLACK-UNARY-LOGICAL-EXPRESSION-GET-ARITY-METHOD", 1, 0, false);
	declareFunction("cyblack_unary_logical_expression_get_arg1_method", "CYBLACK-UNARY-LOGICAL-EXPRESSION-GET-ARG1-METHOD", 1, 0, false);
	declareFunction("cyblack_unary_logical_expression_set_arg1_method", "CYBLACK-UNARY-LOGICAL-EXPRESSION-SET-ARG1-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_not_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-NOT-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_not_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-NOT-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_not_expression_p", "CYBLACK-NOT-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_not_expression_initialize_method", "CYBLACK-NOT-EXPRESSION-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_not_expression_print_operator_method", "CYBLACK-NOT-EXPRESSION-PRINT-OPERATOR-METHOD", 2, 0, false);
	declareFunction("cyblack_not_expression_get_value_method", "CYBLACK-NOT-EXPRESSION-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("get_cyblack_nary_logical_expression_arglist", "GET-CYBLACK-NARY-LOGICAL-EXPRESSION-ARGLIST", 1, 0, false);
	declareFunction("set_cyblack_nary_logical_expression_arglist", "SET-CYBLACK-NARY-LOGICAL-EXPRESSION-ARGLIST", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_nary_logical_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-NARY-LOGICAL-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_nary_logical_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-NARY-LOGICAL-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_nary_logical_expression_p", "CYBLACK-NARY-LOGICAL-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_nary_logical_expression_initialize_method", "CYBLACK-NARY-LOGICAL-EXPRESSION-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_nary_logical_expression_print_method", "CYBLACK-NARY-LOGICAL-EXPRESSION-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_nary_logical_expression_print_operator_method", "CYBLACK-NARY-LOGICAL-EXPRESSION-PRINT-OPERATOR-METHOD", 2, 0, false);
	declareFunction("cyblack_nary_logical_expression_get_arity_method", "CYBLACK-NARY-LOGICAL-EXPRESSION-GET-ARITY-METHOD", 1, 0, false);
	declareFunction("cyblack_nary_logical_expression_get_arg1_method", "CYBLACK-NARY-LOGICAL-EXPRESSION-GET-ARG1-METHOD", 1, 0, false);
	declareFunction("cyblack_nary_logical_expression_set_arg1_method", "CYBLACK-NARY-LOGICAL-EXPRESSION-SET-ARG1-METHOD", 2, 0, false);
	declareFunction("cyblack_nary_logical_expression_get_arg2_method", "CYBLACK-NARY-LOGICAL-EXPRESSION-GET-ARG2-METHOD", 1, 0, false);
	declareFunction("cyblack_nary_logical_expression_set_arg2_method", "CYBLACK-NARY-LOGICAL-EXPRESSION-SET-ARG2-METHOD", 2, 0, false);
	declareFunction("cyblack_nary_logical_expression_get_arg3_method", "CYBLACK-NARY-LOGICAL-EXPRESSION-GET-ARG3-METHOD", 1, 0, false);
	declareFunction("cyblack_nary_logical_expression_set_arg3_method", "CYBLACK-NARY-LOGICAL-EXPRESSION-SET-ARG3-METHOD", 2, 0, false);
	declareFunction("cyblack_nary_logical_expression_check_n_method", "CYBLACK-NARY-LOGICAL-EXPRESSION-CHECK-N-METHOD", 2, 0, false);
	declareFunction("cyblack_nary_logical_expression_get_argn_method", "CYBLACK-NARY-LOGICAL-EXPRESSION-GET-ARGN-METHOD", 2, 0, false);
	declareFunction("cyblack_nary_logical_expression_set_argn_method", "CYBLACK-NARY-LOGICAL-EXPRESSION-SET-ARGN-METHOD", 3, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_and_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AND-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_and_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AND-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_and_expression_p", "CYBLACK-AND-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_and_expression_initialize_method", "CYBLACK-AND-EXPRESSION-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_and_expression_print_operator_method", "CYBLACK-AND-EXPRESSION-PRINT-OPERATOR-METHOD", 2, 0, false);
	declareFunction("cyblack_and_expression_get_value_method", "CYBLACK-AND-EXPRESSION-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("subloop_reserved_initialize_cyblack_or_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-OR-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_or_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-OR-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_or_expression_p", "CYBLACK-OR-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_or_expression_initialize_method", "CYBLACK-OR-EXPRESSION-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_or_expression_print_operator_method", "CYBLACK-OR-EXPRESSION-PRINT-OPERATOR-METHOD", 2, 0, false);
	declareFunction("cyblack_or_expression_get_value_method", "CYBLACK-OR-EXPRESSION-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("cyblack_typelist_p", "CYBLACK-TYPELIST-P", 1, 0, false);
	declareFunction("get_cyblack_predicate_argtype_list", "GET-CYBLACK-PREDICATE-ARGTYPE-LIST", 1, 0, false);
	declareFunction("set_cyblack_predicate_argtype_list", "SET-CYBLACK-PREDICATE-ARGTYPE-LIST", 2, 0, false);
	declareFunction("get_cyblack_predicate_arglist", "GET-CYBLACK-PREDICATE-ARGLIST", 1, 0, false);
	declareFunction("set_cyblack_predicate_arglist", "SET-CYBLACK-PREDICATE-ARGLIST", 2, 0, false);
	declareFunction("get_cyblack_predicate_arity", "GET-CYBLACK-PREDICATE-ARITY", 1, 0, false);
	declareFunction("set_cyblack_predicate_arity", "SET-CYBLACK-PREDICATE-ARITY", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_predicate_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PREDICATE-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_predicate_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PREDICATE-INSTANCE", 1, 0, false);
	declareFunction("cyblack_predicate_p", "CYBLACK-PREDICATE-P", 1, 0, false);
	declareFunction("cyblack_predicate_check_arg_p_method", "CYBLACK-PREDICATE-CHECK-ARG-P-METHOD", 3, 0, false);
	declareFunction("cyblack_predicate_initialize_method", "CYBLACK-PREDICATE-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_predicate_declare_signature_method", "CYBLACK-PREDICATE-DECLARE-SIGNATURE-METHOD", 2, 0, false);
	declareFunction("cyblack_predicate_print_method", "CYBLACK-PREDICATE-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_predicate_print_operator_method", "CYBLACK-PREDICATE-PRINT-OPERATOR-METHOD", 2, 0, false);
	declareFunction("cyblack_predicate_print_arglist_method", "CYBLACK-PREDICATE-PRINT-ARGLIST-METHOD", 2, 0, false);
	declareFunction("cyblack_predicate_get_arity_method", "CYBLACK-PREDICATE-GET-ARITY-METHOD", 1, 0, false);
	declareFunction("cyblack_predicate_get_argn_type_method", "CYBLACK-PREDICATE-GET-ARGN-TYPE-METHOD", 2, 0, false);
	declareFunction("cyblack_predicate_set_argn_type_method", "CYBLACK-PREDICATE-SET-ARGN-TYPE-METHOD", 3, 0, false);
	declareFunction("cyblack_predicate_get_argn_method", "CYBLACK-PREDICATE-GET-ARGN-METHOD", 2, 0, false);
	declareFunction("cyblack_predicate_set_argn_method", "CYBLACK-PREDICATE-SET-ARGN-METHOD", 3, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_binary_predicate_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-BINARY-PREDICATE-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_binary_predicate_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-BINARY-PREDICATE-INSTANCE", 1, 0, false);
	declareFunction("cyblack_binary_predicate_p", "CYBLACK-BINARY-PREDICATE-P", 1, 0, false);
	declareFunction("cyblack_binary_predicate_initialize_method", "CYBLACK-BINARY-PREDICATE-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_binary_predicate_declare_signature_method", "CYBLACK-BINARY-PREDICATE-DECLARE-SIGNATURE-METHOD", 2, 0, false);
	declareFunction("cyblack_binary_predicate_print_operator_method", "CYBLACK-BINARY-PREDICATE-PRINT-OPERATOR-METHOD", 2, 0, false);
	declareFunction("cyblack_binary_predicate_get_arity_method", "CYBLACK-BINARY-PREDICATE-GET-ARITY-METHOD", 1, 0, false);
	declareFunction("cyblack_binary_predicate_set_argn_type_method", "CYBLACK-BINARY-PREDICATE-SET-ARGN-TYPE-METHOD", 3, 0, false);
	declareFunction("cyblack_binary_predicate_set_argn_method", "CYBLACK-BINARY-PREDICATE-SET-ARGN-METHOD", 3, 0, false);
	declareFunction("cyblack_binary_predicate_get_arg1_method", "CYBLACK-BINARY-PREDICATE-GET-ARG1-METHOD", 1, 0, false);
	declareFunction("cyblack_binary_predicate_set_arg1_method", "CYBLACK-BINARY-PREDICATE-SET-ARG1-METHOD", 2, 0, false);
	declareFunction("cyblack_binary_predicate_get_arg2_method", "CYBLACK-BINARY-PREDICATE-GET-ARG2-METHOD", 1, 0, false);
	declareFunction("cyblack_binary_predicate_set_arg2_method", "CYBLACK-BINARY-PREDICATE-SET-ARG2-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_binary_predicate_over_value_expressions_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-BINARY-PREDICATE-OVER-VALUE-EXPRESSIONS-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_binary_predicate_over_value_expressions_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-BINARY-PREDICATE-OVER-VALUE-EXPRESSIONS-INSTANCE", 1, 0, false);
	declareFunction("cyblack_binary_predicate_over_value_expressions_p", "CYBLACK-BINARY-PREDICATE-OVER-VALUE-EXPRESSIONS-P", 1, 0, false);
	declareFunction("cyblack_binary_predicate_over_value_expressions_initialize_method", "CYBLACK-BINARY-PREDICATE-OVER-VALUE-EXPRESSIONS-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_eq_predicate_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EQ-PREDICATE-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_eq_predicate_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EQ-PREDICATE-INSTANCE", 1, 0, false);
	declareFunction("cyblack_eq_predicate_p", "CYBLACK-EQ-PREDICATE-P", 1, 0, false);
	declareFunction("cyblack_eq_predicate_initialize_method", "CYBLACK-EQ-PREDICATE-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_eq_predicate_print_operator_method", "CYBLACK-EQ-PREDICATE-PRINT-OPERATOR-METHOD", 2, 0, false);
	declareFunction("cyblack_eq_predicate_get_value_method", "CYBLACK-EQ-PREDICATE-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("subloop_reserved_initialize_cyblack_equal_predicate_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EQUAL-PREDICATE-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_equal_predicate_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EQUAL-PREDICATE-INSTANCE", 1, 0, false);
	declareFunction("cyblack_equal_predicate_p", "CYBLACK-EQUAL-PREDICATE-P", 1, 0, false);
	declareFunction("cyblack_equal_predicate_initialize_method", "CYBLACK-EQUAL-PREDICATE-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_equal_predicate_print_operator_method", "CYBLACK-EQUAL-PREDICATE-PRINT-OPERATOR-METHOD", 2, 0, false);
	declareFunction("cyblack_equal", "CYBLACK-EQUAL", 2, 0, false);
	declareFunction("cyblack_equal_predicate_get_value_method", "CYBLACK-EQUAL-PREDICATE-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("subloop_reserved_initialize_cyblack_assoc_equal_predicate_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ASSOC-EQUAL-PREDICATE-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_assoc_equal_predicate_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ASSOC-EQUAL-PREDICATE-INSTANCE", 1, 0, false);
	declareFunction("cyblack_assoc_equal_predicate_p", "CYBLACK-ASSOC-EQUAL-PREDICATE-P", 1, 0, false);
	declareFunction("cyblack_assoc_equal_predicate_initialize_method", "CYBLACK-ASSOC-EQUAL-PREDICATE-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_assoc_equal_predicate_print_operator_method", "CYBLACK-ASSOC-EQUAL-PREDICATE-PRINT-OPERATOR-METHOD", 2, 0, false);
	declareFunction("cyblack_assoc_equal_predicate_get_value_method", "CYBLACK-ASSOC-EQUAL-PREDICATE-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("subloop_reserved_initialize_cyblack_le_predicate_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-LE-PREDICATE-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_le_predicate_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-LE-PREDICATE-INSTANCE", 1, 0, false);
	declareFunction("cyblack_le_predicate_p", "CYBLACK-LE-PREDICATE-P", 1, 0, false);
	declareFunction("cyblack_le_predicate_initialize_method", "CYBLACK-LE-PREDICATE-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_le_predicate_print_operator_method", "CYBLACK-LE-PREDICATE-PRINT-OPERATOR-METHOD", 2, 0, false);
	declareFunction("cyblack_le", "CYBLACK-LE", 2, 0, false);
	declareFunction("cyblack_le_predicate_get_value_method", "CYBLACK-LE-PREDICATE-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("subloop_reserved_initialize_cyblack_lt_predicate_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-LT-PREDICATE-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_lt_predicate_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-LT-PREDICATE-INSTANCE", 1, 0, false);
	declareFunction("cyblack_lt_predicate_p", "CYBLACK-LT-PREDICATE-P", 1, 0, false);
	declareFunction("cyblack_lt_predicate_initialize_method", "CYBLACK-LT-PREDICATE-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_lt_predicate_print_operator_method", "CYBLACK-LT-PREDICATE-PRINT-OPERATOR-METHOD", 2, 0, false);
	declareFunction("cyblack_lt", "CYBLACK-LT", 2, 0, false);
	declareFunction("cyblack_lt_predicate_get_value_method", "CYBLACK-LT-PREDICATE-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("subloop_reserved_initialize_cyblack_ge_predicate_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-GE-PREDICATE-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_ge_predicate_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-GE-PREDICATE-INSTANCE", 1, 0, false);
	declareFunction("cyblack_ge_predicate_p", "CYBLACK-GE-PREDICATE-P", 1, 0, false);
	declareFunction("cyblack_ge_predicate_initialize_method", "CYBLACK-GE-PREDICATE-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_ge_predicate_print_operator_method", "CYBLACK-GE-PREDICATE-PRINT-OPERATOR-METHOD", 2, 0, false);
	declareFunction("cyblack_ge", "CYBLACK-GE", 2, 0, false);
	declareFunction("cyblack_ge_predicate_get_value_method", "CYBLACK-GE-PREDICATE-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("subloop_reserved_initialize_cyblack_gt_predicate_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-GT-PREDICATE-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_gt_predicate_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-GT-PREDICATE-INSTANCE", 1, 0, false);
	declareFunction("cyblack_gt_predicate_p", "CYBLACK-GT-PREDICATE-P", 1, 0, false);
	declareFunction("cyblack_gt_predicate_initialize_method", "CYBLACK-GT-PREDICATE-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_gt_predicate_print_operator_method", "CYBLACK-GT-PREDICATE-PRINT-OPERATOR-METHOD", 2, 0, false);
	declareFunction("cyblack_gt", "CYBLACK-GT", 2, 0, false);
	declareFunction("cyblack_gt_predicate_get_value_method", "CYBLACK-GT-PREDICATE-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("get_cyblack_posting_reference_variable", "GET-CYBLACK-POSTING-REFERENCE-VARIABLE", 1, 0, false);
	declareFunction("set_cyblack_posting_reference_variable", "SET-CYBLACK-POSTING-REFERENCE-VARIABLE", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_posting_reference_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-POSTING-REFERENCE-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_posting_reference_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-POSTING-REFERENCE-INSTANCE", 1, 0, false);
	declareFunction("cyblack_posting_reference_p", "CYBLACK-POSTING-REFERENCE-P", 1, 0, false);
	declareFunction("cyblack_posting_reference_initialize_method", "CYBLACK-POSTING-REFERENCE-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_posting_reference_print_method", "CYBLACK-POSTING-REFERENCE-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_posting_reference_get_variable_method", "CYBLACK-POSTING-REFERENCE-GET-VARIABLE-METHOD", 1, 0, false);
	declareFunction("cyblack_posting_reference_set_variable_method", "CYBLACK-POSTING-REFERENCE-SET-VARIABLE-METHOD", 2, 0, false);
	declareFunction("cyblack_posting_reference_get_value_method", "CYBLACK-POSTING-REFERENCE-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("get_cyblack_posting_operation_expression_posting_expression", "GET-CYBLACK-POSTING-OPERATION-EXPRESSION-POSTING-EXPRESSION", 1, 0, false);
	declareFunction("set_cyblack_posting_operation_expression_posting_expression", "SET-CYBLACK-POSTING-OPERATION-EXPRESSION-POSTING-EXPRESSION", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_posting_operation_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-POSTING-OPERATION-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_posting_operation_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-POSTING-OPERATION-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_posting_operation_expression_p", "CYBLACK-POSTING-OPERATION-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_posting_operation_expression_initialize_method", "CYBLACK-POSTING-OPERATION-EXPRESSION-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_posting_operation_expression_print_method", "CYBLACK-POSTING-OPERATION-EXPRESSION-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_posting_operation_expression_get_posting_expression_method", "CYBLACK-POSTING-OPERATION-EXPRESSION-GET-POSTING-EXPRESSION-METHOD", 1, 0, false);
	declareFunction("cyblack_posting_operation_expression_set_posting_expression_method", "CYBLACK-POSTING-OPERATION-EXPRESSION-SET-POSTING-EXPRESSION-METHOD", 2, 0, false);
	declareFunction("cyblack_posting_operation_expression_get_value_method", "CYBLACK-POSTING-OPERATION-EXPRESSION-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("subloop_reserved_initialize_cyblack_type_of_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-TYPE-OF-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_type_of_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-TYPE-OF-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_type_of_expression_p", "CYBLACK-TYPE-OF-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_type_of_expression_initialize_method", "CYBLACK-TYPE-OF-EXPRESSION-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_type_of_expression_print_method", "CYBLACK-TYPE-OF-EXPRESSION-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_type_of_expression_get_value_method", "CYBLACK-TYPE-OF-EXPRESSION-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("get_cyblack_call_method_expression_actual_args", "GET-CYBLACK-CALL-METHOD-EXPRESSION-ACTUAL-ARGS", 1, 0, false);
	declareFunction("set_cyblack_call_method_expression_actual_args", "SET-CYBLACK-CALL-METHOD-EXPRESSION-ACTUAL-ARGS", 2, 0, false);
	declareFunction("get_cyblack_call_method_expression_method_name_literal", "GET-CYBLACK-CALL-METHOD-EXPRESSION-METHOD-NAME-LITERAL", 1, 0, false);
	declareFunction("set_cyblack_call_method_expression_method_name_literal", "SET-CYBLACK-CALL-METHOD-EXPRESSION-METHOD-NAME-LITERAL", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_call_method_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-CALL-METHOD-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_call_method_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-CALL-METHOD-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_call_method_expression_p", "CYBLACK-CALL-METHOD-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_call_method_expression_initialize_method", "CYBLACK-CALL-METHOD-EXPRESSION-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_call_method_expression_print_method", "CYBLACK-CALL-METHOD-EXPRESSION-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_call_method_expression_get_method_name_literal_method", "CYBLACK-CALL-METHOD-EXPRESSION-GET-METHOD-NAME-LITERAL-METHOD", 1, 0, false);
	declareFunction("cyblack_call_method_expression_set_method_name_literal_method", "CYBLACK-CALL-METHOD-EXPRESSION-SET-METHOD-NAME-LITERAL-METHOD", 2, 0, false);
	declareFunction("cyblack_call_method_expression_get_actual_args_method", "CYBLACK-CALL-METHOD-EXPRESSION-GET-ACTUAL-ARGS-METHOD", 1, 0, false);
	declareFunction("cyblack_call_method_expression_set_actual_args_method", "CYBLACK-CALL-METHOD-EXPRESSION-SET-ACTUAL-ARGS-METHOD", 2, 0, false);
	declareFunction("cyblack_call_method_expression_evaluated_args_method", "CYBLACK-CALL-METHOD-EXPRESSION-EVALUATED-ARGS-METHOD", 2, 0, false);
	declareFunction("cyblack_call_method_expression_get_value_method", "CYBLACK-CALL-METHOD-EXPRESSION-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("get_cyblack_slot_access_slot_name_literal", "GET-CYBLACK-SLOT-ACCESS-SLOT-NAME-LITERAL", 1, 0, false);
	declareFunction("set_cyblack_slot_access_slot_name_literal", "SET-CYBLACK-SLOT-ACCESS-SLOT-NAME-LITERAL", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_slot_access_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SLOT-ACCESS-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_slot_access_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SLOT-ACCESS-INSTANCE", 1, 0, false);
	declareFunction("cyblack_slot_access_p", "CYBLACK-SLOT-ACCESS-P", 1, 0, false);
	declareFunction("cyblack_slot_access_initialize_method", "CYBLACK-SLOT-ACCESS-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_slot_access_print_method", "CYBLACK-SLOT-ACCESS-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_slot_access_get_slot_name_method", "CYBLACK-SLOT-ACCESS-GET-SLOT-NAME-METHOD", 1, 0, false);
	declareFunction("cyblack_slot_access_set_slot_name_method", "CYBLACK-SLOT-ACCESS-SET-SLOT-NAME-METHOD", 2, 0, false);
	declareFunction("cyblack_slot_access_get_value_method", "CYBLACK-SLOT-ACCESS-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("get_cyblack_arithmetic_expression_arity", "GET-CYBLACK-ARITHMETIC-EXPRESSION-ARITY", 1, 0, false);
	declareFunction("set_cyblack_arithmetic_expression_arity", "SET-CYBLACK-ARITHMETIC-EXPRESSION-ARITY", 2, 0, false);
	declareFunction("get_cyblack_arithmetic_expression_value_expression_list", "GET-CYBLACK-ARITHMETIC-EXPRESSION-VALUE-EXPRESSION-LIST", 1, 0, false);
	declareFunction("set_cyblack_arithmetic_expression_value_expression_list", "SET-CYBLACK-ARITHMETIC-EXPRESSION-VALUE-EXPRESSION-LIST", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_arithmetic_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ARITHMETIC-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_arithmetic_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ARITHMETIC-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_arithmetic_expression_p", "CYBLACK-ARITHMETIC-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_arithmetic_expression_initialize_method", "CYBLACK-ARITHMETIC-EXPRESSION-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_arithmetic_expression_print_method", "CYBLACK-ARITHMETIC-EXPRESSION-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_arithmetic_expression_print_operator_method", "CYBLACK-ARITHMETIC-EXPRESSION-PRINT-OPERATOR-METHOD", 2, 0, false);
	declareFunction("cyblack_arithmetic_expression_print_value_expression_list_method", "CYBLACK-ARITHMETIC-EXPRESSION-PRINT-VALUE-EXPRESSION-LIST-METHOD", 2, 0, false);
	declareFunction("cyblack_arithmetic_expression_get_arity_method", "CYBLACK-ARITHMETIC-EXPRESSION-GET-ARITY-METHOD", 1, 0, false);
	declareFunction("cyblack_arithmetic_expression_set_arity_method", "CYBLACK-ARITHMETIC-EXPRESSION-SET-ARITY-METHOD", 2, 0, false);
	declareFunction("cyblack_arithmetic_expression_get_args_method", "CYBLACK-ARITHMETIC-EXPRESSION-GET-ARGS-METHOD", 1, 0, false);
	declareFunction("cyblack_arithmetic_expression_set_args_method", "CYBLACK-ARITHMETIC-EXPRESSION-SET-ARGS-METHOD", 2, 0, false);
	declareFunction("cyblack_arithmetic_expression_get_argn_method", "CYBLACK-ARITHMETIC-EXPRESSION-GET-ARGN-METHOD", 2, 0, false);
	declareFunction("cyblack_arithmetic_expression_set_argn_method", "CYBLACK-ARITHMETIC-EXPRESSION-SET-ARGN-METHOD", 3, 0, false);
	declareFunction("cyblack_arithmetic_expression_get_value_method", "CYBLACK-ARITHMETIC-EXPRESSION-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("subloop_reserved_initialize_cyblack_binary_arithmetic_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-BINARY-ARITHMETIC-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_binary_arithmetic_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-BINARY-ARITHMETIC-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_binary_arithmetic_expression_p", "CYBLACK-BINARY-ARITHMETIC-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_binary_arithmetic_expression_initialize_method", "CYBLACK-BINARY-ARITHMETIC-EXPRESSION-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_binary_arithmetic_expression_print_operator_method", "CYBLACK-BINARY-ARITHMETIC-EXPRESSION-PRINT-OPERATOR-METHOD", 2, 0, false);
	declareFunction("cyblack_binary_arithmetic_expression_get_arity_method", "CYBLACK-BINARY-ARITHMETIC-EXPRESSION-GET-ARITY-METHOD", 1, 0, false);
	declareFunction("cyblack_binary_arithmetic_expression_set_arity_method", "CYBLACK-BINARY-ARITHMETIC-EXPRESSION-SET-ARITY-METHOD", 2, 0, false);
	declareFunction("cyblack_binary_arithmetic_expression_get_args_method", "CYBLACK-BINARY-ARITHMETIC-EXPRESSION-GET-ARGS-METHOD", 1, 0, false);
	declareFunction("cyblack_binary_arithmetic_expression_set_args_method", "CYBLACK-BINARY-ARITHMETIC-EXPRESSION-SET-ARGS-METHOD", 2, 0, false);
	declareFunction("cyblack_binary_arithmetic_expression_get_arg1_method", "CYBLACK-BINARY-ARITHMETIC-EXPRESSION-GET-ARG1-METHOD", 1, 0, false);
	declareFunction("cyblack_binary_arithmetic_expression_set_arg1_method", "CYBLACK-BINARY-ARITHMETIC-EXPRESSION-SET-ARG1-METHOD", 2, 0, false);
	declareFunction("cyblack_binary_arithmetic_expression_get_arg2_method", "CYBLACK-BINARY-ARITHMETIC-EXPRESSION-GET-ARG2-METHOD", 1, 0, false);
	declareFunction("cyblack_binary_arithmetic_expression_set_arg2_method", "CYBLACK-BINARY-ARITHMETIC-EXPRESSION-SET-ARG2-METHOD", 2, 0, false);
	declareFunction("cyblack_binary_arithmetic_expression_get_value_method", "CYBLACK-BINARY-ARITHMETIC-EXPRESSION-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("cyblack_binary_arithmetic_expression_compute_value_method", "CYBLACK-BINARY-ARITHMETIC-EXPRESSION-COMPUTE-VALUE-METHOD", 3, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_subtraction_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SUBTRACTION-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_subtraction_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SUBTRACTION-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_subtraction_expression_p", "CYBLACK-SUBTRACTION-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_subtraction_expression_print_operator_method", "CYBLACK-SUBTRACTION-EXPRESSION-PRINT-OPERATOR-METHOD", 2, 0, false);
	declareFunction("cyblack_subtraction_expression_compute_value_method", "CYBLACK-SUBTRACTION-EXPRESSION-COMPUTE-VALUE-METHOD", 3, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_division_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DIVISION-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_division_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DIVISION-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_division_expression_p", "CYBLACK-DIVISION-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_division_expression_print_operator_method", "CYBLACK-DIVISION-EXPRESSION-PRINT-OPERATOR-METHOD", 2, 0, false);
	declareFunction("cyblack_division_expression_compute_value_method", "CYBLACK-DIVISION-EXPRESSION-COMPUTE-VALUE-METHOD", 3, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_nary_arithmetic_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-NARY-ARITHMETIC-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_nary_arithmetic_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-NARY-ARITHMETIC-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_nary_arithmetic_expression_p", "CYBLACK-NARY-ARITHMETIC-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_nary_arithmetic_expression_initialize_method", "CYBLACK-NARY-ARITHMETIC-EXPRESSION-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_nary_arithmetic_expression_get_value_method", "CYBLACK-NARY-ARITHMETIC-EXPRESSION-GET-VALUE-METHOD", 1, 1, false);
	declareFunction("cyblack_nary_arithmetic_expression_compute_value_method", "CYBLACK-NARY-ARITHMETIC-EXPRESSION-COMPUTE-VALUE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_addition_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ADDITION-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_addition_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ADDITION-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_addition_expression_p", "CYBLACK-ADDITION-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_addition_expression_print_operator_method", "CYBLACK-ADDITION-EXPRESSION-PRINT-OPERATOR-METHOD", 2, 0, false);
	declareFunction("cyblack_addition_expression_compute_value_method", "CYBLACK-ADDITION-EXPRESSION-COMPUTE-VALUE-METHOD", 2, 0, false);
	declareFunction("add_list", "ADD-LIST", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_multiplication_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-MULTIPLICATION-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_multiplication_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-MULTIPLICATION-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_multiplication_expression_p", "CYBLACK-MULTIPLICATION-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_multiplication_expression_print_operator_method", "CYBLACK-MULTIPLICATION-EXPRESSION-PRINT-OPERATOR-METHOD", 2, 0, false);
	declareFunction("cyblack_multiplication_expression_compute_value_method", "CYBLACK-MULTIPLICATION-EXPRESSION-COMPUTE-VALUE-METHOD", 2, 0, false);
	declareFunction("multiply_list", "MULTIPLY-LIST", 1, 0, false);
	declareFunction("get_cyblack_pattern_processor_keyword", "GET-CYBLACK-PATTERN-PROCESSOR-KEYWORD", 1, 0, false);
	declareFunction("set_cyblack_pattern_processor_keyword", "SET-CYBLACK-PATTERN-PROCESSOR-KEYWORD", 2, 0, false);
	declareFunction("get_cyblack_pattern_processor_main_parser", "GET-CYBLACK-PATTERN-PROCESSOR-MAIN-PARSER", 1, 0, false);
	declareFunction("set_cyblack_pattern_processor_main_parser", "SET-CYBLACK-PATTERN-PROCESSOR-MAIN-PARSER", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_pattern_processor_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PATTERN-PROCESSOR-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_pattern_processor_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PATTERN-PROCESSOR-INSTANCE", 1, 0, false);
	declareFunction("cyblack_pattern_processor_p", "CYBLACK-PATTERN-PROCESSOR-P", 1, 0, false);
	declareFunction("cyblack_pattern_processor_initialize_method", "CYBLACK-PATTERN-PROCESSOR-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_pattern_processor_print_method", "CYBLACK-PATTERN-PROCESSOR-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_pattern_processor_get_main_parser_method", "CYBLACK-PATTERN-PROCESSOR-GET-MAIN-PARSER-METHOD", 1, 0, false);
	declareFunction("cyblack_pattern_processor_set_main_parser_method", "CYBLACK-PATTERN-PROCESSOR-SET-MAIN-PARSER-METHOD", 2, 0, false);
	declareFunction("cyblack_pattern_processor_get_blackboard_method", "CYBLACK-PATTERN-PROCESSOR-GET-BLACKBOARD-METHOD", 1, 0, false);
	declareFunction("cyblack_pattern_processor_get_keyword_method", "CYBLACK-PATTERN-PROCESSOR-GET-KEYWORD-METHOD", 1, 0, false);
	declareFunction("cyblack_pattern_processor_set_keyword_method", "CYBLACK-PATTERN-PROCESSOR-SET-KEYWORD-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_item_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ITEM-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_item_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ITEM-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_item_parser_p", "CYBLACK-ITEM-PARSER-P", 1, 0, false);
	declareFunction("cyblack_item_parser_initialize_method", "CYBLACK-ITEM-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_item_parser_print_method", "CYBLACK-ITEM-PARSER-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_item_parser_parse_method", "CYBLACK-ITEM-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_existential_expression_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EXISTENTIAL-EXPRESSION-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_existential_expression_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EXISTENTIAL-EXPRESSION-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_existential_expression_parser_p", "CYBLACK-EXISTENTIAL-EXPRESSION-PARSER-P", 1, 0, false);
	declareFunction("cyblack_existential_expression_parser_initialize_method", "CYBLACK-EXISTENTIAL-EXPRESSION-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_existential_expression_parser_parse_method", "CYBLACK-EXISTENTIAL-EXPRESSION-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("cyblack_existential_expression_parser_create_expression_method", "CYBLACK-EXISTENTIAL-EXPRESSION-PARSER-CREATE-EXPRESSION-METHOD", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_forall_expression_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-FORALL-EXPRESSION-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_forall_expression_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-FORALL-EXPRESSION-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_forall_expression_parser_p", "CYBLACK-FORALL-EXPRESSION-PARSER-P", 1, 0, false);
	declareFunction("cyblack_forall_expression_parser_initialize_method", "CYBLACK-FORALL-EXPRESSION-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_forall_expression_parser_create_expression_method", "CYBLACK-FORALL-EXPRESSION-PARSER-CREATE-EXPRESSION-METHOD", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_present_expression_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PRESENT-EXPRESSION-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_present_expression_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PRESENT-EXPRESSION-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_present_expression_parser_p", "CYBLACK-PRESENT-EXPRESSION-PARSER-P", 1, 0, false);
	declareFunction("cyblack_present_expression_parser_initialize_method", "CYBLACK-PRESENT-EXPRESSION-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_present_expression_parser_parse_method", "CYBLACK-PRESENT-EXPRESSION-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_empty_p_expression_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EMPTY-P-EXPRESSION-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_empty_p_expression_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EMPTY-P-EXPRESSION-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_empty_p_expression_parser_p", "CYBLACK-EMPTY-P-EXPRESSION-PARSER-P", 1, 0, false);
	declareFunction("cyblack_empty_p_expression_parser_initialize_method", "CYBLACK-EMPTY-P-EXPRESSION-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_empty_p_expression_parser_parse_method", "CYBLACK-EMPTY-P-EXPRESSION-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_type_expression_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-TYPE-EXPRESSION-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_type_expression_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-TYPE-EXPRESSION-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_type_expression_parser_p", "CYBLACK-TYPE-EXPRESSION-PARSER-P", 1, 0, false);
	declareFunction("cyblack_type_expression_parser_initialize_method", "CYBLACK-TYPE-EXPRESSION-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_type_expression_parser_parse_method", "CYBLACK-TYPE-EXPRESSION-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_subtype_expression_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SUBTYPE-EXPRESSION-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_subtype_expression_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SUBTYPE-EXPRESSION-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_subtype_expression_parser_p", "CYBLACK-SUBTYPE-EXPRESSION-PARSER-P", 1, 0, false);
	declareFunction("cyblack_subtype_expression_parser_initialize_method", "CYBLACK-SUBTYPE-EXPRESSION-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_subtype_expression_parser_parse_method", "CYBLACK-SUBTYPE-EXPRESSION-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_panel_expression_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PANEL-EXPRESSION-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_panel_expression_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PANEL-EXPRESSION-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_panel_expression_parser_p", "CYBLACK-PANEL-EXPRESSION-PARSER-P", 1, 0, false);
	declareFunction("cyblack_panel_expression_parser_initialize_method", "CYBLACK-PANEL-EXPRESSION-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_panel_expression_parser_parse_method", "CYBLACK-PANEL-EXPRESSION-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_get_expression_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-GET-EXPRESSION-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_get_expression_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-GET-EXPRESSION-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_get_expression_parser_p", "CYBLACK-GET-EXPRESSION-PARSER-P", 1, 0, false);
	declareFunction("cyblack_get_expression_parser_initialize_method", "CYBLACK-GET-EXPRESSION-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_get_expression_parser_parse_method", "CYBLACK-GET-EXPRESSION-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_string_expression_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-STRING-EXPRESSION-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_string_expression_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-STRING-EXPRESSION-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_string_expression_parser_p", "CYBLACK-STRING-EXPRESSION-PARSER-P", 1, 0, false);
	declareFunction("cyblack_string_expression_parser_initialize_method", "CYBLACK-STRING-EXPRESSION-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_string_expression_parser_parse_method", "CYBLACK-STRING-EXPRESSION-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_monitoring_pattern_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-MONITORING-PATTERN-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_monitoring_pattern_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-MONITORING-PATTERN-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_monitoring_pattern_parser_p", "CYBLACK-MONITORING-PATTERN-PARSER-P", 1, 0, false);
	declareFunction("cyblack_monitoring_pattern_parser_initialize_method", "CYBLACK-MONITORING-PATTERN-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_monitoring_pattern_parser_parse_method", "CYBLACK-MONITORING-PATTERN-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_precon_pattern_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PRECON-PATTERN-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_precon_pattern_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PRECON-PATTERN-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_precon_pattern_parser_p", "CYBLACK-PRECON-PATTERN-PARSER-P", 1, 0, false);
	declareFunction("cyblack_precon_pattern_parser_initialize_method", "CYBLACK-PRECON-PATTERN-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_precon_pattern_parser_parse_method", "CYBLACK-PRECON-PATTERN-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_satisfaction_expression_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SATISFACTION-EXPRESSION-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_satisfaction_expression_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SATISFACTION-EXPRESSION-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_satisfaction_expression_parser_p", "CYBLACK-SATISFACTION-EXPRESSION-PARSER-P", 1, 0, false);
	declareFunction("cyblack_satisfaction_expression_parser_new_expression_method", "CYBLACK-SATISFACTION-EXPRESSION-PARSER-NEW-EXPRESSION-METHOD", 1, 0, false);
	declareFunction("cyblack_satisfaction_expression_parser_initialize_method", "CYBLACK-SATISFACTION-EXPRESSION-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_satisfaction_expression_parser_parse_method", "CYBLACK-SATISFACTION-EXPRESSION-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_simple_satisfaction_expression_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SIMPLE-SATISFACTION-EXPRESSION-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_simple_satisfaction_expression_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SIMPLE-SATISFACTION-EXPRESSION-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_simple_satisfaction_expression_parser_p", "CYBLACK-SIMPLE-SATISFACTION-EXPRESSION-PARSER-P", 1, 0, false);
	declareFunction("cyblack_simple_satisfaction_expression_parser_new_expression_method", "CYBLACK-SIMPLE-SATISFACTION-EXPRESSION-PARSER-NEW-EXPRESSION-METHOD", 1, 0, false);
	declareFunction("cyblack_simple_satisfaction_expression_parser_initialize_method", "CYBLACK-SIMPLE-SATISFACTION-EXPRESSION-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_simple_satisfaction_expression_parser_parse_method", "CYBLACK-SIMPLE-SATISFACTION-EXPRESSION-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_and_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AND-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_and_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AND-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_and_parser_p", "CYBLACK-AND-PARSER-P", 1, 0, false);
	declareFunction("cyblack_and_parser_initialize_method", "CYBLACK-AND-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_and_parser_parse_method", "CYBLACK-AND-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_or_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-OR-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_or_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-OR-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_or_parser_p", "CYBLACK-OR-PARSER-P", 1, 0, false);
	declareFunction("cyblack_or_parser_initialize_method", "CYBLACK-OR-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_or_parser_parse_method", "CYBLACK-OR-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_not_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-NOT-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_not_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-NOT-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_not_parser_p", "CYBLACK-NOT-PARSER-P", 1, 0, false);
	declareFunction("cyblack_not_parser_initialize_method", "CYBLACK-NOT-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_not_parser_parse_method", "CYBLACK-NOT-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_eq_predicate_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EQ-PREDICATE-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_eq_predicate_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EQ-PREDICATE-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_eq_predicate_parser_p", "CYBLACK-EQ-PREDICATE-PARSER-P", 1, 0, false);
	declareFunction("cyblack_eq_predicate_parser_initialize_method", "CYBLACK-EQ-PREDICATE-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_eq_predicate_parser_parse_method", "CYBLACK-EQ-PREDICATE-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_equal_predicate_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EQUAL-PREDICATE-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_equal_predicate_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EQUAL-PREDICATE-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_equal_predicate_parser_p", "CYBLACK-EQUAL-PREDICATE-PARSER-P", 1, 0, false);
	declareFunction("cyblack_equal_predicate_parser_initialize_method", "CYBLACK-EQUAL-PREDICATE-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_equal_predicate_parser_parse_method", "CYBLACK-EQUAL-PREDICATE-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_assoc_equal_predicate_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ASSOC-EQUAL-PREDICATE-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_assoc_equal_predicate_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ASSOC-EQUAL-PREDICATE-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_assoc_equal_predicate_parser_p", "CYBLACK-ASSOC-EQUAL-PREDICATE-PARSER-P", 1, 0, false);
	declareFunction("cyblack_assoc_equal_predicate_parser_initialize_method", "CYBLACK-ASSOC-EQUAL-PREDICATE-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_assoc_equal_predicate_parser_parse_method", "CYBLACK-ASSOC-EQUAL-PREDICATE-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_le_predicate_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-LE-PREDICATE-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_le_predicate_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-LE-PREDICATE-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_le_predicate_parser_p", "CYBLACK-LE-PREDICATE-PARSER-P", 1, 0, false);
	declareFunction("cyblack_le_predicate_parser_initialize_method", "CYBLACK-LE-PREDICATE-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_le_predicate_parser_parse_method", "CYBLACK-LE-PREDICATE-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_ge_predicate_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-GE-PREDICATE-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_ge_predicate_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-GE-PREDICATE-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_ge_predicate_parser_p", "CYBLACK-GE-PREDICATE-PARSER-P", 1, 0, false);
	declareFunction("cyblack_ge_predicate_parser_initialize_method", "CYBLACK-GE-PREDICATE-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_ge_predicate_parser_parse_method", "CYBLACK-GE-PREDICATE-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_lt_predicate_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-LT-PREDICATE-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_lt_predicate_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-LT-PREDICATE-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_lt_predicate_parser_p", "CYBLACK-LT-PREDICATE-PARSER-P", 1, 0, false);
	declareFunction("cyblack_lt_predicate_parser_initialize_method", "CYBLACK-LT-PREDICATE-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_lt_predicate_parser_parse_method", "CYBLACK-LT-PREDICATE-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_gt_predicate_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-GT-PREDICATE-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_gt_predicate_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-GT-PREDICATE-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_gt_predicate_parser_p", "CYBLACK-GT-PREDICATE-PARSER-P", 1, 0, false);
	declareFunction("cyblack_gt_predicate_parser_initialize_method", "CYBLACK-GT-PREDICATE-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_gt_predicate_parser_parse_method", "CYBLACK-GT-PREDICATE-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_type_of_expression_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-TYPE-OF-EXPRESSION-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_type_of_expression_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-TYPE-OF-EXPRESSION-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_type_of_expression_parser_p", "CYBLACK-TYPE-OF-EXPRESSION-PARSER-P", 1, 0, false);
	declareFunction("cyblack_type_of_expression_parser_initialize_method", "CYBLACK-TYPE-OF-EXPRESSION-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_type_of_expression_parser_parse_method", "CYBLACK-TYPE-OF-EXPRESSION-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_call_method_expression_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-CALL-METHOD-EXPRESSION-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_call_method_expression_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-CALL-METHOD-EXPRESSION-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_call_method_expression_parser_p", "CYBLACK-CALL-METHOD-EXPRESSION-PARSER-P", 1, 0, false);
	declareFunction("cyblack_call_method_expression_parser_initialize_method", "CYBLACK-CALL-METHOD-EXPRESSION-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_call_method_expression_parser_parse_method", "CYBLACK-CALL-METHOD-EXPRESSION-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_slot_access_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SLOT-ACCESS-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_slot_access_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SLOT-ACCESS-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_slot_access_parser_p", "CYBLACK-SLOT-ACCESS-PARSER-P", 1, 0, false);
	declareFunction("cyblack_slot_access_parser_initialize_method", "CYBLACK-SLOT-ACCESS-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_slot_access_parser_parse_method", "CYBLACK-SLOT-ACCESS-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_subtraction_expression_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SUBTRACTION-EXPRESSION-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_subtraction_expression_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SUBTRACTION-EXPRESSION-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_subtraction_expression_parser_p", "CYBLACK-SUBTRACTION-EXPRESSION-PARSER-P", 1, 0, false);
	declareFunction("cyblack_subtraction_expression_parser_initialize_method", "CYBLACK-SUBTRACTION-EXPRESSION-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_subtraction_expression_parser_parse_method", "CYBLACK-SUBTRACTION-EXPRESSION-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_addition_expression_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ADDITION-EXPRESSION-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_addition_expression_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ADDITION-EXPRESSION-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_addition_expression_parser_p", "CYBLACK-ADDITION-EXPRESSION-PARSER-P", 1, 0, false);
	declareFunction("cyblack_addition_expression_parser_initialize_method", "CYBLACK-ADDITION-EXPRESSION-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_addition_expression_parser_parse_method", "CYBLACK-ADDITION-EXPRESSION-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_multiplication_expression_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-MULTIPLICATION-EXPRESSION-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_multiplication_expression_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-MULTIPLICATION-EXPRESSION-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_multiplication_expression_parser_p", "CYBLACK-MULTIPLICATION-EXPRESSION-PARSER-P", 1, 0, false);
	declareFunction("cyblack_multiplication_expression_parser_initialize_method", "CYBLACK-MULTIPLICATION-EXPRESSION-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_multiplication_expression_parser_parse_method", "CYBLACK-MULTIPLICATION-EXPRESSION-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_division_expression_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DIVISION-EXPRESSION-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_division_expression_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DIVISION-EXPRESSION-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_division_expression_parser_p", "CYBLACK-DIVISION-EXPRESSION-PARSER-P", 1, 0, false);
	declareFunction("cyblack_division_expression_parser_initialize_method", "CYBLACK-DIVISION-EXPRESSION-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_division_expression_parser_parse_method", "CYBLACK-DIVISION-EXPRESSION-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_item_compiler_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ITEM-COMPILER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_item_compiler_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ITEM-COMPILER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_item_compiler_p", "CYBLACK-ITEM-COMPILER-P", 1, 0, false);
	declareFunction("cyblack_item_compiler_initialize_method", "CYBLACK-ITEM-COMPILER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_item_compiler_print_method", "CYBLACK-ITEM-COMPILER-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_item_compiler_compile_method", "CYBLACK-ITEM-COMPILER-COMPILE-METHOD", 2, 0, false);
	declareFunction("get_cyblack_parser_compiling_dispatch_table", "GET-CYBLACK-PARSER-COMPILING-DISPATCH-TABLE", 1, 0, false);
	declareFunction("set_cyblack_parser_compiling_dispatch_table", "SET-CYBLACK-PARSER-COMPILING-DISPATCH-TABLE", 2, 0, false);
	declareFunction("get_cyblack_parser_parsing_dispatch_table", "GET-CYBLACK-PARSER-PARSING-DISPATCH-TABLE", 1, 0, false);
	declareFunction("set_cyblack_parser_parsing_dispatch_table", "SET-CYBLACK-PARSER-PARSING-DISPATCH-TABLE", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_parser_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PARSER-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_parser_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PARSER-INSTANCE", 1, 0, false);
	declareFunction("cyblack_parser_p", "CYBLACK-PARSER-P", 1, 0, false);
	declareFunction("cyblack_parser_register_parsers_method", "CYBLACK-PARSER-REGISTER-PARSERS-METHOD", 1, 0, false);
	declareFunction("cyblack_parser_on_startup_method", "CYBLACK-PARSER-ON-STARTUP-METHOD", 1, 0, false);
	declareFunction("cyblack_parser_on_shutdown_method", "CYBLACK-PARSER-ON-SHUTDOWN-METHOD", 1, 0, false);
	declareFunction("cyblack_parser_initialize_method", "CYBLACK-PARSER-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_parser_set_application_method", "CYBLACK-PARSER-SET-APPLICATION-METHOD", 2, 0, false);
	declareFunction("cyblack_parser_register_parser_method", "CYBLACK-PARSER-REGISTER-PARSER-METHOD", 3, 0, false);
	declareFunction("cyblack_parser_retrieve_parser_method", "CYBLACK-PARSER-RETRIEVE-PARSER-METHOD", 2, 0, false);
	declareFunction("cyblack_parser_register_compiler_method", "CYBLACK-PARSER-REGISTER-COMPILER-METHOD", 3, 0, false);
	declareFunction("cyblack_parser_retrieve_compiler_method", "CYBLACK-PARSER-RETRIEVE-COMPILER-METHOD", 2, 0, false);
	declareFunction("cyblack_parser_parse_method", "CYBLACK-PARSER-PARSE-METHOD", 2, 0, false);
	declareFunction("cyblack_parser_compile_method", "CYBLACK-PARSER-COMPILE-METHOD", 2, 0, false);
	declareFunction("cyblack_satisfaction_expression_parser_new_expression", "CYBLACK-SATISFACTION-EXPRESSION-PARSER-NEW-EXPRESSION", 1, 0, false);
	declareFunction("cyblack_precon_or_monitoring_pattern_p", "CYBLACK-PRECON-OR-MONITORING-PATTERN-P", 1, 0, false);
	declareFunction("cyblack_pattern_get_environment", "CYBLACK-PATTERN-GET-ENVIRONMENT", 1, 0, false);
	declareFunction("cyblack_pattern_set_environment", "CYBLACK-PATTERN-SET-ENVIRONMENT", 2, 0, false);
	declareFunction("cyblack_pattern_get_local_bindings", "CYBLACK-PATTERN-GET-LOCAL-BINDINGS", 1, 0, false);
	declareFunction("cyblack_pattern_get_logical_form", "CYBLACK-PATTERN-GET-LOGICAL-FORM", 1, 0, false);
	declareFunction("cyblack_pattern_get_unique_bindings", "CYBLACK-PATTERN-GET-UNIQUE-BINDINGS", 1, 0, false);
	declareFunction("cyblack_get_parameters", "CYBLACK-GET-PARAMETERS", 1, 0, false);
	return NIL;
    }

    public static final SubLObject init_cyblack_precondition_pattern_file() {
	defconstant("*VALID-CYBLACK-PATTERN-OPERATORS*", cyblack_precondition_pattern_p3.$list_alt0);
	defconstant("*CYBLACK-VAR-PREFIX-CHAR*", CHAR_question);
	defconstant("*CYBLACK-EMPTY-STRING*", cyblack_precondition_pattern_p2.$str_alt8$);
	defconstant("*CYBLACK-UNBOUND-VALUE*", $CYBLACK_UNBOUND_VALUE);
	defconstant("*CYBLACK-UNNAMED-VARIABLE-NAME*", cyblack_precondition_pattern_p2.$str_alt8$);
	defconstant("*VALID-CYBLACK-MONITORING-PATTERN-ACTION-TYPES*", cyblack_precondition_pattern_p2.$list_alt384);
	defconstant("*VALID-CYBLACK-MONITORING-PATTERN-ACTION-QUALIFIER-TYPES*", cyblack_precondition_pattern_p2.$list_alt389);
	return NIL;
    }

    public static final SubLObject setup_cyblack_precondition_pattern_file() {
	enumerations.enumerations_incorporate_definition(CYBLACK_PATTERN_OPERATOR, cyblack_precondition_pattern_p3.$list_alt0);
	classes.subloop_new_class(CYBLACK_BINDING, OBJECT, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt12);
	classes.class_set_implements_slot_listeners(CYBLACK_BINDING, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_BINDING, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_BINDING_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_BINDING, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_BINDING_INSTANCE);
	subloop_reserved_initialize_cyblack_binding_class(CYBLACK_BINDING);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_BINDING, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt25);
	methods.subloop_register_instance_method(CYBLACK_BINDING, INITIALIZE, CYBLACK_BINDING_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_BINDING, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p2.$list_alt31);
	methods.subloop_register_instance_method(CYBLACK_BINDING, PRINT, CYBLACK_BINDING_PRINT_METHOD);
	methods.methods_incorporate_instance_method(CLONE, CYBLACK_BINDING, cyblack_precondition_pattern_p2.$list_alt29, NIL, cyblack_precondition_pattern_p2.$list_alt39);
	methods.subloop_register_instance_method(CYBLACK_BINDING, CLONE, CYBLACK_BINDING_CLONE_METHOD);
	methods.methods_incorporate_instance_method(UNBOUNDP, CYBLACK_BINDING, cyblack_precondition_pattern_p2.$list_alt29, NIL, cyblack_precondition_pattern_p2.$list_alt43);
	methods.subloop_register_instance_method(CYBLACK_BINDING, UNBOUNDP, CYBLACK_BINDING_UNBOUNDP_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_BINDING, cyblack_precondition_pattern_p2.$list_alt29, NIL, cyblack_precondition_pattern_p2.$list_alt47);
	methods.subloop_register_instance_method(CYBLACK_BINDING, GET_VALUE, CYBLACK_BINDING_GET_VALUE_METHOD);
	methods.methods_incorporate_instance_method(SET_VALUE, CYBLACK_BINDING, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt51, cyblack_precondition_pattern_p2.$list_alt52);
	methods.subloop_register_instance_method(CYBLACK_BINDING, SET_VALUE, CYBLACK_BINDING_SET_VALUE_METHOD);
	methods.methods_incorporate_instance_method(GET_TYPE, CYBLACK_BINDING, cyblack_precondition_pattern_p2.$list_alt29, NIL, cyblack_precondition_pattern_p2.$list_alt56);
	methods.subloop_register_instance_method(CYBLACK_BINDING, GET_TYPE, CYBLACK_BINDING_GET_TYPE_METHOD);
	methods.methods_incorporate_instance_method(SET_TYPE, CYBLACK_BINDING, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt60, cyblack_precondition_pattern_p2.$list_alt61);
	methods.subloop_register_instance_method(CYBLACK_BINDING, SET_TYPE, CYBLACK_BINDING_SET_TYPE_METHOD);
	methods.methods_incorporate_instance_method(HAS_TYPE_P, CYBLACK_BINDING, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt65, cyblack_precondition_pattern_p2.$list_alt66);
	methods.subloop_register_instance_method(CYBLACK_BINDING, HAS_TYPE_P, CYBLACK_BINDING_HAS_TYPE_P_METHOD);
	methods.methods_incorporate_instance_method(GET_VARIABLE, CYBLACK_BINDING, cyblack_precondition_pattern_p2.$list_alt29, NIL, cyblack_precondition_pattern_p2.$list_alt70);
	methods.subloop_register_instance_method(CYBLACK_BINDING, GET_VARIABLE, CYBLACK_BINDING_GET_VARIABLE_METHOD);
	methods.methods_incorporate_instance_method(SET_VARIABLE, CYBLACK_BINDING, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt74, cyblack_precondition_pattern_p2.$list_alt75);
	methods.subloop_register_instance_method(CYBLACK_BINDING, SET_VARIABLE, CYBLACK_BINDING_SET_VARIABLE_METHOD);
	methods.methods_incorporate_instance_method(APRIORI_P, CYBLACK_BINDING, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt80);
	methods.subloop_register_instance_method(CYBLACK_BINDING, APRIORI_P, CYBLACK_BINDING_APRIORI_P_METHOD);
	methods.methods_incorporate_instance_method(SET_APRIORI, CYBLACK_BINDING, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt51, cyblack_precondition_pattern_p2.$list_alt83);
	methods.subloop_register_instance_method(CYBLACK_BINDING, SET_APRIORI, CYBLACK_BINDING_SET_APRIORI_METHOD);
	methods.methods_incorporate_instance_method(LISTIFY_BINDING, CYBLACK_BINDING, cyblack_precondition_pattern_p2.$list_alt29, NIL, cyblack_precondition_pattern_p2.$list_alt87);
	methods.subloop_register_instance_method(CYBLACK_BINDING, LISTIFY_BINDING, CYBLACK_BINDING_LISTIFY_BINDING_METHOD);
	classes.subloop_new_class(CYBLACK_ENVIRONMENT, CYBLACK_BASIC_LOCKABLE, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt98);
	classes.class_set_implements_slot_listeners(CYBLACK_ENVIRONMENT, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_ENVIRONMENT, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ENVIRONMENT_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_ENVIRONMENT, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ENVIRONMENT_INSTANCE);
	subloop_reserved_initialize_cyblack_environment_class(CYBLACK_ENVIRONMENT);
	methods.methods_incorporate_class_method(INSTANTIATE_BINDING_LIST, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt110, cyblack_precondition_pattern_p3.$list_alt111);
	methods.subloop_register_class_method(CYBLACK_ENVIRONMENT, INSTANTIATE_BINDING_LIST, CYBLACK_ENVIRONMENT_INSTANTIATE_BINDING_LIST_METHOD);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt113);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, INITIALIZE, CYBLACK_ENVIRONMENT_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p3.$list_alt116);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, PRINT, CYBLACK_ENVIRONMENT_PRINT_METHOD);
	methods.methods_incorporate_instance_method(CLONE, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt29, NIL, cyblack_precondition_pattern_p3.$list_alt120);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, CLONE, CYBLACK_ENVIRONMENT_CLONE_METHOD);
	methods.methods_incorporate_instance_method(GET_ENVIRONMENT_TAG, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt124);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, GET_ENVIRONMENT_TAG, CYBLACK_ENVIRONMENT_GET_ENVIRONMENT_TAG_METHOD);
	methods.methods_incorporate_instance_method(SET_ENVIRONMENT_TAG, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt127, cyblack_precondition_pattern_p3.$list_alt128);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, SET_ENVIRONMENT_TAG, CYBLACK_ENVIRONMENT_SET_ENVIRONMENT_TAG_METHOD);
	methods.methods_incorporate_instance_method(GET_OUTER_SCOPE, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt132);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, GET_OUTER_SCOPE, CYBLACK_ENVIRONMENT_GET_OUTER_SCOPE_METHOD);
	methods.methods_incorporate_instance_method(SET_OUTER_SCOPE, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt135, cyblack_precondition_pattern_p3.$list_alt136);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, SET_OUTER_SCOPE, CYBLACK_ENVIRONMENT_SET_OUTER_SCOPE_METHOD);
	methods.methods_incorporate_instance_method(GET_LOCAL_BINDINGS, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt140);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, GET_LOCAL_BINDINGS, CYBLACK_ENVIRONMENT_GET_LOCAL_BINDINGS_METHOD);
	methods.methods_incorporate_instance_method(SET_LOCAL_BINDINGS, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt143, cyblack_precondition_pattern_p3.$list_alt144);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, SET_LOCAL_BINDINGS, CYBLACK_ENVIRONMENT_SET_LOCAL_BINDINGS_METHOD);
	methods.methods_incorporate_instance_method(GET_LOCAL_UNBOUND_BINDINGS, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt148);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, GET_LOCAL_UNBOUND_BINDINGS, CYBLACK_ENVIRONMENT_GET_LOCAL_UNBOUND_BINDINGS_METHOD);
	methods.methods_incorporate_instance_method(PUSH_LOCAL_BINDING, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt151, cyblack_precondition_pattern_p3.$list_alt152);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, PUSH_LOCAL_BINDING, CYBLACK_ENVIRONMENT_PUSH_LOCAL_BINDING_METHOD);
	methods.methods_incorporate_instance_method(PUSH_TYPED_LOCAL_BINDING, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt156, cyblack_precondition_pattern_p3.$list_alt157);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, PUSH_TYPED_LOCAL_BINDING, CYBLACK_ENVIRONMENT_PUSH_TYPED_LOCAL_BINDING_METHOD);
	methods.methods_incorporate_instance_method(POP_LOCAL_BINDING, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt161, cyblack_precondition_pattern_p3.$list_alt162);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, POP_LOCAL_BINDING, CYBLACK_ENVIRONMENT_POP_LOCAL_BINDING_METHOD);
	methods.methods_incorporate_instance_method(GET_BINDING, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p3.$list_alt161, cyblack_precondition_pattern_p3.$list_alt166);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, GET_BINDING, CYBLACK_ENVIRONMENT_GET_BINDING_METHOD);
	methods.methods_incorporate_instance_method(GET_BINDING_BY_VALUE, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p3.$list_alt169, cyblack_precondition_pattern_p3.$list_alt170);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, GET_BINDING_BY_VALUE, CYBLACK_ENVIRONMENT_GET_BINDING_BY_VALUE_METHOD);
	methods.methods_incorporate_instance_method(GET, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p3.$list_alt173, cyblack_precondition_pattern_p3.$list_alt174);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, GET, CYBLACK_ENVIRONMENT_GET_METHOD);
	methods.methods_incorporate_instance_method(SET, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt177, cyblack_precondition_pattern_p3.$list_alt178);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, SET, CYBLACK_ENVIRONMENT_SET_METHOD);
	methods.methods_incorporate_instance_method(GET_LOCAL, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p3.$list_alt161, cyblack_precondition_pattern_p3.$list_alt182);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, GET_LOCAL, CYBLACK_ENVIRONMENT_GET_LOCAL_METHOD);
	methods.methods_incorporate_instance_method(SET_LOCAL, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt177, cyblack_precondition_pattern_p3.$list_alt185);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, SET_LOCAL, CYBLACK_ENVIRONMENT_SET_LOCAL_METHOD);
	methods.methods_incorporate_instance_method(PUSH_FRAME, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p3.$list_alt190, cyblack_precondition_pattern_p3.$list_alt191);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, PUSH_FRAME, CYBLACK_ENVIRONMENT_PUSH_FRAME_METHOD);
	methods.methods_incorporate_instance_method(POP_FRAME, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt132);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, POP_FRAME, CYBLACK_ENVIRONMENT_POP_FRAME_METHOD);
	methods.methods_incorporate_instance_method(POP_FRAME_TO, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt196, cyblack_precondition_pattern_p3.$list_alt197);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, POP_FRAME_TO, CYBLACK_ENVIRONMENT_POP_FRAME_TO_METHOD);
	methods.methods_incorporate_instance_method(TOP_FRAME, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt201);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, TOP_FRAME, CYBLACK_ENVIRONMENT_TOP_FRAME_METHOD);
	methods.methods_incorporate_instance_method(LISTIFY_LOCAL_BINDINGS, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt204);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, LISTIFY_LOCAL_BINDINGS, CYBLACK_ENVIRONMENT_LISTIFY_LOCAL_BINDINGS_METHOD);
	methods.methods_incorporate_instance_method(GET_UNIQUE_LOCAL_BINDINGS, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt207);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, GET_UNIQUE_LOCAL_BINDINGS, CYBLACK_ENVIRONMENT_GET_UNIQUE_LOCAL_BINDINGS_METHOD);
	methods.methods_incorporate_instance_method(GET_UNIQUE_BINDINGS, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt210, cyblack_precondition_pattern_p3.$list_alt211);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, GET_UNIQUE_BINDINGS, CYBLACK_ENVIRONMENT_GET_UNIQUE_BINDINGS_METHOD);
	methods.methods_incorporate_instance_method(GET_UNIQUE_NON_APRIORI_BINDINGS, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt210, cyblack_precondition_pattern_p3.$list_alt215);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, GET_UNIQUE_NON_APRIORI_BINDINGS, CYBLACK_ENVIRONMENT_GET_UNIQUE_NON_APRIORI_BINDINGS_METHOD);
	methods.methods_incorporate_instance_method(GET_UNIQUE_LOCAL_UNBOUND_BINDINGS, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt219);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, GET_UNIQUE_LOCAL_UNBOUND_BINDINGS, CYBLACK_ENVIRONMENT_GET_UNIQUE_LOCAL_UNBOUND_BINDINGS_METHOD);
	methods.methods_incorporate_instance_method(GET_UNIQUE_UNBOUND_BINDINGS, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt210, cyblack_precondition_pattern_p3.$list_alt222);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, GET_UNIQUE_UNBOUND_BINDINGS, CYBLACK_ENVIRONMENT_GET_UNIQUE_UNBOUND_BINDINGS_METHOD);
	methods.methods_incorporate_instance_method(LISTIFY_UNIQUE_BINDINGS, CYBLACK_ENVIRONMENT, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt226);
	methods.subloop_register_instance_method(CYBLACK_ENVIRONMENT, LISTIFY_UNIQUE_BINDINGS, CYBLACK_ENVIRONMENT_LISTIFY_UNIQUE_BINDINGS_METHOD);
	interfaces.new_interface(CYBLACK_VALUE_EXPRESSION, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt230);
	interfaces.new_interface(CYBLACK_LOGICAL_EXPRESSION, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt230);
	classes.subloop_new_class(CYBLACK_PATTERN, CYBLACK_OBJECT, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt233);
	classes.class_set_implements_slot_listeners(CYBLACK_PATTERN, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_PATTERN, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PATTERN_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_PATTERN, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PATTERN_INSTANCE);
	subloop_reserved_initialize_cyblack_pattern_class(CYBLACK_PATTERN);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_PATTERN, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt237);
	methods.subloop_register_instance_method(CYBLACK_PATTERN, INITIALIZE, CYBLACK_PATTERN_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(GET_UNPARSED_PATTERN, CYBLACK_PATTERN, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt241);
	methods.subloop_register_instance_method(CYBLACK_PATTERN, GET_UNPARSED_PATTERN, CYBLACK_PATTERN_GET_UNPARSED_PATTERN_METHOD);
	methods.methods_incorporate_instance_method(SET_UNPARSED_PATTERN, CYBLACK_PATTERN, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt244, cyblack_precondition_pattern_p3.$list_alt245);
	methods.subloop_register_instance_method(CYBLACK_PATTERN, SET_UNPARSED_PATTERN, CYBLACK_PATTERN_SET_UNPARSED_PATTERN_METHOD);
	methods.methods_incorporate_instance_method(GET_DATATYPE_BAG, CYBLACK_PATTERN, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt249);
	methods.subloop_register_instance_method(CYBLACK_PATTERN, GET_DATATYPE_BAG, CYBLACK_PATTERN_GET_DATATYPE_BAG_METHOD);
	methods.methods_incorporate_instance_method(TRAVERSE_FILLING_DATATYPE_BAG, CYBLACK_PATTERN, cyblack_precondition_pattern_p3.$list_alt24, cyblack_precondition_pattern_p3.$list_alt253, cyblack_precondition_pattern_p3.$list_alt254);
	methods.subloop_register_instance_method(CYBLACK_PATTERN, TRAVERSE_FILLING_DATATYPE_BAG, CYBLACK_PATTERN_TRAVERSE_FILLING_DATATYPE_BAG_METHOD);
	classes.subloop_new_class(CYBLACK_POSTING_EXPRESSION, CYBLACK_PATTERN, NIL, NIL, NIL);
	classes.class_set_implements_slot_listeners(CYBLACK_POSTING_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_POSTING_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_POSTING_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_POSTING_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_POSTING_EXPRESSION_INSTANCE);
	subloop_reserved_initialize_cyblack_posting_expression_class(CYBLACK_POSTING_EXPRESSION);
	classes.subloop_new_class(CYBLACK_VARIABLE_REFERENCE, CYBLACK_POSTING_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt260, NIL, cyblack_precondition_pattern_p3.$list_alt261);
	classes.class_set_implements_slot_listeners(CYBLACK_VARIABLE_REFERENCE, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_VARIABLE_REFERENCE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_VARIABLE_REFERENCE_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_VARIABLE_REFERENCE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_VARIABLE_REFERENCE_INSTANCE);
	subloop_reserved_initialize_cyblack_variable_reference_class(CYBLACK_VARIABLE_REFERENCE);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_VARIABLE_REFERENCE, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt264);
	methods.subloop_register_instance_method(CYBLACK_VARIABLE_REFERENCE, INITIALIZE, CYBLACK_VARIABLE_REFERENCE_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_VARIABLE_REFERENCE, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p3.$list_alt267);
	methods.subloop_register_instance_method(CYBLACK_VARIABLE_REFERENCE, PRINT, CYBLACK_VARIABLE_REFERENCE_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_VARIABLE, CYBLACK_VARIABLE_REFERENCE, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt70);
	methods.subloop_register_instance_method(CYBLACK_VARIABLE_REFERENCE, GET_VARIABLE, CYBLACK_VARIABLE_REFERENCE_GET_VARIABLE_METHOD);
	methods.methods_incorporate_instance_method(SET_VARIABLE, CYBLACK_VARIABLE_REFERENCE, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt74, cyblack_precondition_pattern_p3.$list_alt270);
	methods.subloop_register_instance_method(CYBLACK_VARIABLE_REFERENCE, SET_VARIABLE, CYBLACK_VARIABLE_REFERENCE_SET_VARIABLE_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_VARIABLE_REFERENCE, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p3.$list_alt274);
	methods.subloop_register_instance_method(CYBLACK_VARIABLE_REFERENCE, GET_VALUE, CYBLACK_VARIABLE_REFERENCE_GET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_LITERAL, CYBLACK_PATTERN, cyblack_precondition_pattern_p3.$list_alt260, NIL, cyblack_precondition_pattern_p3.$list_alt279);
	classes.class_set_implements_slot_listeners(CYBLACK_LITERAL, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_LITERAL, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_LITERAL_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_LITERAL, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_LITERAL_INSTANCE);
	subloop_reserved_initialize_cyblack_literal_class(CYBLACK_LITERAL);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_LITERAL, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt283);
	methods.subloop_register_instance_method(CYBLACK_LITERAL, INITIALIZE, CYBLACK_LITERAL_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_LITERAL, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p3.$list_alt286);
	methods.subloop_register_instance_method(CYBLACK_LITERAL, PRINT, CYBLACK_LITERAL_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_LITERAL, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p2.$list_alt289);
	methods.subloop_register_instance_method(CYBLACK_LITERAL, GET_VALUE, CYBLACK_LITERAL_GET_VALUE_METHOD);
	methods.methods_incorporate_instance_method(SET_VALUE, CYBLACK_LITERAL, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt51, cyblack_precondition_pattern_p2.$list_alt291);
	methods.subloop_register_instance_method(CYBLACK_LITERAL, SET_VALUE, CYBLACK_LITERAL_SET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_NUMBER, CYBLACK_LITERAL, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt295);
	classes.class_set_implements_slot_listeners(CYBLACK_NUMBER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_NUMBER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_NUMBER_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_NUMBER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_NUMBER_INSTANCE);
	subloop_reserved_initialize_cyblack_number_class(CYBLACK_NUMBER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_NUMBER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt283);
	methods.subloop_register_instance_method(CYBLACK_NUMBER, INITIALIZE, CYBLACK_NUMBER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_NUMBER, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p2.$list_alt300);
	methods.subloop_register_instance_method(CYBLACK_NUMBER, PRINT, CYBLACK_NUMBER_PRINT_METHOD);
	classes.subloop_new_class(CYBLACK_INTEGER, CYBLACK_NUMBER, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt304);
	classes.class_set_implements_slot_listeners(CYBLACK_INTEGER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_INTEGER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_INTEGER_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_INTEGER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_INTEGER_INSTANCE);
	subloop_reserved_initialize_cyblack_integer_class(CYBLACK_INTEGER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_INTEGER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt307);
	methods.subloop_register_instance_method(CYBLACK_INTEGER, INITIALIZE, CYBLACK_INTEGER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_INTEGER, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p2.$list_alt310);
	methods.subloop_register_instance_method(CYBLACK_INTEGER, PRINT, CYBLACK_INTEGER_PRINT_METHOD);
	methods.methods_incorporate_instance_method(SET_VALUE, CYBLACK_INTEGER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt51, cyblack_precondition_pattern_p2.$list_alt312);
	methods.subloop_register_instance_method(CYBLACK_INTEGER, SET_VALUE, CYBLACK_INTEGER_SET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_REAL, CYBLACK_NUMBER, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt304);
	classes.class_set_implements_slot_listeners(CYBLACK_REAL, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_REAL, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_REAL_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_REAL, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_REAL_INSTANCE);
	subloop_reserved_initialize_cyblack_real_class(CYBLACK_REAL);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_REAL, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt317);
	methods.subloop_register_instance_method(CYBLACK_REAL, INITIALIZE, CYBLACK_REAL_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_REAL, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p2.$list_alt310);
	methods.subloop_register_instance_method(CYBLACK_REAL, PRINT, CYBLACK_REAL_PRINT_METHOD);
	methods.methods_incorporate_instance_method(SET_VALUE, CYBLACK_REAL, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt51, cyblack_precondition_pattern_p2.$list_alt322);
	methods.subloop_register_instance_method(CYBLACK_REAL, SET_VALUE, CYBLACK_REAL_SET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_STRING, CYBLACK_LITERAL, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt304);
	classes.class_set_implements_slot_listeners(CYBLACK_STRING, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_STRING, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_STRING_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_STRING, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_STRING_INSTANCE);
	subloop_reserved_initialize_cyblack_string_class(CYBLACK_STRING);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_STRING, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt327);
	methods.subloop_register_instance_method(CYBLACK_STRING, INITIALIZE, CYBLACK_STRING_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_STRING, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p2.$list_alt330);
	methods.subloop_register_instance_method(CYBLACK_STRING, PRINT, CYBLACK_STRING_PRINT_METHOD);
	methods.methods_incorporate_instance_method(SET_VALUE, CYBLACK_STRING, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt51, cyblack_precondition_pattern_p2.$list_alt333);
	methods.subloop_register_instance_method(CYBLACK_STRING, SET_VALUE, CYBLACK_STRING_SET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_SYMBOL, CYBLACK_LITERAL, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt304);
	classes.class_set_implements_slot_listeners(CYBLACK_SYMBOL, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_SYMBOL, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SYMBOL_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_SYMBOL, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SYMBOL_INSTANCE);
	subloop_reserved_initialize_cyblack_symbol_class(CYBLACK_SYMBOL);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_SYMBOL, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt283);
	methods.subloop_register_instance_method(CYBLACK_SYMBOL, INITIALIZE, CYBLACK_SYMBOL_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_SYMBOL, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p2.$list_alt310);
	methods.subloop_register_instance_method(CYBLACK_SYMBOL, PRINT, CYBLACK_SYMBOL_PRINT_METHOD);
	methods.methods_incorporate_instance_method(SET_VALUE, CYBLACK_SYMBOL, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt51, cyblack_precondition_pattern_p2.$list_alt341);
	methods.subloop_register_instance_method(CYBLACK_SYMBOL, SET_VALUE, CYBLACK_SYMBOL_SET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_FORT, CYBLACK_LITERAL, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt304);
	classes.class_set_implements_slot_listeners(CYBLACK_FORT, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_FORT, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_FORT_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_FORT, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_FORT_INSTANCE);
	subloop_reserved_initialize_cyblack_fort_class(CYBLACK_FORT);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_FORT, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt283);
	methods.subloop_register_instance_method(CYBLACK_FORT, INITIALIZE, CYBLACK_FORT_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_FORT, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p2.$list_alt310);
	methods.subloop_register_instance_method(CYBLACK_FORT, PRINT, CYBLACK_FORT_PRINT_METHOD);
	methods.methods_incorporate_instance_method(SET_VALUE, CYBLACK_FORT, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt51, cyblack_precondition_pattern_p2.$list_alt350);
	methods.subloop_register_instance_method(CYBLACK_FORT, SET_VALUE, CYBLACK_FORT_SET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_CONSTANT_SYMBOL, CYBLACK_SYMBOL, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt354);
	classes.class_set_implements_slot_listeners(CYBLACK_CONSTANT_SYMBOL, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_CONSTANT_SYMBOL, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_CONSTANT_SYMBOL_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_CONSTANT_SYMBOL, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_CONSTANT_SYMBOL_INSTANCE);
	subloop_reserved_initialize_cyblack_constant_symbol_class(CYBLACK_CONSTANT_SYMBOL);
	methods.methods_incorporate_instance_method(SET_VALUE, CYBLACK_CONSTANT_SYMBOL, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt51, cyblack_precondition_pattern_p2.$list_alt357);
	methods.subloop_register_instance_method(CYBLACK_CONSTANT_SYMBOL, SET_VALUE, CYBLACK_CONSTANT_SYMBOL_SET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_TRUE, CYBLACK_CONSTANT_SYMBOL, cyblack_precondition_pattern_p2.$list_alt362, NIL, cyblack_precondition_pattern_p2.$list_alt363);
	classes.class_set_implements_slot_listeners(CYBLACK_TRUE, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_TRUE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_TRUE_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_TRUE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_TRUE_INSTANCE);
	subloop_reserved_initialize_cyblack_true_class(CYBLACK_TRUE);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_TRUE, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt366);
	methods.subloop_register_instance_method(CYBLACK_TRUE, INITIALIZE, CYBLACK_TRUE_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_TRUE, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p2.$list_alt369);
	methods.subloop_register_instance_method(CYBLACK_TRUE, PRINT, CYBLACK_TRUE_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_TRUE, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p2.$list_alt372);
	methods.subloop_register_instance_method(CYBLACK_TRUE, GET_VALUE, CYBLACK_TRUE_GET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_FALSE, CYBLACK_CONSTANT_SYMBOL, cyblack_precondition_pattern_p2.$list_alt362, NIL, cyblack_precondition_pattern_p2.$list_alt363);
	classes.class_set_implements_slot_listeners(CYBLACK_FALSE, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_FALSE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_FALSE_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_FALSE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_FALSE_INSTANCE);
	subloop_reserved_initialize_cyblack_false_class(CYBLACK_FALSE);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_FALSE, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt283);
	methods.subloop_register_instance_method(CYBLACK_FALSE, INITIALIZE, CYBLACK_FALSE_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_FALSE, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p2.$list_alt379);
	methods.subloop_register_instance_method(CYBLACK_FALSE, PRINT, CYBLACK_FALSE_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_FALSE, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p2.$list_alt382);
	methods.subloop_register_instance_method(CYBLACK_FALSE, GET_VALUE, CYBLACK_FALSE_GET_VALUE_METHOD);
	enumerations.enumerations_incorporate_definition(CYBLACK_MONITORING_PATTERN_ACTION_TYPE, cyblack_precondition_pattern_p2.$list_alt384);
	enumerations.enumerations_incorporate_definition(CYBLACK_MONITORING_PATTERN_ACTION_QUALIFIER_TYPE, cyblack_precondition_pattern_p2.$list_alt389);
	classes.subloop_new_class(CYBLACK_MONITORING_PATTERN, CYBLACK_PATTERN, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt395);
	classes.class_set_implements_slot_listeners(CYBLACK_MONITORING_PATTERN, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_MONITORING_PATTERN, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_MONITORING_PATTERN_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_MONITORING_PATTERN, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_MONITORING_PATTERN_INSTANCE);
	subloop_reserved_initialize_cyblack_monitoring_pattern_class(CYBLACK_MONITORING_PATTERN);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_MONITORING_PATTERN, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt403);
	methods.subloop_register_instance_method(CYBLACK_MONITORING_PATTERN, INITIALIZE, CYBLACK_MONITORING_PATTERN_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_MONITORING_PATTERN, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p2.$list_alt406);
	methods.subloop_register_instance_method(CYBLACK_MONITORING_PATTERN, PRINT, CYBLACK_MONITORING_PATTERN_PRINT_METHOD);
	methods.methods_incorporate_instance_method(CLONE, CYBLACK_MONITORING_PATTERN, cyblack_precondition_pattern_p2.$list_alt29, NIL, cyblack_precondition_pattern_p2.$list_alt410);
	methods.subloop_register_instance_method(CYBLACK_MONITORING_PATTERN, CLONE, CYBLACK_MONITORING_PATTERN_CLONE_METHOD);
	methods.methods_incorporate_instance_method(TRAVERSE_FILLING_DATATYPE_BAG, CYBLACK_MONITORING_PATTERN, cyblack_precondition_pattern_p2.$list_alt415, cyblack_precondition_pattern_p3.$list_alt253, cyblack_precondition_pattern_p2.$list_alt416);
	methods.subloop_register_instance_method(CYBLACK_MONITORING_PATTERN, TRAVERSE_FILLING_DATATYPE_BAG, CYBLACK_MONITORING_PATTERN_TRAVERSE_FILLING_DATATYPE_BAG_METHOD);
	methods.methods_incorporate_instance_method(GET_ENVIRONMENT, CYBLACK_MONITORING_PATTERN, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt420);
	methods.subloop_register_instance_method(CYBLACK_MONITORING_PATTERN, GET_ENVIRONMENT, CYBLACK_MONITORING_PATTERN_GET_ENVIRONMENT_METHOD);
	methods.methods_incorporate_instance_method(SET_ENVIRONMENT, CYBLACK_MONITORING_PATTERN, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt423, cyblack_precondition_pattern_p2.$list_alt424);
	methods.subloop_register_instance_method(CYBLACK_MONITORING_PATTERN, SET_ENVIRONMENT, CYBLACK_MONITORING_PATTERN_SET_ENVIRONMENT_METHOD);
	methods.methods_incorporate_instance_method(GET_MONITOR_ARGS, CYBLACK_MONITORING_PATTERN, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt428);
	methods.subloop_register_instance_method(CYBLACK_MONITORING_PATTERN, GET_MONITOR_ARGS, CYBLACK_MONITORING_PATTERN_GET_MONITOR_ARGS_METHOD);
	methods.methods_incorporate_instance_method(SET_MONITOR_ARGS, CYBLACK_MONITORING_PATTERN, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt430, cyblack_precondition_pattern_p2.$list_alt431);
	methods.subloop_register_instance_method(CYBLACK_MONITORING_PATTERN, SET_MONITOR_ARGS, CYBLACK_MONITORING_PATTERN_SET_MONITOR_ARGS_METHOD);
	methods.methods_incorporate_instance_method(GET_ACTION, CYBLACK_MONITORING_PATTERN, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt435);
	methods.subloop_register_instance_method(CYBLACK_MONITORING_PATTERN, GET_ACTION, CYBLACK_MONITORING_PATTERN_GET_ACTION_METHOD);
	methods.methods_incorporate_instance_method(SET_ACTION, CYBLACK_MONITORING_PATTERN, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt438, cyblack_precondition_pattern_p2.$list_alt439);
	methods.subloop_register_instance_method(CYBLACK_MONITORING_PATTERN, SET_ACTION, CYBLACK_MONITORING_PATTERN_SET_ACTION_METHOD);
	methods.methods_incorporate_instance_method(GET_ACTION_QUALIFIERS, CYBLACK_MONITORING_PATTERN, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt443);
	methods.subloop_register_instance_method(CYBLACK_MONITORING_PATTERN, GET_ACTION_QUALIFIERS, CYBLACK_MONITORING_PATTERN_GET_ACTION_QUALIFIERS_METHOD);
	methods.methods_incorporate_instance_method(SET_ACTION_QUALIFIERS, CYBLACK_MONITORING_PATTERN, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt446, cyblack_precondition_pattern_p2.$list_alt447);
	methods.subloop_register_instance_method(CYBLACK_MONITORING_PATTERN, SET_ACTION_QUALIFIERS, CYBLACK_MONITORING_PATTERN_SET_ACTION_QUALIFIERS_METHOD);
	methods.methods_incorporate_instance_method(GET_LOCAL_BINDINGS, CYBLACK_MONITORING_PATTERN, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt140);
	methods.subloop_register_instance_method(CYBLACK_MONITORING_PATTERN, GET_LOCAL_BINDINGS, CYBLACK_MONITORING_PATTERN_GET_LOCAL_BINDINGS_METHOD);
	methods.methods_incorporate_instance_method(SET_LOCAL_BINDINGS, CYBLACK_MONITORING_PATTERN, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt143, cyblack_precondition_pattern_p2.$list_alt451);
	methods.subloop_register_instance_method(CYBLACK_MONITORING_PATTERN, SET_LOCAL_BINDINGS, CYBLACK_MONITORING_PATTERN_SET_LOCAL_BINDINGS_METHOD);
	methods.methods_incorporate_instance_method(GET_LOGICAL_FORM, CYBLACK_MONITORING_PATTERN, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt455);
	methods.subloop_register_instance_method(CYBLACK_MONITORING_PATTERN, GET_LOGICAL_FORM, CYBLACK_MONITORING_PATTERN_GET_LOGICAL_FORM_METHOD);
	methods.methods_incorporate_instance_method(SET_LOGICAL_FORM, CYBLACK_MONITORING_PATTERN, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt458, cyblack_precondition_pattern_p2.$list_alt459);
	methods.subloop_register_instance_method(CYBLACK_MONITORING_PATTERN, SET_LOGICAL_FORM, CYBLACK_MONITORING_PATTERN_SET_LOGICAL_FORM_METHOD);
	methods.methods_incorporate_instance_method(GET_UNIQUE_BINDINGS, CYBLACK_MONITORING_PATTERN, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt462);
	methods.subloop_register_instance_method(CYBLACK_MONITORING_PATTERN, GET_UNIQUE_BINDINGS, CYBLACK_MONITORING_PATTERN_GET_UNIQUE_BINDINGS_METHOD);
	classes.subloop_new_class(CYBLACK_PRECON_PATTERN, CYBLACK_PATTERN, cyblack_precondition_pattern_p3.$list_alt260, NIL, cyblack_precondition_pattern_p2.$list_alt465);
	classes.class_set_implements_slot_listeners(CYBLACK_PRECON_PATTERN, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_PRECON_PATTERN, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PRECON_PATTERN_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_PRECON_PATTERN, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PRECON_PATTERN_INSTANCE);
	subloop_reserved_initialize_cyblack_precon_pattern_class(CYBLACK_PRECON_PATTERN);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_PRECON_PATTERN, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt469);
	methods.subloop_register_instance_method(CYBLACK_PRECON_PATTERN, INITIALIZE, CYBLACK_PRECON_PATTERN_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_PRECON_PATTERN, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p2.$list_alt472);
	methods.subloop_register_instance_method(CYBLACK_PRECON_PATTERN, PRINT, CYBLACK_PRECON_PATTERN_PRINT_METHOD);
	methods.methods_incorporate_instance_method(CLONE, CYBLACK_PRECON_PATTERN, cyblack_precondition_pattern_p2.$list_alt29, NIL, cyblack_precondition_pattern_p2.$list_alt476);
	methods.subloop_register_instance_method(CYBLACK_PRECON_PATTERN, CLONE, CYBLACK_PRECON_PATTERN_CLONE_METHOD);
	methods.methods_incorporate_instance_method(TRAVERSE_FILLING_DATATYPE_BAG, CYBLACK_PRECON_PATTERN, cyblack_precondition_pattern_p2.$list_alt415, cyblack_precondition_pattern_p3.$list_alt253, cyblack_precondition_pattern_p2.$list_alt416);
	methods.subloop_register_instance_method(CYBLACK_PRECON_PATTERN, TRAVERSE_FILLING_DATATYPE_BAG, CYBLACK_PRECON_PATTERN_TRAVERSE_FILLING_DATATYPE_BAG_METHOD);
	methods.methods_incorporate_instance_method(GET_ENVIRONMENT, CYBLACK_PRECON_PATTERN, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt420);
	methods.subloop_register_instance_method(CYBLACK_PRECON_PATTERN, GET_ENVIRONMENT, CYBLACK_PRECON_PATTERN_GET_ENVIRONMENT_METHOD);
	methods.methods_incorporate_instance_method(SET_ENVIRONMENT, CYBLACK_PRECON_PATTERN, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt423, cyblack_precondition_pattern_p2.$list_alt482);
	methods.subloop_register_instance_method(CYBLACK_PRECON_PATTERN, SET_ENVIRONMENT, CYBLACK_PRECON_PATTERN_SET_ENVIRONMENT_METHOD);
	methods.methods_incorporate_instance_method(GET_KS_ARGS, CYBLACK_PRECON_PATTERN, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt486);
	methods.subloop_register_instance_method(CYBLACK_PRECON_PATTERN, GET_KS_ARGS, CYBLACK_PRECON_PATTERN_GET_KS_ARGS_METHOD);
	methods.methods_incorporate_instance_method(SET_KS_ARGS, CYBLACK_PRECON_PATTERN, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt488, cyblack_precondition_pattern_p2.$list_alt489);
	methods.subloop_register_instance_method(CYBLACK_PRECON_PATTERN, SET_KS_ARGS, CYBLACK_PRECON_PATTERN_SET_KS_ARGS_METHOD);
	methods.methods_incorporate_instance_method(GET_LOCAL_BINDINGS, CYBLACK_PRECON_PATTERN, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt140);
	methods.subloop_register_instance_method(CYBLACK_PRECON_PATTERN, GET_LOCAL_BINDINGS, CYBLACK_PRECON_PATTERN_GET_LOCAL_BINDINGS_METHOD);
	methods.methods_incorporate_instance_method(SET_LOCAL_BINDINGS, CYBLACK_PRECON_PATTERN, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt143, cyblack_precondition_pattern_p2.$list_alt493);
	methods.subloop_register_instance_method(CYBLACK_PRECON_PATTERN, SET_LOCAL_BINDINGS, CYBLACK_PRECON_PATTERN_SET_LOCAL_BINDINGS_METHOD);
	methods.methods_incorporate_instance_method(GET_LOGICAL_FORM, CYBLACK_PRECON_PATTERN, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt455);
	methods.subloop_register_instance_method(CYBLACK_PRECON_PATTERN, GET_LOGICAL_FORM, CYBLACK_PRECON_PATTERN_GET_LOGICAL_FORM_METHOD);
	methods.methods_incorporate_instance_method(SET_LOGICAL_FORM, CYBLACK_PRECON_PATTERN, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt458, cyblack_precondition_pattern_p2.$list_alt497);
	methods.subloop_register_instance_method(CYBLACK_PRECON_PATTERN, SET_LOGICAL_FORM, CYBLACK_PRECON_PATTERN_SET_LOGICAL_FORM_METHOD);
	methods.methods_incorporate_instance_method(GET_UNIQUE_BINDINGS, CYBLACK_PRECON_PATTERN, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt462);
	methods.subloop_register_instance_method(CYBLACK_PRECON_PATTERN, GET_UNIQUE_BINDINGS, CYBLACK_PRECON_PATTERN_GET_UNIQUE_BINDINGS_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_PRECON_PATTERN, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt501, cyblack_precondition_pattern_p2.$list_alt502);
	methods.subloop_register_instance_method(CYBLACK_PRECON_PATTERN, GET_VALUE, CYBLACK_PRECON_PATTERN_GET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_SATISFACTION_EXPRESSION, CYBLACK_PATTERN, cyblack_precondition_pattern_p3.$list_alt260, NIL, cyblack_precondition_pattern_p2.$list_alt505);
	classes.class_set_implements_slot_listeners(CYBLACK_SATISFACTION_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_SATISFACTION_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SATISFACTION_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_SATISFACTION_EXPRESSION, $sym508$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SATISFACTION_EXPRESSION_INSTA);
	subloop_reserved_initialize_cyblack_satisfaction_expression_class(CYBLACK_SATISFACTION_EXPRESSION);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_SATISFACTION_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt509);
	methods.subloop_register_instance_method(CYBLACK_SATISFACTION_EXPRESSION, INITIALIZE, CYBLACK_SATISFACTION_EXPRESSION_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_SATISFACTION_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p2.$list_alt512);
	methods.subloop_register_instance_method(CYBLACK_SATISFACTION_EXPRESSION, PRINT, CYBLACK_SATISFACTION_EXPRESSION_PRINT_METHOD);
	methods.methods_incorporate_instance_method(TRAVERSE_FILLING_DATATYPE_BAG, CYBLACK_SATISFACTION_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt415, cyblack_precondition_pattern_p3.$list_alt253, cyblack_precondition_pattern_p2.$list_alt516);
	methods.subloop_register_instance_method(CYBLACK_SATISFACTION_EXPRESSION, TRAVERSE_FILLING_DATATYPE_BAG, $sym517$CYBLACK_SATISFACTION_EXPRESSION_TRAVERSE_FILLING_DATATYPE_BAG_MET);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_SATISFACTION_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt518, cyblack_precondition_pattern_p2.$list_alt519);
	methods.subloop_register_instance_method(CYBLACK_SATISFACTION_EXPRESSION, GET_VALUE, CYBLACK_SATISFACTION_EXPRESSION_GET_VALUE_METHOD);
	methods.methods_incorporate_instance_method(GET_ENVIRONMENT, CYBLACK_SATISFACTION_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt420);
	methods.subloop_register_instance_method(CYBLACK_SATISFACTION_EXPRESSION, GET_ENVIRONMENT, CYBLACK_SATISFACTION_EXPRESSION_GET_ENVIRONMENT_METHOD);
	methods.methods_incorporate_instance_method(SET_ENVIRONMENT, CYBLACK_SATISFACTION_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt423, cyblack_precondition_pattern_p2.$list_alt522);
	methods.subloop_register_instance_method(CYBLACK_SATISFACTION_EXPRESSION, SET_ENVIRONMENT, CYBLACK_SATISFACTION_EXPRESSION_SET_ENVIRONMENT_METHOD);
	methods.methods_incorporate_instance_method(GET_LOCAL_BINDINGS, CYBLACK_SATISFACTION_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt140);
	methods.subloop_register_instance_method(CYBLACK_SATISFACTION_EXPRESSION, GET_LOCAL_BINDINGS, CYBLACK_SATISFACTION_EXPRESSION_GET_LOCAL_BINDINGS_METHOD);
	methods.methods_incorporate_instance_method(SET_LOCAL_BINDINGS, CYBLACK_SATISFACTION_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt143, cyblack_precondition_pattern_p2.$list_alt493);
	methods.subloop_register_instance_method(CYBLACK_SATISFACTION_EXPRESSION, SET_LOCAL_BINDINGS, CYBLACK_SATISFACTION_EXPRESSION_SET_LOCAL_BINDINGS_METHOD);
	methods.methods_incorporate_instance_method(GET_LOGICAL_EXPRESSION, CYBLACK_SATISFACTION_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt529);
	methods.subloop_register_instance_method(CYBLACK_SATISFACTION_EXPRESSION, GET_LOGICAL_EXPRESSION, CYBLACK_SATISFACTION_EXPRESSION_GET_LOGICAL_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(SET_LOGICAL_EXPRESSION, CYBLACK_SATISFACTION_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt532, cyblack_precondition_pattern_p2.$list_alt533);
	methods.subloop_register_instance_method(CYBLACK_SATISFACTION_EXPRESSION, SET_LOGICAL_EXPRESSION, CYBLACK_SATISFACTION_EXPRESSION_SET_LOGICAL_EXPRESSION_METHOD);
	classes.subloop_new_class(CYBLACK_SIMPLE_SATISFACTION_EXPRESSION, CYBLACK_SATISFACTION_EXPRESSION, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt537);
	classes.class_set_implements_slot_listeners(CYBLACK_SIMPLE_SATISFACTION_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_SIMPLE_SATISFACTION_EXPRESSION, $sym538$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SIMPLE_SATISFACTION_EXPRESSIO);
	classes.subloop_note_instance_initialization_function(CYBLACK_SIMPLE_SATISFACTION_EXPRESSION, $sym539$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SIMPLE_SATISFACTION_EXPRESSIO);
	subloop_reserved_initialize_cyblack_simple_satisfaction_expression_class(CYBLACK_SIMPLE_SATISFACTION_EXPRESSION);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_SIMPLE_SATISFACTION_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p2.$list_alt540);
	methods.subloop_register_instance_method(CYBLACK_SIMPLE_SATISFACTION_EXPRESSION, PRINT, CYBLACK_SIMPLE_SATISFACTION_EXPRESSION_PRINT_METHOD);
	classes.subloop_new_class(CYBLACK_TYPE_EXPRESSION, CYBLACK_PATTERN, cyblack_precondition_pattern_p2.$list_alt544, NIL, cyblack_precondition_pattern_p2.$list_alt545);
	classes.class_set_implements_slot_listeners(CYBLACK_TYPE_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_TYPE_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_TYPE_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_TYPE_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_TYPE_EXPRESSION_INSTANCE);
	subloop_reserved_initialize_cyblack_type_expression_class(CYBLACK_TYPE_EXPRESSION);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_TYPE_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt549);
	methods.subloop_register_instance_method(CYBLACK_TYPE_EXPRESSION, INITIALIZE, CYBLACK_TYPE_EXPRESSION_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_TYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p2.$list_alt552);
	methods.subloop_register_instance_method(CYBLACK_TYPE_EXPRESSION, PRINT, CYBLACK_TYPE_EXPRESSION_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_BASE_TYPE, CYBLACK_TYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt556);
	methods.subloop_register_instance_method(CYBLACK_TYPE_EXPRESSION, GET_BASE_TYPE, CYBLACK_TYPE_EXPRESSION_GET_BASE_TYPE_METHOD);
	methods.methods_incorporate_instance_method(SET_BASE_TYPE, CYBLACK_TYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt559, cyblack_precondition_pattern_p2.$list_alt560);
	methods.subloop_register_instance_method(CYBLACK_TYPE_EXPRESSION, SET_BASE_TYPE, CYBLACK_TYPE_EXPRESSION_SET_BASE_TYPE_METHOD);
	methods.methods_incorporate_instance_method(GET_PANEL, CYBLACK_TYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt564, cyblack_precondition_pattern_p2.$list_alt565);
	methods.subloop_register_instance_method(CYBLACK_TYPE_EXPRESSION, GET_PANEL, CYBLACK_TYPE_EXPRESSION_GET_PANEL_METHOD);
	methods.methods_incorporate_instance_method(GET_TYPENAME, CYBLACK_TYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt568);
	methods.subloop_register_instance_method(CYBLACK_TYPE_EXPRESSION, GET_TYPENAME, CYBLACK_TYPE_EXPRESSION_GET_TYPENAME_METHOD);
	methods.methods_incorporate_instance_method(GET_SUPERTYPES, CYBLACK_TYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt571);
	methods.subloop_register_instance_method(CYBLACK_TYPE_EXPRESSION, GET_SUPERTYPES, CYBLACK_TYPE_EXPRESSION_GET_SUPERTYPES_METHOD);
	methods.methods_incorporate_instance_method(SET_SUPERTYPES, CYBLACK_TYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt574, cyblack_precondition_pattern_p2.$list_alt575);
	methods.subloop_register_instance_method(CYBLACK_TYPE_EXPRESSION, SET_SUPERTYPES, CYBLACK_TYPE_EXPRESSION_SET_SUPERTYPES_METHOD);
	methods.methods_incorporate_instance_method(GET_SUBTYPES, CYBLACK_TYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt578);
	methods.subloop_register_instance_method(CYBLACK_TYPE_EXPRESSION, GET_SUBTYPES, CYBLACK_TYPE_EXPRESSION_GET_SUBTYPES_METHOD);
	methods.methods_incorporate_instance_method(SET_SUBTYPES, CYBLACK_TYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt581, cyblack_precondition_pattern_p2.$list_alt582);
	methods.subloop_register_instance_method(CYBLACK_TYPE_EXPRESSION, SET_SUBTYPES, CYBLACK_TYPE_EXPRESSION_SET_SUBTYPES_METHOD);
	methods.methods_incorporate_instance_method(SUBTYPE_P, CYBLACK_TYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt585, cyblack_precondition_pattern_p2.$list_alt586);
	methods.subloop_register_instance_method(CYBLACK_TYPE_EXPRESSION, SUBTYPE_P, CYBLACK_TYPE_EXPRESSION_SUBTYPE_P_METHOD);
	methods.methods_incorporate_instance_method(INSTANCE_OF_P, CYBLACK_TYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt589, cyblack_precondition_pattern_p2.$list_alt590);
	methods.subloop_register_instance_method(CYBLACK_TYPE_EXPRESSION, INSTANCE_OF_P, CYBLACK_TYPE_EXPRESSION_INSTANCE_OF_P_METHOD);
	methods.methods_incorporate_instance_method(SET_PANEL_TYPE, CYBLACK_TYPE_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p2.$list_alt593, cyblack_precondition_pattern_p2.$list_alt594);
	methods.subloop_register_instance_method(CYBLACK_TYPE_EXPRESSION, SET_PANEL_TYPE, CYBLACK_TYPE_EXPRESSION_SET_PANEL_TYPE_METHOD);
	methods.methods_incorporate_instance_method(GET_POSTING_TYPE, CYBLACK_TYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt597);
	methods.subloop_register_instance_method(CYBLACK_TYPE_EXPRESSION, GET_POSTING_TYPE, CYBLACK_TYPE_EXPRESSION_GET_POSTING_TYPE_METHOD);
	methods.methods_incorporate_instance_method(SET_POSTING_TYPE, CYBLACK_TYPE_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p2.$list_alt600, cyblack_precondition_pattern_p2.$list_alt601);
	methods.subloop_register_instance_method(CYBLACK_TYPE_EXPRESSION, SET_POSTING_TYPE, CYBLACK_TYPE_EXPRESSION_SET_POSTING_TYPE_METHOD);
	methods.methods_incorporate_instance_method(CREATE_PANEL, CYBLACK_TYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt604, cyblack_precondition_pattern_p2.$list_alt605);
	methods.subloop_register_instance_method(CYBLACK_TYPE_EXPRESSION, CREATE_PANEL, CYBLACK_TYPE_EXPRESSION_CREATE_PANEL_METHOD);
	methods.methods_incorporate_instance_method(CREATE_POSTING, CYBLACK_TYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt608);
	methods.subloop_register_instance_method(CYBLACK_TYPE_EXPRESSION, CREATE_POSTING, CYBLACK_TYPE_EXPRESSION_CREATE_POSTING_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_TYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p2.$list_alt610);
	methods.subloop_register_instance_method(CYBLACK_TYPE_EXPRESSION, GET_VALUE, CYBLACK_TYPE_EXPRESSION_GET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_SUBTYPE_EXPRESSION, CYBLACK_TYPE_EXPRESSION, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt613);
	classes.class_set_implements_slot_listeners(CYBLACK_SUBTYPE_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_SUBTYPE_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SUBTYPE_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_SUBTYPE_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SUBTYPE_EXPRESSION_INSTANCE);
	subloop_reserved_initialize_cyblack_subtype_expression_class(CYBLACK_SUBTYPE_EXPRESSION);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_SUBTYPE_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt618);
	methods.subloop_register_instance_method(CYBLACK_SUBTYPE_EXPRESSION, INITIALIZE, CYBLACK_SUBTYPE_EXPRESSION_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_SUBTYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p2.$list_alt621);
	methods.subloop_register_instance_method(CYBLACK_SUBTYPE_EXPRESSION, PRINT, CYBLACK_SUBTYPE_EXPRESSION_PRINT_METHOD);
	methods.methods_incorporate_instance_method(PRINT_ARGS, CYBLACK_SUBTYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt626, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p2.$list_alt628);
	methods.subloop_register_instance_method(CYBLACK_SUBTYPE_EXPRESSION, PRINT_ARGS, CYBLACK_SUBTYPE_EXPRESSION_PRINT_ARGS_METHOD);
	methods.methods_incorporate_instance_method(GET_PREDICATOR_METHOD, CYBLACK_SUBTYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt632);
	methods.subloop_register_instance_method(CYBLACK_SUBTYPE_EXPRESSION, GET_PREDICATOR_METHOD, CYBLACK_SUBTYPE_EXPRESSION_GET_PREDICATOR_METHOD_METHOD);
	methods.methods_incorporate_instance_method(SET_PREDICATOR_METHOD, CYBLACK_SUBTYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt635, cyblack_precondition_pattern_p2.$list_alt636);
	methods.subloop_register_instance_method(CYBLACK_SUBTYPE_EXPRESSION, SET_PREDICATOR_METHOD, CYBLACK_SUBTYPE_EXPRESSION_SET_PREDICATOR_METHOD_METHOD);
	methods.methods_incorporate_instance_method(GET_ARGS, CYBLACK_SUBTYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt640);
	methods.subloop_register_instance_method(CYBLACK_SUBTYPE_EXPRESSION, GET_ARGS, CYBLACK_SUBTYPE_EXPRESSION_GET_ARGS_METHOD);
	methods.methods_incorporate_instance_method(SET_ARGS, CYBLACK_SUBTYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt643, cyblack_precondition_pattern_p2.$list_alt644);
	methods.subloop_register_instance_method(CYBLACK_SUBTYPE_EXPRESSION, SET_ARGS, CYBLACK_SUBTYPE_EXPRESSION_SET_ARGS_METHOD);
	methods.methods_incorporate_instance_method(GET_PANEL, CYBLACK_SUBTYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt564, cyblack_precondition_pattern_p2.$list_alt647);
	methods.subloop_register_instance_method(CYBLACK_SUBTYPE_EXPRESSION, GET_PANEL, CYBLACK_SUBTYPE_EXPRESSION_GET_PANEL_METHOD);
	methods.methods_incorporate_instance_method(GET_TYPENAME, CYBLACK_SUBTYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt650);
	methods.subloop_register_instance_method(CYBLACK_SUBTYPE_EXPRESSION, GET_TYPENAME, CYBLACK_SUBTYPE_EXPRESSION_GET_TYPENAME_METHOD);
	methods.methods_incorporate_instance_method(GET_SUPERTYPES, CYBLACK_SUBTYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt652);
	methods.subloop_register_instance_method(CYBLACK_SUBTYPE_EXPRESSION, GET_SUPERTYPES, CYBLACK_SUBTYPE_EXPRESSION_GET_SUPERTYPES_METHOD);
	methods.methods_incorporate_instance_method(GET_SUBTYPES, CYBLACK_SUBTYPE_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, NIL, cyblack_precondition_pattern_p2.$list_alt654);
	methods.subloop_register_instance_method(CYBLACK_SUBTYPE_EXPRESSION, GET_SUBTYPES, CYBLACK_SUBTYPE_EXPRESSION_GET_SUBTYPES_METHOD);
	methods.methods_incorporate_instance_method(SUBTYPE_P, CYBLACK_SUBTYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt585, cyblack_precondition_pattern_p2.$list_alt656);
	methods.subloop_register_instance_method(CYBLACK_SUBTYPE_EXPRESSION, SUBTYPE_P, CYBLACK_SUBTYPE_EXPRESSION_SUBTYPE_P_METHOD);
	methods.methods_incorporate_instance_method(INSTANCE_OF_P, CYBLACK_SUBTYPE_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt589, cyblack_precondition_pattern_p2.$list_alt658);
	methods.subloop_register_instance_method(CYBLACK_SUBTYPE_EXPRESSION, INSTANCE_OF_P, CYBLACK_SUBTYPE_EXPRESSION_INSTANCE_OF_P_METHOD);
	methods.methods_incorporate_instance_method(CREATE_PANEL, CYBLACK_SUBTYPE_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p2.$list_alt604, cyblack_precondition_pattern_p2.$list_alt660);
	methods.subloop_register_instance_method(CYBLACK_SUBTYPE_EXPRESSION, CREATE_PANEL, CYBLACK_SUBTYPE_EXPRESSION_CREATE_PANEL_METHOD);
	classes.subloop_new_class(CYBLACK_PANEL_EXPRESSION, CYBLACK_PATTERN, cyblack_precondition_pattern_p3.$list_alt260, NIL, cyblack_precondition_pattern_p2.$list_alt663);
	classes.class_set_implements_slot_listeners(CYBLACK_PANEL_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_PANEL_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PANEL_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_PANEL_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PANEL_EXPRESSION_INSTANCE);
	subloop_reserved_initialize_cyblack_panel_expression_class(CYBLACK_PANEL_EXPRESSION);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_PANEL_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt668);
	methods.subloop_register_instance_method(CYBLACK_PANEL_EXPRESSION, INITIALIZE, CYBLACK_PANEL_EXPRESSION_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_PANEL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p2.$list_alt671);
	methods.subloop_register_instance_method(CYBLACK_PANEL_EXPRESSION, PRINT, CYBLACK_PANEL_EXPRESSION_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_TYPE_EXPRESSION, CYBLACK_PANEL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt676);
	methods.subloop_register_instance_method(CYBLACK_PANEL_EXPRESSION, GET_TYPE_EXPRESSION, CYBLACK_PANEL_EXPRESSION_GET_TYPE_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(SET_TYPE_EXPRESSION, CYBLACK_PANEL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt679, cyblack_precondition_pattern_p2.$list_alt680);
	methods.subloop_register_instance_method(CYBLACK_PANEL_EXPRESSION, SET_TYPE_EXPRESSION, CYBLACK_PANEL_EXPRESSION_SET_TYPE_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(GET_BLACKBOARD, CYBLACK_PANEL_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt684);
	methods.subloop_register_instance_method(CYBLACK_PANEL_EXPRESSION, GET_BLACKBOARD, CYBLACK_PANEL_EXPRESSION_GET_BLACKBOARD_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_PANEL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p2.$list_alt687);
	methods.subloop_register_instance_method(CYBLACK_PANEL_EXPRESSION, GET_VALUE, CYBLACK_PANEL_EXPRESSION_GET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_GET_EXPRESSION, CYBLACK_PATTERN, cyblack_precondition_pattern_p3.$list_alt260, NIL, cyblack_precondition_pattern_p2.$list_alt691);
	classes.class_set_implements_slot_listeners(CYBLACK_GET_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_GET_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_GET_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_GET_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_GET_EXPRESSION_INSTANCE);
	subloop_reserved_initialize_cyblack_get_expression_class(CYBLACK_GET_EXPRESSION);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_GET_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt696);
	methods.subloop_register_instance_method(CYBLACK_GET_EXPRESSION, INITIALIZE, CYBLACK_GET_EXPRESSION_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_GET_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p2.$list_alt699);
	methods.subloop_register_instance_method(CYBLACK_GET_EXPRESSION, PRINT, CYBLACK_GET_EXPRESSION_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_PANEL_EXPRESSION, CYBLACK_GET_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt704);
	methods.subloop_register_instance_method(CYBLACK_GET_EXPRESSION, GET_PANEL_EXPRESSION, CYBLACK_GET_EXPRESSION_GET_PANEL_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(SET_PANEL_EXPRESSION, CYBLACK_GET_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt707, cyblack_precondition_pattern_p2.$list_alt708);
	methods.subloop_register_instance_method(CYBLACK_GET_EXPRESSION, SET_PANEL_EXPRESSION, CYBLACK_GET_EXPRESSION_SET_PANEL_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(GET_KEY_EXPRESSION, CYBLACK_GET_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt712);
	methods.subloop_register_instance_method(CYBLACK_GET_EXPRESSION, GET_KEY_EXPRESSION, CYBLACK_GET_EXPRESSION_GET_KEY_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(SET_KEY_EXPRESSION, CYBLACK_GET_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt715, cyblack_precondition_pattern_p2.$list_alt716);
	methods.subloop_register_instance_method(CYBLACK_GET_EXPRESSION, SET_KEY_EXPRESSION, CYBLACK_GET_EXPRESSION_SET_KEY_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_GET_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p2.$list_alt719);
	methods.subloop_register_instance_method(CYBLACK_GET_EXPRESSION, GET_VALUE, CYBLACK_GET_EXPRESSION_GET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_BASIC_LOGICAL_EXPRESSION, CYBLACK_PATTERN, cyblack_precondition_pattern_p2.$list_alt723, NIL, cyblack_precondition_pattern_p3.$list_alt230);
	classes.class_set_implements_slot_listeners(CYBLACK_BASIC_LOGICAL_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_BASIC_LOGICAL_EXPRESSION, $sym724$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_BASIC_LOGICAL_EXPRESSION_CLAS);
	classes.subloop_note_instance_initialization_function(CYBLACK_BASIC_LOGICAL_EXPRESSION, $sym725$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_BASIC_LOGICAL_EXPRESSION_INST);
	subloop_reserved_initialize_cyblack_basic_logical_expression_class(CYBLACK_BASIC_LOGICAL_EXPRESSION);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_BASIC_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p2.$list_alt382);
	methods.subloop_register_instance_method(CYBLACK_BASIC_LOGICAL_EXPRESSION, GET_VALUE, CYBLACK_BASIC_LOGICAL_EXPRESSION_GET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_EXISTENTIAL_ROBOT, CYBLACK_BASIC_POSTING_VISITOR, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt729);
	classes.class_set_implements_slot_listeners(CYBLACK_EXISTENTIAL_ROBOT, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_EXISTENTIAL_ROBOT, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EXISTENTIAL_ROBOT_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_EXISTENTIAL_ROBOT, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EXISTENTIAL_ROBOT_INSTANCE);
	subloop_reserved_initialize_cyblack_existential_robot_class(CYBLACK_EXISTENTIAL_ROBOT);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_EXISTENTIAL_ROBOT, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt736);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_ROBOT, INITIALIZE, CYBLACK_EXISTENTIAL_ROBOT_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(SET_INITIAL_STATE, CYBLACK_EXISTENTIAL_ROBOT, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt740, cyblack_precondition_pattern_p2.$list_alt741);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_ROBOT, SET_INITIAL_STATE, CYBLACK_EXISTENTIAL_ROBOT_SET_INITIAL_STATE_METHOD);
	methods.methods_incorporate_instance_method(INITIALIZE_ACCUMULATED_STATE, CYBLACK_EXISTENTIAL_ROBOT, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt745);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_ROBOT, INITIALIZE_ACCUMULATED_STATE, CYBLACK_EXISTENTIAL_ROBOT_INITIALIZE_ACCUMULATED_STATE_METHOD);
	methods.methods_incorporate_instance_method(VISIT, CYBLACK_EXISTENTIAL_ROBOT, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt749, cyblack_precondition_pattern_p2.$list_alt750);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_ROBOT, VISIT, CYBLACK_EXISTENTIAL_ROBOT_VISIT_METHOD);
	methods.methods_incorporate_instance_method(EVALUATE_VISIT, CYBLACK_EXISTENTIAL_ROBOT, cyblack_precondition_pattern_p3.$list_alt189, NIL, cyblack_precondition_pattern_p2.$list_alt654);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_ROBOT, EVALUATE_VISIT, CYBLACK_EXISTENTIAL_ROBOT_EVALUATE_VISIT_METHOD);
	methods.methods_incorporate_instance_method(GET_FINAL_STATE, CYBLACK_EXISTENTIAL_ROBOT, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt755);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_ROBOT, GET_FINAL_STATE, CYBLACK_EXISTENTIAL_ROBOT_GET_FINAL_STATE_METHOD);
	methods.methods_incorporate_instance_method(GET_LOGICAL_EXPRESSION, CYBLACK_EXISTENTIAL_ROBOT, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt529);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_ROBOT, GET_LOGICAL_EXPRESSION, CYBLACK_EXISTENTIAL_ROBOT_GET_LOGICAL_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(SET_LOGICAL_EXPRESSION, CYBLACK_EXISTENTIAL_ROBOT, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt532, cyblack_precondition_pattern_p2.$list_alt533);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_ROBOT, SET_LOGICAL_EXPRESSION, CYBLACK_EXISTENTIAL_ROBOT_SET_LOGICAL_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(GET_BINDING, CYBLACK_EXISTENTIAL_ROBOT, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt760);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_ROBOT, GET_BINDING, CYBLACK_EXISTENTIAL_ROBOT_GET_BINDING_METHOD);
	methods.methods_incorporate_instance_method(SET_BINDING, CYBLACK_EXISTENTIAL_ROBOT, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt763, cyblack_precondition_pattern_p2.$list_alt764);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_ROBOT, SET_BINDING, CYBLACK_EXISTENTIAL_ROBOT_SET_BINDING_METHOD);
	classes.subloop_new_class(CYBLACK_PRESENT_EXPRESSION, CYBLACK_BASIC_LOGICAL_EXPRESSION, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt768);
	classes.class_set_implements_slot_listeners(CYBLACK_PRESENT_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_PRESENT_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PRESENT_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_PRESENT_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PRESENT_EXPRESSION_INSTANCE);
	subloop_reserved_initialize_cyblack_present_expression_class(CYBLACK_PRESENT_EXPRESSION);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_PRESENT_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt772);
	methods.subloop_register_instance_method(CYBLACK_PRESENT_EXPRESSION, INITIALIZE, CYBLACK_PRESENT_EXPRESSION_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_PRESENT_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p2.$list_alt775);
	methods.subloop_register_instance_method(CYBLACK_PRESENT_EXPRESSION, PRINT, CYBLACK_PRESENT_EXPRESSION_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_VARIABLE_REFERENCE, CYBLACK_PRESENT_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt779);
	methods.subloop_register_instance_method(CYBLACK_PRESENT_EXPRESSION, GET_VARIABLE_REFERENCE, CYBLACK_PRESENT_EXPRESSION_GET_VARIABLE_REFERENCE_METHOD);
	methods.methods_incorporate_instance_method(SET_VARIABLE_REFERENCE, CYBLACK_PRESENT_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt782, cyblack_precondition_pattern_p2.$list_alt783);
	methods.subloop_register_instance_method(CYBLACK_PRESENT_EXPRESSION, SET_VARIABLE_REFERENCE, CYBLACK_PRESENT_EXPRESSION_SET_VARIABLE_REFERENCE_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_PRESENT_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt626, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p2.$list_alt786);
	methods.subloop_register_instance_method(CYBLACK_PRESENT_EXPRESSION, GET_VALUE, CYBLACK_PRESENT_EXPRESSION_GET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_EMPTY_P_EXPRESSION, CYBLACK_BASIC_LOGICAL_EXPRESSION, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt789);
	classes.class_set_implements_slot_listeners(CYBLACK_EMPTY_P_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_EMPTY_P_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EMPTY_P_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_EMPTY_P_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EMPTY_P_EXPRESSION_INSTANCE);
	subloop_reserved_initialize_cyblack_empty_p_expression_class(CYBLACK_EMPTY_P_EXPRESSION);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_EMPTY_P_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt793);
	methods.subloop_register_instance_method(CYBLACK_EMPTY_P_EXPRESSION, INITIALIZE, CYBLACK_EMPTY_P_EXPRESSION_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_EMPTY_P_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p2.$list_alt796);
	methods.subloop_register_instance_method(CYBLACK_EMPTY_P_EXPRESSION, PRINT, CYBLACK_EMPTY_P_EXPRESSION_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_DATATYPE, CYBLACK_EMPTY_P_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt800);
	methods.subloop_register_instance_method(CYBLACK_EMPTY_P_EXPRESSION, GET_DATATYPE, CYBLACK_EMPTY_P_EXPRESSION_GET_DATATYPE_METHOD);
	methods.methods_incorporate_instance_method(SET_DATATYPE, CYBLACK_EMPTY_P_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt803, cyblack_precondition_pattern_p2.$list_alt804);
	methods.subloop_register_instance_method(CYBLACK_EMPTY_P_EXPRESSION, SET_DATATYPE, CYBLACK_EMPTY_P_EXPRESSION_SET_DATATYPE_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_EMPTY_P_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p2.$list_alt807);
	methods.subloop_register_instance_method(CYBLACK_EMPTY_P_EXPRESSION, GET_VALUE, CYBLACK_EMPTY_P_EXPRESSION_GET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_EXISTENTIAL_EXPRESSION, CYBLACK_BASIC_LOGICAL_EXPRESSION, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt810);
	classes.class_set_implements_slot_listeners(CYBLACK_EXISTENTIAL_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_EXISTENTIAL_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EXISTENTIAL_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_EXISTENTIAL_EXPRESSION, $sym813$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EXISTENTIAL_EXPRESSION_INSTAN);
	subloop_reserved_initialize_cyblack_existential_expression_class(CYBLACK_EXISTENTIAL_EXPRESSION);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_EXISTENTIAL_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt814);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_EXPRESSION, INITIALIZE, CYBLACK_EXISTENTIAL_EXPRESSION_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_EXISTENTIAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p2.$list_alt817);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_EXPRESSION, PRINT, CYBLACK_EXISTENTIAL_EXPRESSION_PRINT_METHOD);
	methods.methods_incorporate_instance_method(PRINT_FUNCTOR, CYBLACK_EXISTENTIAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p2.$list_alt822);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_EXPRESSION, PRINT_FUNCTOR, CYBLACK_EXISTENTIAL_EXPRESSION_PRINT_FUNCTOR_METHOD);
	methods.methods_incorporate_instance_method(GET_CLOSURE, CYBLACK_EXISTENTIAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt826);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_EXPRESSION, GET_CLOSURE, CYBLACK_EXISTENTIAL_EXPRESSION_GET_CLOSURE_METHOD);
	methods.methods_incorporate_instance_method(SET_CLOSURE, CYBLACK_EXISTENTIAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt829, cyblack_precondition_pattern_p2.$list_alt830);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_EXPRESSION, SET_CLOSURE, CYBLACK_EXISTENTIAL_EXPRESSION_SET_CLOSURE_METHOD);
	methods.methods_incorporate_instance_method(GET_BINDING, CYBLACK_EXISTENTIAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt760);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_EXPRESSION, GET_BINDING, CYBLACK_EXISTENTIAL_EXPRESSION_GET_BINDING_METHOD);
	methods.methods_incorporate_instance_method(SET_BINDING, CYBLACK_EXISTENTIAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt763, cyblack_precondition_pattern_p2.$list_alt834);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_EXPRESSION, SET_BINDING, CYBLACK_EXISTENTIAL_EXPRESSION_SET_BINDING_METHOD);
	methods.methods_incorporate_instance_method(GET_LOGICAL_EXPRESSION, CYBLACK_EXISTENTIAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt529);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_EXPRESSION, GET_LOGICAL_EXPRESSION, CYBLACK_EXISTENTIAL_EXPRESSION_GET_LOGICAL_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(SET_LOGICAL_EXPRESSION, CYBLACK_EXISTENTIAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt532, cyblack_precondition_pattern_p2.$list_alt838);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_EXPRESSION, SET_LOGICAL_EXPRESSION, CYBLACK_EXISTENTIAL_EXPRESSION_SET_LOGICAL_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_EXISTENTIAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p2.$list_alt841);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_EXPRESSION, GET_VALUE, CYBLACK_EXISTENTIAL_EXPRESSION_GET_VALUE_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE_INTERNAL, CYBLACK_EXISTENTIAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt844, cyblack_precondition_pattern_p2.$list_alt845);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_EXPRESSION, GET_VALUE_INTERNAL, CYBLACK_EXISTENTIAL_EXPRESSION_GET_VALUE_INTERNAL_METHOD);
	methods.methods_incorporate_instance_method(CREATE_POSTING_VISITOR, CYBLACK_EXISTENTIAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt851);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_EXPRESSION, CREATE_POSTING_VISITOR, CYBLACK_EXISTENTIAL_EXPRESSION_CREATE_POSTING_VISITOR_METHOD);
	methods.methods_incorporate_instance_method(NEW_POSTING_VISITOR, CYBLACK_EXISTENTIAL_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, NIL, cyblack_precondition_pattern_p2.$list_alt854);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_EXPRESSION, NEW_POSTING_VISITOR, CYBLACK_EXISTENTIAL_EXPRESSION_NEW_POSTING_VISITOR_METHOD);
	classes.subloop_new_class(CYBLACK_FORALL_ROBOT, CYBLACK_EXISTENTIAL_ROBOT, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt857);
	classes.class_set_implements_slot_listeners(CYBLACK_FORALL_ROBOT, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_FORALL_ROBOT, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_FORALL_ROBOT_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_FORALL_ROBOT, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_FORALL_ROBOT_INSTANCE);
	subloop_reserved_initialize_cyblack_forall_robot_class(CYBLACK_FORALL_ROBOT);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_FORALL_ROBOT, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt860);
	methods.subloop_register_instance_method(CYBLACK_FORALL_ROBOT, INITIALIZE, CYBLACK_FORALL_ROBOT_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(INITIALIZE_ACCUMULATED_STATE, CYBLACK_FORALL_ROBOT, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt745);
	methods.subloop_register_instance_method(CYBLACK_FORALL_ROBOT, INITIALIZE_ACCUMULATED_STATE, CYBLACK_FORALL_ROBOT_INITIALIZE_ACCUMULATED_STATE_METHOD);
	methods.methods_incorporate_instance_method(EVALUATE_VISIT, CYBLACK_FORALL_ROBOT, cyblack_precondition_pattern_p2.$list_alt29, NIL, cyblack_precondition_pattern_p2.$list_alt864);
	methods.subloop_register_instance_method(CYBLACK_FORALL_ROBOT, EVALUATE_VISIT, CYBLACK_FORALL_ROBOT_EVALUATE_VISIT_METHOD);
	classes.subloop_new_class(CYBLACK_FORALL_EXPRESSION, CYBLACK_EXISTENTIAL_EXPRESSION, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt868);
	classes.class_set_implements_slot_listeners(CYBLACK_FORALL_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_FORALL_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_FORALL_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_FORALL_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_FORALL_EXPRESSION_INSTANCE);
	subloop_reserved_initialize_cyblack_forall_expression_class(CYBLACK_FORALL_EXPRESSION);
	methods.methods_incorporate_instance_method(PRINT_FUNCTOR, CYBLACK_FORALL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p2.$list_alt871);
	methods.subloop_register_instance_method(CYBLACK_FORALL_EXPRESSION, PRINT_FUNCTOR, CYBLACK_FORALL_EXPRESSION_PRINT_FUNCTOR_METHOD);
	methods.methods_incorporate_instance_method(NEW_POSTING_VISITOR, CYBLACK_FORALL_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, NIL, cyblack_precondition_pattern_p2.$list_alt874);
	methods.subloop_register_instance_method(CYBLACK_FORALL_EXPRESSION, NEW_POSTING_VISITOR, CYBLACK_FORALL_EXPRESSION_NEW_POSTING_VISITOR_METHOD);
	classes.subloop_new_class(CYBLACK_NESTED_LOGICAL_EXPRESSION, CYBLACK_BASIC_LOGICAL_EXPRESSION, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt877);
	classes.class_set_implements_slot_listeners(CYBLACK_NESTED_LOGICAL_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_NESTED_LOGICAL_EXPRESSION, $sym878$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_NESTED_LOGICAL_EXPRESSION_CLA);
	classes.subloop_note_instance_initialization_function(CYBLACK_NESTED_LOGICAL_EXPRESSION, $sym879$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_NESTED_LOGICAL_EXPRESSION_INS);
	subloop_reserved_initialize_cyblack_nested_logical_expression_class(CYBLACK_NESTED_LOGICAL_EXPRESSION);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_NESTED_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt880);
	methods.subloop_register_instance_method(CYBLACK_NESTED_LOGICAL_EXPRESSION, INITIALIZE, CYBLACK_NESTED_LOGICAL_EXPRESSION_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_NESTED_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p2.$list_alt883);
	methods.subloop_register_instance_method(CYBLACK_NESTED_LOGICAL_EXPRESSION, PRINT, CYBLACK_NESTED_LOGICAL_EXPRESSION_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_LOGICAL_FORM, CYBLACK_NESTED_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt455);
	methods.subloop_register_instance_method(CYBLACK_NESTED_LOGICAL_EXPRESSION, GET_LOGICAL_FORM, CYBLACK_NESTED_LOGICAL_EXPRESSION_GET_LOGICAL_FORM_METHOD);
	methods.methods_incorporate_instance_method(SET_LOGICAL_FORM, CYBLACK_NESTED_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt458, cyblack_precondition_pattern_p2.$list_alt887);
	methods.subloop_register_instance_method(CYBLACK_NESTED_LOGICAL_EXPRESSION, SET_LOGICAL_FORM, CYBLACK_NESTED_LOGICAL_EXPRESSION_SET_LOGICAL_FORM_METHOD);
	classes.subloop_new_class(CYBLACK_COMPOUND_LOGICAL_EXPRESSION, CYBLACK_BASIC_LOGICAL_EXPRESSION, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt891);
	classes.class_set_implements_slot_listeners(CYBLACK_COMPOUND_LOGICAL_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_COMPOUND_LOGICAL_EXPRESSION, $sym892$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_COMPOUND_LOGICAL_EXPRESSION_C);
	classes.subloop_note_instance_initialization_function(CYBLACK_COMPOUND_LOGICAL_EXPRESSION, $sym893$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_COMPOUND_LOGICAL_EXPRESSION_I);
	subloop_reserved_initialize_cyblack_compound_logical_expression_class(CYBLACK_COMPOUND_LOGICAL_EXPRESSION);
	methods.methods_incorporate_instance_method(PRINT_OPERATOR, CYBLACK_COMPOUND_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt626, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p2.$list_alt895);
	methods.subloop_register_instance_method(CYBLACK_COMPOUND_LOGICAL_EXPRESSION, PRINT_OPERATOR, CYBLACK_COMPOUND_LOGICAL_EXPRESSION_PRINT_OPERATOR_METHOD);
	methods.methods_incorporate_instance_method(GET_ARITY, CYBLACK_COMPOUND_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, NIL, cyblack_precondition_pattern_p2.$list_alt899);
	methods.subloop_register_instance_method(CYBLACK_COMPOUND_LOGICAL_EXPRESSION, GET_ARITY, CYBLACK_COMPOUND_LOGICAL_EXPRESSION_GET_ARITY_METHOD);
	methods.methods_incorporate_instance_method(GET_ARG1, CYBLACK_COMPOUND_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, NIL, cyblack_precondition_pattern_p2.$list_alt654);
	methods.subloop_register_instance_method(CYBLACK_COMPOUND_LOGICAL_EXPRESSION, GET_ARG1, CYBLACK_COMPOUND_LOGICAL_EXPRESSION_GET_ARG1_METHOD);
	methods.methods_incorporate_instance_method(SET_ARG1, CYBLACK_COMPOUND_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p2.$list_alt904, cyblack_precondition_pattern_p2.$list_alt905);
	methods.subloop_register_instance_method(CYBLACK_COMPOUND_LOGICAL_EXPRESSION, SET_ARG1, CYBLACK_COMPOUND_LOGICAL_EXPRESSION_SET_ARG1_METHOD);
	classes.subloop_new_class(CYBLACK_UNARY_LOGICAL_EXPRESSION, CYBLACK_COMPOUND_LOGICAL_EXPRESSION, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt908);
	classes.class_set_implements_slot_listeners(CYBLACK_UNARY_LOGICAL_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_UNARY_LOGICAL_EXPRESSION, $sym909$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_UNARY_LOGICAL_EXPRESSION_CLAS);
	classes.subloop_note_instance_initialization_function(CYBLACK_UNARY_LOGICAL_EXPRESSION, $sym911$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_UNARY_LOGICAL_EXPRESSION_INST);
	subloop_reserved_initialize_cyblack_unary_logical_expression_class(CYBLACK_UNARY_LOGICAL_EXPRESSION);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_UNARY_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt912);
	methods.subloop_register_instance_method(CYBLACK_UNARY_LOGICAL_EXPRESSION, INITIALIZE, CYBLACK_UNARY_LOGICAL_EXPRESSION_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_UNARY_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p2.$list_alt915);
	methods.subloop_register_instance_method(CYBLACK_UNARY_LOGICAL_EXPRESSION, PRINT, CYBLACK_UNARY_LOGICAL_EXPRESSION_PRINT_METHOD);
	methods.methods_incorporate_instance_method(PRINT_OPERATOR, CYBLACK_UNARY_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt626, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p2.$list_alt918);
	methods.subloop_register_instance_method(CYBLACK_UNARY_LOGICAL_EXPRESSION, PRINT_OPERATOR, CYBLACK_UNARY_LOGICAL_EXPRESSION_PRINT_OPERATOR_METHOD);
	methods.methods_incorporate_instance_method(GET_ARITY, CYBLACK_UNARY_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, NIL, cyblack_precondition_pattern_p2.$list_alt921);
	methods.subloop_register_instance_method(CYBLACK_UNARY_LOGICAL_EXPRESSION, GET_ARITY, CYBLACK_UNARY_LOGICAL_EXPRESSION_GET_ARITY_METHOD);
	methods.methods_incorporate_instance_method(GET_ARG1, CYBLACK_UNARY_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt923);
	methods.subloop_register_instance_method(CYBLACK_UNARY_LOGICAL_EXPRESSION, GET_ARG1, CYBLACK_UNARY_LOGICAL_EXPRESSION_GET_ARG1_METHOD);
	methods.methods_incorporate_instance_method(SET_ARG1, CYBLACK_UNARY_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt904, cyblack_precondition_pattern_p2.$list_alt925);
	methods.subloop_register_instance_method(CYBLACK_UNARY_LOGICAL_EXPRESSION, SET_ARG1, CYBLACK_UNARY_LOGICAL_EXPRESSION_SET_ARG1_METHOD);
	classes.subloop_new_class(CYBLACK_NOT_EXPRESSION, CYBLACK_UNARY_LOGICAL_EXPRESSION, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt929);
	classes.class_set_implements_slot_listeners(CYBLACK_NOT_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_NOT_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_NOT_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_NOT_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_NOT_EXPRESSION_INSTANCE);
	subloop_reserved_initialize_cyblack_not_expression_class(CYBLACK_NOT_EXPRESSION);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_NOT_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt860);
	methods.subloop_register_instance_method(CYBLACK_NOT_EXPRESSION, INITIALIZE, CYBLACK_NOT_EXPRESSION_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT_OPERATOR, CYBLACK_NOT_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt626, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p2.$list_alt933);
	methods.subloop_register_instance_method(CYBLACK_NOT_EXPRESSION, PRINT_OPERATOR, CYBLACK_NOT_EXPRESSION_PRINT_OPERATOR_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_NOT_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p2.$list_alt936);
	methods.subloop_register_instance_method(CYBLACK_NOT_EXPRESSION, GET_VALUE, CYBLACK_NOT_EXPRESSION_GET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_NARY_LOGICAL_EXPRESSION, CYBLACK_COMPOUND_LOGICAL_EXPRESSION, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt939);
	classes.class_set_implements_slot_listeners(CYBLACK_NARY_LOGICAL_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_NARY_LOGICAL_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_NARY_LOGICAL_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_NARY_LOGICAL_EXPRESSION, $sym942$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_NARY_LOGICAL_EXPRESSION_INSTA);
	subloop_reserved_initialize_cyblack_nary_logical_expression_class(CYBLACK_NARY_LOGICAL_EXPRESSION);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_NARY_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt943);
	methods.subloop_register_instance_method(CYBLACK_NARY_LOGICAL_EXPRESSION, INITIALIZE, CYBLACK_NARY_LOGICAL_EXPRESSION_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_NARY_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p2.$list_alt946);
	methods.subloop_register_instance_method(CYBLACK_NARY_LOGICAL_EXPRESSION, PRINT, CYBLACK_NARY_LOGICAL_EXPRESSION_PRINT_METHOD);
	methods.methods_incorporate_instance_method(PRINT_OPERATOR, CYBLACK_NARY_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt626, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p2.$list_alt948);
	methods.subloop_register_instance_method(CYBLACK_NARY_LOGICAL_EXPRESSION, PRINT_OPERATOR, CYBLACK_NARY_LOGICAL_EXPRESSION_PRINT_OPERATOR_METHOD);
	methods.methods_incorporate_instance_method(GET_ARITY, CYBLACK_NARY_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt951);
	methods.subloop_register_instance_method(CYBLACK_NARY_LOGICAL_EXPRESSION, GET_ARITY, CYBLACK_NARY_LOGICAL_EXPRESSION_GET_ARITY_METHOD);
	methods.methods_incorporate_instance_method(GET_ARG1, CYBLACK_NARY_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, NIL, cyblack_precondition_pattern_p2.$list_alt953);
	methods.subloop_register_instance_method(CYBLACK_NARY_LOGICAL_EXPRESSION, GET_ARG1, CYBLACK_NARY_LOGICAL_EXPRESSION_GET_ARG1_METHOD);
	methods.methods_incorporate_instance_method(SET_ARG1, CYBLACK_NARY_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p2.$list_alt904, cyblack_precondition_pattern_p2.$list_alt955);
	methods.subloop_register_instance_method(CYBLACK_NARY_LOGICAL_EXPRESSION, SET_ARG1, CYBLACK_NARY_LOGICAL_EXPRESSION_SET_ARG1_METHOD);
	methods.methods_incorporate_instance_method(GET_ARG2, CYBLACK_NARY_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, NIL, cyblack_precondition_pattern_p2.$list_alt958);
	methods.subloop_register_instance_method(CYBLACK_NARY_LOGICAL_EXPRESSION, GET_ARG2, CYBLACK_NARY_LOGICAL_EXPRESSION_GET_ARG2_METHOD);
	methods.methods_incorporate_instance_method(SET_ARG2, CYBLACK_NARY_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p2.$list_alt961, cyblack_precondition_pattern_p2.$list_alt962);
	methods.subloop_register_instance_method(CYBLACK_NARY_LOGICAL_EXPRESSION, SET_ARG2, CYBLACK_NARY_LOGICAL_EXPRESSION_SET_ARG2_METHOD);
	methods.methods_incorporate_instance_method(GET_ARG3, CYBLACK_NARY_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, NIL, cyblack_precondition_pattern_p2.$list_alt965);
	methods.subloop_register_instance_method(CYBLACK_NARY_LOGICAL_EXPRESSION, GET_ARG3, CYBLACK_NARY_LOGICAL_EXPRESSION_GET_ARG3_METHOD);
	methods.methods_incorporate_instance_method(SET_ARG3, CYBLACK_NARY_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p2.$list_alt968, cyblack_precondition_pattern_p2.$list_alt969);
	methods.subloop_register_instance_method(CYBLACK_NARY_LOGICAL_EXPRESSION, SET_ARG3, CYBLACK_NARY_LOGICAL_EXPRESSION_SET_ARG3_METHOD);
	methods.methods_incorporate_instance_method(CHECK_N, CYBLACK_NARY_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt415, cyblack_precondition_pattern_p2.$list_alt972, cyblack_precondition_pattern_p2.$list_alt973);
	methods.subloop_register_instance_method(CYBLACK_NARY_LOGICAL_EXPRESSION, CHECK_N, CYBLACK_NARY_LOGICAL_EXPRESSION_CHECK_N_METHOD);
	methods.methods_incorporate_instance_method(GET_ARGN, CYBLACK_NARY_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt972, cyblack_precondition_pattern_p2.$list_alt976);
	methods.subloop_register_instance_method(CYBLACK_NARY_LOGICAL_EXPRESSION, GET_ARGN, CYBLACK_NARY_LOGICAL_EXPRESSION_GET_ARGN_METHOD);
	methods.methods_incorporate_instance_method(SET_ARGN, CYBLACK_NARY_LOGICAL_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt979, cyblack_precondition_pattern_p2.$list_alt980);
	methods.subloop_register_instance_method(CYBLACK_NARY_LOGICAL_EXPRESSION, SET_ARGN, CYBLACK_NARY_LOGICAL_EXPRESSION_SET_ARGN_METHOD);
	classes.subloop_new_class(CYBLACK_AND_EXPRESSION, CYBLACK_NARY_LOGICAL_EXPRESSION, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt929);
	classes.class_set_implements_slot_listeners(CYBLACK_AND_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_AND_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AND_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_AND_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AND_EXPRESSION_INSTANCE);
	subloop_reserved_initialize_cyblack_and_expression_class(CYBLACK_AND_EXPRESSION);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_AND_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt415, NIL, cyblack_precondition_pattern_p2.$list_alt860);
	methods.subloop_register_instance_method(CYBLACK_AND_EXPRESSION, INITIALIZE, CYBLACK_AND_EXPRESSION_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT_OPERATOR, CYBLACK_AND_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt415, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p2.$list_alt987);
	methods.subloop_register_instance_method(CYBLACK_AND_EXPRESSION, PRINT_OPERATOR, CYBLACK_AND_EXPRESSION_PRINT_OPERATOR_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_AND_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p2.$list_alt990);
	methods.subloop_register_instance_method(CYBLACK_AND_EXPRESSION, GET_VALUE, CYBLACK_AND_EXPRESSION_GET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_OR_EXPRESSION, CYBLACK_NARY_LOGICAL_EXPRESSION, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt929);
	classes.class_set_implements_slot_listeners(CYBLACK_OR_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_OR_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_OR_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_OR_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_OR_EXPRESSION_INSTANCE);
	subloop_reserved_initialize_cyblack_or_expression_class(CYBLACK_OR_EXPRESSION);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_OR_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt415, NIL, cyblack_precondition_pattern_p2.$list_alt860);
	methods.subloop_register_instance_method(CYBLACK_OR_EXPRESSION, INITIALIZE, CYBLACK_OR_EXPRESSION_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT_OPERATOR, CYBLACK_OR_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt415, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p2.$list_alt996);
	methods.subloop_register_instance_method(CYBLACK_OR_EXPRESSION, PRINT_OPERATOR, CYBLACK_OR_EXPRESSION_PRINT_OPERATOR_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_OR_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p2.$list_alt999);
	methods.subloop_register_instance_method(CYBLACK_OR_EXPRESSION, GET_VALUE, CYBLACK_OR_EXPRESSION_GET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_PREDICATE, CYBLACK_BASIC_LOGICAL_EXPRESSION, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1002);
	classes.class_set_implements_slot_listeners(CYBLACK_PREDICATE, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_PREDICATE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PREDICATE_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_PREDICATE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PREDICATE_INSTANCE);
	subloop_reserved_initialize_cyblack_predicate_class(CYBLACK_PREDICATE);
	methods.methods_incorporate_instance_method(CHECK_ARG_P, CYBLACK_PREDICATE, cyblack_precondition_pattern_p2.$list_alt626, cyblack_precondition_pattern_p3.$list_alt1008, cyblack_precondition_pattern_p3.$list_alt1009);
	methods.subloop_register_instance_method(CYBLACK_PREDICATE, CHECK_ARG_P, CYBLACK_PREDICATE_CHECK_ARG_P_METHOD);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_PREDICATE, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1011);
	methods.subloop_register_instance_method(CYBLACK_PREDICATE, INITIALIZE, CYBLACK_PREDICATE_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(DECLARE_SIGNATURE, CYBLACK_PREDICATE, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1015, cyblack_precondition_pattern_p3.$list_alt1016);
	methods.subloop_register_instance_method(CYBLACK_PREDICATE, DECLARE_SIGNATURE, CYBLACK_PREDICATE_DECLARE_SIGNATURE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_PREDICATE, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p3.$list_alt1019);
	methods.subloop_register_instance_method(CYBLACK_PREDICATE, PRINT, CYBLACK_PREDICATE_PRINT_METHOD);
	methods.methods_incorporate_instance_method(PRINT_OPERATOR, CYBLACK_PREDICATE, cyblack_precondition_pattern_p2.$list_alt415, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p3.$list_alt1021);
	methods.subloop_register_instance_method(CYBLACK_PREDICATE, PRINT_OPERATOR, CYBLACK_PREDICATE_PRINT_OPERATOR_METHOD);
	methods.methods_incorporate_instance_method(PRINT_ARGLIST, CYBLACK_PREDICATE, cyblack_precondition_pattern_p2.$list_alt626, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p3.$list_alt1025);
	methods.subloop_register_instance_method(CYBLACK_PREDICATE, PRINT_ARGLIST, CYBLACK_PREDICATE_PRINT_ARGLIST_METHOD);
	methods.methods_incorporate_instance_method(GET_ARITY, CYBLACK_PREDICATE, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt1027);
	methods.subloop_register_instance_method(CYBLACK_PREDICATE, GET_ARITY, CYBLACK_PREDICATE_GET_ARITY_METHOD);
	methods.methods_incorporate_instance_method(GET_ARGN_TYPE, CYBLACK_PREDICATE, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt972, cyblack_precondition_pattern_p3.$list_alt1030);
	methods.subloop_register_instance_method(CYBLACK_PREDICATE, GET_ARGN_TYPE, CYBLACK_PREDICATE_GET_ARGN_TYPE_METHOD);
	methods.methods_incorporate_instance_method(SET_ARGN_TYPE, CYBLACK_PREDICATE, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1033, cyblack_precondition_pattern_p3.$list_alt1034);
	methods.subloop_register_instance_method(CYBLACK_PREDICATE, SET_ARGN_TYPE, CYBLACK_PREDICATE_SET_ARGN_TYPE_METHOD);
	methods.methods_incorporate_instance_method(GET_ARGN, CYBLACK_PREDICATE, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt972, cyblack_precondition_pattern_p3.$list_alt1037);
	methods.subloop_register_instance_method(CYBLACK_PREDICATE, GET_ARGN, CYBLACK_PREDICATE_GET_ARGN_METHOD);
	methods.methods_incorporate_instance_method(SET_ARGN, CYBLACK_PREDICATE, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1039, cyblack_precondition_pattern_p3.$list_alt1040);
	methods.subloop_register_instance_method(CYBLACK_PREDICATE, SET_ARGN, CYBLACK_PREDICATE_SET_ARGN_METHOD);
	classes.subloop_new_class(CYBLACK_BINARY_PREDICATE, CYBLACK_PREDICATE, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1044);
	classes.class_set_implements_slot_listeners(CYBLACK_BINARY_PREDICATE, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_BINARY_PREDICATE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_BINARY_PREDICATE_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_BINARY_PREDICATE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_BINARY_PREDICATE_INSTANCE);
	subloop_reserved_initialize_cyblack_binary_predicate_class(CYBLACK_BINARY_PREDICATE);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_BINARY_PREDICATE, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1047);
	methods.subloop_register_instance_method(CYBLACK_BINARY_PREDICATE, INITIALIZE, CYBLACK_BINARY_PREDICATE_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(DECLARE_SIGNATURE, CYBLACK_BINARY_PREDICATE, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1015, cyblack_precondition_pattern_p3.$list_alt1050);
	methods.subloop_register_instance_method(CYBLACK_BINARY_PREDICATE, DECLARE_SIGNATURE, CYBLACK_BINARY_PREDICATE_DECLARE_SIGNATURE_METHOD);
	methods.methods_incorporate_instance_method(PRINT_OPERATOR, CYBLACK_BINARY_PREDICATE, cyblack_precondition_pattern_p2.$list_alt415, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p3.$list_alt1052);
	methods.subloop_register_instance_method(CYBLACK_BINARY_PREDICATE, PRINT_OPERATOR, CYBLACK_BINARY_PREDICATE_PRINT_OPERATOR_METHOD);
	methods.methods_incorporate_instance_method(GET_ARITY, CYBLACK_BINARY_PREDICATE, cyblack_precondition_pattern_p3.$list_alt189, NIL, cyblack_precondition_pattern_p3.$list_alt1055);
	methods.subloop_register_instance_method(CYBLACK_BINARY_PREDICATE, GET_ARITY, CYBLACK_BINARY_PREDICATE_GET_ARITY_METHOD);
	methods.methods_incorporate_instance_method(SET_ARGN_TYPE, CYBLACK_BINARY_PREDICATE, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p3.$list_alt1033, cyblack_precondition_pattern_p3.$list_alt1057);
	methods.subloop_register_instance_method(CYBLACK_BINARY_PREDICATE, SET_ARGN_TYPE, CYBLACK_BINARY_PREDICATE_SET_ARGN_TYPE_METHOD);
	methods.methods_incorporate_instance_method(SET_ARGN, CYBLACK_BINARY_PREDICATE, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p3.$list_alt1039, cyblack_precondition_pattern_p3.$list_alt1059);
	methods.subloop_register_instance_method(CYBLACK_BINARY_PREDICATE, SET_ARGN, CYBLACK_BINARY_PREDICATE_SET_ARGN_METHOD);
	methods.methods_incorporate_instance_method(GET_ARG1, CYBLACK_BINARY_PREDICATE, cyblack_precondition_pattern_p3.$list_alt189, NIL, cyblack_precondition_pattern_p2.$list_alt953);
	methods.subloop_register_instance_method(CYBLACK_BINARY_PREDICATE, GET_ARG1, CYBLACK_BINARY_PREDICATE_GET_ARG1_METHOD);
	methods.methods_incorporate_instance_method(SET_ARG1, CYBLACK_BINARY_PREDICATE, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p3.$list_alt1062, cyblack_precondition_pattern_p3.$list_alt1063);
	methods.subloop_register_instance_method(CYBLACK_BINARY_PREDICATE, SET_ARG1, CYBLACK_BINARY_PREDICATE_SET_ARG1_METHOD);
	methods.methods_incorporate_instance_method(GET_ARG2, CYBLACK_BINARY_PREDICATE, cyblack_precondition_pattern_p3.$list_alt189, NIL, cyblack_precondition_pattern_p2.$list_alt958);
	methods.subloop_register_instance_method(CYBLACK_BINARY_PREDICATE, GET_ARG2, CYBLACK_BINARY_PREDICATE_GET_ARG2_METHOD);
	methods.methods_incorporate_instance_method(SET_ARG2, CYBLACK_BINARY_PREDICATE, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p3.$list_alt1062, cyblack_precondition_pattern_p3.$list_alt1066);
	methods.subloop_register_instance_method(CYBLACK_BINARY_PREDICATE, SET_ARG2, CYBLACK_BINARY_PREDICATE_SET_ARG2_METHOD);
	classes.subloop_new_class(CYBLACK_BINARY_PREDICATE_OVER_VALUE_EXPRESSIONS, CYBLACK_BINARY_PREDICATE, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1069);
	classes.class_set_implements_slot_listeners(CYBLACK_BINARY_PREDICATE_OVER_VALUE_EXPRESSIONS, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_BINARY_PREDICATE_OVER_VALUE_EXPRESSIONS, $sym1070$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_BINARY_PREDICATE_OVER_VALUE_E);
	classes.subloop_note_instance_initialization_function(CYBLACK_BINARY_PREDICATE_OVER_VALUE_EXPRESSIONS, $sym1071$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_BINARY_PREDICATE_OVER_VALUE_E);
	subloop_reserved_initialize_cyblack_binary_predicate_over_value_expressions_class(CYBLACK_BINARY_PREDICATE_OVER_VALUE_EXPRESSIONS);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_BINARY_PREDICATE_OVER_VALUE_EXPRESSIONS, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1072);
	methods.subloop_register_instance_method(CYBLACK_BINARY_PREDICATE_OVER_VALUE_EXPRESSIONS, INITIALIZE, CYBLACK_BINARY_PREDICATE_OVER_VALUE_EXPRESSIONS_INITIALIZE_METHOD);
	classes.subloop_new_class(CYBLACK_EQ_PREDICATE, CYBLACK_BINARY_PREDICATE, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt929);
	classes.class_set_implements_slot_listeners(CYBLACK_EQ_PREDICATE, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_EQ_PREDICATE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EQ_PREDICATE_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_EQ_PREDICATE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EQ_PREDICATE_INSTANCE);
	subloop_reserved_initialize_cyblack_eq_predicate_class(CYBLACK_EQ_PREDICATE);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_EQ_PREDICATE, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt860);
	methods.subloop_register_instance_method(CYBLACK_EQ_PREDICATE, INITIALIZE, CYBLACK_EQ_PREDICATE_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT_OPERATOR, CYBLACK_EQ_PREDICATE, cyblack_precondition_pattern_p2.$list_alt415, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p3.$list_alt1078);
	methods.subloop_register_instance_method(CYBLACK_EQ_PREDICATE, PRINT_OPERATOR, CYBLACK_EQ_PREDICATE_PRINT_OPERATOR_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_EQ_PREDICATE, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p3.$list_alt1081);
	methods.subloop_register_instance_method(CYBLACK_EQ_PREDICATE, GET_VALUE, CYBLACK_EQ_PREDICATE_GET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_EQUAL_PREDICATE, CYBLACK_BINARY_PREDICATE, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt929);
	classes.class_set_implements_slot_listeners(CYBLACK_EQUAL_PREDICATE, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_EQUAL_PREDICATE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EQUAL_PREDICATE_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_EQUAL_PREDICATE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EQUAL_PREDICATE_INSTANCE);
	subloop_reserved_initialize_cyblack_equal_predicate_class(CYBLACK_EQUAL_PREDICATE);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_EQUAL_PREDICATE, cyblack_precondition_pattern_p2.$list_alt415, NIL, cyblack_precondition_pattern_p2.$list_alt860);
	methods.subloop_register_instance_method(CYBLACK_EQUAL_PREDICATE, INITIALIZE, CYBLACK_EQUAL_PREDICATE_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT_OPERATOR, CYBLACK_EQUAL_PREDICATE, cyblack_precondition_pattern_p2.$list_alt415, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p3.$list_alt1087);
	methods.subloop_register_instance_method(CYBLACK_EQUAL_PREDICATE, PRINT_OPERATOR, CYBLACK_EQUAL_PREDICATE_PRINT_OPERATOR_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_EQUAL_PREDICATE, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p3.$list_alt1090);
	methods.subloop_register_instance_method(CYBLACK_EQUAL_PREDICATE, GET_VALUE, CYBLACK_EQUAL_PREDICATE_GET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_ASSOC_EQUAL_PREDICATE, CYBLACK_BINARY_PREDICATE, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt929);
	classes.class_set_implements_slot_listeners(CYBLACK_ASSOC_EQUAL_PREDICATE, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_ASSOC_EQUAL_PREDICATE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ASSOC_EQUAL_PREDICATE_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_ASSOC_EQUAL_PREDICATE, $sym1094$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ASSOC_EQUAL_PREDICATE_INSTANC);
	subloop_reserved_initialize_cyblack_assoc_equal_predicate_class(CYBLACK_ASSOC_EQUAL_PREDICATE);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_ASSOC_EQUAL_PREDICATE, cyblack_precondition_pattern_p2.$list_alt415, NIL, cyblack_precondition_pattern_p2.$list_alt860);
	methods.subloop_register_instance_method(CYBLACK_ASSOC_EQUAL_PREDICATE, INITIALIZE, CYBLACK_ASSOC_EQUAL_PREDICATE_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT_OPERATOR, CYBLACK_ASSOC_EQUAL_PREDICATE, cyblack_precondition_pattern_p2.$list_alt415, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p3.$list_alt1096);
	methods.subloop_register_instance_method(CYBLACK_ASSOC_EQUAL_PREDICATE, PRINT_OPERATOR, CYBLACK_ASSOC_EQUAL_PREDICATE_PRINT_OPERATOR_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_ASSOC_EQUAL_PREDICATE, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p3.$list_alt1099);
	methods.subloop_register_instance_method(CYBLACK_ASSOC_EQUAL_PREDICATE, GET_VALUE, CYBLACK_ASSOC_EQUAL_PREDICATE_GET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_LE_PREDICATE, CYBLACK_BINARY_PREDICATE, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt929);
	classes.class_set_implements_slot_listeners(CYBLACK_LE_PREDICATE, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_LE_PREDICATE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_LE_PREDICATE_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_LE_PREDICATE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_LE_PREDICATE_INSTANCE);
	subloop_reserved_initialize_cyblack_le_predicate_class(CYBLACK_LE_PREDICATE);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_LE_PREDICATE, cyblack_precondition_pattern_p2.$list_alt415, NIL, cyblack_precondition_pattern_p2.$list_alt860);
	methods.subloop_register_instance_method(CYBLACK_LE_PREDICATE, INITIALIZE, CYBLACK_LE_PREDICATE_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT_OPERATOR, CYBLACK_LE_PREDICATE, cyblack_precondition_pattern_p2.$list_alt415, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p3.$list_alt1105);
	methods.subloop_register_instance_method(CYBLACK_LE_PREDICATE, PRINT_OPERATOR, CYBLACK_LE_PREDICATE_PRINT_OPERATOR_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_LE_PREDICATE, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p3.$list_alt1108);
	methods.subloop_register_instance_method(CYBLACK_LE_PREDICATE, GET_VALUE, CYBLACK_LE_PREDICATE_GET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_LT_PREDICATE, CYBLACK_BINARY_PREDICATE, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt929);
	classes.class_set_implements_slot_listeners(CYBLACK_LT_PREDICATE, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_LT_PREDICATE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_LT_PREDICATE_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_LT_PREDICATE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_LT_PREDICATE_INSTANCE);
	subloop_reserved_initialize_cyblack_lt_predicate_class(CYBLACK_LT_PREDICATE);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_LT_PREDICATE, cyblack_precondition_pattern_p2.$list_alt415, NIL, cyblack_precondition_pattern_p2.$list_alt860);
	methods.subloop_register_instance_method(CYBLACK_LT_PREDICATE, INITIALIZE, CYBLACK_LT_PREDICATE_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT_OPERATOR, CYBLACK_LT_PREDICATE, cyblack_precondition_pattern_p2.$list_alt415, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p3.$list_alt1114);
	methods.subloop_register_instance_method(CYBLACK_LT_PREDICATE, PRINT_OPERATOR, CYBLACK_LT_PREDICATE_PRINT_OPERATOR_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_LT_PREDICATE, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p3.$list_alt1117);
	methods.subloop_register_instance_method(CYBLACK_LT_PREDICATE, GET_VALUE, CYBLACK_LT_PREDICATE_GET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_GE_PREDICATE, CYBLACK_BINARY_PREDICATE, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt929);
	classes.class_set_implements_slot_listeners(CYBLACK_GE_PREDICATE, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_GE_PREDICATE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_GE_PREDICATE_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_GE_PREDICATE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_GE_PREDICATE_INSTANCE);
	subloop_reserved_initialize_cyblack_ge_predicate_class(CYBLACK_GE_PREDICATE);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_GE_PREDICATE, cyblack_precondition_pattern_p2.$list_alt415, NIL, cyblack_precondition_pattern_p2.$list_alt860);
	methods.subloop_register_instance_method(CYBLACK_GE_PREDICATE, INITIALIZE, CYBLACK_GE_PREDICATE_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT_OPERATOR, CYBLACK_GE_PREDICATE, cyblack_precondition_pattern_p2.$list_alt415, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p3.$list_alt1123);
	methods.subloop_register_instance_method(CYBLACK_GE_PREDICATE, PRINT_OPERATOR, CYBLACK_GE_PREDICATE_PRINT_OPERATOR_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_GE_PREDICATE, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p3.$list_alt1126);
	methods.subloop_register_instance_method(CYBLACK_GE_PREDICATE, GET_VALUE, CYBLACK_GE_PREDICATE_GET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_GT_PREDICATE, CYBLACK_BINARY_PREDICATE, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt929);
	classes.class_set_implements_slot_listeners(CYBLACK_GT_PREDICATE, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_GT_PREDICATE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_GT_PREDICATE_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_GT_PREDICATE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_GT_PREDICATE_INSTANCE);
	subloop_reserved_initialize_cyblack_gt_predicate_class(CYBLACK_GT_PREDICATE);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_GT_PREDICATE, cyblack_precondition_pattern_p2.$list_alt415, NIL, cyblack_precondition_pattern_p2.$list_alt860);
	methods.subloop_register_instance_method(CYBLACK_GT_PREDICATE, INITIALIZE, CYBLACK_GT_PREDICATE_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT_OPERATOR, CYBLACK_GT_PREDICATE, cyblack_precondition_pattern_p2.$list_alt415, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p3.$list_alt1123);
	methods.subloop_register_instance_method(CYBLACK_GT_PREDICATE, PRINT_OPERATOR, CYBLACK_GT_PREDICATE_PRINT_OPERATOR_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_GT_PREDICATE, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p3.$list_alt1133);
	methods.subloop_register_instance_method(CYBLACK_GT_PREDICATE, GET_VALUE, CYBLACK_GT_PREDICATE_GET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_POSTING_REFERENCE, CYBLACK_POSTING_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt260, NIL, cyblack_precondition_pattern_p3.$list_alt261);
	classes.class_set_implements_slot_listeners(CYBLACK_POSTING_REFERENCE, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_POSTING_REFERENCE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_POSTING_REFERENCE_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_POSTING_REFERENCE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_POSTING_REFERENCE_INSTANCE);
	subloop_reserved_initialize_cyblack_posting_reference_class(CYBLACK_POSTING_REFERENCE);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_POSTING_REFERENCE, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt264);
	methods.subloop_register_instance_method(CYBLACK_POSTING_REFERENCE, INITIALIZE, CYBLACK_POSTING_REFERENCE_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_POSTING_REFERENCE, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p3.$list_alt267);
	methods.subloop_register_instance_method(CYBLACK_POSTING_REFERENCE, PRINT, CYBLACK_POSTING_REFERENCE_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_VARIABLE, CYBLACK_POSTING_REFERENCE, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p2.$list_alt70);
	methods.subloop_register_instance_method(CYBLACK_POSTING_REFERENCE, GET_VARIABLE, CYBLACK_POSTING_REFERENCE_GET_VARIABLE_METHOD);
	methods.methods_incorporate_instance_method(SET_VARIABLE, CYBLACK_POSTING_REFERENCE, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt74, cyblack_precondition_pattern_p3.$list_alt1142);
	methods.subloop_register_instance_method(CYBLACK_POSTING_REFERENCE, SET_VARIABLE, CYBLACK_POSTING_REFERENCE_SET_VARIABLE_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_POSTING_REFERENCE, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p3.$list_alt1145);
	methods.subloop_register_instance_method(CYBLACK_POSTING_REFERENCE, GET_VALUE, CYBLACK_POSTING_REFERENCE_GET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_POSTING_OPERATION_EXPRESSION, CYBLACK_PATTERN, cyblack_precondition_pattern_p3.$list_alt260, NIL, cyblack_precondition_pattern_p3.$list_alt1148);
	classes.class_set_implements_slot_listeners(CYBLACK_POSTING_OPERATION_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_POSTING_OPERATION_EXPRESSION, $sym1149$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_POSTING_OPERATION_EXPRESSION_);
	classes.subloop_note_instance_initialization_function(CYBLACK_POSTING_OPERATION_EXPRESSION, $sym1151$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_POSTING_OPERATION_EXPRESSION_);
	subloop_reserved_initialize_cyblack_posting_operation_expression_class(CYBLACK_POSTING_OPERATION_EXPRESSION);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_POSTING_OPERATION_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1152);
	methods.subloop_register_instance_method(CYBLACK_POSTING_OPERATION_EXPRESSION, INITIALIZE, CYBLACK_POSTING_OPERATION_EXPRESSION_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_POSTING_OPERATION_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p3.$list_alt1155);
	methods.subloop_register_instance_method(CYBLACK_POSTING_OPERATION_EXPRESSION, PRINT, CYBLACK_POSTING_OPERATION_EXPRESSION_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_POSTING_EXPRESSION, CYBLACK_POSTING_OPERATION_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt1159);
	methods.subloop_register_instance_method(CYBLACK_POSTING_OPERATION_EXPRESSION, GET_POSTING_EXPRESSION, $sym1160$CYBLACK_POSTING_OPERATION_EXPRESSION_GET_POSTING_EXPRESSION_METHO);
	methods.methods_incorporate_instance_method(SET_POSTING_EXPRESSION, CYBLACK_POSTING_OPERATION_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1162, cyblack_precondition_pattern_p3.$list_alt1163);
	methods.subloop_register_instance_method(CYBLACK_POSTING_OPERATION_EXPRESSION, SET_POSTING_EXPRESSION, $sym1165$CYBLACK_POSTING_OPERATION_EXPRESSION_SET_POSTING_EXPRESSION_METHO);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_POSTING_OPERATION_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p3.$list_alt1166);
	methods.subloop_register_instance_method(CYBLACK_POSTING_OPERATION_EXPRESSION, GET_VALUE, CYBLACK_POSTING_OPERATION_EXPRESSION_GET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_TYPE_OF_EXPRESSION, CYBLACK_POSTING_OPERATION_EXPRESSION, NIL, NIL, cyblack_precondition_pattern_p2.$list_alt363);
	classes.class_set_implements_slot_listeners(CYBLACK_TYPE_OF_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_TYPE_OF_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_TYPE_OF_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_TYPE_OF_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_TYPE_OF_EXPRESSION_INSTANCE);
	subloop_reserved_initialize_cyblack_type_of_expression_class(CYBLACK_TYPE_OF_EXPRESSION);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_TYPE_OF_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1171);
	methods.subloop_register_instance_method(CYBLACK_TYPE_OF_EXPRESSION, INITIALIZE, CYBLACK_TYPE_OF_EXPRESSION_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_TYPE_OF_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p3.$list_alt1173);
	methods.subloop_register_instance_method(CYBLACK_TYPE_OF_EXPRESSION, PRINT, CYBLACK_TYPE_OF_EXPRESSION_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_TYPE_OF_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p3.$list_alt1176);
	methods.subloop_register_instance_method(CYBLACK_TYPE_OF_EXPRESSION, GET_VALUE, CYBLACK_TYPE_OF_EXPRESSION_GET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_CALL_METHOD_EXPRESSION, CYBLACK_POSTING_OPERATION_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt362, NIL, cyblack_precondition_pattern_p3.$list_alt1179);
	classes.class_set_implements_slot_listeners(CYBLACK_CALL_METHOD_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_CALL_METHOD_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_CALL_METHOD_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_CALL_METHOD_EXPRESSION, $sym1183$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_CALL_METHOD_EXPRESSION_INSTAN);
	subloop_reserved_initialize_cyblack_call_method_expression_class(CYBLACK_CALL_METHOD_EXPRESSION);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_CALL_METHOD_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1184);
	methods.subloop_register_instance_method(CYBLACK_CALL_METHOD_EXPRESSION, INITIALIZE, CYBLACK_CALL_METHOD_EXPRESSION_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_CALL_METHOD_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p3.$list_alt1187);
	methods.subloop_register_instance_method(CYBLACK_CALL_METHOD_EXPRESSION, PRINT, CYBLACK_CALL_METHOD_EXPRESSION_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_METHOD_NAME_LITERAL, CYBLACK_CALL_METHOD_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt1191);
	methods.subloop_register_instance_method(CYBLACK_CALL_METHOD_EXPRESSION, GET_METHOD_NAME_LITERAL, CYBLACK_CALL_METHOD_EXPRESSION_GET_METHOD_NAME_LITERAL_METHOD);
	methods.methods_incorporate_instance_method(SET_METHOD_NAME_LITERAL, CYBLACK_CALL_METHOD_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1194, cyblack_precondition_pattern_p3.$list_alt1195);
	methods.subloop_register_instance_method(CYBLACK_CALL_METHOD_EXPRESSION, SET_METHOD_NAME_LITERAL, CYBLACK_CALL_METHOD_EXPRESSION_SET_METHOD_NAME_LITERAL_METHOD);
	methods.methods_incorporate_instance_method(GET_ACTUAL_ARGS, CYBLACK_CALL_METHOD_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt1199);
	methods.subloop_register_instance_method(CYBLACK_CALL_METHOD_EXPRESSION, GET_ACTUAL_ARGS, CYBLACK_CALL_METHOD_EXPRESSION_GET_ACTUAL_ARGS_METHOD);
	methods.methods_incorporate_instance_method(SET_ACTUAL_ARGS, CYBLACK_CALL_METHOD_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1202, cyblack_precondition_pattern_p3.$list_alt1203);
	methods.subloop_register_instance_method(CYBLACK_CALL_METHOD_EXPRESSION, SET_ACTUAL_ARGS, CYBLACK_CALL_METHOD_EXPRESSION_SET_ACTUAL_ARGS_METHOD);
	methods.methods_incorporate_instance_method(EVALUATED_ARGS, CYBLACK_CALL_METHOD_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt844, cyblack_precondition_pattern_p3.$list_alt1207);
	methods.subloop_register_instance_method(CYBLACK_CALL_METHOD_EXPRESSION, EVALUATED_ARGS, CYBLACK_CALL_METHOD_EXPRESSION_EVALUATED_ARGS_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_CALL_METHOD_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p3.$list_alt1209);
	methods.subloop_register_instance_method(CYBLACK_CALL_METHOD_EXPRESSION, GET_VALUE, CYBLACK_CALL_METHOD_EXPRESSION_GET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_SLOT_ACCESS, CYBLACK_POSTING_OPERATION_EXPRESSION, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1213);
	classes.class_set_implements_slot_listeners(CYBLACK_SLOT_ACCESS, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_SLOT_ACCESS, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SLOT_ACCESS_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_SLOT_ACCESS, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SLOT_ACCESS_INSTANCE);
	subloop_reserved_initialize_cyblack_slot_access_class(CYBLACK_SLOT_ACCESS);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_SLOT_ACCESS, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1217);
	methods.subloop_register_instance_method(CYBLACK_SLOT_ACCESS, INITIALIZE, CYBLACK_SLOT_ACCESS_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_SLOT_ACCESS, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p3.$list_alt1220);
	methods.subloop_register_instance_method(CYBLACK_SLOT_ACCESS, PRINT, CYBLACK_SLOT_ACCESS_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_SLOT_NAME, CYBLACK_SLOT_ACCESS, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt1224);
	methods.subloop_register_instance_method(CYBLACK_SLOT_ACCESS, GET_SLOT_NAME, CYBLACK_SLOT_ACCESS_GET_SLOT_NAME_METHOD);
	methods.methods_incorporate_instance_method(SET_SLOT_NAME, CYBLACK_SLOT_ACCESS, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1227, cyblack_precondition_pattern_p3.$list_alt1228);
	methods.subloop_register_instance_method(CYBLACK_SLOT_ACCESS, SET_SLOT_NAME, CYBLACK_SLOT_ACCESS_SET_SLOT_NAME_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_SLOT_ACCESS, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p3.$list_alt1231);
	methods.subloop_register_instance_method(CYBLACK_SLOT_ACCESS, GET_VALUE, CYBLACK_SLOT_ACCESS_GET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_ARITHMETIC_EXPRESSION, CYBLACK_PATTERN, cyblack_precondition_pattern_p3.$list_alt260, NIL, cyblack_precondition_pattern_p3.$list_alt1234);
	classes.class_set_implements_slot_listeners(CYBLACK_ARITHMETIC_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_ARITHMETIC_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ARITHMETIC_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_ARITHMETIC_EXPRESSION, $sym1237$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ARITHMETIC_EXPRESSION_INSTANC);
	subloop_reserved_initialize_cyblack_arithmetic_expression_class(CYBLACK_ARITHMETIC_EXPRESSION);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1238);
	methods.subloop_register_instance_method(CYBLACK_ARITHMETIC_EXPRESSION, INITIALIZE, CYBLACK_ARITHMETIC_EXPRESSION_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt626, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p3.$list_alt1241);
	methods.subloop_register_instance_method(CYBLACK_ARITHMETIC_EXPRESSION, PRINT, CYBLACK_ARITHMETIC_EXPRESSION_PRINT_METHOD);
	methods.methods_incorporate_instance_method(PRINT_OPERATOR, CYBLACK_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt415, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p3.$list_alt1244);
	methods.subloop_register_instance_method(CYBLACK_ARITHMETIC_EXPRESSION, PRINT_OPERATOR, CYBLACK_ARITHMETIC_EXPRESSION_PRINT_OPERATOR_METHOD);
	methods.methods_incorporate_instance_method(PRINT_VALUE_EXPRESSION_LIST, CYBLACK_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt626, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p3.$list_alt1247);
	methods.subloop_register_instance_method(CYBLACK_ARITHMETIC_EXPRESSION, PRINT_VALUE_EXPRESSION_LIST, CYBLACK_ARITHMETIC_EXPRESSION_PRINT_VALUE_EXPRESSION_LIST_METHOD);
	methods.methods_incorporate_instance_method(GET_ARITY, CYBLACK_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt1027);
	methods.subloop_register_instance_method(CYBLACK_ARITHMETIC_EXPRESSION, GET_ARITY, CYBLACK_ARITHMETIC_EXPRESSION_GET_ARITY_METHOD);
	methods.methods_incorporate_instance_method(SET_ARITY, CYBLACK_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt972, cyblack_precondition_pattern_p3.$list_alt1251);
	methods.subloop_register_instance_method(CYBLACK_ARITHMETIC_EXPRESSION, SET_ARITY, CYBLACK_ARITHMETIC_EXPRESSION_SET_ARITY_METHOD);
	methods.methods_incorporate_instance_method(GET_ARGS, CYBLACK_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt1254);
	methods.subloop_register_instance_method(CYBLACK_ARITHMETIC_EXPRESSION, GET_ARGS, CYBLACK_ARITHMETIC_EXPRESSION_GET_ARGS_METHOD);
	methods.methods_incorporate_instance_method(SET_ARGS, CYBLACK_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p2.$list_alt643, cyblack_precondition_pattern_p3.$list_alt1256);
	methods.subloop_register_instance_method(CYBLACK_ARITHMETIC_EXPRESSION, SET_ARGS, CYBLACK_ARITHMETIC_EXPRESSION_SET_ARGS_METHOD);
	methods.methods_incorporate_instance_method(GET_ARGN, CYBLACK_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt972, cyblack_precondition_pattern_p3.$list_alt1259);
	methods.subloop_register_instance_method(CYBLACK_ARITHMETIC_EXPRESSION, GET_ARGN, CYBLACK_ARITHMETIC_EXPRESSION_GET_ARGN_METHOD);
	methods.methods_incorporate_instance_method(SET_ARGN, CYBLACK_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1261, cyblack_precondition_pattern_p3.$list_alt1262);
	methods.subloop_register_instance_method(CYBLACK_ARITHMETIC_EXPRESSION, SET_ARGN, CYBLACK_ARITHMETIC_EXPRESSION_SET_ARGN_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p2.$list_alt382);
	methods.subloop_register_instance_method(CYBLACK_ARITHMETIC_EXPRESSION, GET_VALUE, CYBLACK_ARITHMETIC_EXPRESSION_GET_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_BINARY_ARITHMETIC_EXPRESSION, CYBLACK_ARITHMETIC_EXPRESSION, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1267);
	classes.class_set_implements_slot_listeners(CYBLACK_BINARY_ARITHMETIC_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_BINARY_ARITHMETIC_EXPRESSION, $sym1268$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_BINARY_ARITHMETIC_EXPRESSION_);
	classes.subloop_note_instance_initialization_function(CYBLACK_BINARY_ARITHMETIC_EXPRESSION, $sym1269$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_BINARY_ARITHMETIC_EXPRESSION_);
	subloop_reserved_initialize_cyblack_binary_arithmetic_expression_class(CYBLACK_BINARY_ARITHMETIC_EXPRESSION);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_BINARY_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1270);
	methods.subloop_register_instance_method(CYBLACK_BINARY_ARITHMETIC_EXPRESSION, INITIALIZE, CYBLACK_BINARY_ARITHMETIC_EXPRESSION_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT_OPERATOR, CYBLACK_BINARY_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt415, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p3.$list_alt1273);
	methods.subloop_register_instance_method(CYBLACK_BINARY_ARITHMETIC_EXPRESSION, PRINT_OPERATOR, CYBLACK_BINARY_ARITHMETIC_EXPRESSION_PRINT_OPERATOR_METHOD);
	methods.methods_incorporate_instance_method(GET_ARITY, CYBLACK_BINARY_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, NIL, cyblack_precondition_pattern_p3.$list_alt1055);
	methods.subloop_register_instance_method(CYBLACK_BINARY_ARITHMETIC_EXPRESSION, GET_ARITY, CYBLACK_BINARY_ARITHMETIC_EXPRESSION_GET_ARITY_METHOD);
	methods.methods_incorporate_instance_method(SET_ARITY, CYBLACK_BINARY_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p2.$list_alt972, cyblack_precondition_pattern_p3.$list_alt1277);
	methods.subloop_register_instance_method(CYBLACK_BINARY_ARITHMETIC_EXPRESSION, SET_ARITY, CYBLACK_BINARY_ARITHMETIC_EXPRESSION_SET_ARITY_METHOD);
	methods.methods_incorporate_instance_method(GET_ARGS, CYBLACK_BINARY_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt1254);
	methods.subloop_register_instance_method(CYBLACK_BINARY_ARITHMETIC_EXPRESSION, GET_ARGS, CYBLACK_BINARY_ARITHMETIC_EXPRESSION_GET_ARGS_METHOD);
	methods.methods_incorporate_instance_method(SET_ARGS, CYBLACK_BINARY_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p2.$list_alt643, cyblack_precondition_pattern_p3.$list_alt1280);
	methods.subloop_register_instance_method(CYBLACK_BINARY_ARITHMETIC_EXPRESSION, SET_ARGS, CYBLACK_BINARY_ARITHMETIC_EXPRESSION_SET_ARGS_METHOD);
	methods.methods_incorporate_instance_method(GET_ARG1, CYBLACK_BINARY_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, NIL, cyblack_precondition_pattern_p2.$list_alt953);
	methods.subloop_register_instance_method(CYBLACK_BINARY_ARITHMETIC_EXPRESSION, GET_ARG1, CYBLACK_BINARY_ARITHMETIC_EXPRESSION_GET_ARG1_METHOD);
	methods.methods_incorporate_instance_method(SET_ARG1, CYBLACK_BINARY_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p2.$list_alt904, cyblack_precondition_pattern_p2.$list_alt955);
	methods.subloop_register_instance_method(CYBLACK_BINARY_ARITHMETIC_EXPRESSION, SET_ARG1, CYBLACK_BINARY_ARITHMETIC_EXPRESSION_SET_ARG1_METHOD);
	methods.methods_incorporate_instance_method(GET_ARG2, CYBLACK_BINARY_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, NIL, cyblack_precondition_pattern_p2.$list_alt958);
	methods.subloop_register_instance_method(CYBLACK_BINARY_ARITHMETIC_EXPRESSION, GET_ARG2, CYBLACK_BINARY_ARITHMETIC_EXPRESSION_GET_ARG2_METHOD);
	methods.methods_incorporate_instance_method(SET_ARG2, CYBLACK_BINARY_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p2.$list_alt961, cyblack_precondition_pattern_p2.$list_alt962);
	methods.subloop_register_instance_method(CYBLACK_BINARY_ARITHMETIC_EXPRESSION, SET_ARG2, CYBLACK_BINARY_ARITHMETIC_EXPRESSION_SET_ARG2_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_BINARY_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p3.$list_alt1286);
	methods.subloop_register_instance_method(CYBLACK_BINARY_ARITHMETIC_EXPRESSION, GET_VALUE, CYBLACK_BINARY_ARITHMETIC_EXPRESSION_GET_VALUE_METHOD);
	methods.methods_incorporate_instance_method(COMPUTE_VALUE, CYBLACK_BINARY_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt415, cyblack_precondition_pattern_p3.$list_alt1289, cyblack_precondition_pattern_p3.$list_alt1290);
	methods.subloop_register_instance_method(CYBLACK_BINARY_ARITHMETIC_EXPRESSION, COMPUTE_VALUE, CYBLACK_BINARY_ARITHMETIC_EXPRESSION_COMPUTE_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_SUBTRACTION_EXPRESSION, CYBLACK_BINARY_ARITHMETIC_EXPRESSION, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1293);
	classes.class_set_implements_slot_listeners(CYBLACK_SUBTRACTION_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_SUBTRACTION_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SUBTRACTION_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_SUBTRACTION_EXPRESSION, $sym1295$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SUBTRACTION_EXPRESSION_INSTAN);
	subloop_reserved_initialize_cyblack_subtraction_expression_class(CYBLACK_SUBTRACTION_EXPRESSION);
	methods.methods_incorporate_instance_method(PRINT_OPERATOR, CYBLACK_SUBTRACTION_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt415, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p3.$list_alt1273);
	methods.subloop_register_instance_method(CYBLACK_SUBTRACTION_EXPRESSION, PRINT_OPERATOR, CYBLACK_SUBTRACTION_EXPRESSION_PRINT_OPERATOR_METHOD);
	methods.methods_incorporate_instance_method(COMPUTE_VALUE, CYBLACK_SUBTRACTION_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt415, cyblack_precondition_pattern_p3.$list_alt1289, cyblack_precondition_pattern_p3.$list_alt1297);
	methods.subloop_register_instance_method(CYBLACK_SUBTRACTION_EXPRESSION, COMPUTE_VALUE, CYBLACK_SUBTRACTION_EXPRESSION_COMPUTE_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_DIVISION_EXPRESSION, CYBLACK_BINARY_ARITHMETIC_EXPRESSION, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1293);
	classes.class_set_implements_slot_listeners(CYBLACK_DIVISION_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_DIVISION_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DIVISION_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_DIVISION_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DIVISION_EXPRESSION_INSTANCE);
	subloop_reserved_initialize_cyblack_division_expression_class(CYBLACK_DIVISION_EXPRESSION);
	methods.methods_incorporate_instance_method(PRINT_OPERATOR, CYBLACK_DIVISION_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt415, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p3.$list_alt1302);
	methods.subloop_register_instance_method(CYBLACK_DIVISION_EXPRESSION, PRINT_OPERATOR, CYBLACK_DIVISION_EXPRESSION_PRINT_OPERATOR_METHOD);
	methods.methods_incorporate_instance_method(COMPUTE_VALUE, CYBLACK_DIVISION_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt415, cyblack_precondition_pattern_p3.$list_alt1289, cyblack_precondition_pattern_p3.$list_alt1305);
	methods.subloop_register_instance_method(CYBLACK_DIVISION_EXPRESSION, COMPUTE_VALUE, CYBLACK_DIVISION_EXPRESSION_COMPUTE_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_NARY_ARITHMETIC_EXPRESSION, CYBLACK_ARITHMETIC_EXPRESSION, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1308);
	classes.class_set_implements_slot_listeners(CYBLACK_NARY_ARITHMETIC_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_NARY_ARITHMETIC_EXPRESSION, $sym1309$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_NARY_ARITHMETIC_EXPRESSION_CL);
	classes.subloop_note_instance_initialization_function(CYBLACK_NARY_ARITHMETIC_EXPRESSION, $sym1310$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_NARY_ARITHMETIC_EXPRESSION_IN);
	subloop_reserved_initialize_cyblack_nary_arithmetic_expression_class(CYBLACK_NARY_ARITHMETIC_EXPRESSION);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_NARY_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1311);
	methods.subloop_register_instance_method(CYBLACK_NARY_ARITHMETIC_EXPRESSION, INITIALIZE, CYBLACK_NARY_ARITHMETIC_EXPRESSION_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUE, CYBLACK_NARY_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p3.$list_alt273, cyblack_precondition_pattern_p3.$list_alt1314);
	methods.subloop_register_instance_method(CYBLACK_NARY_ARITHMETIC_EXPRESSION, GET_VALUE, CYBLACK_NARY_ARITHMETIC_EXPRESSION_GET_VALUE_METHOD);
	methods.methods_incorporate_instance_method(COMPUTE_VALUE, CYBLACK_NARY_ARITHMETIC_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p3.$list_alt1316, cyblack_precondition_pattern_p3.$list_alt1317);
	methods.subloop_register_instance_method(CYBLACK_NARY_ARITHMETIC_EXPRESSION, COMPUTE_VALUE, CYBLACK_NARY_ARITHMETIC_EXPRESSION_COMPUTE_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_ADDITION_EXPRESSION, CYBLACK_NARY_ARITHMETIC_EXPRESSION, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1320);
	classes.class_set_implements_slot_listeners(CYBLACK_ADDITION_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_ADDITION_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ADDITION_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_ADDITION_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ADDITION_EXPRESSION_INSTANCE);
	subloop_reserved_initialize_cyblack_addition_expression_class(CYBLACK_ADDITION_EXPRESSION);
	methods.methods_incorporate_instance_method(PRINT_OPERATOR, CYBLACK_ADDITION_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt415, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p3.$list_alt1323);
	methods.subloop_register_instance_method(CYBLACK_ADDITION_EXPRESSION, PRINT_OPERATOR, CYBLACK_ADDITION_EXPRESSION_PRINT_OPERATOR_METHOD);
	methods.methods_incorporate_instance_method(COMPUTE_VALUE, CYBLACK_ADDITION_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p3.$list_alt1316, cyblack_precondition_pattern_p3.$list_alt1326);
	methods.subloop_register_instance_method(CYBLACK_ADDITION_EXPRESSION, COMPUTE_VALUE, CYBLACK_ADDITION_EXPRESSION_COMPUTE_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_MULTIPLICATION_EXPRESSION, CYBLACK_NARY_ARITHMETIC_EXPRESSION, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1320);
	classes.class_set_implements_slot_listeners(CYBLACK_MULTIPLICATION_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_MULTIPLICATION_EXPRESSION, $sym1329$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_MULTIPLICATION_EXPRESSION_CLA);
	classes.subloop_note_instance_initialization_function(CYBLACK_MULTIPLICATION_EXPRESSION, $sym1330$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_MULTIPLICATION_EXPRESSION_INS);
	subloop_reserved_initialize_cyblack_multiplication_expression_class(CYBLACK_MULTIPLICATION_EXPRESSION);
	methods.methods_incorporate_instance_method(PRINT_OPERATOR, CYBLACK_MULTIPLICATION_EXPRESSION, cyblack_precondition_pattern_p2.$list_alt415, cyblack_precondition_pattern_p2.$list_alt627, cyblack_precondition_pattern_p3.$list_alt1331);
	methods.subloop_register_instance_method(CYBLACK_MULTIPLICATION_EXPRESSION, PRINT_OPERATOR, CYBLACK_MULTIPLICATION_EXPRESSION_PRINT_OPERATOR_METHOD);
	methods.methods_incorporate_instance_method(COMPUTE_VALUE, CYBLACK_MULTIPLICATION_EXPRESSION, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p3.$list_alt1316, cyblack_precondition_pattern_p3.$list_alt1334);
	methods.subloop_register_instance_method(CYBLACK_MULTIPLICATION_EXPRESSION, COMPUTE_VALUE, CYBLACK_MULTIPLICATION_EXPRESSION_COMPUTE_VALUE_METHOD);
	classes.subloop_new_class(CYBLACK_PATTERN_PROCESSOR, CYBLACK_OBJECT, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1337);
	classes.class_set_implements_slot_listeners(CYBLACK_PATTERN_PROCESSOR, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_PATTERN_PROCESSOR, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PATTERN_PROCESSOR_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_PATTERN_PROCESSOR, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PATTERN_PROCESSOR_INSTANCE);
	subloop_reserved_initialize_cyblack_pattern_processor_class(CYBLACK_PATTERN_PROCESSOR);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_PATTERN_PROCESSOR, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1342);
	methods.subloop_register_instance_method(CYBLACK_PATTERN_PROCESSOR, INITIALIZE, CYBLACK_PATTERN_PROCESSOR_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_PATTERN_PROCESSOR, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p3.$list_alt1345);
	methods.subloop_register_instance_method(CYBLACK_PATTERN_PROCESSOR, PRINT, CYBLACK_PATTERN_PROCESSOR_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_MAIN_PARSER, CYBLACK_PATTERN_PROCESSOR, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt1349);
	methods.subloop_register_instance_method(CYBLACK_PATTERN_PROCESSOR, GET_MAIN_PARSER, CYBLACK_PATTERN_PROCESSOR_GET_MAIN_PARSER_METHOD);
	methods.methods_incorporate_instance_method(SET_MAIN_PARSER, CYBLACK_PATTERN_PROCESSOR, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1352, cyblack_precondition_pattern_p3.$list_alt1353);
	methods.subloop_register_instance_method(CYBLACK_PATTERN_PROCESSOR, SET_MAIN_PARSER, CYBLACK_PATTERN_PROCESSOR_SET_MAIN_PARSER_METHOD);
	methods.methods_incorporate_instance_method(GET_BLACKBOARD, CYBLACK_PATTERN_PROCESSOR, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt1356);
	methods.subloop_register_instance_method(CYBLACK_PATTERN_PROCESSOR, GET_BLACKBOARD, CYBLACK_PATTERN_PROCESSOR_GET_BLACKBOARD_METHOD);
	methods.methods_incorporate_instance_method(GET_KEYWORD, CYBLACK_PATTERN_PROCESSOR, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt1359);
	methods.subloop_register_instance_method(CYBLACK_PATTERN_PROCESSOR, GET_KEYWORD, CYBLACK_PATTERN_PROCESSOR_GET_KEYWORD_METHOD);
	methods.methods_incorporate_instance_method(SET_KEYWORD, CYBLACK_PATTERN_PROCESSOR, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1362, cyblack_precondition_pattern_p3.$list_alt1363);
	methods.subloop_register_instance_method(CYBLACK_PATTERN_PROCESSOR, SET_KEYWORD, CYBLACK_PATTERN_PROCESSOR_SET_KEYWORD_METHOD);
	classes.subloop_new_class(CYBLACK_ITEM_PARSER, CYBLACK_PATTERN_PROCESSOR, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1367);
	classes.class_set_implements_slot_listeners(CYBLACK_ITEM_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_ITEM_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ITEM_PARSER_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_ITEM_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ITEM_PARSER_INSTANCE);
	subloop_reserved_initialize_cyblack_item_parser_class(CYBLACK_ITEM_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_ITEM_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt860);
	methods.subloop_register_instance_method(CYBLACK_ITEM_PARSER, INITIALIZE, CYBLACK_ITEM_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_ITEM_PARSER, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p3.$list_alt1371);
	methods.subloop_register_instance_method(CYBLACK_ITEM_PARSER, PRINT, CYBLACK_ITEM_PARSER_PRINT_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_ITEM_PARSER, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1376);
	methods.subloop_register_instance_method(CYBLACK_ITEM_PARSER, PARSE, CYBLACK_ITEM_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_EXISTENTIAL_EXPRESSION_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1379);
	classes.class_set_implements_slot_listeners(CYBLACK_EXISTENTIAL_EXPRESSION_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_EXISTENTIAL_EXPRESSION_PARSER, $sym1380$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EXISTENTIAL_EXPRESSION_PARSER);
	classes.subloop_note_instance_initialization_function(CYBLACK_EXISTENTIAL_EXPRESSION_PARSER, $sym1381$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EXISTENTIAL_EXPRESSION_PARSER);
	subloop_reserved_initialize_cyblack_existential_expression_parser_class(CYBLACK_EXISTENTIAL_EXPRESSION_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_EXISTENTIAL_EXPRESSION_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1382);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_EXPRESSION_PARSER, INITIALIZE, CYBLACK_EXISTENTIAL_EXPRESSION_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_EXISTENTIAL_EXPRESSION_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1385);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_EXPRESSION_PARSER, PARSE, CYBLACK_EXISTENTIAL_EXPRESSION_PARSER_PARSE_METHOD);
	methods.methods_incorporate_instance_method(CREATE_EXPRESSION, CYBLACK_EXISTENTIAL_EXPRESSION_PARSER, cyblack_precondition_pattern_p2.$list_alt415, NIL, cyblack_precondition_pattern_p3.$list_alt1390);
	methods.subloop_register_instance_method(CYBLACK_EXISTENTIAL_EXPRESSION_PARSER, CREATE_EXPRESSION, CYBLACK_EXISTENTIAL_EXPRESSION_PARSER_CREATE_EXPRESSION_METHOD);
	classes.subloop_new_class(CYBLACK_FORALL_EXPRESSION_PARSER, CYBLACK_EXISTENTIAL_EXPRESSION_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1393);
	classes.class_set_implements_slot_listeners(CYBLACK_FORALL_EXPRESSION_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_FORALL_EXPRESSION_PARSER, $sym1394$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_FORALL_EXPRESSION_PARSER_CLAS);
	classes.subloop_note_instance_initialization_function(CYBLACK_FORALL_EXPRESSION_PARSER, $sym1395$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_FORALL_EXPRESSION_PARSER_INST);
	subloop_reserved_initialize_cyblack_forall_expression_parser_class(CYBLACK_FORALL_EXPRESSION_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_FORALL_EXPRESSION_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1396);
	methods.subloop_register_instance_method(CYBLACK_FORALL_EXPRESSION_PARSER, INITIALIZE, CYBLACK_FORALL_EXPRESSION_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(CREATE_EXPRESSION, CYBLACK_FORALL_EXPRESSION_PARSER, cyblack_precondition_pattern_p2.$list_alt626, NIL, cyblack_precondition_pattern_p3.$list_alt1399);
	methods.subloop_register_instance_method(CYBLACK_FORALL_EXPRESSION_PARSER, CREATE_EXPRESSION, CYBLACK_FORALL_EXPRESSION_PARSER_CREATE_EXPRESSION_METHOD);
	classes.subloop_new_class(CYBLACK_PRESENT_EXPRESSION_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_PRESENT_EXPRESSION_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_PRESENT_EXPRESSION_PARSER, $sym1403$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PRESENT_EXPRESSION_PARSER_CLA);
	classes.subloop_note_instance_initialization_function(CYBLACK_PRESENT_EXPRESSION_PARSER, $sym1404$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PRESENT_EXPRESSION_PARSER_INS);
	subloop_reserved_initialize_cyblack_present_expression_parser_class(CYBLACK_PRESENT_EXPRESSION_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_PRESENT_EXPRESSION_PARSER, cyblack_precondition_pattern_p2.$list_alt415, NIL, cyblack_precondition_pattern_p3.$list_alt1405);
	methods.subloop_register_instance_method(CYBLACK_PRESENT_EXPRESSION_PARSER, INITIALIZE, CYBLACK_PRESENT_EXPRESSION_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_PRESENT_EXPRESSION_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1408);
	methods.subloop_register_instance_method(CYBLACK_PRESENT_EXPRESSION_PARSER, PARSE, CYBLACK_PRESENT_EXPRESSION_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_EMPTY_P_EXPRESSION_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_EMPTY_P_EXPRESSION_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_EMPTY_P_EXPRESSION_PARSER, $sym1412$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EMPTY_P_EXPRESSION_PARSER_CLA);
	classes.subloop_note_instance_initialization_function(CYBLACK_EMPTY_P_EXPRESSION_PARSER, $sym1413$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EMPTY_P_EXPRESSION_PARSER_INS);
	subloop_reserved_initialize_cyblack_empty_p_expression_parser_class(CYBLACK_EMPTY_P_EXPRESSION_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_EMPTY_P_EXPRESSION_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1414);
	methods.subloop_register_instance_method(CYBLACK_EMPTY_P_EXPRESSION_PARSER, INITIALIZE, CYBLACK_EMPTY_P_EXPRESSION_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_EMPTY_P_EXPRESSION_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1417);
	methods.subloop_register_instance_method(CYBLACK_EMPTY_P_EXPRESSION_PARSER, PARSE, CYBLACK_EMPTY_P_EXPRESSION_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_TYPE_EXPRESSION_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_TYPE_EXPRESSION_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_TYPE_EXPRESSION_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_TYPE_EXPRESSION_PARSER_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_TYPE_EXPRESSION_PARSER, $sym1422$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_TYPE_EXPRESSION_PARSER_INSTAN);
	subloop_reserved_initialize_cyblack_type_expression_parser_class(CYBLACK_TYPE_EXPRESSION_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_TYPE_EXPRESSION_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1423);
	methods.subloop_register_instance_method(CYBLACK_TYPE_EXPRESSION_PARSER, INITIALIZE, CYBLACK_TYPE_EXPRESSION_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_TYPE_EXPRESSION_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1426);
	methods.subloop_register_instance_method(CYBLACK_TYPE_EXPRESSION_PARSER, PARSE, CYBLACK_TYPE_EXPRESSION_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_SUBTYPE_EXPRESSION_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_SUBTYPE_EXPRESSION_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_SUBTYPE_EXPRESSION_PARSER, $sym1430$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SUBTYPE_EXPRESSION_PARSER_CLA);
	classes.subloop_note_instance_initialization_function(CYBLACK_SUBTYPE_EXPRESSION_PARSER, $sym1431$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SUBTYPE_EXPRESSION_PARSER_INS);
	subloop_reserved_initialize_cyblack_subtype_expression_parser_class(CYBLACK_SUBTYPE_EXPRESSION_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_SUBTYPE_EXPRESSION_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1432);
	methods.subloop_register_instance_method(CYBLACK_SUBTYPE_EXPRESSION_PARSER, INITIALIZE, CYBLACK_SUBTYPE_EXPRESSION_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_SUBTYPE_EXPRESSION_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1435);
	methods.subloop_register_instance_method(CYBLACK_SUBTYPE_EXPRESSION_PARSER, PARSE, CYBLACK_SUBTYPE_EXPRESSION_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_PANEL_EXPRESSION_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_PANEL_EXPRESSION_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_PANEL_EXPRESSION_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PANEL_EXPRESSION_PARSER_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_PANEL_EXPRESSION_PARSER, $sym1440$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PANEL_EXPRESSION_PARSER_INSTA);
	subloop_reserved_initialize_cyblack_panel_expression_parser_class(CYBLACK_PANEL_EXPRESSION_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_PANEL_EXPRESSION_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1441);
	methods.subloop_register_instance_method(CYBLACK_PANEL_EXPRESSION_PARSER, INITIALIZE, CYBLACK_PANEL_EXPRESSION_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_PANEL_EXPRESSION_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1444);
	methods.subloop_register_instance_method(CYBLACK_PANEL_EXPRESSION_PARSER, PARSE, CYBLACK_PANEL_EXPRESSION_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_GET_EXPRESSION_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_GET_EXPRESSION_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_GET_EXPRESSION_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_GET_EXPRESSION_PARSER_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_GET_EXPRESSION_PARSER, $sym1450$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_GET_EXPRESSION_PARSER_INSTANC);
	subloop_reserved_initialize_cyblack_get_expression_parser_class(CYBLACK_GET_EXPRESSION_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_GET_EXPRESSION_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1451);
	methods.subloop_register_instance_method(CYBLACK_GET_EXPRESSION_PARSER, INITIALIZE, CYBLACK_GET_EXPRESSION_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_GET_EXPRESSION_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1454);
	methods.subloop_register_instance_method(CYBLACK_GET_EXPRESSION_PARSER, PARSE, CYBLACK_GET_EXPRESSION_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_STRING_EXPRESSION_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_STRING_EXPRESSION_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_STRING_EXPRESSION_PARSER, $sym1459$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_STRING_EXPRESSION_PARSER_CLAS);
	classes.subloop_note_instance_initialization_function(CYBLACK_STRING_EXPRESSION_PARSER, $sym1460$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_STRING_EXPRESSION_PARSER_INST);
	subloop_reserved_initialize_cyblack_string_expression_parser_class(CYBLACK_STRING_EXPRESSION_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_STRING_EXPRESSION_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1461);
	methods.subloop_register_instance_method(CYBLACK_STRING_EXPRESSION_PARSER, INITIALIZE, CYBLACK_STRING_EXPRESSION_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_STRING_EXPRESSION_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1464);
	methods.subloop_register_instance_method(CYBLACK_STRING_EXPRESSION_PARSER, PARSE, CYBLACK_STRING_EXPRESSION_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_MONITORING_PATTERN_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_MONITORING_PATTERN_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_MONITORING_PATTERN_PARSER, $sym1467$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_MONITORING_PATTERN_PARSER_CLA);
	classes.subloop_note_instance_initialization_function(CYBLACK_MONITORING_PATTERN_PARSER, $sym1468$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_MONITORING_PATTERN_PARSER_INS);
	subloop_reserved_initialize_cyblack_monitoring_pattern_parser_class(CYBLACK_MONITORING_PATTERN_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_MONITORING_PATTERN_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1469);
	methods.subloop_register_instance_method(CYBLACK_MONITORING_PATTERN_PARSER, INITIALIZE, CYBLACK_MONITORING_PATTERN_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_MONITORING_PATTERN_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1472);
	methods.subloop_register_instance_method(CYBLACK_MONITORING_PATTERN_PARSER, PARSE, CYBLACK_MONITORING_PATTERN_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_PRECON_PATTERN_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_PRECON_PATTERN_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_PRECON_PATTERN_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PRECON_PATTERN_PARSER_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_PRECON_PATTERN_PARSER, $sym1481$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PRECON_PATTERN_PARSER_INSTANC);
	subloop_reserved_initialize_cyblack_precon_pattern_parser_class(CYBLACK_PRECON_PATTERN_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_PRECON_PATTERN_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1482);
	methods.subloop_register_instance_method(CYBLACK_PRECON_PATTERN_PARSER, INITIALIZE, CYBLACK_PRECON_PATTERN_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_PRECON_PATTERN_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1485);
	methods.subloop_register_instance_method(CYBLACK_PRECON_PATTERN_PARSER, PARSE, CYBLACK_PRECON_PATTERN_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_SATISFACTION_EXPRESSION_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1490);
	classes.class_set_implements_slot_listeners(CYBLACK_SATISFACTION_EXPRESSION_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_SATISFACTION_EXPRESSION_PARSER, $sym1491$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SATISFACTION_EXPRESSION_PARSE);
	classes.subloop_note_instance_initialization_function(CYBLACK_SATISFACTION_EXPRESSION_PARSER, $sym1492$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SATISFACTION_EXPRESSION_PARSE);
	subloop_reserved_initialize_cyblack_satisfaction_expression_parser_class(CYBLACK_SATISFACTION_EXPRESSION_PARSER);
	methods.methods_incorporate_instance_method(NEW_EXPRESSION, CYBLACK_SATISFACTION_EXPRESSION_PARSER, cyblack_precondition_pattern_p2.$list_alt415, NIL, cyblack_precondition_pattern_p3.$list_alt1494);
	methods.subloop_register_instance_method(CYBLACK_SATISFACTION_EXPRESSION_PARSER, NEW_EXPRESSION, CYBLACK_SATISFACTION_EXPRESSION_PARSER_NEW_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_SATISFACTION_EXPRESSION_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1496);
	methods.subloop_register_instance_method(CYBLACK_SATISFACTION_EXPRESSION_PARSER, INITIALIZE, CYBLACK_SATISFACTION_EXPRESSION_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_SATISFACTION_EXPRESSION_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1499);
	methods.subloop_register_instance_method(CYBLACK_SATISFACTION_EXPRESSION_PARSER, PARSE, CYBLACK_SATISFACTION_EXPRESSION_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_SIMPLE_SATISFACTION_EXPRESSION_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1490);
	classes.class_set_implements_slot_listeners(CYBLACK_SIMPLE_SATISFACTION_EXPRESSION_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_SIMPLE_SATISFACTION_EXPRESSION_PARSER, $sym1503$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SIMPLE_SATISFACTION_EXPRESSIO);
	classes.subloop_note_instance_initialization_function(CYBLACK_SIMPLE_SATISFACTION_EXPRESSION_PARSER, $sym1504$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SIMPLE_SATISFACTION_EXPRESSIO);
	subloop_reserved_initialize_cyblack_simple_satisfaction_expression_parser_class(CYBLACK_SIMPLE_SATISFACTION_EXPRESSION_PARSER);
	methods.methods_incorporate_instance_method(NEW_EXPRESSION, CYBLACK_SIMPLE_SATISFACTION_EXPRESSION_PARSER, cyblack_precondition_pattern_p2.$list_alt415, NIL, cyblack_precondition_pattern_p3.$list_alt1505);
	methods.subloop_register_instance_method(CYBLACK_SIMPLE_SATISFACTION_EXPRESSION_PARSER, NEW_EXPRESSION, $sym1506$CYBLACK_SIMPLE_SATISFACTION_EXPRESSION_PARSER_NEW_EXPRESSION_METH);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_SIMPLE_SATISFACTION_EXPRESSION_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1507);
	methods.subloop_register_instance_method(CYBLACK_SIMPLE_SATISFACTION_EXPRESSION_PARSER, INITIALIZE, CYBLACK_SIMPLE_SATISFACTION_EXPRESSION_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_SIMPLE_SATISFACTION_EXPRESSION_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1510);
	methods.subloop_register_instance_method(CYBLACK_SIMPLE_SATISFACTION_EXPRESSION_PARSER, PARSE, CYBLACK_SIMPLE_SATISFACTION_EXPRESSION_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_AND_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_AND_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_AND_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AND_PARSER_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_AND_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AND_PARSER_INSTANCE);
	subloop_reserved_initialize_cyblack_and_parser_class(CYBLACK_AND_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_AND_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1515);
	methods.subloop_register_instance_method(CYBLACK_AND_PARSER, INITIALIZE, CYBLACK_AND_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_AND_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1518);
	methods.subloop_register_instance_method(CYBLACK_AND_PARSER, PARSE, CYBLACK_AND_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_OR_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_OR_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_OR_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_OR_PARSER_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_OR_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_OR_PARSER_INSTANCE);
	subloop_reserved_initialize_cyblack_or_parser_class(CYBLACK_OR_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_OR_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1524);
	methods.subloop_register_instance_method(CYBLACK_OR_PARSER, INITIALIZE, CYBLACK_OR_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_OR_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1527);
	methods.subloop_register_instance_method(CYBLACK_OR_PARSER, PARSE, CYBLACK_OR_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_NOT_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_NOT_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_NOT_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_NOT_PARSER_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_NOT_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_NOT_PARSER_INSTANCE);
	subloop_reserved_initialize_cyblack_not_parser_class(CYBLACK_NOT_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_NOT_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1533);
	methods.subloop_register_instance_method(CYBLACK_NOT_PARSER, INITIALIZE, CYBLACK_NOT_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_NOT_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1536);
	methods.subloop_register_instance_method(CYBLACK_NOT_PARSER, PARSE, CYBLACK_NOT_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_EQ_PREDICATE_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_EQ_PREDICATE_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_EQ_PREDICATE_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EQ_PREDICATE_PARSER_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_EQ_PREDICATE_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EQ_PREDICATE_PARSER_INSTANCE);
	subloop_reserved_initialize_cyblack_eq_predicate_parser_class(CYBLACK_EQ_PREDICATE_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_EQ_PREDICATE_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1542);
	methods.subloop_register_instance_method(CYBLACK_EQ_PREDICATE_PARSER, INITIALIZE, CYBLACK_EQ_PREDICATE_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_EQ_PREDICATE_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1545);
	methods.subloop_register_instance_method(CYBLACK_EQ_PREDICATE_PARSER, PARSE, CYBLACK_EQ_PREDICATE_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_EQUAL_PREDICATE_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_EQUAL_PREDICATE_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_EQUAL_PREDICATE_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EQUAL_PREDICATE_PARSER_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_EQUAL_PREDICATE_PARSER, $sym1550$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EQUAL_PREDICATE_PARSER_INSTAN);
	subloop_reserved_initialize_cyblack_equal_predicate_parser_class(CYBLACK_EQUAL_PREDICATE_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_EQUAL_PREDICATE_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1551);
	methods.subloop_register_instance_method(CYBLACK_EQUAL_PREDICATE_PARSER, INITIALIZE, CYBLACK_EQUAL_PREDICATE_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_EQUAL_PREDICATE_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1554);
	methods.subloop_register_instance_method(CYBLACK_EQUAL_PREDICATE_PARSER, PARSE, CYBLACK_EQUAL_PREDICATE_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_ASSOC_EQUAL_PREDICATE_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_ASSOC_EQUAL_PREDICATE_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_ASSOC_EQUAL_PREDICATE_PARSER, $sym1558$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ASSOC_EQUAL_PREDICATE_PARSER_);
	classes.subloop_note_instance_initialization_function(CYBLACK_ASSOC_EQUAL_PREDICATE_PARSER, $sym1559$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ASSOC_EQUAL_PREDICATE_PARSER_);
	subloop_reserved_initialize_cyblack_assoc_equal_predicate_parser_class(CYBLACK_ASSOC_EQUAL_PREDICATE_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_ASSOC_EQUAL_PREDICATE_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1560);
	methods.subloop_register_instance_method(CYBLACK_ASSOC_EQUAL_PREDICATE_PARSER, INITIALIZE, CYBLACK_ASSOC_EQUAL_PREDICATE_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_ASSOC_EQUAL_PREDICATE_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1563);
	methods.subloop_register_instance_method(CYBLACK_ASSOC_EQUAL_PREDICATE_PARSER, PARSE, CYBLACK_ASSOC_EQUAL_PREDICATE_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_LE_PREDICATE_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_LE_PREDICATE_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_LE_PREDICATE_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_LE_PREDICATE_PARSER_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_LE_PREDICATE_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_LE_PREDICATE_PARSER_INSTANCE);
	subloop_reserved_initialize_cyblack_le_predicate_parser_class(CYBLACK_LE_PREDICATE_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_LE_PREDICATE_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1569);
	methods.subloop_register_instance_method(CYBLACK_LE_PREDICATE_PARSER, INITIALIZE, CYBLACK_LE_PREDICATE_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_LE_PREDICATE_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1572);
	methods.subloop_register_instance_method(CYBLACK_LE_PREDICATE_PARSER, PARSE, CYBLACK_LE_PREDICATE_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_GE_PREDICATE_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_GE_PREDICATE_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_GE_PREDICATE_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_GE_PREDICATE_PARSER_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_GE_PREDICATE_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_GE_PREDICATE_PARSER_INSTANCE);
	subloop_reserved_initialize_cyblack_ge_predicate_parser_class(CYBLACK_GE_PREDICATE_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_GE_PREDICATE_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1578);
	methods.subloop_register_instance_method(CYBLACK_GE_PREDICATE_PARSER, INITIALIZE, CYBLACK_GE_PREDICATE_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_GE_PREDICATE_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1581);
	methods.subloop_register_instance_method(CYBLACK_GE_PREDICATE_PARSER, PARSE, CYBLACK_GE_PREDICATE_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_LT_PREDICATE_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_LT_PREDICATE_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_LT_PREDICATE_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_LT_PREDICATE_PARSER_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_LT_PREDICATE_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_LT_PREDICATE_PARSER_INSTANCE);
	subloop_reserved_initialize_cyblack_lt_predicate_parser_class(CYBLACK_LT_PREDICATE_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_LT_PREDICATE_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1587);
	methods.subloop_register_instance_method(CYBLACK_LT_PREDICATE_PARSER, INITIALIZE, CYBLACK_LT_PREDICATE_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_LT_PREDICATE_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1590);
	methods.subloop_register_instance_method(CYBLACK_LT_PREDICATE_PARSER, PARSE, CYBLACK_LT_PREDICATE_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_GT_PREDICATE_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_GT_PREDICATE_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_GT_PREDICATE_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_GT_PREDICATE_PARSER_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_GT_PREDICATE_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_GT_PREDICATE_PARSER_INSTANCE);
	subloop_reserved_initialize_cyblack_gt_predicate_parser_class(CYBLACK_GT_PREDICATE_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_GT_PREDICATE_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1596);
	methods.subloop_register_instance_method(CYBLACK_GT_PREDICATE_PARSER, INITIALIZE, CYBLACK_GT_PREDICATE_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_GT_PREDICATE_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1599);
	methods.subloop_register_instance_method(CYBLACK_GT_PREDICATE_PARSER, PARSE, CYBLACK_GT_PREDICATE_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_TYPE_OF_EXPRESSION_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_TYPE_OF_EXPRESSION_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_TYPE_OF_EXPRESSION_PARSER, $sym1603$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_TYPE_OF_EXPRESSION_PARSER_CLA);
	classes.subloop_note_instance_initialization_function(CYBLACK_TYPE_OF_EXPRESSION_PARSER, $sym1604$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_TYPE_OF_EXPRESSION_PARSER_INS);
	subloop_reserved_initialize_cyblack_type_of_expression_parser_class(CYBLACK_TYPE_OF_EXPRESSION_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_TYPE_OF_EXPRESSION_PARSER, cyblack_precondition_pattern_p2.$list_alt415, NIL, cyblack_precondition_pattern_p3.$list_alt1605);
	methods.subloop_register_instance_method(CYBLACK_TYPE_OF_EXPRESSION_PARSER, INITIALIZE, CYBLACK_TYPE_OF_EXPRESSION_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_TYPE_OF_EXPRESSION_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1608);
	methods.subloop_register_instance_method(CYBLACK_TYPE_OF_EXPRESSION_PARSER, PARSE, CYBLACK_TYPE_OF_EXPRESSION_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_CALL_METHOD_EXPRESSION_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_CALL_METHOD_EXPRESSION_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_CALL_METHOD_EXPRESSION_PARSER, $sym1612$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_CALL_METHOD_EXPRESSION_PARSER);
	classes.subloop_note_instance_initialization_function(CYBLACK_CALL_METHOD_EXPRESSION_PARSER, $sym1613$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_CALL_METHOD_EXPRESSION_PARSER);
	subloop_reserved_initialize_cyblack_call_method_expression_parser_class(CYBLACK_CALL_METHOD_EXPRESSION_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_CALL_METHOD_EXPRESSION_PARSER, cyblack_precondition_pattern_p2.$list_alt415, NIL, cyblack_precondition_pattern_p3.$list_alt1614);
	methods.subloop_register_instance_method(CYBLACK_CALL_METHOD_EXPRESSION_PARSER, INITIALIZE, CYBLACK_CALL_METHOD_EXPRESSION_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_CALL_METHOD_EXPRESSION_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1617);
	methods.subloop_register_instance_method(CYBLACK_CALL_METHOD_EXPRESSION_PARSER, PARSE, CYBLACK_CALL_METHOD_EXPRESSION_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_SLOT_ACCESS_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_SLOT_ACCESS_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_SLOT_ACCESS_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SLOT_ACCESS_PARSER_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_SLOT_ACCESS_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SLOT_ACCESS_PARSER_INSTANCE);
	subloop_reserved_initialize_cyblack_slot_access_parser_class(CYBLACK_SLOT_ACCESS_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_SLOT_ACCESS_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1623);
	methods.subloop_register_instance_method(CYBLACK_SLOT_ACCESS_PARSER, INITIALIZE, CYBLACK_SLOT_ACCESS_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_SLOT_ACCESS_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1626);
	methods.subloop_register_instance_method(CYBLACK_SLOT_ACCESS_PARSER, PARSE, CYBLACK_SLOT_ACCESS_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_SUBTRACTION_EXPRESSION_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_SUBTRACTION_EXPRESSION_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_SUBTRACTION_EXPRESSION_PARSER, $sym1630$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SUBTRACTION_EXPRESSION_PARSER);
	classes.subloop_note_instance_initialization_function(CYBLACK_SUBTRACTION_EXPRESSION_PARSER, $sym1631$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SUBTRACTION_EXPRESSION_PARSER);
	subloop_reserved_initialize_cyblack_subtraction_expression_parser_class(CYBLACK_SUBTRACTION_EXPRESSION_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_SUBTRACTION_EXPRESSION_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1632);
	methods.subloop_register_instance_method(CYBLACK_SUBTRACTION_EXPRESSION_PARSER, INITIALIZE, CYBLACK_SUBTRACTION_EXPRESSION_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_SUBTRACTION_EXPRESSION_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1635);
	methods.subloop_register_instance_method(CYBLACK_SUBTRACTION_EXPRESSION_PARSER, PARSE, CYBLACK_SUBTRACTION_EXPRESSION_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_ADDITION_EXPRESSION_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_ADDITION_EXPRESSION_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_ADDITION_EXPRESSION_PARSER, $sym1639$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ADDITION_EXPRESSION_PARSER_CL);
	classes.subloop_note_instance_initialization_function(CYBLACK_ADDITION_EXPRESSION_PARSER, $sym1640$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ADDITION_EXPRESSION_PARSER_IN);
	subloop_reserved_initialize_cyblack_addition_expression_parser_class(CYBLACK_ADDITION_EXPRESSION_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_ADDITION_EXPRESSION_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1641);
	methods.subloop_register_instance_method(CYBLACK_ADDITION_EXPRESSION_PARSER, INITIALIZE, CYBLACK_ADDITION_EXPRESSION_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_ADDITION_EXPRESSION_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1644);
	methods.subloop_register_instance_method(CYBLACK_ADDITION_EXPRESSION_PARSER, PARSE, CYBLACK_ADDITION_EXPRESSION_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_MULTIPLICATION_EXPRESSION_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_MULTIPLICATION_EXPRESSION_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_MULTIPLICATION_EXPRESSION_PARSER, $sym1648$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_MULTIPLICATION_EXPRESSION_PAR);
	classes.subloop_note_instance_initialization_function(CYBLACK_MULTIPLICATION_EXPRESSION_PARSER, $sym1649$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_MULTIPLICATION_EXPRESSION_PAR);
	subloop_reserved_initialize_cyblack_multiplication_expression_parser_class(CYBLACK_MULTIPLICATION_EXPRESSION_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_MULTIPLICATION_EXPRESSION_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1650);
	methods.subloop_register_instance_method(CYBLACK_MULTIPLICATION_EXPRESSION_PARSER, INITIALIZE, CYBLACK_MULTIPLICATION_EXPRESSION_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_MULTIPLICATION_EXPRESSION_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1653);
	methods.subloop_register_instance_method(CYBLACK_MULTIPLICATION_EXPRESSION_PARSER, PARSE, CYBLACK_MULTIPLICATION_EXPRESSION_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_DIVISION_EXPRESSION_PARSER, CYBLACK_ITEM_PARSER, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1402);
	classes.class_set_implements_slot_listeners(CYBLACK_DIVISION_EXPRESSION_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_DIVISION_EXPRESSION_PARSER, $sym1657$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DIVISION_EXPRESSION_PARSER_CL);
	classes.subloop_note_instance_initialization_function(CYBLACK_DIVISION_EXPRESSION_PARSER, $sym1658$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DIVISION_EXPRESSION_PARSER_IN);
	subloop_reserved_initialize_cyblack_division_expression_parser_class(CYBLACK_DIVISION_EXPRESSION_PARSER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_DIVISION_EXPRESSION_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1659);
	methods.subloop_register_instance_method(CYBLACK_DIVISION_EXPRESSION_PARSER, INITIALIZE, CYBLACK_DIVISION_EXPRESSION_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_DIVISION_EXPRESSION_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1662);
	methods.subloop_register_instance_method(CYBLACK_DIVISION_EXPRESSION_PARSER, PARSE, CYBLACK_DIVISION_EXPRESSION_PARSER_PARSE_METHOD);
	classes.subloop_new_class(CYBLACK_ITEM_COMPILER, CYBLACK_PATTERN_PROCESSOR, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1666);
	classes.class_set_implements_slot_listeners(CYBLACK_ITEM_COMPILER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_ITEM_COMPILER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ITEM_COMPILER_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_ITEM_COMPILER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ITEM_COMPILER_INSTANCE);
	subloop_reserved_initialize_cyblack_item_compiler_class(CYBLACK_ITEM_COMPILER);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_ITEM_COMPILER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p2.$list_alt860);
	methods.subloop_register_instance_method(CYBLACK_ITEM_COMPILER, INITIALIZE, CYBLACK_ITEM_COMPILER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_ITEM_COMPILER, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p2.$list_alt30, cyblack_precondition_pattern_p3.$list_alt1670);
	methods.subloop_register_instance_method(CYBLACK_ITEM_COMPILER, PRINT, CYBLACK_ITEM_COMPILER_PRINT_METHOD);
	methods.methods_incorporate_instance_method(COMPILE, CYBLACK_ITEM_COMPILER, cyblack_precondition_pattern_p3.$list_alt189, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1376);
	methods.subloop_register_instance_method(CYBLACK_ITEM_COMPILER, COMPILE, CYBLACK_ITEM_COMPILER_COMPILE_METHOD);
	classes.subloop_new_class(CYBLACK_PARSER, CYBLACK_OBJECT, NIL, NIL, cyblack_precondition_pattern_p3.$list_alt1676);
	classes.class_set_implements_slot_listeners(CYBLACK_PARSER, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PARSER_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_PARSER, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PARSER_INSTANCE);
	subloop_reserved_initialize_cyblack_parser_class(CYBLACK_PARSER);
	methods.methods_incorporate_instance_method(REGISTER_PARSERS, CYBLACK_PARSER, cyblack_precondition_pattern_p2.$list_alt29, NIL, cyblack_precondition_pattern_p3.$list_alt1682);
	methods.subloop_register_instance_method(CYBLACK_PARSER, REGISTER_PARSERS, CYBLACK_PARSER_REGISTER_PARSERS_METHOD);
	methods.methods_incorporate_instance_method(ON_STARTUP, CYBLACK_PARSER, cyblack_precondition_pattern_p2.$list_alt79, NIL, cyblack_precondition_pattern_p3.$list_alt1685);
	methods.subloop_register_instance_method(CYBLACK_PARSER, ON_STARTUP, CYBLACK_PARSER_ON_STARTUP_METHOD);
	methods.methods_incorporate_instance_method(ON_SHUTDOWN, CYBLACK_PARSER, cyblack_precondition_pattern_p3.$list_alt189, NIL, cyblack_precondition_pattern_p3.$list_alt1689);
	methods.subloop_register_instance_method(CYBLACK_PARSER, ON_SHUTDOWN, CYBLACK_PARSER_ON_SHUTDOWN_METHOD);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_PARSER, cyblack_precondition_pattern_p3.$list_alt24, NIL, cyblack_precondition_pattern_p3.$list_alt1691);
	methods.subloop_register_instance_method(CYBLACK_PARSER, INITIALIZE, CYBLACK_PARSER_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(SET_APPLICATION, CYBLACK_PARSER, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p3.$list_alt1694, cyblack_precondition_pattern_p3.$list_alt1695);
	methods.subloop_register_instance_method(CYBLACK_PARSER, SET_APPLICATION, CYBLACK_PARSER_SET_APPLICATION_METHOD);
	methods.methods_incorporate_instance_method(REGISTER_PARSER, CYBLACK_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1698, cyblack_precondition_pattern_p3.$list_alt1699);
	methods.subloop_register_instance_method(CYBLACK_PARSER, REGISTER_PARSER, CYBLACK_PARSER_REGISTER_PARSER_METHOD);
	methods.methods_incorporate_instance_method(RETRIEVE_PARSER, CYBLACK_PARSER, cyblack_precondition_pattern_p2.$list_alt79, cyblack_precondition_pattern_p3.$list_alt1703, cyblack_precondition_pattern_p3.$list_alt1704);
	methods.subloop_register_instance_method(CYBLACK_PARSER, RETRIEVE_PARSER, CYBLACK_PARSER_RETRIEVE_PARSER_METHOD);
	methods.methods_incorporate_instance_method(REGISTER_COMPILER, CYBLACK_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1707, cyblack_precondition_pattern_p3.$list_alt1708);
	methods.subloop_register_instance_method(CYBLACK_PARSER, REGISTER_COMPILER, CYBLACK_PARSER_REGISTER_COMPILER_METHOD);
	methods.methods_incorporate_instance_method(RETRIEVE_COMPILER, CYBLACK_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1703, cyblack_precondition_pattern_p3.$list_alt1712);
	methods.subloop_register_instance_method(CYBLACK_PARSER, RETRIEVE_COMPILER, CYBLACK_PARSER_RETRIEVE_COMPILER_METHOD);
	methods.methods_incorporate_instance_method(PARSE, CYBLACK_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1375, cyblack_precondition_pattern_p3.$list_alt1715);
	methods.subloop_register_instance_method(CYBLACK_PARSER, PARSE, CYBLACK_PARSER_PARSE_METHOD);
	methods.methods_incorporate_instance_method(COMPILE, CYBLACK_PARSER, cyblack_precondition_pattern_p2.$list_alt29, cyblack_precondition_pattern_p3.$list_alt1721, cyblack_precondition_pattern_p3.$list_alt1722);
	methods.subloop_register_instance_method(CYBLACK_PARSER, COMPILE, CYBLACK_PARSER_COMPILE_METHOD);
	return NIL;
    }

    // // Internal Constants
    private static final SubLSymbol $EXISTENTIAL_FUNCTOR = makeKeyword("EXISTENTIAL-FUNCTOR");

    private static final SubLSymbol $EMPTY_P = makeKeyword("EMPTY-P");

    private static final SubLSymbol $PANEL = makeKeyword("PANEL");

    private static final SubLSymbol $MONITOR = makeKeyword("MONITOR");

    private static final SubLSymbol $KS_ARGS = makeKeyword("KS-ARGS");

    private static final SubLSymbol $BINDING_LIST = makeKeyword("BINDING-LIST");

    private static final SubLSymbol $SATISFY = makeKeyword("SATISFY");

    private static final SubLSymbol $SATISFY_SIMPLE = makeKeyword("SATISFY-SIMPLE");

    private static final SubLSymbol $ASSOC_EQUAL = makeKeyword("ASSOC-EQUAL");

    private static final SubLSymbol $TYPE_OF = makeKeyword("TYPE-OF");

    private static final SubLSymbol $GET_SLOT = makeKeyword("GET-SLOT");

    private static final SubLSymbol $CYBLACK_UNBOUND_VALUE = makeKeyword("CYBLACK-UNBOUND-VALUE");

    private static final SubLSymbol CYBLACK_PATTERN_OPERATOR = makeSymbol("CYBLACK-PATTERN-OPERATOR");

    private static final SubLSymbol CYBLACK_OR_EXPRESSION_GET_VALUE_METHOD = makeSymbol("CYBLACK-OR-EXPRESSION-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_PREDICATE = makeSymbol("CYBLACK-PREDICATE");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PREDICATE_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PREDICATE-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PREDICATE_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PREDICATE-INSTANCE");

    private static final SubLSymbol CHECK_ARG_P = makeSymbol("CHECK-ARG-P");

    private static final SubLSymbol CYBLACK_PREDICATE_CHECK_ARG_P_METHOD = makeSymbol("CYBLACK-PREDICATE-CHECK-ARG-P-METHOD");

    static private final SubLSymbol $sym1012$OUTER_CATCH_FOR_CYBLACK_PREDICATE_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PREDICATE-METHOD");

    private static final SubLSymbol CYBLACK_PREDICATE_INITIALIZE_METHOD = makeSymbol("CYBLACK-PREDICATE-INITIALIZE-METHOD");

    private static final SubLSymbol DECLARE_SIGNATURE = makeSymbol("DECLARE-SIGNATURE");

    static private final SubLSymbol $sym1017$OUTER_CATCH_FOR_CYBLACK_PREDICATE_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PREDICATE-METHOD");

    private static final SubLSymbol CYBLACK_PREDICATE_DECLARE_SIGNATURE_METHOD = makeSymbol("CYBLACK-PREDICATE-DECLARE-SIGNATURE-METHOD");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ENVIRONMENT_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ENVIRONMENT-CLASS");

    private static final SubLSymbol CYBLACK_PREDICATE_PRINT_METHOD = makeSymbol("CYBLACK-PREDICATE-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_PREDICATE_PRINT_OPERATOR_METHOD = makeSymbol("CYBLACK-PREDICATE-PRINT-OPERATOR-METHOD");

    private static final SubLSymbol PRINT_ARGLIST = makeSymbol("PRINT-ARGLIST");

    private static final SubLSymbol CYBLACK_PREDICATE_PRINT_ARGLIST_METHOD = makeSymbol("CYBLACK-PREDICATE-PRINT-ARGLIST-METHOD");

    private static final SubLSymbol CYBLACK_PREDICATE_GET_ARITY_METHOD = makeSymbol("CYBLACK-PREDICATE-GET-ARITY-METHOD");

    private static final SubLSymbol GET_ARGN_TYPE = makeSymbol("GET-ARGN-TYPE");

    private static final SubLSymbol CYBLACK_PREDICATE_GET_ARGN_TYPE_METHOD = makeSymbol("CYBLACK-PREDICATE-GET-ARGN-TYPE-METHOD");

    private static final SubLSymbol SET_ARGN_TYPE = makeSymbol("SET-ARGN-TYPE");

    static private final SubLSymbol $sym1035$OUTER_CATCH_FOR_CYBLACK_PREDICATE_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PREDICATE-METHOD");

    private static final SubLSymbol CYBLACK_PREDICATE_SET_ARGN_TYPE_METHOD = makeSymbol("CYBLACK-PREDICATE-SET-ARGN-TYPE-METHOD");

    private static final SubLSymbol CYBLACK_PREDICATE_GET_ARGN_METHOD = makeSymbol("CYBLACK-PREDICATE-GET-ARGN-METHOD");

    static private final SubLSymbol $sym1041$OUTER_CATCH_FOR_CYBLACK_PREDICATE_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PREDICATE-METHOD");

    private static final SubLSymbol CYBLACK_PREDICATE_SET_ARGN_METHOD = makeSymbol("CYBLACK-PREDICATE-SET-ARGN-METHOD");

    private static final SubLSymbol CYBLACK_BINARY_PREDICATE = makeSymbol("CYBLACK-BINARY-PREDICATE");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_BINARY_PREDICATE_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-BINARY-PREDICATE-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_BINARY_PREDICATE_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-BINARY-PREDICATE-INSTANCE");

    static private final SubLSymbol $sym1048$OUTER_CATCH_FOR_CYBLACK_BINARY_PREDICATE_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-BINARY-PREDICATE-METHOD");

    private static final SubLSymbol CYBLACK_BINARY_PREDICATE_INITIALIZE_METHOD = makeSymbol("CYBLACK-BINARY-PREDICATE-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_BINARY_PREDICATE_DECLARE_SIGNATURE_METHOD = makeSymbol("CYBLACK-BINARY-PREDICATE-DECLARE-SIGNATURE-METHOD");

    private static final SubLSymbol CYBLACK_BINARY_PREDICATE_PRINT_OPERATOR_METHOD = makeSymbol("CYBLACK-BINARY-PREDICATE-PRINT-OPERATOR-METHOD");

    private static final SubLSymbol CYBLACK_BINARY_PREDICATE_GET_ARITY_METHOD = makeSymbol("CYBLACK-BINARY-PREDICATE-GET-ARITY-METHOD");

    private static final SubLSymbol CYBLACK_BINARY_PREDICATE_SET_ARGN_TYPE_METHOD = makeSymbol("CYBLACK-BINARY-PREDICATE-SET-ARGN-TYPE-METHOD");

    private static final SubLSymbol CYBLACK_BINARY_PREDICATE_SET_ARGN_METHOD = makeSymbol("CYBLACK-BINARY-PREDICATE-SET-ARGN-METHOD");

    private static final SubLSymbol CYBLACK_BINARY_PREDICATE_GET_ARG1_METHOD = makeSymbol("CYBLACK-BINARY-PREDICATE-GET-ARG1-METHOD");

    private static final SubLSymbol CYBLACK_BINARY_PREDICATE_SET_ARG1_METHOD = makeSymbol("CYBLACK-BINARY-PREDICATE-SET-ARG1-METHOD");

    private static final SubLSymbol CYBLACK_BINARY_PREDICATE_GET_ARG2_METHOD = makeSymbol("CYBLACK-BINARY-PREDICATE-GET-ARG2-METHOD");

    private static final SubLSymbol CYBLACK_BINARY_PREDICATE_SET_ARG2_METHOD = makeSymbol("CYBLACK-BINARY-PREDICATE-SET-ARG2-METHOD");

    private static final SubLSymbol CYBLACK_BINARY_PREDICATE_OVER_VALUE_EXPRESSIONS = makeSymbol("CYBLACK-BINARY-PREDICATE-OVER-VALUE-EXPRESSIONS");

    static private final SubLSymbol $sym1070$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_BINARY_PREDICATE_OVER_VALUE_E = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-BINARY-PREDICATE-OVER-VALUE-EXPRESSIONS-CLASS");

    static private final SubLSymbol $sym1071$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_BINARY_PREDICATE_OVER_VALUE_E = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-BINARY-PREDICATE-OVER-VALUE-EXPRESSIONS-INSTANCE");

    private static final SubLSymbol CYBLACK_BINARY_PREDICATE_OVER_VALUE_EXPRESSIONS_INITIALIZE_METHOD = makeSymbol("CYBLACK-BINARY-PREDICATE-OVER-VALUE-EXPRESSIONS-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_EQ_PREDICATE = makeSymbol("CYBLACK-EQ-PREDICATE");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EQ_PREDICATE_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EQ-PREDICATE-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EQ_PREDICATE_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EQ-PREDICATE-INSTANCE");

    private static final SubLSymbol CYBLACK_EQ_PREDICATE_INITIALIZE_METHOD = makeSymbol("CYBLACK-EQ-PREDICATE-INITIALIZE-METHOD");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ENVIRONMENT_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ENVIRONMENT-INSTANCE");

    private static final SubLSymbol CYBLACK_EQ_PREDICATE_PRINT_OPERATOR_METHOD = makeSymbol("CYBLACK-EQ-PREDICATE-PRINT-OPERATOR-METHOD");

    private static final SubLSymbol CYBLACK_EQ_PREDICATE_GET_VALUE_METHOD = makeSymbol("CYBLACK-EQ-PREDICATE-GET-VALUE-METHOD");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EQUAL_PREDICATE_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EQUAL-PREDICATE-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EQUAL_PREDICATE_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EQUAL-PREDICATE-INSTANCE");

    private static final SubLSymbol CYBLACK_EQUAL_PREDICATE_INITIALIZE_METHOD = makeSymbol("CYBLACK-EQUAL-PREDICATE-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_EQUAL_PREDICATE_PRINT_OPERATOR_METHOD = makeSymbol("CYBLACK-EQUAL-PREDICATE-PRINT-OPERATOR-METHOD");

    private static final SubLSymbol INSTANTIATE_BINDING_LIST = makeSymbol("INSTANTIATE-BINDING-LIST");

    private static final SubLSymbol CYBLACK_EQUAL_PREDICATE_GET_VALUE_METHOD = makeSymbol("CYBLACK-EQUAL-PREDICATE-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_ASSOC_EQUAL_PREDICATE = makeSymbol("CYBLACK-ASSOC-EQUAL-PREDICATE");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ASSOC_EQUAL_PREDICATE_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ASSOC-EQUAL-PREDICATE-CLASS");

    static private final SubLSymbol $sym1094$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ASSOC_EQUAL_PREDICATE_INSTANC = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ASSOC-EQUAL-PREDICATE-INSTANCE");

    private static final SubLSymbol CYBLACK_ASSOC_EQUAL_PREDICATE_INITIALIZE_METHOD = makeSymbol("CYBLACK-ASSOC-EQUAL-PREDICATE-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_ASSOC_EQUAL_PREDICATE_PRINT_OPERATOR_METHOD = makeSymbol("CYBLACK-ASSOC-EQUAL-PREDICATE-PRINT-OPERATOR-METHOD");

    private static final SubLSymbol CYBLACK_ASSOC_EQUAL_PREDICATE_GET_VALUE_METHOD = makeSymbol("CYBLACK-ASSOC-EQUAL-PREDICATE-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_LE_PREDICATE = makeSymbol("CYBLACK-LE-PREDICATE");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_LE_PREDICATE_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-LE-PREDICATE-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_LE_PREDICATE_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-LE-PREDICATE-INSTANCE");

    private static final SubLSymbol CYBLACK_LE_PREDICATE_INITIALIZE_METHOD = makeSymbol("CYBLACK-LE-PREDICATE-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_LE_PREDICATE_PRINT_OPERATOR_METHOD = makeSymbol("CYBLACK-LE-PREDICATE-PRINT-OPERATOR-METHOD");

    private static final SubLSymbol CYBLACK_LE_PREDICATE_GET_VALUE_METHOD = makeSymbol("CYBLACK-LE-PREDICATE-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_LT_PREDICATE = makeSymbol("CYBLACK-LT-PREDICATE");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_LT_PREDICATE_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-LT-PREDICATE-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_LT_PREDICATE_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-LT-PREDICATE-INSTANCE");

    private static final SubLSymbol CYBLACK_LT_PREDICATE_INITIALIZE_METHOD = makeSymbol("CYBLACK-LT-PREDICATE-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_LT_PREDICATE_PRINT_OPERATOR_METHOD = makeSymbol("CYBLACK-LT-PREDICATE-PRINT-OPERATOR-METHOD");

    private static final SubLSymbol CYBLACK_LT_PREDICATE_GET_VALUE_METHOD = makeSymbol("CYBLACK-LT-PREDICATE-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_GE_PREDICATE = makeSymbol("CYBLACK-GE-PREDICATE");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_INSTANTIATE_BINDING_LIST_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-INSTANTIATE-BINDING-LIST-METHOD");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_GE_PREDICATE_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-GE-PREDICATE-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_GE_PREDICATE_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-GE-PREDICATE-INSTANCE");

    private static final SubLSymbol CYBLACK_GE_PREDICATE_INITIALIZE_METHOD = makeSymbol("CYBLACK-GE-PREDICATE-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_GE_PREDICATE_PRINT_OPERATOR_METHOD = makeSymbol("CYBLACK-GE-PREDICATE-PRINT-OPERATOR-METHOD");

    private static final SubLSymbol CYBLACK_GE_PREDICATE_GET_VALUE_METHOD = makeSymbol("CYBLACK-GE-PREDICATE-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_GT_PREDICATE = makeSymbol("CYBLACK-GT-PREDICATE");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_GT_PREDICATE_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-GT-PREDICATE-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_GT_PREDICATE_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-GT-PREDICATE-INSTANCE");

    private static final SubLSymbol CYBLACK_GT_PREDICATE_INITIALIZE_METHOD = makeSymbol("CYBLACK-GT-PREDICATE-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_GT_PREDICATE_PRINT_OPERATOR_METHOD = makeSymbol("CYBLACK-GT-PREDICATE-PRINT-OPERATOR-METHOD");

    private static final SubLSymbol CYBLACK_GT_PREDICATE_GET_VALUE_METHOD = makeSymbol("CYBLACK-GT-PREDICATE-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_POSTING_REFERENCE = makeSymbol("CYBLACK-POSTING-REFERENCE");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_POSTING_REFERENCE_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-POSTING-REFERENCE-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_POSTING_REFERENCE_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-POSTING-REFERENCE-INSTANCE");

    static private final SubLSymbol $sym1138$OUTER_CATCH_FOR_CYBLACK_POSTING_REFERENCE_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-POSTING-REFERENCE-METHOD");

    private static final SubLSymbol CYBLACK_POSTING_REFERENCE_INITIALIZE_METHOD = makeSymbol("CYBLACK-POSTING-REFERENCE-INITIALIZE-METHOD");

    static private final SubLSymbol $sym114$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ENVIRONMENT-METHOD");

    private static final SubLSymbol CYBLACK_POSTING_REFERENCE_PRINT_METHOD = makeSymbol("CYBLACK-POSTING-REFERENCE-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_POSTING_REFERENCE_GET_VARIABLE_METHOD = makeSymbol("CYBLACK-POSTING-REFERENCE-GET-VARIABLE-METHOD");

    static private final SubLSymbol $sym1143$OUTER_CATCH_FOR_CYBLACK_POSTING_REFERENCE_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-POSTING-REFERENCE-METHOD");

    private static final SubLSymbol CYBLACK_POSTING_REFERENCE_SET_VARIABLE_METHOD = makeSymbol("CYBLACK-POSTING-REFERENCE-SET-VARIABLE-METHOD");

    private static final SubLSymbol CYBLACK_POSTING_REFERENCE_GET_VALUE_METHOD = makeSymbol("CYBLACK-POSTING-REFERENCE-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_POSTING_OPERATION_EXPRESSION = makeSymbol("CYBLACK-POSTING-OPERATION-EXPRESSION");

    static private final SubLSymbol $sym1149$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_POSTING_OPERATION_EXPRESSION_ = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-POSTING-OPERATION-EXPRESSION-CLASS");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_INITIALIZE_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1151$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_POSTING_OPERATION_EXPRESSION_ = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-POSTING-OPERATION-EXPRESSION-INSTANCE");

    static private final SubLSymbol $sym1153$OUTER_CATCH_FOR_CYBLACK_POSTING_OPERATION_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-POSTING-OPERATION-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_POSTING_OPERATION_EXPRESSION_INITIALIZE_METHOD = makeSymbol("CYBLACK-POSTING-OPERATION-EXPRESSION-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_POSTING_OPERATION_EXPRESSION_PRINT_METHOD = makeSymbol("CYBLACK-POSTING-OPERATION-EXPRESSION-PRINT-METHOD");

    private static final SubLSymbol GET_POSTING_EXPRESSION = makeSymbol("GET-POSTING-EXPRESSION");

    static private final SubLSymbol $sym1160$CYBLACK_POSTING_OPERATION_EXPRESSION_GET_POSTING_EXPRESSION_METHO = makeSymbol("CYBLACK-POSTING-OPERATION-EXPRESSION-GET-POSTING-EXPRESSION-METHOD");

    private static final SubLSymbol SET_POSTING_EXPRESSION = makeSymbol("SET-POSTING-EXPRESSION");

    static private final SubLSymbol $sym1164$OUTER_CATCH_FOR_CYBLACK_POSTING_OPERATION_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-POSTING-OPERATION-EXPRESSION-METHOD");

    static private final SubLSymbol $sym1165$CYBLACK_POSTING_OPERATION_EXPRESSION_SET_POSTING_EXPRESSION_METHO = makeSymbol("CYBLACK-POSTING-OPERATION-EXPRESSION-SET-POSTING-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_POSTING_OPERATION_EXPRESSION_GET_VALUE_METHOD = makeSymbol("CYBLACK-POSTING-OPERATION-EXPRESSION-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_TYPE_OF_EXPRESSION = makeSymbol("CYBLACK-TYPE-OF-EXPRESSION");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_TYPE_OF_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-TYPE-OF-EXPRESSION-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_TYPE_OF_EXPRESSION_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-TYPE-OF-EXPRESSION-INSTANCE");

    private static final SubLSymbol CYBLACK_TYPE_OF_EXPRESSION_INITIALIZE_METHOD = makeSymbol("CYBLACK-TYPE-OF-EXPRESSION-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_TYPE_OF_EXPRESSION_PRINT_METHOD = makeSymbol("CYBLACK-TYPE-OF-EXPRESSION-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_TYPE_OF_EXPRESSION_GET_VALUE_METHOD = makeSymbol("CYBLACK-TYPE-OF-EXPRESSION-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_CALL_METHOD_EXPRESSION = makeSymbol("CYBLACK-CALL-METHOD-EXPRESSION");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_CALL_METHOD_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-CALL-METHOD-EXPRESSION-CLASS");

    private static final SubLSymbol METHOD_NAME_LITERAL = makeSymbol("METHOD-NAME-LITERAL");

    private static final SubLSymbol ACTUAL_ARGS = makeSymbol("ACTUAL-ARGS");

    static private final SubLSymbol $sym1183$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_CALL_METHOD_EXPRESSION_INSTAN = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-CALL-METHOD-EXPRESSION-INSTANCE");

    static private final SubLSymbol $sym1185$OUTER_CATCH_FOR_CYBLACK_CALL_METHOD_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-CALL-METHOD-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_CALL_METHOD_EXPRESSION_INITIALIZE_METHOD = makeSymbol("CYBLACK-CALL-METHOD-EXPRESSION-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_CALL_METHOD_EXPRESSION_PRINT_METHOD = makeSymbol("CYBLACK-CALL-METHOD-EXPRESSION-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_PRINT_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-PRINT-METHOD");

    private static final SubLSymbol GET_METHOD_NAME_LITERAL = makeSymbol("GET-METHOD-NAME-LITERAL");

    private static final SubLSymbol CYBLACK_CALL_METHOD_EXPRESSION_GET_METHOD_NAME_LITERAL_METHOD = makeSymbol("CYBLACK-CALL-METHOD-EXPRESSION-GET-METHOD-NAME-LITERAL-METHOD");

    private static final SubLSymbol SET_METHOD_NAME_LITERAL = makeSymbol("SET-METHOD-NAME-LITERAL");

    static private final SubLSymbol $sym1196$OUTER_CATCH_FOR_CYBLACK_CALL_METHOD_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-CALL-METHOD-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_CALL_METHOD_EXPRESSION_SET_METHOD_NAME_LITERAL_METHOD = makeSymbol("CYBLACK-CALL-METHOD-EXPRESSION-SET-METHOD-NAME-LITERAL-METHOD");

    private static final SubLSymbol GET_ACTUAL_ARGS = makeSymbol("GET-ACTUAL-ARGS");

    private static final SubLSymbol CYBLACK_CALL_METHOD_EXPRESSION_GET_ACTUAL_ARGS_METHOD = makeSymbol("CYBLACK-CALL-METHOD-EXPRESSION-GET-ACTUAL-ARGS-METHOD");

    private static final SubLSymbol SET_ACTUAL_ARGS = makeSymbol("SET-ACTUAL-ARGS");

    static private final SubLSymbol $sym1204$OUTER_CATCH_FOR_CYBLACK_CALL_METHOD_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-CALL-METHOD-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_CALL_METHOD_EXPRESSION_SET_ACTUAL_ARGS_METHOD = makeSymbol("CYBLACK-CALL-METHOD-EXPRESSION-SET-ACTUAL-ARGS-METHOD");

    private static final SubLSymbol EVALUATED_ARGS = makeSymbol("EVALUATED-ARGS");

    private static final SubLSymbol CYBLACK_CALL_METHOD_EXPRESSION_EVALUATED_ARGS_METHOD = makeSymbol("CYBLACK-CALL-METHOD-EXPRESSION-EVALUATED-ARGS-METHOD");

    static private final SubLSymbol $sym121$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ENVIRONMENT-METHOD");

    static private final SubLSymbol $sym1210$OUTER_CATCH_FOR_CYBLACK_CALL_METHOD_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-CALL-METHOD-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_CALL_METHOD_EXPRESSION_GET_VALUE_METHOD = makeSymbol("CYBLACK-CALL-METHOD-EXPRESSION-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_SLOT_ACCESS = makeSymbol("CYBLACK-SLOT-ACCESS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SLOT_ACCESS_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SLOT-ACCESS-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SLOT_ACCESS_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SLOT-ACCESS-INSTANCE");

    static private final SubLSymbol $sym1218$OUTER_CATCH_FOR_CYBLACK_SLOT_ACCESS_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-SLOT-ACCESS-METHOD");

    private static final SubLSymbol CYBLACK_SLOT_ACCESS_INITIALIZE_METHOD = makeSymbol("CYBLACK-SLOT-ACCESS-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_CLONE_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-CLONE-METHOD");

    private static final SubLSymbol CYBLACK_SLOT_ACCESS_PRINT_METHOD = makeSymbol("CYBLACK-SLOT-ACCESS-PRINT-METHOD");

    private static final SubLSymbol GET_SLOT_NAME = makeSymbol("GET-SLOT-NAME");

    private static final SubLSymbol CYBLACK_SLOT_ACCESS_GET_SLOT_NAME_METHOD = makeSymbol("CYBLACK-SLOT-ACCESS-GET-SLOT-NAME-METHOD");

    private static final SubLSymbol SET_SLOT_NAME = makeSymbol("SET-SLOT-NAME");

    static private final SubLSymbol $sym1229$OUTER_CATCH_FOR_CYBLACK_SLOT_ACCESS_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-SLOT-ACCESS-METHOD");

    private static final SubLSymbol GET_ENVIRONMENT_TAG = makeSymbol("GET-ENVIRONMENT-TAG");

    private static final SubLSymbol CYBLACK_SLOT_ACCESS_SET_SLOT_NAME_METHOD = makeSymbol("CYBLACK-SLOT-ACCESS-SET-SLOT-NAME-METHOD");

    private static final SubLSymbol CYBLACK_SLOT_ACCESS_GET_VALUE_METHOD = makeSymbol("CYBLACK-SLOT-ACCESS-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_ARITHMETIC_EXPRESSION = makeSymbol("CYBLACK-ARITHMETIC-EXPRESSION");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ARITHMETIC_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ARITHMETIC-EXPRESSION-CLASS");

    static private final SubLSymbol $sym1237$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ARITHMETIC_EXPRESSION_INSTANC = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ARITHMETIC-EXPRESSION-INSTANCE");

    static private final SubLSymbol $sym1239$OUTER_CATCH_FOR_CYBLACK_ARITHMETIC_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ARITHMETIC-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_ARITHMETIC_EXPRESSION_INITIALIZE_METHOD = makeSymbol("CYBLACK-ARITHMETIC-EXPRESSION-INITIALIZE-METHOD");

    private static final SubLSymbol PRINT_VALUE_EXPRESSION_LIST = makeSymbol("PRINT-VALUE-EXPRESSION-LIST");

    private static final SubLSymbol CYBLACK_ARITHMETIC_EXPRESSION_PRINT_METHOD = makeSymbol("CYBLACK-ARITHMETIC-EXPRESSION-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_ARITHMETIC_EXPRESSION_PRINT_OPERATOR_METHOD = makeSymbol("CYBLACK-ARITHMETIC-EXPRESSION-PRINT-OPERATOR-METHOD");

    private static final SubLSymbol CYBLACK_ARITHMETIC_EXPRESSION_PRINT_VALUE_EXPRESSION_LIST_METHOD = makeSymbol("CYBLACK-ARITHMETIC-EXPRESSION-PRINT-VALUE-EXPRESSION-LIST-METHOD");

    private static final SubLSymbol CYBLACK_ARITHMETIC_EXPRESSION_GET_ARITY_METHOD = makeSymbol("CYBLACK-ARITHMETIC-EXPRESSION-GET-ARITY-METHOD");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_GET_ENVIRONMENT_TAG_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-GET-ENVIRONMENT-TAG-METHOD");

    private static final SubLSymbol SET_ARITY = makeSymbol("SET-ARITY");

    static private final SubLSymbol $sym1252$OUTER_CATCH_FOR_CYBLACK_ARITHMETIC_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ARITHMETIC-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_ARITHMETIC_EXPRESSION_SET_ARITY_METHOD = makeSymbol("CYBLACK-ARITHMETIC-EXPRESSION-SET-ARITY-METHOD");

    private static final SubLSymbol CYBLACK_ARITHMETIC_EXPRESSION_GET_ARGS_METHOD = makeSymbol("CYBLACK-ARITHMETIC-EXPRESSION-GET-ARGS-METHOD");

    static private final SubLSymbol $sym1257$OUTER_CATCH_FOR_CYBLACK_ARITHMETIC_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ARITHMETIC-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_ARITHMETIC_EXPRESSION_SET_ARGS_METHOD = makeSymbol("CYBLACK-ARITHMETIC-EXPRESSION-SET-ARGS-METHOD");

    private static final SubLSymbol SET_ENVIRONMENT_TAG = makeSymbol("SET-ENVIRONMENT-TAG");

    private static final SubLSymbol CYBLACK_ARITHMETIC_EXPRESSION_GET_ARGN_METHOD = makeSymbol("CYBLACK-ARITHMETIC-EXPRESSION-GET-ARGN-METHOD");

    static private final SubLSymbol $sym1263$OUTER_CATCH_FOR_CYBLACK_ARITHMETIC_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ARITHMETIC-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_ARITHMETIC_EXPRESSION_SET_ARGN_METHOD = makeSymbol("CYBLACK-ARITHMETIC-EXPRESSION-SET-ARGN-METHOD");

    private static final SubLSymbol CYBLACK_ARITHMETIC_EXPRESSION_GET_VALUE_METHOD = makeSymbol("CYBLACK-ARITHMETIC-EXPRESSION-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_BINARY_ARITHMETIC_EXPRESSION = makeSymbol("CYBLACK-BINARY-ARITHMETIC-EXPRESSION");

    static private final SubLSymbol $sym1268$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_BINARY_ARITHMETIC_EXPRESSION_ = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-BINARY-ARITHMETIC-EXPRESSION-CLASS");

    static private final SubLSymbol $sym1269$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_BINARY_ARITHMETIC_EXPRESSION_ = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-BINARY-ARITHMETIC-EXPRESSION-INSTANCE");

    static private final SubLSymbol $sym1271$OUTER_CATCH_FOR_CYBLACK_BINARY_ARITHMETIC_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-BINARY-ARITHMETIC-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_BINARY_ARITHMETIC_EXPRESSION_INITIALIZE_METHOD = makeSymbol("CYBLACK-BINARY-ARITHMETIC-EXPRESSION-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_BINARY_ARITHMETIC_EXPRESSION_PRINT_OPERATOR_METHOD = makeSymbol("CYBLACK-BINARY-ARITHMETIC-EXPRESSION-PRINT-OPERATOR-METHOD");

    private static final SubLSymbol CYBLACK_BINARY_ARITHMETIC_EXPRESSION_GET_ARITY_METHOD = makeSymbol("CYBLACK-BINARY-ARITHMETIC-EXPRESSION-GET-ARITY-METHOD");

    private static final SubLSymbol CYBLACK_BINARY_ARITHMETIC_EXPRESSION_SET_ARITY_METHOD = makeSymbol("CYBLACK-BINARY-ARITHMETIC-EXPRESSION-SET-ARITY-METHOD");

    private static final SubLSymbol CYBLACK_BINARY_ARITHMETIC_EXPRESSION_GET_ARGS_METHOD = makeSymbol("CYBLACK-BINARY-ARITHMETIC-EXPRESSION-GET-ARGS-METHOD");

    private static final SubLSymbol CYBLACK_BINARY_ARITHMETIC_EXPRESSION_SET_ARGS_METHOD = makeSymbol("CYBLACK-BINARY-ARITHMETIC-EXPRESSION-SET-ARGS-METHOD");

    private static final SubLSymbol CYBLACK_BINARY_ARITHMETIC_EXPRESSION_GET_ARG1_METHOD = makeSymbol("CYBLACK-BINARY-ARITHMETIC-EXPRESSION-GET-ARG1-METHOD");

    private static final SubLSymbol CYBLACK_BINARY_ARITHMETIC_EXPRESSION_SET_ARG1_METHOD = makeSymbol("CYBLACK-BINARY-ARITHMETIC-EXPRESSION-SET-ARG1-METHOD");

    private static final SubLSymbol CYBLACK_BINARY_ARITHMETIC_EXPRESSION_GET_ARG2_METHOD = makeSymbol("CYBLACK-BINARY-ARITHMETIC-EXPRESSION-GET-ARG2-METHOD");

    private static final SubLSymbol CYBLACK_BINARY_ARITHMETIC_EXPRESSION_SET_ARG2_METHOD = makeSymbol("CYBLACK-BINARY-ARITHMETIC-EXPRESSION-SET-ARG2-METHOD");

    private static final SubLSymbol COMPUTE_VALUE = makeSymbol("COMPUTE-VALUE");

    private static final SubLSymbol CYBLACK_BINARY_ARITHMETIC_EXPRESSION_GET_VALUE_METHOD = makeSymbol("CYBLACK-BINARY-ARITHMETIC-EXPRESSION-GET-VALUE-METHOD");

    static private final SubLSymbol $sym129$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ENVIRONMENT-METHOD");

    private static final SubLSymbol CYBLACK_BINARY_ARITHMETIC_EXPRESSION_COMPUTE_VALUE_METHOD = makeSymbol("CYBLACK-BINARY-ARITHMETIC-EXPRESSION-COMPUTE-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_SUBTRACTION_EXPRESSION = makeSymbol("CYBLACK-SUBTRACTION-EXPRESSION");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SUBTRACTION_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SUBTRACTION-EXPRESSION-CLASS");

    static private final SubLSymbol $sym1295$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SUBTRACTION_EXPRESSION_INSTAN = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SUBTRACTION-EXPRESSION-INSTANCE");

    private static final SubLSymbol CYBLACK_SUBTRACTION_EXPRESSION_PRINT_OPERATOR_METHOD = makeSymbol("CYBLACK-SUBTRACTION-EXPRESSION-PRINT-OPERATOR-METHOD");

    private static final SubLSymbol CYBLACK_SUBTRACTION_EXPRESSION_COMPUTE_VALUE_METHOD = makeSymbol("CYBLACK-SUBTRACTION-EXPRESSION-COMPUTE-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_DIVISION_EXPRESSION = makeSymbol("CYBLACK-DIVISION-EXPRESSION");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_SET_ENVIRONMENT_TAG_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-SET-ENVIRONMENT-TAG-METHOD");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DIVISION_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DIVISION-EXPRESSION-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DIVISION_EXPRESSION_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DIVISION-EXPRESSION-INSTANCE");

    private static final SubLSymbol CYBLACK_DIVISION_EXPRESSION_PRINT_OPERATOR_METHOD = makeSymbol("CYBLACK-DIVISION-EXPRESSION-PRINT-OPERATOR-METHOD");

    private static final SubLSymbol CYBLACK_DIVISION_EXPRESSION_COMPUTE_VALUE_METHOD = makeSymbol("CYBLACK-DIVISION-EXPRESSION-COMPUTE-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_NARY_ARITHMETIC_EXPRESSION = makeSymbol("CYBLACK-NARY-ARITHMETIC-EXPRESSION");

    static private final SubLSymbol $sym1309$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_NARY_ARITHMETIC_EXPRESSION_CL = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-NARY-ARITHMETIC-EXPRESSION-CLASS");

    private static final SubLSymbol GET_OUTER_SCOPE = makeSymbol("GET-OUTER-SCOPE");

    static private final SubLSymbol $sym1310$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_NARY_ARITHMETIC_EXPRESSION_IN = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-NARY-ARITHMETIC-EXPRESSION-INSTANCE");

    static private final SubLSymbol $sym1312$OUTER_CATCH_FOR_CYBLACK_NARY_ARITHMETIC_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-NARY-ARITHMETIC-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_NARY_ARITHMETIC_EXPRESSION_INITIALIZE_METHOD = makeSymbol("CYBLACK-NARY-ARITHMETIC-EXPRESSION-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_NARY_ARITHMETIC_EXPRESSION_GET_VALUE_METHOD = makeSymbol("CYBLACK-NARY-ARITHMETIC-EXPRESSION-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_NARY_ARITHMETIC_EXPRESSION_COMPUTE_VALUE_METHOD = makeSymbol("CYBLACK-NARY-ARITHMETIC-EXPRESSION-COMPUTE-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_ADDITION_EXPRESSION = makeSymbol("CYBLACK-ADDITION-EXPRESSION");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ADDITION_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ADDITION-EXPRESSION-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ADDITION_EXPRESSION_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ADDITION-EXPRESSION-INSTANCE");

    private static final SubLSymbol CYBLACK_ADDITION_EXPRESSION_PRINT_OPERATOR_METHOD = makeSymbol("CYBLACK-ADDITION-EXPRESSION-PRINT-OPERATOR-METHOD");

    private static final SubLSymbol CYBLACK_ADDITION_EXPRESSION_COMPUTE_VALUE_METHOD = makeSymbol("CYBLACK-ADDITION-EXPRESSION-COMPUTE-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_MULTIPLICATION_EXPRESSION = makeSymbol("CYBLACK-MULTIPLICATION-EXPRESSION");

    static private final SubLSymbol $sym1329$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_MULTIPLICATION_EXPRESSION_CLA = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-MULTIPLICATION-EXPRESSION-CLASS");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_GET_OUTER_SCOPE_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-GET-OUTER-SCOPE-METHOD");

    static private final SubLSymbol $sym1330$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_MULTIPLICATION_EXPRESSION_INS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-MULTIPLICATION-EXPRESSION-INSTANCE");

    private static final SubLSymbol CYBLACK_MULTIPLICATION_EXPRESSION_PRINT_OPERATOR_METHOD = makeSymbol("CYBLACK-MULTIPLICATION-EXPRESSION-PRINT-OPERATOR-METHOD");

    private static final SubLSymbol CYBLACK_MULTIPLICATION_EXPRESSION_COMPUTE_VALUE_METHOD = makeSymbol("CYBLACK-MULTIPLICATION-EXPRESSION-COMPUTE-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_PATTERN_PROCESSOR = makeSymbol("CYBLACK-PATTERN-PROCESSOR");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PATTERN_PROCESSOR_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PATTERN-PROCESSOR-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PATTERN_PROCESSOR_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PATTERN-PROCESSOR-INSTANCE");

    static private final SubLSymbol $sym1343$OUTER_CATCH_FOR_CYBLACK_PATTERN_PROCESSOR_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PATTERN-PROCESSOR-METHOD");

    private static final SubLSymbol CYBLACK_PATTERN_PROCESSOR_INITIALIZE_METHOD = makeSymbol("CYBLACK-PATTERN-PROCESSOR-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_PATTERN_PROCESSOR_PRINT_METHOD = makeSymbol("CYBLACK-PATTERN-PROCESSOR-PRINT-METHOD");

    private static final SubLSymbol GET_MAIN_PARSER = makeSymbol("GET-MAIN-PARSER");

    private static final SubLSymbol CYBLACK_PATTERN_PROCESSOR_GET_MAIN_PARSER_METHOD = makeSymbol("CYBLACK-PATTERN-PROCESSOR-GET-MAIN-PARSER-METHOD");

    private static final SubLSymbol SET_MAIN_PARSER = makeSymbol("SET-MAIN-PARSER");

    static private final SubLSymbol $sym1354$OUTER_CATCH_FOR_CYBLACK_PATTERN_PROCESSOR_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PATTERN-PROCESSOR-METHOD");

    private static final SubLSymbol CYBLACK_PATTERN_PROCESSOR_SET_MAIN_PARSER_METHOD = makeSymbol("CYBLACK-PATTERN-PROCESSOR-SET-MAIN-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_PATTERN_PROCESSOR_GET_BLACKBOARD_METHOD = makeSymbol("CYBLACK-PATTERN-PROCESSOR-GET-BLACKBOARD-METHOD");

    private static final SubLSymbol GET_KEYWORD = makeSymbol("GET-KEYWORD");

    private static final SubLSymbol CYBLACK_PATTERN_PROCESSOR_GET_KEYWORD_METHOD = makeSymbol("CYBLACK-PATTERN-PROCESSOR-GET-KEYWORD-METHOD");

    static private final SubLSymbol $sym1364$OUTER_CATCH_FOR_CYBLACK_PATTERN_PROCESSOR_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PATTERN-PROCESSOR-METHOD");

    private static final SubLSymbol CYBLACK_PATTERN_PROCESSOR_SET_KEYWORD_METHOD = makeSymbol("CYBLACK-PATTERN-PROCESSOR-SET-KEYWORD-METHOD");

    private static final SubLSymbol CYBLACK_ITEM_PARSER = makeSymbol("CYBLACK-ITEM-PARSER");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ITEM_PARSER_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ITEM-PARSER-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ITEM_PARSER_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ITEM-PARSER-INSTANCE");

    static private final SubLSymbol $sym137$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ENVIRONMENT-METHOD");

    private static final SubLSymbol CYBLACK_ITEM_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-ITEM-PARSER-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_ITEM_PARSER_PRINT_METHOD = makeSymbol("CYBLACK-ITEM-PARSER-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_ITEM_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-ITEM-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_EXPRESSION_PARSER = makeSymbol("CYBLACK-EXISTENTIAL-EXPRESSION-PARSER");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_SET_OUTER_SCOPE_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-SET-OUTER-SCOPE-METHOD");

    static private final SubLSymbol $sym1380$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EXISTENTIAL_EXPRESSION_PARSER = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EXISTENTIAL-EXPRESSION-PARSER-CLASS");

    static private final SubLSymbol $sym1381$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EXISTENTIAL_EXPRESSION_PARSER = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EXISTENTIAL-EXPRESSION-PARSER-INSTANCE");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_EXPRESSION_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-EXPRESSION-PARSER-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1386$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_EXPRESSION_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-EXISTENTIAL-EXPRESSION-PARSER-METHOD");

    private static final SubLSymbol CREATE_EXPRESSION = makeSymbol("CREATE-EXPRESSION");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_EXPRESSION_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-EXPRESSION-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_EXPRESSION_PARSER_CREATE_EXPRESSION_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-EXPRESSION-PARSER-CREATE-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_FORALL_EXPRESSION_PARSER = makeSymbol("CYBLACK-FORALL-EXPRESSION-PARSER");

    static private final SubLSymbol $sym1394$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_FORALL_EXPRESSION_PARSER_CLAS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-FORALL-EXPRESSION-PARSER-CLASS");

    static private final SubLSymbol $sym1395$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_FORALL_EXPRESSION_PARSER_INST = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-FORALL-EXPRESSION-PARSER-INSTANCE");

    private static final SubLSymbol CYBLACK_FORALL_EXPRESSION_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-FORALL-EXPRESSION-PARSER-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_FORALL_EXPRESSION_PARSER_CREATE_EXPRESSION_METHOD = makeSymbol("CYBLACK-FORALL-EXPRESSION-PARSER-CREATE-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_PRESENT_EXPRESSION_PARSER = makeSymbol("CYBLACK-PRESENT-EXPRESSION-PARSER");

    static private final SubLSymbol $sym1403$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PRESENT_EXPRESSION_PARSER_CLA = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PRESENT-EXPRESSION-PARSER-CLASS");

    static private final SubLSymbol $sym1404$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PRESENT_EXPRESSION_PARSER_INS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PRESENT-EXPRESSION-PARSER-INSTANCE");

    private static final SubLSymbol CYBLACK_PRESENT_EXPRESSION_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-PRESENT-EXPRESSION-PARSER-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1409$OUTER_CATCH_FOR_CYBLACK_PRESENT_EXPRESSION_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PRESENT-EXPRESSION-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_GET_LOCAL_BINDINGS_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-GET-LOCAL-BINDINGS-METHOD");

    private static final SubLSymbol CYBLACK_PRESENT_EXPRESSION_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-PRESENT-EXPRESSION-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_EMPTY_P_EXPRESSION_PARSER = makeSymbol("CYBLACK-EMPTY-P-EXPRESSION-PARSER");

    static private final SubLSymbol $sym1412$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EMPTY_P_EXPRESSION_PARSER_CLA = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EMPTY-P-EXPRESSION-PARSER-CLASS");

    static private final SubLSymbol $sym1413$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EMPTY_P_EXPRESSION_PARSER_INS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EMPTY-P-EXPRESSION-PARSER-INSTANCE");

    private static final SubLSymbol CYBLACK_EMPTY_P_EXPRESSION_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-EMPTY-P-EXPRESSION-PARSER-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1418$OUTER_CATCH_FOR_CYBLACK_EMPTY_P_EXPRESSION_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-EMPTY-P-EXPRESSION-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_EMPTY_P_EXPRESSION_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-EMPTY-P-EXPRESSION-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_TYPE_EXPRESSION_PARSER = makeSymbol("CYBLACK-TYPE-EXPRESSION-PARSER");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_TYPE_EXPRESSION_PARSER_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-TYPE-EXPRESSION-PARSER-CLASS");

    static private final SubLSymbol $sym1422$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_TYPE_EXPRESSION_PARSER_INSTAN = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-TYPE-EXPRESSION-PARSER-INSTANCE");

    private static final SubLSymbol CYBLACK_TYPE_EXPRESSION_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-TYPE-EXPRESSION-PARSER-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1427$OUTER_CATCH_FOR_CYBLACK_TYPE_EXPRESSION_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-TYPE-EXPRESSION-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_TYPE_EXPRESSION_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-TYPE-EXPRESSION-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_SUBTYPE_EXPRESSION_PARSER = makeSymbol("CYBLACK-SUBTYPE-EXPRESSION-PARSER");

    static private final SubLSymbol $sym1430$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SUBTYPE_EXPRESSION_PARSER_CLA = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SUBTYPE-EXPRESSION-PARSER-CLASS");

    static private final SubLSymbol $sym1431$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SUBTYPE_EXPRESSION_PARSER_INS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SUBTYPE-EXPRESSION-PARSER-INSTANCE");

    private static final SubLSymbol CYBLACK_SUBTYPE_EXPRESSION_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-SUBTYPE-EXPRESSION-PARSER-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1436$OUTER_CATCH_FOR_CYBLACK_SUBTYPE_EXPRESSION_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-SUBTYPE-EXPRESSION-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_SUBTYPE_EXPRESSION_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-SUBTYPE-EXPRESSION-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_PANEL_EXPRESSION_PARSER = makeSymbol("CYBLACK-PANEL-EXPRESSION-PARSER");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PANEL_EXPRESSION_PARSER_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PANEL-EXPRESSION-PARSER-CLASS");

    static private final SubLSymbol $sym1440$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PANEL_EXPRESSION_PARSER_INSTA = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PANEL-EXPRESSION-PARSER-INSTANCE");

    private static final SubLSymbol CYBLACK_PANEL_EXPRESSION_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-PANEL-EXPRESSION-PARSER-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1445$OUTER_CATCH_FOR_CYBLACK_PANEL_EXPRESSION_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PANEL-EXPRESSION-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_PANEL_EXPRESSION_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-PANEL-EXPRESSION-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_GET_EXPRESSION_PARSER = makeSymbol("CYBLACK-GET-EXPRESSION-PARSER");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_GET_EXPRESSION_PARSER_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-GET-EXPRESSION-PARSER-CLASS");

    static private final SubLSymbol $sym145$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ENVIRONMENT-METHOD");

    static private final SubLSymbol $sym1450$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_GET_EXPRESSION_PARSER_INSTANC = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-GET-EXPRESSION-PARSER-INSTANCE");

    private static final SubLSymbol CYBLACK_GET_EXPRESSION_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-GET-EXPRESSION-PARSER-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1455$OUTER_CATCH_FOR_CYBLACK_GET_EXPRESSION_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-GET-EXPRESSION-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_GET_EXPRESSION_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-GET-EXPRESSION-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_STRING_EXPRESSION_PARSER = makeSymbol("CYBLACK-STRING-EXPRESSION-PARSER");

    static private final SubLSymbol $sym1459$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_STRING_EXPRESSION_PARSER_CLAS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-STRING-EXPRESSION-PARSER-CLASS");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_SET_LOCAL_BINDINGS_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-SET-LOCAL-BINDINGS-METHOD");

    static private final SubLSymbol $sym1460$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_STRING_EXPRESSION_PARSER_INST = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-STRING-EXPRESSION-PARSER-INSTANCE");

    private static final SubLSymbol CYBLACK_STRING_EXPRESSION_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-STRING-EXPRESSION-PARSER-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_STRING_EXPRESSION_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-STRING-EXPRESSION-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_MONITORING_PATTERN_PARSER = makeSymbol("CYBLACK-MONITORING-PATTERN-PARSER");

    static private final SubLSymbol $sym1467$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_MONITORING_PATTERN_PARSER_CLA = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-MONITORING-PATTERN-PARSER-CLASS");

    static private final SubLSymbol $sym1468$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_MONITORING_PATTERN_PARSER_INS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-MONITORING-PATTERN-PARSER-INSTANCE");

    private static final SubLSymbol GET_LOCAL_UNBOUND_BINDINGS = makeSymbol("GET-LOCAL-UNBOUND-BINDINGS");

    private static final SubLSymbol CYBLACK_MONITORING_PATTERN_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-MONITORING-PATTERN-PARSER-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1473$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-MONITORING-PATTERN-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_MONITORING_PATTERN_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-MONITORING-PATTERN-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_PRECON_PATTERN_PARSER = makeSymbol("CYBLACK-PRECON-PATTERN-PARSER");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PRECON_PATTERN_PARSER_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PRECON-PATTERN-PARSER-CLASS");

    static private final SubLSymbol $sym1481$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PRECON_PATTERN_PARSER_INSTANC = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PRECON-PATTERN-PARSER-INSTANCE");

    private static final SubLSymbol CYBLACK_PRECON_PATTERN_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-PRECON-PATTERN-PARSER-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1486$OUTER_CATCH_FOR_CYBLACK_PRECON_PATTERN_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PRECON-PATTERN-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_PRECON_PATTERN_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-PRECON-PATTERN-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_SATISFACTION_EXPRESSION_PARSER = makeSymbol("CYBLACK-SATISFACTION-EXPRESSION-PARSER");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_GET_LOCAL_UNBOUND_BINDINGS_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-GET-LOCAL-UNBOUND-BINDINGS-METHOD");

    static private final SubLSymbol $sym1491$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SATISFACTION_EXPRESSION_PARSE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SATISFACTION-EXPRESSION-PARSER-CLASS");

    static private final SubLSymbol $sym1492$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SATISFACTION_EXPRESSION_PARSE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SATISFACTION-EXPRESSION-PARSER-INSTANCE");

    private static final SubLSymbol CYBLACK_SATISFACTION_EXPRESSION_PARSER_NEW_EXPRESSION_METHOD = makeSymbol("CYBLACK-SATISFACTION-EXPRESSION-PARSER-NEW-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_SATISFACTION_EXPRESSION_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-SATISFACTION-EXPRESSION-PARSER-INITIALIZE-METHOD");

    private static final SubLSymbol PUSH_LOCAL_BINDING = makeSymbol("PUSH-LOCAL-BINDING");

    static private final SubLSymbol $sym1500$OUTER_CATCH_FOR_CYBLACK_SATISFACTION_EXPRESSION_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-SATISFACTION-EXPRESSION-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_SATISFACTION_EXPRESSION_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-SATISFACTION-EXPRESSION-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_SIMPLE_SATISFACTION_EXPRESSION_PARSER = makeSymbol("CYBLACK-SIMPLE-SATISFACTION-EXPRESSION-PARSER");

    static private final SubLSymbol $sym1503$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SIMPLE_SATISFACTION_EXPRESSIO = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SIMPLE-SATISFACTION-EXPRESSION-PARSER-CLASS");

    static private final SubLSymbol $sym1504$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SIMPLE_SATISFACTION_EXPRESSIO = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SIMPLE-SATISFACTION-EXPRESSION-PARSER-INSTANCE");

    static private final SubLSymbol $sym1506$CYBLACK_SIMPLE_SATISFACTION_EXPRESSION_PARSER_NEW_EXPRESSION_METH = makeSymbol("CYBLACK-SIMPLE-SATISFACTION-EXPRESSION-PARSER-NEW-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_SIMPLE_SATISFACTION_EXPRESSION_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-SIMPLE-SATISFACTION-EXPRESSION-PARSER-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_SIMPLE_SATISFACTION_EXPRESSION_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-SIMPLE-SATISFACTION-EXPRESSION-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_AND_PARSER = makeSymbol("CYBLACK-AND-PARSER");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AND_PARSER_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AND-PARSER-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AND_PARSER_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AND-PARSER-INSTANCE");

    private static final SubLSymbol CYBLACK_AND_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-AND-PARSER-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1519$OUTER_CATCH_FOR_CYBLACK_AND_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AND-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_AND_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-AND-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_OR_PARSER = makeSymbol("CYBLACK-OR-PARSER");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_OR_PARSER_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-OR-PARSER-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_OR_PARSER_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-OR-PARSER-INSTANCE");

    private static final SubLSymbol CYBLACK_OR_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-OR-PARSER-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1528$OUTER_CATCH_FOR_CYBLACK_OR_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-OR-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_OR_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-OR-PARSER-PARSE-METHOD");

    static private final SubLSymbol $sym153$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ENVIRONMENT-METHOD");

    private static final SubLSymbol CYBLACK_NOT_PARSER = makeSymbol("CYBLACK-NOT-PARSER");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_NOT_PARSER_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-NOT-PARSER-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_NOT_PARSER_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-NOT-PARSER-INSTANCE");

    private static final SubLSymbol CYBLACK_NOT_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-NOT-PARSER-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1537$OUTER_CATCH_FOR_CYBLACK_NOT_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-NOT-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_NOT_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-NOT-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_EQ_PREDICATE_PARSER = makeSymbol("CYBLACK-EQ-PREDICATE-PARSER");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_PUSH_LOCAL_BINDING_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-PUSH-LOCAL-BINDING-METHOD");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EQ_PREDICATE_PARSER_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EQ-PREDICATE-PARSER-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EQ_PREDICATE_PARSER_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EQ-PREDICATE-PARSER-INSTANCE");

    private static final SubLSymbol CYBLACK_EQ_PREDICATE_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-EQ-PREDICATE-PARSER-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1546$OUTER_CATCH_FOR_CYBLACK_EQ_PREDICATE_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-EQ-PREDICATE-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_EQ_PREDICATE_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-EQ-PREDICATE-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_EQUAL_PREDICATE_PARSER = makeSymbol("CYBLACK-EQUAL-PREDICATE-PARSER");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EQUAL_PREDICATE_PARSER_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EQUAL-PREDICATE-PARSER-CLASS");

    private static final SubLSymbol PUSH_TYPED_LOCAL_BINDING = makeSymbol("PUSH-TYPED-LOCAL-BINDING");

    static private final SubLSymbol $sym1550$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EQUAL_PREDICATE_PARSER_INSTAN = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EQUAL-PREDICATE-PARSER-INSTANCE");

    private static final SubLSymbol CYBLACK_EQUAL_PREDICATE_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-EQUAL-PREDICATE-PARSER-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1555$OUTER_CATCH_FOR_CYBLACK_EQUAL_PREDICATE_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-EQUAL-PREDICATE-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_EQUAL_PREDICATE_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-EQUAL-PREDICATE-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_ASSOC_EQUAL_PREDICATE_PARSER = makeSymbol("CYBLACK-ASSOC-EQUAL-PREDICATE-PARSER");

    static private final SubLSymbol $sym1558$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ASSOC_EQUAL_PREDICATE_PARSER_ = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ASSOC-EQUAL-PREDICATE-PARSER-CLASS");

    static private final SubLSymbol $sym1559$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ASSOC_EQUAL_PREDICATE_PARSER_ = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ASSOC-EQUAL-PREDICATE-PARSER-INSTANCE");

    private static final SubLSymbol CYBLACK_ASSOC_EQUAL_PREDICATE_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-ASSOC-EQUAL-PREDICATE-PARSER-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1564$OUTER_CATCH_FOR_CYBLACK_ASSOC_EQUAL_PREDICATE_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ASSOC-EQUAL-PREDICATE-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_ASSOC_EQUAL_PREDICATE_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-ASSOC-EQUAL-PREDICATE-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_LE_PREDICATE_PARSER = makeSymbol("CYBLACK-LE-PREDICATE-PARSER");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_LE_PREDICATE_PARSER_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-LE-PREDICATE-PARSER-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_LE_PREDICATE_PARSER_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-LE-PREDICATE-PARSER-INSTANCE");

    private static final SubLSymbol CYBLACK_LE_PREDICATE_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-LE-PREDICATE-PARSER-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1573$OUTER_CATCH_FOR_CYBLACK_LE_PREDICATE_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-LE-PREDICATE-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_LE_PREDICATE_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-LE-PREDICATE-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_GE_PREDICATE_PARSER = makeSymbol("CYBLACK-GE-PREDICATE-PARSER");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_GE_PREDICATE_PARSER_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-GE-PREDICATE-PARSER-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_GE_PREDICATE_PARSER_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-GE-PREDICATE-PARSER-INSTANCE");

    static private final SubLSymbol $sym158$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ENVIRONMENT-METHOD");

    private static final SubLSymbol CYBLACK_GE_PREDICATE_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-GE-PREDICATE-PARSER-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1582$OUTER_CATCH_FOR_CYBLACK_GE_PREDICATE_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-GE-PREDICATE-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_GE_PREDICATE_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-GE-PREDICATE-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_LT_PREDICATE_PARSER = makeSymbol("CYBLACK-LT-PREDICATE-PARSER");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_LT_PREDICATE_PARSER_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-LT-PREDICATE-PARSER-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_LT_PREDICATE_PARSER_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-LT-PREDICATE-PARSER-INSTANCE");

    private static final SubLSymbol CYBLACK_LT_PREDICATE_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-LT-PREDICATE-PARSER-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_PUSH_TYPED_LOCAL_BINDING_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-PUSH-TYPED-LOCAL-BINDING-METHOD");

    static private final SubLSymbol $sym1591$OUTER_CATCH_FOR_CYBLACK_LT_PREDICATE_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-LT-PREDICATE-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_LT_PREDICATE_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-LT-PREDICATE-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_GT_PREDICATE_PARSER = makeSymbol("CYBLACK-GT-PREDICATE-PARSER");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_GT_PREDICATE_PARSER_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-GT-PREDICATE-PARSER-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_GT_PREDICATE_PARSER_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-GT-PREDICATE-PARSER-INSTANCE");

    private static final SubLSymbol CYBLACK_GT_PREDICATE_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-GT-PREDICATE-PARSER-INITIALIZE-METHOD");

    private static final SubLSymbol APRIORI = makeSymbol("APRIORI");

    private static final SubLSymbol POP_LOCAL_BINDING = makeSymbol("POP-LOCAL-BINDING");

    static private final SubLSymbol $sym1600$OUTER_CATCH_FOR_CYBLACK_GT_PREDICATE_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-GT-PREDICATE-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_GT_PREDICATE_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-GT-PREDICATE-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_TYPE_OF_EXPRESSION_PARSER = makeSymbol("CYBLACK-TYPE-OF-EXPRESSION-PARSER");

    static private final SubLSymbol $sym1603$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_TYPE_OF_EXPRESSION_PARSER_CLA = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-TYPE-OF-EXPRESSION-PARSER-CLASS");

    static private final SubLSymbol $sym1604$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_TYPE_OF_EXPRESSION_PARSER_INS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-TYPE-OF-EXPRESSION-PARSER-INSTANCE");

    private static final SubLSymbol CYBLACK_TYPE_OF_EXPRESSION_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-TYPE-OF-EXPRESSION-PARSER-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1609$OUTER_CATCH_FOR_CYBLACK_TYPE_OF_EXPRESSION_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-TYPE-OF-EXPRESSION-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_TYPE_OF_EXPRESSION_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-TYPE-OF-EXPRESSION-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_CALL_METHOD_EXPRESSION_PARSER = makeSymbol("CYBLACK-CALL-METHOD-EXPRESSION-PARSER");

    static private final SubLSymbol $sym1612$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_CALL_METHOD_EXPRESSION_PARSER = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-CALL-METHOD-EXPRESSION-PARSER-CLASS");

    static private final SubLSymbol $sym1613$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_CALL_METHOD_EXPRESSION_PARSER = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-CALL-METHOD-EXPRESSION-PARSER-INSTANCE");

    private static final SubLSymbol CYBLACK_CALL_METHOD_EXPRESSION_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-CALL-METHOD-EXPRESSION-PARSER-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1618$OUTER_CATCH_FOR_CYBLACK_CALL_METHOD_EXPRESSION_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-CALL-METHOD-EXPRESSION-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_CALL_METHOD_EXPRESSION_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-CALL-METHOD-EXPRESSION-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_SLOT_ACCESS_PARSER = makeSymbol("CYBLACK-SLOT-ACCESS-PARSER");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SLOT_ACCESS_PARSER_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SLOT-ACCESS-PARSER-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SLOT_ACCESS_PARSER_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SLOT-ACCESS-PARSER-INSTANCE");

    private static final SubLSymbol CYBLACK_SLOT_ACCESS_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-SLOT-ACCESS-PARSER-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1627$OUTER_CATCH_FOR_CYBLACK_SLOT_ACCESS_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-SLOT-ACCESS-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_SLOT_ACCESS_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-SLOT-ACCESS-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_SUBTRACTION_EXPRESSION_PARSER = makeSymbol("CYBLACK-SUBTRACTION-EXPRESSION-PARSER");

    static private final SubLSymbol $sym163$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ENVIRONMENT-METHOD");

    static private final SubLSymbol $sym1630$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SUBTRACTION_EXPRESSION_PARSER = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SUBTRACTION-EXPRESSION-PARSER-CLASS");

    static private final SubLSymbol $sym1631$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SUBTRACTION_EXPRESSION_PARSER = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SUBTRACTION-EXPRESSION-PARSER-INSTANCE");

    static private final SubLSymbol $sym1633$_ = makeSymbol("-");

    private static final SubLSymbol CYBLACK_SUBTRACTION_EXPRESSION_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-SUBTRACTION-EXPRESSION-PARSER-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1636$OUTER_CATCH_FOR_CYBLACK_SUBTRACTION_EXPRESSION_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-SUBTRACTION-EXPRESSION-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_SUBTRACTION_EXPRESSION_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-SUBTRACTION-EXPRESSION-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_ADDITION_EXPRESSION_PARSER = makeSymbol("CYBLACK-ADDITION-EXPRESSION-PARSER");

    static private final SubLSymbol $sym1639$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ADDITION_EXPRESSION_PARSER_CL = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ADDITION-EXPRESSION-PARSER-CLASS");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_POP_LOCAL_BINDING_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-POP-LOCAL-BINDING-METHOD");

    static private final SubLSymbol $sym1640$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ADDITION_EXPRESSION_PARSER_IN = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ADDITION-EXPRESSION-PARSER-INSTANCE");

    static private final SubLSymbol $sym1642$_ = makeSymbol("+");

    private static final SubLSymbol CYBLACK_ADDITION_EXPRESSION_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-ADDITION-EXPRESSION-PARSER-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1645$OUTER_CATCH_FOR_CYBLACK_ADDITION_EXPRESSION_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ADDITION-EXPRESSION-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_ADDITION_EXPRESSION_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-ADDITION-EXPRESSION-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_MULTIPLICATION_EXPRESSION_PARSER = makeSymbol("CYBLACK-MULTIPLICATION-EXPRESSION-PARSER");

    static private final SubLSymbol $sym1648$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_MULTIPLICATION_EXPRESSION_PAR = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-MULTIPLICATION-EXPRESSION-PARSER-CLASS");

    static private final SubLSymbol $sym1649$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_MULTIPLICATION_EXPRESSION_PAR = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-MULTIPLICATION-EXPRESSION-PARSER-INSTANCE");

    private static final SubLSymbol GET_BINDING = makeSymbol("GET-BINDING");

    static private final SubLSymbol $sym1651$_ = makeSymbol("*");

    private static final SubLSymbol CYBLACK_MULTIPLICATION_EXPRESSION_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-MULTIPLICATION-EXPRESSION-PARSER-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1654$OUTER_CATCH_FOR_CYBLACK_MULTIPLICATION_EXPRESSION_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-MULTIPLICATION-EXPRESSION-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_MULTIPLICATION_EXPRESSION_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-MULTIPLICATION-EXPRESSION-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_DIVISION_EXPRESSION_PARSER = makeSymbol("CYBLACK-DIVISION-EXPRESSION-PARSER");

    static private final SubLSymbol $sym1657$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DIVISION_EXPRESSION_PARSER_CL = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DIVISION-EXPRESSION-PARSER-CLASS");

    static private final SubLSymbol $sym1658$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DIVISION_EXPRESSION_PARSER_IN = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DIVISION-EXPRESSION-PARSER-INSTANCE");

    static private final SubLSymbol $sym1660$_ = makeSymbol("/");

    private static final SubLSymbol CYBLACK_DIVISION_EXPRESSION_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-DIVISION-EXPRESSION-PARSER-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1663$OUTER_CATCH_FOR_CYBLACK_DIVISION_EXPRESSION_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DIVISION-EXPRESSION-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_DIVISION_EXPRESSION_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-DIVISION-EXPRESSION-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_ITEM_COMPILER = makeSymbol("CYBLACK-ITEM-COMPILER");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ITEM_COMPILER_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ITEM-COMPILER-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ITEM_COMPILER_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ITEM-COMPILER-INSTANCE");

    private static final SubLSymbol CYBLACK_ITEM_COMPILER_INITIALIZE_METHOD = makeSymbol("CYBLACK-ITEM-COMPILER-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_GET_BINDING_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-GET-BINDING-METHOD");

    private static final SubLSymbol CYBLACK_ITEM_COMPILER_PRINT_METHOD = makeSymbol("CYBLACK-ITEM-COMPILER-PRINT-METHOD");

    private static final SubLSymbol COMPILE = makeSymbol("COMPILE");

    private static final SubLSymbol CYBLACK_ITEM_COMPILER_COMPILE_METHOD = makeSymbol("CYBLACK-ITEM-COMPILER-COMPILE-METHOD");

    private static final SubLSymbol CYBLACK_PARSER = makeSymbol("CYBLACK-PARSER");

    private static final SubLSymbol COMPILING_DISPATCH_TABLE = makeSymbol("COMPILING-DISPATCH-TABLE");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PARSER_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PARSER-CLASS");

    private static final SubLSymbol GET_BINDING_BY_VALUE = makeSymbol("GET-BINDING-BY-VALUE");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PARSER_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PARSER-INSTANCE");

    private static final SubLSymbol REGISTER_PARSERS = makeSymbol("REGISTER-PARSERS");

    private static final SubLSymbol CYBLACK_PARSER_REGISTER_PARSERS_METHOD = makeSymbol("CYBLACK-PARSER-REGISTER-PARSERS-METHOD");

    private static final SubLSymbol CYBLACK_PARSER_ON_STARTUP_METHOD = makeSymbol("CYBLACK-PARSER-ON-STARTUP-METHOD");

    private static final SubLSymbol CYBLACK_PARSER_ON_SHUTDOWN_METHOD = makeSymbol("CYBLACK-PARSER-ON-SHUTDOWN-METHOD");

    static private final SubLSymbol $sym1692$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_PARSER_INITIALIZE_METHOD = makeSymbol("CYBLACK-PARSER-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_PARSER_SET_APPLICATION_METHOD = makeSymbol("CYBLACK-PARSER-SET-APPLICATION-METHOD");

    static private final SubLSymbol $sym1700$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_PARSER_REGISTER_PARSER_METHOD = makeSymbol("CYBLACK-PARSER-REGISTER-PARSER-METHOD");

    private static final SubLSymbol RETRIEVE_PARSER = makeSymbol("RETRIEVE-PARSER");

    private static final SubLSymbol CYBLACK_PARSER_RETRIEVE_PARSER_METHOD = makeSymbol("CYBLACK-PARSER-RETRIEVE-PARSER-METHOD");

    private static final SubLSymbol REGISTER_COMPILER = makeSymbol("REGISTER-COMPILER");

    static private final SubLSymbol $sym1709$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_GET_BINDING_BY_VALUE_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-GET-BINDING-BY-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_PARSER_REGISTER_COMPILER_METHOD = makeSymbol("CYBLACK-PARSER-REGISTER-COMPILER-METHOD");

    private static final SubLSymbol RETRIEVE_COMPILER = makeSymbol("RETRIEVE-COMPILER");

    static private final SubLSymbol $sym1713$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_PARSER_RETRIEVE_COMPILER_METHOD = makeSymbol("CYBLACK-PARSER-RETRIEVE-COMPILER-METHOD");

    static private final SubLSymbol $sym1716$OUTER_CATCH_FOR_CYBLACK_PARSER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PARSER-METHOD");

    private static final SubLSymbol CYBLACK_PARSER_PARSE_METHOD = makeSymbol("CYBLACK-PARSER-PARSE-METHOD");

    private static final SubLSymbol CYBLACK_PARSER_COMPILE_METHOD = makeSymbol("CYBLACK-PARSER-COMPILE-METHOD");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_GET_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-GET-METHOD");

    static private final SubLSymbol $sym179$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ENVIRONMENT-METHOD");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_SET_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-SET-METHOD");

    private static final SubLSymbol GET_LOCAL = makeSymbol("GET-LOCAL");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_GET_LOCAL_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-GET-LOCAL-METHOD");

    private static final SubLSymbol SET_LOCAL = makeSymbol("SET-LOCAL");

    static private final SubLSymbol $sym186$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ENVIRONMENT-METHOD");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_SET_LOCAL_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-SET-LOCAL-METHOD");

    private static final SubLSymbol PUSH_FRAME = makeSymbol("PUSH-FRAME");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_BINDING_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-BINDING-CLASS");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_PUSH_FRAME_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-PUSH-FRAME-METHOD");

    private static final SubLSymbol POP_FRAME = makeSymbol("POP-FRAME");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_POP_FRAME_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-POP-FRAME-METHOD");

    private static final SubLSymbol POP_FRAME_TO = makeSymbol("POP-FRAME-TO");

    static private final SubLSymbol $sym198$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ENVIRONMENT-METHOD");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_POP_FRAME_TO_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-POP-FRAME-TO-METHOD");

    private static final SubLSymbol TOP_FRAME = makeSymbol("TOP-FRAME");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_TOP_FRAME_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-TOP-FRAME-METHOD");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_LISTIFY_LOCAL_BINDINGS_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-LISTIFY-LOCAL-BINDINGS-METHOD");

    private static final SubLSymbol GET_UNIQUE_LOCAL_BINDINGS = makeSymbol("GET-UNIQUE-LOCAL-BINDINGS");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_GET_UNIQUE_LOCAL_BINDINGS_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-GET-UNIQUE-LOCAL-BINDINGS-METHOD");

    static private final SubLSymbol $sym212$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ENVIRONMENT-METHOD");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_GET_UNIQUE_BINDINGS_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-GET-UNIQUE-BINDINGS-METHOD");

    private static final SubLSymbol GET_UNIQUE_NON_APRIORI_BINDINGS = makeSymbol("GET-UNIQUE-NON-APRIORI-BINDINGS");

    static private final SubLSymbol $sym216$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ENVIRONMENT-METHOD");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_GET_UNIQUE_NON_APRIORI_BINDINGS_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-GET-UNIQUE-NON-APRIORI-BINDINGS-METHOD");

    private static final SubLSymbol GET_UNIQUE_LOCAL_UNBOUND_BINDINGS = makeSymbol("GET-UNIQUE-LOCAL-UNBOUND-BINDINGS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_BINDING_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-BINDING-INSTANCE");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_GET_UNIQUE_LOCAL_UNBOUND_BINDINGS_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-GET-UNIQUE-LOCAL-UNBOUND-BINDINGS-METHOD");

    private static final SubLSymbol GET_UNIQUE_UNBOUND_BINDINGS = makeSymbol("GET-UNIQUE-UNBOUND-BINDINGS");

    static private final SubLSymbol $sym223$OUTER_CATCH_FOR_CYBLACK_ENVIRONMENT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ENVIRONMENT-METHOD");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_GET_UNIQUE_UNBOUND_BINDINGS_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-GET-UNIQUE-UNBOUND-BINDINGS-METHOD");

    private static final SubLSymbol LISTIFY_UNIQUE_BINDINGS = makeSymbol("LISTIFY-UNIQUE-BINDINGS");

    private static final SubLSymbol CYBLACK_ENVIRONMENT_LISTIFY_UNIQUE_BINDINGS_METHOD = makeSymbol("CYBLACK-ENVIRONMENT-LISTIFY-UNIQUE-BINDINGS-METHOD");

    private static final SubLSymbol CYBLACK_VALUE_EXPRESSION = makeSymbol("CYBLACK-VALUE-EXPRESSION");

    private static final SubLSymbol CYBLACK_LOGICAL_EXPRESSION = makeSymbol("CYBLACK-LOGICAL-EXPRESSION");

    private static final SubLSymbol UNPARSED_PATTERN = makeSymbol("UNPARSED-PATTERN");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PATTERN_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PATTERN-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PATTERN_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PATTERN-INSTANCE");

    static private final SubLSymbol $sym238$OUTER_CATCH_FOR_CYBLACK_PATTERN_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PATTERN-METHOD");

    private static final SubLSymbol CYBLACK_PATTERN_INITIALIZE_METHOD = makeSymbol("CYBLACK-PATTERN-INITIALIZE-METHOD");

    private static final SubLSymbol GET_UNPARSED_PATTERN = makeSymbol("GET-UNPARSED-PATTERN");

    private static final SubLSymbol CYBLACK_PATTERN_GET_UNPARSED_PATTERN_METHOD = makeSymbol("CYBLACK-PATTERN-GET-UNPARSED-PATTERN-METHOD");

    static private final SubLSymbol $sym246$OUTER_CATCH_FOR_CYBLACK_PATTERN_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PATTERN-METHOD");

    private static final SubLSymbol CYBLACK_PATTERN_SET_UNPARSED_PATTERN_METHOD = makeSymbol("CYBLACK-PATTERN-SET-UNPARSED-PATTERN-METHOD");

    private static final SubLSymbol TRAVERSE_FILLING_DATATYPE_BAG = makeSymbol("TRAVERSE-FILLING-DATATYPE-BAG");

    private static final SubLSymbol CYBLACK_PATTERN_GET_DATATYPE_BAG_METHOD = makeSymbol("CYBLACK-PATTERN-GET-DATATYPE-BAG-METHOD");

    private static final SubLSymbol CYBLACK_PATTERN_TRAVERSE_FILLING_DATATYPE_BAG_METHOD = makeSymbol("CYBLACK-PATTERN-TRAVERSE-FILLING-DATATYPE-BAG-METHOD");

    private static final SubLSymbol CYBLACK_POSTING_EXPRESSION = makeSymbol("CYBLACK-POSTING-EXPRESSION");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_POSTING_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-POSTING-EXPRESSION-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_POSTING_EXPRESSION_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-POSTING-EXPRESSION-INSTANCE");

    static private final SubLSymbol $sym26$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-BINDING-METHOD");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_VARIABLE_REFERENCE_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-VARIABLE-REFERENCE-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_VARIABLE_REFERENCE_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-VARIABLE-REFERENCE-INSTANCE");

    static private final SubLSymbol $sym265$OUTER_CATCH_FOR_CYBLACK_VARIABLE_REFERENCE_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-VARIABLE-REFERENCE-METHOD");

    private static final SubLSymbol CYBLACK_VARIABLE_REFERENCE_INITIALIZE_METHOD = makeSymbol("CYBLACK-VARIABLE-REFERENCE-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_VARIABLE_REFERENCE_PRINT_METHOD = makeSymbol("CYBLACK-VARIABLE-REFERENCE-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_VARIABLE_REFERENCE_GET_VARIABLE_METHOD = makeSymbol("CYBLACK-VARIABLE-REFERENCE-GET-VARIABLE-METHOD");

    private static final SubLSymbol CYBLACK_BINDING_INITIALIZE_METHOD = makeSymbol("CYBLACK-BINDING-INITIALIZE-METHOD");

    static private final SubLSymbol $sym271$OUTER_CATCH_FOR_CYBLACK_VARIABLE_REFERENCE_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-VARIABLE-REFERENCE-METHOD");

    private static final SubLSymbol CYBLACK_VARIABLE_REFERENCE_SET_VARIABLE_METHOD = makeSymbol("CYBLACK-VARIABLE-REFERENCE-SET-VARIABLE-METHOD");

    private static final SubLSymbol CYBLACK_VARIABLE_REFERENCE_GET_VALUE_METHOD = makeSymbol("CYBLACK-VARIABLE-REFERENCE-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_LITERAL = makeSymbol("CYBLACK-LITERAL");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_LITERAL_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-LITERAL-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_LITERAL_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-LITERAL-INSTANCE");

    static private final SubLSymbol $sym284$OUTER_CATCH_FOR_CYBLACK_LITERAL_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-LITERAL-METHOD");

    private static final SubLSymbol CYBLACK_LITERAL_INITIALIZE_METHOD = makeSymbol("CYBLACK-LITERAL-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_LITERAL_PRINT_METHOD = makeSymbol("CYBLACK-LITERAL-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_LITERAL_GET_VALUE_METHOD = makeSymbol("CYBLACK-LITERAL-GET-VALUE-METHOD");

    static private final SubLSymbol $sym292$OUTER_CATCH_FOR_CYBLACK_LITERAL_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-LITERAL-METHOD");

    private static final SubLSymbol CYBLACK_LITERAL_SET_VALUE_METHOD = makeSymbol("CYBLACK-LITERAL-SET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_NUMBER = makeSymbol("CYBLACK-NUMBER");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_NUMBER_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-NUMBER-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_NUMBER_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-NUMBER-INSTANCE");

    static private final SubLSymbol $sym298$OUTER_CATCH_FOR_CYBLACK_NUMBER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-NUMBER-METHOD");

    private static final SubLSymbol CYBLACK_NUMBER_INITIALIZE_METHOD = makeSymbol("CYBLACK-NUMBER-INITIALIZE-METHOD");

    private static final SubLSymbol ENCODE_CYBLACK_PATTERN_OPERATOR = makeSymbol("ENCODE-CYBLACK-PATTERN-OPERATOR");

    private static final SubLSymbol CYBLACK_NUMBER_PRINT_METHOD = makeSymbol("CYBLACK-NUMBER-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_INTEGER = makeSymbol("CYBLACK-INTEGER");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_INTEGER_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-INTEGER-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_INTEGER_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-INTEGER-INSTANCE");

    static private final SubLSymbol $sym308$OUTER_CATCH_FOR_CYBLACK_INTEGER_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-INTEGER-METHOD");

    private static final SubLSymbol CYBLACK_INTEGER_INITIALIZE_METHOD = makeSymbol("CYBLACK-INTEGER-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_INTEGER_PRINT_METHOD = makeSymbol("CYBLACK-INTEGER-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_INTEGER_SET_VALUE_METHOD = makeSymbol("CYBLACK-INTEGER-SET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_REAL = makeSymbol("CYBLACK-REAL");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_REAL_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-REAL-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_REAL_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-REAL-INSTANCE");

    static private final SubLSymbol $sym318$OUTER_CATCH_FOR_CYBLACK_REAL_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-REAL-METHOD");

    static private final SubLSymbol $sym32$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-BINDING-METHOD");

    private static final SubLSymbol CYBLACK_REAL_INITIALIZE_METHOD = makeSymbol("CYBLACK-REAL-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_REAL_PRINT_METHOD = makeSymbol("CYBLACK-REAL-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_REAL_SET_VALUE_METHOD = makeSymbol("CYBLACK-REAL-SET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_STRING = makeSymbol("CYBLACK-STRING");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_STRING_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-STRING-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_STRING_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-STRING-INSTANCE");

    static private final SubLSymbol $sym328$OUTER_CATCH_FOR_CYBLACK_STRING_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-STRING-METHOD");

    private static final SubLSymbol CYBLACK_STRING_INITIALIZE_METHOD = makeSymbol("CYBLACK-STRING-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_STRING_PRINT_METHOD = makeSymbol("CYBLACK-STRING-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_STRING_SET_VALUE_METHOD = makeSymbol("CYBLACK-STRING-SET-VALUE-METHOD");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SYMBOL_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SYMBOL-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SYMBOL_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SYMBOL-INSTANCE");

    static private final SubLSymbol $sym338$OUTER_CATCH_FOR_CYBLACK_SYMBOL_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-SYMBOL-METHOD");

    private static final SubLSymbol CYBLACK_SYMBOL_INITIALIZE_METHOD = makeSymbol("CYBLACK-SYMBOL-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_SYMBOL_PRINT_METHOD = makeSymbol("CYBLACK-SYMBOL-PRINT-METHOD");

    static private final SubLSymbol $sym342$OUTER_CATCH_FOR_CYBLACK_SYMBOL_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-SYMBOL-METHOD");

    private static final SubLSymbol CYBLACK_SYMBOL_SET_VALUE_METHOD = makeSymbol("CYBLACK-SYMBOL-SET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_FORT = makeSymbol("CYBLACK-FORT");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_FORT_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-FORT-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_FORT_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-FORT-INSTANCE");

    static private final SubLSymbol $sym347$OUTER_CATCH_FOR_CYBLACK_FORT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-FORT-METHOD");

    private static final SubLSymbol CYBLACK_FORT_INITIALIZE_METHOD = makeSymbol("CYBLACK-FORT-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_FORT_PRINT_METHOD = makeSymbol("CYBLACK-FORT-PRINT-METHOD");

    static private final SubLSymbol $sym351$OUTER_CATCH_FOR_CYBLACK_FORT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-FORT-METHOD");

    private static final SubLSymbol CYBLACK_FORT_SET_VALUE_METHOD = makeSymbol("CYBLACK-FORT-SET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_CONSTANT_SYMBOL = makeSymbol("CYBLACK-CONSTANT-SYMBOL");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_CONSTANT_SYMBOL_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-CONSTANT-SYMBOL-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_CONSTANT_SYMBOL_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-CONSTANT-SYMBOL-INSTANCE");

    static private final SubLSymbol $sym358$OUTER_CATCH_FOR_CYBLACK_CONSTANT_SYMBOL_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-CONSTANT-SYMBOL-METHOD");

    private static final SubLSymbol CYBLACK_CONSTANT_SYMBOL_SET_VALUE_METHOD = makeSymbol("CYBLACK-CONSTANT-SYMBOL-SET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_TRUE = makeSymbol("CYBLACK-TRUE");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_TRUE_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-TRUE-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_TRUE_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-TRUE-INSTANCE");

    static private final SubLSymbol $sym367$OUTER_CATCH_FOR_CYBLACK_TRUE_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-TRUE-METHOD");

    private static final SubLSymbol CYBLACK_TRUE_INITIALIZE_METHOD = makeSymbol("CYBLACK-TRUE-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_BINDING_PRINT_METHOD = makeSymbol("CYBLACK-BINDING-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_TRUE_PRINT_METHOD = makeSymbol("CYBLACK-TRUE-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_TRUE_GET_VALUE_METHOD = makeSymbol("CYBLACK-TRUE-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_FALSE = makeSymbol("CYBLACK-FALSE");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_FALSE_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-FALSE-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_FALSE_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-FALSE-INSTANCE");

    static private final SubLSymbol $sym377$OUTER_CATCH_FOR_CYBLACK_FALSE_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-FALSE-METHOD");

    private static final SubLSymbol CYBLACK_FALSE_INITIALIZE_METHOD = makeSymbol("CYBLACK-FALSE-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_FALSE_PRINT_METHOD = makeSymbol("CYBLACK-FALSE-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_FALSE_GET_VALUE_METHOD = makeSymbol("CYBLACK-FALSE-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_MONITORING_PATTERN_ACTION_TYPE = makeSymbol("CYBLACK-MONITORING-PATTERN-ACTION-TYPE");

    private static final SubLSymbol ENCODE_CYBLACK_MONITORING_PATTERN_ACTION_TYPE = makeSymbol("ENCODE-CYBLACK-MONITORING-PATTERN-ACTION-TYPE");

    private static final SubLSymbol DECODE_CYBLACK_MONITORING_PATTERN_ACTION_TYPE = makeSymbol("DECODE-CYBLACK-MONITORING-PATTERN-ACTION-TYPE");

    private static final SubLSymbol CYBLACK_MONITORING_PATTERN_ACTION_TYPE_P = makeSymbol("CYBLACK-MONITORING-PATTERN-ACTION-TYPE-P");

    private static final SubLSymbol CYBLACK_MONITORING_PATTERN_ACTION_QUALIFIER_TYPE = makeSymbol("CYBLACK-MONITORING-PATTERN-ACTION-QUALIFIER-TYPE");

    private static final SubLSymbol ENCODE_CYBLACK_MONITORING_PATTERN_ACTION_QUALIFIER_TYPE = makeSymbol("ENCODE-CYBLACK-MONITORING-PATTERN-ACTION-QUALIFIER-TYPE");

    private static final SubLSymbol DECODE_CYBLACK_MONITORING_PATTERN_ACTION_QUALIFIER_TYPE = makeSymbol("DECODE-CYBLACK-MONITORING-PATTERN-ACTION-QUALIFIER-TYPE");

    private static final SubLSymbol CYBLACK_MONITORING_PATTERN_ACTION_QUALIFIER_TYPE_P = makeSymbol("CYBLACK-MONITORING-PATTERN-ACTION-QUALIFIER-TYPE-P");

    static private final SubLSymbol $sym40$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-BINDING-METHOD");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_MONITORING_PATTERN_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-MONITORING-PATTERN-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_MONITORING_PATTERN_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-MONITORING-PATTERN-INSTANCE");

    static private final SubLSymbol $sym404$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-MONITORING-PATTERN-METHOD");

    private static final SubLSymbol CYBLACK_MONITORING_PATTERN_INITIALIZE_METHOD = makeSymbol("CYBLACK-MONITORING-PATTERN-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_MONITORING_PATTERN_PRINT_METHOD = makeSymbol("CYBLACK-MONITORING-PATTERN-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_BINDING_CLONE_METHOD = makeSymbol("CYBLACK-BINDING-CLONE-METHOD");

    static private final SubLSymbol $sym411$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-MONITORING-PATTERN-METHOD");

    private static final SubLSymbol SET_MONITOR_ARGS = makeSymbol("SET-MONITOR-ARGS");

    private static final SubLSymbol SET_MONITORING_ARGS = makeSymbol("SET-MONITORING-ARGS");

    private static final SubLSymbol CYBLACK_MONITORING_PATTERN_CLONE_METHOD = makeSymbol("CYBLACK-MONITORING-PATTERN-CLONE-METHOD");

    private static final SubLSymbol CYBLACK_MONITORING_PATTERN_TRAVERSE_FILLING_DATATYPE_BAG_METHOD = makeSymbol("CYBLACK-MONITORING-PATTERN-TRAVERSE-FILLING-DATATYPE-BAG-METHOD");

    private static final SubLSymbol GET_ENVIRONMENT = makeSymbol("GET-ENVIRONMENT");

    private static final SubLSymbol UNBOUNDP = makeSymbol("UNBOUNDP");

    private static final SubLSymbol CYBLACK_MONITORING_PATTERN_GET_ENVIRONMENT_METHOD = makeSymbol("CYBLACK-MONITORING-PATTERN-GET-ENVIRONMENT-METHOD");

    private static final SubLSymbol SET_ENVIRONMENT = makeSymbol("SET-ENVIRONMENT");

    static private final SubLSymbol $sym425$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-MONITORING-PATTERN-METHOD");

    private static final SubLSymbol CYBLACK_MONITORING_PATTERN_SET_ENVIRONMENT_METHOD = makeSymbol("CYBLACK-MONITORING-PATTERN-SET-ENVIRONMENT-METHOD");

    private static final SubLSymbol GET_MONITOR_ARGS = makeSymbol("GET-MONITOR-ARGS");

    private static final SubLSymbol CYBLACK_MONITORING_PATTERN_GET_MONITOR_ARGS_METHOD = makeSymbol("CYBLACK-MONITORING-PATTERN-GET-MONITOR-ARGS-METHOD");

    static private final SubLSymbol $sym432$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-MONITORING-PATTERN-METHOD");

    private static final SubLSymbol CYBLACK_MONITORING_PATTERN_SET_MONITOR_ARGS_METHOD = makeSymbol("CYBLACK-MONITORING-PATTERN-SET-MONITOR-ARGS-METHOD");

    private static final SubLSymbol CYBLACK_MONITORING_PATTERN_GET_ACTION_METHOD = makeSymbol("CYBLACK-MONITORING-PATTERN-GET-ACTION-METHOD");

    private static final SubLSymbol SET_ACTION = makeSymbol("SET-ACTION");

    static private final SubLSymbol $sym44$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-BINDING-METHOD");

    static private final SubLSymbol $sym440$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-MONITORING-PATTERN-METHOD");

    private static final SubLSymbol CYBLACK_MONITORING_PATTERN_SET_ACTION_METHOD = makeSymbol("CYBLACK-MONITORING-PATTERN-SET-ACTION-METHOD");

    private static final SubLSymbol CYBLACK_MONITORING_PATTERN_GET_ACTION_QUALIFIERS_METHOD = makeSymbol("CYBLACK-MONITORING-PATTERN-GET-ACTION-QUALIFIERS-METHOD");

    private static final SubLSymbol SET_ACTION_QUALIFIERS = makeSymbol("SET-ACTION-QUALIFIERS");

    static private final SubLSymbol $sym448$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-MONITORING-PATTERN-METHOD");

    private static final SubLSymbol CYBLACK_MONITORING_PATTERN_SET_ACTION_QUALIFIERS_METHOD = makeSymbol("CYBLACK-MONITORING-PATTERN-SET-ACTION-QUALIFIERS-METHOD");

    private static final SubLSymbol CYBLACK_BINDING_UNBOUNDP_METHOD = makeSymbol("CYBLACK-BINDING-UNBOUNDP-METHOD");

    private static final SubLSymbol CYBLACK_MONITORING_PATTERN_GET_LOCAL_BINDINGS_METHOD = makeSymbol("CYBLACK-MONITORING-PATTERN-GET-LOCAL-BINDINGS-METHOD");

    static private final SubLSymbol $sym452$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-MONITORING-PATTERN-METHOD");

    private static final SubLSymbol CYBLACK_MONITORING_PATTERN_SET_LOCAL_BINDINGS_METHOD = makeSymbol("CYBLACK-MONITORING-PATTERN-SET-LOCAL-BINDINGS-METHOD");

    private static final SubLSymbol GET_LOGICAL_FORM = makeSymbol("GET-LOGICAL-FORM");

    private static final SubLSymbol CYBLACK_MONITORING_PATTERN_GET_LOGICAL_FORM_METHOD = makeSymbol("CYBLACK-MONITORING-PATTERN-GET-LOGICAL-FORM-METHOD");

    static private final SubLSymbol $sym460$OUTER_CATCH_FOR_CYBLACK_MONITORING_PATTERN_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-MONITORING-PATTERN-METHOD");

    private static final SubLSymbol CYBLACK_MONITORING_PATTERN_SET_LOGICAL_FORM_METHOD = makeSymbol("CYBLACK-MONITORING-PATTERN-SET-LOGICAL-FORM-METHOD");

    private static final SubLSymbol CYBLACK_MONITORING_PATTERN_GET_UNIQUE_BINDINGS_METHOD = makeSymbol("CYBLACK-MONITORING-PATTERN-GET-UNIQUE-BINDINGS-METHOD");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PRECON_PATTERN_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PRECON-PATTERN-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PRECON_PATTERN_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PRECON-PATTERN-INSTANCE");

    static private final SubLSymbol $sym470$OUTER_CATCH_FOR_CYBLACK_PRECON_PATTERN_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PRECON-PATTERN-METHOD");

    private static final SubLSymbol CYBLACK_PRECON_PATTERN_INITIALIZE_METHOD = makeSymbol("CYBLACK-PRECON-PATTERN-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_PRECON_PATTERN_PRINT_METHOD = makeSymbol("CYBLACK-PRECON-PATTERN-PRINT-METHOD");

    static private final SubLSymbol $sym477$OUTER_CATCH_FOR_CYBLACK_PRECON_PATTERN_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PRECON-PATTERN-METHOD");

    private static final SubLSymbol SET_KS_ARGS = makeSymbol("SET-KS-ARGS");

    private static final SubLSymbol CYBLACK_PRECON_PATTERN_CLONE_METHOD = makeSymbol("CYBLACK-PRECON-PATTERN-CLONE-METHOD");

    static private final SubLSymbol $sym48$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-BINDING-METHOD");

    private static final SubLSymbol CYBLACK_PRECON_PATTERN_TRAVERSE_FILLING_DATATYPE_BAG_METHOD = makeSymbol("CYBLACK-PRECON-PATTERN-TRAVERSE-FILLING-DATATYPE-BAG-METHOD");

    private static final SubLSymbol CYBLACK_PRECON_PATTERN_GET_ENVIRONMENT_METHOD = makeSymbol("CYBLACK-PRECON-PATTERN-GET-ENVIRONMENT-METHOD");

    static private final SubLSymbol $sym483$OUTER_CATCH_FOR_CYBLACK_PRECON_PATTERN_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PRECON-PATTERN-METHOD");

    private static final SubLSymbol CYBLACK_PRECON_PATTERN_SET_ENVIRONMENT_METHOD = makeSymbol("CYBLACK-PRECON-PATTERN-SET-ENVIRONMENT-METHOD");

    private static final SubLSymbol GET_KS_ARGS = makeSymbol("GET-KS-ARGS");

    private static final SubLSymbol CYBLACK_PRECON_PATTERN_GET_KS_ARGS_METHOD = makeSymbol("CYBLACK-PRECON-PATTERN-GET-KS-ARGS-METHOD");

    private static final SubLSymbol CYBLACK_BINDING_GET_VALUE_METHOD = makeSymbol("CYBLACK-BINDING-GET-VALUE-METHOD");

    static private final SubLSymbol $sym490$OUTER_CATCH_FOR_CYBLACK_PRECON_PATTERN_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PRECON-PATTERN-METHOD");

    private static final SubLSymbol CYBLACK_PRECON_PATTERN_SET_KS_ARGS_METHOD = makeSymbol("CYBLACK-PRECON-PATTERN-SET-KS-ARGS-METHOD");

    private static final SubLSymbol CYBLACK_PRECON_PATTERN_GET_LOCAL_BINDINGS_METHOD = makeSymbol("CYBLACK-PRECON-PATTERN-GET-LOCAL-BINDINGS-METHOD");

    static private final SubLSymbol $sym494$OUTER_CATCH_FOR_CYBLACK_PRECON_PATTERN_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PRECON-PATTERN-METHOD");

    private static final SubLSymbol CYBLACK_PRECON_PATTERN_SET_LOCAL_BINDINGS_METHOD = makeSymbol("CYBLACK-PRECON-PATTERN-SET-LOCAL-BINDINGS-METHOD");

    private static final SubLSymbol CYBLACK_PRECON_PATTERN_GET_LOGICAL_FORM_METHOD = makeSymbol("CYBLACK-PRECON-PATTERN-GET-LOGICAL-FORM-METHOD");

    static private final SubLSymbol $sym498$OUTER_CATCH_FOR_CYBLACK_PRECON_PATTERN_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PRECON-PATTERN-METHOD");

    private static final SubLSymbol CYBLACK_PRECON_PATTERN_SET_LOGICAL_FORM_METHOD = makeSymbol("CYBLACK-PRECON-PATTERN-SET-LOGICAL-FORM-METHOD");

    private static final SubLSymbol DECODE_CYBLACK_PATTERN_OPERATOR = makeSymbol("DECODE-CYBLACK-PATTERN-OPERATOR");

    private static final SubLSymbol CYBLACK_PRECON_PATTERN_GET_UNIQUE_BINDINGS_METHOD = makeSymbol("CYBLACK-PRECON-PATTERN-GET-UNIQUE-BINDINGS-METHOD");

    private static final SubLSymbol CYBLACK_PRECON_PATTERN_GET_VALUE_METHOD = makeSymbol("CYBLACK-PRECON-PATTERN-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_SATISFACTION_EXPRESSION = makeSymbol("CYBLACK-SATISFACTION-EXPRESSION");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SATISFACTION_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SATISFACTION-EXPRESSION-CLASS");

    static private final SubLSymbol $sym508$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SATISFACTION_EXPRESSION_INSTA = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SATISFACTION-EXPRESSION-INSTANCE");

    static private final SubLSymbol $sym510$OUTER_CATCH_FOR_CYBLACK_SATISFACTION_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-SATISFACTION-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_SATISFACTION_EXPRESSION_INITIALIZE_METHOD = makeSymbol("CYBLACK-SATISFACTION-EXPRESSION-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_SATISFACTION_EXPRESSION_PRINT_METHOD = makeSymbol("CYBLACK-SATISFACTION-EXPRESSION-PRINT-METHOD");

    static private final SubLSymbol $sym517$CYBLACK_SATISFACTION_EXPRESSION_TRAVERSE_FILLING_DATATYPE_BAG_MET = makeSymbol("CYBLACK-SATISFACTION-EXPRESSION-TRAVERSE-FILLING-DATATYPE-BAG-METHOD");

    private static final SubLSymbol CYBLACK_SATISFACTION_EXPRESSION_GET_VALUE_METHOD = makeSymbol("CYBLACK-SATISFACTION-EXPRESSION-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_SATISFACTION_EXPRESSION_GET_ENVIRONMENT_METHOD = makeSymbol("CYBLACK-SATISFACTION-EXPRESSION-GET-ENVIRONMENT-METHOD");

    static private final SubLSymbol $sym523$OUTER_CATCH_FOR_CYBLACK_SATISFACTION_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-SATISFACTION-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_SATISFACTION_EXPRESSION_SET_ENVIRONMENT_METHOD = makeSymbol("CYBLACK-SATISFACTION-EXPRESSION-SET-ENVIRONMENT-METHOD");

    private static final SubLSymbol CYBLACK_SATISFACTION_EXPRESSION_GET_LOCAL_BINDINGS_METHOD = makeSymbol("CYBLACK-SATISFACTION-EXPRESSION-GET-LOCAL-BINDINGS-METHOD");

    static private final SubLSymbol $sym526$OUTER_CATCH_FOR_CYBLACK_SATISFACTION_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-SATISFACTION-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_SATISFACTION_EXPRESSION_SET_LOCAL_BINDINGS_METHOD = makeSymbol("CYBLACK-SATISFACTION-EXPRESSION-SET-LOCAL-BINDINGS-METHOD");

    private static final SubLSymbol GET_LOGICAL_EXPRESSION = makeSymbol("GET-LOGICAL-EXPRESSION");

    static private final SubLSymbol $sym53$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-BINDING-METHOD");

    private static final SubLSymbol CYBLACK_SATISFACTION_EXPRESSION_GET_LOGICAL_EXPRESSION_METHOD = makeSymbol("CYBLACK-SATISFACTION-EXPRESSION-GET-LOGICAL-EXPRESSION-METHOD");

    private static final SubLSymbol SET_LOGICAL_EXPRESSION = makeSymbol("SET-LOGICAL-EXPRESSION");

    static private final SubLSymbol $sym534$OUTER_CATCH_FOR_CYBLACK_SATISFACTION_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-SATISFACTION-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_SATISFACTION_EXPRESSION_SET_LOGICAL_EXPRESSION_METHOD = makeSymbol("CYBLACK-SATISFACTION-EXPRESSION-SET-LOGICAL-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_SIMPLE_SATISFACTION_EXPRESSION = makeSymbol("CYBLACK-SIMPLE-SATISFACTION-EXPRESSION");

    static private final SubLSymbol $sym538$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SIMPLE_SATISFACTION_EXPRESSIO = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SIMPLE-SATISFACTION-EXPRESSION-CLASS");

    static private final SubLSymbol $sym539$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SIMPLE_SATISFACTION_EXPRESSIO = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SIMPLE-SATISFACTION-EXPRESSION-INSTANCE");

    private static final SubLSymbol CYBLACK_BINDING_SET_VALUE_METHOD = makeSymbol("CYBLACK-BINDING-SET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_SIMPLE_SATISFACTION_EXPRESSION_PRINT_METHOD = makeSymbol("CYBLACK-SIMPLE-SATISFACTION-EXPRESSION-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_TYPE_EXPRESSION = makeSymbol("CYBLACK-TYPE-EXPRESSION");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_TYPE_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-TYPE-EXPRESSION-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_TYPE_EXPRESSION_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-TYPE-EXPRESSION-INSTANCE");

    static private final SubLSymbol $sym550$OUTER_CATCH_FOR_CYBLACK_TYPE_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-TYPE-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_TYPE_EXPRESSION_INITIALIZE_METHOD = makeSymbol("CYBLACK-TYPE-EXPRESSION-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_TYPE_EXPRESSION_PRINT_METHOD = makeSymbol("CYBLACK-TYPE-EXPRESSION-PRINT-METHOD");

    private static final SubLSymbol GET_BASE_TYPE = makeSymbol("GET-BASE-TYPE");

    private static final SubLSymbol CYBLACK_TYPE_EXPRESSION_GET_BASE_TYPE_METHOD = makeSymbol("CYBLACK-TYPE-EXPRESSION-GET-BASE-TYPE-METHOD");

    private static final SubLSymbol SET_BASE_TYPE = makeSymbol("SET-BASE-TYPE");

    static private final SubLSymbol $sym561$OUTER_CATCH_FOR_CYBLACK_TYPE_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-TYPE-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_TYPE_EXPRESSION_SET_BASE_TYPE_METHOD = makeSymbol("CYBLACK-TYPE-EXPRESSION-SET-BASE-TYPE-METHOD");

    private static final SubLSymbol CYBLACK_TYPE_EXPRESSION_GET_PANEL_METHOD = makeSymbol("CYBLACK-TYPE-EXPRESSION-GET-PANEL-METHOD");

    private static final SubLSymbol CYBLACK_TYPE_EXPRESSION_GET_TYPENAME_METHOD = makeSymbol("CYBLACK-TYPE-EXPRESSION-GET-TYPENAME-METHOD");

    static private final SubLSymbol $sym57$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-BINDING-METHOD");

    private static final SubLSymbol CYBLACK_TYPE_EXPRESSION_GET_SUPERTYPES_METHOD = makeSymbol("CYBLACK-TYPE-EXPRESSION-GET-SUPERTYPES-METHOD");

    private static final SubLSymbol SET_SUPERTYPES = makeSymbol("SET-SUPERTYPES");

    private static final SubLSymbol CYBLACK_TYPE_EXPRESSION_SET_SUPERTYPES_METHOD = makeSymbol("CYBLACK-TYPE-EXPRESSION-SET-SUPERTYPES-METHOD");

    private static final SubLSymbol GET_SUBTYPES = makeSymbol("GET-SUBTYPES");

    private static final SubLSymbol CYBLACK_TYPE_EXPRESSION_GET_SUBTYPES_METHOD = makeSymbol("CYBLACK-TYPE-EXPRESSION-GET-SUBTYPES-METHOD");

    private static final SubLSymbol CYBLACK_BINDING_GET_TYPE_METHOD = makeSymbol("CYBLACK-BINDING-GET-TYPE-METHOD");

    private static final SubLSymbol SET_SUBTYPES = makeSymbol("SET-SUBTYPES");

    private static final SubLSymbol CYBLACK_TYPE_EXPRESSION_SET_SUBTYPES_METHOD = makeSymbol("CYBLACK-TYPE-EXPRESSION-SET-SUBTYPES-METHOD");

    private static final SubLSymbol CYBLACK_TYPE_EXPRESSION_SUBTYPE_P_METHOD = makeSymbol("CYBLACK-TYPE-EXPRESSION-SUBTYPE-P-METHOD");

    private static final SubLSymbol SET_TYPE = makeSymbol("SET-TYPE");

    private static final SubLSymbol CYBLACK_TYPE_EXPRESSION_INSTANCE_OF_P_METHOD = makeSymbol("CYBLACK-TYPE-EXPRESSION-INSTANCE-OF-P-METHOD");

    private static final SubLSymbol SET_PANEL_TYPE = makeSymbol("SET-PANEL-TYPE");

    private static final SubLSymbol CYBLACK_TYPE_EXPRESSION_SET_PANEL_TYPE_METHOD = makeSymbol("CYBLACK-TYPE-EXPRESSION-SET-PANEL-TYPE-METHOD");

    private static final SubLSymbol GET_POSTING_TYPE = makeSymbol("GET-POSTING-TYPE");

    private static final SubLSymbol CYBLACK_TYPE_EXPRESSION_GET_POSTING_TYPE_METHOD = makeSymbol("CYBLACK-TYPE-EXPRESSION-GET-POSTING-TYPE-METHOD");

    private static final SubLSymbol SET_POSTING_TYPE = makeSymbol("SET-POSTING-TYPE");

    private static final SubLSymbol CYBLACK_TYPE_EXPRESSION_SET_POSTING_TYPE_METHOD = makeSymbol("CYBLACK-TYPE-EXPRESSION-SET-POSTING-TYPE-METHOD");

    private static final SubLSymbol CREATE_PANEL = makeSymbol("CREATE-PANEL");

    private static final SubLSymbol CYBLACK_TYPE_EXPRESSION_CREATE_PANEL_METHOD = makeSymbol("CYBLACK-TYPE-EXPRESSION-CREATE-PANEL-METHOD");

    private static final SubLSymbol CYBLACK_TYPE_EXPRESSION_CREATE_POSTING_METHOD = makeSymbol("CYBLACK-TYPE-EXPRESSION-CREATE-POSTING-METHOD");

    private static final SubLSymbol CYBLACK_TYPE_EXPRESSION_GET_VALUE_METHOD = makeSymbol("CYBLACK-TYPE-EXPRESSION-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_SUBTYPE_EXPRESSION = makeSymbol("CYBLACK-SUBTYPE-EXPRESSION");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SUBTYPE_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SUBTYPE-EXPRESSION-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SUBTYPE_EXPRESSION_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SUBTYPE-EXPRESSION-INSTANCE");

    static private final SubLSymbol $sym619$OUTER_CATCH_FOR_CYBLACK_SUBTYPE_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-SUBTYPE-EXPRESSION-METHOD");

    static private final SubLSymbol $sym62$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-BINDING-METHOD");

    private static final SubLSymbol CYBLACK_SUBTYPE_EXPRESSION_INITIALIZE_METHOD = makeSymbol("CYBLACK-SUBTYPE-EXPRESSION-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_SUBTYPE_EXPRESSION_PRINT_METHOD = makeSymbol("CYBLACK-SUBTYPE-EXPRESSION-PRINT-METHOD");

    private static final SubLSymbol PRINT_ARGS = makeSymbol("PRINT-ARGS");

    private static final SubLSymbol CYBLACK_BINDING_SET_TYPE_METHOD = makeSymbol("CYBLACK-BINDING-SET-TYPE-METHOD");

    private static final SubLSymbol CYBLACK_SUBTYPE_EXPRESSION_PRINT_ARGS_METHOD = makeSymbol("CYBLACK-SUBTYPE-EXPRESSION-PRINT-ARGS-METHOD");

    private static final SubLSymbol GET_PREDICATOR_METHOD = makeSymbol("GET-PREDICATOR-METHOD");

    private static final SubLSymbol CYBLACK_SUBTYPE_EXPRESSION_GET_PREDICATOR_METHOD_METHOD = makeSymbol("CYBLACK-SUBTYPE-EXPRESSION-GET-PREDICATOR-METHOD-METHOD");

    private static final SubLSymbol SET_PREDICATOR_METHOD = makeSymbol("SET-PREDICATOR-METHOD");

    static private final SubLSymbol $sym637$OUTER_CATCH_FOR_CYBLACK_SUBTYPE_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-SUBTYPE-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_SUBTYPE_EXPRESSION_SET_PREDICATOR_METHOD_METHOD = makeSymbol("CYBLACK-SUBTYPE-EXPRESSION-SET-PREDICATOR-METHOD-METHOD");

    private static final SubLSymbol HAS_TYPE_P = makeSymbol("HAS-TYPE-P");

    private static final SubLSymbol CYBLACK_SUBTYPE_EXPRESSION_GET_ARGS_METHOD = makeSymbol("CYBLACK-SUBTYPE-EXPRESSION-GET-ARGS-METHOD");

    static private final SubLSymbol $sym645$OUTER_CATCH_FOR_CYBLACK_SUBTYPE_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-SUBTYPE-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_SUBTYPE_EXPRESSION_SET_ARGS_METHOD = makeSymbol("CYBLACK-SUBTYPE-EXPRESSION-SET-ARGS-METHOD");

    private static final SubLSymbol CYBLACK_BASIC_VIRTUAL_PANEL = makeSymbol("CYBLACK-BASIC-VIRTUAL-PANEL");

    private static final SubLSymbol CYBLACK_SUBTYPE_EXPRESSION_GET_PANEL_METHOD = makeSymbol("CYBLACK-SUBTYPE-EXPRESSION-GET-PANEL-METHOD");

    private static final SubLSymbol CYBLACK_SUBTYPE_EXPRESSION_GET_TYPENAME_METHOD = makeSymbol("CYBLACK-SUBTYPE-EXPRESSION-GET-TYPENAME-METHOD");

    private static final SubLSymbol CYBLACK_SUBTYPE_EXPRESSION_GET_SUPERTYPES_METHOD = makeSymbol("CYBLACK-SUBTYPE-EXPRESSION-GET-SUPERTYPES-METHOD");

    private static final SubLSymbol CYBLACK_SUBTYPE_EXPRESSION_GET_SUBTYPES_METHOD = makeSymbol("CYBLACK-SUBTYPE-EXPRESSION-GET-SUBTYPES-METHOD");

    private static final SubLSymbol CYBLACK_SUBTYPE_EXPRESSION_SUBTYPE_P_METHOD = makeSymbol("CYBLACK-SUBTYPE-EXPRESSION-SUBTYPE-P-METHOD");

    private static final SubLSymbol CYBLACK_SUBTYPE_EXPRESSION_INSTANCE_OF_P_METHOD = makeSymbol("CYBLACK-SUBTYPE-EXPRESSION-INSTANCE-OF-P-METHOD");

    private static final SubLSymbol CYBLACK_SUBTYPE_EXPRESSION_CREATE_PANEL_METHOD = makeSymbol("CYBLACK-SUBTYPE-EXPRESSION-CREATE-PANEL-METHOD");

    private static final SubLSymbol CYBLACK_PANEL_EXPRESSION = makeSymbol("CYBLACK-PANEL-EXPRESSION");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PANEL_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PANEL-EXPRESSION-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PANEL_EXPRESSION_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PANEL-EXPRESSION-INSTANCE");

    static private final SubLSymbol $sym669$OUTER_CATCH_FOR_CYBLACK_PANEL_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PANEL-EXPRESSION-METHOD");

    static private final SubLSymbol $sym67$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-BINDING-METHOD");

    private static final SubLSymbol CYBLACK_PANEL_EXPRESSION_INITIALIZE_METHOD = makeSymbol("CYBLACK-PANEL-EXPRESSION-INITIALIZE-METHOD");

    static private final SubLSymbol $sym672$OUTER_CATCH_FOR_CYBLACK_PANEL_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PANEL-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_PANEL_EXPRESSION_PRINT_METHOD = makeSymbol("CYBLACK-PANEL-EXPRESSION-PRINT-METHOD");

    private static final SubLSymbol GET_TYPE_EXPRESSION = makeSymbol("GET-TYPE-EXPRESSION");

    private static final SubLSymbol CYBLACK_PANEL_EXPRESSION_GET_TYPE_EXPRESSION_METHOD = makeSymbol("CYBLACK-PANEL-EXPRESSION-GET-TYPE-EXPRESSION-METHOD");

    private static final SubLSymbol SET_TYPE_EXPRESSION = makeSymbol("SET-TYPE-EXPRESSION");

    private static final SubLSymbol CYBLACK_BINDING_HAS_TYPE_P_METHOD = makeSymbol("CYBLACK-BINDING-HAS-TYPE-P-METHOD");

    static private final SubLSymbol $sym681$OUTER_CATCH_FOR_CYBLACK_PANEL_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PANEL-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_PANEL_EXPRESSION_SET_TYPE_EXPRESSION_METHOD = makeSymbol("CYBLACK-PANEL-EXPRESSION-SET-TYPE-EXPRESSION-METHOD");

    static private final SubLSymbol $sym685$OUTER_CATCH_FOR_CYBLACK_PANEL_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PANEL-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_PANEL_EXPRESSION_GET_BLACKBOARD_METHOD = makeSymbol("CYBLACK-PANEL-EXPRESSION-GET-BLACKBOARD-METHOD");

    static private final SubLSymbol $sym688$OUTER_CATCH_FOR_CYBLACK_PANEL_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PANEL-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_PANEL_EXPRESSION_GET_VALUE_METHOD = makeSymbol("CYBLACK-PANEL-EXPRESSION-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_GET_EXPRESSION = makeSymbol("CYBLACK-GET-EXPRESSION");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_GET_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-GET-EXPRESSION-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_GET_EXPRESSION_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-GET-EXPRESSION-INSTANCE");

    static private final SubLSymbol $sym697$OUTER_CATCH_FOR_CYBLACK_GET_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-GET-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_GET_EXPRESSION_INITIALIZE_METHOD = makeSymbol("CYBLACK-GET-EXPRESSION-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_PATTERN_OPERATOR_P = makeSymbol("CYBLACK-PATTERN-OPERATOR-P");

    static private final SubLSymbol $sym700$OUTER_CATCH_FOR_CYBLACK_GET_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-GET-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_GET_EXPRESSION_PRINT_METHOD = makeSymbol("CYBLACK-GET-EXPRESSION-PRINT-METHOD");

    private static final SubLSymbol GET_PANEL_EXPRESSION = makeSymbol("GET-PANEL-EXPRESSION");

    private static final SubLSymbol CYBLACK_GET_EXPRESSION_GET_PANEL_EXPRESSION_METHOD = makeSymbol("CYBLACK-GET-EXPRESSION-GET-PANEL-EXPRESSION-METHOD");

    private static final SubLSymbol SET_PANEL_EXPRESSION = makeSymbol("SET-PANEL-EXPRESSION");

    static private final SubLSymbol $sym709$OUTER_CATCH_FOR_CYBLACK_GET_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-GET-EXPRESSION-METHOD");

    static private final SubLSymbol $sym71$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-BINDING-METHOD");

    private static final SubLSymbol CYBLACK_GET_EXPRESSION_SET_PANEL_EXPRESSION_METHOD = makeSymbol("CYBLACK-GET-EXPRESSION-SET-PANEL-EXPRESSION-METHOD");

    private static final SubLSymbol GET_KEY_EXPRESSION = makeSymbol("GET-KEY-EXPRESSION");

    private static final SubLSymbol CYBLACK_GET_EXPRESSION_GET_KEY_EXPRESSION_METHOD = makeSymbol("CYBLACK-GET-EXPRESSION-GET-KEY-EXPRESSION-METHOD");

    private static final SubLSymbol SET_KEY_EXPRESSION = makeSymbol("SET-KEY-EXPRESSION");

    static private final SubLSymbol $sym717$OUTER_CATCH_FOR_CYBLACK_GET_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-GET-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_GET_EXPRESSION_SET_KEY_EXPRESSION_METHOD = makeSymbol("CYBLACK-GET-EXPRESSION-SET-KEY-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_BINDING_GET_VARIABLE_METHOD = makeSymbol("CYBLACK-BINDING-GET-VARIABLE-METHOD");

    static private final SubLSymbol $sym720$OUTER_CATCH_FOR_CYBLACK_GET_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-GET-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_GET_EXPRESSION_GET_VALUE_METHOD = makeSymbol("CYBLACK-GET-EXPRESSION-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_BASIC_LOGICAL_EXPRESSION = makeSymbol("CYBLACK-BASIC-LOGICAL-EXPRESSION");

    static private final SubLSymbol $sym724$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_BASIC_LOGICAL_EXPRESSION_CLAS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-BASIC-LOGICAL-EXPRESSION-CLASS");

    static private final SubLSymbol $sym725$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_BASIC_LOGICAL_EXPRESSION_INST = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-BASIC-LOGICAL-EXPRESSION-INSTANCE");

    private static final SubLSymbol CYBLACK_BASIC_LOGICAL_EXPRESSION_GET_VALUE_METHOD = makeSymbol("CYBLACK-BASIC-LOGICAL-EXPRESSION-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_ROBOT = makeSymbol("CYBLACK-EXISTENTIAL-ROBOT");

    private static final SubLSymbol CYBLACK_BASIC_POSTING_VISITOR = makeSymbol("CYBLACK-BASIC-POSTING-VISITOR");

    private static final SubLSymbol SET_VARIABLE = makeSymbol("SET-VARIABLE");

    private static final SubLSymbol ACCUMULATED_STATE = makeSymbol("ACCUMULATED-STATE");

    private static final SubLSymbol LAST_EVALUATION_RESULT = makeSymbol("LAST-EVALUATION-RESULT");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EXISTENTIAL_ROBOT_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EXISTENTIAL-ROBOT-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EXISTENTIAL_ROBOT_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EXISTENTIAL-ROBOT-INSTANCE");

    static private final SubLSymbol $sym737$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_ROBOT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-EXISTENTIAL-ROBOT-METHOD");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_ROBOT_INITIALIZE_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-ROBOT-INITIALIZE-METHOD");

    static private final SubLSymbol $sym742$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_ROBOT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-EXISTENTIAL-ROBOT-METHOD");

    private static final SubLSymbol INITIALIZE_ACCUMULATED_STATE = makeSymbol("INITIALIZE-ACCUMULATED-STATE");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_ROBOT_SET_INITIAL_STATE_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-ROBOT-SET-INITIAL-STATE-METHOD");

    static private final SubLSymbol $sym746$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_ROBOT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-EXISTENTIAL-ROBOT-METHOD");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_ROBOT_INITIALIZE_ACCUMULATED_STATE_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-ROBOT-INITIALIZE-ACCUMULATED-STATE-METHOD");

    private static final SubLSymbol EVALUATE_VISIT = makeSymbol("EVALUATE-VISIT");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_ROBOT_VISIT_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-ROBOT-VISIT-METHOD");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_ROBOT_EVALUATE_VISIT_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-ROBOT-EVALUATE-VISIT-METHOD");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_ROBOT_GET_FINAL_STATE_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-ROBOT-GET-FINAL-STATE-METHOD");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_ROBOT_GET_LOGICAL_EXPRESSION_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-ROBOT-GET-LOGICAL-EXPRESSION-METHOD");

    static private final SubLSymbol $sym758$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_ROBOT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-EXISTENTIAL-ROBOT-METHOD");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_ROBOT_SET_LOGICAL_EXPRESSION_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-ROBOT-SET-LOGICAL-EXPRESSION-METHOD");

    static private final SubLSymbol $sym76$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-BINDING-METHOD");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_ROBOT_GET_BINDING_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-ROBOT-GET-BINDING-METHOD");

    private static final SubLSymbol SET_BINDING = makeSymbol("SET-BINDING");

    static private final SubLSymbol $sym765$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_ROBOT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-EXISTENTIAL-ROBOT-METHOD");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_ROBOT_SET_BINDING_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-ROBOT-SET-BINDING-METHOD");

    private static final SubLSymbol CYBLACK_PRESENT_EXPRESSION = makeSymbol("CYBLACK-PRESENT-EXPRESSION");

    private static final SubLSymbol CYBLACK_BINDING_SET_VARIABLE_METHOD = makeSymbol("CYBLACK-BINDING-SET-VARIABLE-METHOD");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PRESENT_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PRESENT-EXPRESSION-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_PRESENT_EXPRESSION_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-PRESENT-EXPRESSION-INSTANCE");

    static private final SubLSymbol $sym773$OUTER_CATCH_FOR_CYBLACK_PRESENT_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PRESENT-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_PRESENT_EXPRESSION_INITIALIZE_METHOD = makeSymbol("CYBLACK-PRESENT-EXPRESSION-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_PRESENT_EXPRESSION_PRINT_METHOD = makeSymbol("CYBLACK-PRESENT-EXPRESSION-PRINT-METHOD");

    private static final SubLSymbol GET_VARIABLE_REFERENCE = makeSymbol("GET-VARIABLE-REFERENCE");

    private static final SubLSymbol CYBLACK_PRESENT_EXPRESSION_GET_VARIABLE_REFERENCE_METHOD = makeSymbol("CYBLACK-PRESENT-EXPRESSION-GET-VARIABLE-REFERENCE-METHOD");

    private static final SubLSymbol SET_VARIABLE_REFERENCE = makeSymbol("SET-VARIABLE-REFERENCE");

    static private final SubLSymbol $sym784$OUTER_CATCH_FOR_CYBLACK_PRESENT_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-PRESENT-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_PRESENT_EXPRESSION_SET_VARIABLE_REFERENCE_METHOD = makeSymbol("CYBLACK-PRESENT-EXPRESSION-SET-VARIABLE-REFERENCE-METHOD");

    private static final SubLSymbol CYBLACK_PRESENT_EXPRESSION_GET_VALUE_METHOD = makeSymbol("CYBLACK-PRESENT-EXPRESSION-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_EMPTY_P_EXPRESSION = makeSymbol("CYBLACK-EMPTY-P-EXPRESSION");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EMPTY_P_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EMPTY-P-EXPRESSION-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EMPTY_P_EXPRESSION_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EMPTY-P-EXPRESSION-INSTANCE");

    static private final SubLSymbol $sym794$OUTER_CATCH_FOR_CYBLACK_EMPTY_P_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-EMPTY-P-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_EMPTY_P_EXPRESSION_INITIALIZE_METHOD = makeSymbol("CYBLACK-EMPTY-P-EXPRESSION-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_EMPTY_P_EXPRESSION_PRINT_METHOD = makeSymbol("CYBLACK-EMPTY-P-EXPRESSION-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_EMPTY_P_EXPRESSION_GET_DATATYPE_METHOD = makeSymbol("CYBLACK-EMPTY-P-EXPRESSION-GET-DATATYPE-METHOD");

    static private final SubLSymbol $sym805$OUTER_CATCH_FOR_CYBLACK_EMPTY_P_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-EMPTY-P-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_EMPTY_P_EXPRESSION_SET_DATATYPE_METHOD = makeSymbol("CYBLACK-EMPTY-P-EXPRESSION-SET-DATATYPE-METHOD");

    private static final SubLSymbol CYBLACK_EMPTY_P_EXPRESSION_GET_VALUE_METHOD = makeSymbol("CYBLACK-EMPTY-P-EXPRESSION-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_EXPRESSION = makeSymbol("CYBLACK-EXISTENTIAL-EXPRESSION");

    private static final SubLSymbol CYBLACK_BINDING_APRIORI_P_METHOD = makeSymbol("CYBLACK-BINDING-APRIORI-P-METHOD");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EXISTENTIAL_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EXISTENTIAL-EXPRESSION-CLASS");

    static private final SubLSymbol $sym813$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EXISTENTIAL_EXPRESSION_INSTAN = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EXISTENTIAL-EXPRESSION-INSTANCE");

    static private final SubLSymbol $sym815$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-EXISTENTIAL-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_EXPRESSION_INITIALIZE_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-EXPRESSION-INITIALIZE-METHOD");

    private static final SubLSymbol PRINT_FUNCTOR = makeSymbol("PRINT-FUNCTOR");

    private static final SubLSymbol SET_APRIORI = makeSymbol("SET-APRIORI");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_EXPRESSION_PRINT_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-EXPRESSION-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_EXPRESSION_PRINT_FUNCTOR_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-EXPRESSION-PRINT-FUNCTOR-METHOD");

    private static final SubLSymbol GET_CLOSURE = makeSymbol("GET-CLOSURE");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_EXPRESSION_GET_CLOSURE_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-EXPRESSION-GET-CLOSURE-METHOD");

    private static final SubLSymbol SET_CLOSURE = makeSymbol("SET-CLOSURE");

    static private final SubLSymbol $sym831$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-EXISTENTIAL-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_EXPRESSION_SET_CLOSURE_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-EXPRESSION-SET-CLOSURE-METHOD");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_EXPRESSION_GET_BINDING_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-EXPRESSION-GET-BINDING-METHOD");

    static private final SubLSymbol $sym835$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-EXISTENTIAL-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_EXPRESSION_SET_BINDING_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-EXPRESSION-SET-BINDING-METHOD");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_EXPRESSION_GET_LOGICAL_EXPRESSION_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-EXPRESSION-GET-LOGICAL-EXPRESSION-METHOD");

    static private final SubLSymbol $sym839$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-EXISTENTIAL-EXPRESSION-METHOD");

    static private final SubLSymbol $sym84$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-BINDING-METHOD");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_EXPRESSION_SET_LOGICAL_EXPRESSION_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-EXPRESSION-SET-LOGICAL-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_EXPRESSION_GET_VALUE_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-EXPRESSION-GET-VALUE-METHOD");

    private static final SubLSymbol GET_VALUE_INTERNAL = makeSymbol("GET-VALUE-INTERNAL");

    static private final SubLSymbol $sym846$OUTER_CATCH_FOR_CYBLACK_EXISTENTIAL_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-EXISTENTIAL-EXPRESSION-METHOD");

    private static final SubLSymbol CREATE_POSTING_VISITOR = makeSymbol("CREATE-POSTING-VISITOR");

    private static final SubLSymbol CYBLACK_BINDING_SET_APRIORI_METHOD = makeSymbol("CYBLACK-BINDING-SET-APRIORI-METHOD");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_EXPRESSION_GET_VALUE_INTERNAL_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-EXPRESSION-GET-VALUE-INTERNAL-METHOD");

    private static final SubLSymbol NEW_POSTING_VISITOR = makeSymbol("NEW-POSTING-VISITOR");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_EXPRESSION_CREATE_POSTING_VISITOR_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-EXPRESSION-CREATE-POSTING-VISITOR-METHOD");

    private static final SubLSymbol CYBLACK_EXISTENTIAL_EXPRESSION_NEW_POSTING_VISITOR_METHOD = makeSymbol("CYBLACK-EXISTENTIAL-EXPRESSION-NEW-POSTING-VISITOR-METHOD");

    private static final SubLSymbol CYBLACK_FORALL_ROBOT = makeSymbol("CYBLACK-FORALL-ROBOT");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_FORALL_ROBOT_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-FORALL-ROBOT-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_FORALL_ROBOT_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-FORALL-ROBOT-INSTANCE");

    private static final SubLSymbol LISTIFY_BINDING = makeSymbol("LISTIFY-BINDING");

    private static final SubLSymbol CYBLACK_FORALL_ROBOT_INITIALIZE_METHOD = makeSymbol("CYBLACK-FORALL-ROBOT-INITIALIZE-METHOD");

    static private final SubLSymbol $sym862$OUTER_CATCH_FOR_CYBLACK_FORALL_ROBOT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-FORALL-ROBOT-METHOD");

    private static final SubLSymbol CYBLACK_FORALL_ROBOT_INITIALIZE_ACCUMULATED_STATE_METHOD = makeSymbol("CYBLACK-FORALL-ROBOT-INITIALIZE-ACCUMULATED-STATE-METHOD");

    static private final SubLSymbol $sym865$OUTER_CATCH_FOR_CYBLACK_FORALL_ROBOT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-FORALL-ROBOT-METHOD");

    private static final SubLSymbol CYBLACK_FORALL_ROBOT_EVALUATE_VISIT_METHOD = makeSymbol("CYBLACK-FORALL-ROBOT-EVALUATE-VISIT-METHOD");

    private static final SubLSymbol CYBLACK_FORALL_EXPRESSION = makeSymbol("CYBLACK-FORALL-EXPRESSION");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_FORALL_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-FORALL-EXPRESSION-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_FORALL_EXPRESSION_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-FORALL-EXPRESSION-INSTANCE");

    private static final SubLSymbol CYBLACK_FORALL_EXPRESSION_PRINT_FUNCTOR_METHOD = makeSymbol("CYBLACK-FORALL-EXPRESSION-PRINT-FUNCTOR-METHOD");

    private static final SubLSymbol CYBLACK_FORALL_EXPRESSION_NEW_POSTING_VISITOR_METHOD = makeSymbol("CYBLACK-FORALL-EXPRESSION-NEW-POSTING-VISITOR-METHOD");

    private static final SubLSymbol CYBLACK_NESTED_LOGICAL_EXPRESSION = makeSymbol("CYBLACK-NESTED-LOGICAL-EXPRESSION");

    static private final SubLSymbol $sym878$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_NESTED_LOGICAL_EXPRESSION_CLA = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-NESTED-LOGICAL-EXPRESSION-CLASS");

    static private final SubLSymbol $sym879$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_NESTED_LOGICAL_EXPRESSION_INS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-NESTED-LOGICAL-EXPRESSION-INSTANCE");

    static private final SubLSymbol $sym88$OUTER_CATCH_FOR_CYBLACK_BINDING_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-BINDING-METHOD");

    static private final SubLSymbol $sym881$OUTER_CATCH_FOR_CYBLACK_NESTED_LOGICAL_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-NESTED-LOGICAL-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_NESTED_LOGICAL_EXPRESSION_INITIALIZE_METHOD = makeSymbol("CYBLACK-NESTED-LOGICAL-EXPRESSION-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_NESTED_LOGICAL_EXPRESSION_PRINT_METHOD = makeSymbol("CYBLACK-NESTED-LOGICAL-EXPRESSION-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_NESTED_LOGICAL_EXPRESSION_GET_LOGICAL_FORM_METHOD = makeSymbol("CYBLACK-NESTED-LOGICAL-EXPRESSION-GET-LOGICAL-FORM-METHOD");

    static private final SubLSymbol $sym888$OUTER_CATCH_FOR_CYBLACK_NESTED_LOGICAL_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-NESTED-LOGICAL-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_NESTED_LOGICAL_EXPRESSION_SET_LOGICAL_FORM_METHOD = makeSymbol("CYBLACK-NESTED-LOGICAL-EXPRESSION-SET-LOGICAL-FORM-METHOD");

    private static final SubLSymbol CYBLACK_COMPOUND_LOGICAL_EXPRESSION = makeSymbol("CYBLACK-COMPOUND-LOGICAL-EXPRESSION");

    static private final SubLSymbol $sym892$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_COMPOUND_LOGICAL_EXPRESSION_C = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-COMPOUND-LOGICAL-EXPRESSION-CLASS");

    static private final SubLSymbol $sym893$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_COMPOUND_LOGICAL_EXPRESSION_I = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-COMPOUND-LOGICAL-EXPRESSION-INSTANCE");

    private static final SubLSymbol CYBLACK_COMPOUND_LOGICAL_EXPRESSION_PRINT_OPERATOR_METHOD = makeSymbol("CYBLACK-COMPOUND-LOGICAL-EXPRESSION-PRINT-OPERATOR-METHOD");

    private static final SubLSymbol CYBLACK_BINDING_LISTIFY_BINDING_METHOD = makeSymbol("CYBLACK-BINDING-LISTIFY-BINDING-METHOD");

    private static final SubLSymbol CYBLACK_COMPOUND_LOGICAL_EXPRESSION_GET_ARITY_METHOD = makeSymbol("CYBLACK-COMPOUND-LOGICAL-EXPRESSION-GET-ARITY-METHOD");

    private static final SubLSymbol CYBLACK_COMPOUND_LOGICAL_EXPRESSION_GET_ARG1_METHOD = makeSymbol("CYBLACK-COMPOUND-LOGICAL-EXPRESSION-GET-ARG1-METHOD");

    private static final SubLSymbol CYBLACK_COMPOUND_LOGICAL_EXPRESSION_SET_ARG1_METHOD = makeSymbol("CYBLACK-COMPOUND-LOGICAL-EXPRESSION-SET-ARG1-METHOD");

    private static final SubLSymbol CYBLACK_UNARY_LOGICAL_EXPRESSION = makeSymbol("CYBLACK-UNARY-LOGICAL-EXPRESSION");

    static private final SubLSymbol $sym909$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_UNARY_LOGICAL_EXPRESSION_CLAS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-UNARY-LOGICAL-EXPRESSION-CLASS");

    static private final SubLSymbol $sym911$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_UNARY_LOGICAL_EXPRESSION_INST = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-UNARY-LOGICAL-EXPRESSION-INSTANCE");

    static private final SubLSymbol $sym913$OUTER_CATCH_FOR_CYBLACK_UNARY_LOGICAL_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-UNARY-LOGICAL-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_UNARY_LOGICAL_EXPRESSION_INITIALIZE_METHOD = makeSymbol("CYBLACK-UNARY-LOGICAL-EXPRESSION-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_UNARY_LOGICAL_EXPRESSION_PRINT_METHOD = makeSymbol("CYBLACK-UNARY-LOGICAL-EXPRESSION-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_UNARY_LOGICAL_EXPRESSION_PRINT_OPERATOR_METHOD = makeSymbol("CYBLACK-UNARY-LOGICAL-EXPRESSION-PRINT-OPERATOR-METHOD");

    private static final SubLSymbol CYBLACK_UNARY_LOGICAL_EXPRESSION_GET_ARITY_METHOD = makeSymbol("CYBLACK-UNARY-LOGICAL-EXPRESSION-GET-ARITY-METHOD");

    private static final SubLSymbol CYBLACK_UNARY_LOGICAL_EXPRESSION_GET_ARG1_METHOD = makeSymbol("CYBLACK-UNARY-LOGICAL-EXPRESSION-GET-ARG1-METHOD");

    static private final SubLSymbol $sym926$OUTER_CATCH_FOR_CYBLACK_UNARY_LOGICAL_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-UNARY-LOGICAL-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_UNARY_LOGICAL_EXPRESSION_SET_ARG1_METHOD = makeSymbol("CYBLACK-UNARY-LOGICAL-EXPRESSION-SET-ARG1-METHOD");

    private static final SubLSymbol CYBLACK_NOT_EXPRESSION = makeSymbol("CYBLACK-NOT-EXPRESSION");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_NOT_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-NOT-EXPRESSION-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_NOT_EXPRESSION_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-NOT-EXPRESSION-INSTANCE");

    private static final SubLSymbol CYBLACK_NOT_EXPRESSION_INITIALIZE_METHOD = makeSymbol("CYBLACK-NOT-EXPRESSION-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_NOT_EXPRESSION_PRINT_OPERATOR_METHOD = makeSymbol("CYBLACK-NOT-EXPRESSION-PRINT-OPERATOR-METHOD");

    private static final SubLSymbol CYBLACK_NOT_EXPRESSION_GET_VALUE_METHOD = makeSymbol("CYBLACK-NOT-EXPRESSION-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_NARY_LOGICAL_EXPRESSION = makeSymbol("CYBLACK-NARY-LOGICAL-EXPRESSION");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_NARY_LOGICAL_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-NARY-LOGICAL-EXPRESSION-CLASS");

    static private final SubLSymbol $sym942$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_NARY_LOGICAL_EXPRESSION_INSTA = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-NARY-LOGICAL-EXPRESSION-INSTANCE");

    static private final SubLSymbol $sym944$OUTER_CATCH_FOR_CYBLACK_NARY_LOGICAL_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-NARY-LOGICAL-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_NARY_LOGICAL_EXPRESSION_INITIALIZE_METHOD = makeSymbol("CYBLACK-NARY-LOGICAL-EXPRESSION-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_NARY_LOGICAL_EXPRESSION_PRINT_METHOD = makeSymbol("CYBLACK-NARY-LOGICAL-EXPRESSION-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_NARY_LOGICAL_EXPRESSION_PRINT_OPERATOR_METHOD = makeSymbol("CYBLACK-NARY-LOGICAL-EXPRESSION-PRINT-OPERATOR-METHOD");

    private static final SubLSymbol CYBLACK_NARY_LOGICAL_EXPRESSION_GET_ARITY_METHOD = makeSymbol("CYBLACK-NARY-LOGICAL-EXPRESSION-GET-ARITY-METHOD");

    private static final SubLSymbol CYBLACK_NARY_LOGICAL_EXPRESSION_GET_ARG1_METHOD = makeSymbol("CYBLACK-NARY-LOGICAL-EXPRESSION-GET-ARG1-METHOD");

    private static final SubLSymbol CYBLACK_NARY_LOGICAL_EXPRESSION_SET_ARG1_METHOD = makeSymbol("CYBLACK-NARY-LOGICAL-EXPRESSION-SET-ARG1-METHOD");

    private static final SubLSymbol GET_ARG2 = makeSymbol("GET-ARG2");

    private static final SubLSymbol CYBLACK_NARY_LOGICAL_EXPRESSION_GET_ARG2_METHOD = makeSymbol("CYBLACK-NARY-LOGICAL-EXPRESSION-GET-ARG2-METHOD");

    private static final SubLSymbol CYBLACK_NARY_LOGICAL_EXPRESSION_SET_ARG2_METHOD = makeSymbol("CYBLACK-NARY-LOGICAL-EXPRESSION-SET-ARG2-METHOD");

    private static final SubLSymbol GET_ARG3 = makeSymbol("GET-ARG3");

    private static final SubLSymbol CYBLACK_NARY_LOGICAL_EXPRESSION_GET_ARG3_METHOD = makeSymbol("CYBLACK-NARY-LOGICAL-EXPRESSION-GET-ARG3-METHOD");

    private static final SubLSymbol SET_ARG3 = makeSymbol("SET-ARG3");

    private static final SubLSymbol CYBLACK_NARY_LOGICAL_EXPRESSION_SET_ARG3_METHOD = makeSymbol("CYBLACK-NARY-LOGICAL-EXPRESSION-SET-ARG3-METHOD");

    private static final SubLSymbol CHECK_N = makeSymbol("CHECK-N");

    private static final SubLSymbol CYBLACK_NARY_LOGICAL_EXPRESSION_CHECK_N_METHOD = makeSymbol("CYBLACK-NARY-LOGICAL-EXPRESSION-CHECK-N-METHOD");

    private static final SubLSymbol CYBLACK_NARY_LOGICAL_EXPRESSION_GET_ARGN_METHOD = makeSymbol("CYBLACK-NARY-LOGICAL-EXPRESSION-GET-ARGN-METHOD");

    static private final SubLSymbol $sym981$OUTER_CATCH_FOR_CYBLACK_NARY_LOGICAL_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-NARY-LOGICAL-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_NARY_LOGICAL_EXPRESSION_SET_ARGN_METHOD = makeSymbol("CYBLACK-NARY-LOGICAL-EXPRESSION-SET-ARGN-METHOD");

    private static final SubLSymbol CYBLACK_AND_EXPRESSION = makeSymbol("CYBLACK-AND-EXPRESSION");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AND_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AND-EXPRESSION-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AND_EXPRESSION_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AND-EXPRESSION-INSTANCE");

    private static final SubLSymbol CYBLACK_AND_EXPRESSION_INITIALIZE_METHOD = makeSymbol("CYBLACK-AND-EXPRESSION-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_AND_EXPRESSION_PRINT_OPERATOR_METHOD = makeSymbol("CYBLACK-AND-EXPRESSION-PRINT-OPERATOR-METHOD");

    private static final SubLSymbol CYBLACK_AND_EXPRESSION_GET_VALUE_METHOD = makeSymbol("CYBLACK-AND-EXPRESSION-GET-VALUE-METHOD");

    private static final SubLSymbol CYBLACK_OR_EXPRESSION = makeSymbol("CYBLACK-OR-EXPRESSION");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_OR_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-OR-EXPRESSION-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_OR_EXPRESSION_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-OR-EXPRESSION-INSTANCE");

    private static final SubLSymbol CYBLACK_OR_EXPRESSION_INITIALIZE_METHOD = makeSymbol("CYBLACK-OR-EXPRESSION-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_OR_EXPRESSION_PRINT_OPERATOR_METHOD = makeSymbol("CYBLACK-OR-EXPRESSION-PRINT-OPERATOR-METHOD");

    @Override
    public void declareFunctions() {
	declare_cyblack_precondition_pattern_file();
    }

    @Override
    public void initializeVariables() {
	init_cyblack_precondition_pattern_file();
    }

    @Override
    public void runTopLevelForms() {
	setup_cyblack_precondition_pattern_file();
    }
}

/**
 * Copyright (c) 1995 - 2019 Cycorp, Inc.  All rights reserved.
 *  module:      CYBLACK-PRECONDITION-PATTERN
 *  source file: /cyc/top/cycl/cyblack/cyblack-precondition-pattern.lisp
 *  created:     2019/07/03 17:38:45
 */
abstract class cyblack_precondition_pattern_p2 implements CommonSymbols {
    // // Internal Constants
    static final SubLList $list_alt289 = list(list(makeSymbol("IGNORE"), makeSymbol("ENVIRONMENT")), list(makeSymbol("CYBLACK-TRACING-FORMAT"), makeString("~%(GET-VALUE ~S): Result -> ~S."), makeSymbol("SELF"), makeSymbol("LITERAL-VALUE")), list(RET, makeSymbol("LITERAL-VALUE")));

    static final SubLList $list_alt29 = list(makeKeyword("PUBLIC"));

    static final SubLList $list_alt291 = list(list(makeSymbol("CSETQ"), makeSymbol("LITERAL-VALUE"), makeSymbol("NEW-VALUE")), list(RET, makeSymbol("NEW-VALUE")));

    static final SubLList $list_alt295 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")));

    static final SubLList $list_alt30 = list(makeSymbol("STREAM"), makeSymbol("DEPTH"));

    static final SubLList $list_alt300 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(":NUMBER")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt304 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-VALUE"), list(makeSymbol("NEW-VALUE")), makeKeyword("PUBLIC")));

    static final SubLList $list_alt307 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("LITERAL-VALUE"), CommonSymbols.ZERO_INTEGER), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt31 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")),
	    list(makeSymbol("PIF"), makeSymbol("APRIORI"),
		    list(makeSymbol("PIF"), makeSymbol("TYPE"), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("[~S:~S ~S]"), makeSymbol("VARIABLE"), makeSymbol("TYPE"), makeSymbol("VALUE")),
			    list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("[~S ~S]"), makeSymbol("VARIABLE"), makeSymbol("VALUE"))),
		    list(makeSymbol("PIF"), makeSymbol("TYPE"), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(~S:~S ~S)"), makeSymbol("VARIABLE"), makeSymbol("TYPE"), makeSymbol("VALUE")),
			    list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(~S ~S)"), makeSymbol("VARIABLE"), makeSymbol("VALUE")))),
	    list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt310 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("~S"), makeSymbol("LITERAL-VALUE")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt312 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("INTEGERP"), makeSymbol("NEW-VALUE")), makeString("(SET-VALUE ~S): ~S is not an integer."), makeSymbol("SELF"), makeSymbol("NEW-VALUE")),
	    list(RET, list(makeSymbol("SET-VALUE"), makeSymbol("SUPER"), makeSymbol("NEW-VALUE"))));

    static final SubLList $list_alt317 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("LITERAL-VALUE"), makeDouble(0.0)), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt322 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("FLOATP"), makeSymbol("NEW-VALUE")), makeString("(SET-VALUE ~S): ~S is not a float."), makeSymbol("SELF"), makeSymbol("NEW-VALUE")),
	    list(RET, list(makeSymbol("SET-VALUE"), makeSymbol("SUPER"), makeSymbol("NEW-VALUE"))));

    static final SubLList $list_alt327 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("LITERAL-VALUE"), makeString("")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt330 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(:string ~S)"), makeSymbol("LITERAL-VALUE")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt333 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("STRINGP"), makeSymbol("NEW-VALUE")), makeString("(SET-VALUE ~S): ~S is not an instance of string."), makeSymbol("SELF"), makeSymbol("NEW-VALUE")),
	    list(RET, list(makeSymbol("SET-VALUE"), makeSymbol("SUPER"), makeSymbol("NEW-VALUE"))));

    static final SubLList $list_alt341 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("SYMBOLP"), makeSymbol("NEW-VALUE")), makeString("(SET-VALUE ~S): ~S is not a symbol."), makeSymbol("SELF"), makeSymbol("NEW-VALUE")),
	    list(makeSymbol("CSETQ"), makeSymbol("LITERAL-VALUE"), makeSymbol("NEW-VALUE")), list(RET, makeSymbol("NEW-VALUE")));

    static final SubLList $list_alt350 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("FORT-P"), makeSymbol("NEW-VALUE")), makeString("(SET-VALUE ~S): ~S is not a FORT"), makeSymbol("SELF"), makeSymbol("NEW-VALUE")),
	    list(makeSymbol("CSETQ"), makeSymbol("LITERAL-VALUE"), makeSymbol("NEW-VALUE")), list(RET, makeSymbol("NEW-VALUE")));

    static final SubLList $list_alt354 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-VALUE"), list(makeSymbol("NEW-VALUE")), makeKeyword("PUBLIC")));

    static final SubLList $list_alt357 = list(list(makeSymbol("IGNORE"), makeSymbol("NEW-VALUE")), list(makeSymbol("ERROR"), makeString("(SET-VALUE ~S): Cannot set the value of constant symbol ~S"), makeSymbol("SELF"), makeSymbol("SELF")), list(RET, makeSymbol("LITERAL-VALUE")));

    static final SubLList $list_alt362 = list(makeSymbol("CYBLACK-LOGICAL-EXPRESSION"));

    static final SubLList $list_alt363 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VALUE"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), CommonSymbols.NIL)), makeKeyword("PUBLIC")));

    static final SubLList $list_alt366 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("LITERAL-VALUE"), CommonSymbols.T), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt369 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(":TRUE")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt372 = list(list(makeSymbol("IGNORE"), makeSymbol("ENVIRONMENT")), list(RET, CommonSymbols.T));

    static final SubLList $list_alt379 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(":FALSE")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt382 = list(list(IGNORE, makeSymbol("ENVIRONMENT")), list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt384 = list($SEND);

    static final SubLList $list_alt389 = list(makeKeyword("ALL-POSTINGS"), makeKeyword("ALL-DIRECT-POSTINGS"), makeKeyword("NEW-POSTING"), makeKeyword("NEW-DIRECT-POSTING"), makeKeyword("ADDED-OR-INACTIVATED-POSTING"), makeKeyword("ADDED-OR-INACTIVATED-DIRECT-POSTING"));

    static final SubLList $list_alt39 = list(
	    list(makeSymbol("CLET"), list(list(makeSymbol("NEW-BINDING"), list(makeSymbol("CLONE"), makeSymbol("SUPER")))), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-VARIABLE"), makeSymbol("CYBLACK-BINDING")), makeSymbol("NEW-BINDING"), makeSymbol("VARIABLE")),
		    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-TYPE"), makeSymbol("CYBLACK-BINDING")), makeSymbol("NEW-BINDING"), makeSymbol("TYPE")),
		    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-VALUE"), makeSymbol("CYBLACK-BINDING")), makeSymbol("NEW-BINDING"), makeSymbol("VALUE")), list(RET, makeSymbol("NEW-BINDING"))));

    static final SubLList $list_alt395 = list(new SubLObject[] { list(makeSymbol("ENVIRONMENT"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("MONITOR-ARGS"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("ACTION"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("ACTION-QUALIFIERS"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("LOCAL-BINDINGS"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("LOGICAL-FORM"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("CLONE"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("TRAVERSE-FILLING-DATATYPE-BAG"), list(makeSymbol("BAG")), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ENVIRONMENT"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ENVIRONMENT"), list(makeSymbol("NEW-ENVIRONMENT")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-MONITOR-ARGS"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-MONITOR-ARGS"), list(makeSymbol("NEW-MONITOR-ARGS")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ACTION"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ACTION"), list(makeSymbol("NEW-ACTION")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ACTION-QUALIFIERS"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ACTION-QUALIFIERS"), list(makeSymbol("NEW-ACTION-QUALIFIERS")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-LOCAL-BINDINGS"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-LOCAL-BINDINGS"), list(makeSymbol("NEW-LOCAL-BINDINGS")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-LOGICAL-FORM"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-LOGICAL-FORM"), list(makeSymbol("NEW-LOGICAL-FORM")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-UNIQUE-BINDINGS"), CommonSymbols.NIL, makeKeyword("PUBLIC")) });

    static final SubLList $list_alt403 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("ENVIRONMENT"), CommonSymbols.NIL), list(makeSymbol("CSETQ"), makeSymbol("MONITOR-ARGS"), CommonSymbols.NIL),
	    list(makeSymbol("CSETQ"), makeSymbol("ACTION"), CommonSymbols.NIL), list(makeSymbol("CSETQ"), makeSymbol("ACTION-QUALIFIERS"), CommonSymbols.NIL), list(makeSymbol("CSETQ"), makeSymbol("LOCAL-BINDINGS"), CommonSymbols.NIL),
	    list(makeSymbol("CSETQ"), makeSymbol("LOGICAL-FORM"), CommonSymbols.NIL), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt406 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")),
	    list(makeSymbol("PIF"), list(makeSymbol("CAND"), makeSymbol("MONITOR-ARGS"), makeSymbol("LOCAL-BINDINGS")),
		    list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("#<MONITOR-PATTERN: (:MONITOR ~S ~S ~S :BINDINGS ~S :WHERE ~S)>"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("LISTIFY-LOCAL-BINDINGS"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("MONITOR-ARGS")),
			    makeSymbol("ACTION"), makeSymbol("ACTION-QUALIFIERS"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("LISTIFY-LOCAL-BINDINGS"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("LOCAL-BINDINGS")), makeSymbol("LOGICAL-FORM")),
		    list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("#<CYBLACK-MONITORING-PATTERN: UNINITIALIZED>"))),
	    list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt410 = list(list(makeSymbol("CLET"),
	    list(list(makeSymbol("NEW-MONITORING-PATTERN"), list(makeSymbol("CLONE"), makeSymbol("SUPER"))),
		    list(makeSymbol("NEW-LOCAL-BINDINGS"), list(makeSymbol("FIF"), makeSymbol("LOCAL-BINDINGS"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("CLONE"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("LOCAL-BINDINGS")), CommonSymbols.NIL))),
	    list(makeSymbol("PIF"), makeSymbol("NEW-LOCAL-BINDINGS"),
		    list(makeSymbol("PROGN"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-LOCAL-BINDINGS"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("NEW-MONITORING-PATTERN"), makeSymbol("NEW-LOCAL-BINDINGS")),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-MONITOR-ARGS"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("NEW-MONITORING-PATTERN"),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-OUTER-SCOPE"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("NEW-LOCAL-BINDINGS")))),
		    list(makeSymbol("PROGN"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-LOCAL-BINDINGS"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("NEW-MONITORING-PATTERN"), CommonSymbols.NIL),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-MONITORING-ARGS"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("NEW-MONITORING-PATTERN"), CommonSymbols.NIL))),
	    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ACTION"), makeSymbol("CYBLACK-MONITORING-PATTERN")), makeSymbol("NEW-MONITORING-PATTERN"), makeSymbol("ACTION")),
	    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ACTION-QUALIFIERS"), makeSymbol("CYBLACK-MONITORING-PATTERN")), makeSymbol("NEW-MONITORING-PATTERN"), list(makeSymbol("COPY-TREE"), makeSymbol("ACTION-QUALIFIERS"))),
	    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-LOGICAL-FORM"), makeSymbol("CYBLACK-MONITORING-PATTERN")), makeSymbol("NEW-MONITORING-PATTERN"), list(makeSymbol("COPY-TREE"), makeSymbol("LOGICAL-FORM"))), list(RET, makeSymbol("NEW-MONITORING-PATTERN"))));

    static final SubLList $list_alt415 = list(makeKeyword("NO-MEMBER-VARIABLES"), makeKeyword("PROTECTED"));

    static final SubLList $list_alt416 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("BASIC-BAG-P"), makeSymbol("BAG")), makeString("(TRAVERSE-FILLING-DATATYPE-BAG ~S): ~S is not an instance of BASIC-BAG."), makeSymbol("SELF"), makeSymbol("BAG")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("UNIQUE-BINDINGS"), list(makeSymbol("GET-UNIQUE-BINDINGS"), makeSymbol("SELF"))), list(makeSymbol("DATATYPES"), CommonSymbols.NIL)),
		    list(makeSymbol("CYBLACK-TRACING-FORMAT"), makeString("~%(TRAVERSE-FILLING-DATATYPE-BAG ~S): Unique bindings -> ~S"), makeSymbol("UNIQUE-BINDINGS")),
		    list(makeSymbol("CDOLIST-APPENDING"), list(makeSymbol("BINDING"), makeSymbol("UNIQUE-BINDINGS"), makeSymbol("DATATYPES")),
			    list(makeSymbol("FIF"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-TYPE"), makeSymbol("CYBLACK-BINDING")), makeSymbol("BINDING")),
				    list(makeSymbol("LIST"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-TYPE"), makeSymbol("CYBLACK-BINDING")), makeSymbol("BINDING"))), CommonSymbols.NIL)),
		    list(makeSymbol("PWHEN"), makeSymbol("DATATYPES"), list(makeSymbol("CDOLIST"), list(makeSymbol("DATATYPE"), makeSymbol("DATATYPES")), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("ADD"), makeSymbol("BASIC-BAG")), makeSymbol("BAG"), makeSymbol("DATATYPE")))),
		    list(RET, makeSymbol("BAG"))));

    static final SubLList $list_alt420 = list(list(RET, makeSymbol("ENVIRONMENT")));

    static final SubLList $list_alt423 = list(makeSymbol("NEW-ENVIRONMENT"));

    static final SubLList $list_alt424 = list(
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-ENVIRONMENT")), list(makeSymbol("CYBLACK-ENVIRONMENT-P"), makeSymbol("NEW-ENVIRONMENT"))), makeString("(SET-ENVIRONMENT ~S): ~S is not an instance of CYBLACK-ENVIRONMENT."),
		    makeSymbol("SELF"), makeSymbol("NEW-ENVIRONMENT")),
	    list(makeSymbol("CSETQ"), makeSymbol("ENVIRONMENT"), makeSymbol("NEW-ENVIRONMENT")),
	    list(makeSymbol("PWHEN"), makeSymbol("MONITOR-ARGS"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-OUTER-SCOPE"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("MONITOR-ARGS"), makeSymbol("ENVIRONMENT")), list(RET, makeSymbol("NEW-ENVIRONMENT"))),
	    list(makeSymbol("PWHEN"), makeSymbol("LOCAL-BINDINGS"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-OUTER-SCOPE"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("LOCAL-BINDINGS"), makeSymbol("ENVIRONMENT"))), list(RET, makeSymbol("NEW-ENVIRONMENT")));

    static final SubLList $list_alt428 = list(list(RET, makeSymbol("MONITOR-ARGS")));

    static final SubLList $list_alt43 = list(list(RET, list(makeSymbol("CYBLACK-UNBOUND-VALUE-P"), makeSymbol("VALUE"))));

    static final SubLList $list_alt430 = list(makeSymbol("NEW-MONITOR-ARGS"));

    static final SubLList $list_alt431 = list(
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-MONITOR-ARGS")), list(makeSymbol("CYBLACK-ENVIRONMENT-P"), makeSymbol("NEW-MONITOR-ARGS"))), makeString("(SET-MONITOR-ARGS ~S): ~S is not an instance of CYBLACK-ENVIRONMENT."),
		    makeSymbol("SELF"), makeSymbol("NEW-MONITOR-ARGS")),
	    list(makeSymbol("CSETQ"), makeSymbol("MONITOR-ARGS"), makeSymbol("NEW-MONITOR-ARGS")),
	    list(makeSymbol("PWHEN"), makeSymbol("ENVIRONMENT"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-OUTER-SCOPE"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("MONITOR-ARGS"), makeSymbol("ENVIRONMENT"))), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt435 = list(list(RET, makeSymbol("ACTION")));

    static final SubLList $list_alt438 = list(makeSymbol("NEW-ACTION"));

    static final SubLList $list_alt439 = list(
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-MONITORING-PATTERN-ACTION-TYPE-P"), makeSymbol("NEW-ACTION")), makeString("(SET-ACTION ~S): ~S is not a member of the	CYBLACK-MONITORING-PATTERN-ACTION-TYPE ENUMERATION."), makeSymbol("SELF"), makeSymbol("NEW-ACTION")),
	    list(makeSymbol("CSETQ"), makeSymbol("ACTION"), makeSymbol("NEW-ACTION")), list(RET, makeSymbol("NEW-ACTION")));

    static final SubLList $list_alt443 = list(list(RET, makeSymbol("ACTION-QUALIFIERS")));

    static final SubLList $list_alt446 = list(makeSymbol("NEW-ACTION-QUALIFIERS"));

    static final SubLList $list_alt447 = list(
	    list(makeSymbol("CYBLACK-MUST"),
		    list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-ACTION-QUALIFIERS")), list(makeSymbol("CYBLACK-MONITORING-PATTERN-ACTION-QUALIFIER-TYPE-P"), makeSymbol("NEW-ACTION-QUALIFIERS")), list(makeSymbol("CONSP"), makeSymbol("NEW-ACTION-QUALIFIERS"))),
		    makeString("(SET-ACTION-QUALIFIERS ~S): ~S is not a legal list of action qualifiers."), makeSymbol("SELF"), makeSymbol("NEW-ACTION-QUALIFIERS")),
	    list(makeSymbol("WHEN-CYBLACK-TYPE-CHECKING-ON"),
		    list(makeSymbol("CDOLIST"), list(makeSymbol("QUALIFIER"), makeSymbol("NEW-ACTION-QUALIFIERS")),
			    list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-MONITORING-PATTERN-ACTION-QUALIFIER-TYPE-P"), makeSymbol("QUALIFIER")), makeString("(SET-ACTION-QUALIFIERS ~S): ~S is not a legal action qualifier."), makeSymbol("SELF"), makeSymbol("QUALIFIER")))),
	    list(makeSymbol("CSETQ"), makeSymbol("ACTION-QUALIFIERS"), list(makeSymbol("COPY-TREE"), makeSymbol("NEW-ACTION-QUALIFIERS"))), list(RET, makeSymbol("NEW-ACTION-QUALIFIERS")));

    static final SubLList $list_alt451 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-ENVIRONMENT-P"), makeSymbol("NEW-LOCAL-BINDINGS")), makeString("(SET-LOCAL-BINDINGS ~S): ~S is not an instance of CYBLACK-ENVIRONMENT."), makeSymbol("SELF"), makeSymbol("NEW-LOCAL-BINDINGS")),
	    list(makeSymbol("CSETQ"), makeSymbol("LOCAL-BINDINGS"), makeSymbol("NEW-LOCAL-BINDINGS")), list(RET, makeSymbol("NEW-LOCAL-BINDINGS")));

    static final SubLList $list_alt455 = list(list(RET, makeSymbol("LOGICAL-FORM")));

    static final SubLList $list_alt458 = list(makeSymbol("NEW-LOGICAL-FORM"));

    static final SubLList $list_alt459 = list(list(makeSymbol("CSETQ"), makeSymbol("LOGICAL-FORM"), makeSymbol("NEW-LOGICAL-FORM")));

    static final SubLList $list_alt462 = list(
	    list(makeSymbol("PIF"), makeSymbol("LOCAL-BINDINGS"), list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-UNIQUE-BINDINGS"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("LOCAL-BINDINGS"))), list(RET, CommonSymbols.NIL)));

    static final SubLList $list_alt465 = list(new SubLObject[] { list(makeSymbol("ENVIRONMENT"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("KS-ARGS"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("LOCAL-BINDINGS"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("LOGICAL-FORM"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("CLONE"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("TRAVERSE-FILLING-DATATYPE-BAG"), list(makeSymbol("BAG")), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ENVIRONMENT"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ENVIRONMENT"), list(makeSymbol("NEW-ENVIRONMENT")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-KS-ARGS"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-KS-ARGS"), list(makeSymbol("NEW-KS-ARGS")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-LOCAL-BINDINGS"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-LOCAL-BINDINGS"), list(makeSymbol("NEW-LOCAL-BINDINGS")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-LOGICAL-FORM"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-LOGICAL-FORM"), list(makeSymbol("NEW-LOGICAL-FORM")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-UNIQUE-BINDINGS"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VALUE"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("OUTER-ENVIRONMENT"), CommonSymbols.NIL)), makeKeyword("PUBLIC")) });

    static final SubLList $list_alt469 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("KS-ARGS"), CommonSymbols.NIL), list(makeSymbol("CSETQ"), makeSymbol("LOCAL-BINDINGS"), CommonSymbols.NIL),
	    list(makeSymbol("CSETQ"), makeSymbol("LOGICAL-FORM"), CommonSymbols.NIL), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt47 = list(list(RET, makeSymbol("VALUE")));

    static final SubLList $list_alt472 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")),
	    list(makeSymbol("PIF"), list(makeSymbol("CAND"), makeSymbol("KS-ARGS"), makeSymbol("LOCAL-BINDINGS")),
		    list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("#<PRECON:(:KS-ARGS ~S :BINDING-LIST ~S :WHERE ~S)>"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("LISTIFY-LOCAL-BINDINGS"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("KS-ARGS")),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("LISTIFY-LOCAL-BINDINGS"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("LOCAL-BINDINGS")), makeSymbol("LOGICAL-FORM")),
		    list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("#<PRECON:(UNINITIALIZED)>"))),
	    list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt476 = list(list(makeSymbol("CLET"),
	    list(list(makeSymbol("NEW-PRECON-PATTERN"), list(makeSymbol("CLONE"), makeSymbol("SUPER"))),
		    list(makeSymbol("NEW-LOCAL-BINDINGS"), list(makeSymbol("FIF"), makeSymbol("LOCAL-BINDINGS"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("CLONE"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("LOCAL-BINDINGS")), CommonSymbols.NIL))),
	    list(makeSymbol("PIF"), makeSymbol("NEW-LOCAL-BINDINGS"),
		    list(makeSymbol("PROGN"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-LOCAL-BINDINGS"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("NEW-PRECON-PATTERN"), makeSymbol("NEW-LOCAL-BINDINGS")),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-KS-ARGS"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("NEW-PRECON-PATTERN"),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-OUTER-SCOPE"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("NEW-LOCAL-BINDINGS")))),
		    list(makeSymbol("PROGN"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-LOCAL-BINDINGS"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("NEW-PRECON-PATTERN"), CommonSymbols.NIL),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-KS-ARGS"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("NEW-PRECON-PATTERN"), CommonSymbols.NIL))),
	    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-LOGICAL-FORM"), makeSymbol("CYBLACK-PRECON-PATTERN")), makeSymbol("NEW-PRECON-PATTERN"), list(makeSymbol("COPY-TREE"), makeSymbol("LOGICAL-FORM"))), list(RET, makeSymbol("NEW-PRECON-PATTERN"))));

    static final SubLList $list_alt482 = list(
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-ENVIRONMENT")), list(makeSymbol("CYBLACK-ENVIRONMENT-P"), makeSymbol("NEW-ENVIRONMENT"))), makeString("(SET-ENVIRONMENT ~S): ~S is not an instance of CYBLACK-ENVIRONMENT."),
		    makeSymbol("SELF"), makeSymbol("NEW-ENVIRONMENT")),
	    list(makeSymbol("CSETQ"), makeSymbol("ENVIRONMENT"), makeSymbol("NEW-ENVIRONMENT")),
	    list(makeSymbol("PWHEN"), makeSymbol("KS-ARGS"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-OUTER-SCOPE"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("KS-ARGS"), makeSymbol("ENVIRONMENT")), list(RET, makeSymbol("NEW-ENVIRONMENT"))),
	    list(makeSymbol("PWHEN"), makeSymbol("LOCAL-BINDINGS"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-OUTER-SCOPE"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("LOCAL-BINDINGS"), makeSymbol("ENVIRONMENT"))), list(RET, makeSymbol("NEW-ENVIRONMENT")));

    static final SubLList $list_alt486 = list(list(RET, makeSymbol("KS-ARGS")));

    static final SubLList $list_alt488 = list(makeSymbol("NEW-KS-ARGS"));

    static final SubLList $list_alt489 = list(
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-KS-ARGS")), list(makeSymbol("CYBLACK-ENVIRONMENT-P"), makeSymbol("NEW-KS-ARGS"))), makeString("(SET-KS-ARGS ~S): ~S is not an instance of CYBLACK-ENVIRONMENT."), makeSymbol("SELF"),
		    makeSymbol("NEW-KS-ARGS")),
	    list(makeSymbol("CSETQ"), makeSymbol("KS-ARGS"), makeSymbol("NEW-KS-ARGS")), list(makeSymbol("PWHEN"), makeSymbol("ENVIRONMENT"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-OUTER-SCOPE"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("KS-ARGS"), makeSymbol("ENVIRONMENT"))),
	    list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt493 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-LOCAL-BINDINGS")), list(makeSymbol("CYBLACK-ENVIRONMENT-P"), makeSymbol("NEW-LOCAL-BINDINGS"))),
	    makeString("(SET-LOCAL-BINDINGS ~S): ~S is not an instance of CYBLACK-ENVIRONMENT."), makeSymbol("SELF"), makeSymbol("NEW-LOCAL-BINDINGS")), list(makeSymbol("CSETQ"), makeSymbol("LOCAL-BINDINGS"), makeSymbol("NEW-LOCAL-BINDINGS")),
	    list(RET, makeSymbol("NEW-LOCAL-BINDINGS")));

    static final SubLList $list_alt497 = list(list(makeSymbol("CSETQ"), makeSymbol("LOGICAL-FORM"), makeSymbol("NEW-LOGICAL-FORM")), list(RET, makeSymbol("NEW-LOGICAL-FORM")));

    static final SubLList $list_alt501 = list(makeSymbol("&OPTIONAL"), list(makeSymbol("OUTER-ENVIRONMENT"), CommonSymbols.NIL));

    static final SubLList $list_alt502 = list(list(makeSymbol("CLET"), list(list(makeSymbol("RESULT"), CommonSymbols.NIL)),
	    list(makeSymbol("PIF"), makeSymbol("OUTER-ENVIRONMENT"),
		    list(makeSymbol("PWHEN"), makeSymbol("LOGICAL-FORM"), list(makeSymbol("CSETQ"), makeSymbol("RESULT"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("LOGICAL-FORM"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("OUTER-ENVIRONMENT")))),
		    list(makeSymbol("PWHEN"), makeSymbol("LOGICAL-FORM"), list(makeSymbol("CSETQ"), makeSymbol("RESULT"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("LOGICAL-FORM"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("LOCAL-BINDINGS"))))),
	    list(RET, makeSymbol("RESULT"))));

    static final SubLList $list_alt505 = list(new SubLObject[] { list(makeSymbol("ENVIRONMENT"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("LOCAL-BINDINGS"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("LOGICAL-EXPRESSION"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("TRAVERSE-FILLING-DATATYPE-BAG"), list(makeSymbol("BAG")), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VALUE"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("PASSED-ENVIRONMENT"), CommonSymbols.NIL)), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ENVIRONMENT"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ENVIRONMENT"), list(makeSymbol("NEW-ENVIRONMENT")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-LOCAL-BINDINGS"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-LOCAL-BINDINGS"), list(makeSymbol("NEW-LOCAL-BINDINGS")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-LOGICAL-EXPRESSION"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-LOGICAL-EXPRESSION"), list(makeSymbol("NEW-LOGICAL-EXPRESSION")), makeKeyword("PUBLIC")) });

    static final SubLList $list_alt509 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("ENVIRONMENT"), CommonSymbols.NIL), list(makeSymbol("CSETQ"), makeSymbol("LOCAL-BINDINGS"), CommonSymbols.NIL),
	    list(makeSymbol("CSETQ"), makeSymbol("LOGICAL-EXPRESSION"), CommonSymbols.NIL), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt51 = list(makeSymbol("NEW-VALUE"));

    static final SubLList $list_alt512 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")),
	    list(makeSymbol("PIF"), makeSymbol("LOCAL-BINDINGS"), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("#<SATISFACTION-EXPRESSION (:SATISFY ~S ~S)>"),
		    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("LISTIFY-LOCAL-BINDINGS"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("LOCAL-BINDINGS")), makeSymbol("LOGICAL-EXPRESSION")),
		    list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("#<SATISFACTION-EXRESSION: UNINITIALIZED>"))),
	    list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt516 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("BASIC-BAG-P"), makeSymbol("BAG")), makeString("(TRAVERSE-FILLING-DATATYPE-BAG ~S): ~S is not an instance of BASIC-BAG."), makeSymbol("SELF"), makeSymbol("BAG")), list(makeSymbol("CLET"),
	    list(list(makeSymbol("UNIQUE-BINDINGS"),
		    list(makeSymbol("FIF"), list(makeSymbol("GET-LOCAL-BINDINGS"), makeSymbol("SELF")), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-UNIQUE-BINDINGS"), makeSymbol("CYBLACK-ENVIRONMENT")), list(makeSymbol("GET-LOCAL-BINDINGS"), makeSymbol("SELF"))), CommonSymbols.NIL)),
		    list(makeSymbol("DATATYPES"), CommonSymbols.NIL)),
	    list(makeSymbol("CDOLIST-APPENDING"), list(makeSymbol("BINDING"), makeSymbol("UNIQUE-BINDINGS"), makeSymbol("DATATYPES")),
		    list(makeSymbol("FIF"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-TYPE"), makeSymbol("CYBLACK-BINDING")), makeSymbol("BINDING")),
			    list(makeSymbol("LIST"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-TYPE"), makeSymbol("CYBLACK-BINDING")), makeSymbol("BINDING"))), CommonSymbols.NIL)),
	    list(makeSymbol("PWHEN"), makeSymbol("DATATYPES"), list(makeSymbol("CDOLIST"), list(makeSymbol("DATATYPE"), makeSymbol("DATATYPES")), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("ADD"), makeSymbol("BASIC-BAG")), makeSymbol("BAG"), makeSymbol("DATATYPE")))),
	    list(RET, makeSymbol("BAG"))));

    static final SubLList $list_alt518 = list(makeSymbol("&OPTIONAL"), list(makeSymbol("PASSED-ENVIRONMENT"), CommonSymbols.NIL));

    static final SubLList $list_alt519 = list(list(makeSymbol("CLET"), list(list(makeSymbol("RESULT"), CommonSymbols.NIL)),
	    list(makeSymbol("PIF"), makeSymbol("PASSED-ENVIRONMENT"),
		    list(makeSymbol("PWHEN"), makeSymbol("LOGICAL-EXPRESSION"), list(makeSymbol("CSETQ"), makeSymbol("RESULT"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("LOGICAL-EXPRESSION"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("PASSED-ENVIRONMENT")))),
		    list(makeSymbol("PWHEN"), makeSymbol("LOGICAL-EXPRESSION"), list(makeSymbol("CSETQ"), makeSymbol("RESULT"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("LOGICAL-EXPRESSION"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("LOCAL-BINDINGS"))))),
	    list(RET, makeSymbol("RESULT"))));

    static final SubLList $list_alt52 = list(
	    list(makeSymbol("PWHEN"), makeSymbol("TYPE"),
		    list(makeSymbol("CLET"), list(list(makeSymbol("POSTING-TYPE"), list(makeSymbol("CYBLACK-DATATYPE-GET-POSTING-TYPE"), makeSymbol("TYPE")))),
			    list(makeSymbol("PWHEN"), makeSymbol("POSTING-TYPE"),
				    list(makeSymbol("CYBLACK-MUST"),
					    list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-VALUE")), list(makeSymbol("CYBLACK-UNBOUND-VALUE-P"), makeSymbol("NEW-VALUE")), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("NEW-VALUE"), makeSymbol("POSTING-TYPE"))),
					    makeString("(SET-VALUE ~S): Value ~S is not an instance of ~S."), makeSymbol("SELF"), makeSymbol("NEW-VALUE"), makeSymbol("TYPE"))))),
	    list(makeSymbol("CSETQ"), makeSymbol("VALUE"), makeSymbol("NEW-VALUE")), list(RET, makeSymbol("NEW-VALUE")));

    static final SubLList $list_alt522 = list(
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-ENVIRONMENT")), list(makeSymbol("CYBLACK-ENVIRONMENT-P"), makeSymbol("NEW-ENVIRONMENT"))), makeString("(SET-ENVIRONMENT ~S): ~S is not an instance of CYBLACK-ENVIRONMENT."),
		    makeSymbol("SELF"), makeSymbol("NEW-ENVIRONMENT")),
	    list(makeSymbol("CSETQ"), makeSymbol("ENVIRONMENT"), makeSymbol("NEW-ENVIRONMENT")),
	    list(makeSymbol("PWHEN"), makeSymbol("LOCAL-BINDINGS"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-OUTER-SCOPE"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("LOCAL-BINDINGS"), makeSymbol("ENVIRONMENT"))), list(RET, makeSymbol("NEW-ENVIRONMENT")));

    static final SubLList $list_alt529 = list(list(RET, makeSymbol("LOGICAL-EXPRESSION")));

    static final SubLList $list_alt532 = list(makeSymbol("NEW-LOGICAL-EXPRESSION"));

    static final SubLList $list_alt533 = list(list(makeSymbol("CSETQ"), makeSymbol("LOGICAL-EXPRESSION"), makeSymbol("NEW-LOGICAL-EXPRESSION")), list(RET, makeSymbol("NEW-LOGICAL-EXPRESSION")));

    static final SubLList $list_alt537 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")));

    static final SubLList $list_alt540 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("#<SIMPLE-SATISFACTION-EXPRESSION (:SATISFY-SIMPLE ~S)>"), makeSymbol("LOGICAL-EXPRESSION")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt544 = list(makeSymbol("CYBLACK-DATATYPE"), makeSymbol("CYBLACK-VALUE-EXPRESSION"));

    static final SubLList $list_alt545 = list(new SubLObject[] { list(makeSymbol("BASE-TYPE"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-BASE-TYPE"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-BASE-TYPE"), list(makeSymbol("NEW-BASE-TYPE")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-PANEL"), list(makeSymbol("BLACKBOARD"), makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), CommonSymbols.NIL)), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-TYPENAME"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-SUPERTYPES"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-SUPERTYPES"), list(makeSymbol("NEW-SUPERTYPES")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-SUBTYPES"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-SUBTYPES"), list(makeSymbol("NEW-SUBTYPES")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SUBTYPE-P"), list(makeSymbol("OTHER-DATATYPE")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INSTANCE-OF-P"), list(makeSymbol("POSTING")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-PANEL-TYPE"), list(makeSymbol("NEW-PANEL-TYPE")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-POSTING-TYPE"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-POSTING-TYPE"), list(makeSymbol("NEW-POSTING-TYPE")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("CREATE-PANEL"), list(makeSymbol("BLACKBOARD")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("CREATE-POSTING"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VALUE"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), CommonSymbols.NIL)), makeKeyword("PUBLIC")) });

    static final SubLList $list_alt549 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("BASE-TYPE"), CommonSymbols.NIL), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt552 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(:TYPE ~S)"), makeSymbol("BASE-TYPE")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt556 = list(list(RET, makeSymbol("BASE-TYPE")));

    static final SubLList $list_alt559 = list(makeSymbol("NEW-BASE-TYPE"));

    static final SubLList $list_alt56 = list(list(RET, makeSymbol("TYPE")));

    static final SubLList $list_alt560 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("CYBLACK-DATATYPE-P"), makeSymbol("NEW-BASE-TYPE"))), makeString("(SET-BASE-TYPE ~S): ~S is not an instance of CYBLACK-DATATYPE."), makeSymbol("SELF"), makeSymbol("NEW-BASE-TYPE")),
	    list(makeSymbol("CSETQ"), makeSymbol("BASE-TYPE"), makeSymbol("NEW-BASE-TYPE")), list(RET, makeSymbol("NEW-BASE-TYPE")));

    static final SubLList $list_alt564 = list(makeSymbol("BLACKBOARD"), makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), CommonSymbols.NIL));

    static final SubLList $list_alt565 = list(list(makeSymbol("IGNORE"), makeSymbol("ENVIRONMENT")),
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CAND"), makeSymbol("BLACKBOARD"), list(makeSymbol("CYBLACK-BLACKBOARD-P"), makeSymbol("BLACKBOARD"))), makeString("(GET-PANEL ~S): ~S is not an instance of CYBLACK-BLACKBOARD."), makeSymbol("SELF"), makeSymbol("BLACKBOARD")),
	    list(makeSymbol("PWHEN"), makeSymbol("BASE-TYPE"), list(RET, list(makeSymbol("CYBLACK-DATATYPE-GET-PANEL"), makeSymbol("BASE-TYPE"), makeSymbol("BLACKBOARD")))), list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt568 = list(list(makeSymbol("PWHEN"), makeSymbol("BASE-TYPE"), list(RET, list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("BASE-TYPE"), list(QUOTE, makeSymbol("GET-TYPENAME"))))), list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt571 = list(list(makeSymbol("PWHEN"), makeSymbol("BASE-TYPE"), list(RET, list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("BASE-TYPE"), list(QUOTE, makeSymbol("GET-SUPERTYPES"))))), list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt574 = list(makeSymbol("NEW-SUPERTYPES"));

    static final SubLList $list_alt575 = list(list(RET, makeSymbol("NEW-SUPERTYPES")));

    static final SubLList $list_alt578 = list(list(makeSymbol("PWHEN"), makeSymbol("BASE-TYPE"), list(RET, list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("BASE-TYPE"), list(QUOTE, makeSymbol("GET-SUBTYPES"))))), list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt581 = list(makeSymbol("NEW-SUBTYPES"));

    static final SubLList $list_alt582 = list(list(RET, makeSymbol("NEW-SUBTYPES")));

    static final SubLList $list_alt585 = list(makeSymbol("OTHER-DATATYPE"));

    static final SubLList $list_alt586 = list(list(makeSymbol("PWHEN"), list(CommonSymbols.EQ, makeSymbol("OTHER-DATATYPE"), makeSymbol("SELF")), list(RET, CommonSymbols.T)),
	    list(makeSymbol("PWHEN"), makeSymbol("BASE-TYPE"), list(RET, list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("BASE-TYPE"), list(QUOTE, makeSymbol("SUBTYPE-P")), makeSymbol("OTHER-DATATYPE")))), list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt589 = list(makeSymbol("POSTING"));

    static final SubLList $list_alt590 = list(list(makeSymbol("PWHEN"), list(makeSymbol("CAND"), makeSymbol("BASE-TYPE"), makeSymbol("POSTING"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("BASE-TYPE"), list(QUOTE, makeSymbol("INSTANCE-OF-P")), makeSymbol("POSTING"))),
	    list(RET, CommonSymbols.T)), list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt593 = list(makeSymbol("NEW-PANEL-TYPE"));

    static final SubLList $list_alt594 = list(list(RET, makeSymbol("NEW-PANEL-TYPE")));

    static final SubLList $list_alt597 = list(list(makeSymbol("PWHEN"), makeSymbol("BASE-TYPE"), list(RET, list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("BASE-TYPE"), list(QUOTE, makeSymbol("GET-POSTING-TYPE"))))), list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt60 = list(makeSymbol("NEW-TYPE"));

    static final SubLList $list_alt600 = list(makeSymbol("NEW-POSTING-TYPE"));

    static final SubLList $list_alt601 = list(list(RET, makeSymbol("NEW-POSTING-TYPE")));

    static final SubLList $list_alt604 = list(makeSymbol("BLACKBOARD"));

    static final SubLList $list_alt605 = list(list(makeSymbol("PWHEN"), makeSymbol("BASE-TYPE"), list(RET, list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("BASE-TYPE"), list(QUOTE, makeSymbol("CREATE-PANEL")), makeSymbol("BLACKBOARD")))),
	    list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt608 = list(list(makeSymbol("PWHEN"), makeSymbol("BASE-TYPE"), list(RET, list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("BASE-TYPE"), list(QUOTE, makeSymbol("CREATE-POSTING"))))), list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt61 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-TYPE")), list(makeSymbol("CYBLACK-DATATYPE-P"), makeSymbol("NEW-TYPE"))), makeString("(SET-TYPE ~S): ~S is not an instance of CYBLACK-DATATYPE."),
	    makeSymbol("SELF"), makeSymbol("NEW-TYPE")), list(makeSymbol("CSETQ"), makeSymbol("TYPE"), makeSymbol("NEW-TYPE")), list(RET, makeSymbol("NEW-TYPE")));

    static final SubLList $list_alt610 = list(list(makeSymbol("IGNORE"), makeSymbol("ENVIRONMENT")), list(RET, makeSymbol("BASE-TYPE")));

    static final SubLList $list_alt613 = list(new SubLObject[] { list(makeSymbol("PREDICATOR-METHOD"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("ARGS"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT-ARGS"), list(makeSymbol("STREAM")), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-PREDICATOR-METHOD"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-PREDICATOR-METHOD"), list(makeSymbol("NEW-PREDICATOR")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ARGS"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ARGS"), list(makeSymbol("NEW-ARGS")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-PANEL"), list(makeSymbol("BLACKBOARD"), makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), CommonSymbols.NIL)), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-TYPENAME"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-SUPERTYPES"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-SUBTYPES"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SUBTYPE-P"), list(makeSymbol("OTHER-DATATYPE")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INSTANCE-OF-P"), list(makeSymbol("POSTING")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("CREATE-PANEL"), list(makeSymbol("BLACKBOARD")), makeKeyword("PUBLIC")) });

    static final SubLList $list_alt618 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("PREDICATOR-METHOD"), CommonSymbols.NIL), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt621 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(:SUBTYPE ~S ~S"), makeSymbol("BASE-TYPE"), makeSymbol("PREDICATOR-METHOD")),
	    list(makeSymbol("PRINT-ARGS"), makeSymbol("SELF"), makeSymbol("STREAM")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(")")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt626 = list(makeKeyword("READ-ONLY"), makeKeyword("PROTECTED"));

    static final SubLList $list_alt627 = list(makeSymbol("STREAM"));

    static final SubLList $list_alt628 = list(list(makeSymbol("CDOLIST"), list(makeSymbol("ARG"), makeSymbol("ARGS")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(" ~S"), makeSymbol("ARG"))), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt632 = list(list(RET, makeSymbol("PREDICATOR-METHOD")));

    static final SubLList $list_alt635 = list(makeSymbol("NEW-PREDICATOR"));

    static final SubLList $list_alt636 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("SYMBOLP"), makeSymbol("NEW-PREDICATOR")), makeString("(SET-PREDICATOR-METHOD ~S): Predicators must be symbols.  ~S is not a symbol."), makeSymbol("SELF"), makeSymbol("NEW-PREDICATOR")),
	    list(makeSymbol("CSETQ"), makeSymbol("PREDICATOR-METHOD"), makeSymbol("NEW-PREDICATOR")), list(RET, makeSymbol("NEW-PREDICATOR")));

    static final SubLList $list_alt640 = list(list(RET, makeSymbol("ARGS")));

    static final SubLList $list_alt643 = list(makeSymbol("NEW-ARGS"));

    static final SubLList $list_alt644 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("LISTP"), makeSymbol("NEW-ARGS")), makeString("(SET-ARGS ~S): ~S is not a legal arglist.  A list was expected."), makeSymbol("SELF"), makeSymbol("NEW-ARGS")),
	    list(makeSymbol("CSETQ"), makeSymbol("ARGS"), makeSymbol("NEW-ARGS")), list(RET, makeSymbol("NEW-ARGS")));

    static final SubLList $list_alt647 = list(list(makeSymbol("CLET"), list(list(makeSymbol("BASE-PANEL"), list(makeSymbol("GET-PANEL"), makeSymbol("SUPER"), makeSymbol("BLACKBOARD"))), list(makeSymbol("ARGS-EVALUATED"), CommonSymbols.NIL)),
	    list(makeSymbol("CDOLIST-COLLECTING"), list(makeSymbol("ARG"), makeSymbol("ARGS"), makeSymbol("ARGS-EVALUATED")),
		    list(makeSymbol("FIF"), list(makeSymbol("CYBLACK-VALUE-EXPRESSION-P"), makeSymbol("ARG")), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ARG"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT")), makeSymbol("ARG"))),
	    list(makeSymbol("PWHEN"), list(makeSymbol("CAND"), makeSymbol("BASE-PANEL"), makeSymbol("PREDICATOR-METHOD")),
		    list(makeSymbol("CLET"), list(list(makeSymbol("VIRTUAL-PANEL"), list(makeSymbol("NEW-OBJECT-INSTANCE"), list(QUOTE, makeSymbol("CYBLACK-BASIC-VIRTUAL-PANEL"))))),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARGS"), makeSymbol("CYBLACK-BASIC-VIRTUAL-PANEL")), makeSymbol("VIRTUAL-PANEL"), makeSymbol("ARGS-EVALUATED")),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-SUBSET-PREDICATOR"), makeSymbol("CYBLACK-BASIC-VIRTUAL-PANEL")), makeSymbol("VIRTUAL-PANEL"), list(QUOTE, makeSymbol("PREDICATOR-METHOD"))),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-BASE-PANEL"), makeSymbol("CYBLACK-BASIC-VIRTUAL-PANEL")), makeSymbol("VIRTUAL-PANEL"), makeSymbol("BASE-PANEL")), list(RET, makeSymbol("VIRTUAL-PANEL")))),
	    list(RET, makeSymbol("BASE-PANEL"))));

    static final SubLList $list_alt65 = list(makeSymbol("SOME-TYPE"));

    static final SubLList $list_alt650 = list(list(makeSymbol("CLET"), list(list(makeSymbol("STRING"), CommonSymbols.NIL)),
	    list(makeSymbol("CWITH-OUTPUT-TO-STRING"), list(makeSymbol("STREAM"), makeSymbol("STRING")), list(makeSymbol("PRINT"), makeSymbol("SELF"), makeSymbol("STREAM"), CommonSymbols.ZERO_INTEGER)), list(RET, makeSymbol("STRING"))));

    static final SubLList $list_alt652 = list(list(makeSymbol("PWHEN"), makeSymbol("BASE-TYPE"), list(RET, list(makeSymbol("LIST"), makeSymbol("BASE-TYPE")))), list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt654 = list(list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt656 = list(list(makeSymbol("PWHEN"), list(CommonSymbols.EQ, makeSymbol("SELF"), makeSymbol("OTHER-DATATYPE")), list(RET, CommonSymbols.T)),
	    list(makeSymbol("PWHEN"), makeSymbol("BASE-TYPE"), list(RET, list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("BASE-TYPE"), list(QUOTE, makeSymbol("SUBTYPE-P")), makeSymbol("OTHER-DATATYPE")))), list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt658 = list(list(makeSymbol("PWHEN"), list(makeSymbol("CAND"), makeSymbol("BASE-TYPE"), makeSymbol("POSTING"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("BASE-TYPE"), list(QUOTE, makeSymbol("INSTANCE-OF-P")), makeSymbol("POSTING"))),
	    list(makeSymbol("PIF"), makeSymbol("PREDICATOR-METHOD"), list(RET, list(makeSymbol("FIF"), list(makeSymbol("APPLY-INSTANCE-METHOD"), makeSymbol("POSTING"), makeSymbol("PREDICATOR-METHOD"), makeSymbol("ARGS")), CommonSymbols.T, CommonSymbols.NIL)),
		    list(RET, CommonSymbols.T))),
	    list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt66 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-DATATYPE-P"), makeSymbol("SOME-TYPE")), makeString("(HAS-TYPE-P ~S): ~S is not an instance of CYBLACK-DATATYPE."), makeSymbol("SELF"), makeSymbol("SOME-TYPE")),
	    list(RET, list(makeSymbol("FIF"), makeSymbol("TYPE"), list(makeSymbol("CYBLACK-DATATYPE-SUBTYPE-P"), makeSymbol("TYPE"), makeSymbol("SOME-TYPE")), CommonSymbols.NIL)));

    static final SubLList $list_alt660 = list(list(makeSymbol("IGNORE"), makeSymbol("BLACKBOARD")), list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt663 = list(list(makeSymbol("TYPE-EXPRESSION"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("BLACKBOARD"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-TYPE-EXPRESSION"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-TYPE-EXPRESSION"), list(makeSymbol("NEW-TYPE-EXPRESSION")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-BLACKBOARD"), CommonSymbols.NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VALUE"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), CommonSymbols.NIL)), makeKeyword("PUBLIC")));

    static final SubLList $list_alt668 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("TYPE-EXPRESSION"), CommonSymbols.NIL), list(makeSymbol("CSETQ"), makeSymbol("BLACKBOARD"), CommonSymbols.NIL), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt671 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(:PANEL ~S)"), makeSymbol("TYPE-EXPRESSION")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt676 = list(list(RET, makeSymbol("TYPE-EXPRESSION")));

    static final SubLList $list_alt679 = list(makeSymbol("NEW-TYPE-EXPRESSION"));

    static final SubLList $list_alt680 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-TYPE-EXPRESSION")), list(makeSymbol("CYBLACK-TYPE-EXPRESSION-P"), makeSymbol("NEW-TYPE-EXPRESSION"))),
	    makeString("(SET-TYPE-EXPRESSION ~S): ~S is not a valid type expression."), makeSymbol("SELF"), makeSymbol("NEW-TYPE-EXPRESSION")), list(makeSymbol("CSETQ"), makeSymbol("TYPE-EXPRESSION"), makeSymbol("NEW-TYPE-EXPRESSION")), list(RET, makeSymbol("NEW-TYPE-EXPRESSION")));

    static final SubLList $list_alt684 = list(list(makeSymbol("PWHEN"), makeSymbol("BLACKBOARD"), list(RET, makeSymbol("BLACKBOARD"))), list(makeSymbol("CSETQ"), makeSymbol("BLACKBOARD"), list(makeSymbol("CYBLACK-APPLICATION-GET-BLACKBOARD"), makeSymbol("APPLICATION"))),
	    list(RET, makeSymbol("BLACKBOARD")));

    static final SubLList $list_alt687 = list(list(makeSymbol("IGNORE"), makeSymbol("ENVIRONMENT")), list(makeSymbol("CYBLACK-MUST"), makeSymbol("TYPE-EXPRESSION"), makeString("(GET-VALUE ~S): No type expression is associated with this panel expression."), makeSymbol("SELF")),
	    list(makeSymbol("PWHEN"), makeSymbol("TYPE-EXPRESSION"), list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-PANEL"), makeSymbol("CYBLACK-TYPE-EXPRESSION")), makeSymbol("TYPE-EXPRESSION"), list(makeSymbol("GET-BLACKBOARD"), makeSymbol("SELF"))))),
	    list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt691 = list(new SubLObject[] { list(makeSymbol("PANEL-EXPRESSION"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("KEY-EXPRESSION"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-PANEL-EXPRESSION"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-PANEL-EXPRESSION"), list(makeSymbol("NEW-PANEL-EXPRESSION")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-KEY-EXPRESSION"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-KEY-EXPRESSION"), list(makeSymbol("NEW-KEY-EXPRESSION")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VALUE"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), CommonSymbols.NIL)), makeKeyword("PUBLIC")) });

    static final SubLList $list_alt696 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("PANEL-EXPRESSION"), CommonSymbols.NIL), list(makeSymbol("CSETQ"), makeSymbol("KEY-EXPRESSION"), CommonSymbols.NIL), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt699 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("~%(:GET ~S ~S)"), makeSymbol("PANEL-EXPRESSION"), makeSymbol("KEY-EXPRESSION")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt70 = list(list(RET, makeSymbol("VARIABLE")));

    static final SubLList $list_alt704 = list(list(RET, makeSymbol("PANEL-EXPRESSION")));

    static final SubLList $list_alt707 = list(makeSymbol("NEW-PANEL-EXPRESSION"));

    static final SubLList $list_alt708 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-PANEL-EXPRESSION")), list(makeSymbol("CYBLACK-PANEL-EXPRESSION-P"), makeSymbol("NEW-PANEL-EXPRESSION"))),
	    makeString("(SET-PANEL-EXPRESSION ~S): ~S is not a valid panel expression."), makeSymbol("SELF"), makeSymbol("NEW-PANEL-EXPRESSION")), list(makeSymbol("CSETQ"), makeSymbol("PANEL-EXPRESSION"), makeSymbol("NEW-PANEL-EXPRESSION")),
	    list(RET, makeSymbol("NEW-PANEL-EXPRESSION")));

    static final SubLList $list_alt712 = list(list(RET, makeSymbol("KEY-EXPRESSION")));

    static final SubLList $list_alt715 = list(makeSymbol("NEW-KEY-EXPRESSION"));

    static final SubLList $list_alt716 = list(
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-KEY-EXPRESSION")), list(makeSymbol("CYBLACK-VALUE-EXPRESSION-P"), makeSymbol("NEW-KEY-EXPRESSION"))),
		    makeString("(SET-KEY-EXPRESSION ~S): ~S is not a valid key expression.  A value expression was expected."), makeSymbol("SELF"), makeSymbol("NEW-KEY-EXPRESSION")),
	    list(makeSymbol("CSETQ"), makeSymbol("KEY-EXPRESSION"), makeSymbol("NEW-KEY-EXPRESSION")), list(RET, makeSymbol("NEW-KEY-EXPRESSION")));

    static final SubLList $list_alt719 = list(
	    list(makeSymbol("PWHEN"), list(makeSymbol("CAND"), makeSymbol("PANEL-EXPRESSION"), makeSymbol("KEY-EXPRESSION")),
		    list(makeSymbol("CLET"),
			    list(list(makeSymbol("PANEL"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-VALUE"), makeSymbol("CYBLACK-PANEL-EXPRESSION")), makeSymbol("PANEL-EXPRESSION"), makeSymbol("ENVIRONMENT"))),
				    list(makeSymbol("KEY"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("KEY-EXPRESSION"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT")))),
			    list(makeSymbol("PWHEN"), list(makeSymbol("CAND"), makeSymbol("PANEL"), makeSymbol("KEY")), list(RET, list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("PANEL"), list(QUOTE, makeSymbol("GET")), makeSymbol("KEY")))))),
	    list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt723 = list(makeSymbol("CYBLACK-VALUE-EXPRESSION"), makeSymbol("CYBLACK-LOGICAL-EXPRESSION"));

    static final SubLList $list_alt729 = list(new SubLObject[] { list(makeSymbol("ENVIRONMENT"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("LOGICAL-EXPRESSION"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("BINDING"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("LAST-EVALUATION-RESULT"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("ACCUMULATED-STATE"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-INITIAL-STATE"), list(makeSymbol("NEW-APPLICATION"), makeSymbol("&OPTIONAL"), list(makeSymbol("NEW-STATE"))), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE-ACCUMULATED-STATE"), CommonSymbols.NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("VISIT"), list(makeSymbol("CYBLACK-POSTING")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("EVALUATE-VISIT"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-FINAL-STATE"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-LOGICAL-EXPRESSION"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-LOGICAL-EXPRESSION"), list(makeSymbol("NEW-LOGICAL-EXPRESSION")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-BINDING"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-BINDING"), list(makeSymbol("NEW-BINDING")), makeKeyword("PUBLIC")) });

    static final SubLList $list_alt736 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("LAST-EVALUATION-RESULT"), CommonSymbols.NIL), list(makeSymbol("CSETQ"), makeSymbol("ACCUMULATED-STATE"), CommonSymbols.NIL),
	    list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt74 = list(makeSymbol("NEW-VARIABLE"));

    static final SubLList $list_alt740 = list(makeSymbol("NEW-APPLICATION"), makeSymbol("&OPTIONAL"), list(makeSymbol("NEW-STATE")));

    static final SubLList $list_alt741 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-ENVIRONMENT-P"), makeSymbol("NEW-STATE")), makeString("(SET-INITIAL-STATE ~S): ~S is not an instance of CYBLACK-ENVIRONMENT."), makeSymbol("SELF"), makeSymbol("NEW-STATE")),
	    list(makeSymbol("SET-APPLICATION"), makeSymbol("SELF"), makeSymbol("NEW-APPLICATION")), list(makeSymbol("CSETQ"), makeSymbol("ENVIRONMENT"), makeSymbol("NEW-STATE")),
	    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("INITIALIZE-ACCUMULATED-STATE"))), list(RET, makeSymbol("NEW-STATE")));

    static final SubLList $list_alt745 = list(list(makeSymbol("CSETQ"), makeSymbol("ACCUMULATED-STATE"), CommonSymbols.T), list(RET, CommonSymbols.T));

    static final SubLList $list_alt749 = list(makeSymbol("CYBLACK-POSTING"));

    static final SubLList $list_alt75 = list(list(makeSymbol("CSETQ"), makeSymbol("VARIABLE"), makeSymbol("NEW-VARIABLE")), list(RET, makeSymbol("NEW-VARIABLE")));

    static final SubLList $list_alt750 = list(list(makeSymbol("IGNORE"), makeSymbol("LAST-EVALUATION-RESULT")),
	    list(makeSymbol("PWHEN"), list(makeSymbol("CAND"), makeSymbol("ENVIRONMENT"), makeSymbol("BINDING"), makeSymbol("LOGICAL-EXPRESSION")), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-VALUE"), makeSymbol("CYBLACK-BINDING")), makeSymbol("BINDING"), makeSymbol("CYBLACK-POSTING")),
		    list(makeSymbol("SET-SLOT"), makeSymbol("SELF"), list(QUOTE, makeSymbol("LAST-EVALUATION-RESULT")), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("LOGICAL-EXPRESSION"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT"))),
		    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("EVALUATE-VISIT")))),
	    list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt755 = list(list(RET, makeSymbol("ACCUMULATED-STATE")));

    static final SubLList $list_alt760 = list(list(RET, makeSymbol("BINDING")));

    static final SubLList $list_alt763 = list(makeSymbol("NEW-BINDING"));

    static final SubLList $list_alt764 = list(list(makeSymbol("CSETQ"), makeSymbol("BINDING"), makeSymbol("NEW-BINDING")), list(RET, makeSymbol("NEW-BINDING")));

    static final SubLList $list_alt768 = list(list(makeSymbol("VARIABLE-REFERENCE"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VARIABLE-REFERENCE"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-VARIABLE-REFERENCE"), list(makeSymbol("NEW-VARIABLE-REFERENCE")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VALUE"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), CommonSymbols.NIL)), makeKeyword("PROTECTED")));

    static final SubLList $list_alt772 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("VARIABLE-REFERENCE"), CommonSymbols.NIL), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt775 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(:PRESENT ~S)"), makeSymbol("VARIABLE-REFERENCE")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt779 = list(list(RET, makeSymbol("VARIABLE-REFERENCE")));

    static final SubLList $list_alt782 = list(makeSymbol("NEW-VARIABLE-REFERENCE"));

    static final SubLList $list_alt783 = list(
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-VARIABLE-REFERENCE")), list(makeSymbol("CYBLACK-VARIABLE-REFERENCE-P"), makeSymbol("NEW-VARIABLE-REFERENCE"))),
		    makeString("(SET-VARIABLE-REFERENCE ~S): ~S is not an instance of CYBLACK-VARIABLE-REFERENCE."), makeSymbol("SELF"), makeSymbol("NEW-VARIABLE-REFERENCE")),
	    list(makeSymbol("CSETQ"), makeSymbol("VARIABLE-REFERENCE"), makeSymbol("NEW-VARIABLE-REFERENCE")), list(RET, makeSymbol("NEW-VARIABLE-REFERENCE")));

    static final SubLList $list_alt786 = list(list(makeSymbol("PIF"), makeSymbol("VARIABLE-REFERENCE"),
	    list(makeSymbol("CLET"), list(list(makeSymbol("VARIABLE-VALUE"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-VALUE"), makeSymbol("CYBLACK-VARIABLE-REFERENCE")), makeSymbol("VARIABLE-REFERENCE"), makeSymbol("ENVIRONMENT")))),
		    list(RET, list(makeSymbol("CNOT"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("VARIABLE-VALUE")), list(makeSymbol("CYBLACK-UNBOUND-VALUE-P"), makeSymbol("VARIABLE-VALUE")))))),
	    list(RET, CommonSymbols.NIL)));

    static final SubLList $list_alt789 = list(list(makeSymbol("DATATYPE"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-DATATYPE"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-DATATYPE"), list(makeSymbol("NEW-DATATYPE")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VALUE"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), CommonSymbols.NIL)), makeKeyword("PUBLIC")));

    static final SubLList $list_alt79 = list(makeKeyword("READ-ONLY"), makeKeyword("PUBLIC"));

    static final SubLList $list_alt793 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("DATATYPE"), CommonSymbols.NIL), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt796 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(:EMPTY-P ~S)"), makeSymbol("DATATYPE")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt80 = list(list(RET, makeSymbol("APRIORI")));

    static final SubLList $list_alt800 = list(list(RET, makeSymbol("DATATYPE")));

    static final SubLList $list_alt803 = list(makeSymbol("NEW-DATATYPE"));

    static final SubLList $list_alt804 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-DATATYPE")), list(makeSymbol("CYBLACK-DATATYPE-P"), makeSymbol("NEW-DATATYPE"))),
	    makeString("(SET-DATATYPE ~S): ~S is not an instance of CYBLACK-DATATYPE."), makeSymbol("SELF"), makeSymbol("NEW-DATATYPE")), list(makeSymbol("CSETQ"), makeSymbol("DATATYPE"), makeSymbol("NEW-DATATYPE")), list(RET, makeSymbol("NEW-DATATYPE")));

    static final SubLList $list_alt807 = list(list(makeSymbol("CYBLACK-MUST"), makeSymbol("DATATYPE"), makeString("(GET-VALUE ~S): No datatype is associated with this expression."), makeSymbol("SELF")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("APPLICATION"), makeString("(GET-VALUE ~S): No application is associated with this expression."), makeSymbol("SELF")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("BLACKBOARD"), list(makeSymbol("CYBLACK-APPLICATION-GET-BLACKBOARD"), makeSymbol("APPLICATION")))),
		    list(makeSymbol("CYBLACK-MUST"), makeSymbol("BLACKBOARD"), makeString("(GET-VALUE ~S): No blackboard is associated with the application ~S."), makeSymbol("SELF"), makeSymbol("APPLICATION")),
		    list(makeSymbol("CLET"), list(list(makeSymbol("PANEL"), list(makeSymbol("CYBLACK-DATATYPE-GET-PANEL"), makeSymbol("DATATYPE"), makeSymbol("BLACKBOARD"), makeSymbol("ENVIRONMENT")))), list(makeSymbol("PIF"), makeSymbol("PANEL"),
			    list(makeSymbol("CLET"), list(list(makeSymbol("POSTINGS"), list(makeSymbol("CYBLACK-PANEL-GET-ALL-POSTINGS"), makeSymbol("PANEL")))), list(RET, list(makeSymbol("NULL"), makeSymbol("POSTINGS")))), list(RET, CommonSymbols.T)))));

    static final SubLList $list_alt810 = list(new SubLObject[] { list(makeSymbol("CLOSURE"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("BINDING"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("LOGICAL-EXPRESSION"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT-FUNCTOR"), list(makeSymbol("STREAM")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-CLOSURE"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-CLOSURE"), list(makeSymbol("NEW-CLOSURE")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-BINDING"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-BINDING"), list(makeSymbol("NEW-BINDING")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-LOGICAL-EXPRESSION"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-LOGICAL-EXPRESSION"), list(makeSymbol("NEW-LOGICAL-EXPRESSION")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VALUE"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), CommonSymbols.NIL)), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VALUE-INTERNAL"), list(makeSymbol("ENVIRONMENT")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("CREATE-POSTING-VISITOR"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("NEW-POSTING-VISITOR"), CommonSymbols.NIL, makeKeyword("PUBLIC")) });

    static final SubLList $list_alt814 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("CLOSURE"), CommonSymbols.NIL), list(makeSymbol("CSETQ"), makeSymbol("BINDING"), CommonSymbols.NIL),
	    list(makeSymbol("CSETQ"), makeSymbol("LOGICAL-EXPRESSION"), CommonSymbols.NIL), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt817 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(")),
	    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("PRINT-FUNCTOR")), makeSymbol("STREAM")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(" ~S ~S)"), makeSymbol("BINDING"), makeSymbol("LOGICAL-EXPRESSION")),
	    list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt822 = list(list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(":EXISTENTIAL-FUNCTOR")), list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt826 = list(list(RET, makeSymbol("CLOSURE")));

    static final SubLList $list_alt829 = list(makeSymbol("NEW-CLOSURE"));

    static final SubLList $list_alt83 = list(list(makeSymbol("CSETQ"), makeSymbol("APRIORI"), makeSymbol("NEW-VALUE")), list(RET, makeSymbol("NEW-VALUE")));

    static final SubLList $list_alt830 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-CLOSURE")), list(makeSymbol("CYBLACK-ENVIRONMENT-P"), makeSymbol("NEW-CLOSURE"))),
	    makeString("(SET-CLOSURE ~S): ~S is not an instance of CYBLACK-ENVIRONMENT."), makeSymbol("SELF"), makeSymbol("NEW-CLOSURE")), list(makeSymbol("CSETQ"), makeSymbol("CLOSURE"), makeSymbol("NEW-CLOSURE")), list(RET, makeSymbol("NEW-CLOSURE")));

    static final SubLList $list_alt834 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-BINDING")), list(makeSymbol("CYBLACK-BINDING-P"), makeSymbol("NEW-BINDING"))), makeString("(SET-BINDING ~S): ~S is not an instance of CYBLACK-BINDING."),
	    makeSymbol("SELF"), makeSymbol("NEW-BINDING")), list(makeSymbol("CSETQ"), makeSymbol("BINDING"), makeSymbol("NEW-BINDING")), list(RET, makeSymbol("NEW-BINDING")));

    static final SubLList $list_alt838 = list(
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-LOGICAL-EXPRESSION")), list(makeSymbol("CYBLACK-LOGICAL-EXPRESSION-P"), makeSymbol("NEW-LOGICAL-EXPRESSION"))),
		    makeString("(SET-LOGICAL-EXPRESSION ~S): ~S is not an instance of CYBLACK-LOGICAL-EXPRESSION."), makeSymbol("SELF"), makeSymbol("NEW-LOGICAL-EXPRESSION")),
	    list(makeSymbol("CSETQ"), makeSymbol("LOGICAL-EXPRESSION"), makeSymbol("NEW-LOGICAL-EXPRESSION")), list(RET, makeSymbol("NEW-LOGICAL-EXPRESSION")));

    static final SubLList $list_alt841 = list(list(makeSymbol("CLET"), list(list(makeSymbol("RESULT"), CommonSymbols.NIL)),
	    list(makeSymbol("PIF"), makeSymbol("CLOSURE"),
		    list(makeSymbol("PROGN"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-OUTER-SCOPE"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("CLOSURE"), makeSymbol("ENVIRONMENT")),
			    list(makeSymbol("CSETQ"), makeSymbol("RESULT"), list(makeSymbol("GET-VALUE-INTERNAL"), makeSymbol("SELF"), makeSymbol("CLOSURE"))),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-OUTER-SCOPE"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("CLOSURE"), CommonSymbols.NIL)),
		    list(makeSymbol("CSETQ"), makeSymbol("RESULT"), list(makeSymbol("GET-VALUE-INTERNAL"), makeSymbol("SELF"), makeSymbol("ENVIRONMENT")))),
	    list(makeSymbol("CYBLACK-TRACING-FORMAT"), makeString("~%(GET-VALUE ~S): Result -> ~S."), makeSymbol("SELF"), makeSymbol("RESULT")), list(RET, makeSymbol("RESULT"))));

    static final SubLList $list_alt844 = list(makeSymbol("ENVIRONMENT"));

    static final SubLList $list_alt845 = list(list(makeSymbol("PWHEN"), makeSymbol("BINDING"), list(makeSymbol("CLET"),
	    list(list(makeSymbol("DATATYPE"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-TYPE"), makeSymbol("CYBLACK-BINDING")), makeSymbol("BINDING"))), list(makeSymbol("APPLICATION"), list(makeSymbol("GET-APPLICATION"), makeSymbol("SELF"))),
		    list(makeSymbol("BLACKBOARD"), list(makeSymbol("FIF"), makeSymbol("APPLICATION"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("APPLICATION"), list(QUOTE, makeSymbol("GET-BLACKBOARD"))), CommonSymbols.NIL))),
	    list(makeSymbol("CYBLACK-TRACING-FORMAT"), makeString("~%(GET-VALUE-INTERNAL ~S): datatype -> ~S, application -> ~S, blackboard -> ~S."), makeSymbol("SELF"), makeSymbol("DATATYPE"), makeSymbol("APPLICATION"), makeSymbol("BLACKBOARD")),
	    list(makeSymbol("PWHEN"), list(makeSymbol("CAND"), makeSymbol("DATATYPE"), makeSymbol("BLACKBOARD")), list(makeSymbol("CLET"),
		    list(list(makeSymbol("PANEL"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("BLACKBOARD"), list(QUOTE, makeSymbol("GET-PANEL")), makeSymbol("DATATYPE")))),
		    list(makeSymbol("PWHEN"), makeSymbol("PANEL"), list(makeSymbol("CLET"), list(list(makeSymbol("POSTING-VISITOR"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("CREATE-POSTING-VISITOR"))))),
			    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("POSTING-VISITOR"), list(QUOTE, makeSymbol("SET-INITIAL-STATE")), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-APPLICATION"), makeSymbol("CYBLACK-BASIC-BLACKBOARD")), makeSymbol("BLACKBOARD")),
				    makeSymbol("ENVIRONMENT")),
			    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("PANEL"), list(QUOTE, makeSymbol("ITERATE-OVER-ALL-POSTINGS")), makeSymbol("POSTING-VISITOR")),
			    list(RET, list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("POSTING-VISITOR"), list(QUOTE, makeSymbol("GET-FINAL-STATE")))))))))),
	    list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt851 = list(list(makeSymbol("CLET"), list(list(makeSymbol("NEW-ROBOT"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("NEW-POSTING-VISITOR"))))),
	    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-APPLICATION"), makeSymbol("CYBLACK-EXISTENTIAL-ROBOT")), makeSymbol("NEW-ROBOT"), makeSymbol("APPLICATION")),
	    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-BINDING"), makeSymbol("CYBLACK-EXISTENTIAL-ROBOT")), makeSymbol("NEW-ROBOT"), makeSymbol("BINDING")),
	    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-LOGICAL-EXPRESSION"), makeSymbol("CYBLACK-EXISTENTIAL-ROBOT")), makeSymbol("NEW-ROBOT"), makeSymbol("LOGICAL-EXPRESSION")), list(RET, makeSymbol("NEW-ROBOT"))));

    static final SubLList $list_alt854 = list(list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-EXISTENTIAL-ROBOT")), list(QUOTE, makeSymbol("CYBLACK-EXISTENTIAL-ROBOT")))));

    static final SubLList $list_alt857 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE-ACCUMULATED-STATE"), CommonSymbols.NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("EVALUATE-VISIT"), CommonSymbols.NIL, makeKeyword("PUBLIC")));

    static final SubLList $list_alt860 = list(list(RET, list(makeSymbol("INITIALIZE"), makeSymbol("SUPER"))));

    static final SubLList $list_alt864 = list(list(makeSymbol("PUNLESS"), makeSymbol("LAST-EVALUATION-RESULT"), list(makeSymbol("CSETQ"), makeSymbol("CONTINUE"), CommonSymbols.NIL), list(makeSymbol("CSETQ"), makeSymbol("ACCUMULATED-STATE"), CommonSymbols.NIL)),
	    list(RET, makeSymbol("ACCUMULATED-STATE")));

    static final SubLList $list_alt868 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT-FUNCTOR"), list(makeSymbol("STREAM")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("NEW-POSTING-VISITOR"), CommonSymbols.NIL, makeKeyword("PUBLIC")));

    static final SubLList $list_alt87 = list(list(makeSymbol("CLET"), list(list(makeSymbol("LISTIFIED-BINDING"), CommonSymbols.NIL)),
	    list(makeSymbol("PIF"), list(makeSymbol("INSTANCE-P"), makeSymbol("VALUE")),
		    list(makeSymbol("CSETQ"), makeSymbol("LISTIFIED-BINDING"),
			    list(makeSymbol("LIST"), makeSymbol("VARIABLE"), list(makeSymbol("CYBLACK-GET-TYPENAME-IF-NOT-NULL"), makeSymbol("TYPE")), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("VALUE"), list(QUOTE, makeSymbol("PLISTIFY"))))),
		    list(makeSymbol("CSETQ"), makeSymbol("LISTIFIED-BINDING"), list(makeSymbol("LIST"), makeSymbol("VARIABLE"), list(makeSymbol("CYBLACK-GET-TYPENAME-IF-NOT-NULL"), makeSymbol("TYPE")), makeSymbol("VALUE")))),
	    list(RET, makeSymbol("LISTIFIED-BINDING"))));

    static final SubLList $list_alt871 = list(list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(":FORALL")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt874 = list(list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-FORALL-ROBOT")), list(QUOTE, makeSymbol("CYBLACK-FORALL-ROBOT")))));

    static final SubLList $list_alt877 = list(list(makeSymbol("LOGICAL-FORM"), makeKeyword("INSTANCE"), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-LOGICAL-FORM"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-LOGICAL-FORM"), list(makeSymbol("NEW-LOGICAL-FORM")), makeKeyword("PUBLIC")));

    static final SubLList $list_alt880 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("LOGICAL-FORM"), CommonSymbols.NIL), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt883 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(~S)"), makeSymbol("LOGICAL-FORM")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt887 = list(
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-LOGICAL-EXPRESSION-P"), makeSymbol("NEW-LOGICAL-FORM")), makeString("(SET-LOGICAL-FORM ~S): ~S is not an instance of CYBLACK-LOGICAL-EXPRESSION."), makeSymbol("SELF"), makeSymbol("NEW-LOGICAL-FORM")),
	    list(makeSymbol("CSETQ"), makeSymbol("LOGICAL-FORM"), makeSymbol("NEW-LOGICAL-FORM")), list(RET, makeSymbol("NEW-LOGICAL-FORM")));

    static final SubLList $list_alt891 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT-OPERATOR"), list(makeSymbol("STREAM")), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ARITY"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ARG1"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ARG1"), list(makeSymbol("NEW-ARG1")), makeKeyword("PUBLIC")));

    static final SubLList $list_alt895 = list(list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(":ABSTRACT-COMPOUND-OPERATOR")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt899 = list(list(RET, CommonSymbols.ZERO_INTEGER));

    static final SubLList $list_alt904 = list(makeSymbol("NEW-ARG1"));

    static final SubLList $list_alt905 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("CYBLACK-LOGICAL-EXPRESSION-P"), makeSymbol("NEW-ARG1")), list(makeSymbol("CYBLACK-VALUE-EXPRESSION-P"), makeSymbol("NEW-ARG1"))),
	    makeString("(set-arg1 ~S): ~S is not an instance of CYBLACK-LOGICAL-EXPRESSION."), makeSymbol("SELF"), makeSymbol("NEW-ARG1")), list(makeSymbol("CYBLACK-SILENCE"), makeSymbol("SELF")), list(RET, makeSymbol("NEW-ARG1")));

    static final SubLList $list_alt908 = list(list(makeSymbol("ARG1"), makeKeyword("INSTANCE"), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT-OPERATOR"), list(makeSymbol("STREAM")), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ARITY"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ARG1"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ARG1"), list(makeSymbol("NEW-ARG1")), makeKeyword("PUBLIC")));

    static final SubLList $list_alt912 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("ARG1"), CommonSymbols.NIL), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt915 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(")),
	    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("PRINT-OPERATOR")), makeSymbol("STREAM")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(" ~S)"), makeSymbol("ARG1")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt918 = list(list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(":ABSTRACT-UNARY-OPERATOR")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt921 = list(list(RET, CommonSymbols.ONE_INTEGER));

    static final SubLList $list_alt923 = list(list(makeSymbol("GET-ARG1"), makeSymbol("SUPER")), list(RET, makeSymbol("ARG1")));

    static final SubLList $list_alt925 = list(list(makeSymbol("SET-ARG1"), makeSymbol("SUPER"), makeSymbol("NEW-ARG1")), list(makeSymbol("CSETQ"), makeSymbol("ARG1"), makeSymbol("NEW-ARG1")), list(RET, makeSymbol("NEW-ARG1")));

    static final SubLList $list_alt929 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT-OPERATOR"), list(makeSymbol("STREAM")), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VALUE"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), CommonSymbols.NIL)), makeKeyword("PUBLIC")));

    static final SubLList $list_alt933 = list(list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(":NOT")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt936 = list(
	    list(makeSymbol("CLET"),
		    list(list(makeSymbol("SUBEXPRESSION-RESULTS"), list(makeSymbol("FIF"), makeSymbol("ARG1"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ARG1"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT")), CommonSymbols.NIL)),
			    list(makeSymbol("RESULT"), list(makeSymbol("CNOT"), makeSymbol("SUBEXPRESSION-RESULTS")))),
		    list(makeSymbol("CYBLACK-TRACING-FORMAT"), makeString("~%(GET-VALUE ~S): Result -> ~S."), makeSymbol("SELF"), makeSymbol("RESULT")), list(RET, makeSymbol("RESULT"))));

    static final SubLList $list_alt939 = list(new SubLObject[] { list(makeSymbol("ARGLIST"), makeKeyword("INSTANCE"), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT-OPERATOR"), list(makeSymbol("STREAM")), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ARITY"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ARG1"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ARG1"), list(makeSymbol("NEW-ARG1")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ARG2"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ARG2"), list(makeSymbol("NEW-ARG2")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ARG3"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ARG3"), list(makeSymbol("NEW-ARG3")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("CHECK-N"), list(makeSymbol("N")), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ARGN"), list(makeSymbol("N")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ARGN"), list(makeSymbol("N"), makeSymbol("NEW-ARGN")), makeKeyword("PUBLIC")) });

    static final SubLList $list_alt943 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("ARGLIST"), CommonSymbols.NIL), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt946 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("ARITY"), list(makeSymbol("GET-ARITY"), makeSymbol("SELF")))), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(")),
		    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("PRINT-OPERATOR")), makeSymbol("STREAM")),
		    list(makeSymbol("PWHEN"), list(makeSymbol(">"), makeSymbol("ARITY"), CommonSymbols.ZERO_INTEGER), list(makeSymbol("CDOLIST"), list(makeSymbol("ARG"), makeSymbol("ARGLIST")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(" ~S"), makeSymbol("ARG")))),
		    list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(")")), list(RET, makeSymbol("SELF"))));

    static final SubLList $list_alt948 = list(list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(":ABSTRACT-NARY-OPERATOR")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt951 = list(list(RET, list(makeSymbol("LENGTH"), makeSymbol("ARGLIST"))));

    static final SubLList $list_alt953 = list(list(RET, list(makeSymbol("GET-ARGN"), makeSymbol("SELF"), CommonSymbols.ONE_INTEGER)));

    static final SubLList $list_alt955 = list(list(RET, list(makeSymbol("SET-ARGN"), makeSymbol("SELF"), CommonSymbols.ONE_INTEGER, makeSymbol("NEW-ARG1"))));

    static final SubLList $list_alt958 = list(list(RET, list(makeSymbol("GET-ARGN"), makeSymbol("SELF"), CommonSymbols.TWO_INTEGER)));

    static final SubLList $list_alt961 = list(makeSymbol("NEW-ARG2"));

    static final SubLList $list_alt962 = list(list(RET, list(makeSymbol("SET-ARGN"), makeSymbol("SELF"), CommonSymbols.TWO_INTEGER, makeSymbol("NEW-ARG2"))));

    static final SubLList $list_alt965 = list(list(RET, list(makeSymbol("GET-ARGN"), makeSymbol("SELF"), CommonSymbols.THREE_INTEGER)));

    static final SubLList $list_alt968 = list(makeSymbol("NEW-ARG3"));

    static final SubLList $list_alt969 = list(list(RET, list(makeSymbol("SET-ARGN"), makeSymbol("SELF"), CommonSymbols.THREE_INTEGER, makeSymbol("NEW-ARG3"))));

    static final SubLList $list_alt972 = list(makeSymbol("N"));

    static final SubLList $list_alt973 = list(
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol(">"), makeSymbol("N"), CommonSymbols.ZERO_INTEGER), makeString("(CHECK-N ~S): The argument ~S to GET-ARGN or SET-ARGN must be between 1 and the arity of the operator."), makeSymbol("SELF"), makeSymbol("N")),
	    list(makeSymbol("CYBLACK-SILENCE"), makeSymbol("SELF")), list(makeSymbol("CYBLACK-SILENCE"), makeSymbol("N")), list(RET, CommonSymbols.T));

    static final SubLList $list_alt976 = list(list(makeSymbol("WHEN-CYBLACK-TYPE-CHECKING-ON"), list(makeSymbol("CHECK-N"), makeSymbol("SELF"), makeSymbol("N"))),
	    list(makeSymbol("CLET"), list(list(makeSymbol("ARG"), list(makeSymbol("NTH"), list(makeSymbol("-"), makeSymbol("N"), CommonSymbols.ONE_INTEGER), makeSymbol("ARGLIST")))), list(RET, makeSymbol("ARG"))));

    static final SubLList $list_alt979 = list(makeSymbol("N"), makeSymbol("NEW-ARGN"));

    static final SubLList $list_alt98 = list(new SubLObject[] { list(makeSymbol("ENVIRONMENT-TAG"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("OUTER-SCOPE"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("LOCAL-BINDINGS"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DEF-CLASS-METHOD"), makeSymbol("INSTANTIATE-BINDING-LIST"), list(makeSymbol("BINDING-LIST")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("CLONE"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ENVIRONMENT-TAG"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ENVIRONMENT-TAG"), list(makeSymbol("NEW-TAG")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-OUTER-SCOPE"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-OUTER-SCOPE"), list(makeSymbol("NEW-OUTER-SCOPE")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-LOCAL-BINDINGS"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-LOCAL-BINDINGS"), list(makeSymbol("NEW-LOCAL-BINDINGS")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-LOCAL-UNBOUND-BINDINGS"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PUSH-LOCAL-BINDING"), list(makeSymbol("VARIABLE"), makeSymbol("&OPTIONAL"), list(makeSymbol("VALUE"), makeSymbol("*CYBLACK-UNBOUND-VALUE*")), list(makeSymbol("APRIORI-P"), CommonSymbols.NIL)), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PUSH-TYPED-LOCAL-BINDING"), list(makeSymbol("VARIABLE"), makeSymbol("TYPE"), makeSymbol("&OPTIONAL"), list(makeSymbol("VALUE"), makeSymbol("*CYBLACK-UNBOUND-VALUE*")), list(makeSymbol("APRIORI-P"), CommonSymbols.NIL)),
		    makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("POP-LOCAL-BINDING"), list(makeSymbol("VARIABLE")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-BINDING"), list(makeSymbol("VARIABLE")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-BINDING-BY-VALUE"), list(makeSymbol("VALUE")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET"), list(makeSymbol("VARIABLE"), makeSymbol("&OPTIONAL"), list(makeSymbol("DEFAULT"), makeSymbol("*CYBLACK-UNBOUND-VALUE*"))), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET"), list(makeSymbol("VARIABLE"), makeSymbol("VALUE")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-LOCAL"), list(makeSymbol("VARIABLE")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-LOCAL"), list(makeSymbol("VARIABLE"), makeSymbol("VALUE")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PUSH-FRAME"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("NEW-TAG"), CommonSymbols.NIL)), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("POP-FRAME"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("POP-FRAME-TO"), list(makeSymbol("TARGET-TAG")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("TOP-FRAME"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("LISTIFY-LOCAL-BINDINGS"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-UNIQUE-LOCAL-BINDINGS"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-UNIQUE-BINDINGS"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("OUTERMOST-SCOPE-TAG"), makeSymbol("*CYBLACK-UNBOUND-VALUE*"))), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-UNIQUE-NON-APRIORI-BINDINGS"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("OUTERMOST-SCOPE-TAG"), makeSymbol("*CYBLACK-UNBOUND-VALUE*"))), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-UNIQUE-LOCAL-UNBOUND-BINDINGS"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-UNIQUE-UNBOUND-BINDINGS"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("LISTIFY-UNIQUE-BINDINGS"), CommonSymbols.NIL, makeKeyword("PUBLIC")) });

    static final SubLList $list_alt980 = list(list(makeSymbol("WHEN-CYBLACK-TYPE-CHECKING-ON"), list(makeSymbol("CHECK-N"), makeSymbol("SELF"), makeSymbol("N"))),
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("CYBLACK-LOGICAL-EXPRESSION-P"), makeSymbol("NEW-ARGN")), list(makeSymbol("CYBLACK-VALUE-EXPRESSION-P"), makeSymbol("NEW-ARGN"))), makeString("(SET-ARGN ~S): ~S is not an instance of CYBLACK-LOGICAL-EXPRESSION."),
		    makeSymbol("SELF"), makeSymbol("NEW-ARGN")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("ARITY"), list(makeSymbol("GET-ARITY"), makeSymbol("SELF")))),
		    list(makeSymbol("PIF"), list(makeSymbol("<="), makeSymbol("N"), makeSymbol("ARITY")), list(makeSymbol("SET-NTH"), list(makeSymbol("-"), makeSymbol("N"), CommonSymbols.ONE_INTEGER), makeSymbol("ARGLIST"), makeSymbol("NEW-ARGN")),
			    list(makeSymbol("CLET"), list(list(makeSymbol("GROW-BY"), list(makeSymbol("-"), makeSymbol("N"), makeSymbol("ARITY"))), list(makeSymbol("EXTENSION"), list(makeSymbol("MAKE-LIST"), makeSymbol("GROW-BY")))),
				    list(makeSymbol("RPLACA"), list(makeSymbol("LAST"), makeSymbol("EXTENSION")), makeSymbol("NEW-ARGN")), list(makeSymbol("CSETQ"), makeSymbol("ARGLIST"), list(makeSymbol("NCONC"), makeSymbol("ARGLIST"), makeSymbol("EXTENSION"))))),
		    list(RET, makeSymbol("NEW-ARGN"))));

    static final SubLList $list_alt987 = list(list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(":AND")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt990 = list(list(makeSymbol("PUNLESS"), makeSymbol("ARGLIST"), list(RET, CommonSymbols.T)), list(makeSymbol("CDOLIST"), list(makeSymbol("ARG"), makeSymbol("ARGLIST")),
	    list(makeSymbol("PUNLESS"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ARG"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT")), list(RET, CommonSymbols.NIL))), list(RET, CommonSymbols.T));

    static final SubLList $list_alt996 = list(list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(":OR")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt999 = list(list(makeSymbol("PUNLESS"), makeSymbol("ARGLIST"), list(RET, CommonSymbols.NIL)),
	    list(makeSymbol("CDOLIST"), list(makeSymbol("ARG"), makeSymbol("ARGLIST")), list(makeSymbol("PWHEN"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ARG"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT")), list(RET, CommonSymbols.T))),
	    list(RET, CommonSymbols.NIL));

    static final SubLString $str_alt1022$_ABSTRACT_PREDICATE = makeString(":ABSTRACT-PREDICATE");

    static final SubLString $str_alt1053$_ABSTRACT_BINARY_PREDICATE = makeString(":ABSTRACT-BINARY-PREDICATE");

    static final SubLString $str_alt1079$_EQ = makeString(":EQ");

    static final SubLString $str_alt1088$_EQUAL = makeString(":EQUAL");

    static final SubLString $str_alt1097$_ASSOC_EQUAL = makeString(":ASSOC-EQUAL");

    static final SubLString $str_alt1106$_LE = makeString(":LE");

    static final SubLString $str_alt1115$_LT = makeString(":LT");

    static final SubLString $str_alt1124$_GE = makeString(":GE");

    static final SubLString $str_alt1156$__POSTING_OPERATION_EXPRESSION__S = makeString("(:POSTING-OPERATION-EXPRESSION ~S)");

    static final SubLString $str_alt117$CYBLACK_ENVIRONMENT__tag__S_local = makeString("CYBLACK-ENVIRONMENT:[tag=~S;local-bindings=");

    static final SubLString $str_alt1174$__TYPE_OF__S_ = makeString("(:TYPE-OF ~S)");

    static final SubLString $str_alt118$_outer_scope__S_ = makeString(";outer-scope=~S]");

    static final SubLString $str_alt1188$__CALL__S__S = makeString("(:CALL ~S ~S");

    static final SubLString $str_alt1221$__GET_SLOT__S__S_ = makeString("(:GET-SLOT ~S ~S)");

    static final SubLString $str_alt1245$_ABSTRACT_ARITHMETIC_OPERATION = makeString(":ABSTRACT-ARITHMETIC-OPERATION");

    static final SubLString $str_alt1274$_ = makeString("-");

    static final SubLString $str_alt1303$_ = makeString("/");

    static final SubLString $str_alt1324$_ = makeString("+");

    static final SubLString $str_alt1332$_ = makeString("*");

    static final SubLString $str_alt1346$__CYBLACK_PATTERN_PROCESSOR__S__ = makeString("#<CYBLACK-PATTERN-PROCESSOR(~S)>");

    static final SubLString $str_alt1372$__CYBLACK_ITEM_PARSER__S__ = makeString("#<CYBLACK-ITEM-PARSER(~S)>");

    static final SubLString $str_alt1477$__Created_new_monitoring_pattern_ = makeString("~%Created new monitoring pattern!");

    static final SubLString $str_alt1671$__CYBLACK_ITEM_COMPILER__S__ = makeString("#<CYBLACK-ITEM-COMPILER(~S)>");

    static final SubLString $str_alt1719$_PARSE__S___I_don_t_know_how_to_c = makeString("(PARSE ~S): I don't know how to compile ~S.");

    static final SubLString $str_alt1724$CYBLACK_SATISFACTION_EXPRESSION_P = makeString("CYBLACK-SATISFACTION-EXPRESSION-PARSER-NEW-EXPRESSION: ~S is not an instance of CYBLACK-SATISFACTION-EXPRESSION-PARSER.");

    static final SubLString $str_alt2$_S___S_is_not_a_member_of_the__S_ = makeString("~S: ~S is not a member of the ~S enumeration.");

    static final SubLString $str_alt275$___GET_VALUE__S___environment_is_ = makeString("~%(GET-VALUE ~S): environment is NIL.");

    static final SubLString $str_alt276$___GET_VALUE__S___Result_____S_ = makeString("~%(GET-VALUE ~S): Result -> ~S.");

    static final SubLString $str_alt287$_LITERAL = makeString(":LITERAL");

    static final SubLString $str_alt301$_NUMBER = makeString(":NUMBER");

    static final SubLString $str_alt33$__S__S__S_ = makeString("[~S:~S ~S]");

    static final SubLString $str_alt331$__string__S_ = makeString("(:string ~S)");

    static final SubLString $str_alt34$__S__S_ = makeString("[~S ~S]");

    static final SubLString $str_alt35$__S__S__S_ = makeString("(~S:~S ~S)");

    static final SubLString $str_alt359$_SET_VALUE__S___Cannot_set_the_va = makeString("(SET-VALUE ~S): Cannot set the value of constant symbol ~S");

    static final SubLString $str_alt36$__S__S_ = makeString("(~S ~S)");

    static final SubLString $str_alt370$_TRUE = makeString(":TRUE");

    static final SubLString $str_alt380$_FALSE = makeString(":FALSE");

    static final SubLString $str_alt4$_S___S_is_not_a_valid_encoding_of = makeString("~S: ~S is not a valid encoding of the ~S enumeration.");

    static final SubLString $str_alt407$__MONITOR_PATTERN____MONITOR__S__ = makeString("#<MONITOR-PATTERN: (:MONITOR ~S ~S ~S :BINDINGS ~S :WHERE ~S)>");

    static final SubLString $str_alt408$__CYBLACK_MONITORING_PATTERN__UNI = makeString("#<CYBLACK-MONITORING-PATTERN: UNINITIALIZED>");

    static final SubLString $str_alt417$___TRAVERSE_FILLING_DATATYPE_BAG_ = makeString("~%(TRAVERSE-FILLING-DATATYPE-BAG ~S): Unique bindings -> ~S");

    static final SubLString $str_alt473$__PRECON___KS_ARGS__S__BINDING_LI = makeString("#<PRECON:(:KS-ARGS ~S :BINDING-LIST ~S :WHERE ~S)>");

    static final SubLString $str_alt474$__PRECON__UNINITIALIZED__ = makeString("#<PRECON:(UNINITIALIZED)>");

    static final SubLString $str_alt513$__SATISFACTION_EXPRESSION___SATIS = makeString("#<SATISFACTION-EXPRESSION (:SATISFY ~S ~S)>");

    static final SubLString $str_alt514$__SATISFACTION_EXRESSION__UNINITI = makeString("#<SATISFACTION-EXRESSION: UNINITIALIZED>");

    static final SubLString $str_alt541$__SIMPLE_SATISFACTION_EXPRESSION_ = makeString("#<SIMPLE-SATISFACTION-EXPRESSION (:SATISFY-SIMPLE ~S)>");

    static final SubLString $str_alt553$__TYPE__S_ = makeString("(:TYPE ~S)");

    static final SubLString $str_alt6$_S___S_was_expected_to_be_a_membe = makeString("~S: ~S was expected to be a member of the enumeration ~S.");

    static final SubLString $str_alt622$__SUBTYPE__S__S = makeString("(:SUBTYPE ~S ~S");

    static final SubLString $str_alt623$_ = makeString(")");

    static final SubLString $str_alt629$__S = makeString(" ~S");

    static final SubLString $str_alt673$__PANEL__S_ = makeString("(:PANEL ~S)");

    static final SubLString $str_alt701$____GET__S__S_ = makeString("~%(:GET ~S ~S)");

    static final SubLString $str_alt776$__PRESENT__S_ = makeString("(:PRESENT ~S)");

    static final SubLString $str_alt797$__EMPTY_P__S_ = makeString("(:EMPTY-P ~S)");

    static final SubLString $str_alt8$ = makeString("");

    static final SubLString $str_alt818$_ = makeString("(");

    static final SubLString $str_alt820$__S__S_ = makeString(" ~S ~S)");

    static final SubLString $str_alt823$_EXISTENTIAL_FUNCTOR = makeString(":EXISTENTIAL-FUNCTOR");

    static final SubLString $str_alt847$___GET_VALUE_INTERNAL__S___dataty = makeString("~%(GET-VALUE-INTERNAL ~S): datatype -> ~S, application -> ~S, blackboard -> ~S.");

    static final SubLString $str_alt872$_FORALL = makeString(":FORALL");

    static final SubLString $str_alt884$__S_ = makeString("(~S)");

    static final SubLString $str_alt896$_ABSTRACT_COMPOUND_OPERATOR = makeString(":ABSTRACT-COMPOUND-OPERATOR");

    static final SubLString $str_alt91$CYBLACK_BINDINGS__ = makeString("CYBLACK-BINDINGS:[");

    static final SubLString $str_alt916$__S_ = makeString(" ~S)");

    static final SubLString $str_alt919$_ABSTRACT_UNARY_OPERATOR = makeString(":ABSTRACT-UNARY-OPERATOR");

    static final SubLString $str_alt92$_ = makeString("]");

    static final SubLString $str_alt93$_S_ = makeString("~S]");

    static final SubLString $str_alt934$_NOT = makeString(":NOT");

    static final SubLString $str_alt94$_S = makeString("~S");

    static final SubLString $str_alt949$_ABSTRACT_NARY_OPERATOR = makeString(":ABSTRACT-NARY-OPERATOR");

    static final SubLString $str_alt95$__S = makeString(",~S");

    static final SubLString $str_alt988$_AND = makeString(":AND");

    static final SubLString $str_alt997$_OR = makeString(":OR");
}

abstract class cyblack_precondition_pattern_p3 implements CommonSymbols {
    // // Internal Constants
    public static final SubLFloat $float$0_0 = makeDouble(0.0);

    public static final SubLInteger $int$4097 = makeInteger(4097);

    static final SubLList $list_alt0 = list(new SubLObject[] { makeKeyword("KS-ARGS"), makeKeyword("MONITOR"), makeKeyword("EXISTENTIAL-FUNCTOR"), makeKeyword("SATISFY"), makeKeyword("SATISFY-SIMPLE"), makeKeyword("GET"), makeKeyword("PRESENT"), makeKeyword("STRING"), makeKeyword("TYPE-OF"),
	    $CALL, $TYPE, makeKeyword("SUBTYPE"), makeKeyword("PANEL"), makeKeyword("EMPTY-P"), makeKeyword("FORALL"), makeKeyword("NOT"), makeKeyword("AND"), makeKeyword("OR"), makeKeyword("EQ"), makeKeyword("EQUAL"), makeKeyword("GT"), makeKeyword("LT"),
	    makeKeyword("GE"), makeKeyword("ASSOC-EQUAL"), makeKeyword("LE"), makeKeyword("GET-SLOT"), makeSymbol("+"), makeSymbol("-"), makeSymbol("*"), makeSymbol("/") });

    static final SubLList $list_alt1002 = list(new SubLObject[] { list(makeSymbol("ARITY"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("ARGLIST"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("ARGTYPE-LIST"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("CHECK-ARG-P"), list(makeSymbol("N"), makeSymbol("VALUE")), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("DECLARE-SIGNATURE"), list(makeSymbol("ARGTYPES")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT-OPERATOR"), list(makeSymbol("STREAM")), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT-ARGLIST"), list(makeSymbol("STREAM")), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ARITY"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ARGN-TYPE"), list(makeSymbol("N")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ARGN-TYPE"), list(makeSymbol("N"), makeSymbol("CLASS-TYPE")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ARGN"), list(makeSymbol("N")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ARGN"), list(makeSymbol("N"), makeSymbol("NEW-VALUE")), makeKeyword("PUBLIC")) });

    static final SubLList $list_alt1008 = list(makeSymbol("N"), makeSymbol("VALUE"));

    static final SubLList $list_alt1009 = list(
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CAND"), list(makeSymbol("INTEGERP"), makeSymbol("N")), list(makeSymbol(">="), makeSymbol("N"), CommonSymbols.ZERO_INTEGER)), makeString("(CHECK-ARG-P ~S): ~S is not a valid argument postion."), makeSymbol("SELF"), makeSymbol("N")),
	    list(makeSymbol("PWHEN"), list(makeSymbol("="), makeSymbol("N"), CommonSymbols.ZERO_INTEGER), list(RET, CommonSymbols.T)), list(makeSymbol("PUNLESS"), makeSymbol("ARITY"), list(RET, CommonSymbols.NIL)),
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("<="), makeSymbol("N"), makeSymbol("ARITY")), makeString("(CHECK-ARG-P ~S): Index ~S exceeds arity of predicate."), makeSymbol("SELF"), makeSymbol("N")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("TYPE"), list(makeSymbol("NTH"), makeSymbol("N"), makeSymbol("ARGTYPE-LIST")))), list(makeSymbol("PUNLESS"), makeSymbol("TYPE"), list(RET, CommonSymbols.T)),
		    list(makeSymbol("PUNLESS"), list(makeSymbol("INSTANCE-P"), makeSymbol("VALUE")), list(RET, CommonSymbols.NIL)), list(RET, list(makeSymbol("INSTANCE-OF-P"), makeSymbol("VALUE"), makeSymbol("TYPE")))));

    static final SubLList $list_alt1011 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("ARITY"), CommonSymbols.ZERO_INTEGER), list(makeSymbol("CSETQ"), makeSymbol("ARGLIST"), CommonSymbols.NIL),
	    list(makeSymbol("CSETQ"), makeSymbol("ARGTYPE-LIST"), CommonSymbols.NIL), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1015 = list(makeSymbol("ARGTYPES"));

    static final SubLList $list_alt1016 = list(
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-TYPELIST-P"), makeSymbol("ARGTYPES")), makeString("(DECLARE-SIGNATURE ~S): ~S is not a valid predicate signature. ~\n     It includes types unknown to CYBLACK."), makeSymbol("SELF"), makeSymbol("ARGTYPES")),
	    list(makeSymbol("CSETQ"), makeSymbol("ARITY"), list(makeSymbol("LENGTH"), makeSymbol("ARGTYPES"))), list(makeSymbol("CSETQ"), makeSymbol("ARGTYPE-LIST"), list(makeSymbol("COPY-LIST"), makeSymbol("ARGTYPES"))), list(RET, makeSymbol("ARGTYPES")));

    static final SubLList $list_alt1019 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(")),
	    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("PRINT-OPERATOR")), makeSymbol("STREAM")), list(makeSymbol("PRINT-ARGLIST"), makeSymbol("SELF"), makeSymbol("STREAM")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(")")),
	    list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1021 = list(list(makeSymbol("IGNORE"), makeSymbol("STREAM")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(":ABSTRACT-PREDICATE")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1025 = list(list(makeSymbol("CDOLIST"), list(makeSymbol("ARG"), makeSymbol("ARGLIST")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(" ~S"), makeSymbol("ARG"))), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1027 = list(list(RET, makeSymbol("ARITY")));

    static final SubLList $list_alt1030 = list(
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CAND"), list(makeSymbol(">"), makeSymbol("N"), CommonSymbols.ZERO_INTEGER), list(makeSymbol("<="), makeSymbol("N"), makeSymbol("ARITY"))),
		    makeString("(GET-ARGN-TYPE ~S): ~S is not within the range of argument positions for this predicate."), makeSymbol("SELF"), makeSymbol("N")),
	    list(makeSymbol("CYBLACK-SILENCE"), makeSymbol("ARITY")), list(RET, list(makeSymbol("NTH"), list(makeSymbol("-"), makeSymbol("N"), CommonSymbols.ONE_INTEGER), makeSymbol("ARGTYPE-LIST"))));

    static final SubLList $list_alt1033 = list(makeSymbol("N"), makeSymbol("CLASS-TYPE"));

    static final SubLList $list_alt1034 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol(">"), makeSymbol("N"), CommonSymbols.ZERO_INTEGER), makeString("(SET-ARGN-TYPE ~S): Predicates support positive argument positions only."), makeSymbol("SELF")),
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("SUBLOOP-TYPE-P"), makeSymbol("CLASS-TYPE")), makeString("(SET-ARGN-TYPE ~S): ~S is not a type known to CYBLACK."), makeSymbol("SELF"), makeSymbol("CLASS-TYPE")),
	    list(makeSymbol("PWHEN"), list(makeSymbol("<="), makeSymbol("N"), makeSymbol("ARITY")), list(makeSymbol("SET-NTH"), list(makeSymbol("-"), makeSymbol("N"), CommonSymbols.ONE_INTEGER), makeSymbol("ARGTYPE-LIST"), makeSymbol("CLASS-TYPE")),
		    list(RET, makeSymbol("CLASS-TYPE"))),
	    list(makeSymbol("CLET"), list(list(makeSymbol("GROW-BY"), list(makeSymbol("-"), makeSymbol("N"), makeSymbol("ARITY"))), list(makeSymbol("EXTENSION"), list(makeSymbol("MAKE-LIST"), makeSymbol("GROW-BY")))), list(makeSymbol("CSETQ"), makeSymbol("ARITY"), makeSymbol("N")),
		    list(makeSymbol("RPLACA"), list(makeSymbol("LAST"), makeSymbol("EXTENSION")), makeSymbol("CLASS-TYPE")), list(makeSymbol("CSETQ"), makeSymbol("ARGTYPE-LIST"), list(makeSymbol("NCONC"), makeSymbol("ARGTYPE-LIST"), makeSymbol("EXTENSION")))),
	    list(RET, makeSymbol("CLASS-TYPE")));

    static final SubLList $list_alt1037 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CAND"), list(makeSymbol(">"), makeSymbol("N"), CommonSymbols.ZERO_INTEGER), list(makeSymbol("<="), makeSymbol("N"), makeSymbol("ARITY"))),
	    makeString("(GET-ARGN ~S): ~S is not within the range of argument positions for this predicate."), makeSymbol("SELF"), makeSymbol("N")), list(makeSymbol("CYBLACK-SILENCE"), makeSymbol("ARITY")),
	    list(RET, list(makeSymbol("NTH"), list(makeSymbol("-"), makeSymbol("N"), CommonSymbols.ONE_INTEGER), makeSymbol("ARGLIST"))));

    static final SubLList $list_alt1039 = list(makeSymbol("N"), makeSymbol("NEW-VALUE"));

    static final SubLList $list_alt1040 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol(">"), makeSymbol("N"), CommonSymbols.ZERO_INTEGER), makeString("(SET-ARGN ~S): Predicates support positive argument positions only."), makeSymbol("SELF")),
	    list(makeSymbol("PWHEN"), list(makeSymbol("<="), makeSymbol("N"), makeSymbol("ARITY")), list(makeSymbol("SET-NTH"), list(makeSymbol("-"), makeSymbol("N"), CommonSymbols.ONE_INTEGER), makeSymbol("ARGLIST"), makeSymbol("NEW-VALUE")), list(RET, makeSymbol("NEW-VALUE"))),
	    list(makeSymbol("CLET"), list(list(makeSymbol("GROW-BY"), list(makeSymbol("-"), makeSymbol("N"), makeSymbol("ARITY"))), list(makeSymbol("EXTENSION"), list(makeSymbol("MAKE-LIST"), makeSymbol("GROW-BY")))), list(makeSymbol("CSETQ"), makeSymbol("ARITY"), makeSymbol("N")),
		    list(makeSymbol("RPLACA"), list(makeSymbol("LAST"), makeSymbol("EXTENSION")), makeSymbol("NEW-VALUE")), list(makeSymbol("CSETQ"), makeSymbol("ARGLIST"), list(makeSymbol("NCONC"), makeSymbol("ARGLIST"), makeSymbol("EXTENSION"))), list(RET, makeSymbol("NEW-VALUE"))));

    static final SubLList $list_alt1044 = list(
	    new SubLObject[] { list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("DECLARE-SIGNATURE"), list(makeSymbol("ARGTYPES")), makeKeyword("PUBLIC")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT-OPERATOR"), list(makeSymbol("STREAM")), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ARITY"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ARGN-TYPE"), list(makeSymbol("N"), makeSymbol("CLASS-TYPE")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ARGN"), list(makeSymbol("N"), makeSymbol("NEW-VALUE")), makeKeyword("PUBLIC")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ARG1"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ARG1"), list(makeSymbol("NEW-ARGN")), makeKeyword("PUBLIC")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ARG2"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ARG2"), list(makeSymbol("NEW-ARGN")), makeKeyword("PUBLIC")) });

    static final SubLList $list_alt1047 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("ARITY"), CommonSymbols.TWO_INTEGER), list(makeSymbol("CSETQ"), makeSymbol("ARGLIST"), list(makeSymbol("LIST"), CommonSymbols.NIL, CommonSymbols.NIL)),
	    list(makeSymbol("CSETQ"), makeSymbol("ARGTYPE-LIST"), list(makeSymbol("LIST"), list(QUOTE, makeSymbol("OBJECT")), list(QUOTE, makeSymbol("OBJECT")))), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1050 = list(
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("LENGTH="), makeSymbol("ARGTYPES"), CommonSymbols.TWO_INTEGER), makeString("(DECLARE-SIGNATURE ~S): The signature ~S does not conform the the requirement of a binary predicate."), makeSymbol("SELF"), makeSymbol("ARGTYPES")),
	    list(RET, list(makeSymbol("DECLARE-SIGNATURE"), makeSymbol("SELF"), makeSymbol("ARGTYPES"))));

    static final SubLList $list_alt1052 = list(list(makeSymbol("IGNORE"), makeSymbol("STREAM")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(":ABSTRACT-BINARY-PREDICATE")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1055 = list(list(RET, CommonSymbols.TWO_INTEGER));

    static final SubLList $list_alt1057 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("="), makeSymbol("N"), CommonSymbols.ONE_INTEGER), list(makeSymbol("="), makeSymbol("N"), CommonSymbols.TWO_INTEGER)),
	    makeString("(SET-ARGN-TYPE ~S): Argument indices for binary predicates must be 1 or 2."), makeSymbol("SELF")), list(RET, list(makeSymbol("SET-ARGN-TYPE"), makeSymbol("SUPER"), makeSymbol("N"), makeSymbol("CLASS-TYPE"))));

    static final SubLList $list_alt1059 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("="), makeSymbol("N"), CommonSymbols.ONE_INTEGER), list(makeSymbol("="), makeSymbol("N"), CommonSymbols.TWO_INTEGER)),
	    makeString("(SET-ARGN ~S): Argument indices for binary predicates must be 1 or 2."), makeSymbol("SELF")), list(RET, list(makeSymbol("SET-ARGN"), makeSymbol("SUPER"), makeSymbol("N"), makeSymbol("NEW-VALUE"))));

    static final SubLList $list_alt1062 = list(makeSymbol("NEW-ARGN"));

    static final SubLList $list_alt1063 = list(list(RET, list(makeSymbol("SET-ARGN"), makeSymbol("SELF"), CommonSymbols.ONE_INTEGER, makeSymbol("NEW-ARGN"))));

    static final SubLList $list_alt1066 = list(list(RET, list(makeSymbol("SET-ARGN"), makeSymbol("SELF"), CommonSymbols.TWO_INTEGER, makeSymbol("NEW-ARGN"))));

    static final SubLList $list_alt1069 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")));

    static final SubLList $list_alt1072 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")),
	    list(makeSymbol("DECLARE-SIGNATURE"), makeSymbol("SELF"), list(makeSymbol("LIST"), list(QUOTE, makeSymbol("CYBLACK-VALUE-EXPRESSION")), list(QUOTE, makeSymbol("CYBLACK-VALUE-EXPRESSION")))), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1078 = list(list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(":EQ")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1081 = list(
	    list(makeSymbol("CLET"), list(list(makeSymbol("ARG1"), list(makeSymbol("GET-ARGN"), makeSymbol("SELF"), CommonSymbols.ONE_INTEGER)), list(makeSymbol("ARG2"), list(makeSymbol("GET-ARGN"), makeSymbol("SELF"), CommonSymbols.TWO_INTEGER)), list(makeSymbol("RESULT"), CommonSymbols.NIL)),
		    list(makeSymbol("PUNLESS"), list(makeSymbol("COR"), makeSymbol("ARG1"), makeSymbol("ARG2")), list(RET, CommonSymbols.T)),
		    list(makeSymbol("PWHEN"), list(makeSymbol("CAND"), makeSymbol("ARG1"), makeSymbol("ARG2")),
			    list(makeSymbol("CSETQ"), makeSymbol("RESULT"), list(CommonSymbols.EQ, list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ARG1"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT")),
				    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ARG2"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT"))))),
		    list(RET, makeSymbol("RESULT"))));

    static final SubLList $list_alt1087 = list(list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(":EQUAL")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1090 = list(
	    list(makeSymbol("CLET"), list(list(makeSymbol("ARG1"), list(makeSymbol("GET-ARGN"), makeSymbol("SELF"), CommonSymbols.ONE_INTEGER)), list(makeSymbol("ARG2"), list(makeSymbol("GET-ARGN"), makeSymbol("SELF"), CommonSymbols.TWO_INTEGER)), list(makeSymbol("RESULT"), CommonSymbols.NIL)),
		    list(makeSymbol("PUNLESS"), list(makeSymbol("COR"), makeSymbol("ARG1"), makeSymbol("ARG2")), list(RET, CommonSymbols.T)),
		    list(makeSymbol("PWHEN"), list(makeSymbol("CAND"), makeSymbol("ARG1"), makeSymbol("ARG2")),
			    list(makeSymbol("CSETQ"), makeSymbol("RESULT"), list(makeSymbol("CYBLACK-EQUAL"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ARG1"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT")),
				    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ARG2"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT"))))),
		    list(RET, makeSymbol("RESULT"))));

    static final SubLList $list_alt1096 = list(list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(":ASSOC-EQUAL")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1099 = list(list(makeSymbol("CLET"),
	    list(list(makeSymbol("ARG1"), list(makeSymbol("GET-ARGN"), makeSymbol("SELF"), CommonSymbols.ONE_INTEGER)), list(makeSymbol("ARG2"), list(makeSymbol("GET-ARGN"), makeSymbol("SELF"), CommonSymbols.TWO_INTEGER)), list(makeSymbol("RESULT"), CommonSymbols.NIL)),
	    list(makeSymbol("PWHEN"), list(makeSymbol("NULL"), makeSymbol("ARG1")), list(RET, list(makeSymbol("NULL"), makeSymbol("ARG2")))), list(makeSymbol("PWHEN"), list(makeSymbol("NULL"), makeSymbol("ARG2")), list(RET, list(makeSymbol("NULL"), makeSymbol("ARG1")))),
	    list(makeSymbol("PWHEN"), list(makeSymbol("CAND"), makeSymbol("ARG1"), makeSymbol("ARG2")),
		    list(makeSymbol("CSETQ"), makeSymbol("RESULT"), list(makeSymbol("ASSOC-EQUAL"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ARG1"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT")),
			    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ARG2"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT"))))),
	    list(RET, makeSymbol("RESULT"))));

    static final SubLList $list_alt110 = list(makeSymbol("BINDING-LIST"));

    static final SubLList $list_alt1105 = list(list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(":LE")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1108 = list(
	    list(makeSymbol("CLET"), list(list(makeSymbol("ARG1"), list(makeSymbol("GET-ARGN"), makeSymbol("SELF"), CommonSymbols.ONE_INTEGER)), list(makeSymbol("ARG2"), list(makeSymbol("GET-ARGN"), makeSymbol("SELF"), CommonSymbols.TWO_INTEGER)), list(makeSymbol("RESULT"), CommonSymbols.NIL)),
		    list(makeSymbol("PUNLESS"), list(makeSymbol("COR"), makeSymbol("ARG1"), makeSymbol("ARG2")), list(RET, CommonSymbols.T)),
		    list(makeSymbol("PWHEN"), list(makeSymbol("CAND"), makeSymbol("ARG1"), makeSymbol("ARG2")),
			    list(makeSymbol("CSETQ"), makeSymbol("RESULT"), list(makeSymbol("CYBLACK-LE"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ARG1"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT")),
				    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ARG2"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT"))))),
		    list(RET, makeSymbol("RESULT"))));

    static final SubLList $list_alt111 = list(list(makeSymbol("CLET"), list(list(makeSymbol("NEW-INSTANCE"), list(makeSymbol("NEW"), makeSymbol("SELF"))), list(makeSymbol("REVERSED-BINDING-LIST"), list(makeSymbol("REVERSE"), makeSymbol("BINDING-LIST")))),
	    list(makeSymbol("CDOLIST"), list(makeSymbol("BINDING"), makeSymbol("REVERSED-BINDING-LIST")), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("PUSH-TYPED-LOCAL-BINDING"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("NEW-INSTANCE"),
		    list(makeSymbol("NTH"), CommonSymbols.ZERO_INTEGER, makeSymbol("BINDING")), list(makeSymbol("NTH"), CommonSymbols.ONE_INTEGER, makeSymbol("BINDING")), list(makeSymbol("NTH"), CommonSymbols.TWO_INTEGER, makeSymbol("BINDING")))),
	    list(RET, makeSymbol("NEW-INSTANCE"))));

    static final SubLList $list_alt1114 = list(list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(":LT")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1117 = list(
	    list(makeSymbol("CLET"), list(list(makeSymbol("ARG1"), list(makeSymbol("GET-ARGN"), makeSymbol("SELF"), CommonSymbols.ONE_INTEGER)), list(makeSymbol("ARG2"), list(makeSymbol("GET-ARGN"), makeSymbol("SELF"), CommonSymbols.TWO_INTEGER)), list(makeSymbol("RESULT"), CommonSymbols.NIL)),
		    list(makeSymbol("PUNLESS"), list(makeSymbol("COR"), makeSymbol("ARG1"), makeSymbol("ARG2")), list(RET, CommonSymbols.T)),
		    list(makeSymbol("PWHEN"), list(makeSymbol("CAND"), makeSymbol("ARG1"), makeSymbol("ARG2")),
			    list(makeSymbol("CSETQ"), makeSymbol("RESULT"), list(makeSymbol("CYBLACK-LT"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ARG1"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT")),
				    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ARG2"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT"))))),
		    list(RET, makeSymbol("RESULT"))));

    static final SubLList $list_alt1123 = list(list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(":GE")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1126 = list(
	    list(makeSymbol("CLET"), list(list(makeSymbol("ARG1"), list(makeSymbol("GET-ARGN"), makeSymbol("SELF"), CommonSymbols.ONE_INTEGER)), list(makeSymbol("ARG2"), list(makeSymbol("GET-ARGN"), makeSymbol("SELF"), CommonSymbols.TWO_INTEGER)), list(makeSymbol("RESULT"), CommonSymbols.NIL)),
		    list(makeSymbol("PUNLESS"), list(makeSymbol("COR"), makeSymbol("ARG1"), makeSymbol("ARG2")), list(RET, CommonSymbols.T)),
		    list(makeSymbol("PWHEN"), list(makeSymbol("CAND"), makeSymbol("ARG1"), makeSymbol("ARG2")),
			    list(makeSymbol("CSETQ"), makeSymbol("RESULT"), list(makeSymbol("CYBLACK-GE"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ARG1"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT")),
				    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ARG2"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT"))))),
		    list(RET, makeSymbol("RESULT"))));

    static final SubLList $list_alt113 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("ENVIRONMENT-TAG"), CommonSymbols.NIL), list(makeSymbol("CSETQ"), makeSymbol("OUTER-SCOPE"), CommonSymbols.NIL),
	    list(makeSymbol("CSETQ"), makeSymbol("LOCAL-BINDINGS"), CommonSymbols.NIL), list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt1133 = list(
	    list(makeSymbol("CLET"), list(list(makeSymbol("ARG1"), list(makeSymbol("GET-ARGN"), makeSymbol("SELF"), CommonSymbols.ONE_INTEGER)), list(makeSymbol("ARG2"), list(makeSymbol("GET-ARGN"), makeSymbol("SELF"), CommonSymbols.TWO_INTEGER)), list(makeSymbol("RESULT"), CommonSymbols.NIL)),
		    list(makeSymbol("PUNLESS"), list(makeSymbol("COR"), makeSymbol("ARG1"), makeSymbol("ARG2")), list(RET, CommonSymbols.T)),
		    list(makeSymbol("PWHEN"), list(makeSymbol("CAND"), makeSymbol("ARG1"), makeSymbol("ARG2")),
			    list(makeSymbol("CSETQ"), makeSymbol("RESULT"), list(makeSymbol("CYBLACK-GT"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ARG1"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT")),
				    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ARG2"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT"))))),
		    list(RET, makeSymbol("RESULT"))));

    static final SubLList $list_alt1142 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-VARIABLE-SYMBOL-P"), makeSymbol("NEW-VARIABLE")), makeString("(SET-VARIABLE ~S): ~S is not a Cyblack posting variable."), makeSymbol("SELF"), makeSymbol("NEW-VARIABLE")),
	    list(makeSymbol("CSETQ"), makeSymbol("VARIABLE"), makeSymbol("NEW-VARIABLE")), list(RET, makeSymbol("NEW-VARIABLE")));

    static final SubLList $list_alt1145 = list(list(makeSymbol("PUNLESS"), makeSymbol("ENVIRONMENT"), list(RET, CommonSymbols.NIL)),
	    list(makeSymbol("CLET"), list(list(makeSymbol("RESULT"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("ENVIRONMENT"), makeSymbol("VARIABLE")))), list(RET, makeSymbol("RESULT"))));

    static final SubLList $list_alt1148 = list(list(makeSymbol("POSTING-EXPRESSION"), makeKeyword("INSTANCE"), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-POSTING-EXPRESSION"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-POSTING-EXPRESSION"), list(makeSymbol("NEW-POSTING-EXPRESSION")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VALUE"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), CommonSymbols.NIL)), makeKeyword("PUBLIC")));

    static final SubLList $list_alt1152 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("POSTING-EXPRESSION"), CommonSymbols.NIL), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1155 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(:POSTING-OPERATION-EXPRESSION ~S)"), makeSymbol("POSTING-EXPRESSION")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1159 = list(list(RET, makeSymbol("POSTING-EXPRESSION")));

    static final SubLList $list_alt116 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("CYBLACK-ENVIRONMENT:[tag=~S;local-bindings="), makeSymbol("ENVIRONMENT-TAG")),
	    list(makeSymbol("CYBLACK-PRINT-BINDING-LIST"), makeSymbol("LOCAL-BINDINGS"), makeSymbol("STREAM")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(";outer-scope=~S]"), makeSymbol("OUTER-SCOPE")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1162 = list(makeSymbol("NEW-POSTING-EXPRESSION"));

    static final SubLList $list_alt1163 = list(
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-POSTING-EXPRESSION-P"), makeSymbol("NEW-POSTING-EXPRESSION")), makeString("(SET-POSTING-EXPRESSION ~S): ~S is not an instance of CYBLACK-POSTING-EXPRESSION."), makeSymbol("SELF"), makeSymbol("NEW-POSTING-EXPRESSION")),
	    list(makeSymbol("CSETQ"), makeSymbol("POSTING-EXPRESSION"), makeSymbol("NEW-POSTING-EXPRESSION")), list(RET, makeSymbol("NEW-POSTING-EXPRESSION")));

    static final SubLList $list_alt1166 = list(list(makeSymbol("PWHEN"), makeSymbol("POSTING-EXPRESSION"), list(makeSymbol("CLET"),
	    list(list(makeSymbol("POSTING-EXPRESSION-EVALUATED"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT")))), list(RET, makeSymbol("POSTING-EXPRESSION-EVALUATED")))),
	    list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt1171 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1173 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(:TYPE-OF ~S)"), makeSymbol("POSTING-EXPRESSION")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1176 = list(
	    list(makeSymbol("CLET"), list(list(makeSymbol("POSTING-VALUE"), list(makeSymbol("GET-VALUE"), makeSymbol("SUPER"), makeSymbol("ENVIRONMENT")))),
		    list(makeSymbol("PWHEN"), makeSymbol("POSTING-VALUE"),
			    list(makeSymbol("CLET"), list(list(makeSymbol("POSTING-TYPE"), list(makeSymbol("CYBLACK-POSTING-GET-DATATYPE"), makeSymbol("POSTING-VALUE")))), list(RET, list(makeSymbol("CYBLACK-GET-TYPENAME-IF-NOT-NULL"), makeSymbol("POSTING-TYPE")))))),
	    list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt1179 = list(new SubLObject[] { list(makeSymbol("METHOD-NAME-LITERAL"), makeKeyword("INSTANCE"), makeKeyword("PUBLIC")), list(makeSymbol("ACTUAL-ARGS"), makeKeyword("INSTANCE"), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-METHOD-NAME-LITERAL"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-METHOD-NAME-LITERAL"), list(makeSymbol("NEW-METHOD-NAME-LITERAL")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ACTUAL-ARGS"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ACTUAL-ARGS"), list(makeSymbol("NEW-ACTUAL-ARGS")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("EVALUATED-ARGS"), list(makeSymbol("ENVIRONMENT")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VALUE"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), CommonSymbols.NIL)), makeKeyword("PUBLIC")) });

    static final SubLList $list_alt1184 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("METHOD-NAME-LITERAL"), CommonSymbols.NIL), list(makeSymbol("CSETQ"), makeSymbol("ACTUAL-ARGS"), CommonSymbols.NIL), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1187 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(:CALL ~S ~S"), makeSymbol("POSTING-EXPRESSION"), makeSymbol("METHOD-NAME-LITERAL")),
	    list(makeSymbol("CDOLIST"), list(makeSymbol("ACTUAL-ARG"), makeSymbol("ACTUAL-ARGS")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(" ~S"), makeSymbol("ACTUAL-ARG"))), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(")")),
	    list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1191 = list(list(RET, makeSymbol("METHOD-NAME-LITERAL")));

    static final SubLList $list_alt1194 = list(makeSymbol("NEW-METHOD-NAME-LITERAL"));

    static final SubLList $list_alt1195 = list(
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-SYMBOL-P"), makeSymbol("NEW-METHOD-NAME-LITERAL")), makeString("(SET-METHOD-NAME-LITERAL ~S): ~S is not an instance of CYBLACK-SYMBOL."), makeSymbol("SELF"), makeSymbol("NEW-METHOD-NAME-LITERAL")),
	    list(makeSymbol("CSETQ"), makeSymbol("METHOD-NAME-LITERAL"), makeSymbol("NEW-METHOD-NAME-LITERAL")), list(RET, makeSymbol("NEW-METHOD-NAME-LITERAL")));

    static final SubLList $list_alt1199 = list(list(RET, makeSymbol("ACTUAL-ARGS")));

    static final SubLList $list_alt12 = list(new SubLObject[] { list(makeSymbol("VARIABLE"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("TYPE"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("VALUE"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("APRIORI"), makeKeyword("BOOLEAN"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("CLONE"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("UNBOUNDP"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VALUE"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-VALUE"), list(makeSymbol("NEW-VALUE")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-TYPE"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-TYPE"), list(makeSymbol("NEW-TYPE")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("HAS-TYPE-P"), list(makeSymbol("SOME-TYPE")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VARIABLE"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-VARIABLE"), list(makeSymbol("NEW-VARIABLE")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("APRIORI-P"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-APRIORI"), list(makeSymbol("NEW-VALUE")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("LISTIFY-BINDING"), CommonSymbols.NIL, makeKeyword("PUBLIC")) });

    static final SubLList $list_alt120 = list(list(makeSymbol("CLET"), list(list(makeSymbol("NEW-ENV"), list(makeSymbol("CLONE"), makeSymbol("SUPER"))), list(makeSymbol("NEW-LOCAL-BINDINGS"), list(makeSymbol("CYBLACK-BINDINGS-COPY"), makeSymbol("LOCAL-BINDINGS")))),
	    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-LOCAL-BINDINGS"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("NEW-ENV"), makeSymbol("NEW-LOCAL-BINDINGS")),
	    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-OUTER-SCOPE"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("NEW-ENV"),
		    list(makeSymbol("FIF"), makeSymbol("OUTER-SCOPE"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("CLONE"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("OUTER-SCOPE")), CommonSymbols.NIL)),
	    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ENVIRONMENT-TAG"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("NEW-ENV"), makeSymbol("ENVIRONMENT-TAG")), list(RET, makeSymbol("NEW-ENV"))));

    static final SubLList $list_alt1202 = list(makeSymbol("NEW-ACTUAL-ARGS"));

    static final SubLList $list_alt1203 = list(list(makeSymbol("CSETQ"), makeSymbol("ACTUAL-ARGS"), makeSymbol("NEW-ACTUAL-ARGS")), list(RET, makeSymbol("NEW-ACTUAL-ARGS")));

    static final SubLList $list_alt1207 = list(list(makeSymbol("CLET"), list(list(makeSymbol("EVALUATED-ARGS"), CommonSymbols.NIL)),
	    list(makeSymbol("CDOLIST-COLLECTING"), list(makeSymbol("ACTUAL-ARG"), makeSymbol("ACTUAL-ARGS"), makeSymbol("EVALUATED-ARGS")),
		    list(makeSymbol("FIF"), list(makeSymbol("CYBLACK-VALUE-EXPRESSION-P"), makeSymbol("ACTUAL-ARG")), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ACTUAL-ARG"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT")), makeSymbol("ACTUAL-ARG"))),
	    list(RET, makeSymbol("EVALUATED-ARGS"))));

    static final SubLList $list_alt1209 = list(list(makeSymbol("CLET"), list(list(makeSymbol("POSTING-VALUE"), list(makeSymbol("GET-VALUE"), makeSymbol("SUPER"), makeSymbol("ENVIRONMENT")))),
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-POSTING-P"), makeSymbol("POSTING-VALUE")), makeString("(GET-VALUE ~S): ~S is not an instance of CYBLACK-POSTING."), makeSymbol("SELF"), makeSymbol("POSTING-VALUE")),
	    list(makeSymbol("CLET"),
		    list(list(makeSymbol("METHOD-NAME-LITERAL-EVALUATED"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("METHOD-NAME-LITERAL"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT"))),
			    list(makeSymbol("ARGS"), list(makeSymbol("EVALUATED-ARGS"), makeSymbol("SELF"), makeSymbol("ENVIRONMENT")))),
		    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("SYMBOLP"), makeSymbol("METHOD-NAME-LITERAL-EVALUATED")), makeString("(GET-VALUE ~S): ~S is not a valid method name.  A symbol was expected."), makeSymbol("SELF"), makeSymbol("METHOD-NAME-LITERAL-EVALUATED")),
		    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("IMPLEMENTS-METHOD-P"), makeSymbol("OBJECT")), makeSymbol("POSTING-VALUE"), makeSymbol("METHOD-NAME-LITERAL-EVALUATED")), makeString("(GET-VALUE ~S): Posting ~S does not implement method ~S."),
			    makeSymbol("SELF"), makeSymbol("POSTING-VALUE"), makeSymbol("METHOD-NAME-LITERAL-EVALUATED")),
		    list(makeSymbol("CLET"),
			    list(list(makeSymbol("CLASS-NAME"), list(makeSymbol("CLASS-NAME"), list(makeSymbol("INSTANCE-CLASS"), makeSymbol("POSTING-VALUE")))),
				    list(makeSymbol("FUNCTION-NAME"), list(makeSymbol("RESOLVE-METHOD"), makeSymbol("METHOD-NAME-LITERAL-EVALUATED"), makeSymbol("CLASS-NAME")))),
			    list(makeSymbol("CYBLACK-MUST"), makeSymbol("FUNCTION-NAME"), makeString("(GET-VALUE ~S): Could not resolve method ~S of posting ~S to a function."), makeSymbol("SELF"), makeSymbol("METHOD-NAME-LITERAL-EVALUATED"), makeSymbol("POSTING-VALUE")),
			    list(RET, list(makeSymbol("APPLY"), makeSymbol("FUNCTION-NAME"), list(makeSymbol("LIST*"), makeSymbol("POSTING-VALUE"), makeSymbol("ARGS"))))))),
	    list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt1213 = list(list(makeSymbol("SLOT-NAME-LITERAL"), makeKeyword("INSTANCE"), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-SLOT-NAME"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-SLOT-NAME"), list(makeSymbol("NEW-SLOT-NAME")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VALUE"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), CommonSymbols.NIL)), makeKeyword("PUBLIC")));

    static final SubLList $list_alt1217 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("SLOT-NAME-LITERAL"), CommonSymbols.NIL), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1220 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(:GET-SLOT ~S ~S)"), makeSymbol("POSTING-EXPRESSION"), makeSymbol("SLOT-NAME-LITERAL")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1224 = list(list(RET, makeSymbol("SLOT-NAME-LITERAL")));

    static final SubLList $list_alt1227 = list(makeSymbol("NEW-SLOT-NAME"));

    static final SubLList $list_alt1228 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-SYMBOL-P"), makeSymbol("NEW-SLOT-NAME")), makeString("(SET-SLOT-NAME ~S): ~S is not an instance of CYBLACK-SYMBOL."), makeSymbol("SELF"), makeSymbol("NEW-SLOT-NAME")),
	    list(makeSymbol("CSETQ"), makeSymbol("SLOT-NAME-LITERAL"), makeSymbol("NEW-SLOT-NAME")), list(RET, makeSymbol("NEW-SLOT-NAME")));

    static final SubLList $list_alt1231 = list(list(makeSymbol("CLET"), list(list(makeSymbol("POSTING"), list(makeSymbol("GET-VALUE"), makeSymbol("SUPER"), makeSymbol("ENVIRONMENT")))),
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-POSTING-P"), makeSymbol("POSTING")), makeString("(GET-VALUE ~S): ~S is not an instance of CYBLACK-POSTING."), makeSymbol("SELF"), makeSymbol("POSTING")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("SLOT-NAME-LITERAL"), makeString("(GET-VALUE ~S): ~S is not a valid slot name literal."), makeSymbol("SELF"), makeSymbol("SLOT-NAME-LITERAL")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("SLOT-NAME"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("SLOT-NAME-LITERAL"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT")))),
		    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CAND"), makeSymbol("SLOT-NAME"), list(makeSymbol("SYMBOLP"), makeSymbol("SLOT-NAME"))), makeString("(GET-VALUE ~S): ~S is not a valid slot name.  A non-nil symbol was expected."), makeSymbol("SELF"), makeSymbol("SLOT-NAME")),
		    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("FUNCALL-CLASS-METHOD"), makeSymbol("POSTING"), list(QUOTE, makeSymbol("HAS-SLOT-P")), makeSymbol("SLOT-NAME")), makeString("(GET-VALUE ~S): Posting ~S does not have a ~S slot."), makeSymbol("POSTING"),
			    makeSymbol("SLOT-NAME")),
		    list(RET, list(makeSymbol("GET-SLOT"), makeSymbol("POSTING"), makeSymbol("SLOT-NAME"))))));

    static final SubLList $list_alt1234 = list(new SubLObject[] { list(makeSymbol("VALUE-EXPRESSION-LIST"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("ARITY"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT-OPERATOR"), list(makeSymbol("STREAM")), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT-VALUE-EXPRESSION-LIST"), list(makeSymbol("STREAM")), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ARITY"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ARITY"), list(makeSymbol("N")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ARGS"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ARGS"), list(makeSymbol("NEW-ARGS")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ARGN"), list(makeSymbol("N")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ARGN"), list(makeSymbol("N"), makeSymbol("NEW-ARG")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VALUE"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), CommonSymbols.NIL)), makeKeyword("PUBLIC")) });

    static final SubLList $list_alt1238 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("VALUE-EXPRESSION-LIST"), CommonSymbols.NIL), list(makeSymbol("CSETQ"), makeSymbol("ARITY"), CommonSymbols.NIL), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt124 = list(list(RET, makeSymbol("ENVIRONMENT-TAG")));

    static final SubLList $list_alt1241 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(")),
	    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("PRINT-OPERATOR")), makeSymbol("STREAM")),
	    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("PRINT-VALUE-EXPRESSION-LIST")), makeSymbol("STREAM")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(")")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1244 = list(list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(":ABSTRACT-ARITHMETIC-OPERATION")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1247 = list(list(makeSymbol("CDOLIST"), list(makeSymbol("VALUE-EXPRESSION"), makeSymbol("VALUE-EXPRESSION-LIST")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(" ~S"), makeSymbol("VALUE-EXPRESSION"))), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1251 = list(
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("N")), list(makeSymbol("INTEGERP"), makeSymbol("N"))), makeString("(SET-ARITY ~S): ~S is an illegal value for an arg position, NULL or an INTEGER was expected."), makeSymbol("SELF"),
		    makeSymbol("N")),
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("N")), list(makeSymbol(">"), makeSymbol("N"), CommonSymbols.ONE_INTEGER)), makeString("(SET-ARITY ~S): ~S is an illegal arity value.  A postive INTEGER was expected."), makeSymbol("SELF"),
		    makeSymbol("N")),
	    list(makeSymbol("CSETQ"), makeSymbol("ARITY"), makeSymbol("N")), list(RET, makeSymbol("N")));

    static final SubLList $list_alt1254 = list(list(RET, makeSymbol("VALUE-EXPRESSION-LIST")));

    static final SubLList $list_alt1256 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-VALUE-EXPRESSIONS-P"), makeSymbol("NEW-ARGS")), makeString("(SET-ARGS ~S): ~S is not a list of CYBLACK-VALUE-EXPRESSION instances."), makeSymbol("SELF"), makeSymbol("NEW-ARGS")),
	    list(makeSymbol("CSETQ"), makeSymbol("VALUE-EXPRESSION-LIST"), list(makeSymbol("COPY-LIST"), makeSymbol("NEW-ARGS"))), list(RET, makeSymbol("NEW-ARGS")));

    static final SubLList $list_alt1259 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("INTEGERP"), makeSymbol("N")), makeString("(GET-ARGN ~S): ~S is an illegal value for an arg position, an INTEGER was expected."), makeSymbol("SELF"), makeSymbol("N")),
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol(">"), makeSymbol("N"), CommonSymbols.ZERO_INTEGER), makeString("(GET-ARGN ~S): ~S is an illegal arg position."), makeSymbol("SELF"), makeSymbol("N")),
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("<="), makeSymbol("N"), list(makeSymbol("LENGTH"), makeSymbol("VALUE-EXPRESSION-LIST"))), makeString("(GET-ARGN ~S): Attempt to access non-existing arg index ~S."), makeSymbol("SELF"), makeSymbol("N")),
	    list(RET, list(makeSymbol("NTH"), list(makeSymbol("-"), makeSymbol("N"), CommonSymbols.ONE_INTEGER), makeSymbol("VALUE-EXPRESSION-LIST"))));

    static final SubLList $list_alt1261 = list(makeSymbol("N"), makeSymbol("NEW-ARG"));

    static final SubLList $list_alt1262 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("INTEGERP"), makeSymbol("N")), makeString("(SET-ARGN ~S): ~S is an illegal value for an arg position, an INTEGER was expected."), makeSymbol("SELF"), makeSymbol("N")),
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol(">"), makeSymbol("N"), CommonSymbols.ZERO_INTEGER), makeString("(SET-ARGN ~S): ~S is an illegal arg position."), makeSymbol("SELF"), makeSymbol("N")),
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("ARITY")), list(makeSymbol("<="), makeSymbol("N"), makeSymbol("ARITY"))), makeString("(SET-ARGN ~S): Arg position ~S is out of bounds."), makeSymbol("SELF"), makeSymbol("N")),
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-VALUE-EXPRESSION-P"), makeSymbol("NEW-ARG")), makeString("(SET-ARGN ~S): ~S is not an instance of CYBLACK-VALUE-EXPRESSION."), makeSymbol("SELF"), makeSymbol("NEW-ARG")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("ACTUAL-ARGS-COUNT"), list(makeSymbol("LENGTH"), makeSymbol("VALUE-EXPRESSION-LIST")))),
		    list(makeSymbol("PWHEN"), list(makeSymbol("<="), makeSymbol("N"), makeSymbol("ACTUAL-ARGS-COUNT")), list(makeSymbol("SET-NTH"), list(makeSymbol("-"), makeSymbol("N"), CommonSymbols.ONE_INTEGER), makeSymbol("VALUE-EXPRESSION-LIST"), makeSymbol("NEW-ARG")),
			    list(RET, makeSymbol("NEW-ARG"))),
		    list(makeSymbol("CLET"), list(list(makeSymbol("GROW-BY"), list(makeSymbol("-"), makeSymbol("N"), makeSymbol("ACTUAL-ARGS-COUNT"))), list(makeSymbol("EXTENSION"), list(makeSymbol("MAKE-LIST"), makeSymbol("GROW-BY")))),
			    list(makeSymbol("RPLACA"), list(makeSymbol("LAST"), makeSymbol("EXTENSION")), makeSymbol("NEW-ARG")), list(makeSymbol("CSETQ"), makeSymbol("VALUE-EXPRESSION-LIST"), list(makeSymbol("NCONC"), makeSymbol("VALUE-EXPRESSION-LIST"), makeSymbol("EXTENSION"))),
			    list(RET, makeSymbol("NEW-ARG")))));

    static final SubLList $list_alt1267 = list(
	    new SubLObject[] { list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT-OPERATOR"), list(makeSymbol("STREAM")), makeKeyword("PROTECTED")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ARITY"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ARITY"), list(makeSymbol("N")), makeKeyword("PUBLIC")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ARGS"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ARGS"), list(makeSymbol("NEW-ARGS")), makeKeyword("PUBLIC")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ARG1"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ARG1"), list(makeSymbol("NEW-ARG1")), makeKeyword("PUBLIC")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ARG2"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ARG2"), list(makeSymbol("NEW-ARG2")), makeKeyword("PUBLIC")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VALUE"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), CommonSymbols.NIL)), makeKeyword("PUBLIC")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("COMPUTE-VALUE"), list(makeSymbol("ARG1"), makeSymbol("ARG2")), makeKeyword("PROTECTED")) });

    static final SubLList $list_alt127 = list(makeSymbol("NEW-TAG"));

    static final SubLList $list_alt1270 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("VALUE-EXPRESSION-LIST"), CommonSymbols.NIL), list(makeSymbol("CSETQ"), makeSymbol("ARITY"), CommonSymbols.TWO_INTEGER),
	    list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1273 = list(list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("-")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1277 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("="), makeSymbol("N"), CommonSymbols.TWO_INTEGER), makeString("(SET-ARITY ~S): Binary arithmetic expressions must have an arity of 2.  ~S is not a legal arity."), makeSymbol("SELF"), makeSymbol("N")),
	    list(RET, list(makeSymbol("SET-ARITY"), makeSymbol("SUPER"), makeSymbol("N"))));

    static final SubLList $list_alt128 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("SYMBOLP"), makeSymbol("NEW-TAG")), makeString("(SET-ENVIRONMENT-TAG ~S): ~S is not a valid tag.  A symbol was expected."), makeSymbol("SELF"), makeSymbol("NEW-TAG")),
	    list(makeSymbol("CSETQ"), makeSymbol("ENVIRONMENT-TAG"), makeSymbol("NEW-TAG")), list(RET, makeSymbol("NEW-TAG")));

    static final SubLList $list_alt1280 = list(
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("LENGTH="), makeSymbol("NEW-ARGS"), CommonSymbols.TWO_INTEGER), makeString("(SET-ARGS ~S): Binary arithmetic expression accept only arg lists of length 2.  ~S is an illegal arg list."), makeSymbol("SELF"), makeSymbol("NEW-ARGS")),
	    list(RET, list(makeSymbol("SET-ARGS"), makeSymbol("SUPER"), makeSymbol("NEW-ARGS"))));

    static final SubLList $list_alt1286 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("LENGTH="), makeSymbol("VALUE-EXPRESSION-LIST"), CommonSymbols.TWO_INTEGER), makeString("(GET-VALUE ~S): Binary arithmetic expressions must have two actual args."), makeSymbol("SELF")),
	    list(makeSymbol("CYBLACK-SILENCE"), makeSymbol("VALUE-EXPRESSION-LIST")),
	    list(makeSymbol("CLET"),
		    list(list(makeSymbol("RESULT"),
			    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("COMPUTE-VALUE")),
				    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), list(makeSymbol("GET-ARG1"), makeSymbol("SELF")), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT")),
				    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), list(makeSymbol("GET-ARG2"), makeSymbol("SELF")), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT"))))),
		    list(RET, makeSymbol("RESULT"))));

    static final SubLList $list_alt1289 = list(makeSymbol("ARG1"), makeSymbol("ARG2"));

    static final SubLList $list_alt1290 = list(list(makeSymbol("IGNORE"), makeSymbol("ARG1"), makeSymbol("ARG2")), list(RET, CommonSymbols.ZERO_INTEGER));

    static final SubLList $list_alt1293 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT-OPERATOR"), list(makeSymbol("STREAM")), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("COMPUTE-VALUE"), list(makeSymbol("ARG1"), makeSymbol("ARG2")), makeKeyword("PROTECTED")));

    static final SubLList $list_alt1297 = list(list(RET, list(makeSymbol("-"), makeSymbol("ARG1"), makeSymbol("ARG2"))));

    static final SubLList $list_alt1302 = list(list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("/")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1305 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CNOT"), list(makeSymbol("="), makeSymbol("ARG2"), CommonSymbols.ZERO_INTEGER)), makeString("(COMPUTE-VALUE ~S): Cannot divide by 0."), makeSymbol("SELF")),
	    list(makeSymbol("CYBLACK-SILENCE"), makeSymbol("SELF")), list(RET, list(makeSymbol("/"), makeSymbol("ARG1"), makeSymbol("ARG2"))));

    static final SubLList $list_alt1308 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VALUE"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), CommonSymbols.NIL)), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("COMPUTE-VALUE"), list(makeSymbol("ARGS")), makeKeyword("PUBLIC")));

    static final SubLList $list_alt1311 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("ARITY"), CommonSymbols.NIL), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1314 = list(list(makeSymbol("CLET"), list(list(makeSymbol("VALUES"), CommonSymbols.NIL), list(makeSymbol("RESULT"), CommonSymbols.NIL)),
	    list(makeSymbol("CDOLIST-COLLECTING"), list(makeSymbol("VALUE-EXPRESSION"), makeSymbol("VALUE-EXPRESSION-LIST"), makeSymbol("VALUES")),
		    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("VALUE-EXPRESSION"), list(QUOTE, makeSymbol("GET-VALUE")), makeSymbol("ENVIRONMENT"))),
	    list(makeSymbol("CSETQ"), makeSymbol("RESULT"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("COMPUTE-VALUE")), makeSymbol("VALUES"))), list(RET, makeSymbol("RESULT"))));

    static final SubLList $list_alt1316 = list(makeSymbol("ARGS"));

    static final SubLList $list_alt1317 = list(list(makeSymbol("IGNORE"), makeSymbol("ARGS")), list(RET, CommonSymbols.ZERO_INTEGER));

    static final SubLList $list_alt132 = list(list(RET, makeSymbol("OUTER-SCOPE")));

    static final SubLList $list_alt1320 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT-OPERATOR"), list(makeSymbol("STREAM")), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("COMPUTE-VALUE"), list(makeSymbol("ARGS")), makeKeyword("PUBLIC")));

    static final SubLList $list_alt1323 = list(list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("+")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1326 = list(list(RET, list(makeSymbol("ADD-LIST"), makeSymbol("ARGS"))));

    static final SubLList $list_alt1331 = list(list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("*")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1334 = list(list(RET, list(makeSymbol("MULTIPLY-LIST"), makeSymbol("ARGS"))));

    static final SubLList $list_alt1337 = list(new SubLObject[] { list(makeSymbol("MAIN-PARSER"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("KEYWORD"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-MAIN-PARSER"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-MAIN-PARSER"), list(makeSymbol("NEW-MAIN-PARSER")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-BLACKBOARD"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-KEYWORD"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-KEYWORD"), list(makeSymbol("NEW-KEYWORD")), makeKeyword("PUBLIC")) });

    static final SubLList $list_alt1342 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("MAIN-PARSER"), CommonSymbols.NIL), list(makeSymbol("CSETQ"), makeSymbol("KEYWORD"), CommonSymbols.NIL), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1345 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("#<CYBLACK-PATTERN-PROCESSOR(~S)>"), makeSymbol("KEYWORD")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1349 = list(list(RET, makeSymbol("MAIN-PARSER")));

    static final SubLList $list_alt135 = list(makeSymbol("NEW-OUTER-SCOPE"));

    static final SubLList $list_alt1352 = list(makeSymbol("NEW-MAIN-PARSER"));

    static final SubLList $list_alt1353 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-MAIN-PARSER")), list(makeSymbol("CYBLACK-PARSER-P"), makeSymbol("NEW-MAIN-PARSER"))),
	    makeString("(SET-MAIN-PARSER ~S): ~S is not an instance of CYBLACK-PARSER."), makeSymbol("SELF"), makeSymbol("NEW-MAIN-PARSER")), list(makeSymbol("CSETQ"), makeSymbol("MAIN-PARSER"), makeSymbol("NEW-MAIN-PARSER")), list(RET, makeSymbol("NEW-MAIN-PARSER")));

    static final SubLList $list_alt1356 = list(list(makeSymbol("PWHEN"), makeSymbol("APPLICATION"), list(RET, list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("APPLICATION"), list(QUOTE, makeSymbol("GET-BLACKBOARD"))))), list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt1359 = list(list(RET, makeSymbol("KEYWORD")));

    static final SubLList $list_alt136 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-OUTER-SCOPE")), list(makeSymbol("CYBLACK-ENVIRONMENT-P"), makeSymbol("NEW-OUTER-SCOPE"))),
	    makeString("(SET-OUTER-SCOPE ~S): ~S is not an instance of CYBLACK-ENVIRONMENT."), makeSymbol("SELF"), makeSymbol("NEW-OUTER-SCOPE")), list(makeSymbol("CSETQ"), makeSymbol("OUTER-SCOPE"), makeSymbol("NEW-OUTER-SCOPE")), list(RET, makeSymbol("NEW-OUTER-SCOPE")));

    static final SubLList $list_alt1362 = list(makeSymbol("NEW-KEYWORD"));

    static final SubLList $list_alt1363 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-PATTERN-OPERATOR-P"), makeSymbol("NEW-KEYWORD")), makeString("(SET-KEYWORD ~S): ~S is not a valid keyword."), makeSymbol("SELF"), makeSymbol("NEW-KEYWORD")),
	    list(makeSymbol("CSETQ"), makeSymbol("KEYWORD"), makeSymbol("NEW-KEYWORD")), list(RET, makeSymbol("NEW-KEYWORD")));

    static final SubLList $list_alt1367 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PARSE"), list(makeSymbol("OBJECT")), makeKeyword("PUBLIC")));

    static final SubLList $list_alt1371 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("#<CYBLACK-ITEM-PARSER(~S)>"), makeSymbol("KEYWORD")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1375 = list(makeSymbol("OBJECT"));

    static final SubLList $list_alt1376 = list(list(RET, makeSymbol("OBJECT")));

    static final SubLList $list_alt1379 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PARSE"), list(makeSymbol("OBJECT")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("CREATE-EXPRESSION"), CommonSymbols.NIL, makeKeyword("PROTECTED")));

    static final SubLList $list_alt1382 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), makeKeyword("EXISTENTIAL-FUNCTOR")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1385 = list(
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CAND"), list(makeSymbol("LISTP"), makeSymbol("OBJECT")), list(makeSymbol("LENGTH="), makeSymbol("OBJECT"), CommonSymbols.THREE_INTEGER)), makeString("(PARSE ~S): ~S is not a valid argument to PARSE."), makeSymbol("SELF"),
		    makeSymbol("OBJECT")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("BINDING-CLAUSE"), list(makeSymbol("NTH"), CommonSymbols.ONE_INTEGER, makeSymbol("OBJECT"))), list(makeSymbol("LOGICAL-EXPRESSION-CLAUSE"), list(makeSymbol("NTH"), CommonSymbols.TWO_INTEGER, makeSymbol("OBJECT")))),
		    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CAND"), list(makeSymbol("LISTP"), makeSymbol("BINDING-CLAUSE")), list(makeSymbol("LENGTH="), makeSymbol("BINDING-CLAUSE"), CommonSymbols.TWO_INTEGER)), makeString("(PARSE ~S): ~S is not a well formed binding clause."),
			    makeSymbol("SELF"), makeSymbol("BINDING-CLAUSE")),
		    list(makeSymbol("CLET"), list(list(makeSymbol("VARIABLE-NAME"), list(makeSymbol("NTH"), CommonSymbols.ZERO_INTEGER, makeSymbol("BINDING-CLAUSE"))), list(makeSymbol("TYPE-STRING"), list(makeSymbol("NTH"), CommonSymbols.ONE_INTEGER, makeSymbol("BINDING-CLAUSE")))),
			    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-VARIABLE-SYMBOL-P"), makeSymbol("VARIABLE-NAME")), makeString("(PARSE ~S): ~S is not a legal cyblack variable name."), makeSymbol("SELF"), makeSymbol("VARIABLE-NAME")),
			    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("STRINGP"), makeSymbol("TYPE-STRING")), makeString("(PARSE ~S): ~S is not a legal cyblack datatype name."), makeSymbol("SELF"), makeSymbol("TYPE-STRING")),
			    list(makeSymbol("CYBLACK-MUST"), makeSymbol("APPLICATION"), makeString("(PARSE ~S): This item parser is not linked with an application."), makeSymbol("SELF")),
			    list(makeSymbol("CSETQ"), makeSymbol("VARIABLE-NAME"), list(makeSymbol("CYBLACK-SYMBOL-TO-CYBLACK-PACKAGE"), makeSymbol("VARIABLE-NAME"))),
			    list(makeSymbol("CLET"), list(list(makeSymbol("DATATYPE-DICTIONARY"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("APPLICATION"), list(QUOTE, makeSymbol("GET-DATATYPE-DICTIONARY"))))),
				    list(makeSymbol("CYBLACK-MUST"), makeSymbol("DATATYPE-DICTIONARY"), makeString("(PARSE ~S): No datatype dictionary is associated with the application of this item parser."), makeSymbol("SELF")),
				    list(makeSymbol("CLET"), list(list(makeSymbol("DATATYPE"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("DATATYPE-DICTIONARY"), list(QUOTE, makeSymbol("INTERN")), makeSymbol("TYPE-STRING"))),
					    list(makeSymbol("ENVIRONMENT"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-ENVIRONMENT")), list(QUOTE, makeSymbol("CYBLACK-ENVIRONMENT")))),
					    list(makeSymbol("EXPRESSION"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("CREATE-EXPRESSION"))))),
					    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("PUSH-TYPED-LOCAL-BINDING"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("ENVIRONMENT"), makeSymbol("VARIABLE-NAME"), makeSymbol("DATATYPE")),
					    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-CLOSURE"), makeSymbol("CYBLACK-EXISTENTIAL-EXPRESSION")), makeSymbol("EXPRESSION"), makeSymbol("ENVIRONMENT")),
					    list(makeSymbol("CLET"),
						    list(list(makeSymbol("LOCAL-BINDINGS"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-LOCAL-BINDINGS"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("ENVIRONMENT"))),
							    list(makeSymbol("BINDING"), list(makeSymbol("CYBLACK-BINDING-ASSOC"), makeSymbol("VARIABLE-NAME"), makeSymbol("LOCAL-BINDINGS")))),
						    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-BINDING"), makeSymbol("CYBLACK-EXISTENTIAL-EXPRESSION")), makeSymbol("EXPRESSION"), makeSymbol("BINDING")),
						    list(makeSymbol("CLET"), list(list(makeSymbol("LOGICAL-EXPRESSION"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("LOGICAL-EXPRESSION-CLAUSE")))),
							    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-LOGICAL-EXPRESSION"), makeSymbol("CYBLACK-EXISTENTIAL-EXPRESSION")), makeSymbol("EXPRESSION"), makeSymbol("LOGICAL-EXPRESSION")),
							    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("EXPRESSION"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
								    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-EXISTENTIAL-EXPRESSION")), makeSymbol("EXPRESSION"), makeSymbol("OBJECT"))),
							    list(RET, makeSymbol("EXPRESSION")))))))),
	    list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt1390 = list(list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-EXISTENTIAL-EXPRESSION")), list(QUOTE, makeSymbol("CYBLACK-EXISTENTIAL-EXPRESSION")))));

    static final SubLList $list_alt1393 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("CREATE-EXPRESSION"), CommonSymbols.NIL, makeKeyword("PROTECTED")));

    static final SubLList $list_alt1396 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), makeKeyword("FORALL")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1399 = list(list(makeSymbol("CLET"), list(list(makeSymbol("EXPRESSION"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-FORALL-EXPRESSION")), list(QUOTE, makeSymbol("CYBLACK-FORALL-EXPRESSION"))))),
	    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-APPLICATION"), makeSymbol("CYBLACK-FORALL-EXPRESSION")), makeSymbol("EXPRESSION"), makeSymbol("APPLICATION")), list(RET, makeSymbol("EXPRESSION"))));

    static final SubLList $list_alt140 = list(list(RET, makeSymbol("LOCAL-BINDINGS")));

    static final SubLList $list_alt1402 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PARSE"), list(makeSymbol("OBJECT")), makeKeyword("PUBLIC")));

    static final SubLList $list_alt1405 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), makeKeyword("PRESENT")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1408 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CONSP"), makeSymbol("OBJECT")), makeString("(PARSE ~S): ~S is not a valid argument to PARSE."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("ARGS"), list(makeSymbol("CDR"), makeSymbol("OBJECT")))),
		    list(makeSymbol("WHEN-CYBLACK-TYPE-CHECKING-ON"),
			    list(makeSymbol("CLET"), list(list(makeSymbol("KEY"), list(makeSymbol("CAR"), makeSymbol("OBJECT")))),
				    list(makeSymbol("MUST"), list(makeSymbol("CAND"), list(CommonSymbols.EQ, makeSymbol("KEY"), makeKeyword("PRESENT")), list(makeSymbol("SINGLETON?"), makeSymbol("ARGS")), list(makeSymbol("CYBLACK-VARIABLE-SYMBOL-P"), list(makeSymbol("CAR"), makeSymbol("ARGS")))),
					    makeString("(PARSE ~S): ~S is not a valid argument to PARSE."), makeSymbol("SELF"), makeSymbol("OBJECT")))),
		    list(makeSymbol("CLET"),
			    list(list(makeSymbol("VAR-EXPRESSION"), list(makeSymbol("CYBLACK-SYMBOL-TO-CYBLACK-PACKAGE"), list(makeSymbol("CAR"), makeSymbol("ARGS")))),
				    list(makeSymbol("PARSED-VAR-EXPRESSION"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("VAR-EXPRESSION"))),
				    list(makeSymbol("PRESENT-EXPRESSION"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-PRESENT-EXPRESSION")), list(QUOTE, makeSymbol("CYBLACK-PRESENT-EXPRESSION"))))),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-VARIABLE-REFERENCE"), makeSymbol("CYBLACK-PRESENT-EXPRESSION")), makeSymbol("PRESENT-EXPRESSION"), makeSymbol("PARSED-VAR-EXPRESSION")),
			    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("PRESENT-EXPRESSION"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-PRESENT-EXPRESSION")), makeSymbol("PRESENT-EXPRESSION"), makeSymbol("OBJECT"))),
			    list(RET, makeSymbol("PRESENT-EXPRESSION")))),
	    list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt1414 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), makeKeyword("EMPTY-P")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1417 = list(
	    list(makeSymbol("CYBLACK-MUST"),
		    list(makeSymbol("CAND"), list(makeSymbol("CONSP"), makeSymbol("OBJECT")), list(CommonSymbols.EQ, list(makeSymbol("CAR"), makeSymbol("OBJECT")), makeKeyword("EMPTY-P")), list(makeSymbol("STRINGP"), list(makeSymbol("CADR"), makeSymbol("OBJECT"))),
			    list(makeSymbol("NULL"), list(makeSymbol("CDDR"), makeSymbol("OBJECT")))),
		    makeString("(PARSE ~S): ~S is not a valid argument to PARSE."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("TYPE-STRING"), list(makeSymbol("CADR"), makeSymbol("OBJECT"))), list(makeSymbol("TYPE"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("TYPE-STRING")))),
		    list(makeSymbol("CYBLACK-MUST"), makeSymbol("TYPE"), makeString("(PARSE ~S): Failed to parse types string ~S."), makeSymbol("SELF"), makeSymbol("TYPE-STRING")),
		    list(makeSymbol("CLET"), list(list(makeSymbol("NEW-INSTANCE"), list(makeSymbol("NEW-OBJECT-INSTANCE"), list(QUOTE, makeSymbol("CYBLACK-EMPTY-P-EXPRESSION"))))),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-APPLICATION"), makeSymbol("CYBLACK-EMPTY-P-EXPRESSION")), makeSymbol("NEW-INSTANCE"), makeSymbol("APPLICATION")),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-DATATYPE"), makeSymbol("CYBLACK-EMPTY-P-EXPRESSION")), makeSymbol("NEW-INSTANCE"), makeSymbol("TYPE")),
			    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("NEW-INSTANCE"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-EMPTY-P-EXPRESSION")), makeSymbol("NEW-INSTANCE"), makeSymbol("OBJECT"))),
			    list(RET, makeSymbol("NEW-INSTANCE")))));

    static final SubLList $list_alt1423 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), $TYPE), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1426 = list(
	    list(makeSymbol("CYBLACK-MUST"),
		    list(makeSymbol("CAND"), list(makeSymbol("CONSP"), makeSymbol("OBJECT")), list(CommonSymbols.EQ, list(makeSymbol("CAR"), makeSymbol("OBJECT")), $TYPE), list(makeSymbol("STRINGP"), list(makeSymbol("CADR"), makeSymbol("OBJECT"))),
			    list(makeSymbol("NULL"), list(makeSymbol("CDDR"), makeSymbol("OBJECT")))),
		    makeString("(PARSE ~S): ~S is not a valid argument to PARSE."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("TYPE-STRING"), list(makeSymbol("CADR"), makeSymbol("OBJECT"))), list(makeSymbol("TYPE"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("TYPE-STRING")))),
		    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CAND"), makeSymbol("TYPE"), list(makeSymbol("CYBLACK-DATATYPE-P"), makeSymbol("TYPE"))), makeString("(PARSE ~S): ~S is not a valid type description."), makeSymbol("SELF"), makeSymbol("TYPE-STRING")),
		    list(makeSymbol("CLET"), list(list(makeSymbol("TYPE-EXPRESSION"), list(makeSymbol("NEW-CLASS-INSTANCE"), list(QUOTE, makeSymbol("CYBLACK-TYPE-EXPRESSION"))))),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-APPLICATION"), makeSymbol("CYBLACK-TYPE-EXPRESSION")), makeSymbol("TYPE-EXPRESSION"), makeSymbol("APPLICATION")),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-BASE-TYPE"), makeSymbol("CYBLACK-TYPE-EXPRESSION")), makeSymbol("TYPE-EXPRESSION"), makeSymbol("TYPE")),
			    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("TYPE-EXPRESSION"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-TYPE-EXPRESSION")), makeSymbol("TYPE-EXPRESSION"), makeSymbol("OBJECT"))),
			    list(RET, makeSymbol("TYPE-EXPRESSION")))));

    static final SubLList $list_alt143 = list(makeSymbol("NEW-LOCAL-BINDINGS"));

    static final SubLList $list_alt1432 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), makeKeyword("SUBTYPE")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1435 = list(
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CAND"), list(makeSymbol("CONSP"), makeSymbol("OBJECT")), list(CommonSymbols.EQ, list(makeSymbol("CAR"), makeSymbol("OBJECT")), makeKeyword("SUBTYPE")), list(makeSymbol("STRINGP"), list(makeSymbol("CADR"), makeSymbol("OBJECT")))),
		    makeString("(PARSE ~S): ~S is not a valid argument to PARSE."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CLET"),
		    list(list(makeSymbol("TYPE-STRING"), list(makeSymbol("CADR"), makeSymbol("OBJECT"))), list(makeSymbol("TYPE"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("TYPE-STRING"))),
			    list(makeSymbol("QUALIFIER"), list(makeSymbol("CDDR"), makeSymbol("OBJECT")))),
		    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CAND"), makeSymbol("TYPE"), list(makeSymbol("CYBLACK-DATATYPE-P"), makeSymbol("TYPE"))), makeString("(PARSE ~S): ~S is not a valid type description."), makeSymbol("SELF"), makeSymbol("TYPE-STRING")),
		    list(makeSymbol("CLET"), list(list(makeSymbol("METHOD"), CommonSymbols.NIL), list(makeSymbol("ARGS"), CommonSymbols.NIL)), list(makeSymbol("PUNLESS"), makeSymbol("QUALIFIER"),
			    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CAND"), list(makeSymbol("CONSP"), makeSymbol("QUALIFIER")), list(makeSymbol("CAR"), makeSymbol("QUALIFIER")), list(makeSymbol("SYMBOLP"), list(makeSymbol("CAR"), makeSymbol("QUALIFIER")))),
				    makeString("(PARSE ~S): ~S is not a valid method name."), makeSymbol("SELF"), list(makeSymbol("CAR"), makeSymbol("QUALIFIER"))),
			    list(makeSymbol("CSETQ"), makeSymbol("METHOD"), list(makeSymbol("CAR"), makeSymbol("QUALIFIER"))),
			    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("LISTP"), list(makeSymbol("CDR"), makeSymbol("QUALIFIER"))), makeString("(PARSE ~S): ~S is not a valid argument list."), makeSymbol("SELF"), list(makeSymbol("CDR"), makeSymbol("QUALIFIER"))),
			    list(makeSymbol("CSETQ"), makeSymbol("ARGS"), list(makeSymbol("CDR"), makeSymbol("QUALIFIER"))),
			    list(makeSymbol("CLET"), list(list(makeSymbol("PARSED-ARGS"), CommonSymbols.NIL), list(makeSymbol("PARSED-METHOD"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("METHOD")))),
				    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-SYMBOL-P"), makeSymbol("PARSED-METHOD")), makeString("(PARSE ~S): ~S did not parse into a valid symbol."), makeSymbol("SELF"), makeSymbol("METHOD")),
				    list(makeSymbol("CDOLIST-COLLECTING"), list(makeSymbol("COMPONENT"), makeSymbol("ARGS"), makeSymbol("PARSED-ARGS")), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("COMPONENT"))),
				    list(makeSymbol("CLET"), list(list(makeSymbol("EXPRESSION"), list(makeSymbol("NEW-OBJECT-INSTANCE"), list(QUOTE, makeSymbol("CYBLACK-SUBTYPE-EXPRESSION"))))),
					    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-BASE-TYPE"), makeSymbol("CYBLACK-SUBTYPE-EXPRESSION")), makeSymbol("EXPRESSION"), makeSymbol("TYPE")),
					    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-PREDICATOR-METHOD"), makeSymbol("CYBLACK-SUBTYPE-EXPRESSION")), makeSymbol("EXPRESSION"),
						    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-VALUE"), makeSymbol("CYBLACK-SYMBOL")), makeSymbol("PARSED-METHOD"))),
					    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARGS"), makeSymbol("CYBLACK-SUBTYPE-EXPRESSION")), makeSymbol("EXPRESSION"), makeSymbol("PARSED-ARGS")),
					    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("EXPRESSION"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
						    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-SUBTYPE-EXPRESSION")), makeSymbol("EXPRESSION"), makeSymbol("OBJECT"))),
					    list(RET, makeSymbol("EXPRESSION"))))))),
	    list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt144 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-BINDINGS-P"), makeSymbol("NEW-LOCAL-BINDINGS")), makeString("(SET-LOCAL-BINDINGS ~S): ~S is not a list of CYBLACK-BINDING instances."), makeSymbol("SELF"), makeSymbol("NEW-LOCAL-BINDINGS")),
	    list(makeSymbol("CSETQ"), makeSymbol("LOCAL-BINDINGS"), makeSymbol("NEW-LOCAL-BINDINGS")), list(RET, makeSymbol("NEW-LOCAL-BINDINGS")));

    static final SubLList $list_alt1441 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), makeKeyword("PANEL")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1444 = list(
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CAND"), list(makeSymbol("CONSP"), makeSymbol("OBJECT")), list(CommonSymbols.EQ, list(makeSymbol("CAR"), makeSymbol("OBJECT")), makeKeyword("PANEL")), list(makeSymbol("NULL"), list(makeSymbol("CDDR"), makeSymbol("OBJECT")))),
		    makeString("(PARSE ~S): ~S is not a valid argument to PARSE."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CDESTRUCTURING-BIND"), list(makeSymbol("KEY"), makeSymbol("UNPARSED-TYPE-EXPRESSION")), makeSymbol("OBJECT"), list(makeSymbol("IGNORE"), makeSymbol("KEY")),
		    list(makeSymbol("CLET"), list(list(makeSymbol("PARSED-TYPE-EXPRESSION"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("UNPARSED-TYPE-EXPRESSION")))),
			    list(makeSymbol("CYBLACK-MUST"), makeSymbol("PARSED-TYPE-EXPRESSION"), makeString("(PARSE ~S): Failed to parse type expression ~S."), makeSymbol("SELF"), makeSymbol("UNPARSED-TYPE-EXPRESSION")),
			    list(makeSymbol("CLET"), list(list(makeSymbol("PANEL-EXPRESSION"), list(makeSymbol("NEW-CLASS-INSTANCE"), list(QUOTE, makeSymbol("CYBLACK-PANEL-EXPRESSION"))))),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-APPLICATION"), makeSymbol("CYBLACK-PANEL-EXPRESSION")), makeSymbol("PANEL-EXPRESSION"), makeSymbol("APPLICATION")),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-TYPE-EXPRESSION"), makeSymbol("CYBLACK-PANEL-EXPRESSION")), makeSymbol("PANEL-EXPRESSION"), makeSymbol("PARSED-TYPE-EXPRESSION")),
				    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("PANEL-EXPRESSION"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
					    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-PANEL-EXPRESSION")), makeSymbol("PANEL-EXPRESSION"), makeSymbol("OBJECT"))),
				    list(RET, makeSymbol("PANEL-EXPRESSION"))))));

    static final SubLList $list_alt1446 = list(makeSymbol("KEY"), makeSymbol("UNPARSED-TYPE-EXPRESSION"));

    static final SubLList $list_alt1451 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), makeKeyword("GET")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1454 = list(
	    list(makeSymbol("CYBLACK-MUST"),
		    list(makeSymbol("CAND"), list(makeSymbol("CONSP"), makeSymbol("OBJECT")), list(CommonSymbols.EQ, list(makeSymbol("CAR"), makeSymbol("OBJECT")), makeKeyword("GET")), list(makeSymbol("CONSP"), list(makeSymbol("CDR"), makeSymbol("OBJECT"))),
			    list(makeSymbol("CONSP"), list(makeSymbol("CDDR"), makeSymbol("OBJECT"))), list(makeSymbol("NULL"), list(makeSymbol("CDR"), list(makeSymbol("CDDR"), makeSymbol("OBJECT"))))),
		    makeString("(PARSE ~S): ~S is not a valid argument to parse."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CDESTRUCTURING-BIND"), list(makeSymbol("KEY"), makeSymbol("UNPARSED-PANEL-EXPRESSION"), makeSymbol("UNPARSED-KEY-EXPRESSION")), makeSymbol("OBJECT"), list(makeSymbol("IGNORE"), makeSymbol("KEY")),
		    list(makeSymbol("CLET"),
			    list(list(makeSymbol("PARSED-PANEL-EXPRESSION"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("UNPARSED-PANEL-EXPRESSION"))),
				    list(makeSymbol("PARSED-KEY-EXPRESSION"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("UNPARSED-KEY-EXPRESSION")))),
			    list(makeSymbol("CYBLACK-MUST"), makeSymbol("PARSED-PANEL-EXPRESSION"), makeString("(PARSE ~S): Failed to parse panel expression ~S."), makeSymbol("SELF"), makeSymbol("UNPARSED-PANEL-EXPRESSION")),
			    list(makeSymbol("CYBLACK-MUST"), makeSymbol("PARSED-KEY-EXPRESSION"), makeString("(PARSE ~S): Failed to parse key expression ~S."), makeSymbol("SELF"), makeSymbol("PARSED-KEY-EXPRESSION")),
			    list(makeSymbol("CLET"), list(list(makeSymbol("GET-EXPRESSION"), list(makeSymbol("NEW-CLASS-INSTANCE"), list(QUOTE, makeSymbol("CYBLACK-GET-EXPRESSION"))))),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-APPLICATION"), makeSymbol("CYBLACK-GET-EXPRESSION")), makeSymbol("GET-EXPRESSION"), makeSymbol("APPLICATION")),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-PANEL-EXPRESSION"), makeSymbol("CYBLACK-GET-EXPRESSION")), makeSymbol("GET-EXPRESSION"), makeSymbol("PARSED-PANEL-EXPRESSION")),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-KEY-EXPRESSION"), makeSymbol("CYBLACK-GET-EXPRESSION")), makeSymbol("GET-EXPRESSION"), makeSymbol("PARSED-KEY-EXPRESSION")),
				    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("GET-EXPRESSION"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
					    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-GET-EXPRESSION")), makeSymbol("GET-EXPRESSION"), makeSymbol("OBJECT"))),
				    list(RET, makeSymbol("GET-EXPRESSION"))))));

    static final SubLList $list_alt1456 = list(makeSymbol("KEY"), makeSymbol("UNPARSED-PANEL-EXPRESSION"), makeSymbol("UNPARSED-KEY-EXPRESSION"));

    static final SubLList $list_alt1461 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), makeKeyword("STRING")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1464 = list(
	    list(makeSymbol("CYBLACK-MUST"),
		    list(makeSymbol("CAND"), list(makeSymbol("CONSP"), makeSymbol("OBJECT")), list(CommonSymbols.EQ, list(makeSymbol("CAR"), makeSymbol("OBJECT")), makeKeyword("STRING")), list(makeSymbol("STRINGP"), list(makeSymbol("CADR"), makeSymbol("OBJECT"))),
			    list(makeSymbol("NULL"), list(makeSymbol("CDDR"), makeSymbol("OBJECT")))),
		    makeString("(PARSE ~S): ~S is not a valid argument to PARSE."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(makeSymbol("CYBLACK-SILENCE"), makeSymbol("SELF")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("STRING-LITERAL"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-STRING")), list(QUOTE, makeSymbol("CYBLACK-STRING"))))),
		    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-VALUE"), makeSymbol("CYBLACK-STRING")), makeSymbol("STRING-LITERAL"), list(makeSymbol("CADR"), makeSymbol("OBJECT"))),
		    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("STRING-LITERAL"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-STRING")), makeSymbol("STRING-LITERAL"), makeSymbol("OBJECT"))),
		    list(RET, makeSymbol("STRING-LITERAL"))));

    static final SubLList $list_alt1469 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), makeKeyword("MONITOR")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1472 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("LISTP"), makeSymbol("OBJECT")), makeString("(PARSE ~S): ~S is not a valid monitoring pattern."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CLET"),
		    list(list(makeSymbol("L-MONITOR-ARGS"), list(makeSymbol("CLASSES-GETF"), makeSymbol("OBJECT"), makeKeyword("MONITOR"))), list(makeSymbol("L-BINDINGS-LIST"), list(makeSymbol("CLASSES-GETF"), makeSymbol("OBJECT"), makeKeyword("BINDINGS"))),
			    list(makeSymbol("L-LOGICAL-FORM"), list(makeSymbol("CLASSES-GETF"), makeSymbol("OBJECT"), makeKeyword("WHERE")))),
		    list(makeSymbol("CMULTIPLE-VALUE-BIND"), list(makeSymbol("L-ACTION"), makeSymbol("L-QUALIFIER-OR-QUALIFIERS")), list(makeSymbol("CYBLACK-MONITORING-PATTERN-GET-TYPE-AND-QUALIFIERS"), makeSymbol("OBJECT")),
			    list(makeSymbol("CLET"),
				    list(list(makeSymbol("APPLICATION"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("GET-APPLICATION")))),
					    list(makeSymbol("DICTIONARY"), list(makeSymbol("FIF"), makeSymbol("APPLICATION"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("APPLICATION"), list(QUOTE, makeSymbol("GET-DATATYPE-DICTIONARY"))), CommonSymbols.NIL))),
				    list(makeSymbol("CYBLACK-MUST"), makeSymbol("DICTIONARY"), makeString("(PARSE ~S): No dictionary is associated with this item parser."), makeSymbol("SELF")),
				    list(makeSymbol("CLET"), list(list(makeSymbol("CURRENT-TYPE"), CommonSymbols.NIL)),
					    list(makeSymbol("CDOLIST"), list(makeSymbol("BINDING"), makeSymbol("L-MONITOR-ARGS")), list(makeSymbol("CSETQ"), makeSymbol("CURRENT-TYPE"), list(makeSymbol("CADR"), makeSymbol("BINDING"))),
						    list(makeSymbol("PUNLESS"), list(makeSymbol("COR"), list(makeSymbol("STRINGP"), makeSymbol("CURRENT-TYPE")), list(makeSymbol("CYBLACK-DATATYPE-P"), makeSymbol("CURRENT-TYPE"))),
							    list(makeSymbol("RPLACA"), list(makeSymbol("CDR"), makeSymbol("BINDING")), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("CURRENT-TYPE"))))),
					    list(makeSymbol("CDOLIST"), list(makeSymbol("BINDING"), makeSymbol("L-BINDINGS-LIST")), list(makeSymbol("CSETQ"), makeSymbol("CURRENT-TYPE"), list(makeSymbol("CADR"), makeSymbol("BINDING"))),
						    list(makeSymbol("PUNLESS"), list(makeSymbol("COR"), list(makeSymbol("STRINGP"), makeSymbol("CURRENT-TYPE")), list(makeSymbol("CYBLACK-DATATYPE-P"), makeSymbol("CURRENT-TYPE"))),
							    list(makeSymbol("RPLACA"), list(makeSymbol("CDR"), makeSymbol("BINDING")), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("CURRENT-TYPE")))))),
				    list(makeSymbol("CLET"),
					    list(list(makeSymbol("PARSED-MONITOR-ARGS"), list(makeSymbol("CYBLACK-ENVIRONMENT-PARSE-BINDING-LIST"), makeSymbol("DICTIONARY"), makeSymbol("L-MONITOR-ARGS"))),
						    list(makeSymbol("PARSED-BINDING-LIST"), list(makeSymbol("CYBLACK-ENVIRONMENT-PARSE-BINDING-LIST"), makeSymbol("DICTIONARY"), makeSymbol("L-BINDINGS-LIST"))),
						    list(makeSymbol("PARSED-WHERE"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("L-LOGICAL-FORM")))),
					    list(makeSymbol("CYBLACK-MUST"), makeSymbol("PARSED-MONITOR-ARGS"), makeString("(PARSE ~S): Failed to parse monitoring pattern args: ~S."), makeSymbol("SELF"), makeSymbol("L-MONITOR-ARGS")),
					    list(makeSymbol("CYBLACK-MUST"), makeSymbol("PARSED-BINDING-LIST"), makeString("(PARSE ~S): Failed to parse binding list: ~S."), makeSymbol("SELF"), makeSymbol("L-BINDINGS-LIST")),
					    list(makeSymbol("CYBLACK-MUST"), makeSymbol("L-ACTION"), makeString("(PARSE ~S): Failed to parse action: ~S."), makeSymbol("SELF"), makeSymbol("L-ACTION")),
					    list(new SubLObject[] { makeSymbol("CLET"), list(list(makeSymbol("MONITORING-PATTERN"), list(makeSymbol("NEW-OBJECT-INSTANCE"), list(QUOTE, makeSymbol("CYBLACK-MONITORING-PATTERN"))))),
						    list(makeSymbol("CYBLACK-FORMAT"), makeSymbol("*STANDARD-OUTPUT*"), makeString("~%Created new monitoring pattern!")),
						    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-OUTER-SCOPE"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("PARSED-BINDING-LIST"), makeSymbol("PARSED-MONITOR-ARGS")),
						    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-MONITOR-ARGS"), makeSymbol("CYBLACK-MONITORING-PATTERN")), makeSymbol("MONITORING-PATTERN"), makeSymbol("PARSED-MONITOR-ARGS")),
						    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-LOCAL-BINDINGS"), makeSymbol("CYBLACK-MONITORING-PATTERN")), makeSymbol("MONITORING-PATTERN"), makeSymbol("PARSED-BINDING-LIST")),
						    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ACTION"), makeSymbol("CYBLACK-MONITORING-PATTERN")), makeSymbol("MONITORING-PATTERN"), makeSymbol("L-ACTION")),
						    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ACTION-QUALIFIERS"), makeSymbol("CYBLACK-MONITORING-PATTERN")), makeSymbol("MONITORING-PATTERN"),
							    list(makeSymbol("FIF"), list(makeSymbol("LISTP"), makeSymbol("L-QUALIFIER-OR-QUALIFIERS")), makeSymbol("L-QUALIFIER-OR-QUALIFIERS"), list(makeSymbol("LIST"), makeSymbol("L-QUALIFIER-OR-QUALIFIERS")))),
						    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-LOGICAL-FORM"), makeSymbol("CYBLACK-MONITORING-PATTERN")), makeSymbol("MONITORING-PATTERN"), makeSymbol("PARSED-WHERE")),
						    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("MONITORING-PATTERN"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
							    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-MONITORING-PATTERN")), makeSymbol("MONITORING-PATTERN"), makeSymbol("OBJECT"))),
						    list(RET, makeSymbol("MONITORING-PATTERN")) }))))));

    static final SubLList $list_alt148 = list(
	    list(makeSymbol("CLET"), list(list(makeSymbol("UNBOUND-LOCAL-BINDINGS"), CommonSymbols.NIL)),
		    list(makeSymbol("CDOLIST-APPENDING"), list(makeSymbol("BINDING"), makeSymbol("LOCAL-BINDINGS"), makeSymbol("UNBOUND-LOCAL-BINDINGS")),
			    list(makeSymbol("FIF"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("UNBOUNDP"), makeSymbol("CYBLACK-BINDING")), makeSymbol("BINDING")), list(makeSymbol("LIST"), makeSymbol("BINDING")), CommonSymbols.NIL)),
		    list(RET, makeSymbol("UNBOUND-LOCAL-BINDINGS"))));

    static final SubLList $list_alt1482 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), makeKeyword("KS-ARGS")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1485 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("LISTP"), makeSymbol("OBJECT")), makeString("(PARSE ~S): ~S is not a valid argument to PARSE."), makeSymbol("SELF"), makeSymbol("OBJECT")), list(makeSymbol("CLET"),
	    list(list(makeSymbol("KS-ARGS"), list(makeSymbol("CLASSES-GETF"), makeSymbol("OBJECT"), makeKeyword("KS-ARGS"))), list(makeSymbol("BINDING-LIST"), list(makeSymbol("CLASSES-GETF"), makeSymbol("OBJECT"), makeKeyword("BINDING-LIST"))),
		    list(makeSymbol("WHERE"), list(makeSymbol("CLASSES-GETF"), makeSymbol("OBJECT"), makeKeyword("WHERE")))),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CLET"),
		    list(list(makeSymbol("APPLICATION"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("GET-APPLICATION")))),
			    list(makeSymbol("DICTIONARY"), list(makeSymbol("FIF"), makeSymbol("APPLICATION"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("APPLICATION"), list(QUOTE, makeSymbol("GET-DATATYPE-DICTIONARY"))), CommonSymbols.NIL))),
		    list(makeSymbol("CYBLACK-MUST"), makeSymbol("DICTIONARY"), makeString("(PARSE ~S): No dictionary is associated with this item parser."), makeSymbol("SELF")),
		    list(makeSymbol("CLET"), list(list(makeSymbol("CURRENT-TYPE"), CommonSymbols.NIL)), list(makeSymbol("CDOLIST"), list(makeSymbol("BINDING"), makeSymbol("KS-ARGS")), list(makeSymbol("CSETQ"), makeSymbol("CURRENT-TYPE"), list(makeSymbol("CADR"), makeSymbol("BINDING"))),
			    list(makeSymbol("PUNLESS"), list(makeSymbol("COR"), list(makeSymbol("STRINGP"), makeSymbol("CURRENT-TYPE")), list(makeSymbol("CYBLACK-DATATYPE-P"), makeSymbol("CURRENT-TYPE"))),
				    list(makeSymbol("RPLACA"), list(makeSymbol("CDR"), makeSymbol("BINDING")), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("CURRENT-TYPE"))))),
			    list(makeSymbol("CDOLIST"), list(makeSymbol("BINDING"), makeSymbol("BINDING-LIST")), list(makeSymbol("CSETQ"), makeSymbol("CURRENT-TYPE"), list(makeSymbol("CADR"), makeSymbol("BINDING"))),
				    list(makeSymbol("PUNLESS"), list(makeSymbol("COR"), list(makeSymbol("STRINGP"), makeSymbol("CURRENT-TYPE")), list(makeSymbol("CYBLACK-DATATYPE-P"), makeSymbol("CURRENT-TYPE"))),
					    list(makeSymbol("RPLACA"), list(makeSymbol("CDR"), makeSymbol("BINDING")), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("CURRENT-TYPE")))))),
		    list(makeSymbol("CLET"),
			    list(list(makeSymbol("PARSED-KS-ARGS"), list(makeSymbol("CYBLACK-ENVIRONMENT-PARSE-BINDING-LIST"), makeSymbol("DICTIONARY"), makeSymbol("KS-ARGS"))),
				    list(makeSymbol("PARSED-BINDING-LIST"), list(makeSymbol("CYBLACK-ENVIRONMENT-PARSE-BINDING-LIST"), makeSymbol("DICTIONARY"), makeSymbol("BINDING-LIST"))),
				    list(makeSymbol("PARSED-WHERE"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("WHERE")))),
			    list(makeSymbol("CYBLACK-MUST"), makeSymbol("PARSED-KS-ARGS"), makeString("(PARSE ~S): Failed to parse precondition pattern args: ~S."), makeSymbol("SELF"), makeSymbol("KS-ARGS")),
			    list(makeSymbol("CYBLACK-MUST"), makeSymbol("PARSED-BINDING-LIST"), makeString("(PARSE ~S): Failed to parse binding list: ~S."), makeSymbol("SELF"), makeSymbol("BINDING-LIST")),
			    list(makeSymbol("CLET"), list(list(makeSymbol("PRECONDITION-PATTERN"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-PRECON-PATTERN")), list(QUOTE, makeSymbol("CYBLACK-PRECON-PATTERN"))))),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-OUTER-SCOPE"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("PARSED-BINDING-LIST"), makeSymbol("PARSED-KS-ARGS")),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-KS-ARGS"), makeSymbol("CYBLACK-PRECON-PATTERN")), makeSymbol("PRECONDITION-PATTERN"), makeSymbol("PARSED-KS-ARGS")),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-LOCAL-BINDINGS"), makeSymbol("CYBLACK-PRECOND-PATTERN")), makeSymbol("PRECONDITION-PATTERN"), makeSymbol("PARSED-BINDING-LIST")),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-LOGICAL-FORM"), makeSymbol("CYBLACK-PRECOND-PATTERN")), makeSymbol("PRECONDITION-PATTERN"), makeSymbol("PARSED-WHERE")),
				    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("PRECONDITION-PATTERN"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
					    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-PRECON-PATTERN")), makeSymbol("PRECONDITION-PATTERN"), makeSymbol("OBJECT"))),
				    list(RET, makeSymbol("PRECONDITION-PATTERN")))))));

    static final SubLList $list_alt1490 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("NEW-EXPRESSION"), CommonSymbols.NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PARSE"), list(makeSymbol("OBJECT")), makeKeyword("PUBLIC")));

    static final SubLList $list_alt1494 = list(list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-SATISFACTION-EXPRESSION")), list(QUOTE, makeSymbol("CYBLACK-SATISFACTION-EXPRESSION")))));

    static final SubLList $list_alt1496 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), makeKeyword("SATISFY")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1499 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CONSP"), makeSymbol("OBJECT")), makeString("(PARSE ~S): ~S is not a valid satisfaction pattern."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(makeSymbol("CYBLACK-MUST"), list(CommonSymbols.EQ, list(makeSymbol("CAR"), makeSymbol("OBJECT")), makeKeyword("SATISFY")), makeString("(PARSE ~S): ~S is not a valid satisfaction pattern."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("ARGS"), list(makeSymbol("CDR"), makeSymbol("OBJECT")))),
		    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("LENGTH="), makeSymbol("ARGS"), CommonSymbols.TWO_INTEGER), makeString("(PARSE ~S): ~S is not a valid satisfaction pattern."), makeSymbol("SELF"), makeSymbol("OBJECT")),
		    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
		    list(makeSymbol("CLET"),
			    list(list(makeSymbol("APPLICATION"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("GET-APPLICATION")))),
				    list(makeSymbol("DICTIONARY"), list(makeSymbol("FIF"), makeSymbol("APPLICATION"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("APPLICATION"), list(QUOTE, makeSymbol("GET-DATATYPE-DICTIONARY"))), CommonSymbols.NIL))),
			    list(makeSymbol("CYBLACK-MUST"), makeSymbol("DICTIONARY"), makeString("(PARSE ~S): No dictionary is associated with this item parser."), makeSymbol("SELF")),
			    list(makeSymbol("CLET"), list(list(makeSymbol("BINDING-LIST"), list(makeSymbol("CAR"), makeSymbol("ARGS"))), list(makeSymbol("CURRENT-TYPE"), CommonSymbols.NIL)),
				    list(makeSymbol("CDOLIST"), list(makeSymbol("BINDING"), makeSymbol("BINDING-LIST")), list(makeSymbol("CSETQ"), makeSymbol("CURRENT-TYPE"), list(makeSymbol("CADR"), makeSymbol("BINDING"))),
					    list(makeSymbol("PUNLESS"), list(makeSymbol("COR"), list(makeSymbol("STRINGP"), makeSymbol("CURRENT-TYPE")), list(makeSymbol("CYBLACK-DATATYPE-P"), makeSymbol("CURRENT-TYPE"))),
						    list(makeSymbol("RPLACA"), list(makeSymbol("CDR"), makeSymbol("BINDING")), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("CURRENT-TYPE"))))),
				    list(makeSymbol("CLET"),
					    list(list(makeSymbol("PARSED-BINDING-LIST"), list(makeSymbol("CYBLACK-ENVIRONMENT-PARSE-BINDING-LIST"), makeSymbol("DICTIONARY"), makeSymbol("BINDING-LIST"))), list(makeSymbol("LOGICAL-EXPRESSION"), list(makeSymbol("CADR"), makeSymbol("ARGS"))),
						    list(makeSymbol("PARSED-LOGICAL-EXPRESSION"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("LOGICAL-EXPRESSION")))),
					    list(makeSymbol("CYBLACK-MUST"), makeSymbol("PARSED-BINDING-LIST"), makeString("(PARSE ~S): Failed to parse bindings list ~S."), makeSymbol("SELF"), makeSymbol("BINDING-LIST")),
					    list(makeSymbol("CYBLACK-MUST"), makeSymbol("PARSED-LOGICAL-EXPRESSION"), makeString("(PARSE ~S): Failed to parse logical expression ~S."), makeSymbol("SELF"), makeSymbol("LOGICAL-EXPRESSION")),
					    list(makeSymbol("CLET"), list(list(makeSymbol("SATISFACTION-EXPRESSION"), list(makeSymbol("CYBLACK-SATISFACTION-EXPRESSION-PARSER-NEW-EXPRESSION"), makeSymbol("SELF")))),
						    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-LOCAL-BINDINGS"), makeSymbol("CYBLACK-SATISFACTION-EXPRESSION")), makeSymbol("SATISFACTION-EXPRESSION"), makeSymbol("PARSED-BINDING-LIST")),
						    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-LOGICAL-EXPRESSION"), makeSymbol("CYBLACK-SATISFACTION-EXPRESSION")), makeSymbol("SATISFACTION-EXPRESSION"), makeSymbol("PARSED-LOGICAL-EXPRESSION")),
						    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("SATISFACTION-EXPRESSION"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
							    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-SATISFACTION-EXPRESSION")), makeSymbol("SATISFACTION-EXPRESSION"), makeSymbol("OBJECT"))),
						    list(RET, makeSymbol("SATISFACTION-EXPRESSION"))))))));

    static final SubLList $list_alt1505 = list(list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-SIMPLE-SATISFACTION-EXPRESSION")), list(QUOTE, makeSymbol("CYBLACK-SIMPLE-SATISFACTION-EXPRESSION")))));

    static final SubLList $list_alt1507 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), makeKeyword("SATISFY-SIMPLE")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt151 = list(makeSymbol("VARIABLE"), makeSymbol("&OPTIONAL"), list(makeSymbol("VALUE"), makeSymbol("*CYBLACK-UNBOUND-VALUE*")), list(makeSymbol("APRIORI-P"), CommonSymbols.NIL));

    static final SubLList $list_alt1510 = list(
	    list(makeSymbol("CYBLACK-MUST"),
		    list(makeSymbol("CAND"), list(makeSymbol("CONSP"), makeSymbol("OBJECT")), list(CommonSymbols.EQ, list(makeSymbol("CAR"), makeSymbol("OBJECT")), makeKeyword("SATISFY-SIMPLE")), list(makeSymbol("CONSP"), list(makeSymbol("CDR"), makeSymbol("OBJECT"))),
			    list(makeSymbol("NULL"), list(makeSymbol("CDDR"), makeSymbol("OBJECT")))),
		    makeString("(PARSE ~S): ~S is not a valid simple satisfaction expression."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(RET, list(makeSymbol("PARSE"), makeSymbol("SUPER"), list(makeSymbol("LIST"), makeKeyword("SATISFY"), CommonSymbols.NIL, list(makeSymbol("CADR"), makeSymbol("OBJECT"))))));

    static final SubLList $list_alt1515 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), makeKeyword("AND")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1518 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("LISTP"), makeSymbol("OBJECT")), makeString("(PARSE ~S): ~S is not a valid argument to PARSE."), makeSymbol("SELF")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("PARSED-ARGS"), CommonSymbols.NIL)),
		    list(makeSymbol("CDOLIST-COLLECTING"), list(makeSymbol("UNPARSED-ARG"), list(makeSymbol("CDR"), makeSymbol("OBJECT")), makeSymbol("PARSED-ARGS")),
			    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("UNPARSED-ARG"))),
		    list(makeSymbol("CLET"),
			    list(list(makeSymbol("PARSED-AND-EXPRESSION"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-AND-EXPRESSION")), list(QUOTE, makeSymbol("CYBLACK-AND-EXPRESSION")))), list(makeSymbol("ARG-INDEX"), CommonSymbols.ONE_INTEGER)),
			    list(makeSymbol("CDOLIST"), list(makeSymbol("PARSED-ARG"), makeSymbol("PARSED-ARGS")),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARGN"), makeSymbol("CYBLACK-AND-EXPRESSION")), makeSymbol("PARSED-AND-EXPRESSION"), makeSymbol("ARG-INDEX"), makeSymbol("PARSED-ARG")), list(makeSymbol("CINC"), makeSymbol("ARG-INDEX"))),
			    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("PARSED-AND-EXPRESSION"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-AND-EXPRESSION")), makeSymbol("PARSED-AND-EXPRESSION"), makeSymbol("OBJECT"))),
			    list(RET, makeSymbol("PARSED-AND-EXPRESSION")))));

    static final SubLList $list_alt152 = list(
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CAND"), makeSymbol("VARIABLE"), list(makeSymbol("SYMBOLP"), makeSymbol("VARIABLE"))), makeString("(PUSH-LOCAL-BINDING ~S): ~S is not a legal variable.  Variables must be non-nil symbols."), makeSymbol("SELF"), makeSymbol("VALUE")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("NEW-BINDING"), list(makeSymbol("CYBLACK-CREATE-BINDING"), makeSymbol("VARIABLE"), makeSymbol("VALUE")))),
		    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-APRIORI"), makeSymbol("CYBLACK-BINDING")), makeSymbol("NEW-BINDING"), makeSymbol("APRIORI-P")), list(makeSymbol("CPUSH"), makeSymbol("NEW-BINDING"), makeSymbol("LOCAL-BINDINGS")),
		    list(RET, makeSymbol("VALUE"))));

    static final SubLList $list_alt1524 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), makeKeyword("OR")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1527 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("LISTP"), makeSymbol("OBJECT")), makeString("(PARSE ~S): ~S is not a valid argument to PARSE."), makeSymbol("SELF")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("PARSED-ARGS"), CommonSymbols.NIL)),
		    list(makeSymbol("CDOLIST-COLLECTING"), list(makeSymbol("UNPARSED-ARG"), list(makeSymbol("CDR"), makeSymbol("OBJECT")), makeSymbol("PARSED-ARGS")),
			    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("UNPARSED-ARG"))),
		    list(makeSymbol("CLET"),
			    list(list(makeSymbol("PARSED-OR-EXPRESSION"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-OR-EXPRESSION")), list(QUOTE, makeSymbol("CYBLACK-OR-EXPRESSION")))), list(makeSymbol("ARG-INDEX"), CommonSymbols.ONE_INTEGER)),
			    list(makeSymbol("CDOLIST"), list(makeSymbol("PARSED-ARG"), makeSymbol("PARSED-ARGS")),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARGN"), makeSymbol("CYBLACK-OR-EXPRESSION")), makeSymbol("PARSED-OR-EXPRESSION"), makeSymbol("ARG-INDEX"), makeSymbol("PARSED-ARG")), list(makeSymbol("CINC"), makeSymbol("ARG-INDEX"))),
			    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("PARSED-OR-EXPRESSION"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-OR-EXPRESSION")), makeSymbol("PARSED-OR-EXPRESSION"), makeSymbol("OBJECT"))),
			    list(RET, makeSymbol("PARSED-OR-EXPRESSION")))));

    static final SubLList $list_alt1533 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), makeKeyword("NOT")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1536 = list(
	    list(makeSymbol("CYBLACK-MUST"),
		    list(makeSymbol("CAND"), list(makeSymbol("CONSP"), makeSymbol("OBJECT")), list(CommonSymbols.EQ, list(makeSymbol("CAR"), makeSymbol("OBJECT")), makeKeyword("NOT")), list(makeSymbol("CONSP"), list(makeSymbol("CDR"), makeSymbol("OBJECT"))),
			    list(makeSymbol("SINGLETON?"), list(makeSymbol("CDR"), makeSymbol("OBJECT")))),
		    makeString("(PARSE ~S): ~S is not a valid argument to PARSE."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CLET"),
		    list(list(makeSymbol("ARG"), list(makeSymbol("CADR"), makeSymbol("OBJECT"))), list(makeSymbol("PARSED-ARG"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG"))),
			    list(makeSymbol("PARSED-NOT-EXPRESSION"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-NOT-EXPRESSION")), list(QUOTE, makeSymbol("CYBLACK-NOT-EXPRESSION"))))),
		    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARG1"), makeSymbol("CYBLACK-NOT-EXPRESSION")), makeSymbol("PARSED-NOT-EXPRESSION"), makeSymbol("PARSED-ARG")),
		    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("PARSED-NOT-EXPRESSION"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-NOT-EXPRESSION")), makeSymbol("PARSED-NOT-EXPRESSION"), makeSymbol("OBJECT"))),
		    list(RET, makeSymbol("PARSED-NOT-EXPRESSION"))));

    static final SubLList $list_alt1542 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), makeKeyword("EQ")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1545 = list(
	    list(makeSymbol("CYBLACK-MUST"),
		    list(makeSymbol("CAND"), list(makeSymbol("CONSP"), makeSymbol("OBJECT")), list(CommonSymbols.EQ, list(makeSymbol("CAR"), makeSymbol("OBJECT")), makeKeyword("EQ")), list(makeSymbol("LENGTH="), list(makeSymbol("CDR"), makeSymbol("OBJECT")), CommonSymbols.TWO_INTEGER)),
		    makeString("(PARSE ~S): ~S is not a valid argument to PARSE."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("ARGS"), list(makeSymbol("CDR"), makeSymbol("OBJECT"))), list(makeSymbol("ARG1"), list(makeSymbol("CAR"), makeSymbol("ARGS"))), list(makeSymbol("ARG2"), list(makeSymbol("CADR"), makeSymbol("ARGS")))),
		    list(makeSymbol("CYBLACK-MUST"), makeSymbol("ARG1"), makeString("(PARSE ~S): Arg 1, ~S, is null."), makeSymbol("SELF"), makeSymbol("ARG1")),
		    list(makeSymbol("CYBLACK-MUST"), makeSymbol("ARG2"), makeString("(PARSE ~S): Arg 2, ~S, is null."), makeSymbol("SELF"), makeSymbol("ARG2")),
		    list(makeSymbol("CLET"),
			    list(list(makeSymbol("PARSED-ARG1"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG1"))),
				    list(makeSymbol("PARSED-ARG2"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG2"))),
				    list(makeSymbol("PARSED-EQ-PREDICATE"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-EQ-PREDICATE")), list(QUOTE, makeSymbol("CYBLACK-EQ-PREDICATE"))))),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARG1"), makeSymbol("CYBLACK-EQ-PREDICATE")), makeSymbol("PARSED-EQ-PREDICATE"), makeSymbol("PARSED-ARG1")),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARG2"), makeSymbol("CYBLACK-EQ-PREDICATE")), makeSymbol("PARSED-EQ-PREDICATE"), makeSymbol("PARSED-ARG2")),
			    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("PARSED-EQ-PREDICATE"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-EQ-PREDICATE")), makeSymbol("PARSED-EQ-PREDICATE"), makeSymbol("OBJECT"))),
			    list(RET, makeSymbol("PARSED-EQ-PREDICATE")))));

    static final SubLList $list_alt1551 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), makeKeyword("EQUAL")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1554 = list(
	    list(makeSymbol("CYBLACK-MUST"),
		    list(makeSymbol("CAND"), list(makeSymbol("CONSP"), makeSymbol("OBJECT")), list(CommonSymbols.EQUAL, list(makeSymbol("CAR"), makeSymbol("OBJECT")), makeKeyword("EQUAL")), list(makeSymbol("LENGTH="), list(makeSymbol("CDR"), makeSymbol("OBJECT")), CommonSymbols.TWO_INTEGER)),
		    makeString("(PARSE ~S): ~S is not a valid argument to PARSE."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("ARGS"), list(makeSymbol("CDR"), makeSymbol("OBJECT"))), list(makeSymbol("ARG1"), list(makeSymbol("CAR"), makeSymbol("ARGS"))), list(makeSymbol("ARG2"), list(makeSymbol("CADR"), makeSymbol("ARGS")))),
		    list(makeSymbol("CYBLACK-MUST"), makeSymbol("ARG1"), makeString("(PARSE ~S): Arg 1, ~S, is null."), makeSymbol("SELF"), makeSymbol("ARG1")),
		    list(makeSymbol("CYBLACK-MUST"), makeSymbol("ARG2"), makeString("(PARSE ~S): Arg 2, ~S, is null."), makeSymbol("SELF"), makeSymbol("ARG2")),
		    list(makeSymbol("CLET"),
			    list(list(makeSymbol("PARSED-ARG1"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG1"))),
				    list(makeSymbol("PARSED-ARG2"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG2"))),
				    list(makeSymbol("PARSED-EQUAL-PREDICATE"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-EQUAL-PREDICATE")), list(QUOTE, makeSymbol("CYBLACK-EQUAL-PREDICATE"))))),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARG1"), makeSymbol("CYBLACK-EQUAL-PREDICATE")), makeSymbol("PARSED-EQUAL-PREDICATE"), makeSymbol("PARSED-ARG1")),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARG2"), makeSymbol("CYBLACK-EQUAL-PREDICATE")), makeSymbol("PARSED-EQUAL-PREDICATE"), makeSymbol("PARSED-ARG2")),
			    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("PARSED-EQUAL-PREDICATE"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-EQUAL-PREDICATE")), makeSymbol("PARSED-EQUAL-PREDICATE"), makeSymbol("OBJECT"))),
			    list(RET, makeSymbol("PARSED-EQUAL-PREDICATE")))));

    static final SubLList $list_alt156 = list(makeSymbol("VARIABLE"), makeSymbol("TYPE"), makeSymbol("&OPTIONAL"), list(makeSymbol("VALUE"), makeSymbol("*CYBLACK-UNBOUND-VALUE*")), list(makeSymbol("APRIORI-P"), CommonSymbols.NIL));

    static final SubLList $list_alt1560 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), makeKeyword("ASSOC-EQUAL")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1563 = list(
	    list(makeSymbol("CYBLACK-MUST"),
		    list(makeSymbol("CAND"), list(makeSymbol("CONSP"), makeSymbol("OBJECT")), list(CommonSymbols.EQUAL, list(makeSymbol("CAR"), makeSymbol("OBJECT")), makeKeyword("ASSOC-EQUAL")), list(makeSymbol("LENGTH="), list(makeSymbol("CDR"), makeSymbol("OBJECT")), CommonSymbols.TWO_INTEGER)),
		    makeString("(PARSE ~S): ~S is not a valid argument to PARSE."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("ARGS"), list(makeSymbol("CDR"), makeSymbol("OBJECT"))), list(makeSymbol("ARG1"), list(makeSymbol("CAR"), makeSymbol("ARGS"))), list(makeSymbol("ARG2"), list(makeSymbol("CADR"), makeSymbol("ARGS")))),
		    list(makeSymbol("CYBLACK-MUST"), makeSymbol("ARG1"), makeString("(PARSE ~S): Arg 1, ~S, is null."), makeSymbol("SELF"), makeSymbol("ARG1")),
		    list(makeSymbol("CYBLACK-MUST"), makeSymbol("ARG2"), makeString("(PARSE ~S): Arg 2, ~S, is null."), makeSymbol("SELF"), makeSymbol("ARG2")),
		    list(makeSymbol("CLET"),
			    list(list(makeSymbol("PARSED-ARG1"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG1"))),
				    list(makeSymbol("PARSED-ARG2"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG2"))),
				    list(makeSymbol("PARSED-ASSOC-EQUAL-PREDICATE"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-ASSOC-EQUAL-PREDICATE")), list(QUOTE, makeSymbol("CYBLACK-ASSOC-EQUAL-PREDICATE"))))),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARG1"), makeSymbol("CYBLACK-ASSOC-EQUAL-PREDICATE")), makeSymbol("PARSED-ASSOC-EQUAL-PREDICATE"), makeSymbol("PARSED-ARG1")),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARG2"), makeSymbol("CYBLACK-ASSOC-EQUAL-PREDICATE")), makeSymbol("PARSED-ASSOC-EQUAL-PREDICATE"), makeSymbol("PARSED-ARG2")),
			    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("PARSED-ASSOC-EQUAL-PREDICATE"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-ASSOC-EQUAL-PREDICATE")), makeSymbol("PARSED-ASSOC-EQUAL-PREDICATE"), makeSymbol("OBJECT"))),
			    list(RET, makeSymbol("PARSED-ASSOC-EQUAL-PREDICATE")))));

    static final SubLList $list_alt1569 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), makeKeyword("LE")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt157 = list(
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CAND"), makeSymbol("VARIABLE"), list(makeSymbol("SYMBOLP"), makeSymbol("VARIABLE"))), makeString("(PUSH-TYPED-LOCAL-BINDING ~S): ~S is not a legal variable.  Variables must be non-nil symbols."), makeSymbol("SELF"), makeSymbol("VALUE")),
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("TYPE")), list(makeSymbol("CYBLACK-DATATYPE-P"), makeSymbol("TYPE"))), makeString("(PUSH-TYPED-LOCAL-BINDING ~S): ~S is not a legal CYBLACK-DATATYPE."), makeSymbol("SELF"), makeSymbol("TYPE")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("NEW-BINDING"), list(makeSymbol("CYBLACK-CREATE-TYPED-BINDING"), makeSymbol("VARIABLE"), makeSymbol("TYPE"), makeSymbol("VALUE")))),
		    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-APRIORI"), makeSymbol("CYBLACK-BINDING")), makeSymbol("NEW-BINDING"), makeSymbol("APRIORI-P")), list(makeSymbol("CPUSH"), makeSymbol("NEW-BINDING"), makeSymbol("LOCAL-BINDINGS")),
		    list(RET, makeSymbol("VALUE"))));

    static final SubLList $list_alt1572 = list(
	    list(makeSymbol("CYBLACK-MUST"),
		    list(makeSymbol("CAND"), list(makeSymbol("CONSP"), makeSymbol("OBJECT")), list(CommonSymbols.EQUAL, list(makeSymbol("CAR"), makeSymbol("OBJECT")), makeKeyword("LE")), list(makeSymbol("LENGTH="), list(makeSymbol("CDR"), makeSymbol("OBJECT")), CommonSymbols.TWO_INTEGER)),
		    makeString("(PARSE ~S): ~S is not a valid argument to PARSE."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("ARGS"), list(makeSymbol("CDR"), makeSymbol("OBJECT"))), list(makeSymbol("ARG1"), list(makeSymbol("CAR"), makeSymbol("ARGS"))), list(makeSymbol("ARG2"), list(makeSymbol("CADR"), makeSymbol("ARGS")))),
		    list(makeSymbol("CYBLACK-MUST"), makeSymbol("ARG1"), makeString("(PARSE ~S): Arg 1, ~S, is null."), makeSymbol("SELF"), makeSymbol("ARG1")),
		    list(makeSymbol("CYBLACK-MUST"), makeSymbol("ARG2"), makeString("(PARSE ~S): Arg 2, ~S, is null."), makeSymbol("SELF"), makeSymbol("ARG2")),
		    list(makeSymbol("CLET"),
			    list(list(makeSymbol("PARSED-ARG1"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG1"))),
				    list(makeSymbol("PARSED-ARG2"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG2"))),
				    list(makeSymbol("PARSED-LE-PREDICATE"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-EQUAL-PREDICATE")), list(QUOTE, makeSymbol("CYBLACK-LE-PREDICATE"))))),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARG1"), makeSymbol("CYBLACK-LE-PREDICATE")), makeSymbol("PARSED-LE-PREDICATE"), makeSymbol("PARSED-ARG1")),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARG2"), makeSymbol("CYBLACK-LE-PREDICATE")), makeSymbol("PARSED-LE-PREDICATE"), makeSymbol("PARSED-ARG2")),
			    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("PARSED-LE-PREDICATE"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-LE-PREDICATE")), makeSymbol("PARSED-LE-PREDICATE"), makeSymbol("OBJECT"))),
			    list(RET, makeSymbol("PARSED-LE-PREDICATE")))));

    static final SubLList $list_alt1578 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), makeKeyword("GE")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1581 = list(
	    list(makeSymbol("CYBLACK-MUST"),
		    list(makeSymbol("CAND"), list(makeSymbol("CONSP"), makeSymbol("OBJECT")), list(CommonSymbols.EQUAL, list(makeSymbol("CAR"), makeSymbol("OBJECT")), makeKeyword("LE")), list(makeSymbol("LENGTH="), list(makeSymbol("CDR"), makeSymbol("OBJECT")), CommonSymbols.TWO_INTEGER)),
		    makeString("(PARSE ~S): ~S is not a valid argument to PARSE."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("ARGS"), list(makeSymbol("CDR"), makeSymbol("OBJECT"))), list(makeSymbol("ARG1"), list(makeSymbol("CAR"), makeSymbol("ARGS"))), list(makeSymbol("ARG2"), list(makeSymbol("CADR"), makeSymbol("ARGS")))),
		    list(makeSymbol("CYBLACK-MUST"), makeSymbol("ARG1"), makeString("(PARSE ~S): Arg 1, ~S, is null."), makeSymbol("SELF"), makeSymbol("ARG1")),
		    list(makeSymbol("CYBLACK-MUST"), makeSymbol("ARG2"), makeString("(PARSE ~S): Arg 2, ~S, is null."), makeSymbol("SELF"), makeSymbol("ARG2")),
		    list(makeSymbol("CLET"),
			    list(list(makeSymbol("PARSED-ARG1"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG1"))),
				    list(makeSymbol("PARSED-ARG2"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG2"))),
				    list(makeSymbol("PARSED-GE-PREDICATE"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-EQUAL-PREDICATE")), list(QUOTE, makeSymbol("CYBLACK-GE-PREDICATE"))))),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARG1"), makeSymbol("CYBLACK-GE-PREDICATE")), makeSymbol("PARSED-GE-PREDICATE"), makeSymbol("PARSED-ARG1")),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARG2"), makeSymbol("CYBLACK-GE-PREDICATE")), makeSymbol("PARSED-GE-PREDICATE"), makeSymbol("PARSED-ARG2")),
			    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("PARSED-GE-PREDICATE"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-GE-PREDICATE")), makeSymbol("PARSED-GE-PREDICATE"), makeSymbol("OBJECT"))),
			    list(RET, makeSymbol("PARSED-GE-PREDICATE")))));

    static final SubLList $list_alt1587 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), makeKeyword("LT")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1590 = list(
	    list(makeSymbol("CYBLACK-MUST"),
		    list(makeSymbol("CAND"), list(makeSymbol("CONSP"), makeSymbol("OBJECT")), list(CommonSymbols.EQUAL, list(makeSymbol("CAR"), makeSymbol("OBJECT")), makeKeyword("LT")), list(makeSymbol("LENGTH="), list(makeSymbol("CDR"), makeSymbol("OBJECT")), CommonSymbols.TWO_INTEGER)),
		    makeString("(PARSE ~S): ~S is not a valid argument to PARSE."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("ARGS"), list(makeSymbol("CDR"), makeSymbol("OBJECT"))), list(makeSymbol("ARG1"), list(makeSymbol("CAR"), makeSymbol("ARGS"))), list(makeSymbol("ARG2"), list(makeSymbol("CADR"), makeSymbol("ARGS")))),
		    list(makeSymbol("CYBLACK-MUST"), makeSymbol("ARG1"), makeString("(PARSE ~S): Arg 1, ~S, is null."), makeSymbol("SELF"), makeSymbol("ARG1")),
		    list(makeSymbol("CYBLACK-MUST"), makeSymbol("ARG2"), makeString("(PARSE ~S): Arg 2, ~S, is null."), makeSymbol("SELF"), makeSymbol("ARG2")),
		    list(makeSymbol("CLET"),
			    list(list(makeSymbol("PARSED-ARG1"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG1"))),
				    list(makeSymbol("PARSED-ARG2"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG2"))),
				    list(makeSymbol("PARSED-LT-PREDICATE"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-EQUAL-PREDICATE")), list(QUOTE, makeSymbol("CYBLACK-LT-PREDICATE"))))),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARG1"), makeSymbol("CYBLACK-LT-PREDICATE")), makeSymbol("PARSED-LT-PREDICATE"), makeSymbol("PARSED-ARG1")),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARG2"), makeSymbol("CYBLACK-LT-PREDICATE")), makeSymbol("PARSED-LT-PREDICATE"), makeSymbol("PARSED-ARG2")),
			    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("PARSED-LT-PREDICATE"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-LT-PREDICATE")), makeSymbol("PARSED-LT-PREDICATE"), makeSymbol("OBJECT"))),
			    list(RET, makeSymbol("PARSED-LT-PREDICATE")))));

    static final SubLList $list_alt1596 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), makeKeyword("GT")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1599 = list(
	    list(makeSymbol("CYBLACK-MUST"),
		    list(makeSymbol("CAND"), list(makeSymbol("CONSP"), makeSymbol("OBJECT")), list(CommonSymbols.EQUAL, list(makeSymbol("CAR"), makeSymbol("OBJECT")), makeKeyword("LE")), list(makeSymbol("LENGTH="), list(makeSymbol("CDR"), makeSymbol("OBJECT")), CommonSymbols.TWO_INTEGER)),
		    makeString("(PARSE ~S): ~S is not a valid argument to PARSE."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("ARGS"), list(makeSymbol("CDR"), makeSymbol("OBJECT"))), list(makeSymbol("ARG1"), list(makeSymbol("CAR"), makeSymbol("ARGS"))), list(makeSymbol("ARG2"), list(makeSymbol("CADR"), makeSymbol("ARGS")))),
		    list(makeSymbol("CYBLACK-MUST"), makeSymbol("ARG1"), makeString("(PARSE ~S): Arg 1, ~S, is null."), makeSymbol("SELF"), makeSymbol("ARG1")),
		    list(makeSymbol("CYBLACK-MUST"), makeSymbol("ARG2"), makeString("(PARSE ~S): Arg 2, ~S, is null."), makeSymbol("SELF"), makeSymbol("ARG2")),
		    list(makeSymbol("CLET"),
			    list(list(makeSymbol("PARSED-ARG1"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG1"))),
				    list(makeSymbol("PARSED-ARG2"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG2"))),
				    list(makeSymbol("PARSED-GT-PREDICATE"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-EQUAL-PREDICATE")), list(QUOTE, makeSymbol("CYBLACK-GT-PREDICATE"))))),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARG1"), makeSymbol("CYBLACK-GT-PREDICATE")), makeSymbol("PARSED-GT-PREDICATE"), makeSymbol("PARSED-ARG1")),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARG2"), makeSymbol("CYBLACK-GT-PREDICATE")), makeSymbol("PARSED-GT-PREDICATE"), makeSymbol("PARSED-ARG2")),
			    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("PARSED-GT-PREDICATE"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-GT-PREDICATE")), makeSymbol("PARSED-GT-PREDICATE"), makeSymbol("OBJECT"))),
			    list(RET, makeSymbol("PARSED-GT-PREDICATE")))));

    static final SubLList $list_alt1605 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), makeKeyword("TYPE-OF")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1608 = list(
	    list(makeSymbol("CYBLACK-MUST"),
		    list(makeSymbol("CAND"), list(makeSymbol("CONSP"), makeSymbol("OBJECT")), list(makeSymbol("="), list(makeSymbol("LENGTH"), makeSymbol("OBJECT")), CommonSymbols.TWO_INTEGER), list(CommonSymbols.EQ, list(makeSymbol("CAR"), makeSymbol("OBJECT")), makeKeyword("TYPE-OF")),
			    list(makeSymbol("CYBLACK-VARIABLE-SYMBOL-P"), list(makeSymbol("CADR"), makeSymbol("OBJECT")))),
		    makeString("(PARSE ~S): ~S is an invalid TYPE-OF expression.  Expected: (:TYPE-OF <type name>)."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CLET"),
		    list(list(makeSymbol("VARIABLE-REFERENCE-PARSED"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), list(makeSymbol("CYBLACK-SYMBOL-TO-CYBLACK-PACKAGE"), list(makeSymbol("CADR"), makeSymbol("OBJECT")))))),
		    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-VARIABLE-REFERENCE-P"), makeSymbol("VARIABLE-REFERENCE-PARSED")), makeString("(PARSE ~S): Failed to parse ~S into a variable reference."), makeSymbol("SELF"), list(makeSymbol("CADR"), makeSymbol("OBJECT"))),
		    list(makeSymbol("CLET"), list(list(makeSymbol("TYPE-OF-EXPRESSION"), list(makeSymbol("NEW-OBJECT-INSTANCE"), list(QUOTE, makeSymbol("CYBLACK-TYPE-OF-EXPRESSION"))))),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-POSTING-EXPRESSION"), makeSymbol("CYBLACK-POSTING-OPERATION-EXPRESSION")), makeSymbol("TYPE-OF-EXPRESSION"), makeSymbol("VARIABLE-REFERENCE-PARSED")),
			    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("TYPE-OF-EXPRESSION"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-TYPE-OF-EXPRESSION")), makeSymbol("TYPE-OF-EXPRESSION"), makeSymbol("OBJECT"))),
			    list(RET, makeSymbol("TYPE-OF-EXPRESSION")))));

    static final SubLList $list_alt161 = list(makeSymbol("VARIABLE"));

    static final SubLList $list_alt1614 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), $CALL), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1617 = list(
	    list(makeSymbol("CYBLACK-MUST"),
		    list(makeSymbol("CAND"), list(makeSymbol("CONSP"), makeSymbol("OBJECT")), list(makeSymbol("LENGTH>="), makeSymbol("OBJECT"), CommonSymbols.THREE_INTEGER), list(CommonSymbols.EQ, list(makeSymbol("CAR"), makeSymbol("OBJECT")), $CALL),
			    list(makeSymbol("CYBLACK-VARIABLE-SYMBOL-P"), list(makeSymbol("CADR"), makeSymbol("OBJECT"))), list(makeSymbol("SYMBOLP"), list(makeSymbol("CAR"), list(makeSymbol("CDDR"), makeSymbol("OBJECT"))))),
		    makeString("(PARSE ~S): ~S is not a valid argument to PARSE."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CLET"),
		    list(list(makeSymbol("VARIABLE-REFERENCE"),
			    list(makeSymbol("FIF"), list(makeSymbol("SYMBOLP"), list(makeSymbol("CADR"), makeSymbol("OBJECT"))), list(makeSymbol("CYBLACK-SYMBOL-TO-CYBLACK-PACKAGE"), list(makeSymbol("CADR"), makeSymbol("OBJECT"))), list(makeSymbol("CADR"), makeSymbol("OBJECT")))),
			    list(makeSymbol("SYMBOL-EXPRESSION"), list(makeSymbol("CAR"), list(makeSymbol("CDDR"), makeSymbol("OBJECT")))),
			    list(makeSymbol("VARIABLE-REFERENCE-PARSED"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("VARIABLE-REFERENCE"))),
			    list(makeSymbol("SYMBOL-EXPRESSION-PARSED"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("SYMBOL-EXPRESSION")))),
		    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-VARIABLE-REFERENCE-P"), makeSymbol("VARIABLE-REFERENCE-PARSED")), makeString("(PARSE ~S): Failed to parse ~S into a variable reference."), makeSymbol("SELF"), makeSymbol("VARIABLE-REFERENCE")),
		    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-SYMBOL-P"), makeSymbol("SYMBOL-EXPRESSION-PARSED")), makeString("(PARSE ~S): Failed to parse ~S into a symbol literal."), makeSymbol("SELF"), makeSymbol("SYMBOL-EXPRESSION-PARSED")),
		    list(makeSymbol("CLET"), list(list(makeSymbol("PARSED-ARGS"), CommonSymbols.NIL), list(makeSymbol("NEW-PARSED-CALL-METHOD-EXPRESSION"), list(makeSymbol("NEW-OBJECT-INSTANCE"), list(QUOTE, makeSymbol("CYBLACK-CALL-METHOD-EXPRESSION"))))),
			    list(makeSymbol("CDOLIST-COLLECTING"), list(makeSymbol("ARG"), list(makeSymbol("CDR"), list(makeSymbol("CDDR"), makeSymbol("OBJECT"))), makeSymbol("PARSED-ARGS")),
				    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG"))),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-POSTING-EXPRESSION"), makeSymbol("CYBLACK-CALL-METHOD-EXPRESSION")), makeSymbol("NEW-PARSED-CALL-METHOD-EXPRESSION"), makeSymbol("VARIABLE-REFERENCE-PARSED")),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-METHOD-NAME-LITERAL"), makeSymbol("CYBLACK-CALL-METHOD-EXPRESSION")), makeSymbol("NEW-PARSED-CALL-METHOD-EXPRESSION"), makeSymbol("SYMBOL-EXPRESSION-PARSED")),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ACTUAL-ARGS"), makeSymbol("CYBLACK-CALL-METHOD-EXPRESSION")), makeSymbol("NEW-PARSED-CALL-METHOD-EXPRESSION"), makeSymbol("PARSED-ARGS")),
			    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("NEW-PARSED-CALL-METHOD-EXPRESSION"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-CALL-METHOD-EXPRESSION")), makeSymbol("NEW-PARSED-CALL-METHOD-EXPRESSION"), makeSymbol("OBJECT"))),
			    list(RET, makeSymbol("NEW-PARSED-CALL-METHOD-EXPRESSION")))));

    static final SubLList $list_alt162 = list(list(makeSymbol("CSETQ"), makeSymbol("LOCAL-BINDINGS"), list(makeSymbol("DELETE"), makeSymbol("VARIABLE"), makeSymbol("LOCAL-BINDINGS"), list(makeSymbol("FUNCTION"), CommonSymbols.EQ),
	    list(makeSymbol("QUOTE-METHOD"), list(makeSymbol("GET-VARIABLE"), makeSymbol("CYBLACK-BINDING"))), CommonSymbols.ZERO_INTEGER, CommonSymbols.NIL, CommonSymbols.ONE_INTEGER)), list(RET, makeSymbol("VARIABLE")));

    static final SubLList $list_alt1623 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), makeKeyword("GET-SLOT")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1626 = list(
	    list(makeSymbol("CYBLACK-MUST"),
		    list(makeSymbol("CAND"), list(makeSymbol("CONSP"), makeSymbol("OBJECT")), list(CommonSymbols.EQ, list(makeSymbol("CAR"), makeSymbol("OBJECT")), makeKeyword("GET-SLOT")), list(makeSymbol("LENGTH="), list(makeSymbol("CDR"), makeSymbol("OBJECT")), CommonSymbols.TWO_INTEGER)),
		    makeString("(PARSE ~S): ~S is not a valid argument to PARSE."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CLET"),
		    list(list(makeSymbol("ARGS"), list(makeSymbol("CDR"), makeSymbol("OBJECT"))), list(makeSymbol("ARG1"), list(makeSymbol("CAR"), makeSymbol("ARGS"))), list(makeSymbol("ARG2"), list(makeSymbol("CADR"), makeSymbol("ARGS"))),
			    list(makeSymbol("PARSED-ARG1"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG1"))),
			    list(makeSymbol("PARSED-ARG2"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG2"))),
			    list(makeSymbol("PARSED-SLOT-ACCESS"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-SLOT-ACCESS")), list(QUOTE, makeSymbol("CYBLACK-SLOT-ACCESS"))))),
		    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-POSTING-EXPRESSION"), makeSymbol("CYBLACK-SLOT-ACCESS")), makeSymbol("PARSED-SLOT-ACCESS"), makeSymbol("PARSED-ARG1")),
		    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-SLOT-NAME"), makeSymbol("CYBLACK-SLOT-ACCESS")), makeSymbol("PARSED-SLOT-ACCESS"), makeSymbol("PARSED-ARG2")),
		    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("PARSED-SLOT-ACCESS"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-SLOT-ACCESS")), makeSymbol("PARSED-SLOT-ACCESS"), makeSymbol("OBJECT"))),
		    list(RET, makeSymbol("PARSED-SLOT-ACCESS"))));

    static final SubLList $list_alt1632 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("-"))), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1635 = list(
	    list(makeSymbol("CYBLACK-MUST"),
		    list(makeSymbol("CAND"), list(makeSymbol("CONSP"), makeSymbol("OBJECT")), list(CommonSymbols.EQ, list(makeSymbol("CAR"), makeSymbol("OBJECT")), list(QUOTE, makeSymbol("-"))),
			    list(makeSymbol("LENGTH="), list(makeSymbol("CDR"), makeSymbol("OBJECT")), CommonSymbols.TWO_INTEGER)),
		    makeString("(PARSE ~S): ~S is not a valid argument to PARSE."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CLET"),
		    list(list(makeSymbol("ARGS"), list(makeSymbol("CDR"), makeSymbol("OBJECT"))), list(makeSymbol("ARG1"), list(makeSymbol("CAR"), makeSymbol("ARGS"))), list(makeSymbol("ARG2"), list(makeSymbol("CADR"), makeSymbol("ARGS"))),
			    list(makeSymbol("PARSED-ARG1"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG1"))),
			    list(makeSymbol("PARSED-ARG2"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG2"))),
			    list(makeSymbol("PARSED-SUBTRACTION-EXPRESSION"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-SUBTRACTION-EXPRESSION")), list(QUOTE, makeSymbol("CYBLACK-SUBTRACTION-EXPRESSION"))))),
		    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARG1"), makeSymbol("CYBLACK-SUBTRACTION-EXPRESSION")), makeSymbol("PARSED-SUBTRACTION-EXPRESSION"), makeSymbol("PARSED-ARG1")),
		    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARG2"), makeSymbol("CYBLACK-SUBTRACTION-EXPRESSION")), makeSymbol("PARSED-SUBTRACTION-EXPRESSION"), makeSymbol("PARSED-ARG2")),
		    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("PARSED-SUBTRACTION-EXPRESSION"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-SUBTRACTION-EXPRESSION")), makeSymbol("PARSED-SUBTRACTION-EXPRESSION"), makeSymbol("OBJECT"))),
		    list(RET, makeSymbol("PARSED-SUBTRACTION-EXPRESSION"))));

    static final SubLList $list_alt1641 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("+"))), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1644 = list(
	    list(makeSymbol("CYBLACK-MUST"),
		    list(makeSymbol("CAND"), list(makeSymbol("CONSP"), makeSymbol("OBJECT")), list(CommonSymbols.EQ, list(makeSymbol("CAR"), makeSymbol("OBJECT")), list(QUOTE, makeSymbol("+"))),
			    list(makeSymbol("LENGTH="), list(makeSymbol("CDR"), makeSymbol("OBJECT")), CommonSymbols.TWO_INTEGER)),
		    makeString("(PARSE ~S): ~S is not a valid argument to PARSE."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CLET"),
		    list(list(makeSymbol("ARGS"), list(makeSymbol("CDR"), makeSymbol("OBJECT"))), list(makeSymbol("ARG1"), list(makeSymbol("CAR"), makeSymbol("ARGS"))), list(makeSymbol("ARG2"), list(makeSymbol("CADR"), makeSymbol("ARGS"))),
			    list(makeSymbol("PARSED-ARG1"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG1"))),
			    list(makeSymbol("PARSED-ARG2"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG2"))),
			    list(makeSymbol("PARSED-ADDITION-EXPRESSION"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-ADDITION-EXPRESSION")), list(QUOTE, makeSymbol("CYBLACK-ADDITION-EXPRESSION"))))),
		    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARG1"), makeSymbol("CYBLACK-ADDITION-EXPRESSION")), makeSymbol("PARSED-ADDITION-EXPRESSION"), makeSymbol("PARSED-ARG1")),
		    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARG2"), makeSymbol("CYBLACK-ADDITION-EXPRESSION")), makeSymbol("PARSED-ADDITION-EXPRESSION"), makeSymbol("PARSED-ARG2")),
		    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("PARSED-ADDITION-EXPRESSION"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-ADDITION-EXPRESSION")), makeSymbol("PARSED-ADDITION-EXPRESSION"), makeSymbol("OBJECT"))),
		    list(RET, makeSymbol("PARSED-ADDITION-EXPRESSION"))));

    static final SubLList $list_alt1650 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("*"))), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1653 = list(
	    list(makeSymbol("CYBLACK-MUST"),
		    list(makeSymbol("CAND"), list(makeSymbol("CONSP"), makeSymbol("OBJECT")), list(CommonSymbols.EQ, list(makeSymbol("CAR"), makeSymbol("OBJECT")), list(QUOTE, makeSymbol("*"))),
			    list(makeSymbol("LENGTH="), list(makeSymbol("CDR"), makeSymbol("OBJECT")), CommonSymbols.TWO_INTEGER)),
		    makeString("(PARSE ~S): ~S is not a valid argument to PARSE."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CLET"),
		    list(list(makeSymbol("ARGS"), list(makeSymbol("CDR"), makeSymbol("OBJECT"))), list(makeSymbol("ARG1"), list(makeSymbol("CAR"), makeSymbol("ARGS"))), list(makeSymbol("ARG2"), list(makeSymbol("CADR"), makeSymbol("ARGS"))),
			    list(makeSymbol("PARSED-ARG1"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG1"))),
			    list(makeSymbol("PARSED-ARG2"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG2"))),
			    list(makeSymbol("PARSED-MULTIPLICATION-EXPRESSION"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-MULTIPLICATION-EXPRESSION")), list(QUOTE, makeSymbol("CYBLACK-MULTIPLICATION-EXPRESSION"))))),
		    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARG1"), makeSymbol("CYBLACK-MULTIPLICATION-EXPRESSION")), makeSymbol("PARSED-MULTIPLICATION-EXPRESSION"), makeSymbol("PARSED-ARG1")),
		    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARG2"), makeSymbol("CYBLACK-MULTIPLICATION-EXPRESSION")), makeSymbol("PARSED-MULTIPLICATION-EXPRESSION"), makeSymbol("PARSED-ARG2")),
		    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("PARSED-MULTIPLICATION-EXPRESSION"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-MULTIPLICATION-EXPRESSION")), makeSymbol("PARSED-MULTIPLICATION-EXPRESSION"), makeSymbol("OBJECT"))),
		    list(RET, makeSymbol("PARSED-MULTIPLICATION-EXPRESSION"))));

    static final SubLList $list_alt1659 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("SET-KEYWORD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("/"))), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt166 = list(
	    list(makeSymbol("CLET"), list(list(makeSymbol("EXISTING-BINDING"), list(makeSymbol("CYBLACK-BINDING-ASSOC"), makeSymbol("VARIABLE"), makeSymbol("LOCAL-BINDINGS")))), list(makeSymbol("PWHEN"), makeSymbol("EXISTING-BINDING"), list(RET, makeSymbol("EXISTING-BINDING"))),
		    list(makeSymbol("PWHEN"), makeSymbol("OUTER-SCOPE"), list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-BINDING"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("OUTER-SCOPE"), makeSymbol("VARIABLE")))), list(RET, CommonSymbols.NIL)));

    static final SubLList $list_alt1662 = list(
	    list(makeSymbol("CYBLACK-MUST"),
		    list(makeSymbol("CAND"), list(makeSymbol("CONSP"), makeSymbol("OBJECT")), list(CommonSymbols.EQ, list(makeSymbol("CAR"), makeSymbol("OBJECT")), list(QUOTE, makeSymbol("/"))),
			    list(makeSymbol("LENGTH="), list(makeSymbol("CDR"), makeSymbol("OBJECT")), CommonSymbols.TWO_INTEGER)),
		    makeString("(PARSE ~S): ~S is not a valid argument to PARSE."), makeSymbol("SELF"), makeSymbol("OBJECT")),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("MAIN-PARSER"), makeString("(PARSE ~S): No main parser is associated with this item parser."), makeSymbol("SELF")),
	    list(makeSymbol("CLET"),
		    list(list(makeSymbol("ARGS"), list(makeSymbol("CDR"), makeSymbol("OBJECT"))), list(makeSymbol("ARG1"), list(makeSymbol("CAR"), makeSymbol("ARGS"))), list(makeSymbol("ARG2"), list(makeSymbol("CADR"), makeSymbol("ARGS"))),
			    list(makeSymbol("PARSED-ARG1"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG1"))),
			    list(makeSymbol("PARSED-ARG2"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("MAIN-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("ARG2"))),
			    list(makeSymbol("PARSED-DIVISION-EXPRESSION"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-DIVISION-EXPRESSION")), list(QUOTE, makeSymbol("CYBLACK-DIVISION-EXPRESSION"))))),
		    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARG1"), makeSymbol("CYBLACK-DIVISION-EXPRESSION")), makeSymbol("PARSED-DIVISION-EXPRESSION"), makeSymbol("PARSED-ARG1")),
		    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ARG2"), makeSymbol("CYBLACK-DIVISION-EXPRESSION")), makeSymbol("PARSED-DIVISION-EXPRESSION"), makeSymbol("PARSED-ARG2")),
		    list(makeSymbol("PWHEN"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("PARSED-DIVISION-EXPRESSION"), list(QUOTE, makeSymbol("CYBLACK-PATTERN"))),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-UNPARSED-PATTERN"), makeSymbol("CYBLACK-DIVISION-EXPRESSION")), makeSymbol("PARSED-DIVISION-EXPRESSION"), makeSymbol("OBJECT"))),
		    list(RET, makeSymbol("PARSED-DIVISION-EXPRESSION"))));

    static final SubLList $list_alt1666 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("COMPILE"), list(makeSymbol("PARSED-OBJECT")), makeKeyword("PUBLIC")));

    static final SubLList $list_alt1670 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("#<CYBLACK-ITEM-COMPILER(~S)>"), makeSymbol("KEYWORD")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1676 = list(new SubLObject[] { list(makeSymbol("PARSING-DISPATCH-TABLE"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("COMPILING-DISPATCH-TABLE"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("REGISTER-PARSERS"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-APPLICATION"), list(makeSymbol("NEW-APPLICATION")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("REGISTER-PARSER"), list(makeSymbol("KEYWORD"), makeSymbol("PARSER-CLASS")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("RETRIEVE-PARSER"), list(makeSymbol("KEYWORD")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("REGISTER-COMPILER"), list(makeSymbol("KEYWORD"), makeSymbol("COMPILER-CLASS")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("RETRIEVE-COMPILER"), list(makeSymbol("KEYWORD")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PARSE"), list(makeSymbol("OBJECT")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("COMPILE"), list(makeSymbol("PARSED-OBJECT")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("ON-STARTUP"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("ON-SHUTDOWN"), CommonSymbols.NIL, makeKeyword("PUBLIC")) });

    static final SubLList $list_alt1682 = list(new SubLObject[] { list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), makeKeyword("KS-ARGS"), list(QUOTE, makeSymbol("CYBLACK-PRECON-PATTERN-PARSER"))),
	    list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), makeKeyword("MONITOR"), list(QUOTE, makeSymbol("CYBLACK-MONITORING-PATTERN-PARSER"))),
	    list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), makeKeyword("SATISFY"), list(QUOTE, makeSymbol("CYBLACK-SATISFACTION-EXPRESSION-PARSER"))),
	    list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), makeKeyword("SATISFY-SIMPLE"), list(QUOTE, makeSymbol("CYBLACK-SIMPLE-SATISFACTION-EXPRESSION-PARSER"))),
	    list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), makeKeyword("FORALL"), list(QUOTE, makeSymbol("CYBLACK-FORALL-EXPRESSION-PARSER"))),
	    list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), makeKeyword("PRESENT"), list(QUOTE, makeSymbol("CYBLACK-PRESENT-EXPRESSION-PARSER"))),
	    list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), makeKeyword("EMPTY-P"), list(QUOTE, makeSymbol("CYBLACK-EMPTY-P-EXPRESSION-PARSER"))),
	    list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), $TYPE, list(QUOTE, makeSymbol("CYBLACK-TYPE-EXPRESSION-PARSER"))),
	    list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), makeKeyword("PANEL"), list(QUOTE, makeSymbol("CYBLACK-PANEL-EXPRESSION-PARSER"))),
	    list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), makeKeyword("GET"), list(QUOTE, makeSymbol("CYBLACK-GET-EXPRESSION-PARSER"))), list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), makeKeyword("AND"), list(QUOTE, makeSymbol("CYBLACK-AND-PARSER"))),
	    list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), makeKeyword("OR"), list(QUOTE, makeSymbol("CYBLACK-OR-PARSER"))), list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), makeKeyword("NOT"), list(QUOTE, makeSymbol("CYBLACK-NOT-PARSER"))),
	    list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), makeKeyword("EQ"), list(QUOTE, makeSymbol("CYBLACK-EQ-PREDICATE-PARSER"))),
	    list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), makeKeyword("EQUAL"), list(QUOTE, makeSymbol("CYBLACK-EQUAL-PREDICATE-PARSER"))),
	    list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), makeKeyword("ASSOC-EQUAL"), list(QUOTE, makeSymbol("CYBLACK-ASSOC-EQUAL-PREDICATE-PARSER"))),
	    list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), makeKeyword("LE"), list(QUOTE, makeSymbol("CYBLACK-LE-PREDICATE-PARSER"))),
	    list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), makeKeyword("GE"), list(QUOTE, makeSymbol("CYBLACK-GE-PREDICATE-PARSER"))),
	    list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), makeKeyword("LT"), list(QUOTE, makeSymbol("CYBLACK-LT-PREDICATE-PARSER"))),
	    list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), makeKeyword("GT"), list(QUOTE, makeSymbol("CYBLACK-GT-PREDICATE-PARSER"))),
	    list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), makeKeyword("TYPE-OF"), list(QUOTE, makeSymbol("CYBLACK-TYPE-OF-EXPRESSION-PARSER"))),
	    list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), makeKeyword("GET-SLOT"), list(QUOTE, makeSymbol("CYBLACK-SLOT-ACCESS-PARSER"))),
	    list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), $CALL, list(QUOTE, makeSymbol("CYBLACK-CALL-METHOD-EXPRESSION-PARSER"))),
	    list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), makeKeyword("STRING"), list(QUOTE, makeSymbol("CYBLACK-STRING-EXPRESSION-PARSER"))),
	    list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), list(QUOTE, makeSymbol("+")), list(QUOTE, makeSymbol("CYBLACK-ADDITION-EXPRESSION-PARSER"))),
	    list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), list(QUOTE, makeSymbol("-")), list(QUOTE, makeSymbol("CYBLACK-SUBTRACTION-EXPRESSION-PARSER"))),
	    list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), list(QUOTE, makeSymbol("*")), list(QUOTE, makeSymbol("CYBLACK-MULTIPLICATION-EXPRESSION-PARSER"))),
	    list(makeSymbol("REGISTER-PARSER"), makeSymbol("SELF"), list(QUOTE, makeSymbol("/")), list(QUOTE, makeSymbol("CYBLACK-DIVISION-EXPRESSION-PARSER"))), list(RET, makeSymbol("SELF")) });

    static final SubLList $list_alt1685 = list(list(makeSymbol("ON-STARTUP"), makeSymbol("SUPER")), list(makeSymbol("REGISTER-PARSERS"), makeSymbol("SELF")),
	    list(makeSymbol("PWHEN"), makeSymbol("PARSING-DISPATCH-TABLE"),
		    list(makeSymbol("DO-DICTIONARY"), list(makeSymbol("KEY"), makeSymbol("REGISTERED-PARSER"), makeSymbol("PARSING-DISPATCH-TABLE")), list(makeSymbol("IGNORE"), makeSymbol("KEY")),
			    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("REGISTERED-PARSER"), list(QUOTE, makeSymbol("SET-APPLICATION")), makeSymbol("APPLICATION")),
			    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("REGISTERED-PARSER"), list(QUOTE, makeSymbol("ON-STARTUP"))))),
	    list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt1689 = list(list(makeSymbol("ON-SHUTDOWN"), makeSymbol("SELF")), list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt169 = list(makeSymbol("VALUE"));

    static final SubLList $list_alt1691 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("PARSING-DISPATCH-TABLE"), list(makeSymbol("NEW-DICTIONARY"))),
	    list(makeSymbol("CSETQ"), makeSymbol("COMPILING-DISPATCH-TABLE"), list(makeSymbol("NEW-DICTIONARY"))), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt1694 = list(makeSymbol("NEW-APPLICATION"));

    static final SubLList $list_alt1695 = list(list(makeSymbol("SET-APPLICATION"), makeSymbol("SUPER"), makeSymbol("NEW-APPLICATION")),
	    list(makeSymbol("PWHEN"), makeSymbol("PARSING-DISPATCH-TABLE"), list(makeSymbol("DO-DICTIONARY"), list(makeSymbol("KEY"), makeSymbol("PARSER"), makeSymbol("PARSING-DISPATCH-TABLE")), list(makeSymbol("IGNORE"), makeSymbol("KEY")), list(makeSymbol("PWHEN"),
		    list(makeSymbol("CAND"), makeSymbol("PARSER"), list(makeSymbol("CYBLACK-ITEM-PARSER-P"), makeSymbol("PARSER"))), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-APPLICATION"), makeSymbol("CYBLACK-ITEM-PARSER")), makeSymbol("PARSER"), makeSymbol("NEW-APPLICATION"))))),
	    list(RET, makeSymbol("NEW-APPLICATION")));

    static final SubLList $list_alt1698 = list(makeSymbol("KEYWORD"), makeSymbol("PARSER-CLASS"));

    static final SubLList $list_alt1699 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-PATTERN-OPERATOR-P"), makeSymbol("KEYWORD")), makeString("(REGISTER-PARSER ~S): ~S is not a valid keyword."), makeSymbol("SELF"), makeSymbol("KEYWORD")),
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("SUBCLASSP"), makeSymbol("PARSER-CLASS"), list(QUOTE, makeSymbol("CYBLACK-ITEM-PARSER"))), makeString("(REGISTER-PARSER ~S): ~S is not a subclass of CYBLACK-ITEM-PARSER."), makeSymbol("SELF"), makeSymbol("PARSER-CLASS")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("NEW-ITEM-PARSER"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-ITEM-PARSER")), makeSymbol("PARSER-CLASS")))),
		    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-MAIN-PARSER"), makeSymbol("CYBLACK-ITEM-PARSER")), makeSymbol("NEW-ITEM-PARSER"), makeSymbol("SELF")),
		    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-APPLICATION"), makeSymbol("CYBLACK-ITEM-PARSER")), makeSymbol("NEW-ITEM-PARSER"), makeSymbol("APPLICATION")),
		    list(makeSymbol("DICTIONARY-ENTER"), makeSymbol("PARSING-DISPATCH-TABLE"), makeSymbol("KEYWORD"), makeSymbol("NEW-ITEM-PARSER")), list(RET, makeSymbol("NEW-ITEM-PARSER"))));

    static final SubLList $list_alt170 = list(list(makeSymbol("CLET"), list(list(makeSymbol("EXISTING-BINDING"), list(makeSymbol("CYBLACK-BINDING-RASSOC"), makeSymbol("VALUE"), makeSymbol("LOCAL-BINDINGS")))),
	    list(makeSymbol("PWHEN"), makeSymbol("EXISTING-BINDING"), list(RET, makeSymbol("EXISTING-BINDING"))),
	    list(makeSymbol("PWHEN"), makeSymbol("OUTER-SCOPE"), list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-BINDING-BY-VALUE"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("OUTER-SCOPE"), makeSymbol("VALUE")))), list(RET, CommonSymbols.NIL)));

    static final SubLList $list_alt1703 = list(makeSymbol("KEYWORD"));

    static final SubLList $list_alt1704 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-PATTERN-OPERATOR-P"), makeSymbol("KEYWORD")), makeString("(RETRIEVE-PARSER ~S): ~S is not a valid keyword."), makeSymbol("SELF"), makeSymbol("KEYWORD")),
	    list(RET, list(makeSymbol("DICTIONARY-LOOKUP"), makeSymbol("PARSING-DISPATCH-TABLE"), makeSymbol("KEYWORD"))));

    static final SubLList $list_alt1707 = list(makeSymbol("KEYWORD"), makeSymbol("COMPILER-CLASS"));

    static final SubLList $list_alt1708 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-PATTERN-OPERATOR-P"), makeSymbol("KEYWORD")), makeString("(REGISTER-COMPILER ~S): ~S is not a valid keyword."), makeSymbol("SELF"), makeSymbol("KEYWORD")),
	    list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("SUBCLASSP"), makeSymbol("COMPILER-CLASS"), list(QUOTE, makeSymbol("CYBLACK-ITEM-COMPILER"))), makeString("(REGISTER-COMPILER ~S): ~S is not a subclass of CYBLACK-ITEM-COMPILER"), makeSymbol("SELF"),
		    makeSymbol("COMPILER-CLASS")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("NEW-ITEM-COMPILER"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-ITEM-COMPILER")), makeSymbol("COMPILER-CLASS")))),
		    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-MAIN-PARSER"), makeSymbol("CYBLACK-ITEM-COMPILER")), makeSymbol("NEW-ITEM-COMPILER"), makeSymbol("SELF")),
		    list(makeSymbol("DICTIONARY-ENTER"), makeSymbol("COMPILING-DISPATCH-TABLE"), makeSymbol("KEYWORD"), makeSymbol("NEW-ITEM-COMPILER")), list(RET, makeSymbol("NEW-ITEM-COMPILER"))));

    static final SubLList $list_alt1712 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-PATTERN-OPERATOR-P"), makeSymbol("KEYWORD")), makeString("(RETRIEVE-COMPILER ~S): ~S is not a valid keyword."), makeSymbol("SELF"), makeSymbol("KEYWORD")),
	    list(RET, list(makeSymbol("DICTIONARY-LOOKUP"), makeSymbol("COMPILING-DISPATCH-TABLE"), makeSymbol("KEYWORD"))));

    static final SubLList $list_alt1715 = list(list(makeSymbol("PCOND"), list(list(makeSymbol("NULL"), makeSymbol("OBJECT")), list(RET, CommonSymbols.NIL)),
	    list(list(makeSymbol("STRINGP"), makeSymbol("OBJECT")),
		    list(makeSymbol("CLET"), list(list(makeSymbol("APPLICATION"), list(makeSymbol("GET-APPLICATION"), makeSymbol("SELF")))),
			    list(makeSymbol("PWHEN"), makeSymbol("APPLICATION"),
				    list(makeSymbol("CLET"), list(list(makeSymbol("DATATYPE-DICTIONARY"), list(makeSymbol("CYBLACK-APPLICATION-GET-DATATYPE-DICTIONARY"), makeSymbol("APPLICATION")))),
					    list(makeSymbol("PWHEN"), makeSymbol("DATATYPE-DICTIONARY"), list(RET, list(makeSymbol("CYBLACK-DATATYPE-DICTIONARY-INTERN"), makeSymbol("DATATYPE-DICTIONARY"), makeSymbol("OBJECT")))))),
			    list(RET, CommonSymbols.NIL))),
	    list(list(makeSymbol("FORT-P"), makeSymbol("OBJECT")),
		    list(makeSymbol("CLET"), list(list(makeSymbol("CYBLACK-FORT-INSTANCE"), list(makeSymbol("NEW-OBJECT-INSTANCE"), list(QUOTE, makeSymbol("CYBLACK-FORT"))))),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-VALUE"), makeSymbol("CYBLACK-FORT")), makeSymbol("CYBLACK-FORT-INSTANCE"), makeSymbol("OBJECT")), list(RET, makeSymbol("CYBLACK-FORT-INSTANCE")))),
	    list(list(makeSymbol("SYMBOLP"), makeSymbol("OBJECT")),
		    list(makeSymbol("PIF"), list(makeSymbol("CYBLACK-VARIABLE-SYMBOL-P"), makeSymbol("OBJECT")),
			    list(makeSymbol("CLET"), list(list(makeSymbol("CYBLACK-VARIABLE-REFERENCE"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-VARIABLE-REFERENCE")), list(QUOTE, makeSymbol("CYBLACK-VARIABLE-REFERENCE"))))),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-VARIABLE"), makeSymbol("CYBLACK-VARIABLE-REFERENCE")), makeSymbol("CYBLACK-VARIABLE-REFERENCE"), list(makeSymbol("CYBLACK-SYMBOL-TO-CYBLACK-PACKAGE"), makeSymbol("OBJECT"))),
				    list(RET, makeSymbol("CYBLACK-VARIABLE-REFERENCE"))),
			    list(makeSymbol("PCOND"), list(list(CommonSymbols.EQ, makeSymbol("OBJECT"), $TRUE), list(RET, list(makeSymbol("NEW-OBJECT-INSTANCE"), list(QUOTE, makeSymbol("CYBLACK-TRUE"))))),
				    list(list(CommonSymbols.EQ, makeSymbol("OBJECT"), makeKeyword("FALSE")), list(RET, list(makeSymbol("NEW-OBJECT-INSTANCE"), list(QUOTE, makeSymbol("CYBLACK-FALSE"))))),
				    list(CommonSymbols.T,
					    list(makeSymbol("CLET"), list(list(makeSymbol("CYBLACK-SYMBOL"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-SYMBOL")), list(QUOTE, makeSymbol("CYBLACK-SYMBOL"))))),
						    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-VALUE"), makeSymbol("CYBLACK-SYMBOL")), makeSymbol("CYBLACK-SYMBOL"), makeSymbol("OBJECT")), list(RET, makeSymbol("CYBLACK-SYMBOL"))))))),
	    list(list(makeSymbol("NUMBERP"), makeSymbol("OBJECT")), list(makeSymbol("PCOND"),
		    list(list(makeSymbol("INTEGERP"), makeSymbol("OBJECT")),
			    list(makeSymbol("CLET"), list(list(makeSymbol("INTEGER-REP"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-INTEGER")), list(QUOTE, makeSymbol("CYBLACK-INTEGER"))))),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-VALUE"), makeSymbol("CYBLACK-INTEGER")), makeSymbol("INTEGER-REP"), makeSymbol("OBJECT")), list(RET, makeSymbol("INTEGER-REP")))),
		    list(list(makeSymbol("FLOATP"), makeSymbol("OBJECT")),
			    list(makeSymbol("CLET"), list(list(makeSymbol("FLOAT-REP"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("CYBLACK-REAL")), list(QUOTE, makeSymbol("CYBLACK-REAL"))))),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-VALUE"), makeSymbol("CYBLACK-REAL")), makeSymbol("FLOAT-REP"), makeSymbol("OBJECT")), list(RET, makeSymbol("FLOAT-REP")))),
		    list(CommonSymbols.T, list(RET, CommonSymbols.NIL)))),
	    list(list(makeSymbol("CONSP"), makeSymbol("OBJECT")),
		    list(makeSymbol("CLET"), list(list(makeSymbol("FIRST-ELEMENT"), list(makeSymbol("CAR"), makeSymbol("OBJECT")))),
			    list(makeSymbol("PIF"), list(makeSymbol("CAND"), list(makeSymbol("CYBLACK-PATTERN-OPERATOR-P"), makeSymbol("FIRST-ELEMENT")), list(makeSymbol("LISTP"), list(makeSymbol("CDR"), makeSymbol("OBJECT")))),
				    list(makeSymbol("CLET"), list(list(makeSymbol("ITEM-PARSER"), list(makeSymbol("RETRIEVE-PARSER"), makeSymbol("SELF"), makeSymbol("FIRST-ELEMENT")))),
					    list(makeSymbol("PWHEN"), makeSymbol("ITEM-PARSER"), list(RET, list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ITEM-PARSER"), list(QUOTE, makeSymbol("PARSE")), makeSymbol("OBJECT"))))),
				    list(makeSymbol("PROGN"), list(makeSymbol("WARN"), makeString("(PARSE ~S): I don't know how to compile ~S."), makeSymbol("SELF"), makeSymbol("OBJECT")), list(RET, CommonSymbols.NIL))))),
	    list(CommonSymbols.T, list(makeSymbol("WARN"), makeString("(PARSE ~S): I don't know how to compile ~S."), makeSymbol("SELF"), makeSymbol("OBJECT")), list(RET, CommonSymbols.NIL))));

    static final SubLList $list_alt1721 = list(makeSymbol("PARSED-OBJECT"));

    static final SubLList $list_alt1722 = list(list(makeSymbol("IGNORE"), makeSymbol("PARSED-OBJECT")), list(RET, CommonSymbols.NIL));

    static final SubLList $list_alt1725 = list(makeKeyword("KS-ARGS"), makeKeyword("MONITOR"));

    static final SubLList $list_alt173 = list(makeSymbol("VARIABLE"), makeSymbol("&OPTIONAL"), list(makeSymbol("DEFAULT"), makeSymbol("*CYBLACK-UNBOUND-VALUE*")));

    static final SubLList $list_alt174 = list(list(makeSymbol("CLET"), list(list(makeSymbol("EXISTING-BINDING"), list(makeSymbol("CYBLACK-BINDING-ASSOC"), makeSymbol("VARIABLE"), makeSymbol("LOCAL-BINDINGS")))),
	    list(makeSymbol("PWHEN"), makeSymbol("EXISTING-BINDING"), list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-VALUE"), makeSymbol("CYBLACK-BINDING")), makeSymbol("EXISTING-BINDING")))),
	    list(makeSymbol("PWHEN"), makeSymbol("OUTER-SCOPE"), list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("OUTER-SCOPE"), makeSymbol("VARIABLE")))), list(RET, makeSymbol("DEFAULT"))));

    static final SubLList $list_alt177 = list(makeSymbol("VARIABLE"), makeSymbol("VALUE"));

    static final SubLList $list_alt178 = list(list(makeSymbol("CLET"), list(list(makeSymbol("EXISTING-BINDING"), list(makeSymbol("CYBLACK-BINDING-ASSOC"), makeSymbol("VARIABLE"), makeSymbol("LOCAL-BINDINGS")))),
	    list(makeSymbol("PWHEN"), makeSymbol("EXISTING-BINDING"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-VALUE"), makeSymbol("CYBLACK-BINDING")), makeSymbol("EXISTING-BINDING"), makeSymbol("VALUE")), list(RET, makeSymbol("VALUE"))),
	    list(makeSymbol("PWHEN"), makeSymbol("OUTER-SCOPE"), list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("OUTER-SCOPE"), makeSymbol("VARIABLE"), makeSymbol("VALUE")))),
	    list(RET, makeSymbol("*CYBLACK-UNBOUND-VALUE*"))));

    static final SubLList $list_alt182 = list(list(makeSymbol("CLET"), list(list(makeSymbol("EXISTING-BINDING"), list(makeSymbol("CYBLACK-BINDING-ASSOC"), makeSymbol("VARIABLE"), makeSymbol("LOCAL-BINDINGS")))),
	    list(makeSymbol("PWHEN"), makeSymbol("EXISTING-BINDING"), list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-VALUE"), makeSymbol("CYBLACK-BINDING")), makeSymbol("EXISTING-BINDING")))), list(RET, makeSymbol("*CYBLACK-UNBOUND-VALUE*"))));

    static final SubLList $list_alt185 = list(list(makeSymbol("CLET"), list(list(makeSymbol("EXISTING-BINDING"), list(makeSymbol("CYBLACK-BINDING-ASSOC"), makeSymbol("VARIABLE"), makeSymbol("LOCAL-BINDINGS")))),
	    list(makeSymbol("PWHEN"), makeSymbol("EXISTING-BINDING"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-VALUE"), makeSymbol("CYBLACK-BINDING")), makeSymbol("EXISTING-BINDING"), makeSymbol("VALUE")), list(RET, makeSymbol("VALUE"))),
	    list(RET, makeSymbol("*CYBLACK-UNBOUND-VALUE*"))));

    static final SubLList $list_alt189 = list(makeKeyword("NO-MEMBER-VARIABLES"), makeKeyword("PUBLIC"));

    static final SubLList $list_alt190 = list(makeSymbol("&OPTIONAL"), list(makeSymbol("NEW-TAG"), CommonSymbols.NIL));

    static final SubLList $list_alt191 = list(list(RET, list(makeSymbol("CYBLACK-NEW-ENVIRONMENT"), makeSymbol("SELF"), makeSymbol("NEW-TAG"))));

    static final SubLList $list_alt196 = list(makeSymbol("TARGET-TAG"));

    static final SubLList $list_alt197 = list(list(makeSymbol("PWHEN"), list(CommonSymbols.EQ, makeSymbol("TARGET-TAG"), makeSymbol("ENVIRONMENT-TAG")), list(RET, makeSymbol("SELF"))),
	    list(makeSymbol("CYBLACK-MUST"), makeSymbol("OUTER-SCOPE"), makeString("(POP-FRAME-TO ~S): No parent frame corresponds to tag ~S."), makeSymbol("SELF"), makeSymbol("TARGET-TAG")),
	    list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("POP-FRAME-TO"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("OUTER-SCOPE"), makeSymbol("TARGET-TAG"))));

    static final SubLList $list_alt201 = list(list(makeSymbol("PWHEN"), makeSymbol("OUTER-SCOPE"), list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("TOP-FRAME"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("OUTER-SCOPE")))), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt204 = list(list(makeSymbol("CLET"), list(list(makeSymbol("LISTED-LOCAL-BINDINGS"), CommonSymbols.NIL)),
	    list(makeSymbol("WITH-LOCK-HELD"), list(makeSymbol("LOCK")),
		    list(makeSymbol("CDOLIST-COLLECTING"), list(makeSymbol("BINDING"), makeSymbol("LOCAL-BINDINGS"), makeSymbol("LISTED-LOCAL-BINDINGS")), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("LISTIFY-BINDING"), makeSymbol("CYBLACK-BINDING")), makeSymbol("BINDING")))),
	    list(RET, makeSymbol("LISTED-LOCAL-BINDINGS"))));

    static final SubLList $list_alt207 = list(list(makeSymbol("CLET"), list(list(makeSymbol("UNIQUE-LOCAL-BINDINGS"), CommonSymbols.NIL)),
	    list(makeSymbol("CDOLIST-APPENDING"), list(makeSymbol("BINDING"), makeSymbol("LOCAL-BINDINGS"), makeSymbol("UNIQUE-LOCAL-BINDINGS")),
		    list(makeSymbol("FIF"), list(makeSymbol("CYBLACK-BINDING-ASSOC"), list(makeSymbol("GET-CYBLACK-BINDING-VARIABLE"), makeSymbol("BINDING")), makeSymbol("UNIQUE-LOCAL-BINDINGS")), CommonSymbols.NIL, list(makeSymbol("LIST"), makeSymbol("BINDING")))),
	    list(RET, makeSymbol("UNIQUE-LOCAL-BINDINGS"))));

    static final SubLList $list_alt210 = list(makeSymbol("&OPTIONAL"), list(makeSymbol("OUTERMOST-SCOPE-TAG"), makeSymbol("*CYBLACK-UNBOUND-VALUE*")));

    static final SubLList $list_alt211 = list(list(makeSymbol("CLET"), list(list(makeSymbol("UNIQUE-BINDINGS"), CommonSymbols.NIL), list(makeSymbol("CURRENT-ENVIRONMENT"), makeSymbol("SELF"))),
	    list(makeSymbol("WITH-LOCK-HELD"), list(makeSymbol("LOCK")),
		    list(makeSymbol("WHILE"),
			    list(makeSymbol("CAND"), makeSymbol("CURRENT-ENVIRONMENT"),
				    list(makeSymbol("CNOT"), list(CommonSymbols.EQ, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-ENVIRONMENT-TAG"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("CURRENT-ENVIRONMENT")), makeSymbol("OUTERMOST-SCOPE-TAG")))),
			    list(makeSymbol("CDOLIST"), list(makeSymbol("BINDING"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-LOCAL-BINDINGS"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("CURRENT-ENVIRONMENT"))),
				    list(makeSymbol("PUNLESS"), list(makeSymbol("CYBLACK-BINDING-ASSOC"), list(makeSymbol("GET-CYBLACK-BINDING-VARIABLE"), makeSymbol("BINDING")), makeSymbol("UNIQUE-BINDINGS")), list(makeSymbol("CPUSH"), makeSymbol("BINDING"), makeSymbol("UNIQUE-BINDINGS")))),
			    list(makeSymbol("CSETQ"), makeSymbol("CURRENT-ENVIRONMENT"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-OUTER-SCOPE"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("CURRENT-ENVIRONMENT"))))),
	    list(RET, list(makeSymbol("NREVERSE"), makeSymbol("UNIQUE-BINDINGS")))));

    static final SubLList $list_alt215 = list(list(makeSymbol("CLET"), list(list(makeSymbol("UNIQUE-BINDINGS"), CommonSymbols.NIL), list(makeSymbol("CURRENT-ENVIRONMENT"), makeSymbol("SELF"))),
	    list(makeSymbol("WITH-LOCK-HELD"), list(makeSymbol("LOCK")),
		    list(makeSymbol("WHILE"),
			    list(makeSymbol("CAND"), makeSymbol("CURRENT-ENVIRONMENT"),
				    list(makeSymbol("CNOT"), list(CommonSymbols.EQ, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-ENVIRONMENT-TAG"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("CURRENT-ENVIRONMENT")), makeSymbol("OUTERMOST-SCOPE-TAG")))),
			    list(makeSymbol("CDOLIST"), list(makeSymbol("BINDING"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-LOCAL-BINDINGS"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("CURRENT-ENVIRONMENT"))),
				    list(makeSymbol("PUNLESS"),
					    list(makeSymbol("COR"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("APRIORI-P"), makeSymbol("CYBLACK-BINDING")), makeSymbol("BINDING")),
						    list(makeSymbol("CYBLACK-BINDING-ASSOC"), list(makeSymbol("GET-CYBLACK-BINDING-VARIABLE"), makeSymbol("BINDING")), makeSymbol("UNIQUE-BINDINGS"))),
					    list(makeSymbol("CPUSH"), makeSymbol("BINDING"), makeSymbol("UNIQUE-BINDINGS")))),
			    list(makeSymbol("CSETQ"), makeSymbol("CURRENT-ENVIRONMENT"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-OUTER-SCOPE"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("CURRENT-ENVIRONMENT"))))),
	    list(RET, list(makeSymbol("NREVERSE"), makeSymbol("UNIQUE-BINDINGS")))));

    static final SubLList $list_alt219 = list(list(makeSymbol("CLET"), list(list(makeSymbol("UNIQUE-LOCAL-BINDINGS"), CommonSymbols.NIL)),
	    list(makeSymbol("CDOLIST-APPENDING"), list(makeSymbol("BINDING"), list(makeSymbol("GET-LOCAL-UNBOUND-BINDINGS"), makeSymbol("SELF")), makeSymbol("UNIQUE-LOCAL-BINDINGS")),
		    list(makeSymbol("FIF"), list(makeSymbol("CYBLACK-BINDING-ASSOC"), list(makeSymbol("GET-CYBLACK-BINDING-VARIABLE"), makeSymbol("BINDING")), makeSymbol("UNIQUE-LOCAL-BINDINGS")), CommonSymbols.NIL, list(makeSymbol("LIST"), makeSymbol("BINDING")))),
	    list(RET, makeSymbol("UNIQUE-LOCAL-BINDINGS"))));

    static final SubLList $list_alt222 = list(list(makeSymbol("CLET"), list(list(makeSymbol("UNIQUE-BINDINGS"), CommonSymbols.NIL), list(makeSymbol("CURRENT-ENVIRONMENT"), makeSymbol("SELF")), list(makeSymbol("CURRENT-VALUE"), CommonSymbols.NIL)),
	    list(makeSymbol("WITH-LOCK-HELD"), list(makeSymbol("LOCK")),
		    list(makeSymbol("WHILE"),
			    list(makeSymbol("CAND"), makeSymbol("CURRENT-ENVIRONMENT"),
				    list(makeSymbol("CNOT"), list(CommonSymbols.EQ, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-ENVIRONMENT-TAG"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("CURRENT-ENVIRONMENT")), makeSymbol("OUTERMOST-SCOPE-TAG")))),
			    list(makeSymbol("CDOLIST"), list(makeSymbol("BINDING"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-LOCAL-BINDINGS"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("CURRENT-ENVIRONMENT"))),
				    list(makeSymbol("CSETQ"), makeSymbol("CURRENT-VALUE"), list(makeSymbol("GET-CYBLACK-BINDING-VALUE"), makeSymbol("BINDING"))),
				    list(makeSymbol("PUNLESS"),
					    list(makeSymbol("COR"), list(makeSymbol("CAND"), makeSymbol("CURRENT-VALUE"), list(makeSymbol("CNOT"), list(makeSymbol("CYBLACK-UNBOUND-VALUE-P"), makeSymbol("CURRENT-VALUE")))),
						    list(makeSymbol("CYBLACK-BINDING-ASSOC"), list(makeSymbol("GET-CYBLACK-BINDING-VARIABLE"), makeSymbol("BINDING")), makeSymbol("UNIQUE-BINDINGS"))),
					    list(makeSymbol("CPUSH"), makeSymbol("BINDING"), makeSymbol("UNIQUE-BINDINGS")))),
			    list(makeSymbol("CSETQ"), makeSymbol("CURRENT-ENVIRONMENT"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-OUTER-SCOPE"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("CURRENT-ENVIRONMENT"))))),
	    list(RET, list(makeSymbol("NREVERSE"), makeSymbol("UNIQUE-BINDINGS")))));

    static final SubLList $list_alt226 = list(list(makeSymbol("CLET"), list(list(makeSymbol("UNIQUE-BINDINGS"), list(makeSymbol("GET-UNIQUE-BINDINGS"), makeSymbol("SELF"))), list(makeSymbol("LISTED-UNIQUE-BINDINGS"), CommonSymbols.NIL)),
	    list(makeSymbol("WITH-LOCK-HELD"), list(makeSymbol("LOCK")),
		    list(makeSymbol("CDOLIST-COLLECTING"), list(makeSymbol("BINDING"), makeSymbol("UNIQUE-BINDINGS"), makeSymbol("LISTED-UNIQUE-BINDINGS")), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("LISTIFY-BINDING"), makeSymbol("CYBLACK-BINDING")), makeSymbol("BINDING")))),
	    list(RET, makeSymbol("LISTED-UNIQUE-BINDINGS"))));

    static final SubLList $list_alt230 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VALUE"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), CommonSymbols.NIL)), makeKeyword("PUBLIC")));

    static final SubLList $list_alt233 = list(list(makeSymbol("UNPARSED-PATTERN"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-UNPARSED-PATTERN"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-UNPARSED-PATTERN"), list(makeSymbol("NEW-UNPARSED-PATTERN")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-DATATYPE-BAG"), CommonSymbols.NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("TRAVERSE-FILLING-DATATYPE-BAG"), list(makeSymbol("BAG")), makeKeyword("PROTECTED")));

    static final SubLList $list_alt237 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("UNPARSED-PATTERN"), CommonSymbols.NIL), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt24 = list(makeKeyword("PROTECTED"));

    static final SubLList $list_alt241 = list(list(RET, makeSymbol("UNPARSED-PATTERN")));

    static final SubLList $list_alt244 = list(makeSymbol("NEW-UNPARSED-PATTERN"));

    static final SubLList $list_alt245 = list(list(makeSymbol("CSETQ"), makeSymbol("UNPARSED-PATTERN"), makeSymbol("NEW-UNPARSED-PATTERN")), list(RET, makeSymbol("NEW-UNPARSED-PATTERN")));

    static final SubLList $list_alt249 = list(list(makeSymbol("CLET"), list(list(makeSymbol("BAG"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("NEW"), makeSymbol("BASIC-BAG")), list(QUOTE, makeSymbol("BASIC-BAG"))))),
	    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("TRAVERSE-FILLING-DATATYPE-BAG")), makeSymbol("BAG")), list(RET, makeSymbol("BAG"))));

    static final SubLList $list_alt25 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("VARIABLE"), CommonSymbols.NIL), list(makeSymbol("CSETQ"), makeSymbol("TYPE"), CommonSymbols.NIL), list(makeSymbol("CSETQ"), makeSymbol("VALUE"), CommonSymbols.NIL),
	    list(makeSymbol("CSETQ"), makeSymbol("APRIORI"), CommonSymbols.NIL), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt253 = list(makeSymbol("BAG"));

    static final SubLList $list_alt254 = list(list(RET, makeSymbol("BAG")));

    static final SubLList $list_alt260 = list(makeSymbol("CYBLACK-VALUE-EXPRESSION"));

    static final SubLList $list_alt261 = list(list(makeSymbol("VARIABLE"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VARIABLE"), CommonSymbols.NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-VARIABLE"), list(makeSymbol("NEW-VARIABLE")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VALUE"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), CommonSymbols.NIL)), makeKeyword("PUBLIC")));

    static final SubLList $list_alt264 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("VARIABLE"), CommonSymbols.NIL), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt267 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("~S"), makeSymbol("VARIABLE")), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt270 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("CYBLACK-VARIABLE-SYMBOL-P"), makeSymbol("NEW-VARIABLE")), makeString("(SET-VARIABLE ~S): ~S is not a legal cyblack variable."), makeSymbol("SELF"), makeSymbol("NEW-VARIABLE")),
	    list(makeSymbol("CSETQ"), makeSymbol("VARIABLE"), list(makeSymbol("CYBLACK-SYMBOL-TO-CYBLACK-PACKAGE"), makeSymbol("NEW-VARIABLE"))), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt273 = list(makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), CommonSymbols.NIL));

    static final SubLList $list_alt274 = list(list(makeSymbol("PUNLESS"), makeSymbol("ENVIRONMENT"), list(makeSymbol("CYBLACK-TRACING-FORMAT"), makeString("~%(GET-VALUE ~S): environment is NIL."), makeSymbol("SELF")), list(RET, CommonSymbols.NIL)),
	    list(makeSymbol("CLET"), list(list(makeSymbol("RESULT"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET"), makeSymbol("CYBLACK-ENVIRONMENT")), makeSymbol("ENVIRONMENT"), makeSymbol("VARIABLE")))),
		    list(makeSymbol("CYBLACK-TRACING-FORMAT"), makeString("~%(GET-VALUE ~S): Result -> ~S."), makeSymbol("SELF"), makeSymbol("RESULT")), list(RET, makeSymbol("RESULT"))));

    static final SubLList $list_alt279 = list(list(makeSymbol("LITERAL-VALUE"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), CommonSymbols.NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VALUE"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), CommonSymbols.NIL)), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-VALUE"), list(makeSymbol("NEW-VALUE")), makeKeyword("PUBLIC")));

    static final SubLList $list_alt283 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("LITERAL-VALUE"), CommonSymbols.NIL), list(RET, makeSymbol("SELF")));

    static final SubLList $list_alt286 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(":LITERAL")), list(RET, makeSymbol("SELF")));
}
