/**
 * Copyright (c) 1995 - 2019 Cycorp, Inc.  All rights reserved.
 */
package com.cyc.cycjava.cycl;


import static com.cyc.cycjava.cycl.access_macros.define_obsolete_register;
import static com.cyc.cycjava.cycl.access_macros.register_external_symbol;
import static com.cyc.cycjava.cycl.assertions_high.assertion_mt;
import static com.cyc.cycjava.cycl.assertions_high.gaf_arg;
import static com.cyc.cycjava.cycl.assertions_high.gaf_arg1;
import static com.cyc.cycjava.cycl.assertions_high.gaf_assertionP;
import static com.cyc.cycjava.cycl.constant_handles.reader_make_constant_shell;
import static com.cyc.cycjava.cycl.control_vars.$mapping_answer$;
import static com.cyc.cycjava.cycl.control_vars.$mapping_gather_arg$;
import static com.cyc.cycjava.cycl.control_vars.$mapping_target$;
import static com.cyc.cycjava.cycl.control_vars.within_assertP;
import static com.cyc.cycjava.cycl.cyc_testing.generic_testing.define_test_case_table_int;
import static com.cyc.cycjava.cycl.el_utilities.el_extensional_set_p;
import static com.cyc.cycjava.cycl.el_utilities.el_formula_with_operator_p;
import static com.cyc.cycjava.cycl.el_utilities.extensional_set_elements;
import static com.cyc.cycjava.cycl.el_utilities.formula_arity;
import static com.cyc.cycjava.cycl.el_utilities.make_binary_formula;
import static com.cyc.cycjava.cycl.el_utilities.possibly_naut_p;
import static com.cyc.cycjava.cycl.el_utilities.specs_fn_arg;
import static com.cyc.cycjava.cycl.el_utilities.specs_fn_naut_p;
import static com.cyc.cycjava.cycl.utilities_macros.register_cyc_api_function;
import static com.cyc.cycjava.cycl.utilities_macros.register_kb_function;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.append;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.cons;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.list;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.nconc;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions.funcall;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.getEntryKey;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.getEntrySetIterator;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.getEntryValue;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.gethash;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.gethash_without_values;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.iteratorHasNext;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.iteratorNextEntry;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.make_hash_table;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.releaseEntrySetIterator;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.add;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.integerDivide;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.numE;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.numL;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.numLE;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.delete_if;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.length;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.nreverse;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.symbol_function;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads.$is_thread_performing_cleanupP$;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.integerp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.listp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.getValuesAsVector;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.restoreValuesFromVector;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeBoolean;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeInteger;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeKeyword;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeString;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeSymbol;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeUninternedSymbol;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind.cdestructuring_bind_error;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind.destructuring_bind_must_consp;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.adjoin;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.fourth;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.member;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.nunion;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.second;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.third;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.reader.bq_cons;
import static com.cyc.tool.subl.util.SubLFiles.declareFunction;
import static com.cyc.tool.subl.util.SubLFiles.deflexical;
import static com.cyc.tool.subl.util.SubLFiles.defparameter;

import java.util.Iterator;
import java.util.Map;

import com.cyc.cycjava.cycl.inference.modules.after_adding_modules;
import com.cyc.cycjava.cycl.sbhl.sbhl_cache;
import com.cyc.cycjava.cycl.sbhl.sbhl_graphs;
import com.cyc.cycjava.cycl.sbhl.sbhl_link_methods;
import com.cyc.cycjava.cycl.sbhl.sbhl_link_vars;
import com.cyc.cycjava.cycl.sbhl.sbhl_links;
import com.cyc.cycjava.cycl.sbhl.sbhl_macros;
import com.cyc.cycjava.cycl.sbhl.sbhl_marking_methods;
import com.cyc.cycjava.cycl.sbhl.sbhl_marking_utilities;
import com.cyc.cycjava.cycl.sbhl.sbhl_marking_vars;
import com.cyc.cycjava.cycl.sbhl.sbhl_module_utilities;
import com.cyc.cycjava.cycl.sbhl.sbhl_module_vars;
import com.cyc.cycjava.cycl.sbhl.sbhl_paranoia;
import com.cyc.cycjava.cycl.sbhl.sbhl_search_implied_relations;
import com.cyc.cycjava.cycl.sbhl.sbhl_search_methods;
import com.cyc.cycjava.cycl.sbhl.sbhl_search_vars;
import com.cyc.cycjava.cycl.sbhl.sbhl_search_what_mts;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.BinaryFunction;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Mapping;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.ReadWriteLocks;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLThread;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLList;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObject;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLProcess;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLString;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLInteger;
import com.cyc.tool.subl.jrtl.nativeCode.type.symbol.SubLSymbol;
import com.cyc.tool.subl.util.SubLFile;
import com.cyc.tool.subl.util.SubLFiles;
import com.cyc.tool.subl.util.SubLFiles.LispMethod;
import com.cyc.tool.subl.util.SubLTrampolineFile;
import com.cyc.tool.subl.util.SubLTranslatedFile;


/**
 * Copyright (c) 1995 - 2019 Cycorp, Inc.  All rights reserved.
 * module:      ISA
 * source file: /cyc/top/cycl/isa.lisp
 * created:     2019/07/03 17:37:27
 */
public final class isa extends SubLTranslatedFile implements V12 {
    public static final SubLFile me = new isa();

 public static final String myName = "com.cyc.cycjava.cycl.isa";


    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $sbhl_may_return_naut_collections_as_fortsP$ = makeSymbol("*SBHL-MAY-RETURN-NAUT-COLLECTIONS-AS-FORTS?*");

    // defparameter
    // Result accumulator for all-isas-wrt
    /**
     * Result accumulator for all-isas-wrt
     */
    @LispMethod(comment = "Result accumulator for all-isas-wrt\ndefparameter")
    private static final SubLSymbol $all_isas_wrt$ = makeSymbol("*ALL-ISAS-WRT*");

    // defparameter
    /**
     * Term which other terms must be instances to be included in the all-isas-wrt.
     */
    @LispMethod(comment = "Term which other terms must be instances to be included in the all-isas-wrt.\ndefparameter")
    private static final SubLSymbol $all_isas_wrt_isa$ = makeSymbol("*ALL-ISAS-WRT-ISA*");

    // deflexical
    /**
     * If COLLECTION has more than (FORT-COUNT / THIS) many instances, sample
     * instead of generating all the instances.
     */
    @LispMethod(comment = "If COLLECTION has more than (FORT-COUNT / THIS) many instances, sample\r\ninstead of generating all the instances.\ndeflexical\nIf COLLECTION has more than (FORT-COUNT / THIS) many instances, sample\ninstead of generating all the instances.")
    private static final SubLSymbol $random_instance_of_sampling_ratio$ = makeSymbol("*RANDOM-INSTANCE-OF-SAMPLING-RATIO*");



    private static final SubLSymbol MIN_ISA = makeSymbol("MIN-ISA");

    private static final SubLList $list4 = list(makeSymbol("TERM"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    private static final SubLString $str5$Returns_most_specific_collections = makeString("Returns most-specific collections that include TERM (inexpensive)");

    static private final SubLList $list6 = list(list(makeSymbol("TERM"), makeSymbol("HL-TERM-P")));

    private static final SubLList $list7 = list(list(makeSymbol("LIST"), makeSymbol("FORT-P")));

    private static final SubLSymbol MAX_NOT_ISA = makeSymbol("MAX-NOT-ISA");

    private static final SubLString $str10$Returns_most_general_collections_ = makeString("Returns most-general collections that do not include TERM (expensive)");

    private static final SubLObject $$True_JustificationTruth = reader_make_constant_shell("True-JustificationTruth");

    private static final SubLList $list14 = list(makeSymbol("COL"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), list(makeSymbol("TV"), reader_make_constant_shell("True-JustificationTruth")));

    private static final SubLString $str15$Returns_the_asserted_instances_of = makeString("Returns the asserted instances of COL");

    private static final SubLList $list16 = list(list(makeSymbol("COL"), makeSymbol("EL-FORT-P")));

    private static final SubLSymbol MAX_INSTANCES = makeSymbol("MAX-INSTANCES");

    private static final SubLList $list18 = list(makeSymbol("COL"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    private static final SubLString $str19$Returns_the_maximal_among_the_ass = makeString("Returns the maximal among the asserted instances of COL");

    private static final SubLSymbol ALL_INSTANCES_WITH_MAX = makeSymbol("ALL-INSTANCES-WITH-MAX");

    private static final SubLSymbol $INVALID_ITERATION_TERM = makeKeyword("INVALID-ITERATION-TERM");

    private static final SubLSymbol MIN_NOT_INSTANCES = makeSymbol("MIN-NOT-INSTANCES");

    private static final SubLString $str24$Returns_the_most_specific_negated = makeString("Returns the most-specific negated instances of collection COL");

    private static final SubLSymbol ISA_SIBLINGS = makeSymbol("ISA-SIBLINGS");

    private static final SubLString $str26$Returns_the_direct_isas_of_those_ = makeString("Returns the direct isas of those collections of which TERM is a direct instance");

    private static final SubLSymbol INSTANCE_SIBLINGS = makeSymbol("INSTANCE-SIBLINGS");

    private static final SubLString $str28$Returns_the_direct_instances_of_t = makeString("Returns the direct instances of those collections having direct isa TERM");

    private static final SubLList $list29 = list(list(makeSymbol("TERM"), makeSymbol("EL-FORT-P")));

    private static final SubLString $str32$_A_is_not_a__A = makeString("~A is not a ~A");

    private static final SubLString $$$continue_anyway = makeString("continue anyway");

    private static final SubLString $str37$_A_is_not_a_valid__sbhl_type_erro = makeString("~A is not a valid *sbhl-type-error-action* value");

    private static final SubLString $str39$_A_is_neither_SET_P_nor_LISTP_ = makeString("~A is neither SET-P nor LISTP.");

    private static final SubLString $str40$attempting_to_bind_direction_link = makeString("attempting to bind direction link variable, to NIL. macro body not executed.");

    private static final SubLSymbol SBHL_SEARCH_TRUTH_VALUE_P = makeSymbol("SBHL-SEARCH-TRUTH-VALUE-P");

    static private final SubLList $list43 = list(makeSymbol("ISA"), makeUninternedSymbol("TABLE-MT"), makeUninternedSymbol("TABLE-TV"));



    private static final SubLList $list45 = list(makeUninternedSymbol("NAUT"), makeUninternedSymbol("ISA-MT"), makeUninternedSymbol("ISA-TV"));

    private static final SubLSymbol MAP_INSTANCES = makeSymbol("MAP-INSTANCES");

    static private final SubLList $list48 = list(makeSymbol("FUNCTION"), makeSymbol("TERM"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    private static final SubLString $str49$apply_FUNCTION_to_every__least_ge = makeString("apply FUNCTION to every (least general) #$isa of TERM");

    private static final SubLList $list50 = list(list(makeSymbol("FUNCTION"), makeSymbol("FUNCTION-SPEC-P")), list(makeSymbol("TERM"), makeSymbol("EL-FORT-P")));

    private static final SubLSymbol ALL_ISA = makeSymbol("ALL-ISA");

    private static final SubLString $str52$Returns_all_collections_that_incl = makeString("Returns all collections that include TERM (inexpensive)");

    private static final SubLList $list53 = list(list(makeSymbol("LIST"), makeSymbol("COLLECTION-P")));



    private static final SubLSymbol ALL_INSTANCES = makeSymbol("ALL-INSTANCES");

    private static final SubLString $str58$Returns_all_instances_of_COLLECTI = makeString("Returns all instances of COLLECTION (expensive)");

    private static final SubLList $list59 = list(list(makeSymbol("LIST"), makeSymbol("HL-TERM-P")));

    private static final SubLSymbol ALL_INSTANCES_IN_ALL_MTS = makeSymbol("ALL-INSTANCES-IN-ALL-MTS");

    private static final SubLList $list61 = list(makeSymbol("COLLECTION"));

    private static final SubLString $str62$_return_listp__all_instances_of_C = makeString("@return listp; all instances of COLLECTION in all mts.");

    private static final SubLList $list63 = list(list(makeSymbol("COLLECTION"), makeSymbol("EL-FORT-P")));

    private static final SubLSymbol ALL_FORT_INSTANCES = makeSymbol("ALL-FORT-INSTANCES");

    static private final SubLList $list65 = list(makeSymbol("ALL-INSTANCES"));

    private static final SubLSymbol $sym66$HL_PROTOTYPICAL_INSTANCE_ = makeSymbol("HL-PROTOTYPICAL-INSTANCE?");

    private static final SubLSymbol ALL_FORT_INSTANCES_IN_ALL_MTS = makeSymbol("ALL-FORT-INSTANCES-IN-ALL-MTS");

    static private final SubLList $list68 = list(makeSymbol("ALL-INSTANCES-IN-ALL-MTS"));

    private static final SubLSymbol GATHER_ISA_WRT_ISA = makeSymbol("GATHER-ISA-WRT-ISA");

    private static final SubLSymbol ALL_ISAS_WRT = makeSymbol("ALL-ISAS-WRT");

    private static final SubLList $list71 = list(makeSymbol("TERM"), makeSymbol("ISA"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    private static final SubLString $str72$Returns_all_isa_of_term_TERM_that = makeString("Returns all isa of term TERM that are also instances of collection ISA (ascending transitive closure; inexpensive)");

    static private final SubLList $list73 = list(list(makeSymbol("TERM"), makeSymbol("EL-FORT-P")), list(makeSymbol("ISA"), makeSymbol("EL-FORT-P")));

    private static final SubLSymbol ISA_STORED_NAUT_ARG2_P = makeSymbol("ISA-STORED-NAUT-ARG2-P");

    private static final SubLSymbol UNION_ALL_ISA = makeSymbol("UNION-ALL-ISA");

    static private final SubLList $list77 = list(makeSymbol("TERMS"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    private static final SubLString $str78$Returns_all_collections_that_incl = makeString("Returns all collections that include any term in TERMS (inexpensive)");

    static private final SubLList $list79 = list(list(makeSymbol("TERMS"), makeSymbol("LISTP")));

    private static final SubLSymbol UNION_ALL_INSTANCES = makeSymbol("UNION-ALL-INSTANCES");

    static private final SubLList $list81 = list(makeSymbol("COLS"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    private static final SubLString $str82$Returns_set_of_all_instances_of_e = makeString("Returns set of all instances of each collection in COLS (expensive)");

    static private final SubLList $list83 = list(list(makeSymbol("COLS"), makeSymbol("LISTP")));

    private static final SubLSymbol ALL_ISA_AMONG = makeSymbol("ALL-ISA-AMONG");

    static private final SubLList $list85 = list(makeSymbol("TERM"), makeSymbol("COLLECTIONS"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    private static final SubLString $str86$Returns_those_elements_of_COLLECT = makeString("Returns those elements of COLLECTIONS that include TERM as an all-instance");

    static private final SubLList $list87 = list(list(makeSymbol("TERM"), makeSymbol("HL-TERM-P")), list(makeSymbol("COLLECTIONS"), makeSymbol("LISTP")));

    private static final SubLSymbol ALL_INSTANCES_AMONG = makeSymbol("ALL-INSTANCES-AMONG");

    private static final SubLList $list89 = list(makeSymbol("COL"), makeSymbol("TERMS"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    private static final SubLString $str90$Returns_those_elements_of_TERMS_t = makeString("Returns those elements of TERMS that include COL as an all-isa");

    private static final SubLList $list91 = list(list(makeSymbol("COL"), makeSymbol("HL-TERM-P")), list(makeSymbol("TERMS"), makeSymbol("LISTP")));

    private static final SubLInteger $int$100000 = makeInteger(100000);

    private static final SubLInteger $int$50 = makeInteger(50);



    private static final SubLSymbol ALL_NOT_ISA = makeSymbol("ALL-NOT-ISA");

    private static final SubLString $str96$Returns_all_collections_that_do_n = makeString("Returns all collections that do not include TERM (expensive)");

    private static final SubLSymbol ALL_NOT_INSTANCES = makeSymbol("ALL-NOT-INSTANCES");

    private static final SubLString $str98$Returns_all_terms_that_are_not_me = makeString("Returns all terms that are not members of col (by assertion)");

    private static final SubLSymbol NOT_ISA_AMONG = makeSymbol("NOT-ISA-AMONG");

    private static final SubLString $str100$Returns_those_elements_of_COLLECT = makeString("Returns those elements of COLLECTIONS that do NOT include TERM");

    private static final SubLSymbol MAP_ALL_ISA = makeSymbol("MAP-ALL-ISA");

    private static final SubLList $list102 = list(makeSymbol("FN"), makeSymbol("TERM"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    private static final SubLString $str103$Apply_FUNCTION_to_every_all_isa_o = makeString("Apply FUNCTION to every all-isa of TERM\n   (FUNCTION must not affect the current sbhl search state)");

    private static final SubLList $list104 = list(list(makeSymbol("FN"), makeSymbol("FUNCTION-SPEC-P")), list(makeSymbol("TERM"), makeSymbol("HL-TERM-P")));

    private static final SubLSymbol MAP_ALL_INSTANCES = makeSymbol("MAP-ALL-INSTANCES");

    static private final SubLList $list106 = list(makeSymbol("FN"), makeSymbol("COL"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    private static final SubLString $str107$Apply_FUNCTION_to_each_unique_ins = makeString("Apply FUNCTION to each unique instance of all specs of COLLECTION.");

    private static final SubLList $list108 = list(list(makeSymbol("FN"), makeSymbol("FUNCTION-SPEC-P")), list(makeSymbol("COL"), makeSymbol("EL-FORT-P")));

    private static final SubLSymbol ANY_WRT_ALL_ISA = makeSymbol("ANY-WRT-ALL-ISA");

    private static final SubLString $str110$Return_the_first_encountered_non_ = makeString("Return the first encountered non-nil result of applying FUNCTION to the all-isa of TERM\n   (FUNCTION may not affect the current sbhl search state)");

    static private final SubLList $list111 = list(list(makeSymbol("FUNCTION"), makeSymbol("FUNCTION-SPEC-P")), list(makeSymbol("TERM"), makeSymbol("HL-TERM-P")));

    private static final SubLSymbol $sym112$ISA__GOAL = makeSymbol("ISA?-GOAL");

    static private final SubLList $list116 = list(makeUninternedSymbol("LINK-NODE"), makeUninternedSymbol("MT"), makeUninternedSymbol("TV"));

    private static final SubLString $str117$Node__a_does_not_pass_sbhl_type_t = makeString("Node ~a does not pass sbhl-type-test ~a~%");

    private static final SubLSymbol COUNT_ALL_INSTANCES = makeSymbol("COUNT-ALL-INSTANCES");

    private static final SubLList $list119 = list(makeSymbol("COLLECTION"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    private static final SubLString $str120$Counts_the_number_of_instances_in = makeString("Counts the number of instances in COLLECTION and then returns the count.");

    private static final SubLList $list121 = list(makeSymbol("INTEGERP"));



    private static final SubLSymbol COUNT_ALL_QUOTED_INSTANCES = makeSymbol("COUNT-ALL-QUOTED-INSTANCES");

    private static final SubLString $str124$Counts_the_number_of_quoted_insta = makeString("Counts the number of quoted instances in COLLECTION and then returns the count.");



    private static final SubLSymbol $sym126$ISA_ = makeSymbol("ISA?");

    private static final SubLList $list127 = list(makeSymbol("TERM"), makeSymbol("COLLECTION"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    private static final SubLString $str128$Returns_whether_TERM_is_an_instan = makeString("Returns whether TERM is an instance of COLLECTION via the SBHL, i.e. isa and genls assertions.\n@note This function does _not_ use defns to determine membership in COLLECTION.\n@see has-type?\n@see quiet-has-type?");

    static private final SubLList $list129 = list(makeSymbol("BOOLEANP"));

    private static final SubLSymbol $sym130$ISA_IN_MTS_ = makeSymbol("ISA-IN-MTS?");

    private static final SubLList $list131 = list(makeSymbol("TERM"), makeSymbol("COLLECTION"), makeSymbol("MTS"));

    private static final SubLString $str132$is__term__an_element_of__collecti = makeString("is <term> an element of <collection> via assertions in any mt in <mts>");

    private static final SubLSymbol $sym133$ISA_IN_ANY_MT_ = makeSymbol("ISA-IN-ANY-MT?");

    private static final SubLList $list134 = list(makeSymbol("TERM"), makeSymbol("COLLECTION"));

    private static final SubLString $str135$is__term__an_element_of__collecti = makeString("is <term> an element of <collection> in any mt");

    private static final SubLSymbol $sym136$ANY_ISA_ = makeSymbol("ANY-ISA?");

    private static final SubLString $str137$Returns_whether_TERM_is_an_instan = makeString("Returns whether TERM is an instance of any collection in COLLECTIONS");

    private static final SubLSymbol $sym138$ISA_ANY_ = makeSymbol("ISA-ANY?");



    private static final SubLString $str140$_A_is_not_a_collection = makeString("~A is not a collection");

    private static final SubLSymbol $sym141$ANY_ISA_ANY_ = makeSymbol("ANY-ISA-ANY?");

    private static final SubLList $list142 = list(makeSymbol("TERMS"), makeSymbol("COLLECTIONS"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    private static final SubLString $str143$_return_booleanp__whether_any_ter = makeString("@return booleanp; whether any term in TERMS is an instance of any collection in COLLECTIONS");

    private static final SubLList $list144 = list(list(makeSymbol("TERMS"), makeSymbol("LISTP")), list(makeSymbol("COLLECTIONS"), makeSymbol("LISTP")));

    private static final SubLSymbol $sym145$NOT_ISA_ = makeSymbol("NOT-ISA?");

    private static final SubLString $str146$_return_booleanp__whether_TERM_is = makeString("@return booleanp; whether TERM is known to not be an instance of COLLECTION");

    static private final SubLList $list147 = list(list(makeSymbol("TERM"), makeSymbol("HL-TERM-P")), list(makeSymbol("COLLECTION"), makeSymbol("EL-FORT-P")));

    private static final SubLSymbol $sym148$WHY_ISA_ = makeSymbol("WHY-ISA?");

    static private final SubLList $list149 = list(makeSymbol("TERM"), makeSymbol("COLLECTION"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"), makeSymbol("BEHAVIOR"));

    private static final SubLString $str150$Returns_justification_of__isa_TER = makeString("Returns justification of (isa TERM COLLECTION)");

    private static final SubLList $list151 = list(makeSymbol("LISTP"));



    private static final SubLList $list153 = list($TRUE);









    private static final SubLSymbol $sym158$WHY_NOT_ISA_ = makeSymbol("WHY-NOT-ISA?");

    private static final SubLString $str159$Returns_justification_of__not__is = makeString("Returns justification of (not (isa TERM COLLECTION))");

    private static final SubLSymbol $sym160$INSTANCES_ = makeSymbol("INSTANCES?");

    private static final SubLString $str161$Returns_whether_COLLECTION_has_an = makeString("Returns whether COLLECTION has any direct instances");

    private static final SubLSymbol GATHER_GENLS_MTS = makeSymbol("GATHER-GENLS-MTS");



    private static final SubLSymbol MAX_FLOOR_MTS_OF_ISA_PATHS = makeSymbol("MAX-FLOOR-MTS-OF-ISA-PATHS");

    private static final SubLList $list166 = list(makeSymbol("TERM"), makeSymbol("COLLECTION"), makeSymbol("&OPTIONAL"), makeSymbol("TV"));

    private static final SubLString $str167$Returns_in_what__most_genl__mts_T = makeString("Returns in what (most-genl) mts TERM is an instance of COLLECTION");

    private static final SubLSymbol MAX_FLOOR_MTS_OF_QUOTED_ISA_PATHS = makeSymbol("MAX-FLOOR-MTS-OF-QUOTED-ISA-PATHS");

    private static final SubLString $str169$Returns_in_what__most_genl__mts_T = makeString("Returns in what (most-genl) mts TERM is a quoted instance of COLLECTION");

    private static final SubLSymbol $sym171$SETS_EQUAL_ = makeSymbol("SETS-EQUAL?");

    private static final SubLSymbol GATHER_MIN_MTS_OF_PATHS_BETWEEN = makeSymbol("GATHER-MIN-MTS-OF-PATHS-BETWEEN");

    private static final SubLSymbol CACHE_MTS_OF_ARG = makeSymbol("CACHE-MTS-OF-ARG");





    private static final SubLSymbol KB_SET_OR_COLLECTION_P = makeSymbol("KB-SET-OR-COLLECTION-P");



    static private final SubLList $list180 = list(ONE_INTEGER);

    private static final SubLSymbol INSTANCEOF_AFTER_ADDING = makeSymbol("INSTANCEOF-AFTER-ADDING");

    private static final SubLSymbol ISA_AFTER_ADDING = makeSymbol("ISA-AFTER-ADDING");

    private static final SubLList $list183 = list(makeSymbol("ISA"), makeSymbol("TERM"), makeSymbol("SUBSET-EXPR"));



    private static final SubLList $list185 = list(makeSymbol("CSFN"), makeSymbol("COL"), makeSymbol("COLEXPR"));

    private static final SubLList $list186 = list(makeSymbol("ISA"), makeSymbol("TERM"), makeSymbol("COLEXPR"));



    private static final SubLList $list188 = list(makeSymbol("TSO"), makeSymbol("VAR"), makeSymbol("PROP"));

    private static final SubLSymbol INSTANCEOF_AFTER_REMOVING = makeSymbol("INSTANCEOF-AFTER-REMOVING");

    private static final SubLSymbol ISA_AFTER_REMOVING = makeSymbol("ISA-AFTER-REMOVING");

    private static final SubLSymbol $sym192$QUOTED_ISA_ = makeSymbol("QUOTED-ISA?");

    private static final SubLString $str193$Returns_whether_TERM_is_a_quoted_ = makeString("Returns whether TERM is a quoted instance of COLLECTION via the SBHL, i.e. quotedIsa and genls assertions.\n@note This function does _not_ use defns to determine membership in COLLECTION.\n@see has-type?\n@see quiet-has-type?");

    private static final SubLSymbol $sym194$QUOTED_ISA_IN_ANY_MT_ = makeSymbol("QUOTED-ISA-IN-ANY-MT?");

    private static final SubLSymbol $sym195$ANY_QUOTED_ISA_ = makeSymbol("ANY-QUOTED-ISA?");

    private static final SubLSymbol $sym196$QUOTED_ISA_ANY_ = makeSymbol("QUOTED-ISA-ANY?");

    private static final SubLSymbol $sym197$ALL_QUOTED_ISA_ = makeSymbol("ALL-QUOTED-ISA?");

    private static final SubLString $str198$Returns_whether_TERM_is_a_quoted_ = makeString("Returns whether TERM is a quoted instance of all collections in COLLECTIONS");

    private static final SubLSymbol $sym199$NOT_QUOTED_ISA_ = makeSymbol("NOT-QUOTED-ISA?");

    private static final SubLSymbol QUOTED_INSTANCES = makeSymbol("QUOTED-INSTANCES");

    private static final SubLSymbol UNION_ALL_QUOTED_INSTANCES = makeSymbol("UNION-ALL-QUOTED-INSTANCES");

    private static final SubLString $str202$Returns_set_of_all_quoted_instanc = makeString("Returns set of all quoted instances of each collection in COLS (expensive)");

    private static final SubLSymbol MAP_ALL_QUOTED_ISA = makeSymbol("MAP-ALL-QUOTED-ISA");

    private static final SubLString $str204$Apply_FUNCTION_to_every_all_quote = makeString("Apply FUNCTION to every all-quoted-isa of TERM\n   (FUNCTION must not affect the current sbhl search state)");

    private static final SubLList $list205 = list(makeUninternedSymbol("NAUT"), makeUninternedSymbol("QUOTED-ISA-MT"), makeUninternedSymbol("QUOTED-ISA-TV"));

    private static final SubLSymbol ALL_QUOTED_ISA = makeSymbol("ALL-QUOTED-ISA");

    private static final SubLSymbol ALL_QUOTED_ISAS_WRT = makeSymbol("ALL-QUOTED-ISAS-WRT");

    private static final SubLSymbol ALL_QUOTED_INSTANCES = makeSymbol("ALL-QUOTED-INSTANCES");

    private static final SubLSymbol ALL_QUOTED_ISA_AMONG = makeSymbol("ALL-QUOTED-ISA-AMONG");

    private static final SubLString $str210$Returns_those_elements_of_COLLECT = makeString("Returns those elements of COLLECTIONS that include TERM as an all-quoted-instance");

    private static final SubLSymbol QUOTED_INSTANCEOF_AFTER_ADDING = makeSymbol("QUOTED-INSTANCEOF-AFTER-ADDING");

    private static final SubLSymbol QUOTED_INSTANCEOF_AFTER_REMOVING = makeSymbol("QUOTED-INSTANCEOF-AFTER-REMOVING");

    static private final SubLList $list221 = list(list(list(NIL), NIL), list(list(list(reader_make_constant_shell("Thing"))), list(reader_make_constant_shell("Thing"))));

    private static final SubLSymbol MAX_COLS = makeSymbol("MAX-COLS");

    private static final SubLList $list223 = list(list(list(NIL), NIL));

    static private final SubLList $list225 = list(list(list(reader_make_constant_shell("Thing"), list(reader_make_constant_shell("Collection"))), list(reader_make_constant_shell("Collection"))), list(list(reader_make_constant_shell("Muffet"), NIL), NIL));

    private static final SubLList $list226 = list(list(list(reader_make_constant_shell("Female"), list(reader_make_constant_shell("Muffet")), reader_make_constant_shell("CyclistsMt")), list(reader_make_constant_shell("Muffet"))), list(list(reader_make_constant_shell("Female"), NIL, reader_make_constant_shell("CyclistsMt")), NIL), list(list(reader_make_constant_shell("Female"), NIL), NIL));

    private static final SubLList $list227 = list(list(list(reader_make_constant_shell("Muffet"), list(reader_make_constant_shell("Male")), reader_make_constant_shell("CyclistsMt")), list(reader_make_constant_shell("Male"))));

    private static final SubLSymbol $sym228$ALL_INSTANCES_ = makeSymbol("ALL-INSTANCES?");

    private static final SubLList $list229 = list(list(list(NIL, reader_make_constant_shell("Female")), T), list(list(list(QUOTE, list(reader_make_constant_shell("Muffet"))), reader_make_constant_shell("Female")), T));

    private static final SubLList $list230 = list(list(list(list(reader_make_constant_shell("Muffet")), list(reader_make_constant_shell("Poodle")), reader_make_constant_shell("CyclistsMt")), T));

    static final boolean assertionsDisabledSynth = true;

    // Definitions
    /**
     * collections that include <term> (inexpensive)
     */
    @LispMethod(comment = "collections that include <term> (inexpensive)")
    public static final SubLObject isa_alt(SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            SubLObject result = sbhl_link_methods.sbhl_forward_true_link_nodes(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt, tv, UNPROVIDED);
            if (NIL != forts.non_fort_p(v_term)) {
                result = list_utilities.fast_delete_duplicates(nconc(sbhl_link_methods.non_fort_isas(v_term, mt, tv), result), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            if (NIL != sbhl_link_methods.isa_stored_naut_arg2_p(v_term)) {
                result = list_utilities.fast_delete_duplicates(nconc(sbhl_link_methods.isas_from_naut_arg2(v_term, mt, tv), result), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            return result;
        }
    }

    // Definitions
    /**
     * collections that include <term> (inexpensive)
     */
    @LispMethod(comment = "collections that include <term> (inexpensive)")
    public static SubLObject isa(final SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLObject result = sbhl_link_methods.sbhl_forward_true_link_nodes(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt, tv, UNPROVIDED);
        if (NIL != forts.non_fort_p(v_term)) {
            result = list_utilities.fast_delete_duplicates(nconc(sbhl_link_methods.non_fort_isas(v_term, mt, tv), result), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        if (NIL != sbhl_link_methods.isa_stored_naut_arg2_p(v_term)) {
            result = list_utilities.fast_delete_duplicates(nconc(sbhl_link_methods.isas_from_naut_arg2(v_term, mt, tv), result), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return result;
    }

    /**
     * Returns most-specific collections that include TERM (inexpensive)
     */
    @LispMethod(comment = "Returns most-specific collections that include TERM (inexpensive)")
    public static final SubLObject min_isa_alt(SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(v_term, HL_TERM_P);
        {
            SubLObject result = sbhl_search_methods.sbhl_min_forward_true_link_nodes(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt, tv);
            if (NIL != forts.non_fort_p(v_term)) {
                result = genls.min_cols(nconc(sbhl_link_methods.non_fort_isas(v_term, mt, tv), result), mt, tv);
            }
            return result;
        }
    }

    /**
     * Returns most-specific collections that include TERM (inexpensive)
     */
    @LispMethod(comment = "Returns most-specific collections that include TERM (inexpensive)")
    public static SubLObject min_isa(final SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLTrampolineFile.enforceType(v_term, HL_TERM_P);
        SubLObject result = sbhl_search_methods.sbhl_min_forward_true_link_nodes(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt, tv);
        if (NIL != forts.non_fort_p(v_term)) {
            result = genls.min_cols(nconc(sbhl_link_methods.non_fort_isas(v_term, mt, tv), result), mt, tv);
        }
        if (NIL != sbhl_link_methods.isa_stored_naut_arg2_p(v_term)) {
            result = genls.min_cols(nconc(sbhl_link_methods.isas_from_naut_arg2(v_term, mt, tv), result), mt, tv);
        }
        if (NIL == $sbhl_may_return_naut_collections_as_fortsP$.getDynamicValue(thread)) {
            result = list_utilities.remove_if_not(FORT_P, result, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return result;
    }

    /**
     * most-specific collections that include <term> in <mt> (inexpensive)
     */
    @LispMethod(comment = "most-specific collections that include <term> in <mt> (inexpensive)")
    public static final SubLObject min_isa_in_mt_alt(SubLObject v_term, SubLObject mt) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EQ, thread);
                        mt_relevance_macros.$mt$.bind(mt, thread);
                        result = com.cyc.cycjava.cycl.isa.min_isa(v_term, UNPROVIDED, UNPROVIDED);
                    } finally {
                        mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     * most-specific collections that include <term> in <mt> (inexpensive)
     */
    @LispMethod(comment = "most-specific collections that include <term> in <mt> (inexpensive)")
    public static SubLObject min_isa_in_mt(final SubLObject v_term, final SubLObject mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EQ, thread);
            mt_relevance_macros.$mt$.bind(mt, thread);
            result = min_isa(v_term, UNPROVIDED, UNPROVIDED);
        } finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     * most-specific collections that include NAUT
     */
    @LispMethod(comment = "most-specific collections that include NAUT")
    public static final SubLObject nat_isa_alt(SubLObject naut, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            SubLObject nart = narts_high.find_nart(naut);
            if (NIL != nart_handles.nart_p(nart)) {
                return com.cyc.cycjava.cycl.isa.isa(nart, mt, tv);
            } else {
                return com.cyc.cycjava.cycl.isa.naut_isa(naut, mt);
            }
        }
    }

    /**
     * most-specific collections that include NAUT
     */
    @LispMethod(comment = "most-specific collections that include NAUT")
    public static SubLObject nat_isa(final SubLObject naut, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLObject nart = narts_high.find_nart(naut);
        if (NIL != nart_handles.nart_p(nart)) {
            return isa(nart, mt, tv);
        }
        return naut_isa(naut, mt);
    }

    /**
     * returns the isa of NAUT
     */
    @LispMethod(comment = "returns the isa of NAUT")
    public static final SubLObject naut_isa_alt(SubLObject naut, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return list_utilities.remove_duplicate_forts(append(new SubLObject[]{ kb_accessors.result_isa(cycl_utilities.nat_functor(naut), mt), kb_accessors.result_isa_args(naut, mt), kb_accessors.result_inter_arg_isa(naut, mt), kb_accessors.result_inter_arg_isa_reln(naut, mt), kb_accessors.result_isa_via_arg_arg_isa(naut, mt), sbhl_link_methods.non_fort_isas(naut, mt, UNPROVIDED) }));
    }

    /**
     * returns the isa of NAUT
     */
    @LispMethod(comment = "returns the isa of NAUT")
    public static SubLObject naut_isa(final SubLObject naut, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return list_utilities.remove_duplicate_forts(append(new SubLObject[]{ kb_accessors.result_isa(cycl_utilities.nat_functor(naut), mt), kb_accessors.result_isa_args(naut, mt), kb_accessors.result_inter_arg_isa(naut, mt), kb_accessors.result_inter_arg_isa_reln(naut, mt), kb_accessors.result_isa_via_arg_arg_isa(naut, mt), kb_accessors.result_isa_arg_isas(naut, mt), kb_accessors.result_isa_when_arg_isa(naut, mt), sbhl_link_methods.non_fort_isas(naut, mt, UNPROVIDED) }));
    }

    /**
     * Returns the asserted false isas of TERM
     */
    @LispMethod(comment = "Returns the asserted false isas of TERM")
    public static final SubLObject not_isa_alt(SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_link_methods.sbhl_forward_false_link_nodes(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt, tv, UNPROVIDED);
    }

    /**
     * Returns the asserted false isas of TERM
     */
    @LispMethod(comment = "Returns the asserted false isas of TERM")
    public static SubLObject not_isa(final SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_link_methods.sbhl_forward_false_link_nodes(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt, tv, UNPROVIDED);
    }

    /**
     * Returns most-general collections that do not include TERM (expensive)
     */
    @LispMethod(comment = "Returns most-general collections that do not include TERM (expensive)")
    public static final SubLObject max_not_isa_alt(SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(v_term, HL_TERM_P);
        return genls.max_cols(sbhl_search_implied_relations.sbhl_all_implied_forward_false_nodes(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt, tv), mt, tv);
    }

    /**
     * Returns most-general collections that do not include TERM (expensive)
     */
    @LispMethod(comment = "Returns most-general collections that do not include TERM (expensive)")
    public static SubLObject max_not_isa(final SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(v_term, HL_TERM_P);
        return genls.max_cols(sbhl_search_implied_relations.sbhl_all_implied_forward_false_nodes(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt, tv), mt, tv);
    }

    /**
     * most-general collections that do not include <nat> (expensive)
     */
    @LispMethod(comment = "most-general collections that do not include <nat> (expensive)")
    public static final SubLObject nat_max_not_isa_alt(SubLObject nat, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            SubLObject nart = narts_high.find_nart(nat);
            if (NIL != nart_handles.nart_p(nart)) {
                return com.cyc.cycjava.cycl.isa.max_not_isa(nart, mt, tv);
            } else {
                {
                    SubLObject not_isa = NIL;
                    SubLObject cdolist_list_var = genls.union_all_genls(kb_accessors.result_types(cycl_utilities.nat_functor(nat), mt), mt, tv);
                    SubLObject v_isa = NIL;
                    for (v_isa = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , v_isa = cdolist_list_var.first()) {
                        not_isa = nunion(disjoint_with.max_all_disjoint_with(v_isa, mt, tv), not_isa, UNPROVIDED, UNPROVIDED);
                        not_isa = nunion(sdc.max_sdc(v_isa, mt), not_isa, UNPROVIDED, UNPROVIDED);
                    }
                    return genls.max_cols(not_isa, mt, tv);
                }
            }
        }
    }

    /**
     * most-general collections that do not include <nat> (expensive)
     */
    @LispMethod(comment = "most-general collections that do not include <nat> (expensive)")
    public static SubLObject nat_max_not_isa(final SubLObject nat, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLObject nart = narts_high.find_nart(nat);
        if (NIL != nart_handles.nart_p(nart)) {
            return max_not_isa(nart, mt, tv);
        }
        SubLObject not_isa = NIL;
        SubLObject cdolist_list_var = genls.union_all_genls(kb_accessors.result_types(cycl_utilities.nat_functor(nat), mt), mt, tv);
        SubLObject v_isa = NIL;
        v_isa = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            not_isa = nunion(disjoint_with.max_all_disjoint_with(v_isa, mt, tv), not_isa, UNPROVIDED, UNPROVIDED);
            not_isa = nunion(sdc.max_sdc(v_isa, mt), not_isa, UNPROVIDED, UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            v_isa = cdolist_list_var.first();
        } 
        return genls.max_cols(not_isa, mt, tv);
    }

    /**
     * Returns the asserted instances of COL
     */
    @LispMethod(comment = "Returns the asserted instances of COL")
    public static final SubLObject instances_alt(SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = $$True_JustificationTruth;
        }
        SubLTrampolineFile.checkType(col, EL_FORT_P);
        return sbhl_link_methods.sbhl_backward_true_link_nodes(sbhl_module_vars.get_sbhl_module($$isa), col, mt, tv, UNPROVIDED);
    }

    /**
     * Returns the asserted instances of COL
     */
    @LispMethod(comment = "Returns the asserted instances of COL")
    public static SubLObject instances(final SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = $$True_JustificationTruth;
        }
        SubLTrampolineFile.enforceType(col, EL_FORT_P);
        return sbhl_link_methods.sbhl_backward_true_link_nodes(sbhl_module_vars.get_sbhl_module($$isa), col, mt, tv, UNPROVIDED);
    }

    /**
     * Returns the maximal among the asserted instances of COL
     */
    @LispMethod(comment = "Returns the maximal among the asserted instances of COL")
    public static final SubLObject max_instances_alt(SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(col, EL_FORT_P);
        return sbhl_search_methods.sbhl_max_backward_true_link_nodes(sbhl_module_vars.get_sbhl_module($$isa), col, mt, tv);
    }

    /**
     * Returns the maximal among the asserted instances of COL
     */
    @LispMethod(comment = "Returns the maximal among the asserted instances of COL")
    public static SubLObject max_instances(final SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(col, EL_FORT_P);
        return sbhl_search_methods.sbhl_max_backward_true_link_nodes(sbhl_module_vars.get_sbhl_module($$isa), col, mt, tv);
    }

    /**
     * Returns a list of all the instances of CYCL-TERM, except that if there are more than MAX terms, then the list is truncated to MAX length.
     */
    @LispMethod(comment = "Returns a list of all the instances of CYCL-TERM, except that if there are more than MAX terms, then the list is truncated to MAX length.")
    public static final SubLObject all_instances_with_max_alt(SubLObject cycl_term, SubLObject max) {
        SubLTrampolineFile.checkType(max, INTEGERP);
        if (NIL == fort_types_interface.collection_p(cycl_term)) {
            return NIL;
        }
        {
            SubLObject iter = kb_iterators.new_instances_iterator(cycl_term);
            SubLObject cur_term = NIL;
            SubLObject result = NIL;
            SubLObject i = NIL;
            for (i = ZERO_INTEGER; i.numL(max); i = add(i, ONE_INTEGER)) {
                if (NIL != iteration.iteration_done(iter)) {
                    return result;
                }
                cur_term = iteration.iteration_next_without_values(iter, $INVALID_ITERATION_TERM);
                if (cur_term != $INVALID_ITERATION_TERM) {
                    result = cons(cur_term, result);
                }
            }
            return result;
        }
    }

    /**
     * Returns a list of all the instances of CYCL-TERM, except that if there are more than MAX terms, then the list is truncated to MAX length.
     */
    @LispMethod(comment = "Returns a list of all the instances of CYCL-TERM, except that if there are more than MAX terms, then the list is truncated to MAX length.")
    public static SubLObject all_instances_with_max(final SubLObject cycl_term, final SubLObject max) {
        assert NIL != integerp(max) : "! integerp(max) " + ("Types.integerp(max) " + "CommonSymbols.NIL != Types.integerp(max) ") + max;
        if (NIL == fort_types_interface.collection_p(cycl_term)) {
            return NIL;
        }
        final SubLObject iter = kb_iterators.new_instances_iterator(cycl_term);
        SubLObject cur_term = NIL;
        SubLObject result = NIL;
        SubLObject i;
        for (i = NIL, i = ZERO_INTEGER; i.numL(max); i = add(i, ONE_INTEGER)) {
            if (NIL != iteration.iteration_done(iter)) {
                return result;
            }
            cur_term = iteration.iteration_next_without_values(iter, $INVALID_ITERATION_TERM);
            if (cur_term != $INVALID_ITERATION_TERM) {
                result = cons(cur_term, result);
            }
        }
        return result;
    }

    /**
     * Returns the negated instances of collection COL
     */
    @LispMethod(comment = "Returns the negated instances of collection COL")
    public static final SubLObject not_instances_alt(SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_link_methods.sbhl_backward_false_link_nodes(sbhl_module_vars.get_sbhl_module($$isa), col, mt, tv, UNPROVIDED);
    }

    /**
     * Returns the negated instances of collection COL
     */
    @LispMethod(comment = "Returns the negated instances of collection COL")
    public static SubLObject not_instances(final SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_link_methods.sbhl_backward_false_link_nodes(sbhl_module_vars.get_sbhl_module($$isa), col, mt, tv, UNPROVIDED);
    }

    /**
     * Returns the most-specific negated instances of collection COL
     */
    @LispMethod(comment = "Returns the most-specific negated instances of collection COL")
    public static final SubLObject min_not_instances_alt(SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(col, EL_FORT_P);
        return sbhl_search_methods.sbhl_min_backward_false_link_nodes(sbhl_module_vars.get_sbhl_module($$isa), col, mt, tv);
    }

    /**
     * Returns the most-specific negated instances of collection COL
     */
    @LispMethod(comment = "Returns the most-specific negated instances of collection COL")
    public static SubLObject min_not_instances(final SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(col, EL_FORT_P);
        return sbhl_search_methods.sbhl_min_backward_false_link_nodes(sbhl_module_vars.get_sbhl_module($$isa), col, mt, tv);
    }

    /**
     * Returns the direct isas of those collections of which TERM is a direct instance
     */
    @LispMethod(comment = "Returns the direct isas of those collections of which TERM is a direct instance")
    public static final SubLObject isa_siblings_alt(SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(v_term, HL_TERM_P);
        return sbhl_link_methods.sbhl_siblings_forward(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt, tv);
    }

    /**
     * Returns the direct isas of those collections of which TERM is a direct instance
     */
    @LispMethod(comment = "Returns the direct isas of those collections of which TERM is a direct instance")
    public static SubLObject isa_siblings(final SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(v_term, HL_TERM_P);
        return sbhl_link_methods.sbhl_siblings_forward(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt, tv);
    }

    /**
     * Returns the direct instances of those collections having direct isa TERM
     */
    @LispMethod(comment = "Returns the direct instances of those collections having direct isa TERM")
    public static final SubLObject instance_siblings_alt(SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(v_term, EL_FORT_P);
        return sbhl_link_methods.sbhl_siblings_backward(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt, tv);
    }

    /**
     * Returns the direct instances of those collections having direct isa TERM
     */
    @LispMethod(comment = "Returns the direct instances of those collections having direct isa TERM")
    public static SubLObject instance_siblings(final SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(v_term, EL_FORT_P);
        return sbhl_link_methods.sbhl_siblings_backward(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt, tv);
    }

    /**
     * apply FUNCTION to every (least general) #$isa of TERM
     */
    @LispMethod(comment = "apply FUNCTION to every (least general) #$isa of TERM")
    public static final SubLObject map_isa_alt(SubLObject function, SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject module = sbhl_module_vars.get_sbhl_module($$isa);
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_4 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_5 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt36$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_6 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_7 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_8 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_9 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_10 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_11 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_12 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_13 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_14 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_15 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            {
                                                                                                SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(module);
                                                                                                SubLObject rest = NIL;
                                                                                                for (rest = accessible_modules; !((NIL != sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) || (NIL == rest)); rest = rest.rest()) {
                                                                                                    {
                                                                                                        SubLObject module_var = rest.first();
                                                                                                        {
                                                                                                            SubLObject _prev_bind_0_16 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                                            SubLObject _prev_bind_1_17 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                            try {
                                                                                                                sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                                {
                                                                                                                    SubLObject node = function_terms.naut_to_nart(v_term);
                                                                                                                    if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                                        {
                                                                                                                            SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                            if (NIL != d_link) {
                                                                                                                                {
                                                                                                                                    SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                                    if (NIL != mt_links) {
                                                                                                                                        {
                                                                                                                                            SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                                            while (!((NIL != sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state)))) {
                                                                                                                                                thread.resetMultipleValues();
                                                                                                                                                {
                                                                                                                                                    SubLObject mt_18 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                                    SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                                    if (NIL != mt_relevance_macros.relevant_mtP(mt_18)) {
                                                                                                                                                        {
                                                                                                                                                            SubLObject _prev_bind_0_19 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                            try {
                                                                                                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt_18, thread);
                                                                                                                                                                {
                                                                                                                                                                    SubLObject iteration_state_20 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                                    while (!((NIL != sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state_20)))) {
                                                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                                                        {
                                                                                                                                                                            SubLObject tv_21 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_20);
                                                                                                                                                                            SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                                                            if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_21)) {
                                                                                                                                                                                {
                                                                                                                                                                                    SubLObject _prev_bind_0_22 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                                    try {
                                                                                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.bind(tv_21, thread);
                                                                                                                                                                                        {
                                                                                                                                                                                            SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                                            SubLObject rest_23 = NIL;
                                                                                                                                                                                            for (rest_23 = new_list; !((NIL != sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) || (NIL == rest_23)); rest_23 = rest_23.rest()) {
                                                                                                                                                                                                {
                                                                                                                                                                                                    SubLObject v_isa = rest_23.first();
                                                                                                                                                                                                    funcall(function, v_isa);
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    } finally {
                                                                                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_22, thread);
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            iteration_state_20 = dictionary_contents.do_dictionary_contents_next(iteration_state_20);
                                                                                                                                                                        }
                                                                                                                                                                    } 
                                                                                                                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state_20);
                                                                                                                                                                }
                                                                                                                                                            } finally {
                                                                                                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_19, thread);
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                                }
                                                                                                                                            } 
                                                                                                                                            dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            } else {
                                                                                                                                sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt38$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                                            {
                                                                                                                                SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                                SubLObject rest_24 = NIL;
                                                                                                                                for (rest_24 = new_list; !((NIL != sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) || (NIL == rest_24)); rest_24 = rest_24.rest()) {
                                                                                                                                    {
                                                                                                                                        SubLObject generating_fn = rest_24.first();
                                                                                                                                        {
                                                                                                                                            SubLObject _prev_bind_0_25 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                                            try {
                                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                                {
                                                                                                                                                    SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                                    SubLObject new_list_26 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                    SubLObject rest_27 = NIL;
                                                                                                                                                    for (rest_27 = new_list_26; !((NIL != sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) || (NIL == rest_27)); rest_27 = rest_27.rest()) {
                                                                                                                                                        {
                                                                                                                                                            SubLObject v_isa = rest_27.first();
                                                                                                                                                            funcall(function, v_isa);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            } finally {
                                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_25, thread);
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            } finally {
                                                                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_17, thread);
                                                                                                                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_16, thread);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_15, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_14, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_13, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_12, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_11, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_10, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_9, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_8, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_7, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_6, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_5, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_4, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_3, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_2, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_1, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
            }
            if (NIL != forts.non_fort_p(v_term)) {
                {
                    SubLObject mt_var = mt;
                    {
                        SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
                        SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                        SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                        try {
                            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                            {
                                SubLObject tv_var = tv;
                                {
                                    SubLObject _prev_bind_0_28 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                    SubLObject _prev_bind_1_29 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), thread);
                                        sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                        if (NIL != tv_var) {
                                            if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                if (NIL == sbhl_search_vars.sbhl_search_truth_value_p(tv_var)) {
                                                    {
                                                        SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                        if (pcase_var.eql($ERROR)) {
                                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt31$_A_is_not_a__A, tv_var, SBHL_SEARCH_TRUTH_VALUE_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                        } else {
                                                            if (pcase_var.eql($CERROR)) {
                                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_SEARCH_TRUTH_VALUE_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                            } else {
                                                                if (pcase_var.eql($WARN)) {
                                                                    Errors.warn($str_alt31$_A_is_not_a__A, tv_var, SBHL_SEARCH_TRUTH_VALUE_P);
                                                                } else {
                                                                    Errors.warn($str_alt36$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                    Errors.cerror($$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_SEARCH_TRUTH_VALUE_P);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        {
                                            SubLObject csome_list_var = gethash_without_values(v_term, sbhl_link_methods.non_fort_isa_table(), UNPROVIDED);
                                            SubLObject isa_tuple = NIL;
                                            for (isa_tuple = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest() , isa_tuple = csome_list_var.first()) {
                                                {
                                                    SubLObject datum = isa_tuple;
                                                    SubLObject current = datum;
                                                    SubLObject v_isa = NIL;
                                                    SubLObject table_mt = NIL;
                                                    SubLObject table_tv = NIL;
                                                    destructuring_bind_must_consp(current, datum, $list_alt41);
                                                    v_isa = current.first();
                                                    current = current.rest();
                                                    destructuring_bind_must_consp(current, datum, $list_alt41);
                                                    table_mt = current.first();
                                                    current = current.rest();
                                                    destructuring_bind_must_consp(current, datum, $list_alt41);
                                                    table_tv = current.first();
                                                    current = current.rest();
                                                    if (NIL == current) {
                                                        if ((NIL != mt_relevance_macros.relevant_mtP(table_mt)) && (NIL != sbhl_search_vars.relevant_sbhl_tvP(table_tv))) {
                                                            funcall(function, v_isa);
                                                        }
                                                    } else {
                                                        cdestructuring_bind_error(datum, $list_alt41);
                                                    }
                                                }
                                            }
                                        }
                                    } finally {
                                        sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_29, thread);
                                        sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_28, thread);
                                    }
                                }
                            }
                        } finally {
                            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1, thread);
                            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
                        }
                    }
                }
            }
            if (NIL != sbhl_link_methods.isa_stored_naut_arg2_p(v_term)) {
                {
                    SubLObject module = sbhl_module_vars.get_sbhl_module($$genls);
                    SubLObject mt_var = mt;
                    {
                        SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
                        SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                        SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                        try {
                            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                            {
                                SubLObject tv_var = tv;
                                {
                                    SubLObject _prev_bind_0_30 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                    SubLObject _prev_bind_1_31 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                        sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                        if (NIL != tv_var) {
                                            if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                    {
                                                        SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                        if (pcase_var.eql($ERROR)) {
                                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                        } else {
                                                            if (pcase_var.eql($CERROR)) {
                                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                            } else {
                                                                if (pcase_var.eql($WARN)) {
                                                                    Errors.warn($str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                } else {
                                                                    Errors.warn($str_alt36$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                    Errors.cerror($$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        {
                                            SubLObject _prev_bind_0_32 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                            try {
                                                sbhl_module_vars.$sbhl_module$.bind(module, thread);
                                                {
                                                    SubLObject cdolist_list_var = gethash(v_term, sbhl_link_methods.$isa_arg2_naut_table$.getGlobalValue(), UNPROVIDED);
                                                    SubLObject isa_tuple = NIL;
                                                    for (isa_tuple = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , isa_tuple = cdolist_list_var.first()) {
                                                        {
                                                            SubLObject datum = isa_tuple;
                                                            SubLObject current = datum;
                                                            SubLObject naut = NIL;
                                                            SubLObject isa_mt = NIL;
                                                            SubLObject isa_tv = NIL;
                                                            destructuring_bind_must_consp(current, datum, $list_alt43);
                                                            naut = current.first();
                                                            current = current.rest();
                                                            destructuring_bind_must_consp(current, datum, $list_alt43);
                                                            isa_mt = current.first();
                                                            current = current.rest();
                                                            destructuring_bind_must_consp(current, datum, $list_alt43);
                                                            isa_tv = current.first();
                                                            current = current.rest();
                                                            if (NIL == current) {
                                                                if ((NIL != mt_relevance_macros.relevant_mtP(isa_mt)) && (NIL != sbhl_search_vars.relevant_sbhl_tvP(isa_tv))) {
                                                                    {
                                                                        SubLObject v_isa = naut;
                                                                        funcall(function, v_isa);
                                                                    }
                                                                    {
                                                                        SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_forward_directed_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), module)))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_forward_directed_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), module);
                                                                        SubLObject cdolist_list_var_33 = new_list;
                                                                        SubLObject generating_fn = NIL;
                                                                        for (generating_fn = cdolist_list_var_33.first(); NIL != cdolist_list_var_33; cdolist_list_var_33 = cdolist_list_var_33.rest() , generating_fn = cdolist_list_var_33.first()) {
                                                                            {
                                                                                SubLObject _prev_bind_0_34 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                    {
                                                                                        SubLObject v_isa = funcall(generating_fn, naut);
                                                                                        funcall(function, v_isa);
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_34, thread);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                cdestructuring_bind_error(datum, $list_alt43);
                                                            }
                                                        }
                                                    }
                                                }
                                            } finally {
                                                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_32, thread);
                                            }
                                        }
                                    } finally {
                                        sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_31, thread);
                                        sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_30, thread);
                                    }
                                }
                            }
                        } finally {
                            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1, thread);
                            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
                        }
                    }
                }
            }
            return NIL;
        }
    }

    /**
     * apply FUNCTION to every (least general) #$isa of TERM
     */
    @LispMethod(comment = "apply FUNCTION to every (least general) #$isa of TERM")
    public static SubLObject map_isa(final SubLObject function, final SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject module = sbhl_module_vars.get_sbhl_module($$isa);
        SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$2 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$3 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str37$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$3 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$4 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$4 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$4 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$5 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$6 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$5 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$5 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$14 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$15 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(module);
                                        SubLObject rest;
                                        SubLObject module_var;
                                        SubLObject _prev_bind_0_$7;
                                        SubLObject _prev_bind_1_$6;
                                        SubLObject node;
                                        SubLObject d_link;
                                        SubLObject mt_links;
                                        SubLObject iteration_state;
                                        SubLObject mt_$18;
                                        SubLObject tv_links;
                                        SubLObject _prev_bind_0_$8;
                                        SubLObject iteration_state_$20;
                                        SubLObject tv_$21;
                                        SubLObject link_nodes;
                                        SubLObject _prev_bind_0_$9;
                                        SubLObject sol;
                                        SubLObject set_contents_var;
                                        SubLObject basis_object;
                                        SubLObject state;
                                        SubLObject v_isa;
                                        SubLObject csome_list_var;
                                        SubLObject v_isa2;
                                        SubLObject new_list;
                                        SubLObject rest_$23;
                                        SubLObject generating_fn;
                                        SubLObject _prev_bind_0_$10;
                                        SubLObject sol2;
                                        SubLObject link_nodes2;
                                        SubLObject set_contents_var2;
                                        SubLObject basis_object2;
                                        SubLObject state2;
                                        SubLObject v_isa3;
                                        SubLObject csome_list_var2;
                                        SubLObject v_isa4;
                                        for (rest = NIL, rest = accessible_modules; (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL != rest); rest = rest.rest()) {
                                            module_var = rest.first();
                                            _prev_bind_0_$7 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                            _prev_bind_1_$6 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                            try {
                                                sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                node = function_terms.naut_to_nart(v_term);
                                                if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                    d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                    if (NIL != d_link) {
                                                        mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                        if (NIL != mt_links) {
                                                            for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                                                thread.resetMultipleValues();
                                                                mt_$18 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                tv_links = thread.secondMultipleValue();
                                                                thread.resetMultipleValues();
                                                                if (NIL != mt_relevance_macros.relevant_mtP(mt_$18)) {
                                                                    _prev_bind_0_$8 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_link_vars.$sbhl_link_mt$.bind(mt_$18, thread);
                                                                        for (iteration_state_$20 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$20)); iteration_state_$20 = dictionary_contents.do_dictionary_contents_next(iteration_state_$20)) {
                                                                            thread.resetMultipleValues();
                                                                            tv_$21 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$20);
                                                                            link_nodes = thread.secondMultipleValue();
                                                                            thread.resetMultipleValues();
                                                                            if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$21)) {
                                                                                _prev_bind_0_$9 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv_$21, thread);
                                                                                    sol = link_nodes;
                                                                                    if (NIL != set.set_p(sol)) {
                                                                                        set_contents_var = set.do_set_internal(sol);
                                                                                        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
                                                                                            v_isa = set_contents.do_set_contents_next(basis_object, state);
                                                                                            if (NIL != set_contents.do_set_contents_element_validP(state, v_isa)) {
                                                                                                funcall(function, v_isa);
                                                                                            }
                                                                                        }
                                                                                    } else
                                                                                        if (sol.isList()) {
                                                                                            if (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) {
                                                                                                csome_list_var = sol;
                                                                                                v_isa2 = NIL;
                                                                                                v_isa2 = csome_list_var.first();
                                                                                                while ((NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL != csome_list_var)) {
                                                                                                    funcall(function, v_isa2);
                                                                                                    csome_list_var = csome_list_var.rest();
                                                                                                    v_isa2 = csome_list_var.first();
                                                                                                } 
                                                                                            }
                                                                                        } else {
                                                                                            Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                        }

                                                                                } finally {
                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$9, thread);
                                                                                }
                                                                            }
                                                                        }
                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state_$20);
                                                                    } finally {
                                                                        sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$8, thread);
                                                                    }
                                                                }
                                                            }
                                                            dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                        }
                                                    } else {
                                                        sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str40$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                    }
                                                } else
                                                    if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                        new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                        for (rest_$23 = NIL, rest_$23 = new_list; (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL != rest_$23); rest_$23 = rest_$23.rest()) {
                                                            generating_fn = rest_$23.first();
                                                            _prev_bind_0_$10 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                            try {
                                                                sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                link_nodes2 = sol2 = funcall(generating_fn, node);
                                                                if (NIL != set.set_p(sol2)) {
                                                                    set_contents_var2 = set.do_set_internal(sol2);
                                                                    for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL == set_contents.do_set_contents_doneP(basis_object2, state2)); state2 = set_contents.do_set_contents_update_state(state2)) {
                                                                        v_isa3 = set_contents.do_set_contents_next(basis_object2, state2);
                                                                        if (NIL != set_contents.do_set_contents_element_validP(state2, v_isa3)) {
                                                                            funcall(function, v_isa3);
                                                                        }
                                                                    }
                                                                } else
                                                                    if (sol2.isList()) {
                                                                        if (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) {
                                                                            csome_list_var2 = sol2;
                                                                            v_isa4 = NIL;
                                                                            v_isa4 = csome_list_var2.first();
                                                                            while ((NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL != csome_list_var2)) {
                                                                                funcall(function, v_isa4);
                                                                                csome_list_var2 = csome_list_var2.rest();
                                                                                v_isa4 = csome_list_var2.first();
                                                                            } 
                                                                        }
                                                                    } else {
                                                                        Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                                    }

                                                            } finally {
                                                                sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$10, thread);
                                                            }
                                                        }
                                                    }

                                            } finally {
                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$6, thread);
                                                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$7, thread);
                                            }
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$15, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$14, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$5, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$5, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$6, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$5, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$4, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$4, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$4, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$3, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$3, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$2, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$3, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$2, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        if (NIL != forts.non_fort_p(v_term)) {
            final SubLObject mt_var2 = mt;
            _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
            _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var2), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var2), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var2), thread);
                final SubLObject tv_var2 = tv;
                final SubLObject _prev_bind_0_$11 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$7 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var2 ? tv_var2 : sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var2 ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var2) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_search_truth_value_p(tv_var2))) {
                        final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var2.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str32$_A_is_not_a__A, tv_var2, SBHL_SEARCH_TRUTH_VALUE_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var2.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str32$_A_is_not_a__A, tv_var2, SBHL_SEARCH_TRUTH_VALUE_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var2.eql($WARN)) {
                                    Errors.warn($str32$_A_is_not_a__A, tv_var2, SBHL_SEARCH_TRUTH_VALUE_P);
                                } else {
                                    Errors.warn($str37$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str32$_A_is_not_a__A, tv_var2, SBHL_SEARCH_TRUTH_VALUE_P);
                                }


                    }
                    SubLObject csome_list_var3 = gethash_without_values(v_term, sbhl_link_methods.non_fort_isa_table(), UNPROVIDED);
                    SubLObject isa_tuple = NIL;
                    isa_tuple = csome_list_var3.first();
                    while (NIL != csome_list_var3) {
                        SubLObject current;
                        final SubLObject datum = current = isa_tuple;
                        SubLObject v_isa5 = NIL;
                        SubLObject table_mt = NIL;
                        SubLObject table_tv = NIL;
                        destructuring_bind_must_consp(current, datum, $list43);
                        v_isa5 = current.first();
                        current = current.rest();
                        destructuring_bind_must_consp(current, datum, $list43);
                        table_mt = current.first();
                        current = current.rest();
                        destructuring_bind_must_consp(current, datum, $list43);
                        table_tv = current.first();
                        current = current.rest();
                        if (NIL == current) {
                            if ((NIL != mt_relevance_macros.relevant_mtP(table_mt)) && (NIL != sbhl_search_vars.relevant_sbhl_tvP(table_tv))) {
                                funcall(function, v_isa5);
                            }
                        } else {
                            cdestructuring_bind_error(datum, $list43);
                        }
                        csome_list_var3 = csome_list_var3.rest();
                        isa_tuple = csome_list_var3.first();
                    } 
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$7, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$11, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
            }
        }
        if (NIL != sbhl_link_methods.isa_stored_naut_arg2_p(v_term)) {
            module = sbhl_module_vars.get_sbhl_module($$genls);
            final SubLObject mt_var3 = mt;
            final SubLObject _prev_bind_6 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_7 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_8 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var3), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var3), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var3), thread);
                final SubLObject tv_var3 = tv;
                final SubLObject _prev_bind_0_$12 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$8 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var3 ? tv_var3 : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var3 ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var3) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var3))) {
                        final SubLObject pcase_var3 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var3.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str32$_A_is_not_a__A, tv_var3, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var3.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str32$_A_is_not_a__A, tv_var3, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var3.eql($WARN)) {
                                    Errors.warn($str32$_A_is_not_a__A, tv_var3, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str37$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str32$_A_is_not_a__A, tv_var3, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$13 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        SubLObject cdolist_list_var = gethash(v_term, sbhl_link_methods.$isa_arg2_naut_table$.getGlobalValue(), UNPROVIDED);
                        SubLObject isa_tuple2 = NIL;
                        isa_tuple2 = cdolist_list_var.first();
                        while (NIL != cdolist_list_var) {
                            SubLObject current2;
                            final SubLObject datum2 = current2 = isa_tuple2;
                            SubLObject naut = NIL;
                            SubLObject isa_mt = NIL;
                            SubLObject isa_tv = NIL;
                            destructuring_bind_must_consp(current2, datum2, $list45);
                            naut = current2.first();
                            current2 = current2.rest();
                            destructuring_bind_must_consp(current2, datum2, $list45);
                            isa_mt = current2.first();
                            current2 = current2.rest();
                            destructuring_bind_must_consp(current2, datum2, $list45);
                            isa_tv = current2.first();
                            current2 = current2.rest();
                            if (NIL == current2) {
                                if ((NIL != mt_relevance_macros.relevant_mtP(isa_mt)) && (NIL != sbhl_search_vars.relevant_sbhl_tvP(isa_tv))) {
                                    final SubLObject v_isa6 = naut;
                                    funcall(function, v_isa6);
                                    SubLObject cdolist_list_var_$30;
                                    final SubLObject new_list2 = cdolist_list_var_$30 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_forward_directed_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), module)) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_forward_directed_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), module);
                                    SubLObject generating_fn2 = NIL;
                                    generating_fn2 = cdolist_list_var_$30.first();
                                    while (NIL != cdolist_list_var_$30) {
                                        final SubLObject _prev_bind_0_$14 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                        try {
                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn2, thread);
                                            final SubLObject v_isa7 = funcall(generating_fn2, naut);
                                            funcall(function, v_isa7);
                                        } finally {
                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$14, thread);
                                        }
                                        cdolist_list_var_$30 = cdolist_list_var_$30.rest();
                                        generating_fn2 = cdolist_list_var_$30.first();
                                    } 
                                }
                            } else {
                                cdestructuring_bind_error(datum2, $list45);
                            }
                            cdolist_list_var = cdolist_list_var.rest();
                            isa_tuple2 = cdolist_list_var.first();
                        } 
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$13, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$8, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$12, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_8, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_7, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_6, thread);
            }
        }
        return NIL;
    }

    /**
     *
     *
     * @unknown does no minimization.
     */
    @LispMethod(comment = "@unknown does no minimization.")
    public static final SubLObject map_min_isa_alt(SubLObject function, SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        com.cyc.cycjava.cycl.isa.map_isa(function, v_term, mt, tv);
        return NIL;
    }

    /**
     *
     *
     * @unknown does no minimization.
     */
    @LispMethod(comment = "@unknown does no minimization.")
    public static SubLObject map_min_isa(final SubLObject function, final SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        map_isa(function, v_term, mt, tv);
        return NIL;
    }

    /**
     * apply FUNCTION to every (least general) #$isa of TERM
     */
    @LispMethod(comment = "apply FUNCTION to every (least general) #$isa of TERM")
    public static final SubLObject map_instances_alt(SubLObject function, SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(function, FUNCTION_SPEC_P);
            SubLTrampolineFile.checkType(v_term, EL_FORT_P);
            {
                SubLObject module = sbhl_module_vars.get_sbhl_module($$isa);
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_35 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_36 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_37 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_38 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_39 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt36$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_40 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_41 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_42 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_43 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_44 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_45 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_46 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_47 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_48 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_49 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            {
                                                                                                SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(module);
                                                                                                SubLObject rest = NIL;
                                                                                                for (rest = accessible_modules; !((NIL != sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) || (NIL == rest)); rest = rest.rest()) {
                                                                                                    {
                                                                                                        SubLObject module_var = rest.first();
                                                                                                        {
                                                                                                            SubLObject _prev_bind_0_50 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                                            SubLObject _prev_bind_1_51 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                            try {
                                                                                                                sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                                {
                                                                                                                    SubLObject node = function_terms.naut_to_nart(v_term);
                                                                                                                    if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                                        {
                                                                                                                            SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                            if (NIL != d_link) {
                                                                                                                                {
                                                                                                                                    SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                                    if (NIL != mt_links) {
                                                                                                                                        {
                                                                                                                                            SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                                            while (!((NIL != sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state)))) {
                                                                                                                                                thread.resetMultipleValues();
                                                                                                                                                {
                                                                                                                                                    SubLObject mt_52 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                                    SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                                    if (NIL != mt_relevance_macros.relevant_mtP(mt_52)) {
                                                                                                                                                        {
                                                                                                                                                            SubLObject _prev_bind_0_53 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                            try {
                                                                                                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt_52, thread);
                                                                                                                                                                {
                                                                                                                                                                    SubLObject iteration_state_54 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                                    while (!((NIL != sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state_54)))) {
                                                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                                                        {
                                                                                                                                                                            SubLObject tv_55 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_54);
                                                                                                                                                                            SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                                                            if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_55)) {
                                                                                                                                                                                {
                                                                                                                                                                                    SubLObject _prev_bind_0_56 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                                    try {
                                                                                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.bind(tv_55, thread);
                                                                                                                                                                                        {
                                                                                                                                                                                            SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                                            SubLObject rest_57 = NIL;
                                                                                                                                                                                            for (rest_57 = new_list; !((NIL != sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) || (NIL == rest_57)); rest_57 = rest_57.rest()) {
                                                                                                                                                                                                {
                                                                                                                                                                                                    SubLObject instance = rest_57.first();
                                                                                                                                                                                                    funcall(function, instance);
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    } finally {
                                                                                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_56, thread);
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            iteration_state_54 = dictionary_contents.do_dictionary_contents_next(iteration_state_54);
                                                                                                                                                                        }
                                                                                                                                                                    } 
                                                                                                                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state_54);
                                                                                                                                                                }
                                                                                                                                                            } finally {
                                                                                                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_53, thread);
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                                }
                                                                                                                                            } 
                                                                                                                                            dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            } else {
                                                                                                                                sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt38$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                                            {
                                                                                                                                SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                                SubLObject rest_58 = NIL;
                                                                                                                                for (rest_58 = new_list; !((NIL != sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) || (NIL == rest_58)); rest_58 = rest_58.rest()) {
                                                                                                                                    {
                                                                                                                                        SubLObject generating_fn = rest_58.first();
                                                                                                                                        {
                                                                                                                                            SubLObject _prev_bind_0_59 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                                            try {
                                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                                {
                                                                                                                                                    SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                                    SubLObject new_list_60 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                    SubLObject rest_61 = NIL;
                                                                                                                                                    for (rest_61 = new_list_60; !((NIL != sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) || (NIL == rest_61)); rest_61 = rest_61.rest()) {
                                                                                                                                                        {
                                                                                                                                                            SubLObject instance = rest_61.first();
                                                                                                                                                            funcall(function, instance);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            } finally {
                                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_59, thread);
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            } finally {
                                                                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_51, thread);
                                                                                                                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_50, thread);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_49, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_48, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_47, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_46, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_45, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_44, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_43, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_42, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_41, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_40, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_39, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_38, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_37, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_36, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_35, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
            }
            return NIL;
        }
    }

    /**
     * apply FUNCTION to every (least general) #$isa of TERM
     */
    @LispMethod(comment = "apply FUNCTION to every (least general) #$isa of TERM")
    public static SubLObject map_instances(final SubLObject function, final SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLTrampolineFile.enforceType(function, FUNCTION_SPEC_P);
        SubLTrampolineFile.enforceType(v_term, EL_FORT_P);
        final SubLObject module = sbhl_module_vars.get_sbhl_module($$isa);
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$32 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$33 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$34 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$33 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$34 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str37$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$34 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$35 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$35 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$35 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$36 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$37 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$36 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$36 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$45 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$46 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(module);
                                        SubLObject rest;
                                        SubLObject module_var;
                                        SubLObject _prev_bind_0_$38;
                                        SubLObject _prev_bind_1_$37;
                                        SubLObject node;
                                        SubLObject d_link;
                                        SubLObject mt_links;
                                        SubLObject iteration_state;
                                        SubLObject mt_$49;
                                        SubLObject tv_links;
                                        SubLObject _prev_bind_0_$39;
                                        SubLObject iteration_state_$51;
                                        SubLObject tv_$52;
                                        SubLObject link_nodes;
                                        SubLObject _prev_bind_0_$40;
                                        SubLObject sol;
                                        SubLObject set_contents_var;
                                        SubLObject basis_object;
                                        SubLObject state;
                                        SubLObject instance;
                                        SubLObject csome_list_var;
                                        SubLObject instance2;
                                        SubLObject new_list;
                                        SubLObject rest_$54;
                                        SubLObject generating_fn;
                                        SubLObject _prev_bind_0_$41;
                                        SubLObject sol2;
                                        SubLObject link_nodes2;
                                        SubLObject set_contents_var2;
                                        SubLObject basis_object2;
                                        SubLObject state2;
                                        SubLObject instance3;
                                        SubLObject csome_list_var2;
                                        SubLObject instance4;
                                        for (rest = NIL, rest = accessible_modules; (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL != rest); rest = rest.rest()) {
                                            module_var = rest.first();
                                            _prev_bind_0_$38 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                            _prev_bind_1_$37 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                            try {
                                                sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                node = function_terms.naut_to_nart(v_term);
                                                if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                    d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                    if (NIL != d_link) {
                                                        mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                        if (NIL != mt_links) {
                                                            for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                                                thread.resetMultipleValues();
                                                                mt_$49 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                tv_links = thread.secondMultipleValue();
                                                                thread.resetMultipleValues();
                                                                if (NIL != mt_relevance_macros.relevant_mtP(mt_$49)) {
                                                                    _prev_bind_0_$39 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_link_vars.$sbhl_link_mt$.bind(mt_$49, thread);
                                                                        for (iteration_state_$51 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$51)); iteration_state_$51 = dictionary_contents.do_dictionary_contents_next(iteration_state_$51)) {
                                                                            thread.resetMultipleValues();
                                                                            tv_$52 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$51);
                                                                            link_nodes = thread.secondMultipleValue();
                                                                            thread.resetMultipleValues();
                                                                            if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$52)) {
                                                                                _prev_bind_0_$40 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv_$52, thread);
                                                                                    sol = link_nodes;
                                                                                    if (NIL != set.set_p(sol)) {
                                                                                        set_contents_var = set.do_set_internal(sol);
                                                                                        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
                                                                                            instance = set_contents.do_set_contents_next(basis_object, state);
                                                                                            if (NIL != set_contents.do_set_contents_element_validP(state, instance)) {
                                                                                                funcall(function, instance);
                                                                                            }
                                                                                        }
                                                                                    } else
                                                                                        if (sol.isList()) {
                                                                                            if (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) {
                                                                                                csome_list_var = sol;
                                                                                                instance2 = NIL;
                                                                                                instance2 = csome_list_var.first();
                                                                                                while ((NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL != csome_list_var)) {
                                                                                                    funcall(function, instance2);
                                                                                                    csome_list_var = csome_list_var.rest();
                                                                                                    instance2 = csome_list_var.first();
                                                                                                } 
                                                                                            }
                                                                                        } else {
                                                                                            Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                        }

                                                                                } finally {
                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$40, thread);
                                                                                }
                                                                            }
                                                                        }
                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state_$51);
                                                                    } finally {
                                                                        sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$39, thread);
                                                                    }
                                                                }
                                                            }
                                                            dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                        }
                                                    } else {
                                                        sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str40$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                    }
                                                } else
                                                    if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                        new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                        for (rest_$54 = NIL, rest_$54 = new_list; (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL != rest_$54); rest_$54 = rest_$54.rest()) {
                                                            generating_fn = rest_$54.first();
                                                            _prev_bind_0_$41 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                            try {
                                                                sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                link_nodes2 = sol2 = funcall(generating_fn, node);
                                                                if (NIL != set.set_p(sol2)) {
                                                                    set_contents_var2 = set.do_set_internal(sol2);
                                                                    for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL == set_contents.do_set_contents_doneP(basis_object2, state2)); state2 = set_contents.do_set_contents_update_state(state2)) {
                                                                        instance3 = set_contents.do_set_contents_next(basis_object2, state2);
                                                                        if (NIL != set_contents.do_set_contents_element_validP(state2, instance3)) {
                                                                            funcall(function, instance3);
                                                                        }
                                                                    }
                                                                } else
                                                                    if (sol2.isList()) {
                                                                        if (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) {
                                                                            csome_list_var2 = sol2;
                                                                            instance4 = NIL;
                                                                            instance4 = csome_list_var2.first();
                                                                            while ((NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL != csome_list_var2)) {
                                                                                funcall(function, instance4);
                                                                                csome_list_var2 = csome_list_var2.rest();
                                                                                instance4 = csome_list_var2.first();
                                                                            } 
                                                                        }
                                                                    } else {
                                                                        Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                                    }

                                                            } finally {
                                                                sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$41, thread);
                                                            }
                                                        }
                                                    }

                                            } finally {
                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$37, thread);
                                                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$38, thread);
                                            }
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$46, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$45, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$36, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$36, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$37, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$36, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$35, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$35, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$35, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$34, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$34, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$33, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$34, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$33, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$32, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    /**
     *
     *
     * @return listp, Returns the minimal isas of TERM such that each is an instance of TYPE.
     */
    @LispMethod(comment = "@return listp, Returns the minimal isas of TERM such that each is an instance of TYPE.")
    public static final SubLObject min_isas_of_type_alt(SubLObject v_term, SubLObject type, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            SubLObject all_isas = com.cyc.cycjava.cycl.isa.all_isa(v_term, mt, tv);
            SubLObject isas_of_type = com.cyc.cycjava.cycl.isa.all_instances_among(type, all_isas, mt, tv);
            return genls.min_cols(isas_of_type, mt, tv);
        }
    }

    /**
     *
     *
     * @return listp, Returns the minimal isas of TERM such that each is an instance of TYPE.
     */
    @LispMethod(comment = "@return listp, Returns the minimal isas of TERM such that each is an instance of TYPE.")
    public static SubLObject min_isas_of_type(final SubLObject v_term, final SubLObject type, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLObject all_isas = all_isa(v_term, mt, tv);
        final SubLObject isas_of_type = all_instances_among(type, all_isas, mt, tv);
        return genls.min_cols(isas_of_type, mt, tv);
    }

    /**
     * Returns all collections that include TERM (inexpensive)
     */
    @LispMethod(comment = "Returns all collections that include TERM (inexpensive)")
    public static final SubLObject all_isa_alt(SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(v_term, HL_TERM_P);
        {
            SubLObject result = sbhl_search_methods.sbhl_all_forward_true_nodes(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt, tv);
            if (NIL != forts.non_fort_p(v_term)) {
                result = list_utilities.fast_delete_duplicates(nconc(sbhl_link_methods.non_fort_all_isa(v_term, mt, tv), result), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            return result;
        }
    }

    /**
     * Returns all collections that include TERM (inexpensive)
     */
    @LispMethod(comment = "Returns all collections that include TERM (inexpensive)")
    public static SubLObject all_isa(final SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLTrampolineFile.enforceType(v_term, HL_TERM_P);
        SubLObject result = sbhl_search_methods.sbhl_all_forward_true_nodes(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt, tv);
        if (NIL != forts.non_fort_p(v_term)) {
            result = list_utilities.fast_delete_duplicates(nconc(sbhl_link_methods.non_fort_all_isa(v_term, mt, tv), result), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        if (NIL != sbhl_link_methods.isa_stored_naut_arg2_p(v_term)) {
            result = list_utilities.fast_delete_duplicates(nconc(genls.union_all_genls(sbhl_link_methods.isas_from_naut_arg2(v_term, mt, tv), mt, tv), result), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        if (NIL == $sbhl_may_return_naut_collections_as_fortsP$.getDynamicValue(thread)) {
            result = list_utilities.remove_if_not(FORT_P, result, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return result;
    }/**
     * Returns all collections that include TERM (inexpensive)
     */


    /**
     * returns all collections in any microtheory containing TERM.
     */
    @LispMethod(comment = "returns all collections in any microtheory containing TERM.")
    public static final SubLObject all_isa_in_any_mt_alt(SubLObject v_term) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject all_isa = NIL;
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                        mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                        all_isa = com.cyc.cycjava.cycl.isa.all_isa(v_term, UNPROVIDED, UNPROVIDED);
                    } finally {
                        mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                    }
                }
                return all_isa;
            }
        }
    }

    /**
     * returns all collections in any microtheory containing TERM.
     */
    @LispMethod(comment = "returns all collections in any microtheory containing TERM.")
    public static SubLObject all_isa_in_any_mt(final SubLObject v_term) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject all_isa = NIL;
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
            mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
            all_isa = all_isa(v_term, UNPROVIDED, UNPROVIDED);
        } finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return all_isa;
    }/**
     * returns all collections in any microtheory containing TERM.
     */


    /**
     * returns all collections in just MT / *mt* containing TERM
     */
    @LispMethod(comment = "returns all collections in just MT / *mt* containing TERM")
    public static final SubLObject all_isa_in_mt_alt(SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject all_isa = NIL;
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EQ, thread);
                        mt_relevance_macros.$mt$.bind(mt, thread);
                        all_isa = com.cyc.cycjava.cycl.isa.all_isa(v_term, UNPROVIDED, UNPROVIDED);
                    } finally {
                        mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                    }
                }
                return all_isa;
            }
        }
    }

    /**
     * returns all collections in just MT / *mt* containing TERM
     */
    @LispMethod(comment = "returns all collections in just MT / *mt* containing TERM")
    public static SubLObject all_isa_in_mt(final SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject all_isa = NIL;
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EQ, thread);
            mt_relevance_macros.$mt$.bind(mt, thread);
            all_isa = all_isa(v_term, UNPROVIDED, UNPROVIDED);
        } finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return all_isa;
    }/**
     * returns all collections in just MT / *mt* containing TERM
     */


    /**
     * all collections that include <term> in an mt in <mts> (inexpensive)
     */
    @LispMethod(comment = "all collections that include <term> in an mt in <mts> (inexpensive)")
    public static final SubLObject all_isa_in_mts_alt(SubLObject v_term, SubLObject mts) {
        if (mts == UNPROVIDED) {
            mts = genl_mts.all_base_mts(mt_relevance_macros.$mt$.getDynamicValue());
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject all_isa = NIL;
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_GENL_MT_OF_LIST_MEMBER, thread);
                        mt_relevance_macros.$relevant_mts$.bind(mts, thread);
                        all_isa = com.cyc.cycjava.cycl.isa.all_isa(v_term, UNPROVIDED, UNPROVIDED);
                    } finally {
                        mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                    }
                }
                return all_isa;
            }
        }
    }

    /**
     * all collections that include <term> in an mt in <mts> (inexpensive)
     */
    @LispMethod(comment = "all collections that include <term> in an mt in <mts> (inexpensive)")
    public static SubLObject all_isa_in_mts(final SubLObject v_term, SubLObject mts) {
        if (mts == UNPROVIDED) {
            mts = genl_mts.all_base_mts(mt_relevance_macros.$mt$.getDynamicValue());
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject all_isa = NIL;
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_GENL_MT_OF_LIST_MEMBER, thread);
            mt_relevance_macros.$relevant_mts$.bind(mts, thread);
            all_isa = all_isa(v_term, UNPROVIDED, UNPROVIDED);
        } finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return all_isa;
    }/**
     * all collections that include <term> in an mt in <mts> (inexpensive)
     */


    /**
     *
     *
     * @return listp; the all-isas of NAT-FORMULA
     */
    @LispMethod(comment = "@return listp; the all-isas of NAT-FORMULA")
    public static final SubLObject nat_all_isa_alt(SubLObject nat_formula, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return com.cyc.cycjava.cycl.isa.all_isa(nat_formula, mt, tv);
    }

    /**
     *
     *
     * @return listp; the all-isas of NAT-FORMULA
     */
    @LispMethod(comment = "@return listp; the all-isas of NAT-FORMULA")
    public static SubLObject nat_all_isa(final SubLObject nat_formula, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return all_isa(nat_formula, mt, tv);
    }

    /**
     * Returns all instances of COLLECTION (expensive)
     */
    @LispMethod(comment = "Returns all instances of COLLECTION (expensive)")
    public static final SubLObject all_instances_alt(SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(col, EL_FORT_P);
        return sbhl_search_methods.sbhl_all_backward_true_nodes(sbhl_module_vars.get_sbhl_module($$isa), col, mt, tv);
    }

    /**
     * Returns all instances of COLLECTION (expensive)
     */
    @LispMethod(comment = "Returns all instances of COLLECTION (expensive)")
    public static SubLObject all_instances(final SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(col, EL_FORT_P);
        return sbhl_search_methods.sbhl_all_backward_true_nodes(sbhl_module_vars.get_sbhl_module($$isa), col, mt, tv);
    }/**
     * Returns all instances of COLLECTION (expensive)
     */


    /**
     *
     *
     * @return listp; all instances of COLLECTION in all mts.
     */
    @LispMethod(comment = "@return listp; all instances of COLLECTION in all mts.")
    public static final SubLObject all_instances_in_all_mts_alt(SubLObject collection) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(collection, EL_FORT_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                        mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                        result = com.cyc.cycjava.cycl.isa.all_instances(collection, UNPROVIDED, UNPROVIDED);
                    } finally {
                        mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; all instances of COLLECTION in all mts.
     */
    @LispMethod(comment = "@return listp; all instances of COLLECTION in all mts.")
    public static SubLObject all_instances_in_all_mts(final SubLObject collection) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLTrampolineFile.enforceType(collection, EL_FORT_P);
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
            mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
            result = all_instances(collection, UNPROVIDED, UNPROVIDED);
        } finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     * A deprecated version of @xref all-fort-instances that only returns forts.
     */
    @LispMethod(comment = "A deprecated version of @xref all-fort-instances that only returns forts.")
    public static final SubLObject all_fort_instances_alt(SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return list_utilities.delete_if_not(FORT_P, com.cyc.cycjava.cycl.isa.all_instances(col, mt, tv), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    /**
     * A deprecated version of @xref all-fort-instances that only returns forts.
     */
    @LispMethod(comment = "A deprecated version of @xref all-fort-instances that only returns forts.")
    public static SubLObject all_fort_instances(final SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return list_utilities.delete_if_not(FORT_P, all_instances(col, mt, tv), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }/**
     * A deprecated version of @xref all-fort-instances that only returns forts.
     */


    public static SubLObject all_non_prototypical_fort_instances(final SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return delete_if($sym66$HL_PROTOTYPICAL_INSTANCE_, all_fort_instances(col, mt, tv), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    /**
     *
     *
     * @return listp; all fort instances of COLLECTION in all mts.
     */
    @LispMethod(comment = "@return listp; all fort instances of COLLECTION in all mts.")
    public static final SubLObject all_fort_instances_in_all_mts_alt(SubLObject collection) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                        mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                        result = com.cyc.cycjava.cycl.isa.all_fort_instances(collection, UNPROVIDED, UNPROVIDED);
                    } finally {
                        mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; all fort instances of COLLECTION in all mts.
     */
    @LispMethod(comment = "@return listp; all fort instances of COLLECTION in all mts.")
    public static SubLObject all_fort_instances_in_all_mts(final SubLObject collection) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
            mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
            result = all_fort_instances(collection, UNPROVIDED, UNPROVIDED);
        } finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     * Returns all isa of term TERM that are also instances of collection ISA (ascending transitive closure; inexpensive)
     */
    @LispMethod(comment = "Returns all isa of term TERM that are also instances of collection ISA (ascending transitive closure; inexpensive)")
    public static final SubLObject all_isas_wrt_alt(SubLObject v_term, SubLObject v_isa, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(v_term, EL_FORT_P);
            SubLTrampolineFile.checkType(v_isa, EL_FORT_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = $all_isas_wrt$.currentBinding(thread);
                    SubLObject _prev_bind_1 = $all_isas_wrt_isa$.currentBinding(thread);
                    try {
                        $all_isas_wrt$.bind(NIL, thread);
                        $all_isas_wrt_isa$.bind(v_isa, thread);
                        com.cyc.cycjava.cycl.isa.map_all_isa(GATHER_ISA_WRT_ISA, v_term, mt, tv);
                        result = $all_isas_wrt$.getDynamicValue(thread);
                    } finally {
                        $all_isas_wrt_isa$.rebind(_prev_bind_1, thread);
                        $all_isas_wrt$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     * Returns all isa of term TERM that are also instances of collection ISA (ascending transitive closure; inexpensive)
     */
    @LispMethod(comment = "Returns all isa of term TERM that are also instances of collection ISA (ascending transitive closure; inexpensive)")
    public static SubLObject all_isas_wrt(final SubLObject v_term, final SubLObject v_isa, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLTrampolineFile.enforceType(v_term, EL_FORT_P);
        SubLTrampolineFile.enforceType(v_isa, EL_FORT_P);
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = $all_isas_wrt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = $all_isas_wrt_isa$.currentBinding(thread);
        try {
            $all_isas_wrt$.bind(NIL, thread);
            $all_isas_wrt_isa$.bind(v_isa, thread);
            map_all_isa(GATHER_ISA_WRT_ISA, v_term, mt, tv);
            result = $all_isas_wrt$.getDynamicValue(thread);
        } finally {
            $all_isas_wrt_isa$.rebind(_prev_bind_2, thread);
            $all_isas_wrt$.rebind(_prev_bind_0, thread);
        }
        return result;
    }/**
     * Returns all isa of term TERM that are also instances of collection ISA (ascending transitive closure; inexpensive)
     */


    public static final SubLObject gather_isa_wrt_isa_alt(SubLObject v_term) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (NIL != com.cyc.cycjava.cycl.isa.isaP(v_term, $all_isas_wrt_isa$.getDynamicValue(thread), UNPROVIDED, UNPROVIDED)) {
                $all_isas_wrt$.setDynamicValue(cons(v_term, $all_isas_wrt$.getDynamicValue(thread)), thread);
            }
            return NIL;
        }
    }

    public static SubLObject gather_isa_wrt_isa(final SubLObject v_term) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != isaP(v_term, $all_isas_wrt_isa$.getDynamicValue(thread), UNPROVIDED, UNPROVIDED)) {
            $all_isas_wrt$.setDynamicValue(cons(v_term, $all_isas_wrt$.getDynamicValue(thread)), thread);
        }
        return NIL;
    }

    /**
     * Returns all collections that include any term in TERMS (inexpensive)
     */
    @LispMethod(comment = "Returns all collections that include any term in TERMS (inexpensive)")
    public static final SubLObject union_all_isa_alt(SubLObject terms, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(terms, LISTP);
        if (NIL == terms) {
            return NIL;
        } else {
            if (NIL != list_utilities.singletonP(terms)) {
                return com.cyc.cycjava.cycl.isa.all_isa(terms.first(), mt, tv);
            } else {
                {
                    SubLObject result = sbhl_search_methods.sbhl_union_all_forward_true_nodes(sbhl_module_vars.get_sbhl_module($$isa), terms, mt, tv);
                    return result;
                }
            }
        }
    }

    /**
     * Returns all collections that include any term in TERMS (inexpensive)
     */
    @LispMethod(comment = "Returns all collections that include any term in TERMS (inexpensive)")
    public static SubLObject union_all_isa(final SubLObject terms, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLTrampolineFile.enforceType(terms, LISTP);
        if (NIL == terms) {
            return NIL;
        }
        if (NIL != list_utilities.singletonP(terms)) {
            return all_isa(terms.first(), mt, tv);
        }
        SubLObject result = sbhl_search_methods.sbhl_union_all_forward_true_nodes(sbhl_module_vars.get_sbhl_module($$isa), terms, mt, tv);
        if (NIL != list_utilities.any_in_list(ISA_STORED_NAUT_ARG2_P, terms, UNPROVIDED)) {
            SubLObject cdolist_list_var = terms;
            SubLObject v_term = NIL;
            v_term = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                if (NIL != sbhl_link_methods.isa_stored_naut_arg2_p(v_term)) {
                    result = nconc(genls.all_genls(sbhl_link_methods.isas_from_naut_arg2(v_term, mt, tv), mt, tv), result);
                }
                cdolist_list_var = cdolist_list_var.rest();
                v_term = cdolist_list_var.first();
            } 
            result = list_utilities.fast_delete_duplicates(result, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            if (NIL == $sbhl_may_return_naut_collections_as_fortsP$.getDynamicValue(thread)) {
                result = list_utilities.remove_if_not(FORT_P, result, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
        }
        return result;
    }/**
     * Returns all collections that include any term in TERMS (inexpensive)
     */


    /**
     * Returns set of all instances of each collection in COLS (expensive)
     */
    @LispMethod(comment = "Returns set of all instances of each collection in COLS (expensive)")
    public static final SubLObject union_all_instances_alt(SubLObject cols, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(cols, LISTP);
        if (NIL == cols) {
            return NIL;
        } else {
            if (NIL != list_utilities.singletonP(cols)) {
                return com.cyc.cycjava.cycl.isa.all_instances(cols.first(), mt, tv);
            } else {
                return sbhl_search_methods.sbhl_union_all_backward_true_nodes(sbhl_module_vars.get_sbhl_module($$isa), cols, mt, tv);
            }
        }
    }

    /**
     * Returns set of all instances of each collection in COLS (expensive)
     */
    @LispMethod(comment = "Returns set of all instances of each collection in COLS (expensive)")
    public static SubLObject union_all_instances(final SubLObject cols, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(cols, LISTP);
        if (NIL == cols) {
            return NIL;
        }
        if (NIL != list_utilities.singletonP(cols)) {
            return all_instances(cols.first(), mt, tv);
        }
        return sbhl_search_methods.sbhl_union_all_backward_true_nodes(sbhl_module_vars.get_sbhl_module($$isa), cols, mt, tv);
    }/**
     * Returns set of all instances of each collection in COLS (expensive)
     */


    /**
     * Returns those elements of COLLECTIONS that include TERM as an all-instance
     */
    @LispMethod(comment = "Returns those elements of COLLECTIONS that include TERM as an all-instance")
    public static final SubLObject all_isa_among_alt(SubLObject v_term, SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(v_term, HL_TERM_P);
        SubLTrampolineFile.checkType(collections, LISTP);
        if (NIL == collections) {
            return NIL;
        } else {
            if (NIL != list_utilities.singletonP(collections)) {
                if (NIL != com.cyc.cycjava.cycl.isa.isaP(v_term, collections.first(), mt, tv)) {
                    return collections;
                } else {
                    return NIL;
                }
            } else {
                return sbhl_search_methods.sbhl_all_forward_true_nodes_among(sbhl_module_vars.get_sbhl_module($$isa), v_term, collections, mt, tv);
            }
        }
    }

    /**
     * Returns those elements of COLLECTIONS that include TERM as an all-instance
     */
    @LispMethod(comment = "Returns those elements of COLLECTIONS that include TERM as an all-instance")
    public static SubLObject all_isa_among(final SubLObject v_term, final SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(v_term, HL_TERM_P);
        SubLTrampolineFile.enforceType(collections, LISTP);
        if (NIL == collections) {
            return NIL;
        }
        if (NIL == list_utilities.singletonP(collections)) {
            return sbhl_search_methods.sbhl_all_forward_true_nodes_among(sbhl_module_vars.get_sbhl_module($$isa), v_term, collections, mt, tv);
        }
        if (NIL != isaP(v_term, collections.first(), mt, tv)) {
            return collections;
        }
        return NIL;
    }/**
     * Returns those elements of COLLECTIONS that include TERM as an all-instance
     */


    public static SubLObject isa_allP(final SubLObject v_term, final SubLObject collections, final SubLObject mt) {
        return list_utilities.same_length_p(all_isa_among(v_term, collections, mt, UNPROVIDED), collections);
    }

    public static final SubLObject min_isa_among_alt(SubLObject v_term, SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return genls.min_cols(com.cyc.cycjava.cycl.isa.all_isa_among(v_term, collections, mt, tv), mt, UNPROVIDED);
    }

    public static SubLObject min_isa_among(final SubLObject v_term, final SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return genls.min_cols(all_isa_among(v_term, collections, mt, tv), mt, UNPROVIDED);
    }

    /**
     * Returns those elements of TERMS that include COL as an all-isa
     */
    @LispMethod(comment = "Returns those elements of TERMS that include COL as an all-isa")
    public static final SubLObject all_instances_among_alt(SubLObject col, SubLObject terms, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(col, HL_TERM_P);
        SubLTrampolineFile.checkType(terms, LISTP);
        if (NIL == terms) {
            return NIL;
        } else {
            if (NIL != list_utilities.singletonP(terms)) {
                if (NIL != com.cyc.cycjava.cycl.isa.isaP(terms.first(), col, mt, tv)) {
                    return terms;
                } else {
                    return NIL;
                }
            } else {
                return sbhl_search_methods.sbhl_all_backward_true_nodes_among(sbhl_module_vars.get_sbhl_module($$isa), col, terms, mt, tv);
            }
        }
    }

    /**
     * Returns those elements of TERMS that include COL as an all-isa
     */
    @LispMethod(comment = "Returns those elements of TERMS that include COL as an all-isa")
    public static SubLObject all_instances_among(final SubLObject col, final SubLObject terms, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(col, HL_TERM_P);
        SubLTrampolineFile.enforceType(terms, LISTP);
        if (NIL == terms) {
            return NIL;
        }
        if (NIL == list_utilities.singletonP(terms)) {
            return sbhl_search_methods.sbhl_all_backward_true_nodes_among(sbhl_module_vars.get_sbhl_module($$isa), col, terms, mt, tv);
        }
        if (NIL != isaP(terms.first(), col, mt, tv)) {
            return terms;
        }
        return NIL;
    }/**
     * Returns those elements of TERMS that include COL as an all-isa
     */


    /**
     * A faster version of @xref ALL-INSTANCES-AMONG
     */
    @LispMethod(comment = "A faster version of @xref ALL-INSTANCES-AMONG")
    public static final SubLObject all_instances_among_fast_alt(SubLObject col, SubLObject terms, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (NIL != sbhl_cache.valid_cached_fort_type_p(col)) {
            {
                SubLObject filtered_terms = NIL;
                SubLObject cdolist_list_var = terms;
                SubLObject v_term = NIL;
                for (v_term = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , v_term = cdolist_list_var.first()) {
                    if (NIL != fort_types_interface.fort_has_typeP(v_term, col, mt)) {
                        filtered_terms = cons(v_term, filtered_terms);
                    }
                }
                return nreverse(filtered_terms);
            }
        }
        {
            SubLObject instance_count = cardinality_estimates.instance_cardinality(col);
            if (instance_count.numLE($int$50)) {
                return com.cyc.cycjava.cycl.isa.all_instances_among(col, terms, mt, UNPROVIDED);
            }
            {
                SubLObject term_count = length(terms);
                SubLObject threshold = $int$25;
                if (number_utilities.percent(term_count, instance_count, TWO_INTEGER).numL(threshold)) {
                    {
                        SubLObject filtered_terms = NIL;
                        SubLObject cdolist_list_var = terms;
                        SubLObject v_term = NIL;
                        for (v_term = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , v_term = cdolist_list_var.first()) {
                            if (NIL != com.cyc.cycjava.cycl.isa.isaP(v_term, col, mt, UNPROVIDED)) {
                                filtered_terms = cons(v_term, filtered_terms);
                            }
                        }
                        return nreverse(filtered_terms);
                    }
                }
            }
        }
        return com.cyc.cycjava.cycl.isa.all_instances_among(col, terms, mt, UNPROVIDED);
    }

    /**
     * A faster version of @xref ALL-INSTANCES-AMONG
     */
    @LispMethod(comment = "A faster version of @xref ALL-INSTANCES-AMONG")
    public static SubLObject all_instances_among_fast(final SubLObject col, final SubLObject terms, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (NIL != sbhl_cache.valid_cached_fort_type_p(col)) {
            SubLObject filtered_terms = NIL;
            SubLObject cdolist_list_var = terms;
            SubLObject v_term = NIL;
            v_term = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                if (NIL != fort_types_interface.fort_has_typeP(v_term, col, mt)) {
                    filtered_terms = cons(v_term, filtered_terms);
                }
                cdolist_list_var = cdolist_list_var.rest();
                v_term = cdolist_list_var.first();
            } 
            return nreverse(filtered_terms);
        }
        final SubLObject instance_count = (NIL != forts.fort_p(col)) ? cardinality_estimates.instance_cardinality(col) : $int$100000;
        if (instance_count.numLE($int$50)) {
            return all_instances_among(col, terms, mt, UNPROVIDED);
        }
        final SubLObject term_count = length(terms);
        final SubLObject threshold = $int$25;
        if (number_utilities.percent(term_count, instance_count, TWO_INTEGER).numL(threshold)) {
            SubLObject filtered_terms2 = NIL;
            SubLObject cdolist_list_var2 = terms;
            SubLObject v_term2 = NIL;
            v_term2 = cdolist_list_var2.first();
            while (NIL != cdolist_list_var2) {
                if (NIL != isaP(v_term2, col, mt, UNPROVIDED)) {
                    filtered_terms2 = cons(v_term2, filtered_terms2);
                }
                cdolist_list_var2 = cdolist_list_var2.rest();
                v_term2 = cdolist_list_var2.first();
            } 
            return nreverse(filtered_terms2);
        }
        return all_instances_among(col, terms, mt, UNPROVIDED);
    }/**
     * A faster version of @xref ALL-INSTANCES-AMONG
     */


    /**
     * returns those collections that both satisfy truth
     * function FUNCTION and include TERM as an instance
     * (FUNCTION must not affect sbhl search state)
     */
    @LispMethod(comment = "returns those collections that both satisfy truth\r\nfunction FUNCTION and include TERM as an instance\r\n(FUNCTION must not affect sbhl search state)\nreturns those collections that both satisfy truth\nfunction FUNCTION and include TERM as an instance\n(FUNCTION must not affect sbhl search state)")
    public static final SubLObject all_isa_if_alt(SubLObject function, SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_search_methods.sbhl_all_forward_true_nodes_if(sbhl_module_vars.get_sbhl_module($$isa), v_term, function, mt, tv);
    }

    /**
     * returns those collections that both satisfy truth
     * function FUNCTION and include TERM as an instance
     * (FUNCTION must not affect sbhl search state)
     */
    @LispMethod(comment = "returns those collections that both satisfy truth\r\nfunction FUNCTION and include TERM as an instance\r\n(FUNCTION must not affect sbhl search state)\nreturns those collections that both satisfy truth\nfunction FUNCTION and include TERM as an instance\n(FUNCTION must not affect sbhl search state)")
    public static SubLObject all_isa_if(final SubLObject function, final SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_search_methods.sbhl_all_forward_true_nodes_if(sbhl_module_vars.get_sbhl_module($$isa), v_term, function, mt, tv);
    }/**
     * returns those collections that both satisfy truth
     * function FUNCTION and include TERM as an instance
     * (FUNCTION must not affect sbhl search state)
     */


    /**
     * returns those collections that both satisfy truth
     * function FUNCTION and include COL as an instance
     * (FUNCTION must not affect sbhl search state)
     */
    @LispMethod(comment = "returns those collections that both satisfy truth\r\nfunction FUNCTION and include COL as an instance\r\n(FUNCTION must not affect sbhl search state)\nreturns those collections that both satisfy truth\nfunction FUNCTION and include COL as an instance\n(FUNCTION must not affect sbhl search state)")
    public static final SubLObject all_instances_if_alt(SubLObject function, SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_search_methods.sbhl_all_backward_true_nodes_if(sbhl_module_vars.get_sbhl_module($$isa), col, function, mt, tv);
    }

    /**
     * returns those collections that both satisfy truth
     * function FUNCTION and include COL as an instance
     * (FUNCTION must not affect sbhl search state)
     */
    @LispMethod(comment = "returns those collections that both satisfy truth\r\nfunction FUNCTION and include COL as an instance\r\n(FUNCTION must not affect sbhl search state)\nreturns those collections that both satisfy truth\nfunction FUNCTION and include COL as an instance\n(FUNCTION must not affect sbhl search state)")
    public static SubLObject all_instances_if(final SubLObject function, final SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_search_methods.sbhl_all_backward_true_nodes_if(sbhl_module_vars.get_sbhl_module($$isa), col, function, mt, tv);
    }/**
     * returns those collections that both satisfy truth
     * function FUNCTION and include COL as an instance
     * (FUNCTION must not affect sbhl search state)
     */


    /**
     *
     *
     * @return listp;  Returns all isas of TERM that satisfy FUNCTION.  does not
    continue with genls of a collection where FUNCTION is not satisfied for that
    collection.
     */
    @LispMethod(comment = "@return listp;  Returns all isas of TERM that satisfy FUNCTION.  does not\r\ncontinue with genls of a collection where FUNCTION is not satisfied for that\r\ncollection.")
    public static final SubLObject all_isa_if_with_pruning_alt(SubLObject function, SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_search_methods.sbhl_all_forward_true_nodes_if_with_pruning(sbhl_module_vars.get_sbhl_module($$isa), v_term, function, mt, tv);
    }

    /**
     *
     *
     * @return listp;  Returns all isas of TERM that satisfy FUNCTION.  does not
    continue with genls of a collection where FUNCTION is not satisfied for that
    collection.
     */
    @LispMethod(comment = "@return listp;  Returns all isas of TERM that satisfy FUNCTION.  does not\r\ncontinue with genls of a collection where FUNCTION is not satisfied for that\r\ncollection.")
    public static SubLObject all_isa_if_with_pruning(final SubLObject function, final SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_search_methods.sbhl_all_forward_true_nodes_if_with_pruning(sbhl_module_vars.get_sbhl_module($$isa), v_term, function, mt, tv);
    }

    /**
     * Returns all collections that do not include TERM (expensive)
     */
    @LispMethod(comment = "Returns all collections that do not include TERM (expensive)")
    public static final SubLObject all_not_isa_alt(SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(v_term, HL_TERM_P);
        return sbhl_search_implied_relations.sbhl_all_implied_forward_false_nodes(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt, tv);
    }

    /**
     * Returns all collections that do not include TERM (expensive)
     */
    @LispMethod(comment = "Returns all collections that do not include TERM (expensive)")
    public static SubLObject all_not_isa(final SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(v_term, HL_TERM_P);
        return sbhl_search_implied_relations.sbhl_all_implied_forward_false_nodes(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt, tv);
    }/**
     * Returns all collections that do not include TERM (expensive)
     */


    /**
     * Returns all terms that are not members of col (by assertion)
     */
    @LispMethod(comment = "Returns all terms that are not members of col (by assertion)")
    public static final SubLObject all_not_instances_alt(SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(col, EL_FORT_P);
        return sbhl_search_methods.sbhl_all_backward_false_nodes(sbhl_module_vars.get_sbhl_module($$isa), col, mt, tv);
    }

    /**
     * Returns all terms that are not members of col (by assertion)
     */
    @LispMethod(comment = "Returns all terms that are not members of col (by assertion)")
    public static SubLObject all_not_instances(final SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(col, EL_FORT_P);
        return sbhl_search_methods.sbhl_all_backward_false_nodes(sbhl_module_vars.get_sbhl_module($$isa), col, mt, tv);
    }/**
     * Returns all terms that are not members of col (by assertion)
     */


    /**
     * Returns those elements of COLLECTIONS that do NOT include TERM
     */
    @LispMethod(comment = "Returns those elements of COLLECTIONS that do NOT include TERM")
    public static final SubLObject not_isa_among_alt(SubLObject v_term, SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(v_term, HL_TERM_P);
        SubLTrampolineFile.checkType(collections, LISTP);
        {
            SubLObject result = NIL;
            SubLObject cdolist_list_var = collections;
            SubLObject col = NIL;
            for (col = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , col = cdolist_list_var.first()) {
                if (NIL != com.cyc.cycjava.cycl.isa.not_isaP(v_term, col, mt, tv)) {
                    result = cons(col, result);
                }
            }
            return nreverse(result);
        }
    }

    /**
     * Returns those elements of COLLECTIONS that do NOT include TERM
     */
    @LispMethod(comment = "Returns those elements of COLLECTIONS that do NOT include TERM")
    public static SubLObject not_isa_among(final SubLObject v_term, final SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(v_term, HL_TERM_P);
        SubLTrampolineFile.enforceType(collections, LISTP);
        SubLObject result = NIL;
        SubLObject cdolist_list_var = collections;
        SubLObject col = NIL;
        col = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != not_isaP(v_term, col, mt, tv)) {
                result = cons(col, result);
            }
            cdolist_list_var = cdolist_list_var.rest();
            col = cdolist_list_var.first();
        } 
        return nreverse(result);
    }/**
     * Returns those elements of COLLECTIONS that do NOT include TERM
     */


    /**
     * STUB
     */
    @LispMethod(comment = "STUB")
    public static final SubLObject not_instances_among_alt() {
        return NIL;
    }

    /**
     * STUB
     */
    @LispMethod(comment = "STUB")
    public static SubLObject not_instances_among() {
        return NIL;
    }/**
     * STUB
     */


    /**
     * Apply FUNCTION to every all-isa of TERM
     * (FUNCTION must not affect the current sbhl search state)
     */
    @LispMethod(comment = "Apply FUNCTION to every all-isa of TERM\r\n(FUNCTION must not affect the current sbhl search state)\nApply FUNCTION to every all-isa of TERM\n(FUNCTION must not affect the current sbhl search state)")
    public static final SubLObject map_all_isa_alt(SubLObject fn, SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(fn, FUNCTION_SPEC_P);
        SubLTrampolineFile.checkType(v_term, HL_TERM_P);
        sbhl_search_methods.sbhl_map_all_forward_true_nodes(sbhl_module_vars.get_sbhl_module($$isa), v_term, fn, mt, tv);
        return NIL;
    }

    /**
     * Apply FUNCTION to every all-isa of TERM
     * (FUNCTION must not affect the current sbhl search state)
     */
    @LispMethod(comment = "Apply FUNCTION to every all-isa of TERM\r\n(FUNCTION must not affect the current sbhl search state)\nApply FUNCTION to every all-isa of TERM\n(FUNCTION must not affect the current sbhl search state)")
    public static SubLObject map_all_isa(final SubLObject fn, final SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(fn, FUNCTION_SPEC_P);
        SubLTrampolineFile.enforceType(v_term, HL_TERM_P);
        sbhl_search_methods.sbhl_map_all_forward_true_nodes(sbhl_module_vars.get_sbhl_module($$isa), v_term, fn, mt, tv);
        return NIL;
    }/**
     * Apply FUNCTION to every all-isa of TERM
     * (FUNCTION must not affect the current sbhl search state)
     */


    /**
     * Apply FUNCTION to each unique instance of all specs of COLLECTION.
     */
    @LispMethod(comment = "Apply FUNCTION to each unique instance of all specs of COLLECTION.")
    public static final SubLObject map_all_instances_alt(SubLObject fn, SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(fn, FUNCTION_SPEC_P);
        SubLTrampolineFile.checkType(col, EL_FORT_P);
        sbhl_search_methods.sbhl_map_all_backward_true_nodes(sbhl_module_vars.get_sbhl_module($$isa), col, fn, mt, tv);
        return NIL;
    }

    /**
     * Apply FUNCTION to each unique instance of all specs of COLLECTION.
     */
    @LispMethod(comment = "Apply FUNCTION to each unique instance of all specs of COLLECTION.")
    public static SubLObject map_all_instances(final SubLObject fn, final SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(fn, FUNCTION_SPEC_P);
        SubLTrampolineFile.enforceType(col, EL_FORT_P);
        sbhl_search_methods.sbhl_map_all_backward_true_nodes(sbhl_module_vars.get_sbhl_module($$isa), col, fn, mt, tv);
        return NIL;
    }/**
     * Apply FUNCTION to each unique instance of all specs of COLLECTION.
     */


    /**
     * Return the first encountered non-nil result of applying FUNCTION to the all-isa of TERM
     * (FUNCTION may not affect the current sbhl search state)
     */
    @LispMethod(comment = "Return the first encountered non-nil result of applying FUNCTION to the all-isa of TERM\r\n(FUNCTION may not affect the current sbhl search state)\nReturn the first encountered non-nil result of applying FUNCTION to the all-isa of TERM\n(FUNCTION may not affect the current sbhl search state)")
    public static final SubLObject any_all_isa_alt(SubLObject fn, SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_search_methods.sbhl_gather_first_among_all_forward_true_nodes(sbhl_module_vars.get_sbhl_module($$isa), v_term, fn, mt, tv, UNPROVIDED);
    }

    /**
     * Return the first encountered non-nil result of applying FUNCTION to the all-isa of TERM
     * (FUNCTION may not affect the current sbhl search state)
     */
    @LispMethod(comment = "Return the first encountered non-nil result of applying FUNCTION to the all-isa of TERM\r\n(FUNCTION may not affect the current sbhl search state)\nReturn the first encountered non-nil result of applying FUNCTION to the all-isa of TERM\n(FUNCTION may not affect the current sbhl search state)")
    public static SubLObject any_all_isa(final SubLObject fn, final SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_search_methods.sbhl_gather_first_among_all_forward_true_nodes(sbhl_module_vars.get_sbhl_module($$isa), v_term, fn, mt, tv, UNPROVIDED);
    }/**
     * Return the first encountered non-nil result of applying FUNCTION to the all-isa of TERM
     * (FUNCTION may not affect the current sbhl search state)
     */


    /**
     * Return the first encountered non-nil result of applying FUNCTION to the all-isa of TERM
     * (FUNCTION may not affect the current sbhl search state)
     */
    @LispMethod(comment = "Return the first encountered non-nil result of applying FUNCTION to the all-isa of TERM\r\n(FUNCTION may not affect the current sbhl search state)\nReturn the first encountered non-nil result of applying FUNCTION to the all-isa of TERM\n(FUNCTION may not affect the current sbhl search state)")
    public static final SubLObject any_wrt_all_isa_alt(SubLObject function, SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(function, FUNCTION_SPEC_P);
        SubLTrampolineFile.checkType(v_term, HL_TERM_P);
        return com.cyc.cycjava.cycl.isa.any_all_isa(function, v_term, mt, tv);
    }

    /**
     * Return the first encountered non-nil result of applying FUNCTION to the all-isa of TERM
     * (FUNCTION may not affect the current sbhl search state)
     */
    @LispMethod(comment = "Return the first encountered non-nil result of applying FUNCTION to the all-isa of TERM\r\n(FUNCTION may not affect the current sbhl search state)\nReturn the first encountered non-nil result of applying FUNCTION to the all-isa of TERM\n(FUNCTION may not affect the current sbhl search state)")
    public static SubLObject any_wrt_all_isa(final SubLObject function, final SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(function, FUNCTION_SPEC_P);
        SubLTrampolineFile.enforceType(v_term, HL_TERM_P);
        return any_all_isa(function, v_term, mt, tv);
    }/**
     * Return the first encountered non-nil result of applying FUNCTION to the all-isa of TERM
     * (FUNCTION may not affect the current sbhl search state)
     */


    /**
     * Return the first encountered <node> among the closure of START-NODE wrt MODULE for which (#$isa <node> ISA) holds.
     */
    @LispMethod(comment = "Return the first encountered <node> among the closure of START-NODE wrt MODULE for which (#$isa <node> ISA) holds.")
    public static final SubLObject any_all_forward_true_nodes_isa_alt(SubLObject pred, SubLObject start_node, SubLObject v_isa, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_marking_vars.$sbhl_target_space$.currentBinding(thread);
                    try {
                        sbhl_marking_vars.$sbhl_target_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        {
                            SubLObject _prev_bind_0_62 = sbhl_marking_vars.$sbhl_target_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_target_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                {
                                    SubLObject _prev_bind_0_63 = sbhl_marking_vars.$sbhl_mapping_marking_space$.currentBinding(thread);
                                    SubLObject _prev_bind_1 = sbhl_marking_vars.$sbhl_mapping_gather_marking_space$.currentBinding(thread);
                                    SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_suspend_new_spaces_during_mappingP$.currentBinding(thread);
                                    SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_isaP_goal$.currentBinding(thread);
                                    try {
                                        sbhl_marking_vars.$sbhl_mapping_marking_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                                        sbhl_marking_vars.$sbhl_mapping_gather_marking_space$.bind(sbhl_marking_vars.$sbhl_target_gather_space$.getDynamicValue(thread), thread);
                                        sbhl_marking_vars.$sbhl_suspend_new_spaces_during_mappingP$.bind(T, thread);
                                        sbhl_search_vars.$sbhl_isaP_goal$.bind(v_isa, thread);
                                        result = sbhl_search_methods.sbhl_gather_first_among_all_forward_true_nodes(sbhl_module_vars.get_sbhl_module(pred), start_node, $sym107$ISA__GOAL, mt, tv, UNPROVIDED);
                                    } finally {
                                        sbhl_search_vars.$sbhl_isaP_goal$.rebind(_prev_bind_3, thread);
                                        sbhl_marking_vars.$sbhl_suspend_new_spaces_during_mappingP$.rebind(_prev_bind_2, thread);
                                        sbhl_marking_vars.$sbhl_mapping_gather_marking_space$.rebind(_prev_bind_1, thread);
                                        sbhl_marking_vars.$sbhl_mapping_marking_space$.rebind(_prev_bind_0_63, thread);
                                    }
                                }
                                sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_gather_space$.getDynamicValue(thread));
                            } finally {
                                sbhl_marking_vars.$sbhl_target_gather_space$.rebind(_prev_bind_0_62, thread);
                            }
                        }
                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                    } finally {
                        sbhl_marking_vars.$sbhl_target_space$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     * Return the first encountered <node> among the closure of START-NODE wrt MODULE for which (#$isa <node> ISA) holds.
     */
    @LispMethod(comment = "Return the first encountered <node> among the closure of START-NODE wrt MODULE for which (#$isa <node> ISA) holds.")
    public static SubLObject any_all_forward_true_nodes_isa(final SubLObject pred, final SubLObject start_node, final SubLObject v_isa, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_marking_vars.$sbhl_target_space$.currentBinding(thread);
        try {
            sbhl_marking_vars.$sbhl_target_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
            try {
                final SubLObject _prev_bind_0_$56 = sbhl_marking_vars.$sbhl_target_gather_space$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$sbhl_target_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                    try {
                        final SubLObject _prev_bind_0_$57 = sbhl_marking_vars.$sbhl_mapping_marking_space$.currentBinding(thread);
                        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_mapping_gather_marking_space$.currentBinding(thread);
                        final SubLObject _prev_bind_3 = sbhl_marking_vars.$sbhl_suspend_new_spaces_during_mappingP$.currentBinding(thread);
                        final SubLObject _prev_bind_4 = sbhl_search_vars.$sbhl_isaP_goal$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_mapping_marking_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                            sbhl_marking_vars.$sbhl_mapping_gather_marking_space$.bind(sbhl_marking_vars.$sbhl_target_gather_space$.getDynamicValue(thread), thread);
                            sbhl_marking_vars.$sbhl_suspend_new_spaces_during_mappingP$.bind(T, thread);
                            sbhl_search_vars.$sbhl_isaP_goal$.bind(v_isa, thread);
                            result = sbhl_search_methods.sbhl_gather_first_among_all_forward_true_nodes(sbhl_module_vars.get_sbhl_module(pred), start_node, $sym112$ISA__GOAL, mt, tv, UNPROVIDED);
                        } finally {
                            sbhl_search_vars.$sbhl_isaP_goal$.rebind(_prev_bind_4, thread);
                            sbhl_marking_vars.$sbhl_suspend_new_spaces_during_mappingP$.rebind(_prev_bind_3, thread);
                            sbhl_marking_vars.$sbhl_mapping_gather_marking_space$.rebind(_prev_bind_2, thread);
                            sbhl_marking_vars.$sbhl_mapping_marking_space$.rebind(_prev_bind_0_$57, thread);
                        }
                    } finally {
                        final SubLObject _prev_bind_0_$58 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            final SubLObject _values = getValuesAsVector();
                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_gather_space$.getDynamicValue(thread));
                            restoreValuesFromVector(_values);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$58, thread);
                        }
                    }
                } finally {
                    sbhl_marking_vars.$sbhl_target_gather_space$.rebind(_prev_bind_0_$56, thread);
                }
            } finally {
                final SubLObject _prev_bind_0_$59 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values2 = getValuesAsVector();
                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                    restoreValuesFromVector(_values2);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$59, thread);
                }
            }
        } finally {
            sbhl_marking_vars.$sbhl_target_space$.rebind(_prev_bind_0, thread);
        }
        return result;
    }/**
     * Return the first encountered <node> among the closure of START-NODE wrt MODULE for which (#$isa <node> ISA) holds.
     */


    /**
     * Return a sample of SAMPLES instances under COL. Attempts to find
     * instances that are as different as possible (wrt to their all-isas).
     */
    @LispMethod(comment = "Return a sample of SAMPLES instances under COL. Attempts to find\r\ninstances that are as different as possible (wrt to their all-isas).\nReturn a sample of SAMPLES instances under COL. Attempts to find\ninstances that are as different as possible (wrt to their all-isas).")
    public static final SubLObject sample_leaf_instances_alt(SubLObject col, SubLObject samples, SubLObject mt, SubLObject tv) {
        if (samples == UNPROVIDED) {
            samples = ONE_INTEGER;
        }
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_search_methods.sbhl_sample_leaf_nodes(sbhl_module_vars.get_sbhl_module($$isa), col, samples, mt, tv);
    }

    /**
     * Return a sample of SAMPLES instances under COL. Attempts to find
     * instances that are as different as possible (wrt to their all-isas).
     */
    @LispMethod(comment = "Return a sample of SAMPLES instances under COL. Attempts to find\r\ninstances that are as different as possible (wrt to their all-isas).\nReturn a sample of SAMPLES instances under COL. Attempts to find\ninstances that are as different as possible (wrt to their all-isas).")
    public static SubLObject sample_leaf_instances(final SubLObject col, SubLObject samples, SubLObject mt, SubLObject tv) {
        if (samples == UNPROVIDED) {
            samples = ONE_INTEGER;
        }
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_search_methods.sbhl_sample_leaf_nodes(sbhl_module_vars.get_sbhl_module($$isa), col, samples, mt, tv);
    }/**
     * Return a sample of SAMPLES instances under COL. Attempts to find
     * instances that are as different as possible (wrt to their all-isas).
     */


    /**
     * Return a sample of SAMPLES instances under COL, such that none of them
     * isa anything between DIF-NODE and COL besides COL. Attempts to find
     * instances that are as different as possible (wrt to their all-isas).
     */
    @LispMethod(comment = "Return a sample of SAMPLES instances under COL, such that none of them\r\nisa anything between DIF-NODE and COL besides COL. Attempts to find\r\ninstances that are as different as possible (wrt to their all-isas).\nReturn a sample of SAMPLES instances under COL, such that none of them\nisa anything between DIF-NODE and COL besides COL. Attempts to find\ninstances that are as different as possible (wrt to their all-isas).")
    public static final SubLObject sample_different_leaf_instances_alt(SubLObject dif_node, SubLObject col, SubLObject samples, SubLObject mt, SubLObject tv) {
        if (samples == UNPROVIDED) {
            samples = ONE_INTEGER;
        }
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_search_methods.sbhl_sample_different_leaf_nodes(sbhl_module_vars.get_sbhl_module($$isa), dif_node, col, samples, mt, tv);
    }

    /**
     * Return a sample of SAMPLES instances under COL, such that none of them
     * isa anything between DIF-NODE and COL besides COL. Attempts to find
     * instances that are as different as possible (wrt to their all-isas).
     */
    @LispMethod(comment = "Return a sample of SAMPLES instances under COL, such that none of them\r\nisa anything between DIF-NODE and COL besides COL. Attempts to find\r\ninstances that are as different as possible (wrt to their all-isas).\nReturn a sample of SAMPLES instances under COL, such that none of them\nisa anything between DIF-NODE and COL besides COL. Attempts to find\ninstances that are as different as possible (wrt to their all-isas).")
    public static SubLObject sample_different_leaf_instances(final SubLObject dif_node, final SubLObject col, SubLObject samples, SubLObject mt, SubLObject tv) {
        if (samples == UNPROVIDED) {
            samples = ONE_INTEGER;
        }
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_search_methods.sbhl_sample_different_leaf_nodes(sbhl_module_vars.get_sbhl_module($$isa), dif_node, col, samples, mt, tv);
    }/**
     * Return a sample of SAMPLES instances under COL, such that none of them
     * isa anything between DIF-NODE and COL besides COL. Attempts to find
     * instances that are as different as possible (wrt to their all-isas).
     */


    /**
     * Records all of the isas of TERM in current *sbhl-table*
     */
    @LispMethod(comment = "Records all of the isas of TERM in current *sbhl-table*")
    public static final SubLObject sbhl_record_all_isa_alt(SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        sbhl_marking_methods.sbhl_record_all_forward_true_nodes(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt, tv);
        if (NIL != sbhl_link_methods.isa_stored_naut_arg2_p(v_term)) {
            {
                SubLObject cdolist_list_var = sbhl_link_methods.isas_from_naut_arg2(v_term, mt, tv);
                SubLObject v_isa = NIL;
                for (v_isa = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , v_isa = cdolist_list_var.first()) {
                    sbhl_marking_methods.sbhl_record_all_forward_true_nodes(sbhl_module_vars.get_sbhl_module($$genls), v_isa, mt, tv);
                }
            }
        }
        return NIL;
    }

    /**
     * Records all of the isas of TERM in current *sbhl-table*
     */
    @LispMethod(comment = "Records all of the isas of TERM in current *sbhl-table*")
    public static SubLObject sbhl_record_all_isa(final SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        sbhl_marking_methods.sbhl_record_all_forward_true_nodes(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt, tv);
        if (NIL != sbhl_link_methods.isa_stored_naut_arg2_p(v_term)) {
            SubLObject cdolist_list_var = sbhl_link_methods.isas_from_naut_arg2(v_term, mt, tv);
            SubLObject v_isa = NIL;
            v_isa = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                sbhl_marking_methods.sbhl_record_all_forward_true_nodes(sbhl_module_vars.get_sbhl_module($$genls), v_isa, mt, tv);
                cdolist_list_var = cdolist_list_var.rest();
                v_isa = cdolist_list_var.first();
            } 
        }
        return NIL;
    }/**
     * Records all of the isas of TERM in current *sbhl-table*
     */


    /**
     * Counts the number of instances in COLLECTION and then returns the count.
     */
    @LispMethod(comment = "Counts the number of instances in COLLECTION and then returns the count.")
    public static final SubLObject count_all_instances_alt(SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(collection, EL_FORT_P);
            {
                SubLObject count = ZERO_INTEGER;
                SubLObject node_var = collection;
                {
                    SubLObject _prev_bind_0 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                    try {
                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$isa), thread);
                        sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        {
                            SubLObject node_var_64 = node_var;
                            SubLObject deck_type = (false) ? ((SubLObject) ($QUEUE)) : $STACK;
                            SubLObject recur_deck = deck.create_deck(deck_type);
                            {
                                SubLObject _prev_bind_0_65 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                try {
                                    sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                    {
                                        SubLObject mt_var = mt;
                                        {
                                            SubLObject _prev_bind_0_66 = mt_relevance_macros.$mt$.currentBinding(thread);
                                            SubLObject _prev_bind_1_67 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                            SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                            try {
                                                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                                {
                                                    SubLObject tv_var = tv;
                                                    {
                                                        SubLObject _prev_bind_0_68 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                                        SubLObject _prev_bind_1_69 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                                        try {
                                                            sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                            sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                            if (NIL != tv_var) {
                                                                if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                    if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                                        {
                                                                            SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                            if (pcase_var.eql($ERROR)) {
                                                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                            } else {
                                                                                if (pcase_var.eql($CERROR)) {
                                                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                } else {
                                                                                    if (pcase_var.eql($WARN)) {
                                                                                        Errors.warn($str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                    } else {
                                                                                        Errors.warn($str_alt36$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                        Errors.cerror($$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            {
                                                                SubLObject _prev_bind_0_70 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                                                SubLObject _prev_bind_1_71 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                                                SubLObject _prev_bind_2_72 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                                SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                try {
                                                                    sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
                                                                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                    sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
                                                                    if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node_var, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                        {
                                                                            SubLObject _prev_bind_0_73 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                                            SubLObject _prev_bind_1_74 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                                            SubLObject _prev_bind_2_75 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                                                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_var_64, UNPROVIDED);
                                                                                while (NIL != node_var_64) {
                                                                                    {
                                                                                        SubLObject tt_node_var = node_var_64;
                                                                                        SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$isa));
                                                                                        SubLObject cdolist_list_var = accessible_modules;
                                                                                        SubLObject module_var = NIL;
                                                                                        for (module_var = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , module_var = cdolist_list_var.first()) {
                                                                                            {
                                                                                                SubLObject _prev_bind_0_76 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_77 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                    {
                                                                                                        SubLObject node = function_terms.naut_to_nart(tt_node_var);
                                                                                                        if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                            {
                                                                                                                SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                if (NIL != d_link) {
                                                                                                                    {
                                                                                                                        SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                        if (NIL != mt_links) {
                                                                                                                            {
                                                                                                                                SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                                while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)) {
                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                    {
                                                                                                                                        SubLObject mt_78 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                        SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                        if (NIL != mt_relevance_macros.relevant_mtP(mt_78)) {
                                                                                                                                            {
                                                                                                                                                SubLObject _prev_bind_0_79 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                try {
                                                                                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_78, thread);
                                                                                                                                                    {
                                                                                                                                                        SubLObject iteration_state_80 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                        while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_80)) {
                                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                                            {
                                                                                                                                                                SubLObject tv_81 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_80);
                                                                                                                                                                SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                                thread.resetMultipleValues();
                                                                                                                                                                if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_81)) {
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject _prev_bind_0_82 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                        try {
                                                                                                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv_81, thread);
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                                SubLObject cdolist_list_var_83 = new_list;
                                                                                                                                                                                SubLObject ins = NIL;
                                                                                                                                                                                for (ins = cdolist_list_var_83.first(); NIL != cdolist_list_var_83; cdolist_list_var_83 = cdolist_list_var_83.rest() , ins = cdolist_list_var_83.first()) {
                                                                                                                                                                                    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                                                        count = add(count, ONE_INTEGER);
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        } finally {
                                                                                                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_82, thread);
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                iteration_state_80 = dictionary_contents.do_dictionary_contents_next(iteration_state_80);
                                                                                                                                                            }
                                                                                                                                                        } 
                                                                                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state_80);
                                                                                                                                                    }
                                                                                                                                                } finally {
                                                                                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_79, thread);
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                    }
                                                                                                                                } 
                                                                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt38$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                }
                                                                                                            }
                                                                                                            if (NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) {
                                                                                                                {
                                                                                                                    SubLObject csome_list_var = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                                                                    SubLObject instance_tuple = NIL;
                                                                                                                    for (instance_tuple = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest() , instance_tuple = csome_list_var.first()) {
                                                                                                                        {
                                                                                                                            SubLObject datum = instance_tuple;
                                                                                                                            SubLObject current = datum;
                                                                                                                            SubLObject link_node = NIL;
                                                                                                                            SubLObject mt_84 = NIL;
                                                                                                                            SubLObject tv_85 = NIL;
                                                                                                                            destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                            link_node = current.first();
                                                                                                                            current = current.rest();
                                                                                                                            destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                            mt_84 = current.first();
                                                                                                                            current = current.rest();
                                                                                                                            destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                            tv_85 = current.first();
                                                                                                                            current = current.rest();
                                                                                                                            if (NIL == current) {
                                                                                                                                if (NIL != mt_relevance_macros.relevant_mtP(mt_84)) {
                                                                                                                                    {
                                                                                                                                        SubLObject _prev_bind_0_86 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                        try {
                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.bind(mt_84, thread);
                                                                                                                                            if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_85)) {
                                                                                                                                                {
                                                                                                                                                    SubLObject _prev_bind_0_87 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                    try {
                                                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.bind(tv_85, thread);
                                                                                                                                                        {
                                                                                                                                                            SubLObject link_nodes = list(link_node);
                                                                                                                                                            SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                            SubLObject cdolist_list_var_88 = new_list;
                                                                                                                                                            SubLObject ins = NIL;
                                                                                                                                                            for (ins = cdolist_list_var_88.first(); NIL != cdolist_list_var_88; cdolist_list_var_88 = cdolist_list_var_88.rest() , ins = cdolist_list_var_88.first()) {
                                                                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                                    count = add(count, ONE_INTEGER);
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    } finally {
                                                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_87, thread);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } finally {
                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_86, thread);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            } else {
                                                                                                                                cdestructuring_bind_error(datum, $list_alt111);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        } else {
                                                                                                            if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                                {
                                                                                                                    SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                    SubLObject cdolist_list_var_89 = new_list;
                                                                                                                    SubLObject generating_fn = NIL;
                                                                                                                    for (generating_fn = cdolist_list_var_89.first(); NIL != cdolist_list_var_89; cdolist_list_var_89 = cdolist_list_var_89.rest() , generating_fn = cdolist_list_var_89.first()) {
                                                                                                                        {
                                                                                                                            SubLObject _prev_bind_0_90 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                            try {
                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                {
                                                                                                                                    SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                    SubLObject new_list_91 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                    SubLObject cdolist_list_var_92 = new_list_91;
                                                                                                                                    SubLObject ins = NIL;
                                                                                                                                    for (ins = cdolist_list_var_92.first(); NIL != cdolist_list_var_92; cdolist_list_var_92 = cdolist_list_var_92.rest() , ins = cdolist_list_var_92.first()) {
                                                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                            count = add(count, ONE_INTEGER);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            } finally {
                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_90, thread);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } finally {
                                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_77, thread);
                                                                                                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_76, thread);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    {
                                                                                        SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)));
                                                                                        SubLObject cdolist_list_var = accessible_modules;
                                                                                        SubLObject module_var = NIL;
                                                                                        for (module_var = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , module_var = cdolist_list_var.first()) {
                                                                                            {
                                                                                                SubLObject _prev_bind_0_93 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_94 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                    {
                                                                                                        SubLObject node = function_terms.naut_to_nart(node_var_64);
                                                                                                        if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                            {
                                                                                                                SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                if (NIL != d_link) {
                                                                                                                    {
                                                                                                                        SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                        if (NIL != mt_links) {
                                                                                                                            {
                                                                                                                                SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                                while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)) {
                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                    {
                                                                                                                                        SubLObject mt_95 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                        SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                        if (NIL != mt_relevance_macros.relevant_mtP(mt_95)) {
                                                                                                                                            {
                                                                                                                                                SubLObject _prev_bind_0_96 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                try {
                                                                                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_95, thread);
                                                                                                                                                    {
                                                                                                                                                        SubLObject iteration_state_97 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                        while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_97)) {
                                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                                            {
                                                                                                                                                                SubLObject tv_98 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_97);
                                                                                                                                                                SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                                thread.resetMultipleValues();
                                                                                                                                                                if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_98)) {
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject _prev_bind_0_99 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                        try {
                                                                                                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv_98, thread);
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                                SubLObject cdolist_list_var_100 = new_list;
                                                                                                                                                                                SubLObject node_vars_link_node = NIL;
                                                                                                                                                                                for (node_vars_link_node = cdolist_list_var_100.first(); NIL != cdolist_list_var_100; cdolist_list_var_100 = cdolist_list_var_100.rest() , node_vars_link_node = cdolist_list_var_100.first()) {
                                                                                                                                                                                    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
                                                                                                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                                                                                                        deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        } finally {
                                                                                                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_99, thread);
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                iteration_state_97 = dictionary_contents.do_dictionary_contents_next(iteration_state_97);
                                                                                                                                                            }
                                                                                                                                                        } 
                                                                                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state_97);
                                                                                                                                                    }
                                                                                                                                                } finally {
                                                                                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_96, thread);
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                    }
                                                                                                                                } 
                                                                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt38$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                }
                                                                                                            }
                                                                                                        } else {
                                                                                                            if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                                {
                                                                                                                    SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                    SubLObject cdolist_list_var_101 = new_list;
                                                                                                                    SubLObject generating_fn = NIL;
                                                                                                                    for (generating_fn = cdolist_list_var_101.first(); NIL != cdolist_list_var_101; cdolist_list_var_101 = cdolist_list_var_101.rest() , generating_fn = cdolist_list_var_101.first()) {
                                                                                                                        {
                                                                                                                            SubLObject _prev_bind_0_102 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                            try {
                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                {
                                                                                                                                    SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                    SubLObject new_list_103 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                    SubLObject cdolist_list_var_104 = new_list_103;
                                                                                                                                    SubLObject node_vars_link_node = NIL;
                                                                                                                                    for (node_vars_link_node = cdolist_list_var_104.first(); NIL != cdolist_list_var_104; cdolist_list_var_104 = cdolist_list_var_104.rest() , node_vars_link_node = cdolist_list_var_104.first()) {
                                                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
                                                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                                                            deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            } finally {
                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_102, thread);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } finally {
                                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_94, thread);
                                                                                                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_93, thread);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    node_var_64 = deck.deck_pop(recur_deck);
                                                                                } 
                                                                            } finally {
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_75, thread);
                                                                                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_74, thread);
                                                                                sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_73, thread);
                                                                            }
                                                                        }
                                                                    } else {
                                                                        sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt112$Node__a_does_not_pass_sbhl_type_t, node_var, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    }
                                                                } finally {
                                                                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                                                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_72, thread);
                                                                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_71, thread);
                                                                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_70, thread);
                                                                }
                                                            }
                                                        } finally {
                                                            sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_69, thread);
                                                            sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_68, thread);
                                                        }
                                                    }
                                                }
                                            } finally {
                                                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_67, thread);
                                                mt_relevance_macros.$mt$.rebind(_prev_bind_0_66, thread);
                                            }
                                        }
                                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                    }
                                } finally {
                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_65, thread);
                                }
                            }
                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                        }
                    } finally {
                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_1, thread);
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return count;
            }
        }
    }

    /**
     * Counts the number of instances in COLLECTION and then returns the count.
     */
    @LispMethod(comment = "Counts the number of instances in COLLECTION and then returns the count.")
    public static SubLObject count_all_instances(final SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLTrampolineFile.enforceType(collection, EL_FORT_P);
        SubLObject count = ZERO_INTEGER;
        final SubLObject _prev_bind_0 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
        try {
            sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$isa), thread);
            sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
            try {
                SubLObject node_var_$60 = collection;
                final SubLObject deck_type = $STACK;
                final SubLObject recur_deck = deck.create_deck(deck_type);
                final SubLObject _prev_bind_0_$61 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                    try {
                        final SubLObject mt_var = mt;
                        final SubLObject _prev_bind_0_$62 = mt_relevance_macros.$mt$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$63 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                        try {
                            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                            final SubLObject tv_var = tv;
                            final SubLObject _prev_bind_0_$63 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$64 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                            try {
                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                                    final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                    if (pcase_var.eql($ERROR)) {
                                        sbhl_paranoia.sbhl_error(ONE_INTEGER, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    } else
                                        if (pcase_var.eql($CERROR)) {
                                            sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        } else
                                            if (pcase_var.eql($WARN)) {
                                                Errors.warn($str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                            } else {
                                                Errors.warn($str37$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror($$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                            }


                                }
                                final SubLObject _prev_bind_0_$64 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$65 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$68 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
                                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
                                    if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(collection, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                        final SubLObject _prev_bind_0_$65 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$66 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$69 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_var_$60, UNPROVIDED);
                                            while (NIL != node_var_$60) {
                                                final SubLObject tt_node_var = node_var_$60;
                                                SubLObject cdolist_list_var;
                                                final SubLObject accessible_modules = cdolist_list_var = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$isa));
                                                SubLObject module_var = NIL;
                                                module_var = cdolist_list_var.first();
                                                while (NIL != cdolist_list_var) {
                                                    final SubLObject _prev_bind_0_$66 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                    final SubLObject _prev_bind_1_$67 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                    try {
                                                        sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                        final SubLObject node = function_terms.naut_to_nart(tt_node_var);
                                                        if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                            final SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                            if (NIL != d_link) {
                                                                final SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                if (NIL != mt_links) {
                                                                    SubLObject iteration_state;
                                                                    for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                                                        thread.resetMultipleValues();
                                                                        final SubLObject mt_$74 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                        final SubLObject tv_links = thread.secondMultipleValue();
                                                                        thread.resetMultipleValues();
                                                                        if (NIL != mt_relevance_macros.relevant_mtP(mt_$74)) {
                                                                            final SubLObject _prev_bind_0_$67 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt_$74, thread);
                                                                                SubLObject iteration_state_$76;
                                                                                for (iteration_state_$76 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$76); iteration_state_$76 = dictionary_contents.do_dictionary_contents_next(iteration_state_$76)) {
                                                                                    thread.resetMultipleValues();
                                                                                    final SubLObject tv_$77 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$76);
                                                                                    final SubLObject link_nodes = thread.secondMultipleValue();
                                                                                    thread.resetMultipleValues();
                                                                                    if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$77)) {
                                                                                        final SubLObject _prev_bind_0_$68 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv_$77, thread);
                                                                                            final SubLObject sol = link_nodes;
                                                                                            if (NIL != set.set_p(sol)) {
                                                                                                final SubLObject set_contents_var = set.do_set_internal(sol);
                                                                                                SubLObject basis_object;
                                                                                                SubLObject state;
                                                                                                SubLObject ins;
                                                                                                for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                    ins = set_contents.do_set_contents_next(basis_object, state);
                                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state, ins)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                        count = add(count, ONE_INTEGER);
                                                                                                    }
                                                                                                }
                                                                                            } else
                                                                                                if (sol.isList()) {
                                                                                                    SubLObject csome_list_var = sol;
                                                                                                    SubLObject ins2 = NIL;
                                                                                                    ins2 = csome_list_var.first();
                                                                                                    while (NIL != csome_list_var) {
                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                            count = add(count, ONE_INTEGER);
                                                                                                        }
                                                                                                        csome_list_var = csome_list_var.rest();
                                                                                                        ins2 = csome_list_var.first();
                                                                                                    } 
                                                                                                } else {
                                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                }

                                                                                        } finally {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$68, thread);
                                                                                        }
                                                                                    }
                                                                                }
                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state_$76);
                                                                            } finally {
                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$67, thread);
                                                                            }
                                                                        }
                                                                    }
                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                }
                                                            } else {
                                                                sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str40$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                            }
                                                            if (NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) {
                                                                SubLObject csome_list_var2 = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                SubLObject instance_tuple = NIL;
                                                                instance_tuple = csome_list_var2.first();
                                                                while (NIL != csome_list_var2) {
                                                                    SubLObject current;
                                                                    final SubLObject datum = current = instance_tuple;
                                                                    SubLObject link_node = NIL;
                                                                    SubLObject mt_$75 = NIL;
                                                                    SubLObject tv_$78 = NIL;
                                                                    destructuring_bind_must_consp(current, datum, $list116);
                                                                    link_node = current.first();
                                                                    current = current.rest();
                                                                    destructuring_bind_must_consp(current, datum, $list116);
                                                                    mt_$75 = current.first();
                                                                    current = current.rest();
                                                                    destructuring_bind_must_consp(current, datum, $list116);
                                                                    tv_$78 = current.first();
                                                                    current = current.rest();
                                                                    if (NIL == current) {
                                                                        if (NIL != mt_relevance_macros.relevant_mtP(mt_$75)) {
                                                                            final SubLObject _prev_bind_0_$69 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt_$75, thread);
                                                                                if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$78)) {
                                                                                    final SubLObject _prev_bind_0_$70 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                    try {
                                                                                        sbhl_link_vars.$sbhl_link_tv$.bind(tv_$78, thread);
                                                                                        final SubLObject sol;
                                                                                        final SubLObject link_nodes2 = sol = list(link_node);
                                                                                        if (NIL != set.set_p(sol)) {
                                                                                            final SubLObject set_contents_var = set.do_set_internal(sol);
                                                                                            SubLObject basis_object;
                                                                                            SubLObject state;
                                                                                            SubLObject ins;
                                                                                            for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                ins = set_contents.do_set_contents_next(basis_object, state);
                                                                                                if ((NIL != set_contents.do_set_contents_element_validP(state, ins)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                    count = add(count, ONE_INTEGER);
                                                                                                }
                                                                                            }
                                                                                        } else
                                                                                            if (sol.isList()) {
                                                                                                SubLObject csome_list_var_$83 = sol;
                                                                                                SubLObject ins2 = NIL;
                                                                                                ins2 = csome_list_var_$83.first();
                                                                                                while (NIL != csome_list_var_$83) {
                                                                                                    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                        count = add(count, ONE_INTEGER);
                                                                                                    }
                                                                                                    csome_list_var_$83 = csome_list_var_$83.rest();
                                                                                                    ins2 = csome_list_var_$83.first();
                                                                                                } 
                                                                                            } else {
                                                                                                Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                            }

                                                                                    } finally {
                                                                                        sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$70, thread);
                                                                                    }
                                                                                }
                                                                            } finally {
                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$69, thread);
                                                                            }
                                                                        }
                                                                    } else {
                                                                        cdestructuring_bind_error(datum, $list116);
                                                                    }
                                                                    csome_list_var2 = csome_list_var2.rest();
                                                                    instance_tuple = csome_list_var2.first();
                                                                } 
                                                            }
                                                        } else
                                                            if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                SubLObject cdolist_list_var_$84;
                                                                final SubLObject new_list = cdolist_list_var_$84 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                SubLObject generating_fn = NIL;
                                                                generating_fn = cdolist_list_var_$84.first();
                                                                while (NIL != cdolist_list_var_$84) {
                                                                    final SubLObject _prev_bind_0_$71 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                        final SubLObject sol2;
                                                                        final SubLObject link_nodes3 = sol2 = funcall(generating_fn, node);
                                                                        if (NIL != set.set_p(sol2)) {
                                                                            final SubLObject set_contents_var2 = set.do_set_internal(sol2);
                                                                            SubLObject basis_object2;
                                                                            SubLObject state2;
                                                                            SubLObject ins3;
                                                                            for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); NIL == set_contents.do_set_contents_doneP(basis_object2, state2); state2 = set_contents.do_set_contents_update_state(state2)) {
                                                                                ins3 = set_contents.do_set_contents_next(basis_object2, state2);
                                                                                if ((NIL != set_contents.do_set_contents_element_validP(state2, ins3)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                    count = add(count, ONE_INTEGER);
                                                                                }
                                                                            }
                                                                        } else
                                                                            if (sol2.isList()) {
                                                                                SubLObject csome_list_var3 = sol2;
                                                                                SubLObject ins4 = NIL;
                                                                                ins4 = csome_list_var3.first();
                                                                                while (NIL != csome_list_var3) {
                                                                                    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                        count = add(count, ONE_INTEGER);
                                                                                    }
                                                                                    csome_list_var3 = csome_list_var3.rest();
                                                                                    ins4 = csome_list_var3.first();
                                                                                } 
                                                                            } else {
                                                                                Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                                            }

                                                                    } finally {
                                                                        sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$71, thread);
                                                                    }
                                                                    cdolist_list_var_$84 = cdolist_list_var_$84.rest();
                                                                    generating_fn = cdolist_list_var_$84.first();
                                                                } 
                                                            }

                                                    } finally {
                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$67, thread);
                                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$66, thread);
                                                    }
                                                    cdolist_list_var = cdolist_list_var.rest();
                                                    module_var = cdolist_list_var.first();
                                                } 
                                                SubLObject cdolist_list_var2;
                                                final SubLObject accessible_modules2 = cdolist_list_var2 = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)));
                                                SubLObject module_var2 = NIL;
                                                module_var2 = cdolist_list_var2.first();
                                                while (NIL != cdolist_list_var2) {
                                                    final SubLObject _prev_bind_0_$72 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                    final SubLObject _prev_bind_1_$68 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                    try {
                                                        sbhl_module_vars.$sbhl_module$.bind(module_var2, thread);
                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                        final SubLObject node2 = function_terms.naut_to_nart(node_var_$60);
                                                        if (NIL != sbhl_link_vars.sbhl_node_object_p(node2)) {
                                                            final SubLObject d_link2 = sbhl_graphs.get_sbhl_graph_link(node2, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                            if (NIL != d_link2) {
                                                                final SubLObject mt_links2 = sbhl_links.get_sbhl_mt_links(d_link2, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                if (NIL != mt_links2) {
                                                                    SubLObject iteration_state2;
                                                                    for (iteration_state2 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links2)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state2); iteration_state2 = dictionary_contents.do_dictionary_contents_next(iteration_state2)) {
                                                                        thread.resetMultipleValues();
                                                                        final SubLObject mt_$76 = dictionary_contents.do_dictionary_contents_key_value(iteration_state2);
                                                                        final SubLObject tv_links2 = thread.secondMultipleValue();
                                                                        thread.resetMultipleValues();
                                                                        if (NIL != mt_relevance_macros.relevant_mtP(mt_$76)) {
                                                                            final SubLObject _prev_bind_0_$73 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt_$76, thread);
                                                                                SubLObject iteration_state_$77;
                                                                                for (iteration_state_$77 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links2)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$77); iteration_state_$77 = dictionary_contents.do_dictionary_contents_next(iteration_state_$77)) {
                                                                                    thread.resetMultipleValues();
                                                                                    final SubLObject tv_$79 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$77);
                                                                                    final SubLObject link_nodes4 = thread.secondMultipleValue();
                                                                                    thread.resetMultipleValues();
                                                                                    if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$79)) {
                                                                                        final SubLObject _prev_bind_0_$74 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv_$79, thread);
                                                                                            final SubLObject sol3 = link_nodes4;
                                                                                            if (NIL != set.set_p(sol3)) {
                                                                                                final SubLObject set_contents_var3 = set.do_set_internal(sol3);
                                                                                                SubLObject basis_object3;
                                                                                                SubLObject state3;
                                                                                                SubLObject node_vars_link_node;
                                                                                                for (basis_object3 = set_contents.do_set_contents_basis_object(set_contents_var3), state3 = NIL, state3 = set_contents.do_set_contents_initial_state(basis_object3, set_contents_var3); NIL == set_contents.do_set_contents_doneP(basis_object3, state3); state3 = set_contents.do_set_contents_update_state(state3)) {
                                                                                                    node_vars_link_node = set_contents.do_set_contents_next(basis_object3, state3);
                                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state3, node_vars_link_node)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED))) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                        deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                    }
                                                                                                }
                                                                                            } else
                                                                                                if (sol3.isList()) {
                                                                                                    SubLObject csome_list_var4 = sol3;
                                                                                                    SubLObject node_vars_link_node2 = NIL;
                                                                                                    node_vars_link_node2 = csome_list_var4.first();
                                                                                                    while (NIL != csome_list_var4) {
                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node2, UNPROVIDED)) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node2, UNPROVIDED);
                                                                                                            deck.deck_push(node_vars_link_node2, recur_deck);
                                                                                                        }
                                                                                                        csome_list_var4 = csome_list_var4.rest();
                                                                                                        node_vars_link_node2 = csome_list_var4.first();
                                                                                                    } 
                                                                                                } else {
                                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol3);
                                                                                                }

                                                                                        } finally {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$74, thread);
                                                                                        }
                                                                                    }
                                                                                }
                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state_$77);
                                                                            } finally {
                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$73, thread);
                                                                            }
                                                                        }
                                                                    }
                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state2);
                                                                }
                                                            } else {
                                                                sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str40$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                            }
                                                        } else
                                                            if (NIL != obsolete.cnat_p(node2, UNPROVIDED)) {
                                                                SubLObject cdolist_list_var_$85;
                                                                final SubLObject new_list2 = cdolist_list_var_$85 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                SubLObject generating_fn2 = NIL;
                                                                generating_fn2 = cdolist_list_var_$85.first();
                                                                while (NIL != cdolist_list_var_$85) {
                                                                    final SubLObject _prev_bind_0_$75 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn2, thread);
                                                                        final SubLObject sol4;
                                                                        final SubLObject link_nodes5 = sol4 = funcall(generating_fn2, node2);
                                                                        if (NIL != set.set_p(sol4)) {
                                                                            final SubLObject set_contents_var4 = set.do_set_internal(sol4);
                                                                            SubLObject basis_object4;
                                                                            SubLObject state4;
                                                                            SubLObject node_vars_link_node3;
                                                                            for (basis_object4 = set_contents.do_set_contents_basis_object(set_contents_var4), state4 = NIL, state4 = set_contents.do_set_contents_initial_state(basis_object4, set_contents_var4); NIL == set_contents.do_set_contents_doneP(basis_object4, state4); state4 = set_contents.do_set_contents_update_state(state4)) {
                                                                                node_vars_link_node3 = set_contents.do_set_contents_next(basis_object4, state4);
                                                                                if ((NIL != set_contents.do_set_contents_element_validP(state4, node_vars_link_node3)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node3, UNPROVIDED))) {
                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node3, UNPROVIDED);
                                                                                    deck.deck_push(node_vars_link_node3, recur_deck);
                                                                                }
                                                                            }
                                                                        } else
                                                                            if (sol4.isList()) {
                                                                                SubLObject csome_list_var5 = sol4;
                                                                                SubLObject node_vars_link_node4 = NIL;
                                                                                node_vars_link_node4 = csome_list_var5.first();
                                                                                while (NIL != csome_list_var5) {
                                                                                    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node4, UNPROVIDED)) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node4, UNPROVIDED);
                                                                                        deck.deck_push(node_vars_link_node4, recur_deck);
                                                                                    }
                                                                                    csome_list_var5 = csome_list_var5.rest();
                                                                                    node_vars_link_node4 = csome_list_var5.first();
                                                                                } 
                                                                            } else {
                                                                                Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol4);
                                                                            }

                                                                    } finally {
                                                                        sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$75, thread);
                                                                    }
                                                                    cdolist_list_var_$85 = cdolist_list_var_$85.rest();
                                                                    generating_fn2 = cdolist_list_var_$85.first();
                                                                } 
                                                            }

                                                    } finally {
                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$68, thread);
                                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$72, thread);
                                                    }
                                                    cdolist_list_var2 = cdolist_list_var2.rest();
                                                    module_var2 = cdolist_list_var2.first();
                                                } 
                                                node_var_$60 = deck.deck_pop(recur_deck);
                                            } 
                                        } finally {
                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_$69, thread);
                                            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_$66, thread);
                                            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_$65, thread);
                                        }
                                    } else {
                                        sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str117$Node__a_does_not_pass_sbhl_type_t, collection, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    }
                                } finally {
                                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_$68, thread);
                                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_$65, thread);
                                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$64, thread);
                                }
                            } finally {
                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$64, thread);
                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$63, thread);
                            }
                        } finally {
                            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$63, thread);
                            mt_relevance_macros.$mt$.rebind(_prev_bind_0_$62, thread);
                        }
                    } finally {
                        final SubLObject _prev_bind_0_$76 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            final SubLObject _values = getValuesAsVector();
                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            restoreValuesFromVector(_values);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$76, thread);
                        }
                    }
                } finally {
                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$61, thread);
                }
            } finally {
                final SubLObject _prev_bind_0_$77 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values2 = getValuesAsVector();
                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                    restoreValuesFromVector(_values2);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$77, thread);
                }
            }
        } finally {
            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_2, thread);
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0, thread);
        }
        return count;
    }

    /**
     * Counts the number of instances in COLLECTION that pass PRED
     * and then returns the count.
     */
    @LispMethod(comment = "Counts the number of instances in COLLECTION that pass PRED\r\nand then returns the count.\nCounts the number of instances in COLLECTION that pass PRED\nand then returns the count.")
    public static final SubLObject count_all_instances_if_alt(SubLObject collection, SubLObject pred, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject count = ZERO_INTEGER;
                SubLObject node_var = collection;
                {
                    SubLObject _prev_bind_0 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                    try {
                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$isa), thread);
                        sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        {
                            SubLObject node_var_105 = node_var;
                            SubLObject deck_type = (false) ? ((SubLObject) ($QUEUE)) : $STACK;
                            SubLObject recur_deck = deck.create_deck(deck_type);
                            {
                                SubLObject _prev_bind_0_106 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                try {
                                    sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                    {
                                        SubLObject mt_var = mt;
                                        {
                                            SubLObject _prev_bind_0_107 = mt_relevance_macros.$mt$.currentBinding(thread);
                                            SubLObject _prev_bind_1_108 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                            SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                            try {
                                                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                                {
                                                    SubLObject tv_var = tv;
                                                    {
                                                        SubLObject _prev_bind_0_109 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                                        SubLObject _prev_bind_1_110 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                                        try {
                                                            sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                            sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                            if (NIL != tv_var) {
                                                                if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                    if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                                        {
                                                                            SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                            if (pcase_var.eql($ERROR)) {
                                                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                            } else {
                                                                                if (pcase_var.eql($CERROR)) {
                                                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                } else {
                                                                                    if (pcase_var.eql($WARN)) {
                                                                                        Errors.warn($str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                    } else {
                                                                                        Errors.warn($str_alt36$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                        Errors.cerror($$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            {
                                                                SubLObject _prev_bind_0_111 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                                                SubLObject _prev_bind_1_112 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                                                SubLObject _prev_bind_2_113 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                                SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                try {
                                                                    sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
                                                                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                    sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
                                                                    if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node_var, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                        {
                                                                            SubLObject _prev_bind_0_114 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                                            SubLObject _prev_bind_1_115 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                                            SubLObject _prev_bind_2_116 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                                                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_var_105, UNPROVIDED);
                                                                                while (NIL != node_var_105) {
                                                                                    {
                                                                                        SubLObject tt_node_var = node_var_105;
                                                                                        SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$isa));
                                                                                        SubLObject cdolist_list_var = accessible_modules;
                                                                                        SubLObject module_var = NIL;
                                                                                        for (module_var = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , module_var = cdolist_list_var.first()) {
                                                                                            {
                                                                                                SubLObject _prev_bind_0_117 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_118 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                    {
                                                                                                        SubLObject node = function_terms.naut_to_nart(tt_node_var);
                                                                                                        if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                            {
                                                                                                                SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                if (NIL != d_link) {
                                                                                                                    {
                                                                                                                        SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                        if (NIL != mt_links) {
                                                                                                                            {
                                                                                                                                SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                                while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)) {
                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                    {
                                                                                                                                        SubLObject mt_119 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                        SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                        if (NIL != mt_relevance_macros.relevant_mtP(mt_119)) {
                                                                                                                                            {
                                                                                                                                                SubLObject _prev_bind_0_120 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                try {
                                                                                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_119, thread);
                                                                                                                                                    {
                                                                                                                                                        SubLObject iteration_state_121 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                        while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_121)) {
                                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                                            {
                                                                                                                                                                SubLObject tv_122 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_121);
                                                                                                                                                                SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                                thread.resetMultipleValues();
                                                                                                                                                                if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_122)) {
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject _prev_bind_0_123 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                        try {
                                                                                                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv_122, thread);
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                                SubLObject cdolist_list_var_124 = new_list;
                                                                                                                                                                                SubLObject ins = NIL;
                                                                                                                                                                                for (ins = cdolist_list_var_124.first(); NIL != cdolist_list_var_124; cdolist_list_var_124 = cdolist_list_var_124.rest() , ins = cdolist_list_var_124.first()) {
                                                                                                                                                                                    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                                                        if (NIL != funcall(pred, ins)) {
                                                                                                                                                                                            count = add(count, ONE_INTEGER);
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        } finally {
                                                                                                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_123, thread);
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                iteration_state_121 = dictionary_contents.do_dictionary_contents_next(iteration_state_121);
                                                                                                                                                            }
                                                                                                                                                        } 
                                                                                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state_121);
                                                                                                                                                    }
                                                                                                                                                } finally {
                                                                                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_120, thread);
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                    }
                                                                                                                                } 
                                                                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt38$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                }
                                                                                                            }
                                                                                                            if (NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) {
                                                                                                                {
                                                                                                                    SubLObject csome_list_var = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                                                                    SubLObject instance_tuple = NIL;
                                                                                                                    for (instance_tuple = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest() , instance_tuple = csome_list_var.first()) {
                                                                                                                        {
                                                                                                                            SubLObject datum = instance_tuple;
                                                                                                                            SubLObject current = datum;
                                                                                                                            SubLObject link_node = NIL;
                                                                                                                            SubLObject mt_125 = NIL;
                                                                                                                            SubLObject tv_126 = NIL;
                                                                                                                            destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                            link_node = current.first();
                                                                                                                            current = current.rest();
                                                                                                                            destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                            mt_125 = current.first();
                                                                                                                            current = current.rest();
                                                                                                                            destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                            tv_126 = current.first();
                                                                                                                            current = current.rest();
                                                                                                                            if (NIL == current) {
                                                                                                                                if (NIL != mt_relevance_macros.relevant_mtP(mt_125)) {
                                                                                                                                    {
                                                                                                                                        SubLObject _prev_bind_0_127 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                        try {
                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.bind(mt_125, thread);
                                                                                                                                            if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_126)) {
                                                                                                                                                {
                                                                                                                                                    SubLObject _prev_bind_0_128 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                    try {
                                                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.bind(tv_126, thread);
                                                                                                                                                        {
                                                                                                                                                            SubLObject link_nodes = list(link_node);
                                                                                                                                                            SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                            SubLObject cdolist_list_var_129 = new_list;
                                                                                                                                                            SubLObject ins = NIL;
                                                                                                                                                            for (ins = cdolist_list_var_129.first(); NIL != cdolist_list_var_129; cdolist_list_var_129 = cdolist_list_var_129.rest() , ins = cdolist_list_var_129.first()) {
                                                                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                                    if (NIL != funcall(pred, ins)) {
                                                                                                                                                                        count = add(count, ONE_INTEGER);
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    } finally {
                                                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_128, thread);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } finally {
                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_127, thread);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            } else {
                                                                                                                                cdestructuring_bind_error(datum, $list_alt111);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        } else {
                                                                                                            if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                                {
                                                                                                                    SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                    SubLObject cdolist_list_var_130 = new_list;
                                                                                                                    SubLObject generating_fn = NIL;
                                                                                                                    for (generating_fn = cdolist_list_var_130.first(); NIL != cdolist_list_var_130; cdolist_list_var_130 = cdolist_list_var_130.rest() , generating_fn = cdolist_list_var_130.first()) {
                                                                                                                        {
                                                                                                                            SubLObject _prev_bind_0_131 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                            try {
                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                {
                                                                                                                                    SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                    SubLObject new_list_132 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                    SubLObject cdolist_list_var_133 = new_list_132;
                                                                                                                                    SubLObject ins = NIL;
                                                                                                                                    for (ins = cdolist_list_var_133.first(); NIL != cdolist_list_var_133; cdolist_list_var_133 = cdolist_list_var_133.rest() , ins = cdolist_list_var_133.first()) {
                                                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                            if (NIL != funcall(pred, ins)) {
                                                                                                                                                count = add(count, ONE_INTEGER);
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            } finally {
                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_131, thread);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } finally {
                                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_118, thread);
                                                                                                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_117, thread);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    {
                                                                                        SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)));
                                                                                        SubLObject cdolist_list_var = accessible_modules;
                                                                                        SubLObject module_var = NIL;
                                                                                        for (module_var = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , module_var = cdolist_list_var.first()) {
                                                                                            {
                                                                                                SubLObject _prev_bind_0_134 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_135 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                    {
                                                                                                        SubLObject node = function_terms.naut_to_nart(node_var_105);
                                                                                                        if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                            {
                                                                                                                SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                if (NIL != d_link) {
                                                                                                                    {
                                                                                                                        SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                        if (NIL != mt_links) {
                                                                                                                            {
                                                                                                                                SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                                while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)) {
                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                    {
                                                                                                                                        SubLObject mt_136 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                        SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                        if (NIL != mt_relevance_macros.relevant_mtP(mt_136)) {
                                                                                                                                            {
                                                                                                                                                SubLObject _prev_bind_0_137 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                try {
                                                                                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_136, thread);
                                                                                                                                                    {
                                                                                                                                                        SubLObject iteration_state_138 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                        while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_138)) {
                                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                                            {
                                                                                                                                                                SubLObject tv_139 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_138);
                                                                                                                                                                SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                                thread.resetMultipleValues();
                                                                                                                                                                if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_139)) {
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject _prev_bind_0_140 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                        try {
                                                                                                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv_139, thread);
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                                SubLObject cdolist_list_var_141 = new_list;
                                                                                                                                                                                SubLObject node_vars_link_node = NIL;
                                                                                                                                                                                for (node_vars_link_node = cdolist_list_var_141.first(); NIL != cdolist_list_var_141; cdolist_list_var_141 = cdolist_list_var_141.rest() , node_vars_link_node = cdolist_list_var_141.first()) {
                                                                                                                                                                                    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
                                                                                                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                                                                                                        deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        } finally {
                                                                                                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_140, thread);
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                iteration_state_138 = dictionary_contents.do_dictionary_contents_next(iteration_state_138);
                                                                                                                                                            }
                                                                                                                                                        } 
                                                                                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state_138);
                                                                                                                                                    }
                                                                                                                                                } finally {
                                                                                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_137, thread);
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                    }
                                                                                                                                } 
                                                                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt38$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                }
                                                                                                            }
                                                                                                        } else {
                                                                                                            if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                                {
                                                                                                                    SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                    SubLObject cdolist_list_var_142 = new_list;
                                                                                                                    SubLObject generating_fn = NIL;
                                                                                                                    for (generating_fn = cdolist_list_var_142.first(); NIL != cdolist_list_var_142; cdolist_list_var_142 = cdolist_list_var_142.rest() , generating_fn = cdolist_list_var_142.first()) {
                                                                                                                        {
                                                                                                                            SubLObject _prev_bind_0_143 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                            try {
                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                {
                                                                                                                                    SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                    SubLObject new_list_144 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                    SubLObject cdolist_list_var_145 = new_list_144;
                                                                                                                                    SubLObject node_vars_link_node = NIL;
                                                                                                                                    for (node_vars_link_node = cdolist_list_var_145.first(); NIL != cdolist_list_var_145; cdolist_list_var_145 = cdolist_list_var_145.rest() , node_vars_link_node = cdolist_list_var_145.first()) {
                                                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
                                                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                                                            deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            } finally {
                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_143, thread);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } finally {
                                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_135, thread);
                                                                                                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_134, thread);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    node_var_105 = deck.deck_pop(recur_deck);
                                                                                } 
                                                                            } finally {
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_116, thread);
                                                                                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_115, thread);
                                                                                sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_114, thread);
                                                                            }
                                                                        }
                                                                    } else {
                                                                        sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt112$Node__a_does_not_pass_sbhl_type_t, node_var, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    }
                                                                } finally {
                                                                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                                                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_113, thread);
                                                                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_112, thread);
                                                                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_111, thread);
                                                                }
                                                            }
                                                        } finally {
                                                            sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_110, thread);
                                                            sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_109, thread);
                                                        }
                                                    }
                                                }
                                            } finally {
                                                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_108, thread);
                                                mt_relevance_macros.$mt$.rebind(_prev_bind_0_107, thread);
                                            }
                                        }
                                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                    }
                                } finally {
                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_106, thread);
                                }
                            }
                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                        }
                    } finally {
                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_1, thread);
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return count;
            }
        }
    }

    /**
     * Counts the number of instances in COLLECTION that pass PRED
     * and then returns the count.
     */
    @LispMethod(comment = "Counts the number of instances in COLLECTION that pass PRED\r\nand then returns the count.\nCounts the number of instances in COLLECTION that pass PRED\nand then returns the count.")
    public static SubLObject count_all_instances_if(final SubLObject collection, final SubLObject pred, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject count = ZERO_INTEGER;
        final SubLObject _prev_bind_0 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
        try {
            sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$isa), thread);
            sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
            try {
                SubLObject node_var_$97 = collection;
                final SubLObject deck_type = $STACK;
                final SubLObject recur_deck = deck.create_deck(deck_type);
                final SubLObject _prev_bind_0_$98 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                    try {
                        final SubLObject mt_var = mt;
                        final SubLObject _prev_bind_0_$99 = mt_relevance_macros.$mt$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$100 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                        try {
                            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                            final SubLObject tv_var = tv;
                            final SubLObject _prev_bind_0_$100 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$101 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                            try {
                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                                    final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                    if (pcase_var.eql($ERROR)) {
                                        sbhl_paranoia.sbhl_error(ONE_INTEGER, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    } else
                                        if (pcase_var.eql($CERROR)) {
                                            sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        } else
                                            if (pcase_var.eql($WARN)) {
                                                Errors.warn($str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                            } else {
                                                Errors.warn($str37$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror($$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                            }


                                }
                                final SubLObject _prev_bind_0_$101 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$102 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$105 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
                                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
                                    if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(collection, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                        final SubLObject _prev_bind_0_$102 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$103 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$106 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_var_$97, UNPROVIDED);
                                            while (NIL != node_var_$97) {
                                                final SubLObject tt_node_var = node_var_$97;
                                                SubLObject cdolist_list_var;
                                                final SubLObject accessible_modules = cdolist_list_var = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$isa));
                                                SubLObject module_var = NIL;
                                                module_var = cdolist_list_var.first();
                                                while (NIL != cdolist_list_var) {
                                                    final SubLObject _prev_bind_0_$103 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                    final SubLObject _prev_bind_1_$104 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                    try {
                                                        sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                        final SubLObject node = function_terms.naut_to_nart(tt_node_var);
                                                        if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                            final SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                            if (NIL != d_link) {
                                                                final SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                if (NIL != mt_links) {
                                                                    SubLObject iteration_state;
                                                                    for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                                                        thread.resetMultipleValues();
                                                                        final SubLObject mt_$111 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                        final SubLObject tv_links = thread.secondMultipleValue();
                                                                        thread.resetMultipleValues();
                                                                        if (NIL != mt_relevance_macros.relevant_mtP(mt_$111)) {
                                                                            final SubLObject _prev_bind_0_$104 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt_$111, thread);
                                                                                SubLObject iteration_state_$113;
                                                                                for (iteration_state_$113 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$113); iteration_state_$113 = dictionary_contents.do_dictionary_contents_next(iteration_state_$113)) {
                                                                                    thread.resetMultipleValues();
                                                                                    final SubLObject tv_$114 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$113);
                                                                                    final SubLObject link_nodes = thread.secondMultipleValue();
                                                                                    thread.resetMultipleValues();
                                                                                    if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$114)) {
                                                                                        final SubLObject _prev_bind_0_$105 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv_$114, thread);
                                                                                            final SubLObject sol = link_nodes;
                                                                                            if (NIL != set.set_p(sol)) {
                                                                                                final SubLObject set_contents_var = set.do_set_internal(sol);
                                                                                                SubLObject basis_object;
                                                                                                SubLObject state;
                                                                                                SubLObject ins;
                                                                                                for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                    ins = set_contents.do_set_contents_next(basis_object, state);
                                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state, ins)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                        if (NIL != funcall(pred, ins)) {
                                                                                                            count = add(count, ONE_INTEGER);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } else
                                                                                                if (sol.isList()) {
                                                                                                    SubLObject csome_list_var = sol;
                                                                                                    SubLObject ins2 = NIL;
                                                                                                    ins2 = csome_list_var.first();
                                                                                                    while (NIL != csome_list_var) {
                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                            if (NIL != funcall(pred, ins2)) {
                                                                                                                count = add(count, ONE_INTEGER);
                                                                                                            }
                                                                                                        }
                                                                                                        csome_list_var = csome_list_var.rest();
                                                                                                        ins2 = csome_list_var.first();
                                                                                                    } 
                                                                                                } else {
                                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                }

                                                                                        } finally {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$105, thread);
                                                                                        }
                                                                                    }
                                                                                }
                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state_$113);
                                                                            } finally {
                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$104, thread);
                                                                            }
                                                                        }
                                                                    }
                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                }
                                                            } else {
                                                                sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str40$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                            }
                                                            if (NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) {
                                                                SubLObject csome_list_var2 = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                SubLObject instance_tuple = NIL;
                                                                instance_tuple = csome_list_var2.first();
                                                                while (NIL != csome_list_var2) {
                                                                    SubLObject current;
                                                                    final SubLObject datum = current = instance_tuple;
                                                                    SubLObject link_node = NIL;
                                                                    SubLObject mt_$112 = NIL;
                                                                    SubLObject tv_$115 = NIL;
                                                                    destructuring_bind_must_consp(current, datum, $list116);
                                                                    link_node = current.first();
                                                                    current = current.rest();
                                                                    destructuring_bind_must_consp(current, datum, $list116);
                                                                    mt_$112 = current.first();
                                                                    current = current.rest();
                                                                    destructuring_bind_must_consp(current, datum, $list116);
                                                                    tv_$115 = current.first();
                                                                    current = current.rest();
                                                                    if (NIL == current) {
                                                                        if (NIL != mt_relevance_macros.relevant_mtP(mt_$112)) {
                                                                            final SubLObject _prev_bind_0_$106 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt_$112, thread);
                                                                                if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$115)) {
                                                                                    final SubLObject _prev_bind_0_$107 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                    try {
                                                                                        sbhl_link_vars.$sbhl_link_tv$.bind(tv_$115, thread);
                                                                                        final SubLObject sol;
                                                                                        final SubLObject link_nodes2 = sol = list(link_node);
                                                                                        if (NIL != set.set_p(sol)) {
                                                                                            final SubLObject set_contents_var = set.do_set_internal(sol);
                                                                                            SubLObject basis_object;
                                                                                            SubLObject state;
                                                                                            SubLObject ins;
                                                                                            for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                ins = set_contents.do_set_contents_next(basis_object, state);
                                                                                                if ((NIL != set_contents.do_set_contents_element_validP(state, ins)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                    if (NIL != funcall(pred, ins)) {
                                                                                                        count = add(count, ONE_INTEGER);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        } else
                                                                                            if (sol.isList()) {
                                                                                                SubLObject csome_list_var_$120 = sol;
                                                                                                SubLObject ins2 = NIL;
                                                                                                ins2 = csome_list_var_$120.first();
                                                                                                while (NIL != csome_list_var_$120) {
                                                                                                    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                        if (NIL != funcall(pred, ins2)) {
                                                                                                            count = add(count, ONE_INTEGER);
                                                                                                        }
                                                                                                    }
                                                                                                    csome_list_var_$120 = csome_list_var_$120.rest();
                                                                                                    ins2 = csome_list_var_$120.first();
                                                                                                } 
                                                                                            } else {
                                                                                                Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                            }

                                                                                    } finally {
                                                                                        sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$107, thread);
                                                                                    }
                                                                                }
                                                                            } finally {
                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$106, thread);
                                                                            }
                                                                        }
                                                                    } else {
                                                                        cdestructuring_bind_error(datum, $list116);
                                                                    }
                                                                    csome_list_var2 = csome_list_var2.rest();
                                                                    instance_tuple = csome_list_var2.first();
                                                                } 
                                                            }
                                                        } else
                                                            if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                SubLObject cdolist_list_var_$121;
                                                                final SubLObject new_list = cdolist_list_var_$121 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                SubLObject generating_fn = NIL;
                                                                generating_fn = cdolist_list_var_$121.first();
                                                                while (NIL != cdolist_list_var_$121) {
                                                                    final SubLObject _prev_bind_0_$108 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                        final SubLObject sol2;
                                                                        final SubLObject link_nodes3 = sol2 = funcall(generating_fn, node);
                                                                        if (NIL != set.set_p(sol2)) {
                                                                            final SubLObject set_contents_var2 = set.do_set_internal(sol2);
                                                                            SubLObject basis_object2;
                                                                            SubLObject state2;
                                                                            SubLObject ins3;
                                                                            for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); NIL == set_contents.do_set_contents_doneP(basis_object2, state2); state2 = set_contents.do_set_contents_update_state(state2)) {
                                                                                ins3 = set_contents.do_set_contents_next(basis_object2, state2);
                                                                                if ((NIL != set_contents.do_set_contents_element_validP(state2, ins3)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                    if (NIL != funcall(pred, ins3)) {
                                                                                        count = add(count, ONE_INTEGER);
                                                                                    }
                                                                                }
                                                                            }
                                                                        } else
                                                                            if (sol2.isList()) {
                                                                                SubLObject csome_list_var3 = sol2;
                                                                                SubLObject ins4 = NIL;
                                                                                ins4 = csome_list_var3.first();
                                                                                while (NIL != csome_list_var3) {
                                                                                    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                        if (NIL != funcall(pred, ins4)) {
                                                                                            count = add(count, ONE_INTEGER);
                                                                                        }
                                                                                    }
                                                                                    csome_list_var3 = csome_list_var3.rest();
                                                                                    ins4 = csome_list_var3.first();
                                                                                } 
                                                                            } else {
                                                                                Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                                            }

                                                                    } finally {
                                                                        sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$108, thread);
                                                                    }
                                                                    cdolist_list_var_$121 = cdolist_list_var_$121.rest();
                                                                    generating_fn = cdolist_list_var_$121.first();
                                                                } 
                                                            }

                                                    } finally {
                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$104, thread);
                                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$103, thread);
                                                    }
                                                    cdolist_list_var = cdolist_list_var.rest();
                                                    module_var = cdolist_list_var.first();
                                                } 
                                                SubLObject cdolist_list_var2;
                                                final SubLObject accessible_modules2 = cdolist_list_var2 = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)));
                                                SubLObject module_var2 = NIL;
                                                module_var2 = cdolist_list_var2.first();
                                                while (NIL != cdolist_list_var2) {
                                                    final SubLObject _prev_bind_0_$109 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                    final SubLObject _prev_bind_1_$105 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                    try {
                                                        sbhl_module_vars.$sbhl_module$.bind(module_var2, thread);
                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                        final SubLObject node2 = function_terms.naut_to_nart(node_var_$97);
                                                        if (NIL != sbhl_link_vars.sbhl_node_object_p(node2)) {
                                                            final SubLObject d_link2 = sbhl_graphs.get_sbhl_graph_link(node2, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                            if (NIL != d_link2) {
                                                                final SubLObject mt_links2 = sbhl_links.get_sbhl_mt_links(d_link2, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                if (NIL != mt_links2) {
                                                                    SubLObject iteration_state2;
                                                                    for (iteration_state2 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links2)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state2); iteration_state2 = dictionary_contents.do_dictionary_contents_next(iteration_state2)) {
                                                                        thread.resetMultipleValues();
                                                                        final SubLObject mt_$113 = dictionary_contents.do_dictionary_contents_key_value(iteration_state2);
                                                                        final SubLObject tv_links2 = thread.secondMultipleValue();
                                                                        thread.resetMultipleValues();
                                                                        if (NIL != mt_relevance_macros.relevant_mtP(mt_$113)) {
                                                                            final SubLObject _prev_bind_0_$110 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt_$113, thread);
                                                                                SubLObject iteration_state_$114;
                                                                                for (iteration_state_$114 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links2)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$114); iteration_state_$114 = dictionary_contents.do_dictionary_contents_next(iteration_state_$114)) {
                                                                                    thread.resetMultipleValues();
                                                                                    final SubLObject tv_$116 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$114);
                                                                                    final SubLObject link_nodes4 = thread.secondMultipleValue();
                                                                                    thread.resetMultipleValues();
                                                                                    if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$116)) {
                                                                                        final SubLObject _prev_bind_0_$111 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv_$116, thread);
                                                                                            final SubLObject sol3 = link_nodes4;
                                                                                            if (NIL != set.set_p(sol3)) {
                                                                                                final SubLObject set_contents_var3 = set.do_set_internal(sol3);
                                                                                                SubLObject basis_object3;
                                                                                                SubLObject state3;
                                                                                                SubLObject node_vars_link_node;
                                                                                                for (basis_object3 = set_contents.do_set_contents_basis_object(set_contents_var3), state3 = NIL, state3 = set_contents.do_set_contents_initial_state(basis_object3, set_contents_var3); NIL == set_contents.do_set_contents_doneP(basis_object3, state3); state3 = set_contents.do_set_contents_update_state(state3)) {
                                                                                                    node_vars_link_node = set_contents.do_set_contents_next(basis_object3, state3);
                                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state3, node_vars_link_node)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED))) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                        deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                    }
                                                                                                }
                                                                                            } else
                                                                                                if (sol3.isList()) {
                                                                                                    SubLObject csome_list_var4 = sol3;
                                                                                                    SubLObject node_vars_link_node2 = NIL;
                                                                                                    node_vars_link_node2 = csome_list_var4.first();
                                                                                                    while (NIL != csome_list_var4) {
                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node2, UNPROVIDED)) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node2, UNPROVIDED);
                                                                                                            deck.deck_push(node_vars_link_node2, recur_deck);
                                                                                                        }
                                                                                                        csome_list_var4 = csome_list_var4.rest();
                                                                                                        node_vars_link_node2 = csome_list_var4.first();
                                                                                                    } 
                                                                                                } else {
                                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol3);
                                                                                                }

                                                                                        } finally {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$111, thread);
                                                                                        }
                                                                                    }
                                                                                }
                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state_$114);
                                                                            } finally {
                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$110, thread);
                                                                            }
                                                                        }
                                                                    }
                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state2);
                                                                }
                                                            } else {
                                                                sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str40$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                            }
                                                        } else
                                                            if (NIL != obsolete.cnat_p(node2, UNPROVIDED)) {
                                                                SubLObject cdolist_list_var_$122;
                                                                final SubLObject new_list2 = cdolist_list_var_$122 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                SubLObject generating_fn2 = NIL;
                                                                generating_fn2 = cdolist_list_var_$122.first();
                                                                while (NIL != cdolist_list_var_$122) {
                                                                    final SubLObject _prev_bind_0_$112 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn2, thread);
                                                                        final SubLObject sol4;
                                                                        final SubLObject link_nodes5 = sol4 = funcall(generating_fn2, node2);
                                                                        if (NIL != set.set_p(sol4)) {
                                                                            final SubLObject set_contents_var4 = set.do_set_internal(sol4);
                                                                            SubLObject basis_object4;
                                                                            SubLObject state4;
                                                                            SubLObject node_vars_link_node3;
                                                                            for (basis_object4 = set_contents.do_set_contents_basis_object(set_contents_var4), state4 = NIL, state4 = set_contents.do_set_contents_initial_state(basis_object4, set_contents_var4); NIL == set_contents.do_set_contents_doneP(basis_object4, state4); state4 = set_contents.do_set_contents_update_state(state4)) {
                                                                                node_vars_link_node3 = set_contents.do_set_contents_next(basis_object4, state4);
                                                                                if ((NIL != set_contents.do_set_contents_element_validP(state4, node_vars_link_node3)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node3, UNPROVIDED))) {
                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node3, UNPROVIDED);
                                                                                    deck.deck_push(node_vars_link_node3, recur_deck);
                                                                                }
                                                                            }
                                                                        } else
                                                                            if (sol4.isList()) {
                                                                                SubLObject csome_list_var5 = sol4;
                                                                                SubLObject node_vars_link_node4 = NIL;
                                                                                node_vars_link_node4 = csome_list_var5.first();
                                                                                while (NIL != csome_list_var5) {
                                                                                    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node4, UNPROVIDED)) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node4, UNPROVIDED);
                                                                                        deck.deck_push(node_vars_link_node4, recur_deck);
                                                                                    }
                                                                                    csome_list_var5 = csome_list_var5.rest();
                                                                                    node_vars_link_node4 = csome_list_var5.first();
                                                                                } 
                                                                            } else {
                                                                                Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol4);
                                                                            }

                                                                    } finally {
                                                                        sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$112, thread);
                                                                    }
                                                                    cdolist_list_var_$122 = cdolist_list_var_$122.rest();
                                                                    generating_fn2 = cdolist_list_var_$122.first();
                                                                } 
                                                            }

                                                    } finally {
                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$105, thread);
                                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$109, thread);
                                                    }
                                                    cdolist_list_var2 = cdolist_list_var2.rest();
                                                    module_var2 = cdolist_list_var2.first();
                                                } 
                                                node_var_$97 = deck.deck_pop(recur_deck);
                                            } 
                                        } finally {
                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_$106, thread);
                                            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_$103, thread);
                                            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_$102, thread);
                                        }
                                    } else {
                                        sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str117$Node__a_does_not_pass_sbhl_type_t, collection, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    }
                                } finally {
                                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_$105, thread);
                                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_$102, thread);
                                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$101, thread);
                                }
                            } finally {
                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$101, thread);
                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$100, thread);
                            }
                        } finally {
                            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$100, thread);
                            mt_relevance_macros.$mt$.rebind(_prev_bind_0_$99, thread);
                        }
                    } finally {
                        final SubLObject _prev_bind_0_$113 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            final SubLObject _values = getValuesAsVector();
                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            restoreValuesFromVector(_values);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$113, thread);
                        }
                    }
                } finally {
                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$98, thread);
                }
            } finally {
                final SubLObject _prev_bind_0_$114 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values2 = getValuesAsVector();
                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                    restoreValuesFromVector(_values2);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$114, thread);
                }
            }
        } finally {
            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_2, thread);
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0, thread);
        }
        return count;
    }

    /**
     *
     *
     * @return boolean; whether COLLECTION has exactly NUM instances in MT with TV.
     */
    @LispMethod(comment = "@return boolean; whether COLLECTION has exactly NUM instances in MT with TV.")
    public static final SubLObject count_all_instances_E_alt(SubLObject collection, SubLObject num, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject count = ZERO_INTEGER;
                SubLObject GP = NIL;
                SubLObject node_var = collection;
                {
                    SubLObject _prev_bind_0 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                    try {
                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$isa), thread);
                        sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        if (NIL == GP) {
                            {
                                SubLObject node_var_146 = node_var;
                                SubLObject deck_type = (false) ? ((SubLObject) ($QUEUE)) : $STACK;
                                SubLObject recur_deck = deck.create_deck(deck_type);
                                {
                                    SubLObject _prev_bind_0_147 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                    try {
                                        sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                        {
                                            SubLObject mt_var = mt;
                                            {
                                                SubLObject _prev_bind_0_148 = mt_relevance_macros.$mt$.currentBinding(thread);
                                                SubLObject _prev_bind_1_149 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                                SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                                try {
                                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                                    {
                                                        SubLObject tv_var = tv;
                                                        {
                                                            SubLObject _prev_bind_0_150 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                                            SubLObject _prev_bind_1_151 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                                            try {
                                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                                if (NIL != tv_var) {
                                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                                            {
                                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                if (pcase_var.eql($ERROR)) {
                                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                } else {
                                                                                    if (pcase_var.eql($CERROR)) {
                                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                    } else {
                                                                                        if (pcase_var.eql($WARN)) {
                                                                                            Errors.warn($str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                        } else {
                                                                                            Errors.warn($str_alt36$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                            Errors.cerror($$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                {
                                                                    SubLObject _prev_bind_0_152 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                                                    SubLObject _prev_bind_1_153 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                                                    SubLObject _prev_bind_2_154 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
                                                                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
                                                                        if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node_var, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                            {
                                                                                SubLObject _prev_bind_0_155 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_156 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_157 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                                                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_var_146, UNPROVIDED);
                                                                                    while ((NIL != node_var_146) && (NIL == GP)) {
                                                                                        {
                                                                                            SubLObject tt_node_var = node_var_146;
                                                                                            SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$isa));
                                                                                            SubLObject rest = NIL;
                                                                                            for (rest = accessible_modules; !((NIL != GP) || (NIL == rest)); rest = rest.rest()) {
                                                                                                {
                                                                                                    SubLObject module_var = rest.first();
                                                                                                    {
                                                                                                        SubLObject _prev_bind_0_158 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                                        SubLObject _prev_bind_1_159 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                        try {
                                                                                                            sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                            {
                                                                                                                SubLObject node = function_terms.naut_to_nart(tt_node_var);
                                                                                                                if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                                    {
                                                                                                                        SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                        if (NIL != d_link) {
                                                                                                                            {
                                                                                                                                SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                                if (NIL != mt_links) {
                                                                                                                                    {
                                                                                                                                        SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                                        while (!((NIL != GP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state)))) {
                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                            {
                                                                                                                                                SubLObject mt_160 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                                SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                                thread.resetMultipleValues();
                                                                                                                                                if (NIL != mt_relevance_macros.relevant_mtP(mt_160)) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject _prev_bind_0_161 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                        try {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.bind(mt_160, thread);
                                                                                                                                                            {
                                                                                                                                                                SubLObject iteration_state_162 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                                while (!((NIL != GP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state_162)))) {
                                                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject tv_163 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_162);
                                                                                                                                                                        SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_163)) {
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject _prev_bind_0_164 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                                try {
                                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv_163, thread);
                                                                                                                                                                                    {
                                                                                                                                                                                        SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                                        SubLObject rest_165 = NIL;
                                                                                                                                                                                        for (rest_165 = new_list; !((NIL != GP) || (NIL == rest_165)); rest_165 = rest_165.rest()) {
                                                                                                                                                                                            {
                                                                                                                                                                                                SubLObject ins = rest_165.first();
                                                                                                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                                                                    count = add(count, ONE_INTEGER);
                                                                                                                                                                                                    if (count.numG(num)) {
                                                                                                                                                                                                        GP = T;
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                } finally {
                                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_164, thread);
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        iteration_state_162 = dictionary_contents.do_dictionary_contents_next(iteration_state_162);
                                                                                                                                                                    }
                                                                                                                                                                } 
                                                                                                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state_162);
                                                                                                                                                            }
                                                                                                                                                        } finally {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_161, thread);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                            }
                                                                                                                                        } 
                                                                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        } else {
                                                                                                                            sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt38$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                        }
                                                                                                                    }
                                                                                                                    if (NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) {
                                                                                                                        if (NIL == GP) {
                                                                                                                            {
                                                                                                                                SubLObject csome_list_var = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                                                                                SubLObject instance_tuple = NIL;
                                                                                                                                for (instance_tuple = csome_list_var.first(); !((NIL != GP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , instance_tuple = csome_list_var.first()) {
                                                                                                                                    {
                                                                                                                                        SubLObject datum = instance_tuple;
                                                                                                                                        SubLObject current = datum;
                                                                                                                                        SubLObject link_node = NIL;
                                                                                                                                        SubLObject mt_166 = NIL;
                                                                                                                                        SubLObject tv_167 = NIL;
                                                                                                                                        destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                                        link_node = current.first();
                                                                                                                                        current = current.rest();
                                                                                                                                        destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                                        mt_166 = current.first();
                                                                                                                                        current = current.rest();
                                                                                                                                        destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                                        tv_167 = current.first();
                                                                                                                                        current = current.rest();
                                                                                                                                        if (NIL == current) {
                                                                                                                                            if (NIL != mt_relevance_macros.relevant_mtP(mt_166)) {
                                                                                                                                                {
                                                                                                                                                    SubLObject _prev_bind_0_168 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                    try {
                                                                                                                                                        sbhl_link_vars.$sbhl_link_mt$.bind(mt_166, thread);
                                                                                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_167)) {
                                                                                                                                                            {
                                                                                                                                                                SubLObject _prev_bind_0_169 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                try {
                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv_167, thread);
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject link_nodes = list(link_node);
                                                                                                                                                                        SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                        SubLObject rest_170 = NIL;
                                                                                                                                                                        for (rest_170 = new_list; !((NIL != GP) || (NIL == rest_170)); rest_170 = rest_170.rest()) {
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject ins = rest_170.first();
                                                                                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                                                    count = add(count, ONE_INTEGER);
                                                                                                                                                                                    if (count.numG(num)) {
                                                                                                                                                                                        GP = T;
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                } finally {
                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_169, thread);
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    } finally {
                                                                                                                                                        sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_168, thread);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } else {
                                                                                                                                            cdestructuring_bind_error(datum, $list_alt111);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                                        {
                                                                                                                            SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                            SubLObject rest_171 = NIL;
                                                                                                                            for (rest_171 = new_list; !((NIL != GP) || (NIL == rest_171)); rest_171 = rest_171.rest()) {
                                                                                                                                {
                                                                                                                                    SubLObject generating_fn = rest_171.first();
                                                                                                                                    {
                                                                                                                                        SubLObject _prev_bind_0_172 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                                        try {
                                                                                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                            {
                                                                                                                                                SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                                SubLObject new_list_173 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                SubLObject rest_174 = NIL;
                                                                                                                                                for (rest_174 = new_list_173; !((NIL != GP) || (NIL == rest_174)); rest_174 = rest_174.rest()) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject ins = rest_174.first();
                                                                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                            count = add(count, ONE_INTEGER);
                                                                                                                                                            if (count.numG(num)) {
                                                                                                                                                                GP = T;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } finally {
                                                                                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_172, thread);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        } finally {
                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_159, thread);
                                                                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_158, thread);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        {
                                                                                            SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)));
                                                                                            SubLObject rest = NIL;
                                                                                            for (rest = accessible_modules; !((NIL != GP) || (NIL == rest)); rest = rest.rest()) {
                                                                                                {
                                                                                                    SubLObject module_var = rest.first();
                                                                                                    {
                                                                                                        SubLObject _prev_bind_0_175 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                                        SubLObject _prev_bind_1_176 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                        try {
                                                                                                            sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                            {
                                                                                                                SubLObject node = function_terms.naut_to_nart(node_var_146);
                                                                                                                if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                                    {
                                                                                                                        SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                        if (NIL != d_link) {
                                                                                                                            {
                                                                                                                                SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                                if (NIL != mt_links) {
                                                                                                                                    {
                                                                                                                                        SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                                        while (!((NIL != GP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state)))) {
                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                            {
                                                                                                                                                SubLObject mt_177 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                                SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                                thread.resetMultipleValues();
                                                                                                                                                if (NIL != mt_relevance_macros.relevant_mtP(mt_177)) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject _prev_bind_0_178 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                        try {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.bind(mt_177, thread);
                                                                                                                                                            {
                                                                                                                                                                SubLObject iteration_state_179 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                                while (!((NIL != GP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state_179)))) {
                                                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject tv_180 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_179);
                                                                                                                                                                        SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_180)) {
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject _prev_bind_0_181 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                                try {
                                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv_180, thread);
                                                                                                                                                                                    {
                                                                                                                                                                                        SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                                        SubLObject rest_182 = NIL;
                                                                                                                                                                                        for (rest_182 = new_list; !((NIL != GP) || (NIL == rest_182)); rest_182 = rest_182.rest()) {
                                                                                                                                                                                            {
                                                                                                                                                                                                SubLObject node_vars_link_node = rest_182.first();
                                                                                                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
                                                                                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                                                                                                                    deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                } finally {
                                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_181, thread);
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        iteration_state_179 = dictionary_contents.do_dictionary_contents_next(iteration_state_179);
                                                                                                                                                                    }
                                                                                                                                                                } 
                                                                                                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state_179);
                                                                                                                                                            }
                                                                                                                                                        } finally {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_178, thread);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                            }
                                                                                                                                        } 
                                                                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        } else {
                                                                                                                            sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt38$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                        }
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                                        {
                                                                                                                            SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                            SubLObject rest_183 = NIL;
                                                                                                                            for (rest_183 = new_list; !((NIL != GP) || (NIL == rest_183)); rest_183 = rest_183.rest()) {
                                                                                                                                {
                                                                                                                                    SubLObject generating_fn = rest_183.first();
                                                                                                                                    {
                                                                                                                                        SubLObject _prev_bind_0_184 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                                        try {
                                                                                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                            {
                                                                                                                                                SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                                SubLObject new_list_185 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                SubLObject rest_186 = NIL;
                                                                                                                                                for (rest_186 = new_list_185; !((NIL != GP) || (NIL == rest_186)); rest_186 = rest_186.rest()) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject node_vars_link_node = rest_186.first();
                                                                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
                                                                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                                                                            deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } finally {
                                                                                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_184, thread);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        } finally {
                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_176, thread);
                                                                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_175, thread);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        node_var_146 = deck.deck_pop(recur_deck);
                                                                                    } 
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_157, thread);
                                                                                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_156, thread);
                                                                                    sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_155, thread);
                                                                                }
                                                                            }
                                                                        } else {
                                                                            sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt112$Node__a_does_not_pass_sbhl_type_t, node_var, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                        }
                                                                    } finally {
                                                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                                                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_154, thread);
                                                                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_153, thread);
                                                                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_152, thread);
                                                                    }
                                                                }
                                                            } finally {
                                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_151, thread);
                                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_150, thread);
                                                            }
                                                        }
                                                    }
                                                } finally {
                                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_149, thread);
                                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_148, thread);
                                                }
                                            }
                                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                        }
                                    } finally {
                                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_147, thread);
                                    }
                                }
                            }
                        }
                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                    } finally {
                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_1, thread);
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return numE(count, num);
            }
        }
    }

    /**
     *
     *
     * @return boolean; whether COLLECTION has exactly NUM instances in MT with TV.
     */
    @LispMethod(comment = "@return boolean; whether COLLECTION has exactly NUM instances in MT with TV.")
    public static SubLObject count_all_instances_E(final SubLObject collection, final SubLObject num, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject count = ZERO_INTEGER;
        SubLObject GP = NIL;
        final SubLObject _prev_bind_0 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
        try {
            sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$isa), thread);
            sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
            try {
                if (NIL == GP) {
                    SubLObject node_var_$134 = collection;
                    final SubLObject deck_type = $STACK;
                    final SubLObject recur_deck = deck.create_deck(deck_type);
                    final SubLObject _prev_bind_0_$135 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                    try {
                        sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        try {
                            final SubLObject mt_var = mt;
                            final SubLObject _prev_bind_0_$136 = mt_relevance_macros.$mt$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$137 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                            final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                            try {
                                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                final SubLObject tv_var = tv;
                                final SubLObject _prev_bind_0_$137 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$138 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                        if (pcase_var.eql($ERROR)) {
                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        } else
                                            if (pcase_var.eql($CERROR)) {
                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var.eql($WARN)) {
                                                    Errors.warn($str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                } else {
                                                    Errors.warn($str37$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                    Errors.cerror($$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                }


                                    }
                                    final SubLObject _prev_bind_0_$138 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                    final SubLObject _prev_bind_1_$139 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                    final SubLObject _prev_bind_2_$142 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                    final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                    final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
                                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
                                        if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(collection, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                            final SubLObject _prev_bind_0_$139 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                            final SubLObject _prev_bind_1_$140 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                            final SubLObject _prev_bind_2_$143 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_var_$134, UNPROVIDED);
                                                while ((NIL != node_var_$134) && (NIL == GP)) {
                                                    final SubLObject tt_node_var = node_var_$134;
                                                    final SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$isa));
                                                    SubLObject rest;
                                                    SubLObject module_var;
                                                    SubLObject _prev_bind_0_$140;
                                                    SubLObject _prev_bind_1_$141;
                                                    SubLObject node;
                                                    SubLObject d_link;
                                                    SubLObject mt_links;
                                                    SubLObject iteration_state;
                                                    SubLObject mt_$148;
                                                    SubLObject tv_links;
                                                    SubLObject _prev_bind_0_$141;
                                                    SubLObject iteration_state_$150;
                                                    SubLObject tv_$151;
                                                    SubLObject link_nodes;
                                                    SubLObject _prev_bind_0_$142;
                                                    SubLObject sol;
                                                    SubLObject set_contents_var;
                                                    SubLObject basis_object;
                                                    SubLObject state;
                                                    SubLObject ins;
                                                    SubLObject csome_list_var;
                                                    SubLObject ins2;
                                                    SubLObject csome_list_var2;
                                                    SubLObject instance_tuple;
                                                    SubLObject current;
                                                    SubLObject datum;
                                                    SubLObject link_node;
                                                    SubLObject mt_$149;
                                                    SubLObject tv_$152;
                                                    SubLObject _prev_bind_0_$143;
                                                    SubLObject _prev_bind_0_$144;
                                                    SubLObject link_nodes2;
                                                    SubLObject csome_list_var_$157;
                                                    SubLObject new_list;
                                                    SubLObject rest_$158;
                                                    SubLObject generating_fn;
                                                    SubLObject _prev_bind_0_$145;
                                                    SubLObject sol2;
                                                    SubLObject link_nodes3;
                                                    SubLObject set_contents_var2;
                                                    SubLObject basis_object2;
                                                    SubLObject state2;
                                                    SubLObject ins3;
                                                    SubLObject csome_list_var3;
                                                    SubLObject ins4;
                                                    for (rest = NIL, rest = accessible_modules; (NIL == GP) && (NIL != rest); rest = rest.rest()) {
                                                        module_var = rest.first();
                                                        _prev_bind_0_$140 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                        _prev_bind_1_$141 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                        try {
                                                            sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                            node = function_terms.naut_to_nart(tt_node_var);
                                                            if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                if (NIL != d_link) {
                                                                    mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                    if (NIL != mt_links) {
                                                                        for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); (NIL == GP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                                                            thread.resetMultipleValues();
                                                                            mt_$148 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                            tv_links = thread.secondMultipleValue();
                                                                            thread.resetMultipleValues();
                                                                            if (NIL != mt_relevance_macros.relevant_mtP(mt_$148)) {
                                                                                _prev_bind_0_$141 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_$148, thread);
                                                                                    for (iteration_state_$150 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); (NIL == GP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$150)); iteration_state_$150 = dictionary_contents.do_dictionary_contents_next(iteration_state_$150)) {
                                                                                        thread.resetMultipleValues();
                                                                                        tv_$151 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$150);
                                                                                        link_nodes = thread.secondMultipleValue();
                                                                                        thread.resetMultipleValues();
                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$151)) {
                                                                                            _prev_bind_0_$142 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.bind(tv_$151, thread);
                                                                                                sol = link_nodes;
                                                                                                if (NIL != set.set_p(sol)) {
                                                                                                    set_contents_var = set.do_set_internal(sol);
                                                                                                    for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == GP) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                        ins = set_contents.do_set_contents_next(basis_object, state);
                                                                                                        if ((NIL != set_contents.do_set_contents_element_validP(state, ins)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                            count = add(count, ONE_INTEGER);
                                                                                                            if (count.numG(num)) {
                                                                                                                GP = T;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } else
                                                                                                    if (sol.isList()) {
                                                                                                        if (NIL == GP) {
                                                                                                            csome_list_var = sol;
                                                                                                            ins2 = NIL;
                                                                                                            ins2 = csome_list_var.first();
                                                                                                            while ((NIL == GP) && (NIL != csome_list_var)) {
                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                    count = add(count, ONE_INTEGER);
                                                                                                                    if (count.numG(num)) {
                                                                                                                        GP = T;
                                                                                                                    }
                                                                                                                }
                                                                                                                csome_list_var = csome_list_var.rest();
                                                                                                                ins2 = csome_list_var.first();
                                                                                                            } 
                                                                                                        }
                                                                                                    } else {
                                                                                                        Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                    }

                                                                                            } finally {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$142, thread);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state_$150);
                                                                                } finally {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$141, thread);
                                                                                }
                                                                            }
                                                                        }
                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                    }
                                                                } else {
                                                                    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str40$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                }
                                                                if ((NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) && (NIL == GP)) {
                                                                    csome_list_var2 = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                    instance_tuple = NIL;
                                                                    instance_tuple = csome_list_var2.first();
                                                                    while ((NIL == GP) && (NIL != csome_list_var2)) {
                                                                        datum = current = instance_tuple;
                                                                        link_node = NIL;
                                                                        mt_$149 = NIL;
                                                                        tv_$152 = NIL;
                                                                        destructuring_bind_must_consp(current, datum, $list116);
                                                                        link_node = current.first();
                                                                        current = current.rest();
                                                                        destructuring_bind_must_consp(current, datum, $list116);
                                                                        mt_$149 = current.first();
                                                                        current = current.rest();
                                                                        destructuring_bind_must_consp(current, datum, $list116);
                                                                        tv_$152 = current.first();
                                                                        current = current.rest();
                                                                        if (NIL == current) {
                                                                            if (NIL != mt_relevance_macros.relevant_mtP(mt_$149)) {
                                                                                _prev_bind_0_$143 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_$149, thread);
                                                                                    if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$152)) {
                                                                                        _prev_bind_0_$144 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv_$152, thread);
                                                                                            link_nodes2 = sol = list(link_node);
                                                                                            if (NIL != set.set_p(sol)) {
                                                                                                set_contents_var = set.do_set_internal(sol);
                                                                                                for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == GP) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                    ins = set_contents.do_set_contents_next(basis_object, state);
                                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state, ins)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                        count = add(count, ONE_INTEGER);
                                                                                                        if (count.numG(num)) {
                                                                                                            GP = T;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } else
                                                                                                if (sol.isList()) {
                                                                                                    if (NIL == GP) {
                                                                                                        csome_list_var_$157 = sol;
                                                                                                        ins2 = NIL;
                                                                                                        ins2 = csome_list_var_$157.first();
                                                                                                        while ((NIL == GP) && (NIL != csome_list_var_$157)) {
                                                                                                            if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                count = add(count, ONE_INTEGER);
                                                                                                                if (count.numG(num)) {
                                                                                                                    GP = T;
                                                                                                                }
                                                                                                            }
                                                                                                            csome_list_var_$157 = csome_list_var_$157.rest();
                                                                                                            ins2 = csome_list_var_$157.first();
                                                                                                        } 
                                                                                                    }
                                                                                                } else {
                                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                }

                                                                                        } finally {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$144, thread);
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$143, thread);
                                                                                }
                                                                            }
                                                                        } else {
                                                                            cdestructuring_bind_error(datum, $list116);
                                                                        }
                                                                        csome_list_var2 = csome_list_var2.rest();
                                                                        instance_tuple = csome_list_var2.first();
                                                                    } 
                                                                }
                                                            } else
                                                                if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                    new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                    for (rest_$158 = NIL, rest_$158 = new_list; (NIL == GP) && (NIL != rest_$158); rest_$158 = rest_$158.rest()) {
                                                                        generating_fn = rest_$158.first();
                                                                        _prev_bind_0_$145 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                            link_nodes3 = sol2 = funcall(generating_fn, node);
                                                                            if (NIL != set.set_p(sol2)) {
                                                                                set_contents_var2 = set.do_set_internal(sol2);
                                                                                for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); (NIL == GP) && (NIL == set_contents.do_set_contents_doneP(basis_object2, state2)); state2 = set_contents.do_set_contents_update_state(state2)) {
                                                                                    ins3 = set_contents.do_set_contents_next(basis_object2, state2);
                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state2, ins3)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                        count = add(count, ONE_INTEGER);
                                                                                        if (count.numG(num)) {
                                                                                            GP = T;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } else
                                                                                if (sol2.isList()) {
                                                                                    if (NIL == GP) {
                                                                                        csome_list_var3 = sol2;
                                                                                        ins4 = NIL;
                                                                                        ins4 = csome_list_var3.first();
                                                                                        while ((NIL == GP) && (NIL != csome_list_var3)) {
                                                                                            if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(ins4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                count = add(count, ONE_INTEGER);
                                                                                                if (count.numG(num)) {
                                                                                                    GP = T;
                                                                                                }
                                                                                            }
                                                                                            csome_list_var3 = csome_list_var3.rest();
                                                                                            ins4 = csome_list_var3.first();
                                                                                        } 
                                                                                    }
                                                                                } else {
                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                                                }

                                                                        } finally {
                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$145, thread);
                                                                        }
                                                                    }
                                                                }

                                                        } finally {
                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$141, thread);
                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$140, thread);
                                                        }
                                                    }
                                                    final SubLObject accessible_modules2 = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)));
                                                    SubLObject rest2;
                                                    SubLObject module_var2;
                                                    SubLObject _prev_bind_0_$146;
                                                    SubLObject _prev_bind_1_$142;
                                                    SubLObject node2;
                                                    SubLObject d_link2;
                                                    SubLObject mt_links2;
                                                    SubLObject iteration_state2;
                                                    SubLObject mt_$150;
                                                    SubLObject tv_links2;
                                                    SubLObject _prev_bind_0_$147;
                                                    SubLObject iteration_state_$151;
                                                    SubLObject tv_$153;
                                                    SubLObject link_nodes4;
                                                    SubLObject _prev_bind_0_$148;
                                                    SubLObject sol3;
                                                    SubLObject set_contents_var3;
                                                    SubLObject basis_object3;
                                                    SubLObject state3;
                                                    SubLObject node_vars_link_node;
                                                    SubLObject csome_list_var4;
                                                    SubLObject node_vars_link_node2;
                                                    SubLObject new_list2;
                                                    SubLObject rest_$159;
                                                    SubLObject generating_fn2;
                                                    SubLObject _prev_bind_0_$149;
                                                    SubLObject sol4;
                                                    SubLObject link_nodes5;
                                                    SubLObject set_contents_var4;
                                                    SubLObject basis_object4;
                                                    SubLObject state4;
                                                    SubLObject node_vars_link_node3;
                                                    SubLObject csome_list_var5;
                                                    SubLObject node_vars_link_node4;
                                                    for (rest2 = NIL, rest2 = accessible_modules2; (NIL == GP) && (NIL != rest2); rest2 = rest2.rest()) {
                                                        module_var2 = rest2.first();
                                                        _prev_bind_0_$146 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                        _prev_bind_1_$142 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                        try {
                                                            sbhl_module_vars.$sbhl_module$.bind(module_var2, thread);
                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                            node2 = function_terms.naut_to_nart(node_var_$134);
                                                            if (NIL != sbhl_link_vars.sbhl_node_object_p(node2)) {
                                                                d_link2 = sbhl_graphs.get_sbhl_graph_link(node2, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                if (NIL != d_link2) {
                                                                    mt_links2 = sbhl_links.get_sbhl_mt_links(d_link2, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                    if (NIL != mt_links2) {
                                                                        for (iteration_state2 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links2)); (NIL == GP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state2)); iteration_state2 = dictionary_contents.do_dictionary_contents_next(iteration_state2)) {
                                                                            thread.resetMultipleValues();
                                                                            mt_$150 = dictionary_contents.do_dictionary_contents_key_value(iteration_state2);
                                                                            tv_links2 = thread.secondMultipleValue();
                                                                            thread.resetMultipleValues();
                                                                            if (NIL != mt_relevance_macros.relevant_mtP(mt_$150)) {
                                                                                _prev_bind_0_$147 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_$150, thread);
                                                                                    for (iteration_state_$151 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links2)); (NIL == GP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$151)); iteration_state_$151 = dictionary_contents.do_dictionary_contents_next(iteration_state_$151)) {
                                                                                        thread.resetMultipleValues();
                                                                                        tv_$153 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$151);
                                                                                        link_nodes4 = thread.secondMultipleValue();
                                                                                        thread.resetMultipleValues();
                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$153)) {
                                                                                            _prev_bind_0_$148 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.bind(tv_$153, thread);
                                                                                                sol3 = link_nodes4;
                                                                                                if (NIL != set.set_p(sol3)) {
                                                                                                    set_contents_var3 = set.do_set_internal(sol3);
                                                                                                    for (basis_object3 = set_contents.do_set_contents_basis_object(set_contents_var3), state3 = NIL, state3 = set_contents.do_set_contents_initial_state(basis_object3, set_contents_var3); (NIL == GP) && (NIL == set_contents.do_set_contents_doneP(basis_object3, state3)); state3 = set_contents.do_set_contents_update_state(state3)) {
                                                                                                        node_vars_link_node = set_contents.do_set_contents_next(basis_object3, state3);
                                                                                                        if ((NIL != set_contents.do_set_contents_element_validP(state3, node_vars_link_node)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED))) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                            deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                        }
                                                                                                    }
                                                                                                } else
                                                                                                    if (sol3.isList()) {
                                                                                                        if (NIL == GP) {
                                                                                                            csome_list_var4 = sol3;
                                                                                                            node_vars_link_node2 = NIL;
                                                                                                            node_vars_link_node2 = csome_list_var4.first();
                                                                                                            while ((NIL == GP) && (NIL != csome_list_var4)) {
                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node2, UNPROVIDED)) {
                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node2, UNPROVIDED);
                                                                                                                    deck.deck_push(node_vars_link_node2, recur_deck);
                                                                                                                }
                                                                                                                csome_list_var4 = csome_list_var4.rest();
                                                                                                                node_vars_link_node2 = csome_list_var4.first();
                                                                                                            } 
                                                                                                        }
                                                                                                    } else {
                                                                                                        Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol3);
                                                                                                    }

                                                                                            } finally {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$148, thread);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state_$151);
                                                                                } finally {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$147, thread);
                                                                                }
                                                                            }
                                                                        }
                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state2);
                                                                    }
                                                                } else {
                                                                    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str40$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                }
                                                            } else
                                                                if (NIL != obsolete.cnat_p(node2, UNPROVIDED)) {
                                                                    new_list2 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                    for (rest_$159 = NIL, rest_$159 = new_list2; (NIL == GP) && (NIL != rest_$159); rest_$159 = rest_$159.rest()) {
                                                                        generating_fn2 = rest_$159.first();
                                                                        _prev_bind_0_$149 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn2, thread);
                                                                            link_nodes5 = sol4 = funcall(generating_fn2, node2);
                                                                            if (NIL != set.set_p(sol4)) {
                                                                                set_contents_var4 = set.do_set_internal(sol4);
                                                                                for (basis_object4 = set_contents.do_set_contents_basis_object(set_contents_var4), state4 = NIL, state4 = set_contents.do_set_contents_initial_state(basis_object4, set_contents_var4); (NIL == GP) && (NIL == set_contents.do_set_contents_doneP(basis_object4, state4)); state4 = set_contents.do_set_contents_update_state(state4)) {
                                                                                    node_vars_link_node3 = set_contents.do_set_contents_next(basis_object4, state4);
                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state4, node_vars_link_node3)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node3, UNPROVIDED))) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node3, UNPROVIDED);
                                                                                        deck.deck_push(node_vars_link_node3, recur_deck);
                                                                                    }
                                                                                }
                                                                            } else
                                                                                if (sol4.isList()) {
                                                                                    if (NIL == GP) {
                                                                                        csome_list_var5 = sol4;
                                                                                        node_vars_link_node4 = NIL;
                                                                                        node_vars_link_node4 = csome_list_var5.first();
                                                                                        while ((NIL == GP) && (NIL != csome_list_var5)) {
                                                                                            if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node4, UNPROVIDED)) {
                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node4, UNPROVIDED);
                                                                                                deck.deck_push(node_vars_link_node4, recur_deck);
                                                                                            }
                                                                                            csome_list_var5 = csome_list_var5.rest();
                                                                                            node_vars_link_node4 = csome_list_var5.first();
                                                                                        } 
                                                                                    }
                                                                                } else {
                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol4);
                                                                                }

                                                                        } finally {
                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$149, thread);
                                                                        }
                                                                    }
                                                                }

                                                        } finally {
                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$142, thread);
                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$146, thread);
                                                        }
                                                    }
                                                    node_var_$134 = deck.deck_pop(recur_deck);
                                                } 
                                            } finally {
                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_$143, thread);
                                                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_$140, thread);
                                                sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_$139, thread);
                                            }
                                        } else {
                                            sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str117$Node__a_does_not_pass_sbhl_type_t, collection, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        }
                                    } finally {
                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_$142, thread);
                                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_$139, thread);
                                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$138, thread);
                                    }
                                } finally {
                                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$138, thread);
                                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$137, thread);
                                }
                            } finally {
                                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$137, thread);
                                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$136, thread);
                            }
                        } finally {
                            final SubLObject _prev_bind_0_$150 = $is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                $is_thread_performing_cleanupP$.bind(T, thread);
                                final SubLObject _values = getValuesAsVector();
                                sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                restoreValuesFromVector(_values);
                            } finally {
                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$150, thread);
                            }
                        }
                    } finally {
                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$135, thread);
                    }
                }
            } finally {
                final SubLObject _prev_bind_0_$151 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values2 = getValuesAsVector();
                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                    restoreValuesFromVector(_values2);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$151, thread);
                }
            }
        } finally {
            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_2, thread);
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0, thread);
        }
        return numE(count, num);
    }

    /**
     *
     *
     * @return boolean; whether COLLECTION has more than NUM instances in MT with TV.
     */
    @LispMethod(comment = "@return boolean; whether COLLECTION has more than NUM instances in MT with TV.")
    public static final SubLObject count_all_instances_G_alt(SubLObject collection, SubLObject num, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject count = ZERO_INTEGER;
                SubLObject GP = NIL;
                SubLObject node_var = collection;
                {
                    SubLObject _prev_bind_0 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                    try {
                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$isa), thread);
                        sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        if (NIL == GP) {
                            {
                                SubLObject node_var_187 = node_var;
                                SubLObject deck_type = (false) ? ((SubLObject) ($QUEUE)) : $STACK;
                                SubLObject recur_deck = deck.create_deck(deck_type);
                                {
                                    SubLObject _prev_bind_0_188 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                    try {
                                        sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                        {
                                            SubLObject mt_var = mt;
                                            {
                                                SubLObject _prev_bind_0_189 = mt_relevance_macros.$mt$.currentBinding(thread);
                                                SubLObject _prev_bind_1_190 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                                SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                                try {
                                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                                    {
                                                        SubLObject tv_var = tv;
                                                        {
                                                            SubLObject _prev_bind_0_191 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                                            SubLObject _prev_bind_1_192 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                                            try {
                                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                                if (NIL != tv_var) {
                                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                                            {
                                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                if (pcase_var.eql($ERROR)) {
                                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                } else {
                                                                                    if (pcase_var.eql($CERROR)) {
                                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                    } else {
                                                                                        if (pcase_var.eql($WARN)) {
                                                                                            Errors.warn($str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                        } else {
                                                                                            Errors.warn($str_alt36$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                            Errors.cerror($$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                {
                                                                    SubLObject _prev_bind_0_193 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                                                    SubLObject _prev_bind_1_194 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                                                    SubLObject _prev_bind_2_195 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
                                                                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
                                                                        if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node_var, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                            {
                                                                                SubLObject _prev_bind_0_196 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_197 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_198 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                                                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_var_187, UNPROVIDED);
                                                                                    while ((NIL != node_var_187) && (NIL == GP)) {
                                                                                        {
                                                                                            SubLObject tt_node_var = node_var_187;
                                                                                            SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$isa));
                                                                                            SubLObject rest = NIL;
                                                                                            for (rest = accessible_modules; !((NIL != GP) || (NIL == rest)); rest = rest.rest()) {
                                                                                                {
                                                                                                    SubLObject module_var = rest.first();
                                                                                                    {
                                                                                                        SubLObject _prev_bind_0_199 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                                        SubLObject _prev_bind_1_200 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                        try {
                                                                                                            sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                            {
                                                                                                                SubLObject node = function_terms.naut_to_nart(tt_node_var);
                                                                                                                if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                                    {
                                                                                                                        SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                        if (NIL != d_link) {
                                                                                                                            {
                                                                                                                                SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                                if (NIL != mt_links) {
                                                                                                                                    {
                                                                                                                                        SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                                        while (!((NIL != GP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state)))) {
                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                            {
                                                                                                                                                SubLObject mt_201 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                                SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                                thread.resetMultipleValues();
                                                                                                                                                if (NIL != mt_relevance_macros.relevant_mtP(mt_201)) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject _prev_bind_0_202 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                        try {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.bind(mt_201, thread);
                                                                                                                                                            {
                                                                                                                                                                SubLObject iteration_state_203 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                                while (!((NIL != GP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state_203)))) {
                                                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject tv_204 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_203);
                                                                                                                                                                        SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_204)) {
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject _prev_bind_0_205 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                                try {
                                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv_204, thread);
                                                                                                                                                                                    {
                                                                                                                                                                                        SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                                        SubLObject rest_206 = NIL;
                                                                                                                                                                                        for (rest_206 = new_list; !((NIL != GP) || (NIL == rest_206)); rest_206 = rest_206.rest()) {
                                                                                                                                                                                            {
                                                                                                                                                                                                SubLObject ins = rest_206.first();
                                                                                                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                                                                    count = add(count, ONE_INTEGER);
                                                                                                                                                                                                    if (count.numG(num)) {
                                                                                                                                                                                                        GP = T;
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                } finally {
                                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_205, thread);
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        iteration_state_203 = dictionary_contents.do_dictionary_contents_next(iteration_state_203);
                                                                                                                                                                    }
                                                                                                                                                                } 
                                                                                                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state_203);
                                                                                                                                                            }
                                                                                                                                                        } finally {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_202, thread);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                            }
                                                                                                                                        } 
                                                                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        } else {
                                                                                                                            sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt38$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                        }
                                                                                                                    }
                                                                                                                    if (NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) {
                                                                                                                        if (NIL == GP) {
                                                                                                                            {
                                                                                                                                SubLObject csome_list_var = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                                                                                SubLObject instance_tuple = NIL;
                                                                                                                                for (instance_tuple = csome_list_var.first(); !((NIL != GP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , instance_tuple = csome_list_var.first()) {
                                                                                                                                    {
                                                                                                                                        SubLObject datum = instance_tuple;
                                                                                                                                        SubLObject current = datum;
                                                                                                                                        SubLObject link_node = NIL;
                                                                                                                                        SubLObject mt_207 = NIL;
                                                                                                                                        SubLObject tv_208 = NIL;
                                                                                                                                        destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                                        link_node = current.first();
                                                                                                                                        current = current.rest();
                                                                                                                                        destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                                        mt_207 = current.first();
                                                                                                                                        current = current.rest();
                                                                                                                                        destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                                        tv_208 = current.first();
                                                                                                                                        current = current.rest();
                                                                                                                                        if (NIL == current) {
                                                                                                                                            if (NIL != mt_relevance_macros.relevant_mtP(mt_207)) {
                                                                                                                                                {
                                                                                                                                                    SubLObject _prev_bind_0_209 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                    try {
                                                                                                                                                        sbhl_link_vars.$sbhl_link_mt$.bind(mt_207, thread);
                                                                                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_208)) {
                                                                                                                                                            {
                                                                                                                                                                SubLObject _prev_bind_0_210 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                try {
                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv_208, thread);
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject link_nodes = list(link_node);
                                                                                                                                                                        SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                        SubLObject rest_211 = NIL;
                                                                                                                                                                        for (rest_211 = new_list; !((NIL != GP) || (NIL == rest_211)); rest_211 = rest_211.rest()) {
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject ins = rest_211.first();
                                                                                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                                                    count = add(count, ONE_INTEGER);
                                                                                                                                                                                    if (count.numG(num)) {
                                                                                                                                                                                        GP = T;
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                } finally {
                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_210, thread);
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    } finally {
                                                                                                                                                        sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_209, thread);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } else {
                                                                                                                                            cdestructuring_bind_error(datum, $list_alt111);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                                        {
                                                                                                                            SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                            SubLObject rest_212 = NIL;
                                                                                                                            for (rest_212 = new_list; !((NIL != GP) || (NIL == rest_212)); rest_212 = rest_212.rest()) {
                                                                                                                                {
                                                                                                                                    SubLObject generating_fn = rest_212.first();
                                                                                                                                    {
                                                                                                                                        SubLObject _prev_bind_0_213 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                                        try {
                                                                                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                            {
                                                                                                                                                SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                                SubLObject new_list_214 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                SubLObject rest_215 = NIL;
                                                                                                                                                for (rest_215 = new_list_214; !((NIL != GP) || (NIL == rest_215)); rest_215 = rest_215.rest()) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject ins = rest_215.first();
                                                                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                            count = add(count, ONE_INTEGER);
                                                                                                                                                            if (count.numG(num)) {
                                                                                                                                                                GP = T;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } finally {
                                                                                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_213, thread);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        } finally {
                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_200, thread);
                                                                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_199, thread);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        {
                                                                                            SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)));
                                                                                            SubLObject rest = NIL;
                                                                                            for (rest = accessible_modules; !((NIL != GP) || (NIL == rest)); rest = rest.rest()) {
                                                                                                {
                                                                                                    SubLObject module_var = rest.first();
                                                                                                    {
                                                                                                        SubLObject _prev_bind_0_216 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                                        SubLObject _prev_bind_1_217 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                        try {
                                                                                                            sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                            {
                                                                                                                SubLObject node = function_terms.naut_to_nart(node_var_187);
                                                                                                                if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                                    {
                                                                                                                        SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                        if (NIL != d_link) {
                                                                                                                            {
                                                                                                                                SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                                if (NIL != mt_links) {
                                                                                                                                    {
                                                                                                                                        SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                                        while (!((NIL != GP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state)))) {
                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                            {
                                                                                                                                                SubLObject mt_218 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                                SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                                thread.resetMultipleValues();
                                                                                                                                                if (NIL != mt_relevance_macros.relevant_mtP(mt_218)) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject _prev_bind_0_219 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                        try {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.bind(mt_218, thread);
                                                                                                                                                            {
                                                                                                                                                                SubLObject iteration_state_220 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                                while (!((NIL != GP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state_220)))) {
                                                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject tv_221 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_220);
                                                                                                                                                                        SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_221)) {
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject _prev_bind_0_222 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                                try {
                                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv_221, thread);
                                                                                                                                                                                    {
                                                                                                                                                                                        SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                                        SubLObject rest_223 = NIL;
                                                                                                                                                                                        for (rest_223 = new_list; !((NIL != GP) || (NIL == rest_223)); rest_223 = rest_223.rest()) {
                                                                                                                                                                                            {
                                                                                                                                                                                                SubLObject node_vars_link_node = rest_223.first();
                                                                                                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
                                                                                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                                                                                                                    deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                } finally {
                                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_222, thread);
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        iteration_state_220 = dictionary_contents.do_dictionary_contents_next(iteration_state_220);
                                                                                                                                                                    }
                                                                                                                                                                } 
                                                                                                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state_220);
                                                                                                                                                            }
                                                                                                                                                        } finally {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_219, thread);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                            }
                                                                                                                                        } 
                                                                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        } else {
                                                                                                                            sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt38$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                        }
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                                        {
                                                                                                                            SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                            SubLObject rest_224 = NIL;
                                                                                                                            for (rest_224 = new_list; !((NIL != GP) || (NIL == rest_224)); rest_224 = rest_224.rest()) {
                                                                                                                                {
                                                                                                                                    SubLObject generating_fn = rest_224.first();
                                                                                                                                    {
                                                                                                                                        SubLObject _prev_bind_0_225 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                                        try {
                                                                                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                            {
                                                                                                                                                SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                                SubLObject new_list_226 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                SubLObject rest_227 = NIL;
                                                                                                                                                for (rest_227 = new_list_226; !((NIL != GP) || (NIL == rest_227)); rest_227 = rest_227.rest()) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject node_vars_link_node = rest_227.first();
                                                                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
                                                                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                                                                            deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } finally {
                                                                                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_225, thread);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        } finally {
                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_217, thread);
                                                                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_216, thread);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        node_var_187 = deck.deck_pop(recur_deck);
                                                                                    } 
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_198, thread);
                                                                                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_197, thread);
                                                                                    sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_196, thread);
                                                                                }
                                                                            }
                                                                        } else {
                                                                            sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt112$Node__a_does_not_pass_sbhl_type_t, node_var, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                        }
                                                                    } finally {
                                                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                                                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_195, thread);
                                                                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_194, thread);
                                                                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_193, thread);
                                                                    }
                                                                }
                                                            } finally {
                                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_192, thread);
                                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_191, thread);
                                                            }
                                                        }
                                                    }
                                                } finally {
                                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_190, thread);
                                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_189, thread);
                                                }
                                            }
                                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                        }
                                    } finally {
                                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_188, thread);
                                    }
                                }
                            }
                        }
                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                    } finally {
                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_1, thread);
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return GP;
            }
        }
    }

    /**
     *
     *
     * @return boolean; whether COLLECTION has more than NUM instances in MT with TV.
     */
    @LispMethod(comment = "@return boolean; whether COLLECTION has more than NUM instances in MT with TV.")
    public static SubLObject count_all_instances_G(final SubLObject collection, final SubLObject num, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject count = ZERO_INTEGER;
        SubLObject GP = NIL;
        final SubLObject _prev_bind_0 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
        try {
            sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$isa), thread);
            sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
            try {
                if (NIL == GP) {
                    SubLObject node_var_$171 = collection;
                    final SubLObject deck_type = $STACK;
                    final SubLObject recur_deck = deck.create_deck(deck_type);
                    final SubLObject _prev_bind_0_$172 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                    try {
                        sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        try {
                            final SubLObject mt_var = mt;
                            final SubLObject _prev_bind_0_$173 = mt_relevance_macros.$mt$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$174 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                            final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                            try {
                                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                final SubLObject tv_var = tv;
                                final SubLObject _prev_bind_0_$174 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$175 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                        if (pcase_var.eql($ERROR)) {
                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        } else
                                            if (pcase_var.eql($CERROR)) {
                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var.eql($WARN)) {
                                                    Errors.warn($str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                } else {
                                                    Errors.warn($str37$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                    Errors.cerror($$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                }


                                    }
                                    final SubLObject _prev_bind_0_$175 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                    final SubLObject _prev_bind_1_$176 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                    final SubLObject _prev_bind_2_$179 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                    final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                    final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
                                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
                                        if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(collection, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                            final SubLObject _prev_bind_0_$176 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                            final SubLObject _prev_bind_1_$177 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                            final SubLObject _prev_bind_2_$180 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_var_$171, UNPROVIDED);
                                                while ((NIL != node_var_$171) && (NIL == GP)) {
                                                    final SubLObject tt_node_var = node_var_$171;
                                                    final SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$isa));
                                                    SubLObject rest;
                                                    SubLObject module_var;
                                                    SubLObject _prev_bind_0_$177;
                                                    SubLObject _prev_bind_1_$178;
                                                    SubLObject node;
                                                    SubLObject d_link;
                                                    SubLObject mt_links;
                                                    SubLObject iteration_state;
                                                    SubLObject mt_$185;
                                                    SubLObject tv_links;
                                                    SubLObject _prev_bind_0_$178;
                                                    SubLObject iteration_state_$187;
                                                    SubLObject tv_$188;
                                                    SubLObject link_nodes;
                                                    SubLObject _prev_bind_0_$179;
                                                    SubLObject sol;
                                                    SubLObject set_contents_var;
                                                    SubLObject basis_object;
                                                    SubLObject state;
                                                    SubLObject ins;
                                                    SubLObject csome_list_var;
                                                    SubLObject ins2;
                                                    SubLObject csome_list_var2;
                                                    SubLObject instance_tuple;
                                                    SubLObject current;
                                                    SubLObject datum;
                                                    SubLObject link_node;
                                                    SubLObject mt_$186;
                                                    SubLObject tv_$189;
                                                    SubLObject _prev_bind_0_$180;
                                                    SubLObject _prev_bind_0_$181;
                                                    SubLObject link_nodes2;
                                                    SubLObject csome_list_var_$194;
                                                    SubLObject new_list;
                                                    SubLObject rest_$195;
                                                    SubLObject generating_fn;
                                                    SubLObject _prev_bind_0_$182;
                                                    SubLObject sol2;
                                                    SubLObject link_nodes3;
                                                    SubLObject set_contents_var2;
                                                    SubLObject basis_object2;
                                                    SubLObject state2;
                                                    SubLObject ins3;
                                                    SubLObject csome_list_var3;
                                                    SubLObject ins4;
                                                    for (rest = NIL, rest = accessible_modules; (NIL == GP) && (NIL != rest); rest = rest.rest()) {
                                                        module_var = rest.first();
                                                        _prev_bind_0_$177 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                        _prev_bind_1_$178 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                        try {
                                                            sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                            node = function_terms.naut_to_nart(tt_node_var);
                                                            if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                if (NIL != d_link) {
                                                                    mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                    if (NIL != mt_links) {
                                                                        for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); (NIL == GP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                                                            thread.resetMultipleValues();
                                                                            mt_$185 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                            tv_links = thread.secondMultipleValue();
                                                                            thread.resetMultipleValues();
                                                                            if (NIL != mt_relevance_macros.relevant_mtP(mt_$185)) {
                                                                                _prev_bind_0_$178 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_$185, thread);
                                                                                    for (iteration_state_$187 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); (NIL == GP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$187)); iteration_state_$187 = dictionary_contents.do_dictionary_contents_next(iteration_state_$187)) {
                                                                                        thread.resetMultipleValues();
                                                                                        tv_$188 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$187);
                                                                                        link_nodes = thread.secondMultipleValue();
                                                                                        thread.resetMultipleValues();
                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$188)) {
                                                                                            _prev_bind_0_$179 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.bind(tv_$188, thread);
                                                                                                sol = link_nodes;
                                                                                                if (NIL != set.set_p(sol)) {
                                                                                                    set_contents_var = set.do_set_internal(sol);
                                                                                                    for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == GP) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                        ins = set_contents.do_set_contents_next(basis_object, state);
                                                                                                        if ((NIL != set_contents.do_set_contents_element_validP(state, ins)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                            count = add(count, ONE_INTEGER);
                                                                                                            if (count.numG(num)) {
                                                                                                                GP = T;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } else
                                                                                                    if (sol.isList()) {
                                                                                                        if (NIL == GP) {
                                                                                                            csome_list_var = sol;
                                                                                                            ins2 = NIL;
                                                                                                            ins2 = csome_list_var.first();
                                                                                                            while ((NIL == GP) && (NIL != csome_list_var)) {
                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                    count = add(count, ONE_INTEGER);
                                                                                                                    if (count.numG(num)) {
                                                                                                                        GP = T;
                                                                                                                    }
                                                                                                                }
                                                                                                                csome_list_var = csome_list_var.rest();
                                                                                                                ins2 = csome_list_var.first();
                                                                                                            } 
                                                                                                        }
                                                                                                    } else {
                                                                                                        Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                    }

                                                                                            } finally {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$179, thread);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state_$187);
                                                                                } finally {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$178, thread);
                                                                                }
                                                                            }
                                                                        }
                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                    }
                                                                } else {
                                                                    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str40$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                }
                                                                if ((NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) && (NIL == GP)) {
                                                                    csome_list_var2 = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                    instance_tuple = NIL;
                                                                    instance_tuple = csome_list_var2.first();
                                                                    while ((NIL == GP) && (NIL != csome_list_var2)) {
                                                                        datum = current = instance_tuple;
                                                                        link_node = NIL;
                                                                        mt_$186 = NIL;
                                                                        tv_$189 = NIL;
                                                                        destructuring_bind_must_consp(current, datum, $list116);
                                                                        link_node = current.first();
                                                                        current = current.rest();
                                                                        destructuring_bind_must_consp(current, datum, $list116);
                                                                        mt_$186 = current.first();
                                                                        current = current.rest();
                                                                        destructuring_bind_must_consp(current, datum, $list116);
                                                                        tv_$189 = current.first();
                                                                        current = current.rest();
                                                                        if (NIL == current) {
                                                                            if (NIL != mt_relevance_macros.relevant_mtP(mt_$186)) {
                                                                                _prev_bind_0_$180 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_$186, thread);
                                                                                    if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$189)) {
                                                                                        _prev_bind_0_$181 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv_$189, thread);
                                                                                            link_nodes2 = sol = list(link_node);
                                                                                            if (NIL != set.set_p(sol)) {
                                                                                                set_contents_var = set.do_set_internal(sol);
                                                                                                for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == GP) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                    ins = set_contents.do_set_contents_next(basis_object, state);
                                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state, ins)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                        count = add(count, ONE_INTEGER);
                                                                                                        if (count.numG(num)) {
                                                                                                            GP = T;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } else
                                                                                                if (sol.isList()) {
                                                                                                    if (NIL == GP) {
                                                                                                        csome_list_var_$194 = sol;
                                                                                                        ins2 = NIL;
                                                                                                        ins2 = csome_list_var_$194.first();
                                                                                                        while ((NIL == GP) && (NIL != csome_list_var_$194)) {
                                                                                                            if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                count = add(count, ONE_INTEGER);
                                                                                                                if (count.numG(num)) {
                                                                                                                    GP = T;
                                                                                                                }
                                                                                                            }
                                                                                                            csome_list_var_$194 = csome_list_var_$194.rest();
                                                                                                            ins2 = csome_list_var_$194.first();
                                                                                                        } 
                                                                                                    }
                                                                                                } else {
                                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                }

                                                                                        } finally {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$181, thread);
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$180, thread);
                                                                                }
                                                                            }
                                                                        } else {
                                                                            cdestructuring_bind_error(datum, $list116);
                                                                        }
                                                                        csome_list_var2 = csome_list_var2.rest();
                                                                        instance_tuple = csome_list_var2.first();
                                                                    } 
                                                                }
                                                            } else
                                                                if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                    new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                    for (rest_$195 = NIL, rest_$195 = new_list; (NIL == GP) && (NIL != rest_$195); rest_$195 = rest_$195.rest()) {
                                                                        generating_fn = rest_$195.first();
                                                                        _prev_bind_0_$182 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                            link_nodes3 = sol2 = funcall(generating_fn, node);
                                                                            if (NIL != set.set_p(sol2)) {
                                                                                set_contents_var2 = set.do_set_internal(sol2);
                                                                                for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); (NIL == GP) && (NIL == set_contents.do_set_contents_doneP(basis_object2, state2)); state2 = set_contents.do_set_contents_update_state(state2)) {
                                                                                    ins3 = set_contents.do_set_contents_next(basis_object2, state2);
                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state2, ins3)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                        count = add(count, ONE_INTEGER);
                                                                                        if (count.numG(num)) {
                                                                                            GP = T;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } else
                                                                                if (sol2.isList()) {
                                                                                    if (NIL == GP) {
                                                                                        csome_list_var3 = sol2;
                                                                                        ins4 = NIL;
                                                                                        ins4 = csome_list_var3.first();
                                                                                        while ((NIL == GP) && (NIL != csome_list_var3)) {
                                                                                            if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(ins4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                count = add(count, ONE_INTEGER);
                                                                                                if (count.numG(num)) {
                                                                                                    GP = T;
                                                                                                }
                                                                                            }
                                                                                            csome_list_var3 = csome_list_var3.rest();
                                                                                            ins4 = csome_list_var3.first();
                                                                                        } 
                                                                                    }
                                                                                } else {
                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                                                }

                                                                        } finally {
                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$182, thread);
                                                                        }
                                                                    }
                                                                }

                                                        } finally {
                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$178, thread);
                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$177, thread);
                                                        }
                                                    }
                                                    final SubLObject accessible_modules2 = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)));
                                                    SubLObject rest2;
                                                    SubLObject module_var2;
                                                    SubLObject _prev_bind_0_$183;
                                                    SubLObject _prev_bind_1_$179;
                                                    SubLObject node2;
                                                    SubLObject d_link2;
                                                    SubLObject mt_links2;
                                                    SubLObject iteration_state2;
                                                    SubLObject mt_$187;
                                                    SubLObject tv_links2;
                                                    SubLObject _prev_bind_0_$184;
                                                    SubLObject iteration_state_$188;
                                                    SubLObject tv_$190;
                                                    SubLObject link_nodes4;
                                                    SubLObject _prev_bind_0_$185;
                                                    SubLObject sol3;
                                                    SubLObject set_contents_var3;
                                                    SubLObject basis_object3;
                                                    SubLObject state3;
                                                    SubLObject node_vars_link_node;
                                                    SubLObject csome_list_var4;
                                                    SubLObject node_vars_link_node2;
                                                    SubLObject new_list2;
                                                    SubLObject rest_$196;
                                                    SubLObject generating_fn2;
                                                    SubLObject _prev_bind_0_$186;
                                                    SubLObject sol4;
                                                    SubLObject link_nodes5;
                                                    SubLObject set_contents_var4;
                                                    SubLObject basis_object4;
                                                    SubLObject state4;
                                                    SubLObject node_vars_link_node3;
                                                    SubLObject csome_list_var5;
                                                    SubLObject node_vars_link_node4;
                                                    for (rest2 = NIL, rest2 = accessible_modules2; (NIL == GP) && (NIL != rest2); rest2 = rest2.rest()) {
                                                        module_var2 = rest2.first();
                                                        _prev_bind_0_$183 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                        _prev_bind_1_$179 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                        try {
                                                            sbhl_module_vars.$sbhl_module$.bind(module_var2, thread);
                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                            node2 = function_terms.naut_to_nart(node_var_$171);
                                                            if (NIL != sbhl_link_vars.sbhl_node_object_p(node2)) {
                                                                d_link2 = sbhl_graphs.get_sbhl_graph_link(node2, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                if (NIL != d_link2) {
                                                                    mt_links2 = sbhl_links.get_sbhl_mt_links(d_link2, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                    if (NIL != mt_links2) {
                                                                        for (iteration_state2 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links2)); (NIL == GP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state2)); iteration_state2 = dictionary_contents.do_dictionary_contents_next(iteration_state2)) {
                                                                            thread.resetMultipleValues();
                                                                            mt_$187 = dictionary_contents.do_dictionary_contents_key_value(iteration_state2);
                                                                            tv_links2 = thread.secondMultipleValue();
                                                                            thread.resetMultipleValues();
                                                                            if (NIL != mt_relevance_macros.relevant_mtP(mt_$187)) {
                                                                                _prev_bind_0_$184 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_$187, thread);
                                                                                    for (iteration_state_$188 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links2)); (NIL == GP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$188)); iteration_state_$188 = dictionary_contents.do_dictionary_contents_next(iteration_state_$188)) {
                                                                                        thread.resetMultipleValues();
                                                                                        tv_$190 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$188);
                                                                                        link_nodes4 = thread.secondMultipleValue();
                                                                                        thread.resetMultipleValues();
                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$190)) {
                                                                                            _prev_bind_0_$185 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.bind(tv_$190, thread);
                                                                                                sol3 = link_nodes4;
                                                                                                if (NIL != set.set_p(sol3)) {
                                                                                                    set_contents_var3 = set.do_set_internal(sol3);
                                                                                                    for (basis_object3 = set_contents.do_set_contents_basis_object(set_contents_var3), state3 = NIL, state3 = set_contents.do_set_contents_initial_state(basis_object3, set_contents_var3); (NIL == GP) && (NIL == set_contents.do_set_contents_doneP(basis_object3, state3)); state3 = set_contents.do_set_contents_update_state(state3)) {
                                                                                                        node_vars_link_node = set_contents.do_set_contents_next(basis_object3, state3);
                                                                                                        if ((NIL != set_contents.do_set_contents_element_validP(state3, node_vars_link_node)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED))) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                            deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                        }
                                                                                                    }
                                                                                                } else
                                                                                                    if (sol3.isList()) {
                                                                                                        if (NIL == GP) {
                                                                                                            csome_list_var4 = sol3;
                                                                                                            node_vars_link_node2 = NIL;
                                                                                                            node_vars_link_node2 = csome_list_var4.first();
                                                                                                            while ((NIL == GP) && (NIL != csome_list_var4)) {
                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node2, UNPROVIDED)) {
                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node2, UNPROVIDED);
                                                                                                                    deck.deck_push(node_vars_link_node2, recur_deck);
                                                                                                                }
                                                                                                                csome_list_var4 = csome_list_var4.rest();
                                                                                                                node_vars_link_node2 = csome_list_var4.first();
                                                                                                            } 
                                                                                                        }
                                                                                                    } else {
                                                                                                        Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol3);
                                                                                                    }

                                                                                            } finally {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$185, thread);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state_$188);
                                                                                } finally {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$184, thread);
                                                                                }
                                                                            }
                                                                        }
                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state2);
                                                                    }
                                                                } else {
                                                                    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str40$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                }
                                                            } else
                                                                if (NIL != obsolete.cnat_p(node2, UNPROVIDED)) {
                                                                    new_list2 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                    for (rest_$196 = NIL, rest_$196 = new_list2; (NIL == GP) && (NIL != rest_$196); rest_$196 = rest_$196.rest()) {
                                                                        generating_fn2 = rest_$196.first();
                                                                        _prev_bind_0_$186 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn2, thread);
                                                                            link_nodes5 = sol4 = funcall(generating_fn2, node2);
                                                                            if (NIL != set.set_p(sol4)) {
                                                                                set_contents_var4 = set.do_set_internal(sol4);
                                                                                for (basis_object4 = set_contents.do_set_contents_basis_object(set_contents_var4), state4 = NIL, state4 = set_contents.do_set_contents_initial_state(basis_object4, set_contents_var4); (NIL == GP) && (NIL == set_contents.do_set_contents_doneP(basis_object4, state4)); state4 = set_contents.do_set_contents_update_state(state4)) {
                                                                                    node_vars_link_node3 = set_contents.do_set_contents_next(basis_object4, state4);
                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state4, node_vars_link_node3)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node3, UNPROVIDED))) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node3, UNPROVIDED);
                                                                                        deck.deck_push(node_vars_link_node3, recur_deck);
                                                                                    }
                                                                                }
                                                                            } else
                                                                                if (sol4.isList()) {
                                                                                    if (NIL == GP) {
                                                                                        csome_list_var5 = sol4;
                                                                                        node_vars_link_node4 = NIL;
                                                                                        node_vars_link_node4 = csome_list_var5.first();
                                                                                        while ((NIL == GP) && (NIL != csome_list_var5)) {
                                                                                            if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node4, UNPROVIDED)) {
                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node4, UNPROVIDED);
                                                                                                deck.deck_push(node_vars_link_node4, recur_deck);
                                                                                            }
                                                                                            csome_list_var5 = csome_list_var5.rest();
                                                                                            node_vars_link_node4 = csome_list_var5.first();
                                                                                        } 
                                                                                    }
                                                                                } else {
                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol4);
                                                                                }

                                                                        } finally {
                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$186, thread);
                                                                        }
                                                                    }
                                                                }

                                                        } finally {
                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$179, thread);
                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$183, thread);
                                                        }
                                                    }
                                                    node_var_$171 = deck.deck_pop(recur_deck);
                                                } 
                                            } finally {
                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_$180, thread);
                                                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_$177, thread);
                                                sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_$176, thread);
                                            }
                                        } else {
                                            sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str117$Node__a_does_not_pass_sbhl_type_t, collection, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        }
                                    } finally {
                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_$179, thread);
                                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_$176, thread);
                                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$175, thread);
                                    }
                                } finally {
                                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$175, thread);
                                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$174, thread);
                                }
                            } finally {
                                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$174, thread);
                                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$173, thread);
                            }
                        } finally {
                            final SubLObject _prev_bind_0_$187 = $is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                $is_thread_performing_cleanupP$.bind(T, thread);
                                final SubLObject _values = getValuesAsVector();
                                sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                restoreValuesFromVector(_values);
                            } finally {
                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$187, thread);
                            }
                        }
                    } finally {
                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$172, thread);
                    }
                }
            } finally {
                final SubLObject _prev_bind_0_$188 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values2 = getValuesAsVector();
                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                    restoreValuesFromVector(_values2);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$188, thread);
                }
            }
        } finally {
            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_2, thread);
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0, thread);
        }
        return GP;
    }

    /**
     *
     *
     * @return boolean; whether COLLECTION has more than or exactly NUM instances in MT with TV.
     */
    @LispMethod(comment = "@return boolean; whether COLLECTION has more than or exactly NUM instances in MT with TV.")
    public static final SubLObject count_all_instances_GE_alt(SubLObject collection, SubLObject num, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject count = ZERO_INTEGER;
                SubLObject GEP = NIL;
                SubLObject node_var = collection;
                {
                    SubLObject _prev_bind_0 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                    try {
                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$isa), thread);
                        sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        if (NIL == GEP) {
                            {
                                SubLObject node_var_228 = node_var;
                                SubLObject deck_type = (false) ? ((SubLObject) ($QUEUE)) : $STACK;
                                SubLObject recur_deck = deck.create_deck(deck_type);
                                {
                                    SubLObject _prev_bind_0_229 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                    try {
                                        sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                        {
                                            SubLObject mt_var = mt;
                                            {
                                                SubLObject _prev_bind_0_230 = mt_relevance_macros.$mt$.currentBinding(thread);
                                                SubLObject _prev_bind_1_231 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                                SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                                try {
                                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                                    {
                                                        SubLObject tv_var = tv;
                                                        {
                                                            SubLObject _prev_bind_0_232 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                                            SubLObject _prev_bind_1_233 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                                            try {
                                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                                if (NIL != tv_var) {
                                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                                            {
                                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                if (pcase_var.eql($ERROR)) {
                                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                } else {
                                                                                    if (pcase_var.eql($CERROR)) {
                                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                    } else {
                                                                                        if (pcase_var.eql($WARN)) {
                                                                                            Errors.warn($str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                        } else {
                                                                                            Errors.warn($str_alt36$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                            Errors.cerror($$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                {
                                                                    SubLObject _prev_bind_0_234 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                                                    SubLObject _prev_bind_1_235 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                                                    SubLObject _prev_bind_2_236 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
                                                                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
                                                                        if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node_var, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                            {
                                                                                SubLObject _prev_bind_0_237 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_238 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_239 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                                                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_var_228, UNPROVIDED);
                                                                                    while ((NIL != node_var_228) && (NIL == GEP)) {
                                                                                        {
                                                                                            SubLObject tt_node_var = node_var_228;
                                                                                            SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$isa));
                                                                                            SubLObject rest = NIL;
                                                                                            for (rest = accessible_modules; !((NIL != GEP) || (NIL == rest)); rest = rest.rest()) {
                                                                                                {
                                                                                                    SubLObject module_var = rest.first();
                                                                                                    {
                                                                                                        SubLObject _prev_bind_0_240 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                                        SubLObject _prev_bind_1_241 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                        try {
                                                                                                            sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                            {
                                                                                                                SubLObject node = function_terms.naut_to_nart(tt_node_var);
                                                                                                                if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                                    {
                                                                                                                        SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                        if (NIL != d_link) {
                                                                                                                            {
                                                                                                                                SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                                if (NIL != mt_links) {
                                                                                                                                    {
                                                                                                                                        SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                                        while (!((NIL != GEP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state)))) {
                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                            {
                                                                                                                                                SubLObject mt_242 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                                SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                                thread.resetMultipleValues();
                                                                                                                                                if (NIL != mt_relevance_macros.relevant_mtP(mt_242)) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject _prev_bind_0_243 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                        try {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.bind(mt_242, thread);
                                                                                                                                                            {
                                                                                                                                                                SubLObject iteration_state_244 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                                while (!((NIL != GEP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state_244)))) {
                                                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject tv_245 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_244);
                                                                                                                                                                        SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_245)) {
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject _prev_bind_0_246 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                                try {
                                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv_245, thread);
                                                                                                                                                                                    {
                                                                                                                                                                                        SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                                        SubLObject rest_247 = NIL;
                                                                                                                                                                                        for (rest_247 = new_list; !((NIL != GEP) || (NIL == rest_247)); rest_247 = rest_247.rest()) {
                                                                                                                                                                                            {
                                                                                                                                                                                                SubLObject ins = rest_247.first();
                                                                                                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                                                                    count = add(count, ONE_INTEGER);
                                                                                                                                                                                                    if (count.numGE(num)) {
                                                                                                                                                                                                        GEP = T;
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                } finally {
                                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_246, thread);
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        iteration_state_244 = dictionary_contents.do_dictionary_contents_next(iteration_state_244);
                                                                                                                                                                    }
                                                                                                                                                                } 
                                                                                                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state_244);
                                                                                                                                                            }
                                                                                                                                                        } finally {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_243, thread);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                            }
                                                                                                                                        } 
                                                                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        } else {
                                                                                                                            sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt38$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                        }
                                                                                                                    }
                                                                                                                    if (NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) {
                                                                                                                        if (NIL == GEP) {
                                                                                                                            {
                                                                                                                                SubLObject csome_list_var = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                                                                                SubLObject instance_tuple = NIL;
                                                                                                                                for (instance_tuple = csome_list_var.first(); !((NIL != GEP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , instance_tuple = csome_list_var.first()) {
                                                                                                                                    {
                                                                                                                                        SubLObject datum = instance_tuple;
                                                                                                                                        SubLObject current = datum;
                                                                                                                                        SubLObject link_node = NIL;
                                                                                                                                        SubLObject mt_248 = NIL;
                                                                                                                                        SubLObject tv_249 = NIL;
                                                                                                                                        destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                                        link_node = current.first();
                                                                                                                                        current = current.rest();
                                                                                                                                        destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                                        mt_248 = current.first();
                                                                                                                                        current = current.rest();
                                                                                                                                        destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                                        tv_249 = current.first();
                                                                                                                                        current = current.rest();
                                                                                                                                        if (NIL == current) {
                                                                                                                                            if (NIL != mt_relevance_macros.relevant_mtP(mt_248)) {
                                                                                                                                                {
                                                                                                                                                    SubLObject _prev_bind_0_250 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                    try {
                                                                                                                                                        sbhl_link_vars.$sbhl_link_mt$.bind(mt_248, thread);
                                                                                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_249)) {
                                                                                                                                                            {
                                                                                                                                                                SubLObject _prev_bind_0_251 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                try {
                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv_249, thread);
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject link_nodes = list(link_node);
                                                                                                                                                                        SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                        SubLObject rest_252 = NIL;
                                                                                                                                                                        for (rest_252 = new_list; !((NIL != GEP) || (NIL == rest_252)); rest_252 = rest_252.rest()) {
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject ins = rest_252.first();
                                                                                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                                                    count = add(count, ONE_INTEGER);
                                                                                                                                                                                    if (count.numGE(num)) {
                                                                                                                                                                                        GEP = T;
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                } finally {
                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_251, thread);
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    } finally {
                                                                                                                                                        sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_250, thread);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } else {
                                                                                                                                            cdestructuring_bind_error(datum, $list_alt111);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                                        {
                                                                                                                            SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                            SubLObject rest_253 = NIL;
                                                                                                                            for (rest_253 = new_list; !((NIL != GEP) || (NIL == rest_253)); rest_253 = rest_253.rest()) {
                                                                                                                                {
                                                                                                                                    SubLObject generating_fn = rest_253.first();
                                                                                                                                    {
                                                                                                                                        SubLObject _prev_bind_0_254 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                                        try {
                                                                                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                            {
                                                                                                                                                SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                                SubLObject new_list_255 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                SubLObject rest_256 = NIL;
                                                                                                                                                for (rest_256 = new_list_255; !((NIL != GEP) || (NIL == rest_256)); rest_256 = rest_256.rest()) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject ins = rest_256.first();
                                                                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                            count = add(count, ONE_INTEGER);
                                                                                                                                                            if (count.numGE(num)) {
                                                                                                                                                                GEP = T;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } finally {
                                                                                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_254, thread);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        } finally {
                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_241, thread);
                                                                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_240, thread);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        {
                                                                                            SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)));
                                                                                            SubLObject rest = NIL;
                                                                                            for (rest = accessible_modules; !((NIL != GEP) || (NIL == rest)); rest = rest.rest()) {
                                                                                                {
                                                                                                    SubLObject module_var = rest.first();
                                                                                                    {
                                                                                                        SubLObject _prev_bind_0_257 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                                        SubLObject _prev_bind_1_258 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                        try {
                                                                                                            sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                            {
                                                                                                                SubLObject node = function_terms.naut_to_nart(node_var_228);
                                                                                                                if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                                    {
                                                                                                                        SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                        if (NIL != d_link) {
                                                                                                                            {
                                                                                                                                SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                                if (NIL != mt_links) {
                                                                                                                                    {
                                                                                                                                        SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                                        while (!((NIL != GEP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state)))) {
                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                            {
                                                                                                                                                SubLObject mt_259 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                                SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                                thread.resetMultipleValues();
                                                                                                                                                if (NIL != mt_relevance_macros.relevant_mtP(mt_259)) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject _prev_bind_0_260 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                        try {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.bind(mt_259, thread);
                                                                                                                                                            {
                                                                                                                                                                SubLObject iteration_state_261 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                                while (!((NIL != GEP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state_261)))) {
                                                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject tv_262 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_261);
                                                                                                                                                                        SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_262)) {
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject _prev_bind_0_263 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                                try {
                                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv_262, thread);
                                                                                                                                                                                    {
                                                                                                                                                                                        SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                                        SubLObject rest_264 = NIL;
                                                                                                                                                                                        for (rest_264 = new_list; !((NIL != GEP) || (NIL == rest_264)); rest_264 = rest_264.rest()) {
                                                                                                                                                                                            {
                                                                                                                                                                                                SubLObject node_vars_link_node = rest_264.first();
                                                                                                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
                                                                                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                                                                                                                    deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                } finally {
                                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_263, thread);
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        iteration_state_261 = dictionary_contents.do_dictionary_contents_next(iteration_state_261);
                                                                                                                                                                    }
                                                                                                                                                                } 
                                                                                                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state_261);
                                                                                                                                                            }
                                                                                                                                                        } finally {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_260, thread);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                            }
                                                                                                                                        } 
                                                                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        } else {
                                                                                                                            sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt38$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                        }
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                                        {
                                                                                                                            SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                            SubLObject rest_265 = NIL;
                                                                                                                            for (rest_265 = new_list; !((NIL != GEP) || (NIL == rest_265)); rest_265 = rest_265.rest()) {
                                                                                                                                {
                                                                                                                                    SubLObject generating_fn = rest_265.first();
                                                                                                                                    {
                                                                                                                                        SubLObject _prev_bind_0_266 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                                        try {
                                                                                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                            {
                                                                                                                                                SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                                SubLObject new_list_267 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                SubLObject rest_268 = NIL;
                                                                                                                                                for (rest_268 = new_list_267; !((NIL != GEP) || (NIL == rest_268)); rest_268 = rest_268.rest()) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject node_vars_link_node = rest_268.first();
                                                                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
                                                                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                                                                            deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } finally {
                                                                                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_266, thread);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        } finally {
                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_258, thread);
                                                                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_257, thread);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        node_var_228 = deck.deck_pop(recur_deck);
                                                                                    } 
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_239, thread);
                                                                                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_238, thread);
                                                                                    sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_237, thread);
                                                                                }
                                                                            }
                                                                        } else {
                                                                            sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt112$Node__a_does_not_pass_sbhl_type_t, node_var, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                        }
                                                                    } finally {
                                                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                                                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_236, thread);
                                                                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_235, thread);
                                                                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_234, thread);
                                                                    }
                                                                }
                                                            } finally {
                                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_233, thread);
                                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_232, thread);
                                                            }
                                                        }
                                                    }
                                                } finally {
                                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_231, thread);
                                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_230, thread);
                                                }
                                            }
                                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                        }
                                    } finally {
                                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_229, thread);
                                    }
                                }
                            }
                        }
                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                    } finally {
                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_1, thread);
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return GEP;
            }
        }
    }

    /**
     *
     *
     * @return boolean; whether COLLECTION has more than or exactly NUM instances in MT with TV.
     */
    @LispMethod(comment = "@return boolean; whether COLLECTION has more than or exactly NUM instances in MT with TV.")
    public static SubLObject count_all_instances_GE(final SubLObject collection, final SubLObject num, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject count = ZERO_INTEGER;
        SubLObject GEP = NIL;
        final SubLObject _prev_bind_0 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
        try {
            sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$isa), thread);
            sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
            try {
                if (NIL == GEP) {
                    SubLObject node_var_$208 = collection;
                    final SubLObject deck_type = $STACK;
                    final SubLObject recur_deck = deck.create_deck(deck_type);
                    final SubLObject _prev_bind_0_$209 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                    try {
                        sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        try {
                            final SubLObject mt_var = mt;
                            final SubLObject _prev_bind_0_$210 = mt_relevance_macros.$mt$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$211 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                            final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                            try {
                                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                final SubLObject tv_var = tv;
                                final SubLObject _prev_bind_0_$211 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$212 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                        if (pcase_var.eql($ERROR)) {
                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        } else
                                            if (pcase_var.eql($CERROR)) {
                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var.eql($WARN)) {
                                                    Errors.warn($str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                } else {
                                                    Errors.warn($str37$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                    Errors.cerror($$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                }


                                    }
                                    final SubLObject _prev_bind_0_$212 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                    final SubLObject _prev_bind_1_$213 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                    final SubLObject _prev_bind_2_$216 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                    final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                    final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
                                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
                                        if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(collection, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                            final SubLObject _prev_bind_0_$213 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                            final SubLObject _prev_bind_1_$214 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                            final SubLObject _prev_bind_2_$217 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_var_$208, UNPROVIDED);
                                                while ((NIL != node_var_$208) && (NIL == GEP)) {
                                                    final SubLObject tt_node_var = node_var_$208;
                                                    final SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$isa));
                                                    SubLObject rest;
                                                    SubLObject module_var;
                                                    SubLObject _prev_bind_0_$214;
                                                    SubLObject _prev_bind_1_$215;
                                                    SubLObject node;
                                                    SubLObject d_link;
                                                    SubLObject mt_links;
                                                    SubLObject iteration_state;
                                                    SubLObject mt_$222;
                                                    SubLObject tv_links;
                                                    SubLObject _prev_bind_0_$215;
                                                    SubLObject iteration_state_$224;
                                                    SubLObject tv_$225;
                                                    SubLObject link_nodes;
                                                    SubLObject _prev_bind_0_$216;
                                                    SubLObject sol;
                                                    SubLObject set_contents_var;
                                                    SubLObject basis_object;
                                                    SubLObject state;
                                                    SubLObject ins;
                                                    SubLObject csome_list_var;
                                                    SubLObject ins2;
                                                    SubLObject csome_list_var2;
                                                    SubLObject instance_tuple;
                                                    SubLObject current;
                                                    SubLObject datum;
                                                    SubLObject link_node;
                                                    SubLObject mt_$223;
                                                    SubLObject tv_$226;
                                                    SubLObject _prev_bind_0_$217;
                                                    SubLObject _prev_bind_0_$218;
                                                    SubLObject link_nodes2;
                                                    SubLObject csome_list_var_$231;
                                                    SubLObject new_list;
                                                    SubLObject rest_$232;
                                                    SubLObject generating_fn;
                                                    SubLObject _prev_bind_0_$219;
                                                    SubLObject sol2;
                                                    SubLObject link_nodes3;
                                                    SubLObject set_contents_var2;
                                                    SubLObject basis_object2;
                                                    SubLObject state2;
                                                    SubLObject ins3;
                                                    SubLObject csome_list_var3;
                                                    SubLObject ins4;
                                                    for (rest = NIL, rest = accessible_modules; (NIL == GEP) && (NIL != rest); rest = rest.rest()) {
                                                        module_var = rest.first();
                                                        _prev_bind_0_$214 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                        _prev_bind_1_$215 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                        try {
                                                            sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                            node = function_terms.naut_to_nart(tt_node_var);
                                                            if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                if (NIL != d_link) {
                                                                    mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                    if (NIL != mt_links) {
                                                                        for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); (NIL == GEP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                                                            thread.resetMultipleValues();
                                                                            mt_$222 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                            tv_links = thread.secondMultipleValue();
                                                                            thread.resetMultipleValues();
                                                                            if (NIL != mt_relevance_macros.relevant_mtP(mt_$222)) {
                                                                                _prev_bind_0_$215 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_$222, thread);
                                                                                    for (iteration_state_$224 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); (NIL == GEP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$224)); iteration_state_$224 = dictionary_contents.do_dictionary_contents_next(iteration_state_$224)) {
                                                                                        thread.resetMultipleValues();
                                                                                        tv_$225 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$224);
                                                                                        link_nodes = thread.secondMultipleValue();
                                                                                        thread.resetMultipleValues();
                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$225)) {
                                                                                            _prev_bind_0_$216 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.bind(tv_$225, thread);
                                                                                                sol = link_nodes;
                                                                                                if (NIL != set.set_p(sol)) {
                                                                                                    set_contents_var = set.do_set_internal(sol);
                                                                                                    for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == GEP) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                        ins = set_contents.do_set_contents_next(basis_object, state);
                                                                                                        if ((NIL != set_contents.do_set_contents_element_validP(state, ins)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                            count = add(count, ONE_INTEGER);
                                                                                                            if (count.numGE(num)) {
                                                                                                                GEP = T;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } else
                                                                                                    if (sol.isList()) {
                                                                                                        if (NIL == GEP) {
                                                                                                            csome_list_var = sol;
                                                                                                            ins2 = NIL;
                                                                                                            ins2 = csome_list_var.first();
                                                                                                            while ((NIL == GEP) && (NIL != csome_list_var)) {
                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                    count = add(count, ONE_INTEGER);
                                                                                                                    if (count.numGE(num)) {
                                                                                                                        GEP = T;
                                                                                                                    }
                                                                                                                }
                                                                                                                csome_list_var = csome_list_var.rest();
                                                                                                                ins2 = csome_list_var.first();
                                                                                                            } 
                                                                                                        }
                                                                                                    } else {
                                                                                                        Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                    }

                                                                                            } finally {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$216, thread);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state_$224);
                                                                                } finally {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$215, thread);
                                                                                }
                                                                            }
                                                                        }
                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                    }
                                                                } else {
                                                                    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str40$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                }
                                                                if ((NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) && (NIL == GEP)) {
                                                                    csome_list_var2 = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                    instance_tuple = NIL;
                                                                    instance_tuple = csome_list_var2.first();
                                                                    while ((NIL == GEP) && (NIL != csome_list_var2)) {
                                                                        datum = current = instance_tuple;
                                                                        link_node = NIL;
                                                                        mt_$223 = NIL;
                                                                        tv_$226 = NIL;
                                                                        destructuring_bind_must_consp(current, datum, $list116);
                                                                        link_node = current.first();
                                                                        current = current.rest();
                                                                        destructuring_bind_must_consp(current, datum, $list116);
                                                                        mt_$223 = current.first();
                                                                        current = current.rest();
                                                                        destructuring_bind_must_consp(current, datum, $list116);
                                                                        tv_$226 = current.first();
                                                                        current = current.rest();
                                                                        if (NIL == current) {
                                                                            if (NIL != mt_relevance_macros.relevant_mtP(mt_$223)) {
                                                                                _prev_bind_0_$217 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_$223, thread);
                                                                                    if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$226)) {
                                                                                        _prev_bind_0_$218 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv_$226, thread);
                                                                                            link_nodes2 = sol = list(link_node);
                                                                                            if (NIL != set.set_p(sol)) {
                                                                                                set_contents_var = set.do_set_internal(sol);
                                                                                                for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == GEP) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                    ins = set_contents.do_set_contents_next(basis_object, state);
                                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state, ins)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                        count = add(count, ONE_INTEGER);
                                                                                                        if (count.numGE(num)) {
                                                                                                            GEP = T;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } else
                                                                                                if (sol.isList()) {
                                                                                                    if (NIL == GEP) {
                                                                                                        csome_list_var_$231 = sol;
                                                                                                        ins2 = NIL;
                                                                                                        ins2 = csome_list_var_$231.first();
                                                                                                        while ((NIL == GEP) && (NIL != csome_list_var_$231)) {
                                                                                                            if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                count = add(count, ONE_INTEGER);
                                                                                                                if (count.numGE(num)) {
                                                                                                                    GEP = T;
                                                                                                                }
                                                                                                            }
                                                                                                            csome_list_var_$231 = csome_list_var_$231.rest();
                                                                                                            ins2 = csome_list_var_$231.first();
                                                                                                        } 
                                                                                                    }
                                                                                                } else {
                                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                }

                                                                                        } finally {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$218, thread);
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$217, thread);
                                                                                }
                                                                            }
                                                                        } else {
                                                                            cdestructuring_bind_error(datum, $list116);
                                                                        }
                                                                        csome_list_var2 = csome_list_var2.rest();
                                                                        instance_tuple = csome_list_var2.first();
                                                                    } 
                                                                }
                                                            } else
                                                                if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                    new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                    for (rest_$232 = NIL, rest_$232 = new_list; (NIL == GEP) && (NIL != rest_$232); rest_$232 = rest_$232.rest()) {
                                                                        generating_fn = rest_$232.first();
                                                                        _prev_bind_0_$219 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                            link_nodes3 = sol2 = funcall(generating_fn, node);
                                                                            if (NIL != set.set_p(sol2)) {
                                                                                set_contents_var2 = set.do_set_internal(sol2);
                                                                                for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); (NIL == GEP) && (NIL == set_contents.do_set_contents_doneP(basis_object2, state2)); state2 = set_contents.do_set_contents_update_state(state2)) {
                                                                                    ins3 = set_contents.do_set_contents_next(basis_object2, state2);
                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state2, ins3)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                        count = add(count, ONE_INTEGER);
                                                                                        if (count.numGE(num)) {
                                                                                            GEP = T;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } else
                                                                                if (sol2.isList()) {
                                                                                    if (NIL == GEP) {
                                                                                        csome_list_var3 = sol2;
                                                                                        ins4 = NIL;
                                                                                        ins4 = csome_list_var3.first();
                                                                                        while ((NIL == GEP) && (NIL != csome_list_var3)) {
                                                                                            if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(ins4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                count = add(count, ONE_INTEGER);
                                                                                                if (count.numGE(num)) {
                                                                                                    GEP = T;
                                                                                                }
                                                                                            }
                                                                                            csome_list_var3 = csome_list_var3.rest();
                                                                                            ins4 = csome_list_var3.first();
                                                                                        } 
                                                                                    }
                                                                                } else {
                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                                                }

                                                                        } finally {
                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$219, thread);
                                                                        }
                                                                    }
                                                                }

                                                        } finally {
                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$215, thread);
                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$214, thread);
                                                        }
                                                    }
                                                    final SubLObject accessible_modules2 = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)));
                                                    SubLObject rest2;
                                                    SubLObject module_var2;
                                                    SubLObject _prev_bind_0_$220;
                                                    SubLObject _prev_bind_1_$216;
                                                    SubLObject node2;
                                                    SubLObject d_link2;
                                                    SubLObject mt_links2;
                                                    SubLObject iteration_state2;
                                                    SubLObject mt_$224;
                                                    SubLObject tv_links2;
                                                    SubLObject _prev_bind_0_$221;
                                                    SubLObject iteration_state_$225;
                                                    SubLObject tv_$227;
                                                    SubLObject link_nodes4;
                                                    SubLObject _prev_bind_0_$222;
                                                    SubLObject sol3;
                                                    SubLObject set_contents_var3;
                                                    SubLObject basis_object3;
                                                    SubLObject state3;
                                                    SubLObject node_vars_link_node;
                                                    SubLObject csome_list_var4;
                                                    SubLObject node_vars_link_node2;
                                                    SubLObject new_list2;
                                                    SubLObject rest_$233;
                                                    SubLObject generating_fn2;
                                                    SubLObject _prev_bind_0_$223;
                                                    SubLObject sol4;
                                                    SubLObject link_nodes5;
                                                    SubLObject set_contents_var4;
                                                    SubLObject basis_object4;
                                                    SubLObject state4;
                                                    SubLObject node_vars_link_node3;
                                                    SubLObject csome_list_var5;
                                                    SubLObject node_vars_link_node4;
                                                    for (rest2 = NIL, rest2 = accessible_modules2; (NIL == GEP) && (NIL != rest2); rest2 = rest2.rest()) {
                                                        module_var2 = rest2.first();
                                                        _prev_bind_0_$220 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                        _prev_bind_1_$216 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                        try {
                                                            sbhl_module_vars.$sbhl_module$.bind(module_var2, thread);
                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                            node2 = function_terms.naut_to_nart(node_var_$208);
                                                            if (NIL != sbhl_link_vars.sbhl_node_object_p(node2)) {
                                                                d_link2 = sbhl_graphs.get_sbhl_graph_link(node2, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                if (NIL != d_link2) {
                                                                    mt_links2 = sbhl_links.get_sbhl_mt_links(d_link2, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                    if (NIL != mt_links2) {
                                                                        for (iteration_state2 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links2)); (NIL == GEP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state2)); iteration_state2 = dictionary_contents.do_dictionary_contents_next(iteration_state2)) {
                                                                            thread.resetMultipleValues();
                                                                            mt_$224 = dictionary_contents.do_dictionary_contents_key_value(iteration_state2);
                                                                            tv_links2 = thread.secondMultipleValue();
                                                                            thread.resetMultipleValues();
                                                                            if (NIL != mt_relevance_macros.relevant_mtP(mt_$224)) {
                                                                                _prev_bind_0_$221 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_$224, thread);
                                                                                    for (iteration_state_$225 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links2)); (NIL == GEP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$225)); iteration_state_$225 = dictionary_contents.do_dictionary_contents_next(iteration_state_$225)) {
                                                                                        thread.resetMultipleValues();
                                                                                        tv_$227 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$225);
                                                                                        link_nodes4 = thread.secondMultipleValue();
                                                                                        thread.resetMultipleValues();
                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$227)) {
                                                                                            _prev_bind_0_$222 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.bind(tv_$227, thread);
                                                                                                sol3 = link_nodes4;
                                                                                                if (NIL != set.set_p(sol3)) {
                                                                                                    set_contents_var3 = set.do_set_internal(sol3);
                                                                                                    for (basis_object3 = set_contents.do_set_contents_basis_object(set_contents_var3), state3 = NIL, state3 = set_contents.do_set_contents_initial_state(basis_object3, set_contents_var3); (NIL == GEP) && (NIL == set_contents.do_set_contents_doneP(basis_object3, state3)); state3 = set_contents.do_set_contents_update_state(state3)) {
                                                                                                        node_vars_link_node = set_contents.do_set_contents_next(basis_object3, state3);
                                                                                                        if ((NIL != set_contents.do_set_contents_element_validP(state3, node_vars_link_node)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED))) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                            deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                        }
                                                                                                    }
                                                                                                } else
                                                                                                    if (sol3.isList()) {
                                                                                                        if (NIL == GEP) {
                                                                                                            csome_list_var4 = sol3;
                                                                                                            node_vars_link_node2 = NIL;
                                                                                                            node_vars_link_node2 = csome_list_var4.first();
                                                                                                            while ((NIL == GEP) && (NIL != csome_list_var4)) {
                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node2, UNPROVIDED)) {
                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node2, UNPROVIDED);
                                                                                                                    deck.deck_push(node_vars_link_node2, recur_deck);
                                                                                                                }
                                                                                                                csome_list_var4 = csome_list_var4.rest();
                                                                                                                node_vars_link_node2 = csome_list_var4.first();
                                                                                                            } 
                                                                                                        }
                                                                                                    } else {
                                                                                                        Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol3);
                                                                                                    }

                                                                                            } finally {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$222, thread);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state_$225);
                                                                                } finally {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$221, thread);
                                                                                }
                                                                            }
                                                                        }
                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state2);
                                                                    }
                                                                } else {
                                                                    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str40$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                }
                                                            } else
                                                                if (NIL != obsolete.cnat_p(node2, UNPROVIDED)) {
                                                                    new_list2 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                    for (rest_$233 = NIL, rest_$233 = new_list2; (NIL == GEP) && (NIL != rest_$233); rest_$233 = rest_$233.rest()) {
                                                                        generating_fn2 = rest_$233.first();
                                                                        _prev_bind_0_$223 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn2, thread);
                                                                            link_nodes5 = sol4 = funcall(generating_fn2, node2);
                                                                            if (NIL != set.set_p(sol4)) {
                                                                                set_contents_var4 = set.do_set_internal(sol4);
                                                                                for (basis_object4 = set_contents.do_set_contents_basis_object(set_contents_var4), state4 = NIL, state4 = set_contents.do_set_contents_initial_state(basis_object4, set_contents_var4); (NIL == GEP) && (NIL == set_contents.do_set_contents_doneP(basis_object4, state4)); state4 = set_contents.do_set_contents_update_state(state4)) {
                                                                                    node_vars_link_node3 = set_contents.do_set_contents_next(basis_object4, state4);
                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state4, node_vars_link_node3)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node3, UNPROVIDED))) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node3, UNPROVIDED);
                                                                                        deck.deck_push(node_vars_link_node3, recur_deck);
                                                                                    }
                                                                                }
                                                                            } else
                                                                                if (sol4.isList()) {
                                                                                    if (NIL == GEP) {
                                                                                        csome_list_var5 = sol4;
                                                                                        node_vars_link_node4 = NIL;
                                                                                        node_vars_link_node4 = csome_list_var5.first();
                                                                                        while ((NIL == GEP) && (NIL != csome_list_var5)) {
                                                                                            if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node4, UNPROVIDED)) {
                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node4, UNPROVIDED);
                                                                                                deck.deck_push(node_vars_link_node4, recur_deck);
                                                                                            }
                                                                                            csome_list_var5 = csome_list_var5.rest();
                                                                                            node_vars_link_node4 = csome_list_var5.first();
                                                                                        } 
                                                                                    }
                                                                                } else {
                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol4);
                                                                                }

                                                                        } finally {
                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$223, thread);
                                                                        }
                                                                    }
                                                                }

                                                        } finally {
                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$216, thread);
                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$220, thread);
                                                        }
                                                    }
                                                    node_var_$208 = deck.deck_pop(recur_deck);
                                                } 
                                            } finally {
                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_$217, thread);
                                                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_$214, thread);
                                                sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_$213, thread);
                                            }
                                        } else {
                                            sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str117$Node__a_does_not_pass_sbhl_type_t, collection, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        }
                                    } finally {
                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_$216, thread);
                                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_$213, thread);
                                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$212, thread);
                                    }
                                } finally {
                                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$212, thread);
                                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$211, thread);
                                }
                            } finally {
                                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$211, thread);
                                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$210, thread);
                            }
                        } finally {
                            final SubLObject _prev_bind_0_$224 = $is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                $is_thread_performing_cleanupP$.bind(T, thread);
                                final SubLObject _values = getValuesAsVector();
                                sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                restoreValuesFromVector(_values);
                            } finally {
                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$224, thread);
                            }
                        }
                    } finally {
                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$209, thread);
                    }
                }
            } finally {
                final SubLObject _prev_bind_0_$225 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values2 = getValuesAsVector();
                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                    restoreValuesFromVector(_values2);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$225, thread);
                }
            }
        } finally {
            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_2, thread);
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0, thread);
        }
        return GEP;
    }

    /**
     *
     *
     * @return boolean; whether COLLECTION has fewer than NUM instances in MT with TV.
     */
    @LispMethod(comment = "@return boolean; whether COLLECTION has fewer than NUM instances in MT with TV.")
    public static final SubLObject count_all_instances_L_alt(SubLObject collection, SubLObject num, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return numL(com.cyc.cycjava.cycl.isa.count_all_instances(collection, mt, tv), num);
    }

    /**
     *
     *
     * @return boolean; whether COLLECTION has fewer than NUM instances in MT with TV.
     */
    @LispMethod(comment = "@return boolean; whether COLLECTION has fewer than NUM instances in MT with TV.")
    public static SubLObject count_all_instances_L(final SubLObject collection, final SubLObject num, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return numL(count_all_instances(collection, mt, tv), num);
    }

    /**
     *
     *
     * @return boolean; whether COLLECTION has fewer than or exactly NUM instances in MT with TV.
     */
    @LispMethod(comment = "@return boolean; whether COLLECTION has fewer than or exactly NUM instances in MT with TV.")
    public static final SubLObject count_all_instances_LE_alt(SubLObject collection, SubLObject num, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return numLE(com.cyc.cycjava.cycl.isa.count_all_instances(collection, mt, tv), num);
    }

    /**
     *
     *
     * @return boolean; whether COLLECTION has fewer than or exactly NUM instances in MT with TV.
     */
    @LispMethod(comment = "@return boolean; whether COLLECTION has fewer than or exactly NUM instances in MT with TV.")
    public static SubLObject count_all_instances_LE(final SubLObject collection, final SubLObject num, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return numLE(count_all_instances(collection, mt, tv), num);
    }

    /**
     * Counts the number of quoted instances in COLLECTION and then returns the count.
     */
    @LispMethod(comment = "Counts the number of quoted instances in COLLECTION and then returns the count.")
    public static final SubLObject count_all_quoted_instances_alt(SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(collection, EL_FORT_P);
            {
                SubLObject count = ZERO_INTEGER;
                SubLObject node_var = collection;
                {
                    SubLObject _prev_bind_0 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                    try {
                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$quotedIsa), thread);
                        sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        {
                            SubLObject node_var_269 = node_var;
                            SubLObject deck_type = (false) ? ((SubLObject) ($QUEUE)) : $STACK;
                            SubLObject recur_deck = deck.create_deck(deck_type);
                            {
                                SubLObject _prev_bind_0_270 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                try {
                                    sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                    {
                                        SubLObject mt_var = mt;
                                        {
                                            SubLObject _prev_bind_0_271 = mt_relevance_macros.$mt$.currentBinding(thread);
                                            SubLObject _prev_bind_1_272 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                            SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                            try {
                                                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                                {
                                                    SubLObject tv_var = tv;
                                                    {
                                                        SubLObject _prev_bind_0_273 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                                        SubLObject _prev_bind_1_274 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                                        try {
                                                            sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                            sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                            if (NIL != tv_var) {
                                                                if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                    if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                                        {
                                                                            SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                            if (pcase_var.eql($ERROR)) {
                                                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                            } else {
                                                                                if (pcase_var.eql($CERROR)) {
                                                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                } else {
                                                                                    if (pcase_var.eql($WARN)) {
                                                                                        Errors.warn($str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                    } else {
                                                                                        Errors.warn($str_alt36$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                        Errors.cerror($$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            {
                                                                SubLObject _prev_bind_0_275 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                                                SubLObject _prev_bind_1_276 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                                                SubLObject _prev_bind_2_277 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                                SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                try {
                                                                    sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)), thread);
                                                                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                    sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)), thread);
                                                                    if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node_var, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                        {
                                                                            SubLObject _prev_bind_0_278 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                                            SubLObject _prev_bind_1_279 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                                            SubLObject _prev_bind_2_280 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                                                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_var_269, UNPROVIDED);
                                                                                while (NIL != node_var_269) {
                                                                                    {
                                                                                        SubLObject tt_node_var = node_var_269;
                                                                                        SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$quotedIsa));
                                                                                        SubLObject cdolist_list_var = accessible_modules;
                                                                                        SubLObject module_var = NIL;
                                                                                        for (module_var = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , module_var = cdolist_list_var.first()) {
                                                                                            {
                                                                                                SubLObject _prev_bind_0_281 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_282 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                    {
                                                                                                        SubLObject node = function_terms.naut_to_nart(tt_node_var);
                                                                                                        if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                            {
                                                                                                                SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                if (NIL != d_link) {
                                                                                                                    {
                                                                                                                        SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                        if (NIL != mt_links) {
                                                                                                                            {
                                                                                                                                SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                                while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)) {
                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                    {
                                                                                                                                        SubLObject mt_283 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                        SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                        if (NIL != mt_relevance_macros.relevant_mtP(mt_283)) {
                                                                                                                                            {
                                                                                                                                                SubLObject _prev_bind_0_284 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                try {
                                                                                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_283, thread);
                                                                                                                                                    {
                                                                                                                                                        SubLObject iteration_state_285 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                        while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_285)) {
                                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                                            {
                                                                                                                                                                SubLObject tv_286 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_285);
                                                                                                                                                                SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                                thread.resetMultipleValues();
                                                                                                                                                                if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_286)) {
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject _prev_bind_0_287 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                        try {
                                                                                                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv_286, thread);
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                                SubLObject cdolist_list_var_288 = new_list;
                                                                                                                                                                                SubLObject ins = NIL;
                                                                                                                                                                                for (ins = cdolist_list_var_288.first(); NIL != cdolist_list_var_288; cdolist_list_var_288 = cdolist_list_var_288.rest() , ins = cdolist_list_var_288.first()) {
                                                                                                                                                                                    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                                                        count = add(count, ONE_INTEGER);
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        } finally {
                                                                                                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_287, thread);
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                iteration_state_285 = dictionary_contents.do_dictionary_contents_next(iteration_state_285);
                                                                                                                                                            }
                                                                                                                                                        } 
                                                                                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state_285);
                                                                                                                                                    }
                                                                                                                                                } finally {
                                                                                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_284, thread);
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                    }
                                                                                                                                } 
                                                                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt38$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                }
                                                                                                            }
                                                                                                            if (NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) {
                                                                                                                {
                                                                                                                    SubLObject csome_list_var = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                                                                    SubLObject instance_tuple = NIL;
                                                                                                                    for (instance_tuple = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest() , instance_tuple = csome_list_var.first()) {
                                                                                                                        {
                                                                                                                            SubLObject datum = instance_tuple;
                                                                                                                            SubLObject current = datum;
                                                                                                                            SubLObject link_node = NIL;
                                                                                                                            SubLObject mt_289 = NIL;
                                                                                                                            SubLObject tv_290 = NIL;
                                                                                                                            destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                            link_node = current.first();
                                                                                                                            current = current.rest();
                                                                                                                            destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                            mt_289 = current.first();
                                                                                                                            current = current.rest();
                                                                                                                            destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                            tv_290 = current.first();
                                                                                                                            current = current.rest();
                                                                                                                            if (NIL == current) {
                                                                                                                                if (NIL != mt_relevance_macros.relevant_mtP(mt_289)) {
                                                                                                                                    {
                                                                                                                                        SubLObject _prev_bind_0_291 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                        try {
                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.bind(mt_289, thread);
                                                                                                                                            if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_290)) {
                                                                                                                                                {
                                                                                                                                                    SubLObject _prev_bind_0_292 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                    try {
                                                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.bind(tv_290, thread);
                                                                                                                                                        {
                                                                                                                                                            SubLObject link_nodes = list(link_node);
                                                                                                                                                            SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                            SubLObject cdolist_list_var_293 = new_list;
                                                                                                                                                            SubLObject ins = NIL;
                                                                                                                                                            for (ins = cdolist_list_var_293.first(); NIL != cdolist_list_var_293; cdolist_list_var_293 = cdolist_list_var_293.rest() , ins = cdolist_list_var_293.first()) {
                                                                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                                    count = add(count, ONE_INTEGER);
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    } finally {
                                                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_292, thread);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } finally {
                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_291, thread);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            } else {
                                                                                                                                cdestructuring_bind_error(datum, $list_alt111);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        } else {
                                                                                                            if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                                {
                                                                                                                    SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                    SubLObject cdolist_list_var_294 = new_list;
                                                                                                                    SubLObject generating_fn = NIL;
                                                                                                                    for (generating_fn = cdolist_list_var_294.first(); NIL != cdolist_list_var_294; cdolist_list_var_294 = cdolist_list_var_294.rest() , generating_fn = cdolist_list_var_294.first()) {
                                                                                                                        {
                                                                                                                            SubLObject _prev_bind_0_295 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                            try {
                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                {
                                                                                                                                    SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                    SubLObject new_list_296 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                    SubLObject cdolist_list_var_297 = new_list_296;
                                                                                                                                    SubLObject ins = NIL;
                                                                                                                                    for (ins = cdolist_list_var_297.first(); NIL != cdolist_list_var_297; cdolist_list_var_297 = cdolist_list_var_297.rest() , ins = cdolist_list_var_297.first()) {
                                                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                            count = add(count, ONE_INTEGER);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            } finally {
                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_295, thread);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } finally {
                                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_282, thread);
                                                                                                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_281, thread);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    {
                                                                                        SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)));
                                                                                        SubLObject cdolist_list_var = accessible_modules;
                                                                                        SubLObject module_var = NIL;
                                                                                        for (module_var = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , module_var = cdolist_list_var.first()) {
                                                                                            {
                                                                                                SubLObject _prev_bind_0_298 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_299 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                    {
                                                                                                        SubLObject node = function_terms.naut_to_nart(node_var_269);
                                                                                                        if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                            {
                                                                                                                SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                if (NIL != d_link) {
                                                                                                                    {
                                                                                                                        SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                        if (NIL != mt_links) {
                                                                                                                            {
                                                                                                                                SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                                while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)) {
                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                    {
                                                                                                                                        SubLObject mt_300 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                        SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                        if (NIL != mt_relevance_macros.relevant_mtP(mt_300)) {
                                                                                                                                            {
                                                                                                                                                SubLObject _prev_bind_0_301 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                try {
                                                                                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_300, thread);
                                                                                                                                                    {
                                                                                                                                                        SubLObject iteration_state_302 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                        while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_302)) {
                                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                                            {
                                                                                                                                                                SubLObject tv_303 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_302);
                                                                                                                                                                SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                                thread.resetMultipleValues();
                                                                                                                                                                if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_303)) {
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject _prev_bind_0_304 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                        try {
                                                                                                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv_303, thread);
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                                SubLObject cdolist_list_var_305 = new_list;
                                                                                                                                                                                SubLObject node_vars_link_node = NIL;
                                                                                                                                                                                for (node_vars_link_node = cdolist_list_var_305.first(); NIL != cdolist_list_var_305; cdolist_list_var_305 = cdolist_list_var_305.rest() , node_vars_link_node = cdolist_list_var_305.first()) {
                                                                                                                                                                                    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
                                                                                                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                                                                                                        deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        } finally {
                                                                                                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_304, thread);
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                iteration_state_302 = dictionary_contents.do_dictionary_contents_next(iteration_state_302);
                                                                                                                                                            }
                                                                                                                                                        } 
                                                                                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state_302);
                                                                                                                                                    }
                                                                                                                                                } finally {
                                                                                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_301, thread);
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                    }
                                                                                                                                } 
                                                                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt38$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                }
                                                                                                            }
                                                                                                        } else {
                                                                                                            if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                                {
                                                                                                                    SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                    SubLObject cdolist_list_var_306 = new_list;
                                                                                                                    SubLObject generating_fn = NIL;
                                                                                                                    for (generating_fn = cdolist_list_var_306.first(); NIL != cdolist_list_var_306; cdolist_list_var_306 = cdolist_list_var_306.rest() , generating_fn = cdolist_list_var_306.first()) {
                                                                                                                        {
                                                                                                                            SubLObject _prev_bind_0_307 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                            try {
                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                {
                                                                                                                                    SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                    SubLObject new_list_308 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                    SubLObject cdolist_list_var_309 = new_list_308;
                                                                                                                                    SubLObject node_vars_link_node = NIL;
                                                                                                                                    for (node_vars_link_node = cdolist_list_var_309.first(); NIL != cdolist_list_var_309; cdolist_list_var_309 = cdolist_list_var_309.rest() , node_vars_link_node = cdolist_list_var_309.first()) {
                                                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
                                                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                                                            deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            } finally {
                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_307, thread);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } finally {
                                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_299, thread);
                                                                                                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_298, thread);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    node_var_269 = deck.deck_pop(recur_deck);
                                                                                } 
                                                                            } finally {
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_280, thread);
                                                                                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_279, thread);
                                                                                sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_278, thread);
                                                                            }
                                                                        }
                                                                    } else {
                                                                        sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt112$Node__a_does_not_pass_sbhl_type_t, node_var, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    }
                                                                } finally {
                                                                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                                                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_277, thread);
                                                                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_276, thread);
                                                                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_275, thread);
                                                                }
                                                            }
                                                        } finally {
                                                            sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_274, thread);
                                                            sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_273, thread);
                                                        }
                                                    }
                                                }
                                            } finally {
                                                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_272, thread);
                                                mt_relevance_macros.$mt$.rebind(_prev_bind_0_271, thread);
                                            }
                                        }
                                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                    }
                                } finally {
                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_270, thread);
                                }
                            }
                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                        }
                    } finally {
                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_1, thread);
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return count;
            }
        }
    }

    /**
     * Counts the number of quoted instances in COLLECTION and then returns the count.
     */
    @LispMethod(comment = "Counts the number of quoted instances in COLLECTION and then returns the count.")
    public static SubLObject count_all_quoted_instances(final SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLTrampolineFile.enforceType(collection, EL_FORT_P);
        SubLObject count = ZERO_INTEGER;
        final SubLObject _prev_bind_0 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
        try {
            sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$quotedIsa), thread);
            sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
            try {
                SubLObject node_var_$245 = collection;
                final SubLObject deck_type = $STACK;
                final SubLObject recur_deck = deck.create_deck(deck_type);
                final SubLObject _prev_bind_0_$246 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                    try {
                        final SubLObject mt_var = mt;
                        final SubLObject _prev_bind_0_$247 = mt_relevance_macros.$mt$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$248 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                        try {
                            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                            final SubLObject tv_var = tv;
                            final SubLObject _prev_bind_0_$248 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$249 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                            try {
                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                                    final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                    if (pcase_var.eql($ERROR)) {
                                        sbhl_paranoia.sbhl_error(ONE_INTEGER, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    } else
                                        if (pcase_var.eql($CERROR)) {
                                            sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        } else
                                            if (pcase_var.eql($WARN)) {
                                                Errors.warn($str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                            } else {
                                                Errors.warn($str37$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror($$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                            }


                                }
                                final SubLObject _prev_bind_0_$249 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$250 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$253 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)), thread);
                                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)), thread);
                                    if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(collection, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                        final SubLObject _prev_bind_0_$250 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$251 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$254 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_var_$245, UNPROVIDED);
                                            while (NIL != node_var_$245) {
                                                final SubLObject tt_node_var = node_var_$245;
                                                SubLObject cdolist_list_var;
                                                final SubLObject accessible_modules = cdolist_list_var = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$quotedIsa));
                                                SubLObject module_var = NIL;
                                                module_var = cdolist_list_var.first();
                                                while (NIL != cdolist_list_var) {
                                                    final SubLObject _prev_bind_0_$251 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                    final SubLObject _prev_bind_1_$252 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                    try {
                                                        sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                        final SubLObject node = function_terms.naut_to_nart(tt_node_var);
                                                        if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                            final SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                            if (NIL != d_link) {
                                                                final SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                if (NIL != mt_links) {
                                                                    SubLObject iteration_state;
                                                                    for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                                                        thread.resetMultipleValues();
                                                                        final SubLObject mt_$259 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                        final SubLObject tv_links = thread.secondMultipleValue();
                                                                        thread.resetMultipleValues();
                                                                        if (NIL != mt_relevance_macros.relevant_mtP(mt_$259)) {
                                                                            final SubLObject _prev_bind_0_$252 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt_$259, thread);
                                                                                SubLObject iteration_state_$261;
                                                                                for (iteration_state_$261 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$261); iteration_state_$261 = dictionary_contents.do_dictionary_contents_next(iteration_state_$261)) {
                                                                                    thread.resetMultipleValues();
                                                                                    final SubLObject tv_$262 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$261);
                                                                                    final SubLObject link_nodes = thread.secondMultipleValue();
                                                                                    thread.resetMultipleValues();
                                                                                    if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$262)) {
                                                                                        final SubLObject _prev_bind_0_$253 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv_$262, thread);
                                                                                            final SubLObject sol = link_nodes;
                                                                                            if (NIL != set.set_p(sol)) {
                                                                                                final SubLObject set_contents_var = set.do_set_internal(sol);
                                                                                                SubLObject basis_object;
                                                                                                SubLObject state;
                                                                                                SubLObject ins;
                                                                                                for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                    ins = set_contents.do_set_contents_next(basis_object, state);
                                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state, ins)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                        count = add(count, ONE_INTEGER);
                                                                                                    }
                                                                                                }
                                                                                            } else
                                                                                                if (sol.isList()) {
                                                                                                    SubLObject csome_list_var = sol;
                                                                                                    SubLObject ins2 = NIL;
                                                                                                    ins2 = csome_list_var.first();
                                                                                                    while (NIL != csome_list_var) {
                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                            count = add(count, ONE_INTEGER);
                                                                                                        }
                                                                                                        csome_list_var = csome_list_var.rest();
                                                                                                        ins2 = csome_list_var.first();
                                                                                                    } 
                                                                                                } else {
                                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                }

                                                                                        } finally {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$253, thread);
                                                                                        }
                                                                                    }
                                                                                }
                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state_$261);
                                                                            } finally {
                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$252, thread);
                                                                            }
                                                                        }
                                                                    }
                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                }
                                                            } else {
                                                                sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str40$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                            }
                                                            if (NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) {
                                                                SubLObject csome_list_var2 = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                SubLObject instance_tuple = NIL;
                                                                instance_tuple = csome_list_var2.first();
                                                                while (NIL != csome_list_var2) {
                                                                    SubLObject current;
                                                                    final SubLObject datum = current = instance_tuple;
                                                                    SubLObject link_node = NIL;
                                                                    SubLObject mt_$260 = NIL;
                                                                    SubLObject tv_$263 = NIL;
                                                                    destructuring_bind_must_consp(current, datum, $list116);
                                                                    link_node = current.first();
                                                                    current = current.rest();
                                                                    destructuring_bind_must_consp(current, datum, $list116);
                                                                    mt_$260 = current.first();
                                                                    current = current.rest();
                                                                    destructuring_bind_must_consp(current, datum, $list116);
                                                                    tv_$263 = current.first();
                                                                    current = current.rest();
                                                                    if (NIL == current) {
                                                                        if (NIL != mt_relevance_macros.relevant_mtP(mt_$260)) {
                                                                            final SubLObject _prev_bind_0_$254 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt_$260, thread);
                                                                                if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$263)) {
                                                                                    final SubLObject _prev_bind_0_$255 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                    try {
                                                                                        sbhl_link_vars.$sbhl_link_tv$.bind(tv_$263, thread);
                                                                                        final SubLObject sol;
                                                                                        final SubLObject link_nodes2 = sol = list(link_node);
                                                                                        if (NIL != set.set_p(sol)) {
                                                                                            final SubLObject set_contents_var = set.do_set_internal(sol);
                                                                                            SubLObject basis_object;
                                                                                            SubLObject state;
                                                                                            SubLObject ins;
                                                                                            for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                ins = set_contents.do_set_contents_next(basis_object, state);
                                                                                                if ((NIL != set_contents.do_set_contents_element_validP(state, ins)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                    count = add(count, ONE_INTEGER);
                                                                                                }
                                                                                            }
                                                                                        } else
                                                                                            if (sol.isList()) {
                                                                                                SubLObject csome_list_var_$268 = sol;
                                                                                                SubLObject ins2 = NIL;
                                                                                                ins2 = csome_list_var_$268.first();
                                                                                                while (NIL != csome_list_var_$268) {
                                                                                                    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                        count = add(count, ONE_INTEGER);
                                                                                                    }
                                                                                                    csome_list_var_$268 = csome_list_var_$268.rest();
                                                                                                    ins2 = csome_list_var_$268.first();
                                                                                                } 
                                                                                            } else {
                                                                                                Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                            }

                                                                                    } finally {
                                                                                        sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$255, thread);
                                                                                    }
                                                                                }
                                                                            } finally {
                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$254, thread);
                                                                            }
                                                                        }
                                                                    } else {
                                                                        cdestructuring_bind_error(datum, $list116);
                                                                    }
                                                                    csome_list_var2 = csome_list_var2.rest();
                                                                    instance_tuple = csome_list_var2.first();
                                                                } 
                                                            }
                                                        } else
                                                            if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                SubLObject cdolist_list_var_$269;
                                                                final SubLObject new_list = cdolist_list_var_$269 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                SubLObject generating_fn = NIL;
                                                                generating_fn = cdolist_list_var_$269.first();
                                                                while (NIL != cdolist_list_var_$269) {
                                                                    final SubLObject _prev_bind_0_$256 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                        final SubLObject sol2;
                                                                        final SubLObject link_nodes3 = sol2 = funcall(generating_fn, node);
                                                                        if (NIL != set.set_p(sol2)) {
                                                                            final SubLObject set_contents_var2 = set.do_set_internal(sol2);
                                                                            SubLObject basis_object2;
                                                                            SubLObject state2;
                                                                            SubLObject ins3;
                                                                            for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); NIL == set_contents.do_set_contents_doneP(basis_object2, state2); state2 = set_contents.do_set_contents_update_state(state2)) {
                                                                                ins3 = set_contents.do_set_contents_next(basis_object2, state2);
                                                                                if ((NIL != set_contents.do_set_contents_element_validP(state2, ins3)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                    count = add(count, ONE_INTEGER);
                                                                                }
                                                                            }
                                                                        } else
                                                                            if (sol2.isList()) {
                                                                                SubLObject csome_list_var3 = sol2;
                                                                                SubLObject ins4 = NIL;
                                                                                ins4 = csome_list_var3.first();
                                                                                while (NIL != csome_list_var3) {
                                                                                    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                        count = add(count, ONE_INTEGER);
                                                                                    }
                                                                                    csome_list_var3 = csome_list_var3.rest();
                                                                                    ins4 = csome_list_var3.first();
                                                                                } 
                                                                            } else {
                                                                                Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                                            }

                                                                    } finally {
                                                                        sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$256, thread);
                                                                    }
                                                                    cdolist_list_var_$269 = cdolist_list_var_$269.rest();
                                                                    generating_fn = cdolist_list_var_$269.first();
                                                                } 
                                                            }

                                                    } finally {
                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$252, thread);
                                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$251, thread);
                                                    }
                                                    cdolist_list_var = cdolist_list_var.rest();
                                                    module_var = cdolist_list_var.first();
                                                } 
                                                SubLObject cdolist_list_var2;
                                                final SubLObject accessible_modules2 = cdolist_list_var2 = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)));
                                                SubLObject module_var2 = NIL;
                                                module_var2 = cdolist_list_var2.first();
                                                while (NIL != cdolist_list_var2) {
                                                    final SubLObject _prev_bind_0_$257 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                    final SubLObject _prev_bind_1_$253 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                    try {
                                                        sbhl_module_vars.$sbhl_module$.bind(module_var2, thread);
                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                        final SubLObject node2 = function_terms.naut_to_nart(node_var_$245);
                                                        if (NIL != sbhl_link_vars.sbhl_node_object_p(node2)) {
                                                            final SubLObject d_link2 = sbhl_graphs.get_sbhl_graph_link(node2, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                            if (NIL != d_link2) {
                                                                final SubLObject mt_links2 = sbhl_links.get_sbhl_mt_links(d_link2, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                if (NIL != mt_links2) {
                                                                    SubLObject iteration_state2;
                                                                    for (iteration_state2 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links2)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state2); iteration_state2 = dictionary_contents.do_dictionary_contents_next(iteration_state2)) {
                                                                        thread.resetMultipleValues();
                                                                        final SubLObject mt_$261 = dictionary_contents.do_dictionary_contents_key_value(iteration_state2);
                                                                        final SubLObject tv_links2 = thread.secondMultipleValue();
                                                                        thread.resetMultipleValues();
                                                                        if (NIL != mt_relevance_macros.relevant_mtP(mt_$261)) {
                                                                            final SubLObject _prev_bind_0_$258 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt_$261, thread);
                                                                                SubLObject iteration_state_$262;
                                                                                for (iteration_state_$262 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links2)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$262); iteration_state_$262 = dictionary_contents.do_dictionary_contents_next(iteration_state_$262)) {
                                                                                    thread.resetMultipleValues();
                                                                                    final SubLObject tv_$264 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$262);
                                                                                    final SubLObject link_nodes4 = thread.secondMultipleValue();
                                                                                    thread.resetMultipleValues();
                                                                                    if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$264)) {
                                                                                        final SubLObject _prev_bind_0_$259 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv_$264, thread);
                                                                                            final SubLObject sol3 = link_nodes4;
                                                                                            if (NIL != set.set_p(sol3)) {
                                                                                                final SubLObject set_contents_var3 = set.do_set_internal(sol3);
                                                                                                SubLObject basis_object3;
                                                                                                SubLObject state3;
                                                                                                SubLObject node_vars_link_node;
                                                                                                for (basis_object3 = set_contents.do_set_contents_basis_object(set_contents_var3), state3 = NIL, state3 = set_contents.do_set_contents_initial_state(basis_object3, set_contents_var3); NIL == set_contents.do_set_contents_doneP(basis_object3, state3); state3 = set_contents.do_set_contents_update_state(state3)) {
                                                                                                    node_vars_link_node = set_contents.do_set_contents_next(basis_object3, state3);
                                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state3, node_vars_link_node)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED))) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                        deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                    }
                                                                                                }
                                                                                            } else
                                                                                                if (sol3.isList()) {
                                                                                                    SubLObject csome_list_var4 = sol3;
                                                                                                    SubLObject node_vars_link_node2 = NIL;
                                                                                                    node_vars_link_node2 = csome_list_var4.first();
                                                                                                    while (NIL != csome_list_var4) {
                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node2, UNPROVIDED)) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node2, UNPROVIDED);
                                                                                                            deck.deck_push(node_vars_link_node2, recur_deck);
                                                                                                        }
                                                                                                        csome_list_var4 = csome_list_var4.rest();
                                                                                                        node_vars_link_node2 = csome_list_var4.first();
                                                                                                    } 
                                                                                                } else {
                                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol3);
                                                                                                }

                                                                                        } finally {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$259, thread);
                                                                                        }
                                                                                    }
                                                                                }
                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state_$262);
                                                                            } finally {
                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$258, thread);
                                                                            }
                                                                        }
                                                                    }
                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state2);
                                                                }
                                                            } else {
                                                                sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str40$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                            }
                                                        } else
                                                            if (NIL != obsolete.cnat_p(node2, UNPROVIDED)) {
                                                                SubLObject cdolist_list_var_$270;
                                                                final SubLObject new_list2 = cdolist_list_var_$270 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                SubLObject generating_fn2 = NIL;
                                                                generating_fn2 = cdolist_list_var_$270.first();
                                                                while (NIL != cdolist_list_var_$270) {
                                                                    final SubLObject _prev_bind_0_$260 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn2, thread);
                                                                        final SubLObject sol4;
                                                                        final SubLObject link_nodes5 = sol4 = funcall(generating_fn2, node2);
                                                                        if (NIL != set.set_p(sol4)) {
                                                                            final SubLObject set_contents_var4 = set.do_set_internal(sol4);
                                                                            SubLObject basis_object4;
                                                                            SubLObject state4;
                                                                            SubLObject node_vars_link_node3;
                                                                            for (basis_object4 = set_contents.do_set_contents_basis_object(set_contents_var4), state4 = NIL, state4 = set_contents.do_set_contents_initial_state(basis_object4, set_contents_var4); NIL == set_contents.do_set_contents_doneP(basis_object4, state4); state4 = set_contents.do_set_contents_update_state(state4)) {
                                                                                node_vars_link_node3 = set_contents.do_set_contents_next(basis_object4, state4);
                                                                                if ((NIL != set_contents.do_set_contents_element_validP(state4, node_vars_link_node3)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node3, UNPROVIDED))) {
                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node3, UNPROVIDED);
                                                                                    deck.deck_push(node_vars_link_node3, recur_deck);
                                                                                }
                                                                            }
                                                                        } else
                                                                            if (sol4.isList()) {
                                                                                SubLObject csome_list_var5 = sol4;
                                                                                SubLObject node_vars_link_node4 = NIL;
                                                                                node_vars_link_node4 = csome_list_var5.first();
                                                                                while (NIL != csome_list_var5) {
                                                                                    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node4, UNPROVIDED)) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node4, UNPROVIDED);
                                                                                        deck.deck_push(node_vars_link_node4, recur_deck);
                                                                                    }
                                                                                    csome_list_var5 = csome_list_var5.rest();
                                                                                    node_vars_link_node4 = csome_list_var5.first();
                                                                                } 
                                                                            } else {
                                                                                Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol4);
                                                                            }

                                                                    } finally {
                                                                        sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$260, thread);
                                                                    }
                                                                    cdolist_list_var_$270 = cdolist_list_var_$270.rest();
                                                                    generating_fn2 = cdolist_list_var_$270.first();
                                                                } 
                                                            }

                                                    } finally {
                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$253, thread);
                                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$257, thread);
                                                    }
                                                    cdolist_list_var2 = cdolist_list_var2.rest();
                                                    module_var2 = cdolist_list_var2.first();
                                                } 
                                                node_var_$245 = deck.deck_pop(recur_deck);
                                            } 
                                        } finally {
                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_$254, thread);
                                            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_$251, thread);
                                            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_$250, thread);
                                        }
                                    } else {
                                        sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str117$Node__a_does_not_pass_sbhl_type_t, collection, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    }
                                } finally {
                                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_$253, thread);
                                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_$250, thread);
                                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$249, thread);
                                }
                            } finally {
                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$249, thread);
                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$248, thread);
                            }
                        } finally {
                            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$248, thread);
                            mt_relevance_macros.$mt$.rebind(_prev_bind_0_$247, thread);
                        }
                    } finally {
                        final SubLObject _prev_bind_0_$261 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            final SubLObject _values = getValuesAsVector();
                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            restoreValuesFromVector(_values);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$261, thread);
                        }
                    }
                } finally {
                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$246, thread);
                }
            } finally {
                final SubLObject _prev_bind_0_$262 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values2 = getValuesAsVector();
                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                    restoreValuesFromVector(_values2);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$262, thread);
                }
            }
        } finally {
            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_2, thread);
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0, thread);
        }
        return count;
    }/**
     * Counts the number of quoted instances in COLLECTION and then returns the count.
     */


    /**
     * Counts the number of quoted instances in COLLECTION that pass PRED
     * and then returns the count.
     */
    @LispMethod(comment = "Counts the number of quoted instances in COLLECTION that pass PRED\r\nand then returns the count.\nCounts the number of quoted instances in COLLECTION that pass PRED\nand then returns the count.")
    public static final SubLObject count_all_quoted_instances_if_alt(SubLObject collection, SubLObject pred, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject count = ZERO_INTEGER;
                SubLObject node_var = collection;
                {
                    SubLObject _prev_bind_0 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                    try {
                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$quotedIsa), thread);
                        sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        {
                            SubLObject node_var_310 = node_var;
                            SubLObject deck_type = (false) ? ((SubLObject) ($QUEUE)) : $STACK;
                            SubLObject recur_deck = deck.create_deck(deck_type);
                            {
                                SubLObject _prev_bind_0_311 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                try {
                                    sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                    {
                                        SubLObject mt_var = mt;
                                        {
                                            SubLObject _prev_bind_0_312 = mt_relevance_macros.$mt$.currentBinding(thread);
                                            SubLObject _prev_bind_1_313 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                            SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                            try {
                                                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                                {
                                                    SubLObject tv_var = tv;
                                                    {
                                                        SubLObject _prev_bind_0_314 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                                        SubLObject _prev_bind_1_315 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                                        try {
                                                            sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                            sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                            if (NIL != tv_var) {
                                                                if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                    if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                                        {
                                                                            SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                            if (pcase_var.eql($ERROR)) {
                                                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                            } else {
                                                                                if (pcase_var.eql($CERROR)) {
                                                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                } else {
                                                                                    if (pcase_var.eql($WARN)) {
                                                                                        Errors.warn($str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                    } else {
                                                                                        Errors.warn($str_alt36$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                        Errors.cerror($$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            {
                                                                SubLObject _prev_bind_0_316 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                                                SubLObject _prev_bind_1_317 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                                                SubLObject _prev_bind_2_318 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                                SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                try {
                                                                    sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)), thread);
                                                                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                    sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)), thread);
                                                                    if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node_var, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                        {
                                                                            SubLObject _prev_bind_0_319 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                                            SubLObject _prev_bind_1_320 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                                            SubLObject _prev_bind_2_321 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                                                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_var_310, UNPROVIDED);
                                                                                while (NIL != node_var_310) {
                                                                                    {
                                                                                        SubLObject tt_node_var = node_var_310;
                                                                                        SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$quotedIsa));
                                                                                        SubLObject cdolist_list_var = accessible_modules;
                                                                                        SubLObject module_var = NIL;
                                                                                        for (module_var = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , module_var = cdolist_list_var.first()) {
                                                                                            {
                                                                                                SubLObject _prev_bind_0_322 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_323 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                    {
                                                                                                        SubLObject node = function_terms.naut_to_nart(tt_node_var);
                                                                                                        if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                            {
                                                                                                                SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                if (NIL != d_link) {
                                                                                                                    {
                                                                                                                        SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                        if (NIL != mt_links) {
                                                                                                                            {
                                                                                                                                SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                                while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)) {
                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                    {
                                                                                                                                        SubLObject mt_324 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                        SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                        if (NIL != mt_relevance_macros.relevant_mtP(mt_324)) {
                                                                                                                                            {
                                                                                                                                                SubLObject _prev_bind_0_325 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                try {
                                                                                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_324, thread);
                                                                                                                                                    {
                                                                                                                                                        SubLObject iteration_state_326 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                        while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_326)) {
                                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                                            {
                                                                                                                                                                SubLObject tv_327 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_326);
                                                                                                                                                                SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                                thread.resetMultipleValues();
                                                                                                                                                                if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_327)) {
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject _prev_bind_0_328 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                        try {
                                                                                                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv_327, thread);
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                                SubLObject cdolist_list_var_329 = new_list;
                                                                                                                                                                                SubLObject ins = NIL;
                                                                                                                                                                                for (ins = cdolist_list_var_329.first(); NIL != cdolist_list_var_329; cdolist_list_var_329 = cdolist_list_var_329.rest() , ins = cdolist_list_var_329.first()) {
                                                                                                                                                                                    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                                                        if (NIL != funcall(pred, ins)) {
                                                                                                                                                                                            count = add(count, ONE_INTEGER);
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        } finally {
                                                                                                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_328, thread);
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                iteration_state_326 = dictionary_contents.do_dictionary_contents_next(iteration_state_326);
                                                                                                                                                            }
                                                                                                                                                        } 
                                                                                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state_326);
                                                                                                                                                    }
                                                                                                                                                } finally {
                                                                                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_325, thread);
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                    }
                                                                                                                                } 
                                                                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt38$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                }
                                                                                                            }
                                                                                                            if (NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) {
                                                                                                                {
                                                                                                                    SubLObject csome_list_var = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                                                                    SubLObject instance_tuple = NIL;
                                                                                                                    for (instance_tuple = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest() , instance_tuple = csome_list_var.first()) {
                                                                                                                        {
                                                                                                                            SubLObject datum = instance_tuple;
                                                                                                                            SubLObject current = datum;
                                                                                                                            SubLObject link_node = NIL;
                                                                                                                            SubLObject mt_330 = NIL;
                                                                                                                            SubLObject tv_331 = NIL;
                                                                                                                            destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                            link_node = current.first();
                                                                                                                            current = current.rest();
                                                                                                                            destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                            mt_330 = current.first();
                                                                                                                            current = current.rest();
                                                                                                                            destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                            tv_331 = current.first();
                                                                                                                            current = current.rest();
                                                                                                                            if (NIL == current) {
                                                                                                                                if (NIL != mt_relevance_macros.relevant_mtP(mt_330)) {
                                                                                                                                    {
                                                                                                                                        SubLObject _prev_bind_0_332 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                        try {
                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.bind(mt_330, thread);
                                                                                                                                            if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_331)) {
                                                                                                                                                {
                                                                                                                                                    SubLObject _prev_bind_0_333 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                    try {
                                                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.bind(tv_331, thread);
                                                                                                                                                        {
                                                                                                                                                            SubLObject link_nodes = list(link_node);
                                                                                                                                                            SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                            SubLObject cdolist_list_var_334 = new_list;
                                                                                                                                                            SubLObject ins = NIL;
                                                                                                                                                            for (ins = cdolist_list_var_334.first(); NIL != cdolist_list_var_334; cdolist_list_var_334 = cdolist_list_var_334.rest() , ins = cdolist_list_var_334.first()) {
                                                                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                                    if (NIL != funcall(pred, ins)) {
                                                                                                                                                                        count = add(count, ONE_INTEGER);
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    } finally {
                                                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_333, thread);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } finally {
                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_332, thread);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            } else {
                                                                                                                                cdestructuring_bind_error(datum, $list_alt111);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        } else {
                                                                                                            if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                                {
                                                                                                                    SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                    SubLObject cdolist_list_var_335 = new_list;
                                                                                                                    SubLObject generating_fn = NIL;
                                                                                                                    for (generating_fn = cdolist_list_var_335.first(); NIL != cdolist_list_var_335; cdolist_list_var_335 = cdolist_list_var_335.rest() , generating_fn = cdolist_list_var_335.first()) {
                                                                                                                        {
                                                                                                                            SubLObject _prev_bind_0_336 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                            try {
                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                {
                                                                                                                                    SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                    SubLObject new_list_337 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                    SubLObject cdolist_list_var_338 = new_list_337;
                                                                                                                                    SubLObject ins = NIL;
                                                                                                                                    for (ins = cdolist_list_var_338.first(); NIL != cdolist_list_var_338; cdolist_list_var_338 = cdolist_list_var_338.rest() , ins = cdolist_list_var_338.first()) {
                                                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                            if (NIL != funcall(pred, ins)) {
                                                                                                                                                count = add(count, ONE_INTEGER);
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            } finally {
                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_336, thread);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } finally {
                                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_323, thread);
                                                                                                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_322, thread);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    {
                                                                                        SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)));
                                                                                        SubLObject cdolist_list_var = accessible_modules;
                                                                                        SubLObject module_var = NIL;
                                                                                        for (module_var = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , module_var = cdolist_list_var.first()) {
                                                                                            {
                                                                                                SubLObject _prev_bind_0_339 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_340 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                    {
                                                                                                        SubLObject node = function_terms.naut_to_nart(node_var_310);
                                                                                                        if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                            {
                                                                                                                SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                if (NIL != d_link) {
                                                                                                                    {
                                                                                                                        SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                        if (NIL != mt_links) {
                                                                                                                            {
                                                                                                                                SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                                while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)) {
                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                    {
                                                                                                                                        SubLObject mt_341 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                        SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                        if (NIL != mt_relevance_macros.relevant_mtP(mt_341)) {
                                                                                                                                            {
                                                                                                                                                SubLObject _prev_bind_0_342 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                try {
                                                                                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_341, thread);
                                                                                                                                                    {
                                                                                                                                                        SubLObject iteration_state_343 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                        while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_343)) {
                                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                                            {
                                                                                                                                                                SubLObject tv_344 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_343);
                                                                                                                                                                SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                                thread.resetMultipleValues();
                                                                                                                                                                if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_344)) {
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject _prev_bind_0_345 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                        try {
                                                                                                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv_344, thread);
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                                SubLObject cdolist_list_var_346 = new_list;
                                                                                                                                                                                SubLObject node_vars_link_node = NIL;
                                                                                                                                                                                for (node_vars_link_node = cdolist_list_var_346.first(); NIL != cdolist_list_var_346; cdolist_list_var_346 = cdolist_list_var_346.rest() , node_vars_link_node = cdolist_list_var_346.first()) {
                                                                                                                                                                                    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
                                                                                                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                                                                                                        deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        } finally {
                                                                                                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_345, thread);
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                iteration_state_343 = dictionary_contents.do_dictionary_contents_next(iteration_state_343);
                                                                                                                                                            }
                                                                                                                                                        } 
                                                                                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state_343);
                                                                                                                                                    }
                                                                                                                                                } finally {
                                                                                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_342, thread);
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                    }
                                                                                                                                } 
                                                                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt38$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                }
                                                                                                            }
                                                                                                        } else {
                                                                                                            if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                                {
                                                                                                                    SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                    SubLObject cdolist_list_var_347 = new_list;
                                                                                                                    SubLObject generating_fn = NIL;
                                                                                                                    for (generating_fn = cdolist_list_var_347.first(); NIL != cdolist_list_var_347; cdolist_list_var_347 = cdolist_list_var_347.rest() , generating_fn = cdolist_list_var_347.first()) {
                                                                                                                        {
                                                                                                                            SubLObject _prev_bind_0_348 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                            try {
                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                {
                                                                                                                                    SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                    SubLObject new_list_349 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                    SubLObject cdolist_list_var_350 = new_list_349;
                                                                                                                                    SubLObject node_vars_link_node = NIL;
                                                                                                                                    for (node_vars_link_node = cdolist_list_var_350.first(); NIL != cdolist_list_var_350; cdolist_list_var_350 = cdolist_list_var_350.rest() , node_vars_link_node = cdolist_list_var_350.first()) {
                                                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
                                                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                                                            deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            } finally {
                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_348, thread);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } finally {
                                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_340, thread);
                                                                                                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_339, thread);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    node_var_310 = deck.deck_pop(recur_deck);
                                                                                } 
                                                                            } finally {
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_321, thread);
                                                                                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_320, thread);
                                                                                sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_319, thread);
                                                                            }
                                                                        }
                                                                    } else {
                                                                        sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt112$Node__a_does_not_pass_sbhl_type_t, node_var, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    }
                                                                } finally {
                                                                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                                                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_318, thread);
                                                                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_317, thread);
                                                                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_316, thread);
                                                                }
                                                            }
                                                        } finally {
                                                            sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_315, thread);
                                                            sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_314, thread);
                                                        }
                                                    }
                                                }
                                            } finally {
                                                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_313, thread);
                                                mt_relevance_macros.$mt$.rebind(_prev_bind_0_312, thread);
                                            }
                                        }
                                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                    }
                                } finally {
                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_311, thread);
                                }
                            }
                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                        }
                    } finally {
                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_1, thread);
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return count;
            }
        }
    }

    /**
     * Counts the number of quoted instances in COLLECTION that pass PRED
     * and then returns the count.
     */
    @LispMethod(comment = "Counts the number of quoted instances in COLLECTION that pass PRED\r\nand then returns the count.\nCounts the number of quoted instances in COLLECTION that pass PRED\nand then returns the count.")
    public static SubLObject count_all_quoted_instances_if(final SubLObject collection, final SubLObject pred, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject count = ZERO_INTEGER;
        final SubLObject _prev_bind_0 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
        try {
            sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$quotedIsa), thread);
            sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
            try {
                SubLObject node_var_$282 = collection;
                final SubLObject deck_type = $STACK;
                final SubLObject recur_deck = deck.create_deck(deck_type);
                final SubLObject _prev_bind_0_$283 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                    try {
                        final SubLObject mt_var = mt;
                        final SubLObject _prev_bind_0_$284 = mt_relevance_macros.$mt$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$285 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                        try {
                            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                            final SubLObject tv_var = tv;
                            final SubLObject _prev_bind_0_$285 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$286 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                            try {
                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                                    final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                    if (pcase_var.eql($ERROR)) {
                                        sbhl_paranoia.sbhl_error(ONE_INTEGER, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    } else
                                        if (pcase_var.eql($CERROR)) {
                                            sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        } else
                                            if (pcase_var.eql($WARN)) {
                                                Errors.warn($str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                            } else {
                                                Errors.warn($str37$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror($$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                            }


                                }
                                final SubLObject _prev_bind_0_$286 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$287 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$290 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)), thread);
                                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)), thread);
                                    if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(collection, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                        final SubLObject _prev_bind_0_$287 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$288 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$291 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_var_$282, UNPROVIDED);
                                            while (NIL != node_var_$282) {
                                                final SubLObject tt_node_var = node_var_$282;
                                                SubLObject cdolist_list_var;
                                                final SubLObject accessible_modules = cdolist_list_var = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$quotedIsa));
                                                SubLObject module_var = NIL;
                                                module_var = cdolist_list_var.first();
                                                while (NIL != cdolist_list_var) {
                                                    final SubLObject _prev_bind_0_$288 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                    final SubLObject _prev_bind_1_$289 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                    try {
                                                        sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                        final SubLObject node = function_terms.naut_to_nart(tt_node_var);
                                                        if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                            final SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                            if (NIL != d_link) {
                                                                final SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                if (NIL != mt_links) {
                                                                    SubLObject iteration_state;
                                                                    for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                                                        thread.resetMultipleValues();
                                                                        final SubLObject mt_$296 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                        final SubLObject tv_links = thread.secondMultipleValue();
                                                                        thread.resetMultipleValues();
                                                                        if (NIL != mt_relevance_macros.relevant_mtP(mt_$296)) {
                                                                            final SubLObject _prev_bind_0_$289 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt_$296, thread);
                                                                                SubLObject iteration_state_$298;
                                                                                for (iteration_state_$298 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$298); iteration_state_$298 = dictionary_contents.do_dictionary_contents_next(iteration_state_$298)) {
                                                                                    thread.resetMultipleValues();
                                                                                    final SubLObject tv_$299 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$298);
                                                                                    final SubLObject link_nodes = thread.secondMultipleValue();
                                                                                    thread.resetMultipleValues();
                                                                                    if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$299)) {
                                                                                        final SubLObject _prev_bind_0_$290 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv_$299, thread);
                                                                                            final SubLObject sol = link_nodes;
                                                                                            if (NIL != set.set_p(sol)) {
                                                                                                final SubLObject set_contents_var = set.do_set_internal(sol);
                                                                                                SubLObject basis_object;
                                                                                                SubLObject state;
                                                                                                SubLObject ins;
                                                                                                for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                    ins = set_contents.do_set_contents_next(basis_object, state);
                                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state, ins)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                        if (NIL != funcall(pred, ins)) {
                                                                                                            count = add(count, ONE_INTEGER);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } else
                                                                                                if (sol.isList()) {
                                                                                                    SubLObject csome_list_var = sol;
                                                                                                    SubLObject ins2 = NIL;
                                                                                                    ins2 = csome_list_var.first();
                                                                                                    while (NIL != csome_list_var) {
                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                            if (NIL != funcall(pred, ins2)) {
                                                                                                                count = add(count, ONE_INTEGER);
                                                                                                            }
                                                                                                        }
                                                                                                        csome_list_var = csome_list_var.rest();
                                                                                                        ins2 = csome_list_var.first();
                                                                                                    } 
                                                                                                } else {
                                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                }

                                                                                        } finally {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$290, thread);
                                                                                        }
                                                                                    }
                                                                                }
                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state_$298);
                                                                            } finally {
                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$289, thread);
                                                                            }
                                                                        }
                                                                    }
                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                }
                                                            } else {
                                                                sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str40$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                            }
                                                            if (NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) {
                                                                SubLObject csome_list_var2 = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                SubLObject instance_tuple = NIL;
                                                                instance_tuple = csome_list_var2.first();
                                                                while (NIL != csome_list_var2) {
                                                                    SubLObject current;
                                                                    final SubLObject datum = current = instance_tuple;
                                                                    SubLObject link_node = NIL;
                                                                    SubLObject mt_$297 = NIL;
                                                                    SubLObject tv_$300 = NIL;
                                                                    destructuring_bind_must_consp(current, datum, $list116);
                                                                    link_node = current.first();
                                                                    current = current.rest();
                                                                    destructuring_bind_must_consp(current, datum, $list116);
                                                                    mt_$297 = current.first();
                                                                    current = current.rest();
                                                                    destructuring_bind_must_consp(current, datum, $list116);
                                                                    tv_$300 = current.first();
                                                                    current = current.rest();
                                                                    if (NIL == current) {
                                                                        if (NIL != mt_relevance_macros.relevant_mtP(mt_$297)) {
                                                                            final SubLObject _prev_bind_0_$291 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt_$297, thread);
                                                                                if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$300)) {
                                                                                    final SubLObject _prev_bind_0_$292 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                    try {
                                                                                        sbhl_link_vars.$sbhl_link_tv$.bind(tv_$300, thread);
                                                                                        final SubLObject sol;
                                                                                        final SubLObject link_nodes2 = sol = list(link_node);
                                                                                        if (NIL != set.set_p(sol)) {
                                                                                            final SubLObject set_contents_var = set.do_set_internal(sol);
                                                                                            SubLObject basis_object;
                                                                                            SubLObject state;
                                                                                            SubLObject ins;
                                                                                            for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                ins = set_contents.do_set_contents_next(basis_object, state);
                                                                                                if ((NIL != set_contents.do_set_contents_element_validP(state, ins)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                    if (NIL != funcall(pred, ins)) {
                                                                                                        count = add(count, ONE_INTEGER);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        } else
                                                                                            if (sol.isList()) {
                                                                                                SubLObject csome_list_var_$305 = sol;
                                                                                                SubLObject ins2 = NIL;
                                                                                                ins2 = csome_list_var_$305.first();
                                                                                                while (NIL != csome_list_var_$305) {
                                                                                                    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                        if (NIL != funcall(pred, ins2)) {
                                                                                                            count = add(count, ONE_INTEGER);
                                                                                                        }
                                                                                                    }
                                                                                                    csome_list_var_$305 = csome_list_var_$305.rest();
                                                                                                    ins2 = csome_list_var_$305.first();
                                                                                                } 
                                                                                            } else {
                                                                                                Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                            }

                                                                                    } finally {
                                                                                        sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$292, thread);
                                                                                    }
                                                                                }
                                                                            } finally {
                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$291, thread);
                                                                            }
                                                                        }
                                                                    } else {
                                                                        cdestructuring_bind_error(datum, $list116);
                                                                    }
                                                                    csome_list_var2 = csome_list_var2.rest();
                                                                    instance_tuple = csome_list_var2.first();
                                                                } 
                                                            }
                                                        } else
                                                            if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                SubLObject cdolist_list_var_$306;
                                                                final SubLObject new_list = cdolist_list_var_$306 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                SubLObject generating_fn = NIL;
                                                                generating_fn = cdolist_list_var_$306.first();
                                                                while (NIL != cdolist_list_var_$306) {
                                                                    final SubLObject _prev_bind_0_$293 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                        final SubLObject sol2;
                                                                        final SubLObject link_nodes3 = sol2 = funcall(generating_fn, node);
                                                                        if (NIL != set.set_p(sol2)) {
                                                                            final SubLObject set_contents_var2 = set.do_set_internal(sol2);
                                                                            SubLObject basis_object2;
                                                                            SubLObject state2;
                                                                            SubLObject ins3;
                                                                            for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); NIL == set_contents.do_set_contents_doneP(basis_object2, state2); state2 = set_contents.do_set_contents_update_state(state2)) {
                                                                                ins3 = set_contents.do_set_contents_next(basis_object2, state2);
                                                                                if ((NIL != set_contents.do_set_contents_element_validP(state2, ins3)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                    if (NIL != funcall(pred, ins3)) {
                                                                                        count = add(count, ONE_INTEGER);
                                                                                    }
                                                                                }
                                                                            }
                                                                        } else
                                                                            if (sol2.isList()) {
                                                                                SubLObject csome_list_var3 = sol2;
                                                                                SubLObject ins4 = NIL;
                                                                                ins4 = csome_list_var3.first();
                                                                                while (NIL != csome_list_var3) {
                                                                                    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                        if (NIL != funcall(pred, ins4)) {
                                                                                            count = add(count, ONE_INTEGER);
                                                                                        }
                                                                                    }
                                                                                    csome_list_var3 = csome_list_var3.rest();
                                                                                    ins4 = csome_list_var3.first();
                                                                                } 
                                                                            } else {
                                                                                Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                                            }

                                                                    } finally {
                                                                        sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$293, thread);
                                                                    }
                                                                    cdolist_list_var_$306 = cdolist_list_var_$306.rest();
                                                                    generating_fn = cdolist_list_var_$306.first();
                                                                } 
                                                            }

                                                    } finally {
                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$289, thread);
                                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$288, thread);
                                                    }
                                                    cdolist_list_var = cdolist_list_var.rest();
                                                    module_var = cdolist_list_var.first();
                                                } 
                                                SubLObject cdolist_list_var2;
                                                final SubLObject accessible_modules2 = cdolist_list_var2 = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)));
                                                SubLObject module_var2 = NIL;
                                                module_var2 = cdolist_list_var2.first();
                                                while (NIL != cdolist_list_var2) {
                                                    final SubLObject _prev_bind_0_$294 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                    final SubLObject _prev_bind_1_$290 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                    try {
                                                        sbhl_module_vars.$sbhl_module$.bind(module_var2, thread);
                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                        final SubLObject node2 = function_terms.naut_to_nart(node_var_$282);
                                                        if (NIL != sbhl_link_vars.sbhl_node_object_p(node2)) {
                                                            final SubLObject d_link2 = sbhl_graphs.get_sbhl_graph_link(node2, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                            if (NIL != d_link2) {
                                                                final SubLObject mt_links2 = sbhl_links.get_sbhl_mt_links(d_link2, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                if (NIL != mt_links2) {
                                                                    SubLObject iteration_state2;
                                                                    for (iteration_state2 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links2)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state2); iteration_state2 = dictionary_contents.do_dictionary_contents_next(iteration_state2)) {
                                                                        thread.resetMultipleValues();
                                                                        final SubLObject mt_$298 = dictionary_contents.do_dictionary_contents_key_value(iteration_state2);
                                                                        final SubLObject tv_links2 = thread.secondMultipleValue();
                                                                        thread.resetMultipleValues();
                                                                        if (NIL != mt_relevance_macros.relevant_mtP(mt_$298)) {
                                                                            final SubLObject _prev_bind_0_$295 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt_$298, thread);
                                                                                SubLObject iteration_state_$299;
                                                                                for (iteration_state_$299 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links2)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$299); iteration_state_$299 = dictionary_contents.do_dictionary_contents_next(iteration_state_$299)) {
                                                                                    thread.resetMultipleValues();
                                                                                    final SubLObject tv_$301 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$299);
                                                                                    final SubLObject link_nodes4 = thread.secondMultipleValue();
                                                                                    thread.resetMultipleValues();
                                                                                    if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$301)) {
                                                                                        final SubLObject _prev_bind_0_$296 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv_$301, thread);
                                                                                            final SubLObject sol3 = link_nodes4;
                                                                                            if (NIL != set.set_p(sol3)) {
                                                                                                final SubLObject set_contents_var3 = set.do_set_internal(sol3);
                                                                                                SubLObject basis_object3;
                                                                                                SubLObject state3;
                                                                                                SubLObject node_vars_link_node;
                                                                                                for (basis_object3 = set_contents.do_set_contents_basis_object(set_contents_var3), state3 = NIL, state3 = set_contents.do_set_contents_initial_state(basis_object3, set_contents_var3); NIL == set_contents.do_set_contents_doneP(basis_object3, state3); state3 = set_contents.do_set_contents_update_state(state3)) {
                                                                                                    node_vars_link_node = set_contents.do_set_contents_next(basis_object3, state3);
                                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state3, node_vars_link_node)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED))) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                        deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                    }
                                                                                                }
                                                                                            } else
                                                                                                if (sol3.isList()) {
                                                                                                    SubLObject csome_list_var4 = sol3;
                                                                                                    SubLObject node_vars_link_node2 = NIL;
                                                                                                    node_vars_link_node2 = csome_list_var4.first();
                                                                                                    while (NIL != csome_list_var4) {
                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node2, UNPROVIDED)) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node2, UNPROVIDED);
                                                                                                            deck.deck_push(node_vars_link_node2, recur_deck);
                                                                                                        }
                                                                                                        csome_list_var4 = csome_list_var4.rest();
                                                                                                        node_vars_link_node2 = csome_list_var4.first();
                                                                                                    } 
                                                                                                } else {
                                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol3);
                                                                                                }

                                                                                        } finally {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$296, thread);
                                                                                        }
                                                                                    }
                                                                                }
                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state_$299);
                                                                            } finally {
                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$295, thread);
                                                                            }
                                                                        }
                                                                    }
                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state2);
                                                                }
                                                            } else {
                                                                sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str40$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                            }
                                                        } else
                                                            if (NIL != obsolete.cnat_p(node2, UNPROVIDED)) {
                                                                SubLObject cdolist_list_var_$307;
                                                                final SubLObject new_list2 = cdolist_list_var_$307 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                SubLObject generating_fn2 = NIL;
                                                                generating_fn2 = cdolist_list_var_$307.first();
                                                                while (NIL != cdolist_list_var_$307) {
                                                                    final SubLObject _prev_bind_0_$297 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn2, thread);
                                                                        final SubLObject sol4;
                                                                        final SubLObject link_nodes5 = sol4 = funcall(generating_fn2, node2);
                                                                        if (NIL != set.set_p(sol4)) {
                                                                            final SubLObject set_contents_var4 = set.do_set_internal(sol4);
                                                                            SubLObject basis_object4;
                                                                            SubLObject state4;
                                                                            SubLObject node_vars_link_node3;
                                                                            for (basis_object4 = set_contents.do_set_contents_basis_object(set_contents_var4), state4 = NIL, state4 = set_contents.do_set_contents_initial_state(basis_object4, set_contents_var4); NIL == set_contents.do_set_contents_doneP(basis_object4, state4); state4 = set_contents.do_set_contents_update_state(state4)) {
                                                                                node_vars_link_node3 = set_contents.do_set_contents_next(basis_object4, state4);
                                                                                if ((NIL != set_contents.do_set_contents_element_validP(state4, node_vars_link_node3)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node3, UNPROVIDED))) {
                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node3, UNPROVIDED);
                                                                                    deck.deck_push(node_vars_link_node3, recur_deck);
                                                                                }
                                                                            }
                                                                        } else
                                                                            if (sol4.isList()) {
                                                                                SubLObject csome_list_var5 = sol4;
                                                                                SubLObject node_vars_link_node4 = NIL;
                                                                                node_vars_link_node4 = csome_list_var5.first();
                                                                                while (NIL != csome_list_var5) {
                                                                                    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node4, UNPROVIDED)) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node4, UNPROVIDED);
                                                                                        deck.deck_push(node_vars_link_node4, recur_deck);
                                                                                    }
                                                                                    csome_list_var5 = csome_list_var5.rest();
                                                                                    node_vars_link_node4 = csome_list_var5.first();
                                                                                } 
                                                                            } else {
                                                                                Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol4);
                                                                            }

                                                                    } finally {
                                                                        sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$297, thread);
                                                                    }
                                                                    cdolist_list_var_$307 = cdolist_list_var_$307.rest();
                                                                    generating_fn2 = cdolist_list_var_$307.first();
                                                                } 
                                                            }

                                                    } finally {
                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$290, thread);
                                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$294, thread);
                                                    }
                                                    cdolist_list_var2 = cdolist_list_var2.rest();
                                                    module_var2 = cdolist_list_var2.first();
                                                } 
                                                node_var_$282 = deck.deck_pop(recur_deck);
                                            } 
                                        } finally {
                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_$291, thread);
                                            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_$288, thread);
                                            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_$287, thread);
                                        }
                                    } else {
                                        sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str117$Node__a_does_not_pass_sbhl_type_t, collection, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    }
                                } finally {
                                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_$290, thread);
                                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_$287, thread);
                                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$286, thread);
                                }
                            } finally {
                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$286, thread);
                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$285, thread);
                            }
                        } finally {
                            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$285, thread);
                            mt_relevance_macros.$mt$.rebind(_prev_bind_0_$284, thread);
                        }
                    } finally {
                        final SubLObject _prev_bind_0_$298 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            final SubLObject _values = getValuesAsVector();
                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            restoreValuesFromVector(_values);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$298, thread);
                        }
                    }
                } finally {
                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$283, thread);
                }
            } finally {
                final SubLObject _prev_bind_0_$299 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values2 = getValuesAsVector();
                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                    restoreValuesFromVector(_values2);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$299, thread);
                }
            }
        } finally {
            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_2, thread);
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0, thread);
        }
        return count;
    }/**
     * Counts the number of quoted instances in COLLECTION that pass PRED
     * and then returns the count.
     */


    /**
     *
     *
     * @return boolean; whether COLLECTION has exactly NUM quoted instances in MT with TV.
     */
    @LispMethod(comment = "@return boolean; whether COLLECTION has exactly NUM quoted instances in MT with TV.")
    public static final SubLObject count_all_quoted_instances_E_alt(SubLObject collection, SubLObject num, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject count = ZERO_INTEGER;
                SubLObject GP = NIL;
                SubLObject node_var = collection;
                {
                    SubLObject _prev_bind_0 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                    try {
                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$quotedIsa), thread);
                        sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        if (NIL == GP) {
                            {
                                SubLObject node_var_351 = node_var;
                                SubLObject deck_type = (false) ? ((SubLObject) ($QUEUE)) : $STACK;
                                SubLObject recur_deck = deck.create_deck(deck_type);
                                {
                                    SubLObject _prev_bind_0_352 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                    try {
                                        sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                        {
                                            SubLObject mt_var = mt;
                                            {
                                                SubLObject _prev_bind_0_353 = mt_relevance_macros.$mt$.currentBinding(thread);
                                                SubLObject _prev_bind_1_354 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                                SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                                try {
                                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                                    {
                                                        SubLObject tv_var = tv;
                                                        {
                                                            SubLObject _prev_bind_0_355 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                                            SubLObject _prev_bind_1_356 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                                            try {
                                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                                if (NIL != tv_var) {
                                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                                            {
                                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                if (pcase_var.eql($ERROR)) {
                                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                } else {
                                                                                    if (pcase_var.eql($CERROR)) {
                                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                    } else {
                                                                                        if (pcase_var.eql($WARN)) {
                                                                                            Errors.warn($str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                        } else {
                                                                                            Errors.warn($str_alt36$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                            Errors.cerror($$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                {
                                                                    SubLObject _prev_bind_0_357 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                                                    SubLObject _prev_bind_1_358 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                                                    SubLObject _prev_bind_2_359 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)), thread);
                                                                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)), thread);
                                                                        if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node_var, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                            {
                                                                                SubLObject _prev_bind_0_360 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_361 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_362 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                                                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_var_351, UNPROVIDED);
                                                                                    while ((NIL != node_var_351) && (NIL == GP)) {
                                                                                        {
                                                                                            SubLObject tt_node_var = node_var_351;
                                                                                            SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$quotedIsa));
                                                                                            SubLObject rest = NIL;
                                                                                            for (rest = accessible_modules; !((NIL != GP) || (NIL == rest)); rest = rest.rest()) {
                                                                                                {
                                                                                                    SubLObject module_var = rest.first();
                                                                                                    {
                                                                                                        SubLObject _prev_bind_0_363 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                                        SubLObject _prev_bind_1_364 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                        try {
                                                                                                            sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                            {
                                                                                                                SubLObject node = function_terms.naut_to_nart(tt_node_var);
                                                                                                                if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                                    {
                                                                                                                        SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                        if (NIL != d_link) {
                                                                                                                            {
                                                                                                                                SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                                if (NIL != mt_links) {
                                                                                                                                    {
                                                                                                                                        SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                                        while (!((NIL != GP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state)))) {
                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                            {
                                                                                                                                                SubLObject mt_365 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                                SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                                thread.resetMultipleValues();
                                                                                                                                                if (NIL != mt_relevance_macros.relevant_mtP(mt_365)) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject _prev_bind_0_366 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                        try {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.bind(mt_365, thread);
                                                                                                                                                            {
                                                                                                                                                                SubLObject iteration_state_367 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                                while (!((NIL != GP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state_367)))) {
                                                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject tv_368 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_367);
                                                                                                                                                                        SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_368)) {
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject _prev_bind_0_369 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                                try {
                                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv_368, thread);
                                                                                                                                                                                    {
                                                                                                                                                                                        SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                                        SubLObject rest_370 = NIL;
                                                                                                                                                                                        for (rest_370 = new_list; !((NIL != GP) || (NIL == rest_370)); rest_370 = rest_370.rest()) {
                                                                                                                                                                                            {
                                                                                                                                                                                                SubLObject ins = rest_370.first();
                                                                                                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                                                                    count = add(count, ONE_INTEGER);
                                                                                                                                                                                                    if (count.numG(num)) {
                                                                                                                                                                                                        GP = T;
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                } finally {
                                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_369, thread);
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        iteration_state_367 = dictionary_contents.do_dictionary_contents_next(iteration_state_367);
                                                                                                                                                                    }
                                                                                                                                                                } 
                                                                                                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state_367);
                                                                                                                                                            }
                                                                                                                                                        } finally {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_366, thread);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                            }
                                                                                                                                        } 
                                                                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        } else {
                                                                                                                            sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt38$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                        }
                                                                                                                    }
                                                                                                                    if (NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) {
                                                                                                                        if (NIL == GP) {
                                                                                                                            {
                                                                                                                                SubLObject csome_list_var = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                                                                                SubLObject instance_tuple = NIL;
                                                                                                                                for (instance_tuple = csome_list_var.first(); !((NIL != GP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , instance_tuple = csome_list_var.first()) {
                                                                                                                                    {
                                                                                                                                        SubLObject datum = instance_tuple;
                                                                                                                                        SubLObject current = datum;
                                                                                                                                        SubLObject link_node = NIL;
                                                                                                                                        SubLObject mt_371 = NIL;
                                                                                                                                        SubLObject tv_372 = NIL;
                                                                                                                                        destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                                        link_node = current.first();
                                                                                                                                        current = current.rest();
                                                                                                                                        destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                                        mt_371 = current.first();
                                                                                                                                        current = current.rest();
                                                                                                                                        destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                                        tv_372 = current.first();
                                                                                                                                        current = current.rest();
                                                                                                                                        if (NIL == current) {
                                                                                                                                            if (NIL != mt_relevance_macros.relevant_mtP(mt_371)) {
                                                                                                                                                {
                                                                                                                                                    SubLObject _prev_bind_0_373 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                    try {
                                                                                                                                                        sbhl_link_vars.$sbhl_link_mt$.bind(mt_371, thread);
                                                                                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_372)) {
                                                                                                                                                            {
                                                                                                                                                                SubLObject _prev_bind_0_374 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                try {
                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv_372, thread);
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject link_nodes = list(link_node);
                                                                                                                                                                        SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                        SubLObject rest_375 = NIL;
                                                                                                                                                                        for (rest_375 = new_list; !((NIL != GP) || (NIL == rest_375)); rest_375 = rest_375.rest()) {
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject ins = rest_375.first();
                                                                                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                                                    count = add(count, ONE_INTEGER);
                                                                                                                                                                                    if (count.numG(num)) {
                                                                                                                                                                                        GP = T;
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                } finally {
                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_374, thread);
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    } finally {
                                                                                                                                                        sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_373, thread);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } else {
                                                                                                                                            cdestructuring_bind_error(datum, $list_alt111);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                                        {
                                                                                                                            SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                            SubLObject rest_376 = NIL;
                                                                                                                            for (rest_376 = new_list; !((NIL != GP) || (NIL == rest_376)); rest_376 = rest_376.rest()) {
                                                                                                                                {
                                                                                                                                    SubLObject generating_fn = rest_376.first();
                                                                                                                                    {
                                                                                                                                        SubLObject _prev_bind_0_377 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                                        try {
                                                                                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                            {
                                                                                                                                                SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                                SubLObject new_list_378 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                SubLObject rest_379 = NIL;
                                                                                                                                                for (rest_379 = new_list_378; !((NIL != GP) || (NIL == rest_379)); rest_379 = rest_379.rest()) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject ins = rest_379.first();
                                                                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                            count = add(count, ONE_INTEGER);
                                                                                                                                                            if (count.numG(num)) {
                                                                                                                                                                GP = T;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } finally {
                                                                                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_377, thread);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        } finally {
                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_364, thread);
                                                                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_363, thread);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        {
                                                                                            SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)));
                                                                                            SubLObject rest = NIL;
                                                                                            for (rest = accessible_modules; !((NIL != GP) || (NIL == rest)); rest = rest.rest()) {
                                                                                                {
                                                                                                    SubLObject module_var = rest.first();
                                                                                                    {
                                                                                                        SubLObject _prev_bind_0_380 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                                        SubLObject _prev_bind_1_381 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                        try {
                                                                                                            sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                            {
                                                                                                                SubLObject node = function_terms.naut_to_nart(node_var_351);
                                                                                                                if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                                    {
                                                                                                                        SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                        if (NIL != d_link) {
                                                                                                                            {
                                                                                                                                SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                                if (NIL != mt_links) {
                                                                                                                                    {
                                                                                                                                        SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                                        while (!((NIL != GP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state)))) {
                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                            {
                                                                                                                                                SubLObject mt_382 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                                SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                                thread.resetMultipleValues();
                                                                                                                                                if (NIL != mt_relevance_macros.relevant_mtP(mt_382)) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject _prev_bind_0_383 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                        try {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.bind(mt_382, thread);
                                                                                                                                                            {
                                                                                                                                                                SubLObject iteration_state_384 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                                while (!((NIL != GP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state_384)))) {
                                                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject tv_385 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_384);
                                                                                                                                                                        SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_385)) {
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject _prev_bind_0_386 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                                try {
                                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv_385, thread);
                                                                                                                                                                                    {
                                                                                                                                                                                        SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                                        SubLObject rest_387 = NIL;
                                                                                                                                                                                        for (rest_387 = new_list; !((NIL != GP) || (NIL == rest_387)); rest_387 = rest_387.rest()) {
                                                                                                                                                                                            {
                                                                                                                                                                                                SubLObject node_vars_link_node = rest_387.first();
                                                                                                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
                                                                                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                                                                                                                    deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                } finally {
                                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_386, thread);
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        iteration_state_384 = dictionary_contents.do_dictionary_contents_next(iteration_state_384);
                                                                                                                                                                    }
                                                                                                                                                                } 
                                                                                                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state_384);
                                                                                                                                                            }
                                                                                                                                                        } finally {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_383, thread);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                            }
                                                                                                                                        } 
                                                                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        } else {
                                                                                                                            sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt38$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                        }
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                                        {
                                                                                                                            SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                            SubLObject rest_388 = NIL;
                                                                                                                            for (rest_388 = new_list; !((NIL != GP) || (NIL == rest_388)); rest_388 = rest_388.rest()) {
                                                                                                                                {
                                                                                                                                    SubLObject generating_fn = rest_388.first();
                                                                                                                                    {
                                                                                                                                        SubLObject _prev_bind_0_389 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                                        try {
                                                                                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                            {
                                                                                                                                                SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                                SubLObject new_list_390 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                SubLObject rest_391 = NIL;
                                                                                                                                                for (rest_391 = new_list_390; !((NIL != GP) || (NIL == rest_391)); rest_391 = rest_391.rest()) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject node_vars_link_node = rest_391.first();
                                                                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
                                                                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                                                                            deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } finally {
                                                                                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_389, thread);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        } finally {
                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_381, thread);
                                                                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_380, thread);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        node_var_351 = deck.deck_pop(recur_deck);
                                                                                    } 
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_362, thread);
                                                                                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_361, thread);
                                                                                    sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_360, thread);
                                                                                }
                                                                            }
                                                                        } else {
                                                                            sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt112$Node__a_does_not_pass_sbhl_type_t, node_var, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                        }
                                                                    } finally {
                                                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                                                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_359, thread);
                                                                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_358, thread);
                                                                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_357, thread);
                                                                    }
                                                                }
                                                            } finally {
                                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_356, thread);
                                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_355, thread);
                                                            }
                                                        }
                                                    }
                                                } finally {
                                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_354, thread);
                                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_353, thread);
                                                }
                                            }
                                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                        }
                                    } finally {
                                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_352, thread);
                                    }
                                }
                            }
                        }
                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                    } finally {
                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_1, thread);
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return numE(count, num);
            }
        }
    }

    /**
     *
     *
     * @return boolean; whether COLLECTION has exactly NUM quoted instances in MT with TV.
     */
    @LispMethod(comment = "@return boolean; whether COLLECTION has exactly NUM quoted instances in MT with TV.")
    public static SubLObject count_all_quoted_instances_E(final SubLObject collection, final SubLObject num, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject count = ZERO_INTEGER;
        SubLObject GP = NIL;
        final SubLObject _prev_bind_0 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
        try {
            sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$quotedIsa), thread);
            sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
            try {
                if (NIL == GP) {
                    SubLObject node_var_$319 = collection;
                    final SubLObject deck_type = $STACK;
                    final SubLObject recur_deck = deck.create_deck(deck_type);
                    final SubLObject _prev_bind_0_$320 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                    try {
                        sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        try {
                            final SubLObject mt_var = mt;
                            final SubLObject _prev_bind_0_$321 = mt_relevance_macros.$mt$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$322 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                            final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                            try {
                                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                final SubLObject tv_var = tv;
                                final SubLObject _prev_bind_0_$322 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$323 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                        if (pcase_var.eql($ERROR)) {
                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        } else
                                            if (pcase_var.eql($CERROR)) {
                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var.eql($WARN)) {
                                                    Errors.warn($str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                } else {
                                                    Errors.warn($str37$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                    Errors.cerror($$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                }


                                    }
                                    final SubLObject _prev_bind_0_$323 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                    final SubLObject _prev_bind_1_$324 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                    final SubLObject _prev_bind_2_$327 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                    final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                    final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)), thread);
                                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)), thread);
                                        if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(collection, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                            final SubLObject _prev_bind_0_$324 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                            final SubLObject _prev_bind_1_$325 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                            final SubLObject _prev_bind_2_$328 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_var_$319, UNPROVIDED);
                                                while ((NIL != node_var_$319) && (NIL == GP)) {
                                                    final SubLObject tt_node_var = node_var_$319;
                                                    final SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$quotedIsa));
                                                    SubLObject rest;
                                                    SubLObject module_var;
                                                    SubLObject _prev_bind_0_$325;
                                                    SubLObject _prev_bind_1_$326;
                                                    SubLObject node;
                                                    SubLObject d_link;
                                                    SubLObject mt_links;
                                                    SubLObject iteration_state;
                                                    SubLObject mt_$333;
                                                    SubLObject tv_links;
                                                    SubLObject _prev_bind_0_$326;
                                                    SubLObject iteration_state_$335;
                                                    SubLObject tv_$336;
                                                    SubLObject link_nodes;
                                                    SubLObject _prev_bind_0_$327;
                                                    SubLObject sol;
                                                    SubLObject set_contents_var;
                                                    SubLObject basis_object;
                                                    SubLObject state;
                                                    SubLObject ins;
                                                    SubLObject csome_list_var;
                                                    SubLObject ins2;
                                                    SubLObject csome_list_var2;
                                                    SubLObject instance_tuple;
                                                    SubLObject current;
                                                    SubLObject datum;
                                                    SubLObject link_node;
                                                    SubLObject mt_$334;
                                                    SubLObject tv_$337;
                                                    SubLObject _prev_bind_0_$328;
                                                    SubLObject _prev_bind_0_$329;
                                                    SubLObject link_nodes2;
                                                    SubLObject csome_list_var_$342;
                                                    SubLObject new_list;
                                                    SubLObject rest_$343;
                                                    SubLObject generating_fn;
                                                    SubLObject _prev_bind_0_$330;
                                                    SubLObject sol2;
                                                    SubLObject link_nodes3;
                                                    SubLObject set_contents_var2;
                                                    SubLObject basis_object2;
                                                    SubLObject state2;
                                                    SubLObject ins3;
                                                    SubLObject csome_list_var3;
                                                    SubLObject ins4;
                                                    for (rest = NIL, rest = accessible_modules; (NIL == GP) && (NIL != rest); rest = rest.rest()) {
                                                        module_var = rest.first();
                                                        _prev_bind_0_$325 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                        _prev_bind_1_$326 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                        try {
                                                            sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                            node = function_terms.naut_to_nart(tt_node_var);
                                                            if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                if (NIL != d_link) {
                                                                    mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                    if (NIL != mt_links) {
                                                                        for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); (NIL == GP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                                                            thread.resetMultipleValues();
                                                                            mt_$333 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                            tv_links = thread.secondMultipleValue();
                                                                            thread.resetMultipleValues();
                                                                            if (NIL != mt_relevance_macros.relevant_mtP(mt_$333)) {
                                                                                _prev_bind_0_$326 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_$333, thread);
                                                                                    for (iteration_state_$335 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); (NIL == GP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$335)); iteration_state_$335 = dictionary_contents.do_dictionary_contents_next(iteration_state_$335)) {
                                                                                        thread.resetMultipleValues();
                                                                                        tv_$336 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$335);
                                                                                        link_nodes = thread.secondMultipleValue();
                                                                                        thread.resetMultipleValues();
                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$336)) {
                                                                                            _prev_bind_0_$327 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.bind(tv_$336, thread);
                                                                                                sol = link_nodes;
                                                                                                if (NIL != set.set_p(sol)) {
                                                                                                    set_contents_var = set.do_set_internal(sol);
                                                                                                    for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == GP) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                        ins = set_contents.do_set_contents_next(basis_object, state);
                                                                                                        if ((NIL != set_contents.do_set_contents_element_validP(state, ins)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                            count = add(count, ONE_INTEGER);
                                                                                                            if (count.numG(num)) {
                                                                                                                GP = T;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } else
                                                                                                    if (sol.isList()) {
                                                                                                        if (NIL == GP) {
                                                                                                            csome_list_var = sol;
                                                                                                            ins2 = NIL;
                                                                                                            ins2 = csome_list_var.first();
                                                                                                            while ((NIL == GP) && (NIL != csome_list_var)) {
                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                    count = add(count, ONE_INTEGER);
                                                                                                                    if (count.numG(num)) {
                                                                                                                        GP = T;
                                                                                                                    }
                                                                                                                }
                                                                                                                csome_list_var = csome_list_var.rest();
                                                                                                                ins2 = csome_list_var.first();
                                                                                                            } 
                                                                                                        }
                                                                                                    } else {
                                                                                                        Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                    }

                                                                                            } finally {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$327, thread);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state_$335);
                                                                                } finally {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$326, thread);
                                                                                }
                                                                            }
                                                                        }
                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                    }
                                                                } else {
                                                                    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str40$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                }
                                                                if ((NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) && (NIL == GP)) {
                                                                    csome_list_var2 = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                    instance_tuple = NIL;
                                                                    instance_tuple = csome_list_var2.first();
                                                                    while ((NIL == GP) && (NIL != csome_list_var2)) {
                                                                        datum = current = instance_tuple;
                                                                        link_node = NIL;
                                                                        mt_$334 = NIL;
                                                                        tv_$337 = NIL;
                                                                        destructuring_bind_must_consp(current, datum, $list116);
                                                                        link_node = current.first();
                                                                        current = current.rest();
                                                                        destructuring_bind_must_consp(current, datum, $list116);
                                                                        mt_$334 = current.first();
                                                                        current = current.rest();
                                                                        destructuring_bind_must_consp(current, datum, $list116);
                                                                        tv_$337 = current.first();
                                                                        current = current.rest();
                                                                        if (NIL == current) {
                                                                            if (NIL != mt_relevance_macros.relevant_mtP(mt_$334)) {
                                                                                _prev_bind_0_$328 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_$334, thread);
                                                                                    if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$337)) {
                                                                                        _prev_bind_0_$329 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv_$337, thread);
                                                                                            link_nodes2 = sol = list(link_node);
                                                                                            if (NIL != set.set_p(sol)) {
                                                                                                set_contents_var = set.do_set_internal(sol);
                                                                                                for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == GP) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                    ins = set_contents.do_set_contents_next(basis_object, state);
                                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state, ins)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                        count = add(count, ONE_INTEGER);
                                                                                                        if (count.numG(num)) {
                                                                                                            GP = T;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } else
                                                                                                if (sol.isList()) {
                                                                                                    if (NIL == GP) {
                                                                                                        csome_list_var_$342 = sol;
                                                                                                        ins2 = NIL;
                                                                                                        ins2 = csome_list_var_$342.first();
                                                                                                        while ((NIL == GP) && (NIL != csome_list_var_$342)) {
                                                                                                            if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                count = add(count, ONE_INTEGER);
                                                                                                                if (count.numG(num)) {
                                                                                                                    GP = T;
                                                                                                                }
                                                                                                            }
                                                                                                            csome_list_var_$342 = csome_list_var_$342.rest();
                                                                                                            ins2 = csome_list_var_$342.first();
                                                                                                        } 
                                                                                                    }
                                                                                                } else {
                                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                }

                                                                                        } finally {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$329, thread);
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$328, thread);
                                                                                }
                                                                            }
                                                                        } else {
                                                                            cdestructuring_bind_error(datum, $list116);
                                                                        }
                                                                        csome_list_var2 = csome_list_var2.rest();
                                                                        instance_tuple = csome_list_var2.first();
                                                                    } 
                                                                }
                                                            } else
                                                                if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                    new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                    for (rest_$343 = NIL, rest_$343 = new_list; (NIL == GP) && (NIL != rest_$343); rest_$343 = rest_$343.rest()) {
                                                                        generating_fn = rest_$343.first();
                                                                        _prev_bind_0_$330 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                            link_nodes3 = sol2 = funcall(generating_fn, node);
                                                                            if (NIL != set.set_p(sol2)) {
                                                                                set_contents_var2 = set.do_set_internal(sol2);
                                                                                for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); (NIL == GP) && (NIL == set_contents.do_set_contents_doneP(basis_object2, state2)); state2 = set_contents.do_set_contents_update_state(state2)) {
                                                                                    ins3 = set_contents.do_set_contents_next(basis_object2, state2);
                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state2, ins3)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                        count = add(count, ONE_INTEGER);
                                                                                        if (count.numG(num)) {
                                                                                            GP = T;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } else
                                                                                if (sol2.isList()) {
                                                                                    if (NIL == GP) {
                                                                                        csome_list_var3 = sol2;
                                                                                        ins4 = NIL;
                                                                                        ins4 = csome_list_var3.first();
                                                                                        while ((NIL == GP) && (NIL != csome_list_var3)) {
                                                                                            if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(ins4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                count = add(count, ONE_INTEGER);
                                                                                                if (count.numG(num)) {
                                                                                                    GP = T;
                                                                                                }
                                                                                            }
                                                                                            csome_list_var3 = csome_list_var3.rest();
                                                                                            ins4 = csome_list_var3.first();
                                                                                        } 
                                                                                    }
                                                                                } else {
                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                                                }

                                                                        } finally {
                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$330, thread);
                                                                        }
                                                                    }
                                                                }

                                                        } finally {
                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$326, thread);
                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$325, thread);
                                                        }
                                                    }
                                                    final SubLObject accessible_modules2 = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)));
                                                    SubLObject rest2;
                                                    SubLObject module_var2;
                                                    SubLObject _prev_bind_0_$331;
                                                    SubLObject _prev_bind_1_$327;
                                                    SubLObject node2;
                                                    SubLObject d_link2;
                                                    SubLObject mt_links2;
                                                    SubLObject iteration_state2;
                                                    SubLObject mt_$335;
                                                    SubLObject tv_links2;
                                                    SubLObject _prev_bind_0_$332;
                                                    SubLObject iteration_state_$336;
                                                    SubLObject tv_$338;
                                                    SubLObject link_nodes4;
                                                    SubLObject _prev_bind_0_$333;
                                                    SubLObject sol3;
                                                    SubLObject set_contents_var3;
                                                    SubLObject basis_object3;
                                                    SubLObject state3;
                                                    SubLObject node_vars_link_node;
                                                    SubLObject csome_list_var4;
                                                    SubLObject node_vars_link_node2;
                                                    SubLObject new_list2;
                                                    SubLObject rest_$344;
                                                    SubLObject generating_fn2;
                                                    SubLObject _prev_bind_0_$334;
                                                    SubLObject sol4;
                                                    SubLObject link_nodes5;
                                                    SubLObject set_contents_var4;
                                                    SubLObject basis_object4;
                                                    SubLObject state4;
                                                    SubLObject node_vars_link_node3;
                                                    SubLObject csome_list_var5;
                                                    SubLObject node_vars_link_node4;
                                                    for (rest2 = NIL, rest2 = accessible_modules2; (NIL == GP) && (NIL != rest2); rest2 = rest2.rest()) {
                                                        module_var2 = rest2.first();
                                                        _prev_bind_0_$331 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                        _prev_bind_1_$327 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                        try {
                                                            sbhl_module_vars.$sbhl_module$.bind(module_var2, thread);
                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                            node2 = function_terms.naut_to_nart(node_var_$319);
                                                            if (NIL != sbhl_link_vars.sbhl_node_object_p(node2)) {
                                                                d_link2 = sbhl_graphs.get_sbhl_graph_link(node2, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                if (NIL != d_link2) {
                                                                    mt_links2 = sbhl_links.get_sbhl_mt_links(d_link2, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                    if (NIL != mt_links2) {
                                                                        for (iteration_state2 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links2)); (NIL == GP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state2)); iteration_state2 = dictionary_contents.do_dictionary_contents_next(iteration_state2)) {
                                                                            thread.resetMultipleValues();
                                                                            mt_$335 = dictionary_contents.do_dictionary_contents_key_value(iteration_state2);
                                                                            tv_links2 = thread.secondMultipleValue();
                                                                            thread.resetMultipleValues();
                                                                            if (NIL != mt_relevance_macros.relevant_mtP(mt_$335)) {
                                                                                _prev_bind_0_$332 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_$335, thread);
                                                                                    for (iteration_state_$336 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links2)); (NIL == GP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$336)); iteration_state_$336 = dictionary_contents.do_dictionary_contents_next(iteration_state_$336)) {
                                                                                        thread.resetMultipleValues();
                                                                                        tv_$338 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$336);
                                                                                        link_nodes4 = thread.secondMultipleValue();
                                                                                        thread.resetMultipleValues();
                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$338)) {
                                                                                            _prev_bind_0_$333 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.bind(tv_$338, thread);
                                                                                                sol3 = link_nodes4;
                                                                                                if (NIL != set.set_p(sol3)) {
                                                                                                    set_contents_var3 = set.do_set_internal(sol3);
                                                                                                    for (basis_object3 = set_contents.do_set_contents_basis_object(set_contents_var3), state3 = NIL, state3 = set_contents.do_set_contents_initial_state(basis_object3, set_contents_var3); (NIL == GP) && (NIL == set_contents.do_set_contents_doneP(basis_object3, state3)); state3 = set_contents.do_set_contents_update_state(state3)) {
                                                                                                        node_vars_link_node = set_contents.do_set_contents_next(basis_object3, state3);
                                                                                                        if ((NIL != set_contents.do_set_contents_element_validP(state3, node_vars_link_node)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED))) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                            deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                        }
                                                                                                    }
                                                                                                } else
                                                                                                    if (sol3.isList()) {
                                                                                                        if (NIL == GP) {
                                                                                                            csome_list_var4 = sol3;
                                                                                                            node_vars_link_node2 = NIL;
                                                                                                            node_vars_link_node2 = csome_list_var4.first();
                                                                                                            while ((NIL == GP) && (NIL != csome_list_var4)) {
                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node2, UNPROVIDED)) {
                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node2, UNPROVIDED);
                                                                                                                    deck.deck_push(node_vars_link_node2, recur_deck);
                                                                                                                }
                                                                                                                csome_list_var4 = csome_list_var4.rest();
                                                                                                                node_vars_link_node2 = csome_list_var4.first();
                                                                                                            } 
                                                                                                        }
                                                                                                    } else {
                                                                                                        Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol3);
                                                                                                    }

                                                                                            } finally {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$333, thread);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state_$336);
                                                                                } finally {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$332, thread);
                                                                                }
                                                                            }
                                                                        }
                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state2);
                                                                    }
                                                                } else {
                                                                    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str40$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                }
                                                            } else
                                                                if (NIL != obsolete.cnat_p(node2, UNPROVIDED)) {
                                                                    new_list2 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                    for (rest_$344 = NIL, rest_$344 = new_list2; (NIL == GP) && (NIL != rest_$344); rest_$344 = rest_$344.rest()) {
                                                                        generating_fn2 = rest_$344.first();
                                                                        _prev_bind_0_$334 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn2, thread);
                                                                            link_nodes5 = sol4 = funcall(generating_fn2, node2);
                                                                            if (NIL != set.set_p(sol4)) {
                                                                                set_contents_var4 = set.do_set_internal(sol4);
                                                                                for (basis_object4 = set_contents.do_set_contents_basis_object(set_contents_var4), state4 = NIL, state4 = set_contents.do_set_contents_initial_state(basis_object4, set_contents_var4); (NIL == GP) && (NIL == set_contents.do_set_contents_doneP(basis_object4, state4)); state4 = set_contents.do_set_contents_update_state(state4)) {
                                                                                    node_vars_link_node3 = set_contents.do_set_contents_next(basis_object4, state4);
                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state4, node_vars_link_node3)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node3, UNPROVIDED))) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node3, UNPROVIDED);
                                                                                        deck.deck_push(node_vars_link_node3, recur_deck);
                                                                                    }
                                                                                }
                                                                            } else
                                                                                if (sol4.isList()) {
                                                                                    if (NIL == GP) {
                                                                                        csome_list_var5 = sol4;
                                                                                        node_vars_link_node4 = NIL;
                                                                                        node_vars_link_node4 = csome_list_var5.first();
                                                                                        while ((NIL == GP) && (NIL != csome_list_var5)) {
                                                                                            if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node4, UNPROVIDED)) {
                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node4, UNPROVIDED);
                                                                                                deck.deck_push(node_vars_link_node4, recur_deck);
                                                                                            }
                                                                                            csome_list_var5 = csome_list_var5.rest();
                                                                                            node_vars_link_node4 = csome_list_var5.first();
                                                                                        } 
                                                                                    }
                                                                                } else {
                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol4);
                                                                                }

                                                                        } finally {
                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$334, thread);
                                                                        }
                                                                    }
                                                                }

                                                        } finally {
                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$327, thread);
                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$331, thread);
                                                        }
                                                    }
                                                    node_var_$319 = deck.deck_pop(recur_deck);
                                                } 
                                            } finally {
                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_$328, thread);
                                                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_$325, thread);
                                                sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_$324, thread);
                                            }
                                        } else {
                                            sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str117$Node__a_does_not_pass_sbhl_type_t, collection, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        }
                                    } finally {
                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_$327, thread);
                                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_$324, thread);
                                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$323, thread);
                                    }
                                } finally {
                                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$323, thread);
                                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$322, thread);
                                }
                            } finally {
                                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$322, thread);
                                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$321, thread);
                            }
                        } finally {
                            final SubLObject _prev_bind_0_$335 = $is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                $is_thread_performing_cleanupP$.bind(T, thread);
                                final SubLObject _values = getValuesAsVector();
                                sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                restoreValuesFromVector(_values);
                            } finally {
                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$335, thread);
                            }
                        }
                    } finally {
                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$320, thread);
                    }
                }
            } finally {
                final SubLObject _prev_bind_0_$336 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values2 = getValuesAsVector();
                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                    restoreValuesFromVector(_values2);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$336, thread);
                }
            }
        } finally {
            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_2, thread);
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0, thread);
        }
        return numE(count, num);
    }

    /**
     *
     *
     * @return boolean; whether COLLECTION has more than NUM quoted instances in MT with TV.
     */
    @LispMethod(comment = "@return boolean; whether COLLECTION has more than NUM quoted instances in MT with TV.")
    public static final SubLObject count_all_quoted_instances_G_alt(SubLObject collection, SubLObject num, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject count = ZERO_INTEGER;
                SubLObject GP = NIL;
                SubLObject node_var = collection;
                {
                    SubLObject _prev_bind_0 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                    try {
                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$quotedIsa), thread);
                        sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        if (NIL == GP) {
                            {
                                SubLObject node_var_392 = node_var;
                                SubLObject deck_type = (false) ? ((SubLObject) ($QUEUE)) : $STACK;
                                SubLObject recur_deck = deck.create_deck(deck_type);
                                {
                                    SubLObject _prev_bind_0_393 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                    try {
                                        sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                        {
                                            SubLObject mt_var = mt;
                                            {
                                                SubLObject _prev_bind_0_394 = mt_relevance_macros.$mt$.currentBinding(thread);
                                                SubLObject _prev_bind_1_395 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                                SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                                try {
                                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                                    {
                                                        SubLObject tv_var = tv;
                                                        {
                                                            SubLObject _prev_bind_0_396 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                                            SubLObject _prev_bind_1_397 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                                            try {
                                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                                if (NIL != tv_var) {
                                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                                            {
                                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                if (pcase_var.eql($ERROR)) {
                                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                } else {
                                                                                    if (pcase_var.eql($CERROR)) {
                                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                    } else {
                                                                                        if (pcase_var.eql($WARN)) {
                                                                                            Errors.warn($str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                        } else {
                                                                                            Errors.warn($str_alt36$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                            Errors.cerror($$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                {
                                                                    SubLObject _prev_bind_0_398 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                                                    SubLObject _prev_bind_1_399 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                                                    SubLObject _prev_bind_2_400 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)), thread);
                                                                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)), thread);
                                                                        if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node_var, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                            {
                                                                                SubLObject _prev_bind_0_401 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_402 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_403 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                                                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_var_392, UNPROVIDED);
                                                                                    while ((NIL != node_var_392) && (NIL == GP)) {
                                                                                        {
                                                                                            SubLObject tt_node_var = node_var_392;
                                                                                            SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$quotedIsa));
                                                                                            SubLObject rest = NIL;
                                                                                            for (rest = accessible_modules; !((NIL != GP) || (NIL == rest)); rest = rest.rest()) {
                                                                                                {
                                                                                                    SubLObject module_var = rest.first();
                                                                                                    {
                                                                                                        SubLObject _prev_bind_0_404 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                                        SubLObject _prev_bind_1_405 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                        try {
                                                                                                            sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                            {
                                                                                                                SubLObject node = function_terms.naut_to_nart(tt_node_var);
                                                                                                                if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                                    {
                                                                                                                        SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                        if (NIL != d_link) {
                                                                                                                            {
                                                                                                                                SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                                if (NIL != mt_links) {
                                                                                                                                    {
                                                                                                                                        SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                                        while (!((NIL != GP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state)))) {
                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                            {
                                                                                                                                                SubLObject mt_406 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                                SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                                thread.resetMultipleValues();
                                                                                                                                                if (NIL != mt_relevance_macros.relevant_mtP(mt_406)) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject _prev_bind_0_407 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                        try {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.bind(mt_406, thread);
                                                                                                                                                            {
                                                                                                                                                                SubLObject iteration_state_408 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                                while (!((NIL != GP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state_408)))) {
                                                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject tv_409 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_408);
                                                                                                                                                                        SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_409)) {
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject _prev_bind_0_410 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                                try {
                                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv_409, thread);
                                                                                                                                                                                    {
                                                                                                                                                                                        SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                                        SubLObject rest_411 = NIL;
                                                                                                                                                                                        for (rest_411 = new_list; !((NIL != GP) || (NIL == rest_411)); rest_411 = rest_411.rest()) {
                                                                                                                                                                                            {
                                                                                                                                                                                                SubLObject ins = rest_411.first();
                                                                                                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                                                                    count = add(count, ONE_INTEGER);
                                                                                                                                                                                                    if (count.numG(num)) {
                                                                                                                                                                                                        GP = T;
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                } finally {
                                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_410, thread);
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        iteration_state_408 = dictionary_contents.do_dictionary_contents_next(iteration_state_408);
                                                                                                                                                                    }
                                                                                                                                                                } 
                                                                                                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state_408);
                                                                                                                                                            }
                                                                                                                                                        } finally {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_407, thread);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                            }
                                                                                                                                        } 
                                                                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        } else {
                                                                                                                            sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt38$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                        }
                                                                                                                    }
                                                                                                                    if (NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) {
                                                                                                                        if (NIL == GP) {
                                                                                                                            {
                                                                                                                                SubLObject csome_list_var = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                                                                                SubLObject instance_tuple = NIL;
                                                                                                                                for (instance_tuple = csome_list_var.first(); !((NIL != GP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , instance_tuple = csome_list_var.first()) {
                                                                                                                                    {
                                                                                                                                        SubLObject datum = instance_tuple;
                                                                                                                                        SubLObject current = datum;
                                                                                                                                        SubLObject link_node = NIL;
                                                                                                                                        SubLObject mt_412 = NIL;
                                                                                                                                        SubLObject tv_413 = NIL;
                                                                                                                                        destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                                        link_node = current.first();
                                                                                                                                        current = current.rest();
                                                                                                                                        destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                                        mt_412 = current.first();
                                                                                                                                        current = current.rest();
                                                                                                                                        destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                                        tv_413 = current.first();
                                                                                                                                        current = current.rest();
                                                                                                                                        if (NIL == current) {
                                                                                                                                            if (NIL != mt_relevance_macros.relevant_mtP(mt_412)) {
                                                                                                                                                {
                                                                                                                                                    SubLObject _prev_bind_0_414 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                    try {
                                                                                                                                                        sbhl_link_vars.$sbhl_link_mt$.bind(mt_412, thread);
                                                                                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_413)) {
                                                                                                                                                            {
                                                                                                                                                                SubLObject _prev_bind_0_415 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                try {
                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv_413, thread);
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject link_nodes = list(link_node);
                                                                                                                                                                        SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                        SubLObject rest_416 = NIL;
                                                                                                                                                                        for (rest_416 = new_list; !((NIL != GP) || (NIL == rest_416)); rest_416 = rest_416.rest()) {
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject ins = rest_416.first();
                                                                                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                                                    count = add(count, ONE_INTEGER);
                                                                                                                                                                                    if (count.numG(num)) {
                                                                                                                                                                                        GP = T;
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                } finally {
                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_415, thread);
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    } finally {
                                                                                                                                                        sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_414, thread);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } else {
                                                                                                                                            cdestructuring_bind_error(datum, $list_alt111);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                                        {
                                                                                                                            SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                            SubLObject rest_417 = NIL;
                                                                                                                            for (rest_417 = new_list; !((NIL != GP) || (NIL == rest_417)); rest_417 = rest_417.rest()) {
                                                                                                                                {
                                                                                                                                    SubLObject generating_fn = rest_417.first();
                                                                                                                                    {
                                                                                                                                        SubLObject _prev_bind_0_418 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                                        try {
                                                                                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                            {
                                                                                                                                                SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                                SubLObject new_list_419 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                SubLObject rest_420 = NIL;
                                                                                                                                                for (rest_420 = new_list_419; !((NIL != GP) || (NIL == rest_420)); rest_420 = rest_420.rest()) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject ins = rest_420.first();
                                                                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                            count = add(count, ONE_INTEGER);
                                                                                                                                                            if (count.numG(num)) {
                                                                                                                                                                GP = T;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } finally {
                                                                                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_418, thread);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        } finally {
                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_405, thread);
                                                                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_404, thread);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        {
                                                                                            SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)));
                                                                                            SubLObject rest = NIL;
                                                                                            for (rest = accessible_modules; !((NIL != GP) || (NIL == rest)); rest = rest.rest()) {
                                                                                                {
                                                                                                    SubLObject module_var = rest.first();
                                                                                                    {
                                                                                                        SubLObject _prev_bind_0_421 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                                        SubLObject _prev_bind_1_422 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                        try {
                                                                                                            sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                            {
                                                                                                                SubLObject node = function_terms.naut_to_nart(node_var_392);
                                                                                                                if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                                    {
                                                                                                                        SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                        if (NIL != d_link) {
                                                                                                                            {
                                                                                                                                SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                                if (NIL != mt_links) {
                                                                                                                                    {
                                                                                                                                        SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                                        while (!((NIL != GP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state)))) {
                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                            {
                                                                                                                                                SubLObject mt_423 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                                SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                                thread.resetMultipleValues();
                                                                                                                                                if (NIL != mt_relevance_macros.relevant_mtP(mt_423)) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject _prev_bind_0_424 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                        try {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.bind(mt_423, thread);
                                                                                                                                                            {
                                                                                                                                                                SubLObject iteration_state_425 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                                while (!((NIL != GP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state_425)))) {
                                                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject tv_426 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_425);
                                                                                                                                                                        SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_426)) {
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject _prev_bind_0_427 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                                try {
                                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv_426, thread);
                                                                                                                                                                                    {
                                                                                                                                                                                        SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                                        SubLObject rest_428 = NIL;
                                                                                                                                                                                        for (rest_428 = new_list; !((NIL != GP) || (NIL == rest_428)); rest_428 = rest_428.rest()) {
                                                                                                                                                                                            {
                                                                                                                                                                                                SubLObject node_vars_link_node = rest_428.first();
                                                                                                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
                                                                                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                                                                                                                    deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                } finally {
                                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_427, thread);
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        iteration_state_425 = dictionary_contents.do_dictionary_contents_next(iteration_state_425);
                                                                                                                                                                    }
                                                                                                                                                                } 
                                                                                                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state_425);
                                                                                                                                                            }
                                                                                                                                                        } finally {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_424, thread);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                            }
                                                                                                                                        } 
                                                                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        } else {
                                                                                                                            sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt38$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                        }
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                                        {
                                                                                                                            SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                            SubLObject rest_429 = NIL;
                                                                                                                            for (rest_429 = new_list; !((NIL != GP) || (NIL == rest_429)); rest_429 = rest_429.rest()) {
                                                                                                                                {
                                                                                                                                    SubLObject generating_fn = rest_429.first();
                                                                                                                                    {
                                                                                                                                        SubLObject _prev_bind_0_430 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                                        try {
                                                                                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                            {
                                                                                                                                                SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                                SubLObject new_list_431 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                SubLObject rest_432 = NIL;
                                                                                                                                                for (rest_432 = new_list_431; !((NIL != GP) || (NIL == rest_432)); rest_432 = rest_432.rest()) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject node_vars_link_node = rest_432.first();
                                                                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
                                                                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                                                                            deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } finally {
                                                                                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_430, thread);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        } finally {
                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_422, thread);
                                                                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_421, thread);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        node_var_392 = deck.deck_pop(recur_deck);
                                                                                    } 
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_403, thread);
                                                                                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_402, thread);
                                                                                    sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_401, thread);
                                                                                }
                                                                            }
                                                                        } else {
                                                                            sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt112$Node__a_does_not_pass_sbhl_type_t, node_var, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                        }
                                                                    } finally {
                                                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                                                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_400, thread);
                                                                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_399, thread);
                                                                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_398, thread);
                                                                    }
                                                                }
                                                            } finally {
                                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_397, thread);
                                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_396, thread);
                                                            }
                                                        }
                                                    }
                                                } finally {
                                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_395, thread);
                                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_394, thread);
                                                }
                                            }
                                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                        }
                                    } finally {
                                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_393, thread);
                                    }
                                }
                            }
                        }
                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                    } finally {
                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_1, thread);
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return GP;
            }
        }
    }

    /**
     *
     *
     * @return boolean; whether COLLECTION has more than NUM quoted instances in MT with TV.
     */
    @LispMethod(comment = "@return boolean; whether COLLECTION has more than NUM quoted instances in MT with TV.")
    public static SubLObject count_all_quoted_instances_G(final SubLObject collection, final SubLObject num, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject count = ZERO_INTEGER;
        SubLObject GP = NIL;
        final SubLObject _prev_bind_0 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
        try {
            sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$quotedIsa), thread);
            sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
            try {
                if (NIL == GP) {
                    SubLObject node_var_$356 = collection;
                    final SubLObject deck_type = $STACK;
                    final SubLObject recur_deck = deck.create_deck(deck_type);
                    final SubLObject _prev_bind_0_$357 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                    try {
                        sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        try {
                            final SubLObject mt_var = mt;
                            final SubLObject _prev_bind_0_$358 = mt_relevance_macros.$mt$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$359 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                            final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                            try {
                                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                final SubLObject tv_var = tv;
                                final SubLObject _prev_bind_0_$359 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$360 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                        if (pcase_var.eql($ERROR)) {
                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        } else
                                            if (pcase_var.eql($CERROR)) {
                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var.eql($WARN)) {
                                                    Errors.warn($str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                } else {
                                                    Errors.warn($str37$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                    Errors.cerror($$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                }


                                    }
                                    final SubLObject _prev_bind_0_$360 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                    final SubLObject _prev_bind_1_$361 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                    final SubLObject _prev_bind_2_$364 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                    final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                    final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)), thread);
                                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)), thread);
                                        if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(collection, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                            final SubLObject _prev_bind_0_$361 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                            final SubLObject _prev_bind_1_$362 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                            final SubLObject _prev_bind_2_$365 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_var_$356, UNPROVIDED);
                                                while ((NIL != node_var_$356) && (NIL == GP)) {
                                                    final SubLObject tt_node_var = node_var_$356;
                                                    final SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$quotedIsa));
                                                    SubLObject rest;
                                                    SubLObject module_var;
                                                    SubLObject _prev_bind_0_$362;
                                                    SubLObject _prev_bind_1_$363;
                                                    SubLObject node;
                                                    SubLObject d_link;
                                                    SubLObject mt_links;
                                                    SubLObject iteration_state;
                                                    SubLObject mt_$370;
                                                    SubLObject tv_links;
                                                    SubLObject _prev_bind_0_$363;
                                                    SubLObject iteration_state_$372;
                                                    SubLObject tv_$373;
                                                    SubLObject link_nodes;
                                                    SubLObject _prev_bind_0_$364;
                                                    SubLObject sol;
                                                    SubLObject set_contents_var;
                                                    SubLObject basis_object;
                                                    SubLObject state;
                                                    SubLObject ins;
                                                    SubLObject csome_list_var;
                                                    SubLObject ins2;
                                                    SubLObject csome_list_var2;
                                                    SubLObject instance_tuple;
                                                    SubLObject current;
                                                    SubLObject datum;
                                                    SubLObject link_node;
                                                    SubLObject mt_$371;
                                                    SubLObject tv_$374;
                                                    SubLObject _prev_bind_0_$365;
                                                    SubLObject _prev_bind_0_$366;
                                                    SubLObject link_nodes2;
                                                    SubLObject csome_list_var_$379;
                                                    SubLObject new_list;
                                                    SubLObject rest_$380;
                                                    SubLObject generating_fn;
                                                    SubLObject _prev_bind_0_$367;
                                                    SubLObject sol2;
                                                    SubLObject link_nodes3;
                                                    SubLObject set_contents_var2;
                                                    SubLObject basis_object2;
                                                    SubLObject state2;
                                                    SubLObject ins3;
                                                    SubLObject csome_list_var3;
                                                    SubLObject ins4;
                                                    for (rest = NIL, rest = accessible_modules; (NIL == GP) && (NIL != rest); rest = rest.rest()) {
                                                        module_var = rest.first();
                                                        _prev_bind_0_$362 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                        _prev_bind_1_$363 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                        try {
                                                            sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                            node = function_terms.naut_to_nart(tt_node_var);
                                                            if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                if (NIL != d_link) {
                                                                    mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                    if (NIL != mt_links) {
                                                                        for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); (NIL == GP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                                                            thread.resetMultipleValues();
                                                                            mt_$370 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                            tv_links = thread.secondMultipleValue();
                                                                            thread.resetMultipleValues();
                                                                            if (NIL != mt_relevance_macros.relevant_mtP(mt_$370)) {
                                                                                _prev_bind_0_$363 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_$370, thread);
                                                                                    for (iteration_state_$372 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); (NIL == GP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$372)); iteration_state_$372 = dictionary_contents.do_dictionary_contents_next(iteration_state_$372)) {
                                                                                        thread.resetMultipleValues();
                                                                                        tv_$373 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$372);
                                                                                        link_nodes = thread.secondMultipleValue();
                                                                                        thread.resetMultipleValues();
                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$373)) {
                                                                                            _prev_bind_0_$364 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.bind(tv_$373, thread);
                                                                                                sol = link_nodes;
                                                                                                if (NIL != set.set_p(sol)) {
                                                                                                    set_contents_var = set.do_set_internal(sol);
                                                                                                    for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == GP) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                        ins = set_contents.do_set_contents_next(basis_object, state);
                                                                                                        if ((NIL != set_contents.do_set_contents_element_validP(state, ins)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                            count = add(count, ONE_INTEGER);
                                                                                                            if (count.numG(num)) {
                                                                                                                GP = T;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } else
                                                                                                    if (sol.isList()) {
                                                                                                        if (NIL == GP) {
                                                                                                            csome_list_var = sol;
                                                                                                            ins2 = NIL;
                                                                                                            ins2 = csome_list_var.first();
                                                                                                            while ((NIL == GP) && (NIL != csome_list_var)) {
                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                    count = add(count, ONE_INTEGER);
                                                                                                                    if (count.numG(num)) {
                                                                                                                        GP = T;
                                                                                                                    }
                                                                                                                }
                                                                                                                csome_list_var = csome_list_var.rest();
                                                                                                                ins2 = csome_list_var.first();
                                                                                                            } 
                                                                                                        }
                                                                                                    } else {
                                                                                                        Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                    }

                                                                                            } finally {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$364, thread);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state_$372);
                                                                                } finally {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$363, thread);
                                                                                }
                                                                            }
                                                                        }
                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                    }
                                                                } else {
                                                                    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str40$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                }
                                                                if ((NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) && (NIL == GP)) {
                                                                    csome_list_var2 = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                    instance_tuple = NIL;
                                                                    instance_tuple = csome_list_var2.first();
                                                                    while ((NIL == GP) && (NIL != csome_list_var2)) {
                                                                        datum = current = instance_tuple;
                                                                        link_node = NIL;
                                                                        mt_$371 = NIL;
                                                                        tv_$374 = NIL;
                                                                        destructuring_bind_must_consp(current, datum, $list116);
                                                                        link_node = current.first();
                                                                        current = current.rest();
                                                                        destructuring_bind_must_consp(current, datum, $list116);
                                                                        mt_$371 = current.first();
                                                                        current = current.rest();
                                                                        destructuring_bind_must_consp(current, datum, $list116);
                                                                        tv_$374 = current.first();
                                                                        current = current.rest();
                                                                        if (NIL == current) {
                                                                            if (NIL != mt_relevance_macros.relevant_mtP(mt_$371)) {
                                                                                _prev_bind_0_$365 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_$371, thread);
                                                                                    if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$374)) {
                                                                                        _prev_bind_0_$366 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv_$374, thread);
                                                                                            link_nodes2 = sol = list(link_node);
                                                                                            if (NIL != set.set_p(sol)) {
                                                                                                set_contents_var = set.do_set_internal(sol);
                                                                                                for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == GP) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                    ins = set_contents.do_set_contents_next(basis_object, state);
                                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state, ins)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                        count = add(count, ONE_INTEGER);
                                                                                                        if (count.numG(num)) {
                                                                                                            GP = T;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } else
                                                                                                if (sol.isList()) {
                                                                                                    if (NIL == GP) {
                                                                                                        csome_list_var_$379 = sol;
                                                                                                        ins2 = NIL;
                                                                                                        ins2 = csome_list_var_$379.first();
                                                                                                        while ((NIL == GP) && (NIL != csome_list_var_$379)) {
                                                                                                            if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                count = add(count, ONE_INTEGER);
                                                                                                                if (count.numG(num)) {
                                                                                                                    GP = T;
                                                                                                                }
                                                                                                            }
                                                                                                            csome_list_var_$379 = csome_list_var_$379.rest();
                                                                                                            ins2 = csome_list_var_$379.first();
                                                                                                        } 
                                                                                                    }
                                                                                                } else {
                                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                }

                                                                                        } finally {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$366, thread);
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$365, thread);
                                                                                }
                                                                            }
                                                                        } else {
                                                                            cdestructuring_bind_error(datum, $list116);
                                                                        }
                                                                        csome_list_var2 = csome_list_var2.rest();
                                                                        instance_tuple = csome_list_var2.first();
                                                                    } 
                                                                }
                                                            } else
                                                                if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                    new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                    for (rest_$380 = NIL, rest_$380 = new_list; (NIL == GP) && (NIL != rest_$380); rest_$380 = rest_$380.rest()) {
                                                                        generating_fn = rest_$380.first();
                                                                        _prev_bind_0_$367 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                            link_nodes3 = sol2 = funcall(generating_fn, node);
                                                                            if (NIL != set.set_p(sol2)) {
                                                                                set_contents_var2 = set.do_set_internal(sol2);
                                                                                for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); (NIL == GP) && (NIL == set_contents.do_set_contents_doneP(basis_object2, state2)); state2 = set_contents.do_set_contents_update_state(state2)) {
                                                                                    ins3 = set_contents.do_set_contents_next(basis_object2, state2);
                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state2, ins3)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                        count = add(count, ONE_INTEGER);
                                                                                        if (count.numG(num)) {
                                                                                            GP = T;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } else
                                                                                if (sol2.isList()) {
                                                                                    if (NIL == GP) {
                                                                                        csome_list_var3 = sol2;
                                                                                        ins4 = NIL;
                                                                                        ins4 = csome_list_var3.first();
                                                                                        while ((NIL == GP) && (NIL != csome_list_var3)) {
                                                                                            if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(ins4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                count = add(count, ONE_INTEGER);
                                                                                                if (count.numG(num)) {
                                                                                                    GP = T;
                                                                                                }
                                                                                            }
                                                                                            csome_list_var3 = csome_list_var3.rest();
                                                                                            ins4 = csome_list_var3.first();
                                                                                        } 
                                                                                    }
                                                                                } else {
                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                                                }

                                                                        } finally {
                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$367, thread);
                                                                        }
                                                                    }
                                                                }

                                                        } finally {
                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$363, thread);
                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$362, thread);
                                                        }
                                                    }
                                                    final SubLObject accessible_modules2 = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)));
                                                    SubLObject rest2;
                                                    SubLObject module_var2;
                                                    SubLObject _prev_bind_0_$368;
                                                    SubLObject _prev_bind_1_$364;
                                                    SubLObject node2;
                                                    SubLObject d_link2;
                                                    SubLObject mt_links2;
                                                    SubLObject iteration_state2;
                                                    SubLObject mt_$372;
                                                    SubLObject tv_links2;
                                                    SubLObject _prev_bind_0_$369;
                                                    SubLObject iteration_state_$373;
                                                    SubLObject tv_$375;
                                                    SubLObject link_nodes4;
                                                    SubLObject _prev_bind_0_$370;
                                                    SubLObject sol3;
                                                    SubLObject set_contents_var3;
                                                    SubLObject basis_object3;
                                                    SubLObject state3;
                                                    SubLObject node_vars_link_node;
                                                    SubLObject csome_list_var4;
                                                    SubLObject node_vars_link_node2;
                                                    SubLObject new_list2;
                                                    SubLObject rest_$381;
                                                    SubLObject generating_fn2;
                                                    SubLObject _prev_bind_0_$371;
                                                    SubLObject sol4;
                                                    SubLObject link_nodes5;
                                                    SubLObject set_contents_var4;
                                                    SubLObject basis_object4;
                                                    SubLObject state4;
                                                    SubLObject node_vars_link_node3;
                                                    SubLObject csome_list_var5;
                                                    SubLObject node_vars_link_node4;
                                                    for (rest2 = NIL, rest2 = accessible_modules2; (NIL == GP) && (NIL != rest2); rest2 = rest2.rest()) {
                                                        module_var2 = rest2.first();
                                                        _prev_bind_0_$368 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                        _prev_bind_1_$364 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                        try {
                                                            sbhl_module_vars.$sbhl_module$.bind(module_var2, thread);
                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                            node2 = function_terms.naut_to_nart(node_var_$356);
                                                            if (NIL != sbhl_link_vars.sbhl_node_object_p(node2)) {
                                                                d_link2 = sbhl_graphs.get_sbhl_graph_link(node2, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                if (NIL != d_link2) {
                                                                    mt_links2 = sbhl_links.get_sbhl_mt_links(d_link2, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                    if (NIL != mt_links2) {
                                                                        for (iteration_state2 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links2)); (NIL == GP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state2)); iteration_state2 = dictionary_contents.do_dictionary_contents_next(iteration_state2)) {
                                                                            thread.resetMultipleValues();
                                                                            mt_$372 = dictionary_contents.do_dictionary_contents_key_value(iteration_state2);
                                                                            tv_links2 = thread.secondMultipleValue();
                                                                            thread.resetMultipleValues();
                                                                            if (NIL != mt_relevance_macros.relevant_mtP(mt_$372)) {
                                                                                _prev_bind_0_$369 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_$372, thread);
                                                                                    for (iteration_state_$373 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links2)); (NIL == GP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$373)); iteration_state_$373 = dictionary_contents.do_dictionary_contents_next(iteration_state_$373)) {
                                                                                        thread.resetMultipleValues();
                                                                                        tv_$375 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$373);
                                                                                        link_nodes4 = thread.secondMultipleValue();
                                                                                        thread.resetMultipleValues();
                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$375)) {
                                                                                            _prev_bind_0_$370 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.bind(tv_$375, thread);
                                                                                                sol3 = link_nodes4;
                                                                                                if (NIL != set.set_p(sol3)) {
                                                                                                    set_contents_var3 = set.do_set_internal(sol3);
                                                                                                    for (basis_object3 = set_contents.do_set_contents_basis_object(set_contents_var3), state3 = NIL, state3 = set_contents.do_set_contents_initial_state(basis_object3, set_contents_var3); (NIL == GP) && (NIL == set_contents.do_set_contents_doneP(basis_object3, state3)); state3 = set_contents.do_set_contents_update_state(state3)) {
                                                                                                        node_vars_link_node = set_contents.do_set_contents_next(basis_object3, state3);
                                                                                                        if ((NIL != set_contents.do_set_contents_element_validP(state3, node_vars_link_node)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED))) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                            deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                        }
                                                                                                    }
                                                                                                } else
                                                                                                    if (sol3.isList()) {
                                                                                                        if (NIL == GP) {
                                                                                                            csome_list_var4 = sol3;
                                                                                                            node_vars_link_node2 = NIL;
                                                                                                            node_vars_link_node2 = csome_list_var4.first();
                                                                                                            while ((NIL == GP) && (NIL != csome_list_var4)) {
                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node2, UNPROVIDED)) {
                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node2, UNPROVIDED);
                                                                                                                    deck.deck_push(node_vars_link_node2, recur_deck);
                                                                                                                }
                                                                                                                csome_list_var4 = csome_list_var4.rest();
                                                                                                                node_vars_link_node2 = csome_list_var4.first();
                                                                                                            } 
                                                                                                        }
                                                                                                    } else {
                                                                                                        Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol3);
                                                                                                    }

                                                                                            } finally {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$370, thread);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state_$373);
                                                                                } finally {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$369, thread);
                                                                                }
                                                                            }
                                                                        }
                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state2);
                                                                    }
                                                                } else {
                                                                    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str40$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                }
                                                            } else
                                                                if (NIL != obsolete.cnat_p(node2, UNPROVIDED)) {
                                                                    new_list2 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                    for (rest_$381 = NIL, rest_$381 = new_list2; (NIL == GP) && (NIL != rest_$381); rest_$381 = rest_$381.rest()) {
                                                                        generating_fn2 = rest_$381.first();
                                                                        _prev_bind_0_$371 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn2, thread);
                                                                            link_nodes5 = sol4 = funcall(generating_fn2, node2);
                                                                            if (NIL != set.set_p(sol4)) {
                                                                                set_contents_var4 = set.do_set_internal(sol4);
                                                                                for (basis_object4 = set_contents.do_set_contents_basis_object(set_contents_var4), state4 = NIL, state4 = set_contents.do_set_contents_initial_state(basis_object4, set_contents_var4); (NIL == GP) && (NIL == set_contents.do_set_contents_doneP(basis_object4, state4)); state4 = set_contents.do_set_contents_update_state(state4)) {
                                                                                    node_vars_link_node3 = set_contents.do_set_contents_next(basis_object4, state4);
                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state4, node_vars_link_node3)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node3, UNPROVIDED))) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node3, UNPROVIDED);
                                                                                        deck.deck_push(node_vars_link_node3, recur_deck);
                                                                                    }
                                                                                }
                                                                            } else
                                                                                if (sol4.isList()) {
                                                                                    if (NIL == GP) {
                                                                                        csome_list_var5 = sol4;
                                                                                        node_vars_link_node4 = NIL;
                                                                                        node_vars_link_node4 = csome_list_var5.first();
                                                                                        while ((NIL == GP) && (NIL != csome_list_var5)) {
                                                                                            if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node4, UNPROVIDED)) {
                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node4, UNPROVIDED);
                                                                                                deck.deck_push(node_vars_link_node4, recur_deck);
                                                                                            }
                                                                                            csome_list_var5 = csome_list_var5.rest();
                                                                                            node_vars_link_node4 = csome_list_var5.first();
                                                                                        } 
                                                                                    }
                                                                                } else {
                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol4);
                                                                                }

                                                                        } finally {
                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$371, thread);
                                                                        }
                                                                    }
                                                                }

                                                        } finally {
                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$364, thread);
                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$368, thread);
                                                        }
                                                    }
                                                    node_var_$356 = deck.deck_pop(recur_deck);
                                                } 
                                            } finally {
                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_$365, thread);
                                                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_$362, thread);
                                                sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_$361, thread);
                                            }
                                        } else {
                                            sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str117$Node__a_does_not_pass_sbhl_type_t, collection, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        }
                                    } finally {
                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_$364, thread);
                                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_$361, thread);
                                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$360, thread);
                                    }
                                } finally {
                                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$360, thread);
                                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$359, thread);
                                }
                            } finally {
                                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$359, thread);
                                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$358, thread);
                            }
                        } finally {
                            final SubLObject _prev_bind_0_$372 = $is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                $is_thread_performing_cleanupP$.bind(T, thread);
                                final SubLObject _values = getValuesAsVector();
                                sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                restoreValuesFromVector(_values);
                            } finally {
                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$372, thread);
                            }
                        }
                    } finally {
                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$357, thread);
                    }
                }
            } finally {
                final SubLObject _prev_bind_0_$373 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values2 = getValuesAsVector();
                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                    restoreValuesFromVector(_values2);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$373, thread);
                }
            }
        } finally {
            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_2, thread);
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0, thread);
        }
        return GP;
    }

    /**
     *
     *
     * @return boolean; whether COLLECTION has more than or exactly NUM quoted instances in MT with TV.
     */
    @LispMethod(comment = "@return boolean; whether COLLECTION has more than or exactly NUM quoted instances in MT with TV.")
    public static final SubLObject count_all_quoted_instances_GE_alt(SubLObject collection, SubLObject num, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject count = ZERO_INTEGER;
                SubLObject GEP = NIL;
                SubLObject node_var = collection;
                {
                    SubLObject _prev_bind_0 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                    try {
                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$quotedIsa), thread);
                        sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        if (NIL == GEP) {
                            {
                                SubLObject node_var_433 = node_var;
                                SubLObject deck_type = (false) ? ((SubLObject) ($QUEUE)) : $STACK;
                                SubLObject recur_deck = deck.create_deck(deck_type);
                                {
                                    SubLObject _prev_bind_0_434 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                    try {
                                        sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                        {
                                            SubLObject mt_var = mt;
                                            {
                                                SubLObject _prev_bind_0_435 = mt_relevance_macros.$mt$.currentBinding(thread);
                                                SubLObject _prev_bind_1_436 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                                SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                                try {
                                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                                    {
                                                        SubLObject tv_var = tv;
                                                        {
                                                            SubLObject _prev_bind_0_437 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                                            SubLObject _prev_bind_1_438 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                                            try {
                                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                                if (NIL != tv_var) {
                                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                                            {
                                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                if (pcase_var.eql($ERROR)) {
                                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                } else {
                                                                                    if (pcase_var.eql($CERROR)) {
                                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                    } else {
                                                                                        if (pcase_var.eql($WARN)) {
                                                                                            Errors.warn($str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                        } else {
                                                                                            Errors.warn($str_alt36$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                            Errors.cerror($$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                {
                                                                    SubLObject _prev_bind_0_439 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                                                    SubLObject _prev_bind_1_440 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                                                    SubLObject _prev_bind_2_441 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)), thread);
                                                                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)), thread);
                                                                        if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node_var, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                            {
                                                                                SubLObject _prev_bind_0_442 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_443 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_444 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                                                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_var_433, UNPROVIDED);
                                                                                    while ((NIL != node_var_433) && (NIL == GEP)) {
                                                                                        {
                                                                                            SubLObject tt_node_var = node_var_433;
                                                                                            SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$quotedIsa));
                                                                                            SubLObject rest = NIL;
                                                                                            for (rest = accessible_modules; !((NIL != GEP) || (NIL == rest)); rest = rest.rest()) {
                                                                                                {
                                                                                                    SubLObject module_var = rest.first();
                                                                                                    {
                                                                                                        SubLObject _prev_bind_0_445 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                                        SubLObject _prev_bind_1_446 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                        try {
                                                                                                            sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                            {
                                                                                                                SubLObject node = function_terms.naut_to_nart(tt_node_var);
                                                                                                                if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                                    {
                                                                                                                        SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                        if (NIL != d_link) {
                                                                                                                            {
                                                                                                                                SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                                if (NIL != mt_links) {
                                                                                                                                    {
                                                                                                                                        SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                                        while (!((NIL != GEP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state)))) {
                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                            {
                                                                                                                                                SubLObject mt_447 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                                SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                                thread.resetMultipleValues();
                                                                                                                                                if (NIL != mt_relevance_macros.relevant_mtP(mt_447)) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject _prev_bind_0_448 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                        try {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.bind(mt_447, thread);
                                                                                                                                                            {
                                                                                                                                                                SubLObject iteration_state_449 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                                while (!((NIL != GEP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state_449)))) {
                                                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject tv_450 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_449);
                                                                                                                                                                        SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_450)) {
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject _prev_bind_0_451 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                                try {
                                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv_450, thread);
                                                                                                                                                                                    {
                                                                                                                                                                                        SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                                        SubLObject rest_452 = NIL;
                                                                                                                                                                                        for (rest_452 = new_list; !((NIL != GEP) || (NIL == rest_452)); rest_452 = rest_452.rest()) {
                                                                                                                                                                                            {
                                                                                                                                                                                                SubLObject ins = rest_452.first();
                                                                                                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                                                                    count = add(count, ONE_INTEGER);
                                                                                                                                                                                                    if (count.numGE(num)) {
                                                                                                                                                                                                        GEP = T;
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                } finally {
                                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_451, thread);
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        iteration_state_449 = dictionary_contents.do_dictionary_contents_next(iteration_state_449);
                                                                                                                                                                    }
                                                                                                                                                                } 
                                                                                                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state_449);
                                                                                                                                                            }
                                                                                                                                                        } finally {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_448, thread);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                            }
                                                                                                                                        } 
                                                                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        } else {
                                                                                                                            sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt38$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                        }
                                                                                                                    }
                                                                                                                    if (NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) {
                                                                                                                        if (NIL == GEP) {
                                                                                                                            {
                                                                                                                                SubLObject csome_list_var = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                                                                                SubLObject instance_tuple = NIL;
                                                                                                                                for (instance_tuple = csome_list_var.first(); !((NIL != GEP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , instance_tuple = csome_list_var.first()) {
                                                                                                                                    {
                                                                                                                                        SubLObject datum = instance_tuple;
                                                                                                                                        SubLObject current = datum;
                                                                                                                                        SubLObject link_node = NIL;
                                                                                                                                        SubLObject mt_453 = NIL;
                                                                                                                                        SubLObject tv_454 = NIL;
                                                                                                                                        destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                                        link_node = current.first();
                                                                                                                                        current = current.rest();
                                                                                                                                        destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                                        mt_453 = current.first();
                                                                                                                                        current = current.rest();
                                                                                                                                        destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                                        tv_454 = current.first();
                                                                                                                                        current = current.rest();
                                                                                                                                        if (NIL == current) {
                                                                                                                                            if (NIL != mt_relevance_macros.relevant_mtP(mt_453)) {
                                                                                                                                                {
                                                                                                                                                    SubLObject _prev_bind_0_455 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                    try {
                                                                                                                                                        sbhl_link_vars.$sbhl_link_mt$.bind(mt_453, thread);
                                                                                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_454)) {
                                                                                                                                                            {
                                                                                                                                                                SubLObject _prev_bind_0_456 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                try {
                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv_454, thread);
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject link_nodes = list(link_node);
                                                                                                                                                                        SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                        SubLObject rest_457 = NIL;
                                                                                                                                                                        for (rest_457 = new_list; !((NIL != GEP) || (NIL == rest_457)); rest_457 = rest_457.rest()) {
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject ins = rest_457.first();
                                                                                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                                                    count = add(count, ONE_INTEGER);
                                                                                                                                                                                    if (count.numGE(num)) {
                                                                                                                                                                                        GEP = T;
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                } finally {
                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_456, thread);
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    } finally {
                                                                                                                                                        sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_455, thread);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } else {
                                                                                                                                            cdestructuring_bind_error(datum, $list_alt111);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                                        {
                                                                                                                            SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                            SubLObject rest_458 = NIL;
                                                                                                                            for (rest_458 = new_list; !((NIL != GEP) || (NIL == rest_458)); rest_458 = rest_458.rest()) {
                                                                                                                                {
                                                                                                                                    SubLObject generating_fn = rest_458.first();
                                                                                                                                    {
                                                                                                                                        SubLObject _prev_bind_0_459 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                                        try {
                                                                                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                            {
                                                                                                                                                SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                                SubLObject new_list_460 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                SubLObject rest_461 = NIL;
                                                                                                                                                for (rest_461 = new_list_460; !((NIL != GEP) || (NIL == rest_461)); rest_461 = rest_461.rest()) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject ins = rest_461.first();
                                                                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                                            count = add(count, ONE_INTEGER);
                                                                                                                                                            if (count.numGE(num)) {
                                                                                                                                                                GEP = T;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } finally {
                                                                                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_459, thread);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        } finally {
                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_446, thread);
                                                                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_445, thread);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        {
                                                                                            SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)));
                                                                                            SubLObject rest = NIL;
                                                                                            for (rest = accessible_modules; !((NIL != GEP) || (NIL == rest)); rest = rest.rest()) {
                                                                                                {
                                                                                                    SubLObject module_var = rest.first();
                                                                                                    {
                                                                                                        SubLObject _prev_bind_0_462 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                                        SubLObject _prev_bind_1_463 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                        try {
                                                                                                            sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                            {
                                                                                                                SubLObject node = function_terms.naut_to_nart(node_var_433);
                                                                                                                if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                                    {
                                                                                                                        SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                        if (NIL != d_link) {
                                                                                                                            {
                                                                                                                                SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                                if (NIL != mt_links) {
                                                                                                                                    {
                                                                                                                                        SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                                        while (!((NIL != GEP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state)))) {
                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                            {
                                                                                                                                                SubLObject mt_464 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                                SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                                thread.resetMultipleValues();
                                                                                                                                                if (NIL != mt_relevance_macros.relevant_mtP(mt_464)) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject _prev_bind_0_465 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                        try {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.bind(mt_464, thread);
                                                                                                                                                            {
                                                                                                                                                                SubLObject iteration_state_466 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                                while (!((NIL != GEP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state_466)))) {
                                                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject tv_467 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_466);
                                                                                                                                                                        SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_467)) {
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject _prev_bind_0_468 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                                try {
                                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv_467, thread);
                                                                                                                                                                                    {
                                                                                                                                                                                        SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                                        SubLObject rest_469 = NIL;
                                                                                                                                                                                        for (rest_469 = new_list; !((NIL != GEP) || (NIL == rest_469)); rest_469 = rest_469.rest()) {
                                                                                                                                                                                            {
                                                                                                                                                                                                SubLObject node_vars_link_node = rest_469.first();
                                                                                                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
                                                                                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                                                                                                                    deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                } finally {
                                                                                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_468, thread);
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        iteration_state_466 = dictionary_contents.do_dictionary_contents_next(iteration_state_466);
                                                                                                                                                                    }
                                                                                                                                                                } 
                                                                                                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state_466);
                                                                                                                                                            }
                                                                                                                                                        } finally {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_465, thread);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                            }
                                                                                                                                        } 
                                                                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        } else {
                                                                                                                            sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt38$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                        }
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                                        {
                                                                                                                            SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                            SubLObject rest_470 = NIL;
                                                                                                                            for (rest_470 = new_list; !((NIL != GEP) || (NIL == rest_470)); rest_470 = rest_470.rest()) {
                                                                                                                                {
                                                                                                                                    SubLObject generating_fn = rest_470.first();
                                                                                                                                    {
                                                                                                                                        SubLObject _prev_bind_0_471 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                                        try {
                                                                                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                            {
                                                                                                                                                SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                                SubLObject new_list_472 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                SubLObject rest_473 = NIL;
                                                                                                                                                for (rest_473 = new_list_472; !((NIL != GEP) || (NIL == rest_473)); rest_473 = rest_473.rest()) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject node_vars_link_node = rest_473.first();
                                                                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
                                                                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                                                                            deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } finally {
                                                                                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_471, thread);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        } finally {
                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_463, thread);
                                                                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_462, thread);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        node_var_433 = deck.deck_pop(recur_deck);
                                                                                    } 
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_444, thread);
                                                                                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_443, thread);
                                                                                    sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_442, thread);
                                                                                }
                                                                            }
                                                                        } else {
                                                                            sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt112$Node__a_does_not_pass_sbhl_type_t, node_var, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                        }
                                                                    } finally {
                                                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                                                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_441, thread);
                                                                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_440, thread);
                                                                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_439, thread);
                                                                    }
                                                                }
                                                            } finally {
                                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_438, thread);
                                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_437, thread);
                                                            }
                                                        }
                                                    }
                                                } finally {
                                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_436, thread);
                                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_435, thread);
                                                }
                                            }
                                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                        }
                                    } finally {
                                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_434, thread);
                                    }
                                }
                            }
                        }
                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                    } finally {
                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_1, thread);
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return GEP;
            }
        }
    }

    /**
     *
     *
     * @return boolean; whether COLLECTION has more than or exactly NUM quoted instances in MT with TV.
     */
    @LispMethod(comment = "@return boolean; whether COLLECTION has more than or exactly NUM quoted instances in MT with TV.")
    public static SubLObject count_all_quoted_instances_GE(final SubLObject collection, final SubLObject num, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject count = ZERO_INTEGER;
        SubLObject GEP = NIL;
        final SubLObject _prev_bind_0 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
        try {
            sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$quotedIsa), thread);
            sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
            try {
                if (NIL == GEP) {
                    SubLObject node_var_$393 = collection;
                    final SubLObject deck_type = $STACK;
                    final SubLObject recur_deck = deck.create_deck(deck_type);
                    final SubLObject _prev_bind_0_$394 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                    try {
                        sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        try {
                            final SubLObject mt_var = mt;
                            final SubLObject _prev_bind_0_$395 = mt_relevance_macros.$mt$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$396 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                            final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                            try {
                                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                final SubLObject tv_var = tv;
                                final SubLObject _prev_bind_0_$396 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$397 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                        if (pcase_var.eql($ERROR)) {
                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        } else
                                            if (pcase_var.eql($CERROR)) {
                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var.eql($WARN)) {
                                                    Errors.warn($str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                } else {
                                                    Errors.warn($str37$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                    Errors.cerror($$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                }


                                    }
                                    final SubLObject _prev_bind_0_$397 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                    final SubLObject _prev_bind_1_$398 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                    final SubLObject _prev_bind_2_$401 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                    final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                    final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)), thread);
                                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)), thread);
                                        if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(collection, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                            final SubLObject _prev_bind_0_$398 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                            final SubLObject _prev_bind_1_$399 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                            final SubLObject _prev_bind_2_$402 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa))), thread);
                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_var_$393, UNPROVIDED);
                                                while ((NIL != node_var_$393) && (NIL == GEP)) {
                                                    final SubLObject tt_node_var = node_var_$393;
                                                    final SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$quotedIsa));
                                                    SubLObject rest;
                                                    SubLObject module_var;
                                                    SubLObject _prev_bind_0_$399;
                                                    SubLObject _prev_bind_1_$400;
                                                    SubLObject node;
                                                    SubLObject d_link;
                                                    SubLObject mt_links;
                                                    SubLObject iteration_state;
                                                    SubLObject mt_$407;
                                                    SubLObject tv_links;
                                                    SubLObject _prev_bind_0_$400;
                                                    SubLObject iteration_state_$409;
                                                    SubLObject tv_$410;
                                                    SubLObject link_nodes;
                                                    SubLObject _prev_bind_0_$401;
                                                    SubLObject sol;
                                                    SubLObject set_contents_var;
                                                    SubLObject basis_object;
                                                    SubLObject state;
                                                    SubLObject ins;
                                                    SubLObject csome_list_var;
                                                    SubLObject ins2;
                                                    SubLObject csome_list_var2;
                                                    SubLObject instance_tuple;
                                                    SubLObject current;
                                                    SubLObject datum;
                                                    SubLObject link_node;
                                                    SubLObject mt_$408;
                                                    SubLObject tv_$411;
                                                    SubLObject _prev_bind_0_$402;
                                                    SubLObject _prev_bind_0_$403;
                                                    SubLObject link_nodes2;
                                                    SubLObject csome_list_var_$416;
                                                    SubLObject new_list;
                                                    SubLObject rest_$417;
                                                    SubLObject generating_fn;
                                                    SubLObject _prev_bind_0_$404;
                                                    SubLObject sol2;
                                                    SubLObject link_nodes3;
                                                    SubLObject set_contents_var2;
                                                    SubLObject basis_object2;
                                                    SubLObject state2;
                                                    SubLObject ins3;
                                                    SubLObject csome_list_var3;
                                                    SubLObject ins4;
                                                    for (rest = NIL, rest = accessible_modules; (NIL == GEP) && (NIL != rest); rest = rest.rest()) {
                                                        module_var = rest.first();
                                                        _prev_bind_0_$399 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                        _prev_bind_1_$400 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                        try {
                                                            sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                            node = function_terms.naut_to_nart(tt_node_var);
                                                            if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                if (NIL != d_link) {
                                                                    mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                    if (NIL != mt_links) {
                                                                        for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); (NIL == GEP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                                                            thread.resetMultipleValues();
                                                                            mt_$407 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                            tv_links = thread.secondMultipleValue();
                                                                            thread.resetMultipleValues();
                                                                            if (NIL != mt_relevance_macros.relevant_mtP(mt_$407)) {
                                                                                _prev_bind_0_$400 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_$407, thread);
                                                                                    for (iteration_state_$409 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); (NIL == GEP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$409)); iteration_state_$409 = dictionary_contents.do_dictionary_contents_next(iteration_state_$409)) {
                                                                                        thread.resetMultipleValues();
                                                                                        tv_$410 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$409);
                                                                                        link_nodes = thread.secondMultipleValue();
                                                                                        thread.resetMultipleValues();
                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$410)) {
                                                                                            _prev_bind_0_$401 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.bind(tv_$410, thread);
                                                                                                sol = link_nodes;
                                                                                                if (NIL != set.set_p(sol)) {
                                                                                                    set_contents_var = set.do_set_internal(sol);
                                                                                                    for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == GEP) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                        ins = set_contents.do_set_contents_next(basis_object, state);
                                                                                                        if ((NIL != set_contents.do_set_contents_element_validP(state, ins)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                            count = add(count, ONE_INTEGER);
                                                                                                            if (count.numGE(num)) {
                                                                                                                GEP = T;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } else
                                                                                                    if (sol.isList()) {
                                                                                                        if (NIL == GEP) {
                                                                                                            csome_list_var = sol;
                                                                                                            ins2 = NIL;
                                                                                                            ins2 = csome_list_var.first();
                                                                                                            while ((NIL == GEP) && (NIL != csome_list_var)) {
                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                    count = add(count, ONE_INTEGER);
                                                                                                                    if (count.numGE(num)) {
                                                                                                                        GEP = T;
                                                                                                                    }
                                                                                                                }
                                                                                                                csome_list_var = csome_list_var.rest();
                                                                                                                ins2 = csome_list_var.first();
                                                                                                            } 
                                                                                                        }
                                                                                                    } else {
                                                                                                        Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                    }

                                                                                            } finally {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$401, thread);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state_$409);
                                                                                } finally {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$400, thread);
                                                                                }
                                                                            }
                                                                        }
                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                    }
                                                                } else {
                                                                    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str40$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                }
                                                                if ((NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) && (NIL == GEP)) {
                                                                    csome_list_var2 = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                    instance_tuple = NIL;
                                                                    instance_tuple = csome_list_var2.first();
                                                                    while ((NIL == GEP) && (NIL != csome_list_var2)) {
                                                                        datum = current = instance_tuple;
                                                                        link_node = NIL;
                                                                        mt_$408 = NIL;
                                                                        tv_$411 = NIL;
                                                                        destructuring_bind_must_consp(current, datum, $list116);
                                                                        link_node = current.first();
                                                                        current = current.rest();
                                                                        destructuring_bind_must_consp(current, datum, $list116);
                                                                        mt_$408 = current.first();
                                                                        current = current.rest();
                                                                        destructuring_bind_must_consp(current, datum, $list116);
                                                                        tv_$411 = current.first();
                                                                        current = current.rest();
                                                                        if (NIL == current) {
                                                                            if (NIL != mt_relevance_macros.relevant_mtP(mt_$408)) {
                                                                                _prev_bind_0_$402 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_$408, thread);
                                                                                    if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$411)) {
                                                                                        _prev_bind_0_$403 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv_$411, thread);
                                                                                            link_nodes2 = sol = list(link_node);
                                                                                            if (NIL != set.set_p(sol)) {
                                                                                                set_contents_var = set.do_set_internal(sol);
                                                                                                for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == GEP) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                    ins = set_contents.do_set_contents_next(basis_object, state);
                                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state, ins)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                        count = add(count, ONE_INTEGER);
                                                                                                        if (count.numGE(num)) {
                                                                                                            GEP = T;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } else
                                                                                                if (sol.isList()) {
                                                                                                    if (NIL == GEP) {
                                                                                                        csome_list_var_$416 = sol;
                                                                                                        ins2 = NIL;
                                                                                                        ins2 = csome_list_var_$416.first();
                                                                                                        while ((NIL == GEP) && (NIL != csome_list_var_$416)) {
                                                                                                            if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(ins2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                count = add(count, ONE_INTEGER);
                                                                                                                if (count.numGE(num)) {
                                                                                                                    GEP = T;
                                                                                                                }
                                                                                                            }
                                                                                                            csome_list_var_$416 = csome_list_var_$416.rest();
                                                                                                            ins2 = csome_list_var_$416.first();
                                                                                                        } 
                                                                                                    }
                                                                                                } else {
                                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                }

                                                                                        } finally {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$403, thread);
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$402, thread);
                                                                                }
                                                                            }
                                                                        } else {
                                                                            cdestructuring_bind_error(datum, $list116);
                                                                        }
                                                                        csome_list_var2 = csome_list_var2.rest();
                                                                        instance_tuple = csome_list_var2.first();
                                                                    } 
                                                                }
                                                            } else
                                                                if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                    new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$quotedIsa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                    for (rest_$417 = NIL, rest_$417 = new_list; (NIL == GEP) && (NIL != rest_$417); rest_$417 = rest_$417.rest()) {
                                                                        generating_fn = rest_$417.first();
                                                                        _prev_bind_0_$404 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                            link_nodes3 = sol2 = funcall(generating_fn, node);
                                                                            if (NIL != set.set_p(sol2)) {
                                                                                set_contents_var2 = set.do_set_internal(sol2);
                                                                                for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); (NIL == GEP) && (NIL == set_contents.do_set_contents_doneP(basis_object2, state2)); state2 = set_contents.do_set_contents_update_state(state2)) {
                                                                                    ins3 = set_contents.do_set_contents_next(basis_object2, state2);
                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state2, ins3)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ins3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                        count = add(count, ONE_INTEGER);
                                                                                        if (count.numGE(num)) {
                                                                                            GEP = T;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } else
                                                                                if (sol2.isList()) {
                                                                                    if (NIL == GEP) {
                                                                                        csome_list_var3 = sol2;
                                                                                        ins4 = NIL;
                                                                                        ins4 = csome_list_var3.first();
                                                                                        while ((NIL == GEP) && (NIL != csome_list_var3)) {
                                                                                            if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ins4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(ins4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                count = add(count, ONE_INTEGER);
                                                                                                if (count.numGE(num)) {
                                                                                                    GEP = T;
                                                                                                }
                                                                                            }
                                                                                            csome_list_var3 = csome_list_var3.rest();
                                                                                            ins4 = csome_list_var3.first();
                                                                                        } 
                                                                                    }
                                                                                } else {
                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                                                }

                                                                        } finally {
                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$404, thread);
                                                                        }
                                                                    }
                                                                }

                                                        } finally {
                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$400, thread);
                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$399, thread);
                                                        }
                                                    }
                                                    final SubLObject accessible_modules2 = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$quotedIsa)));
                                                    SubLObject rest2;
                                                    SubLObject module_var2;
                                                    SubLObject _prev_bind_0_$405;
                                                    SubLObject _prev_bind_1_$401;
                                                    SubLObject node2;
                                                    SubLObject d_link2;
                                                    SubLObject mt_links2;
                                                    SubLObject iteration_state2;
                                                    SubLObject mt_$409;
                                                    SubLObject tv_links2;
                                                    SubLObject _prev_bind_0_$406;
                                                    SubLObject iteration_state_$410;
                                                    SubLObject tv_$412;
                                                    SubLObject link_nodes4;
                                                    SubLObject _prev_bind_0_$407;
                                                    SubLObject sol3;
                                                    SubLObject set_contents_var3;
                                                    SubLObject basis_object3;
                                                    SubLObject state3;
                                                    SubLObject node_vars_link_node;
                                                    SubLObject csome_list_var4;
                                                    SubLObject node_vars_link_node2;
                                                    SubLObject new_list2;
                                                    SubLObject rest_$418;
                                                    SubLObject generating_fn2;
                                                    SubLObject _prev_bind_0_$408;
                                                    SubLObject sol4;
                                                    SubLObject link_nodes5;
                                                    SubLObject set_contents_var4;
                                                    SubLObject basis_object4;
                                                    SubLObject state4;
                                                    SubLObject node_vars_link_node3;
                                                    SubLObject csome_list_var5;
                                                    SubLObject node_vars_link_node4;
                                                    for (rest2 = NIL, rest2 = accessible_modules2; (NIL == GEP) && (NIL != rest2); rest2 = rest2.rest()) {
                                                        module_var2 = rest2.first();
                                                        _prev_bind_0_$405 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                        _prev_bind_1_$401 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                        try {
                                                            sbhl_module_vars.$sbhl_module$.bind(module_var2, thread);
                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                            node2 = function_terms.naut_to_nart(node_var_$393);
                                                            if (NIL != sbhl_link_vars.sbhl_node_object_p(node2)) {
                                                                d_link2 = sbhl_graphs.get_sbhl_graph_link(node2, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                if (NIL != d_link2) {
                                                                    mt_links2 = sbhl_links.get_sbhl_mt_links(d_link2, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                    if (NIL != mt_links2) {
                                                                        for (iteration_state2 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links2)); (NIL == GEP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state2)); iteration_state2 = dictionary_contents.do_dictionary_contents_next(iteration_state2)) {
                                                                            thread.resetMultipleValues();
                                                                            mt_$409 = dictionary_contents.do_dictionary_contents_key_value(iteration_state2);
                                                                            tv_links2 = thread.secondMultipleValue();
                                                                            thread.resetMultipleValues();
                                                                            if (NIL != mt_relevance_macros.relevant_mtP(mt_$409)) {
                                                                                _prev_bind_0_$406 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt_$409, thread);
                                                                                    for (iteration_state_$410 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links2)); (NIL == GEP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$410)); iteration_state_$410 = dictionary_contents.do_dictionary_contents_next(iteration_state_$410)) {
                                                                                        thread.resetMultipleValues();
                                                                                        tv_$412 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$410);
                                                                                        link_nodes4 = thread.secondMultipleValue();
                                                                                        thread.resetMultipleValues();
                                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$412)) {
                                                                                            _prev_bind_0_$407 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.bind(tv_$412, thread);
                                                                                                sol3 = link_nodes4;
                                                                                                if (NIL != set.set_p(sol3)) {
                                                                                                    set_contents_var3 = set.do_set_internal(sol3);
                                                                                                    for (basis_object3 = set_contents.do_set_contents_basis_object(set_contents_var3), state3 = NIL, state3 = set_contents.do_set_contents_initial_state(basis_object3, set_contents_var3); (NIL == GEP) && (NIL == set_contents.do_set_contents_doneP(basis_object3, state3)); state3 = set_contents.do_set_contents_update_state(state3)) {
                                                                                                        node_vars_link_node = set_contents.do_set_contents_next(basis_object3, state3);
                                                                                                        if ((NIL != set_contents.do_set_contents_element_validP(state3, node_vars_link_node)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED))) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                            deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                        }
                                                                                                    }
                                                                                                } else
                                                                                                    if (sol3.isList()) {
                                                                                                        if (NIL == GEP) {
                                                                                                            csome_list_var4 = sol3;
                                                                                                            node_vars_link_node2 = NIL;
                                                                                                            node_vars_link_node2 = csome_list_var4.first();
                                                                                                            while ((NIL == GEP) && (NIL != csome_list_var4)) {
                                                                                                                if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node2, UNPROVIDED)) {
                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node2, UNPROVIDED);
                                                                                                                    deck.deck_push(node_vars_link_node2, recur_deck);
                                                                                                                }
                                                                                                                csome_list_var4 = csome_list_var4.rest();
                                                                                                                node_vars_link_node2 = csome_list_var4.first();
                                                                                                            } 
                                                                                                        }
                                                                                                    } else {
                                                                                                        Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol3);
                                                                                                    }

                                                                                            } finally {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$407, thread);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state_$410);
                                                                                } finally {
                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$406, thread);
                                                                                }
                                                                            }
                                                                        }
                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state2);
                                                                    }
                                                                } else {
                                                                    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str40$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                }
                                                            } else
                                                                if (NIL != obsolete.cnat_p(node2, UNPROVIDED)) {
                                                                    new_list2 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                    for (rest_$418 = NIL, rest_$418 = new_list2; (NIL == GEP) && (NIL != rest_$418); rest_$418 = rest_$418.rest()) {
                                                                        generating_fn2 = rest_$418.first();
                                                                        _prev_bind_0_$408 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn2, thread);
                                                                            link_nodes5 = sol4 = funcall(generating_fn2, node2);
                                                                            if (NIL != set.set_p(sol4)) {
                                                                                set_contents_var4 = set.do_set_internal(sol4);
                                                                                for (basis_object4 = set_contents.do_set_contents_basis_object(set_contents_var4), state4 = NIL, state4 = set_contents.do_set_contents_initial_state(basis_object4, set_contents_var4); (NIL == GEP) && (NIL == set_contents.do_set_contents_doneP(basis_object4, state4)); state4 = set_contents.do_set_contents_update_state(state4)) {
                                                                                    node_vars_link_node3 = set_contents.do_set_contents_next(basis_object4, state4);
                                                                                    if ((NIL != set_contents.do_set_contents_element_validP(state4, node_vars_link_node3)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node3, UNPROVIDED))) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node3, UNPROVIDED);
                                                                                        deck.deck_push(node_vars_link_node3, recur_deck);
                                                                                    }
                                                                                }
                                                                            } else
                                                                                if (sol4.isList()) {
                                                                                    if (NIL == GEP) {
                                                                                        csome_list_var5 = sol4;
                                                                                        node_vars_link_node4 = NIL;
                                                                                        node_vars_link_node4 = csome_list_var5.first();
                                                                                        while ((NIL == GEP) && (NIL != csome_list_var5)) {
                                                                                            if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node4, UNPROVIDED)) {
                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node4, UNPROVIDED);
                                                                                                deck.deck_push(node_vars_link_node4, recur_deck);
                                                                                            }
                                                                                            csome_list_var5 = csome_list_var5.rest();
                                                                                            node_vars_link_node4 = csome_list_var5.first();
                                                                                        } 
                                                                                    }
                                                                                } else {
                                                                                    Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol4);
                                                                                }

                                                                        } finally {
                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$408, thread);
                                                                        }
                                                                    }
                                                                }

                                                        } finally {
                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$401, thread);
                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$405, thread);
                                                        }
                                                    }
                                                    node_var_$393 = deck.deck_pop(recur_deck);
                                                } 
                                            } finally {
                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_$402, thread);
                                                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_$399, thread);
                                                sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_$398, thread);
                                            }
                                        } else {
                                            sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str117$Node__a_does_not_pass_sbhl_type_t, collection, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        }
                                    } finally {
                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_$401, thread);
                                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_$398, thread);
                                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$397, thread);
                                    }
                                } finally {
                                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$397, thread);
                                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$396, thread);
                                }
                            } finally {
                                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$396, thread);
                                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$395, thread);
                            }
                        } finally {
                            final SubLObject _prev_bind_0_$409 = $is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                $is_thread_performing_cleanupP$.bind(T, thread);
                                final SubLObject _values = getValuesAsVector();
                                sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                restoreValuesFromVector(_values);
                            } finally {
                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$409, thread);
                            }
                        }
                    } finally {
                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$394, thread);
                    }
                }
            } finally {
                final SubLObject _prev_bind_0_$410 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values2 = getValuesAsVector();
                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                    restoreValuesFromVector(_values2);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$410, thread);
                }
            }
        } finally {
            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_2, thread);
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0, thread);
        }
        return GEP;
    }

    /**
     *
     *
     * @return boolean; whether COLLECTION has fewer than NUM quoted instances in MT with TV.
     */
    @LispMethod(comment = "@return boolean; whether COLLECTION has fewer than NUM quoted instances in MT with TV.")
    public static final SubLObject count_all_quoted_instances_L_alt(SubLObject collection, SubLObject num, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return numL(com.cyc.cycjava.cycl.isa.count_all_quoted_instances(collection, mt, tv), num);
    }

    /**
     *
     *
     * @return boolean; whether COLLECTION has fewer than NUM quoted instances in MT with TV.
     */
    @LispMethod(comment = "@return boolean; whether COLLECTION has fewer than NUM quoted instances in MT with TV.")
    public static SubLObject count_all_quoted_instances_L(final SubLObject collection, final SubLObject num, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return numL(count_all_quoted_instances(collection, mt, tv), num);
    }

    /**
     *
     *
     * @return boolean; whether COLLECTION has fewer than or exactly NUM quoted instances in MT with TV.
     */
    @LispMethod(comment = "@return boolean; whether COLLECTION has fewer than or exactly NUM quoted instances in MT with TV.")
    public static final SubLObject count_all_quoted_instances_LE_alt(SubLObject collection, SubLObject num, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return numLE(com.cyc.cycjava.cycl.isa.count_all_quoted_instances(collection, mt, tv), num);
    }

    /**
     *
     *
     * @return boolean; whether COLLECTION has fewer than or exactly NUM quoted instances in MT with TV.
     */
    @LispMethod(comment = "@return boolean; whether COLLECTION has fewer than or exactly NUM quoted instances in MT with TV.")
    public static SubLObject count_all_quoted_instances_LE(final SubLObject collection, final SubLObject num, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return numLE(count_all_quoted_instances(collection, mt, tv), num);
    }

    /**
     * Returns whether TERM is an instance of COLLECTION via the SBHL, i.e. isa and genls assertions.
     *
     * @unknown This function does _not_ use defns to determine membership in COLLECTION.
     * @see has-type?
     * @see quiet-has-type?
     */
    @LispMethod(comment = "Returns whether TERM is an instance of COLLECTION via the SBHL, i.e. isa and genls assertions.\r\n\r\n@unknown This function does _not_ use defns to determine membership in COLLECTION.\r\n@see has-type?\r\n@see quiet-has-type?")
    public static final SubLObject isaP_alt(SubLObject v_term, SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(collection, EL_FORT_P);
        if (NIL != sbhl_search_methods.sbhl_non_justifying_predicate_relation_p(sbhl_module_vars.get_sbhl_module($$isa), v_term, collection, mt, tv)) {
            return T;
        }
        if ((NIL != sbhl_link_methods.isa_stored_naut_arg2_p(v_term)) && (NIL != genls.any_specP(collection, sbhl_link_methods.isas_from_naut_arg2(v_term, mt, tv), mt, tv))) {
            return T;
        }
        if (((NIL != cycl_grammar.cycl_nat_p(collection)) && (cycl_utilities.formula_operator(collection) == $$CollectionIntersectionFn)) && (NIL != el_extensional_set_p(cycl_utilities.formula_arg1(collection, UNPROVIDED)))) {
            {
                SubLObject colls = extensional_set_elements(cycl_utilities.formula_arg1(collection, UNPROVIDED));
                SubLObject cdolist_list_var = colls;
                SubLObject sub_coll = NIL;
                for (sub_coll = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , sub_coll = cdolist_list_var.first()) {
                    if (!((NIL != term.el_fort_p(sub_coll)) && (NIL != com.cyc.cycjava.cycl.isa.isaP(v_term, sub_coll, mt, tv)))) {
                        return NIL;
                    }
                }
                return T;
            }
        }
        if ((NIL != forts.non_fort_p(v_term)) && (NIL != sbhl_link_methods.non_fort_isaP(v_term, collection, mt, tv))) {
            return T;
        }
        return NIL;
    }

    /**
     * Returns whether TERM is an instance of COLLECTION via the SBHL, i.e. isa and genls assertions.
     *
     * @unknown This function does _not_ use defns to determine membership in COLLECTION.
     * @see has-type?
     * @see quiet-has-type?
     */
    @LispMethod(comment = "Returns whether TERM is an instance of COLLECTION via the SBHL, i.e. isa and genls assertions.\r\n\r\n@unknown This function does _not_ use defns to determine membership in COLLECTION.\r\n@see has-type?\r\n@see quiet-has-type?")
    public static SubLObject isaP(final SubLObject v_term, final SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(collection, EL_FORT_P);
        if (NIL != sbhl_search_methods.sbhl_non_justifying_predicate_relation_p(sbhl_module_vars.get_sbhl_module($$isa), v_term, collection, mt, tv)) {
            return T;
        }
        if ((NIL != sbhl_link_methods.isa_stored_naut_arg2_p(v_term)) && (NIL != genls.any_specP(collection, sbhl_link_methods.isas_from_naut_arg2(v_term, mt, tv), mt, tv))) {
            return T;
        }
        if (((NIL != cycl_grammar.cycl_nat_p(collection)) && cycl_utilities.formula_operator(collection).eql($$CollectionIntersectionFn)) && (NIL != el_extensional_set_p(cycl_utilities.formula_arg1(collection, UNPROVIDED)))) {
            SubLObject cdolist_list_var;
            final SubLObject colls = cdolist_list_var = extensional_set_elements(cycl_utilities.formula_arg1(collection, UNPROVIDED));
            SubLObject sub_coll = NIL;
            sub_coll = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                if ((NIL == term.el_fort_p(sub_coll)) || (NIL == isaP(v_term, sub_coll, mt, tv))) {
                    return NIL;
                }
                cdolist_list_var = cdolist_list_var.rest();
                sub_coll = cdolist_list_var.first();
            } 
            return T;
        }
        if ((NIL != forts.non_fort_p(v_term)) && (NIL != sbhl_link_methods.non_fort_isaP(v_term, collection, mt, tv))) {
            return T;
        }
        return NIL;
    }/**
     * Returns whether TERM is an instance of COLLECTION via the SBHL, i.e. isa and genls assertions.
     *
     * @unknown This function does _not_ use defns to determine membership in COLLECTION.
     * @see has-type?
     * @see quiet-has-type?
     */


    /**
     * is <term> an element of <collection> via assertions in any mt in <mts>
     */
    @LispMethod(comment = "is <term> an element of <collection> via assertions in any mt in <mts>")
    public static final SubLObject isa_in_mtsP_alt(SubLObject v_term, SubLObject collection, SubLObject mts) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(collection, EL_FORT_P);
            {
                SubLObject isaP = NIL;
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_GENL_MT_OF_LIST_MEMBER, thread);
                        mt_relevance_macros.$relevant_mts$.bind(mts, thread);
                        isaP = com.cyc.cycjava.cycl.isa.isaP(v_term, collection, UNPROVIDED, UNPROVIDED);
                    } finally {
                        mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                    }
                }
                return isaP;
            }
        }
    }

    /**
     * is <term> an element of <collection> via assertions in any mt in <mts>
     */
    @LispMethod(comment = "is <term> an element of <collection> via assertions in any mt in <mts>")
    public static SubLObject isa_in_mtsP(final SubLObject v_term, final SubLObject collection, final SubLObject mts) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLTrampolineFile.enforceType(collection, EL_FORT_P);
        SubLObject isaP = NIL;
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_GENL_MT_OF_LIST_MEMBER, thread);
            mt_relevance_macros.$relevant_mts$.bind(mts, thread);
            isaP = isaP(v_term, collection, UNPROVIDED, UNPROVIDED);
        } finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return isaP;
    }/**
     * is <term> an element of <collection> via assertions in any mt in <mts>
     */


    /**
     * is <term> an element of <collection> in any mt
     */
    @LispMethod(comment = "is <term> an element of <collection> in any mt")
    public static final SubLObject isa_in_any_mtP_alt(SubLObject v_term, SubLObject collection) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject isaP = NIL;
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                        mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                        isaP = com.cyc.cycjava.cycl.isa.isaP(v_term, collection, UNPROVIDED, UNPROVIDED);
                    } finally {
                        mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                    }
                }
                return isaP;
            }
        }
    }

    /**
     * is <term> an element of <collection> in any mt
     */
    @LispMethod(comment = "is <term> an element of <collection> in any mt")
    public static SubLObject isa_in_any_mtP(final SubLObject v_term, final SubLObject collection) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject isaP = NIL;
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
            mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
            isaP = isaP(v_term, collection, UNPROVIDED, UNPROVIDED);
        } finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return isaP;
    }/**
     * is <term> an element of <collection> in any mt
     */


    /**
     *
     *
     * @return booleanp; whether NAT is an element of COLLECTION.
     */
    @LispMethod(comment = "@return booleanp; whether NAT is an element of COLLECTION.")
    public static final SubLObject nat_isaP_alt(SubLObject nat, SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            SubLObject v_term = cycl_utilities.find_ground_naut(nat);
            if (NIL != v_term) {
                return com.cyc.cycjava.cycl.isa.isaP(v_term, collection, mt, tv);
            } else {
                return com.cyc.cycjava.cycl.isa.nat_isa_intP(nat, collection, mt);
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether NAT is an element of COLLECTION.
     */
    @LispMethod(comment = "@return booleanp; whether NAT is an element of COLLECTION.")
    public static SubLObject nat_isaP(final SubLObject nat, final SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLObject v_term = cycl_utilities.find_ground_naut(nat);
        if (NIL != v_term) {
            return isaP(v_term, collection, mt, tv);
        }
        return nat_isa_intP(nat, collection, mt);
    }

    /**
     *
     *
     * @return booleanp; whether the naut NAT is an element of COLLECTION.
     */
    @LispMethod(comment = "@return booleanp; whether the naut NAT is an element of COLLECTION.")
    public static final SubLObject nat_isa_intP_alt(SubLObject nat, SubLObject collection, SubLObject mt) {
        return makeBoolean((NIL != sbhl_link_methods.non_fort_isaP(nat, collection, mt, UNPROVIDED)) || (((NIL == com.cyc.cycjava.cycl.isa.weak_not_result_isa_colP(cycl_utilities.nat_functor(nat), collection, mt)) && (NIL == com.cyc.cycjava.cycl.isa.weak_not_result_isa_arg_colP(nat, collection, mt))) && ((((NIL != com.cyc.cycjava.cycl.isa.result_isa_colP(cycl_utilities.nat_functor(nat), collection, mt)) || (NIL != com.cyc.cycjava.cycl.isa.result_isa_arg_colP(nat, collection, mt))) || (NIL != com.cyc.cycjava.cycl.isa.result_isa_inter_arg_colP(nat, collection, mt))) || (NIL != com.cyc.cycjava.cycl.isa.result_isa_inter_arg_reln_colP(nat, collection, mt)))));
    }

    /**
     *
     *
     * @return booleanp; whether the naut NAT is an element of COLLECTION.
     */
    @LispMethod(comment = "@return booleanp; whether the naut NAT is an element of COLLECTION.")
    public static SubLObject nat_isa_intP(final SubLObject nat, final SubLObject collection, final SubLObject mt) {
        return makeBoolean((NIL != sbhl_link_methods.non_fort_isaP(nat, collection, mt, UNPROVIDED)) || (((NIL == weak_not_result_isa_colP(cycl_utilities.nat_functor(nat), collection, mt)) && (NIL == weak_not_result_isa_arg_colP(nat, collection, mt))) && ((((NIL != result_isa_colP(cycl_utilities.nat_functor(nat), collection, mt)) || (NIL != result_isa_arg_colP(nat, collection, mt))) || (NIL != result_isa_inter_arg_colP(nat, collection, mt))) || (NIL != result_isa_inter_arg_reln_colP(nat, collection, mt)))));
    }

    /**
     * does FUNCTOR return instances of COLLECTION
     */
    @LispMethod(comment = "does FUNCTOR return instances of COLLECTION")
    public static final SubLObject result_isa_colP_alt(SubLObject functor, SubLObject collection, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return genls.any_specP(collection, kb_accessors.result_isa(functor, mt), mt, UNPROVIDED);
    }

    /**
     * does FUNCTOR return instances of COLLECTION
     */
    @LispMethod(comment = "does FUNCTOR return instances of COLLECTION")
    public static SubLObject result_isa_colP(final SubLObject functor, final SubLObject collection, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return genls.any_specP(collection, kb_accessors.result_isa(functor, mt), mt, UNPROVIDED);
    }/**
     * does FUNCTOR return instances of COLLECTION
     */


    /**
     * does FUNCTOR *not* return instances of COLLECTION (weak disjointness fast success)
     */
    @LispMethod(comment = "does FUNCTOR *not* return instances of COLLECTION (weak disjointness fast success)")
    public static final SubLObject weak_not_result_isa_colP_alt(SubLObject functor, SubLObject collection, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return disjoint_with.any_disjoint_withP(kb_accessors.result_isa(functor, mt), collection, mt, UNPROVIDED);
    }

    /**
     * does FUNCTOR *not* return instances of COLLECTION (weak disjointness fast success)
     */
    @LispMethod(comment = "does FUNCTOR *not* return instances of COLLECTION (weak disjointness fast success)")
    public static SubLObject weak_not_result_isa_colP(final SubLObject functor, final SubLObject collection, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return disjoint_with.any_disjoint_with_anyP_memoized(kb_accessors.result_isa(functor, mt), list(collection), mt, UNPROVIDED, UNPROVIDED);
    }/**
     * does FUNCTOR *not* return instances of COLLECTION (weak disjointness fast success)
     */


    /**
     * does NAT-FORMULA return specs of COLLECTION
     */
    @LispMethod(comment = "does NAT-FORMULA return specs of COLLECTION")
    public static final SubLObject result_isa_arg_colP_alt(SubLObject nat_formula, SubLObject collection, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return genls.any_specP(collection, kb_accessors.result_isa_args(nat_formula, mt), mt, UNPROVIDED);
    }

    /**
     * does NAT-FORMULA return specs of COLLECTION
     */
    @LispMethod(comment = "does NAT-FORMULA return specs of COLLECTION")
    public static SubLObject result_isa_arg_colP(final SubLObject nat_formula, final SubLObject collection, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return genls.any_specP(collection, kb_accessors.result_isa_args(nat_formula, mt), mt, UNPROVIDED);
    }/**
     * does NAT-FORMULA return specs of COLLECTION
     */


    /**
     * does NAT-FORMULA *not* return specs of COLLECTION (weak disjointness fast success)
     */
    @LispMethod(comment = "does NAT-FORMULA *not* return specs of COLLECTION (weak disjointness fast success)")
    public static final SubLObject weak_not_result_isa_arg_colP_alt(SubLObject nat_formula, SubLObject collection, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return disjoint_with.any_disjoint_withP(kb_accessors.result_isa_args(nat_formula, mt), collection, mt, UNPROVIDED);
    }

    /**
     * does NAT-FORMULA *not* return specs of COLLECTION (weak disjointness fast success)
     */
    @LispMethod(comment = "does NAT-FORMULA *not* return specs of COLLECTION (weak disjointness fast success)")
    public static SubLObject weak_not_result_isa_arg_colP(final SubLObject nat_formula, final SubLObject collection, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return disjoint_with.any_disjoint_with_anyP_memoized(kb_accessors.result_isa_args(nat_formula, mt), list(collection), mt, UNPROVIDED, UNPROVIDED);
    }/**
     * does NAT-FORMULA *not* return specs of COLLECTION (weak disjointness fast success)
     */


    /**
     * does NAT-FORMULA return specs of COLLECTION
     */
    @LispMethod(comment = "does NAT-FORMULA return specs of COLLECTION")
    public static final SubLObject result_isa_inter_arg_colP_alt(SubLObject nat_formula, SubLObject collection, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return genls.any_specP(collection, kb_accessors.result_inter_arg_isa(nat_formula, mt), mt, UNPROVIDED);
    }

    /**
     * does NAT-FORMULA return specs of COLLECTION
     */
    @LispMethod(comment = "does NAT-FORMULA return specs of COLLECTION")
    public static SubLObject result_isa_inter_arg_colP(final SubLObject nat_formula, final SubLObject collection, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return genls.any_specP(collection, kb_accessors.result_inter_arg_isa(nat_formula, mt), mt, UNPROVIDED);
    }/**
     * does NAT-FORMULA return specs of COLLECTION
     */


    /**
     * does NAT-FORMULA return spec of COLLECTION
     */
    @LispMethod(comment = "does NAT-FORMULA return spec of COLLECTION")
    public static final SubLObject result_isa_inter_arg_reln_colP_alt(SubLObject nat_formula, SubLObject collection, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return genls.any_specP(collection, kb_accessors.result_inter_arg_isa_reln(nat_formula, mt), mt, UNPROVIDED);
    }

    /**
     * does NAT-FORMULA return spec of COLLECTION
     */
    @LispMethod(comment = "does NAT-FORMULA return spec of COLLECTION")
    public static SubLObject result_isa_inter_arg_reln_colP(final SubLObject nat_formula, final SubLObject collection, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return genls.any_specP(collection, kb_accessors.result_inter_arg_isa_reln(nat_formula, mt), mt, UNPROVIDED);
    }/**
     * does NAT-FORMULA return spec of COLLECTION
     */


    /**
     * Used for mapping searches where a goal is bound (since we don't have closures)
     */
    @LispMethod(comment = "Used for mapping searches where a goal is bound (since we don\'t have closures)")
    public static final SubLObject isaP_goal_alt(SubLObject node) {
        if (NIL != sbhl_search_methods.sbhl_predicate_relation_p(sbhl_module_vars.get_sbhl_module($$isa), node, sbhl_search_vars.get_sbhl_isaP_goal(), UNPROVIDED, UNPROVIDED)) {
            return node;
        }
        return NIL;
    }

    /**
     * Used for mapping searches where a goal is bound (since we don't have closures)
     */
    @LispMethod(comment = "Used for mapping searches where a goal is bound (since we don\'t have closures)")
    public static SubLObject isaP_goal(final SubLObject node) {
        if (NIL != sbhl_search_methods.sbhl_predicate_relation_p(sbhl_module_vars.get_sbhl_module($$isa), node, sbhl_search_vars.get_sbhl_isaP_goal(), UNPROVIDED, UNPROVIDED)) {
            return node;
        }
        return NIL;
    }/**
     * Used for mapping searches where a goal is bound (since we don't have closures)
     */


    /**
     * Returns whether TERM is an instance of any collection in COLLECTIONS
     */
    @LispMethod(comment = "Returns whether TERM is an instance of any collection in COLLECTIONS")
    public static final SubLObject any_isaP_alt(SubLObject v_term, SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(v_term, HL_TERM_P);
        SubLTrampolineFile.checkType(collections, LISTP);
        if (NIL == collections) {
            return NIL;
        } else {
            if (NIL != list_utilities.singletonP(collections)) {
                return com.cyc.cycjava.cycl.isa.isaP(v_term, collections.first(), mt, tv);
            } else {
                return makeBoolean(((NIL != sbhl_search_methods.sbhl_predicate_relation_with_any_p(sbhl_module_vars.get_sbhl_module($$isa), v_term, collections, mt, tv)) || (NIL != (NIL != forts.non_fort_p(v_term) ? ((SubLObject) (sbhl_link_methods.non_fort_isa_anyP(v_term, collections, mt, tv))) : NIL))) || (NIL != (NIL != sbhl_link_methods.isa_stored_naut_arg2_p(v_term) ? ((SubLObject) (genls.any_genl_anyP(sbhl_link_methods.isas_from_naut_arg2(v_term, mt, tv), collections, mt, tv))) : NIL)));
            }
        }
    }

    /**
     * Returns whether TERM is an instance of any collection in COLLECTIONS
     */
    @LispMethod(comment = "Returns whether TERM is an instance of any collection in COLLECTIONS")
    public static SubLObject any_isaP(final SubLObject v_term, final SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(v_term, HL_TERM_P);
        SubLTrampolineFile.enforceType(collections, LISTP);
        if (NIL == collections) {
            return NIL;
        }
        if (NIL != list_utilities.singletonP(collections)) {
            return isaP(v_term, collections.first(), mt, tv);
        }
        return makeBoolean(((NIL != sbhl_search_methods.sbhl_predicate_relation_with_any_p(sbhl_module_vars.get_sbhl_module($$isa), v_term, collections, mt, tv)) || (NIL != (NIL != forts.non_fort_p(v_term) ? sbhl_link_methods.non_fort_isa_anyP(v_term, collections, mt, tv) : NIL))) || (NIL != (NIL != sbhl_link_methods.isa_stored_naut_arg2_p(v_term) ? genls.any_genl_anyP(sbhl_link_methods.isas_from_naut_arg2(v_term, mt, tv), collections, mt, tv) : NIL)));
    }/**
     * Returns whether TERM is an instance of any collection in COLLECTIONS
     */


    /**
     * Returns whether TERM is an instance of any collection in COLLECTIONS
     */
    @LispMethod(comment = "Returns whether TERM is an instance of any collection in COLLECTIONS")
    public static final SubLObject isa_anyP_alt(SubLObject v_term, SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(v_term, HL_TERM_P);
        SubLTrampolineFile.checkType(collections, LISTP);
        return com.cyc.cycjava.cycl.isa.any_isaP(v_term, collections, mt, tv);
    }

    /**
     * Returns whether TERM is an instance of any collection in COLLECTIONS
     */
    @LispMethod(comment = "Returns whether TERM is an instance of any collection in COLLECTIONS")
    public static SubLObject isa_anyP(final SubLObject v_term, final SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(v_term, HL_TERM_P);
        SubLTrampolineFile.enforceType(collections, LISTP);
        return any_isaP(v_term, collections, mt, tv);
    }/**
     * Returns whether TERM is an instance of any collection in COLLECTIONS
     */


    /**
     * Returns whether NAT is an instance of any of COLLECTIONS.
     */
    @LispMethod(comment = "Returns whether NAT is an instance of any of COLLECTIONS.")
    public static final SubLObject nat_any_isaP_alt(SubLObject nat, SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            SubLObject v_term = cycl_utilities.find_ground_naut(nat);
            if (NIL != v_term) {
                return com.cyc.cycjava.cycl.isa.isa_anyP(v_term, collections, mt, tv);
            } else {
                return makeBoolean((NIL != sbhl_link_methods.non_fort_isa_anyP(nat, collections, UNPROVIDED, UNPROVIDED)) || (NIL != genls.any_genl_anyP(kb_accessors.result_types(cycl_utilities.nat_functor(nat), mt), collections, mt, tv)));
            }
        }
    }

    /**
     * Returns whether NAT is an instance of any of COLLECTIONS.
     */
    @LispMethod(comment = "Returns whether NAT is an instance of any of COLLECTIONS.")
    public static SubLObject nat_any_isaP(final SubLObject nat, final SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLObject v_term = cycl_utilities.find_ground_naut(nat);
        if (NIL != v_term) {
            return isa_anyP(v_term, collections, mt, tv);
        }
        return makeBoolean((NIL != sbhl_link_methods.non_fort_isa_anyP(nat, collections, UNPROVIDED, UNPROVIDED)) || (NIL != genls.any_genl_anyP(kb_accessors.result_types(cycl_utilities.nat_functor(nat), mt), collections, mt, tv)));
    }/**
     * Returns whether NAT is an instance of any of COLLECTIONS.
     */


    /**
     * Returns the first element of LIST the is an instance of COLLECTION in any mt.
     */
    @LispMethod(comment = "Returns the first element of LIST the is an instance of COLLECTION in any mt.")
    public static final SubLObject find_if_isaP_alt(SubLObject collection, SubLObject list) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(list, LISTP);
            if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                if (NIL == com.cyc.cycjava.cycl.isa.isaP(collection, $$Collection, UNPROVIDED, UNPROVIDED)) {
                    Errors.error($str_alt135$_A_is_not_a_collection, collection);
                }
            }
            {
                SubLObject cdolist_list_var = list;
                SubLObject item = NIL;
                for (item = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , item = cdolist_list_var.first()) {
                    if (NIL != com.cyc.cycjava.cycl.isa.isa_in_any_mtP(item, collection)) {
                        return item;
                    }
                }
            }
            return NIL;
        }
    }

    /**
     * Returns the first element of LIST the is an instance of COLLECTION in any mt.
     */
    @LispMethod(comment = "Returns the first element of LIST the is an instance of COLLECTION in any mt.")
    public static SubLObject find_if_isaP(final SubLObject collection, final SubLObject list) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != listp(list) : "! listp(list) " + ("Types.listp(list) " + "CommonSymbols.NIL != Types.listp(list) ") + list;
        if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == isaP(collection, $$Collection, UNPROVIDED, UNPROVIDED))) {
            Errors.error($str140$_A_is_not_a_collection, collection);
        }
        SubLObject cdolist_list_var = list;
        SubLObject item = NIL;
        item = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != isa_in_any_mtP(item, collection)) {
                return item;
            }
            cdolist_list_var = cdolist_list_var.rest();
            item = cdolist_list_var.first();
        } 
        return NIL;
    }/**
     * Returns the first element of LIST the is an instance of COLLECTION in any mt.
     */


    /**
     *
     *
     * @return booleanp; whether TERM is an instance of all of COLLECTIONS.
     */
    @LispMethod(comment = "@return booleanp; whether TERM is an instance of all of COLLECTIONS.")
    public static final SubLObject all_isaP_alt(SubLObject v_term, SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(collections, LISTP);
        if (NIL == collections) {
            return T;
        } else {
            if (NIL != list_utilities.singletonP(collections)) {
                return com.cyc.cycjava.cycl.isa.isaP(v_term, collections.first(), mt, tv);
            } else {
                return makeBoolean(((NIL != sbhl_search_methods.sbhl_predicate_relation_with_all_p(sbhl_module_vars.get_sbhl_module($$isa), v_term, collections, mt, tv)) || (NIL != (NIL != forts.non_fort_p(v_term) ? ((SubLObject) (sbhl_link_methods.non_fort_isa_allP(v_term, collections, mt, tv))) : NIL))) || (NIL != (NIL != sbhl_link_methods.isa_stored_naut_arg2_p(v_term) ? ((SubLObject) (genls.any_genl_allP(sbhl_link_methods.isas_from_naut_arg2(v_term, mt, tv), collections, mt, tv))) : NIL)));
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether TERM is an instance of all of COLLECTIONS.
     */
    @LispMethod(comment = "@return booleanp; whether TERM is an instance of all of COLLECTIONS.")
    public static SubLObject all_isaP(final SubLObject v_term, final SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        assert NIL != listp(collections) : "! listp(collections) " + ("Types.listp(collections) " + "CommonSymbols.NIL != Types.listp(collections) ") + collections;
        if (NIL == collections) {
            return T;
        }
        if (NIL != list_utilities.singletonP(collections)) {
            return isaP(v_term, collections.first(), mt, tv);
        }
        return makeBoolean(((NIL != sbhl_search_methods.sbhl_predicate_relation_with_all_p(sbhl_module_vars.get_sbhl_module($$isa), v_term, collections, mt, tv)) || (NIL != (NIL != forts.non_fort_p(v_term) ? sbhl_link_methods.non_fort_isa_allP(v_term, collections, mt, tv) : NIL))) || (NIL != (NIL != sbhl_link_methods.isa_stored_naut_arg2_p(v_term) ? genls.any_genl_allP(sbhl_link_methods.isas_from_naut_arg2(v_term, mt, tv), collections, mt, tv) : NIL)));
    }

    /**
     *
     *
     * @return booleanp; whether all the terms of TERMS are instances of COLLECTION.
     */
    @LispMethod(comment = "@return booleanp; whether all the terms of TERMS are instances of COLLECTION.")
    public static final SubLObject all_instancesP_alt(SubLObject terms, SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (NIL == terms) {
            return T;
        } else {
            if (NIL != list_utilities.singletonP(terms)) {
                return com.cyc.cycjava.cycl.isa.isaP(terms.first(), collection, mt, tv);
            } else {
                return sbhl_search_methods.sbhl_all_with_predicate_relation_p(sbhl_module_vars.get_sbhl_module($$isa), terms, collection, mt, tv);
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether all the terms of TERMS are instances of COLLECTION.
     */
    @LispMethod(comment = "@return booleanp; whether all the terms of TERMS are instances of COLLECTION.")
    public static SubLObject all_instancesP(final SubLObject terms, final SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (NIL == terms) {
            return T;
        }
        if (NIL != list_utilities.singletonP(terms)) {
            return isaP(terms.first(), collection, mt, tv);
        }
        return sbhl_search_methods.sbhl_all_with_predicate_relation_p(sbhl_module_vars.get_sbhl_module($$isa), terms, collection, mt, tv);
    }

    /**
     *
     *
     * @return booleanp; whether any term in TERMS is an instance of any collection in COLLECTIONS
     */
    @LispMethod(comment = "@return booleanp; whether any term in TERMS is an instance of any collection in COLLECTIONS")
    public static final SubLObject any_isa_anyP_alt(SubLObject terms, SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(terms, LISTP);
        SubLTrampolineFile.checkType(collections, LISTP);
        if (NIL == terms) {
            return NIL;
        } else {
            if (NIL == collections) {
                return NIL;
            } else {
                if (NIL != list_utilities.singletonP(terms)) {
                    return com.cyc.cycjava.cycl.isa.isa_anyP(terms.first(), collections, mt, tv);
                } else {
                    return makeBoolean((NIL != sbhl_search_methods.sbhl_predicate_relation_between_any_p(sbhl_module_vars.get_sbhl_module($$isa), terms, collections, mt, tv)) || (NIL != (NIL != list_utilities.any_in_list(ISA_STORED_NAUT_ARG2_P, terms, UNPROVIDED) ? ((SubLObject) (genls.any_genl_anyP(sbhl_link_methods.union_isas_from_naut_arg2(terms, mt, tv), collections, mt, tv))) : NIL)));
                }
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether any term in TERMS is an instance of any collection in COLLECTIONS
     */
    @LispMethod(comment = "@return booleanp; whether any term in TERMS is an instance of any collection in COLLECTIONS")
    public static SubLObject any_isa_anyP(final SubLObject terms, final SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(terms, LISTP);
        SubLTrampolineFile.enforceType(collections, LISTP);
        if (NIL == terms) {
            return NIL;
        }
        if (NIL == collections) {
            return NIL;
        }
        if (NIL != list_utilities.singletonP(terms)) {
            return isa_anyP(terms.first(), collections, mt, tv);
        }
        return makeBoolean((NIL != sbhl_search_methods.sbhl_predicate_relation_between_any_p(sbhl_module_vars.get_sbhl_module($$isa), terms, collections, mt, tv)) || (NIL != (NIL != list_utilities.any_in_list(ISA_STORED_NAUT_ARG2_P, terms, UNPROVIDED) ? genls.any_genl_anyP(sbhl_link_methods.union_isas_from_naut_arg2(terms, mt, tv), collections, mt, tv) : NIL)));
    }

    /**
     *
     *
     * @return booleanp; whether TERM is known to not be an instance of COLLECTION
     */
    @LispMethod(comment = "@return booleanp; whether TERM is known to not be an instance of COLLECTION")
    public static final SubLObject not_isaP_alt(SubLObject v_term, SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(v_term, HL_TERM_P);
        SubLTrampolineFile.checkType(collection, EL_FORT_P);
        return makeBoolean((NIL != com.cyc.cycjava.cycl.isa.not_isa_by_extent_knownP(v_term, collection, mt, tv)) || (NIL != com.cyc.cycjava.cycl.isa.not_isa_by_sbhlP(v_term, collection, mt, tv)));
    }

    /**
     *
     *
     * @return booleanp; whether TERM is known to not be an instance of COLLECTION
     */
    @LispMethod(comment = "@return booleanp; whether TERM is known to not be an instance of COLLECTION")
    public static SubLObject not_isaP(final SubLObject v_term, final SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(v_term, HL_TERM_P);
        SubLTrampolineFile.enforceType(collection, EL_FORT_P);
        return makeBoolean((((NIL == within_assertP()) || (NIL == czer_utilities.equals_elP(make_binary_formula($$isa, v_term, collection), wff_vars.wff_original_formula(), UNPROVIDED, UNPROVIDED, UNPROVIDED))) && (NIL != not_isa_by_extent_knownP(v_term, collection, mt, tv))) || (NIL != not_isa_by_sbhlP(v_term, collection, mt, tv)));
    }

    /**
     * Whether TERM not-isa? at least one collection in COLLECTIONS
     *
     * @unknown this would be called not-isa-any? except that might be confusing because of English
     */
    @LispMethod(comment = "Whether TERM not-isa? at least one collection in COLLECTIONS\r\n\r\n@unknown this would be called not-isa-any? except that might be confusing because of English")
    public static final SubLObject not_isa_someP_alt(SubLObject v_term, SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            SubLObject resultP = NIL;
            if (NIL == resultP) {
                {
                    SubLObject csome_list_var = collections;
                    SubLObject col = NIL;
                    for (col = csome_list_var.first(); !((NIL != resultP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , col = csome_list_var.first()) {
                        if (NIL != com.cyc.cycjava.cycl.isa.not_isaP(v_term, col, mt, tv)) {
                            resultP = T;
                        }
                    }
                }
            }
            return resultP;
        }
    }

    /**
     * Whether TERM not-isa? at least one collection in COLLECTIONS
     *
     * @unknown this would be called not-isa-any? except that might be confusing because of English
     */
    @LispMethod(comment = "Whether TERM not-isa? at least one collection in COLLECTIONS\r\n\r\n@unknown this would be called not-isa-any? except that might be confusing because of English")
    public static SubLObject not_isa_someP(final SubLObject v_term, final SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLObject resultP = NIL;
        if (NIL == resultP) {
            SubLObject csome_list_var = collections;
            SubLObject col = NIL;
            col = csome_list_var.first();
            while ((NIL == resultP) && (NIL != csome_list_var)) {
                if (NIL != not_isaP(v_term, col, mt, tv)) {
                    resultP = T;
                }
                csome_list_var = csome_list_var.rest();
                col = csome_list_var.first();
            } 
        }
        return resultP;
    }/**
     * Whether TERM not-isa? at least one collection in COLLECTIONS
     *
     * @unknown this would be called not-isa-any? except that might be confusing because of English
     */


    public static final SubLObject not_isa_by_sbhlP_alt(SubLObject v_term, SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_search_implied_relations.sbhl_implied_false_predicate_relation_p(sbhl_module_vars.get_sbhl_module($$isa), v_term, collection, mt, tv);
    }

    public static SubLObject not_isa_by_sbhlP(final SubLObject v_term, final SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_search_implied_relations.sbhl_implied_false_predicate_relation_p(sbhl_module_vars.get_sbhl_module($$isa), v_term, collection, mt, tv);
    }

    /**
     *
     *
     * @return booleanp; whether TERM is known to not be an instance of COLLECTION b/c the complete extent of COLLECTION is known and (isa? TERM COLLECTION) -> nil.
     */
    @LispMethod(comment = "@return booleanp; whether TERM is known to not be an instance of COLLECTION b/c the complete extent of COLLECTION is known and (isa? TERM COLLECTION) -> nil.")
    public static final SubLObject not_isa_by_extent_knownP_alt(SubLObject v_term, SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (NIL != kb_accessors.completely_enumerable_collectionP(collection, mt)) {
            return makeBoolean(NIL == com.cyc.cycjava.cycl.isa.isaP(v_term, collection, mt, tv));
        }
        return NIL;
    }

    /**
     *
     *
     * @return booleanp; whether TERM is known to not be an instance of COLLECTION b/c the complete extent of COLLECTION is known and (isa? TERM COLLECTION) -> nil.
     */
    @LispMethod(comment = "@return booleanp; whether TERM is known to not be an instance of COLLECTION b/c the complete extent of COLLECTION is known and (isa? TERM COLLECTION) -> nil.")
    public static SubLObject not_isa_by_extent_knownP(final SubLObject v_term, final SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (NIL != kb_accessors.completely_enumerable_collectionP(collection, mt)) {
            return makeBoolean(NIL == isaP(v_term, collection, mt, tv));
        }
        return NIL;
    }

    /**
     * Returns whether collection COL is not an isa of TERM, or arguably should not be a not-isa of TERM because (isa TERM COL).
     */
    @LispMethod(comment = "Returns whether collection COL is not an isa of TERM, or arguably should not be a not-isa of TERM because (isa TERM COL).")
    public static final SubLObject argue_not_isaP_alt(SubLObject v_term, SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_search_implied_relations.sbhl_argumentation_false_predicate_relation_p(sbhl_module_vars.get_sbhl_module($$isa), v_term, col, mt, tv);
    }

    /**
     * Returns whether collection COL is not an isa of TERM, or arguably should not be a not-isa of TERM because (isa TERM COL).
     */
    @LispMethod(comment = "Returns whether collection COL is not an isa of TERM, or arguably should not be a not-isa of TERM because (isa TERM COL).")
    public static SubLObject argue_not_isaP(final SubLObject v_term, final SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_search_implied_relations.sbhl_argumentation_false_predicate_relation_p(sbhl_module_vars.get_sbhl_module($$isa), v_term, col, mt, tv);
    }/**
     * Returns whether collection COL is not an isa of TERM, or arguably should not be a not-isa of TERM because (isa TERM COL).
     */


    /**
     *
     *
     * @return booleanp; whether TERM is known in any mt to not be an instance of COLLECTION
     */
    @LispMethod(comment = "@return booleanp; whether TERM is known in any mt to not be an instance of COLLECTION")
    public static final SubLObject not_isa_in_any_mtP_alt(SubLObject v_term, SubLObject collection) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject not_isaP = NIL;
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                        mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                        not_isaP = com.cyc.cycjava.cycl.isa.not_isaP(v_term, collection, UNPROVIDED, UNPROVIDED);
                    } finally {
                        mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                    }
                }
                return not_isaP;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether TERM is known in any mt to not be an instance of COLLECTION
     */
    @LispMethod(comment = "@return booleanp; whether TERM is known in any mt to not be an instance of COLLECTION")
    public static SubLObject not_isa_in_any_mtP(final SubLObject v_term, final SubLObject collection) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject not_isaP = NIL;
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
            mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
            not_isaP = not_isaP(v_term, collection, UNPROVIDED, UNPROVIDED);
        } finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return not_isaP;
    }

    /**
     *
     *
     * @return boolenap; whether NAT is known to not be an instance of COLLECTION
     */
    @LispMethod(comment = "@return boolenap; whether NAT is known to not be an instance of COLLECTION")
    public static final SubLObject nat_not_isaP_alt(SubLObject nat, SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            SubLObject v_term = cycl_utilities.find_ground_naut(nat);
            if (NIL != v_term) {
                return com.cyc.cycjava.cycl.isa.not_isaP(v_term, collection, mt, tv);
            } else {
                return disjoint_with.any_disjoint_withP(kb_accessors.result_types(cycl_utilities.nat_functor(nat), mt), collection, mt, tv);
            }
        }
    }

    /**
     *
     *
     * @return boolenap; whether NAT is known to not be an instance of COLLECTION
     */
    @LispMethod(comment = "@return boolenap; whether NAT is known to not be an instance of COLLECTION")
    public static SubLObject nat_not_isaP(final SubLObject nat, final SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLObject v_term = cycl_utilities.find_ground_naut(nat);
        if (NIL != v_term) {
            return not_isaP(v_term, collection, mt, tv);
        }
        return disjoint_with.any_disjoint_with_anyP_memoized(kb_accessors.result_types(cycl_utilities.nat_functor(nat), mt), list(collection), mt, tv, UNPROVIDED);
    }

    /**
     * Returns justification of (isa TERM COLLECTION)
     */
    @LispMethod(comment = "Returns justification of (isa TERM COLLECTION)")
    public static final SubLObject why_isaP_alt(SubLObject v_term, SubLObject collection, SubLObject mt, SubLObject tv, SubLObject behavior) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (behavior == UNPROVIDED) {
            behavior = NIL;
        }
        SubLTrampolineFile.checkType(v_term, HL_TERM_P);
        SubLTrampolineFile.checkType(collection, EL_FORT_P);
        if (NIL != term.first_order_nautP(v_term)) {
            return com.cyc.cycjava.cycl.isa.any_just_of_nat_isa(v_term, collection, mt);
        } else {
            return sbhl_search_methods.why_sbhl_predicate_relation_p(sbhl_module_vars.get_sbhl_module($$isa), v_term, collection, mt, tv, behavior);
        }
    }

    /**
     * Returns justification of (isa TERM COLLECTION)
     */
    @LispMethod(comment = "Returns justification of (isa TERM COLLECTION)")
    public static SubLObject why_isaP(final SubLObject v_term, final SubLObject collection, SubLObject mt, SubLObject tv, SubLObject behavior) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (behavior == UNPROVIDED) {
            behavior = NIL;
        }
        SubLTrampolineFile.enforceType(v_term, HL_TERM_P);
        SubLTrampolineFile.enforceType(collection, EL_FORT_P);
        if (NIL != term.first_order_nautP(v_term)) {
            return any_just_of_nat_isa(v_term, collection, mt);
        }
        return sbhl_search_methods.why_sbhl_predicate_relation_p(sbhl_module_vars.get_sbhl_module($$isa), v_term, collection, mt, tv, behavior);
    }/**
     * Returns justification of (isa TERM COLLECTION)
     */


    /**
     * justification of (isa <term> <collection>)
     */
    @LispMethod(comment = "justification of (isa <term> <collection>)")
    public static final SubLObject any_just_of_isa_alt(SubLObject v_term, SubLObject collection, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return com.cyc.cycjava.cycl.isa.why_isaP(v_term, collection, mt, UNPROVIDED, UNPROVIDED);
    }

    /**
     * justification of (isa <term> <collection>)
     */
    @LispMethod(comment = "justification of (isa <term> <collection>)")
    public static SubLObject any_just_of_isa(final SubLObject v_term, final SubLObject collection, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return why_isaP(v_term, collection, mt, UNPROVIDED, UNPROVIDED);
    }/**
     * justification of (isa <term> <collection>)
     */


    /**
     * justification of (isa <nat> <collection>)
     */
    @LispMethod(comment = "justification of (isa <nat> <collection>)")
    public static final SubLObject any_just_of_nat_isa_alt(SubLObject nat, SubLObject collection, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        {
            SubLObject v_term = cycl_utilities.find_ground_naut(nat);
            SubLObject just = com.cyc.cycjava.cycl.isa.any_just_of_isa(v_term, collection, mt);
            if (NIL != just) {
                return cons(bq_cons(list($$termOfUnit, v_term, nat), $list_alt149), just);
            } else {
                {
                    SubLObject nat_just = NIL;
                    if (NIL == nat_just) {
                        {
                            SubLObject csome_list_var = kb_accessors.result_types(cycl_utilities.nat_functor(nat), mt);
                            SubLObject v_isa = NIL;
                            for (v_isa = csome_list_var.first(); !((NIL != nat_just) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , v_isa = csome_list_var.first()) {
                                if (!v_isa.equal(collection)) {
                                    nat_just = genls.why_genlP(v_isa, collection, mt, UNPROVIDED, UNPROVIDED);
                                }
                                if ((NIL != nat_just) || v_isa.equal(collection)) {
                                    return cons(bq_cons(list($$resultIsa, cycl_utilities.nat_functor(nat), v_isa), $list_alt149), nat_just);
                                }
                            }
                        }
                    }
                    if (NIL == nat_just) {
                        {
                            SubLObject csome_list_var = kb_accessors.result_isa_args(nat, mt);
                            SubLObject v_isa = NIL;
                            for (v_isa = csome_list_var.first(); !((NIL != nat_just) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , v_isa = csome_list_var.first()) {
                                if (!v_isa.equal(collection)) {
                                    nat_just = genls.why_genlP(v_isa, collection, mt, UNPROVIDED, UNPROVIDED);
                                }
                                if ((NIL != nat_just) || v_isa.equal(collection)) {
                                    {
                                        SubLObject args = kb_accessors.result_isa_via_argnums(nat, collection, mt, UNPROVIDED);
                                        if (NIL != args) {
                                            return cons(bq_cons(list($$resultIsaArg, cycl_utilities.nat_functor(nat), args.first()), $list_alt149), nat_just);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (NIL == nat_just) {
                        {
                            SubLObject csome_list_var = kb_accessors.result_inter_arg_isa(nat, mt);
                            SubLObject v_isa = NIL;
                            for (v_isa = csome_list_var.first(); !((NIL != nat_just) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , v_isa = csome_list_var.first()) {
                                if (!v_isa.equal(collection)) {
                                    nat_just = genls.why_genlP(v_isa, collection, mt, UNPROVIDED, UNPROVIDED);
                                }
                                if ((NIL != nat_just) || v_isa.equal(collection)) {
                                    {
                                        SubLObject args = kb_accessors.result_inter_arg_isa_via_which_args(nat, collection, mt, UNPROVIDED).first();
                                        if (args.isCons()) {
                                            {
                                                SubLObject arg = args.first();
                                                SubLObject ind_col = second(args);
                                                SubLObject dep_col = third(args);
                                                SubLObject arg_col = cycl_utilities.nat_arg(nat, arg, UNPROVIDED);
                                                if (!arg_col.equal(ind_col)) {
                                                    nat_just = nconc(nat_just, com.cyc.cycjava.cycl.isa.why_isaP(arg_col, ind_col, mt, UNPROVIDED, UNPROVIDED));
                                                }
                                                if (!dep_col.equal(collection)) {
                                                    nat_just = nconc(nat_just, genls.why_genlP(dep_col, collection, mt, UNPROVIDED, UNPROVIDED));
                                                }
                                                return cons(bq_cons(list($$interArgResultIsa, cycl_utilities.nat_functor(nat), arg, ind_col, dep_col), $list_alt149), nat_just);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (NIL == nat_just) {
                        {
                            SubLObject csome_list_var = kb_accessors.result_inter_arg_isa_reln(nat, mt);
                            SubLObject v_isa = NIL;
                            for (v_isa = csome_list_var.first(); !((NIL != nat_just) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , v_isa = csome_list_var.first()) {
                                if (!v_isa.equal(collection)) {
                                    nat_just = genls.why_genlP(v_isa, collection, mt, UNPROVIDED, UNPROVIDED);
                                }
                                if ((NIL != nat_just) || v_isa.equal(collection)) {
                                    {
                                        SubLObject args = kb_accessors.result_inter_arg_isa_reln_via_which_args(nat, collection, mt, UNPROVIDED).first();
                                        if (args.isCons()) {
                                            {
                                                SubLObject rel_sentence = args.first().first();
                                                SubLObject arg = second(args);
                                                SubLObject rel = cycl_utilities.formula_operator(rel_sentence);
                                                SubLObject rel_nat_term_arg = third(args);
                                                SubLObject rel_col_arg = fourth(args);
                                                SubLObject col = cycl_utilities.formula_arg(rel_sentence, rel_col_arg, UNPROVIDED);
                                                if (!col.equal(collection)) {
                                                    nat_just = nconc(nat_just, genls.why_genlP(col, collection, mt, UNPROVIDED, UNPROVIDED));
                                                }
                                                return append(list(bq_cons(list($$interArgResultIsaReln, cycl_utilities.nat_functor(nat), arg, rel, rel_nat_term_arg, rel_col_arg), $list_alt149), bq_cons(rel_sentence, $list_alt149)), nat_just);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return NIL;
    }

    /**
     * justification of (isa <nat> <collection>)
     */
    @LispMethod(comment = "justification of (isa <nat> <collection>)")
    public static SubLObject any_just_of_nat_isa(final SubLObject nat, final SubLObject collection, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        final SubLObject v_term = cycl_utilities.find_ground_naut(nat);
        final SubLObject just = any_just_of_isa(v_term, collection, mt);
        if (NIL != just) {
            return cons(bq_cons(list($$termOfUnit, v_term, nat), $list153), just);
        }
        SubLObject nat_just = NIL;
        if (NIL == nat_just) {
            SubLObject csome_list_var = kb_accessors.result_types(cycl_utilities.nat_functor(nat), mt);
            SubLObject v_isa = NIL;
            v_isa = csome_list_var.first();
            while ((NIL == nat_just) && (NIL != csome_list_var)) {
                if (!v_isa.equal(collection)) {
                    nat_just = genls.why_genlP(v_isa, collection, mt, UNPROVIDED, UNPROVIDED);
                }
                if ((NIL != nat_just) || v_isa.equal(collection)) {
                    return cons(bq_cons(list($$resultIsa, cycl_utilities.nat_functor(nat), v_isa), $list153), nat_just);
                }
                csome_list_var = csome_list_var.rest();
                v_isa = csome_list_var.first();
            } 
        }
        if (NIL == nat_just) {
            SubLObject csome_list_var = kb_accessors.result_isa_args(nat, mt);
            SubLObject v_isa = NIL;
            v_isa = csome_list_var.first();
            while ((NIL == nat_just) && (NIL != csome_list_var)) {
                if (!v_isa.equal(collection)) {
                    nat_just = genls.why_genlP(v_isa, collection, mt, UNPROVIDED, UNPROVIDED);
                }
                if ((NIL != nat_just) || v_isa.equal(collection)) {
                    final SubLObject args = kb_accessors.result_isa_via_argnums(nat, collection, mt, UNPROVIDED);
                    if (NIL != args) {
                        return cons(bq_cons(list($$resultIsaArg, cycl_utilities.nat_functor(nat), args.first()), $list153), nat_just);
                    }
                }
                csome_list_var = csome_list_var.rest();
                v_isa = csome_list_var.first();
            } 
        }
        if (NIL == nat_just) {
            SubLObject csome_list_var = kb_accessors.result_inter_arg_isa(nat, mt);
            SubLObject v_isa = NIL;
            v_isa = csome_list_var.first();
            while ((NIL == nat_just) && (NIL != csome_list_var)) {
                if (!v_isa.equal(collection)) {
                    nat_just = genls.why_genlP(v_isa, collection, mt, UNPROVIDED, UNPROVIDED);
                }
                if ((NIL != nat_just) || v_isa.equal(collection)) {
                    final SubLObject args = kb_accessors.result_inter_arg_isa_via_which_args(nat, collection, mt, UNPROVIDED).first();
                    if (args.isCons()) {
                        final SubLObject arg = args.first();
                        final SubLObject ind_col = second(args);
                        final SubLObject dep_col = third(args);
                        final SubLObject arg_col = cycl_utilities.nat_arg(nat, arg, UNPROVIDED);
                        if (!arg_col.equal(ind_col)) {
                            nat_just = nconc(nat_just, why_isaP(arg_col, ind_col, mt, UNPROVIDED, UNPROVIDED));
                        }
                        if (!dep_col.equal(collection)) {
                            nat_just = nconc(nat_just, genls.why_genlP(dep_col, collection, mt, UNPROVIDED, UNPROVIDED));
                        }
                        return cons(bq_cons(list($$interArgResultIsa, cycl_utilities.nat_functor(nat), arg, ind_col, dep_col), $list153), nat_just);
                    }
                }
                csome_list_var = csome_list_var.rest();
                v_isa = csome_list_var.first();
            } 
        }
        if (NIL == nat_just) {
            SubLObject csome_list_var = kb_accessors.result_inter_arg_isa_reln(nat, mt);
            SubLObject v_isa = NIL;
            v_isa = csome_list_var.first();
            while ((NIL == nat_just) && (NIL != csome_list_var)) {
                if (!v_isa.equal(collection)) {
                    nat_just = genls.why_genlP(v_isa, collection, mt, UNPROVIDED, UNPROVIDED);
                }
                if ((NIL != nat_just) || v_isa.equal(collection)) {
                    final SubLObject args = kb_accessors.result_inter_arg_isa_reln_via_which_args(nat, collection, mt, UNPROVIDED).first();
                    if (args.isCons()) {
                        final SubLObject rel_sentence = args.first().first();
                        final SubLObject arg2 = second(args);
                        final SubLObject rel = cycl_utilities.formula_operator(rel_sentence);
                        final SubLObject rel_nat_term_arg = third(args);
                        final SubLObject rel_col_arg = fourth(args);
                        final SubLObject col = cycl_utilities.formula_arg(rel_sentence, rel_col_arg, UNPROVIDED);
                        if (!col.equal(collection)) {
                            nat_just = nconc(nat_just, genls.why_genlP(col, collection, mt, UNPROVIDED, UNPROVIDED));
                        }
                        return append(list(bq_cons(list($$interArgResultIsaReln, cycl_utilities.nat_functor(nat), arg2, rel, rel_nat_term_arg, rel_col_arg), $list153), bq_cons(rel_sentence, $list153)), nat_just);
                    }
                }
                csome_list_var = csome_list_var.rest();
                v_isa = csome_list_var.first();
            } 
        }
        return NIL;
    }/**
     * justification of (isa <nat> <collection>)
     */


    /**
     * Returns justification of (not (isa TERM COLLECTION))
     */
    @LispMethod(comment = "Returns justification of (not (isa TERM COLLECTION))")
    public static final SubLObject why_not_isaP_alt(SubLObject v_term, SubLObject collection, SubLObject mt, SubLObject tv, SubLObject behavior) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (behavior == UNPROVIDED) {
            behavior = NIL;
        }
        SubLTrampolineFile.checkType(v_term, HL_TERM_P);
        SubLTrampolineFile.checkType(collection, EL_FORT_P);
        if (NIL != term.first_order_nautP(v_term)) {
            return com.cyc.cycjava.cycl.isa.any_just_of_nat_not_isa(v_term, collection, mt);
        } else {
            {
                SubLObject just = NIL;
                just = sbhl_search_implied_relations.why_sbhl_implied_false_predicate_relation_p(sbhl_module_vars.get_sbhl_module($$isa), v_term, collection, mt, tv, behavior);
                if (NIL == just) {
                    just = at_defns.why_not_isa_via_defnsP(v_term, collection, mt);
                }
                return just;
            }
        }
    }

    /**
     * Returns justification of (not (isa TERM COLLECTION))
     */
    @LispMethod(comment = "Returns justification of (not (isa TERM COLLECTION))")
    public static SubLObject why_not_isaP(final SubLObject v_term, final SubLObject collection, SubLObject mt, SubLObject tv, SubLObject behavior) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (behavior == UNPROVIDED) {
            behavior = NIL;
        }
        SubLTrampolineFile.enforceType(v_term, HL_TERM_P);
        SubLTrampolineFile.enforceType(collection, EL_FORT_P);
        if (NIL != term.first_order_nautP(v_term)) {
            return any_just_of_nat_not_isa(v_term, collection, mt);
        }
        SubLObject just = NIL;
        just = sbhl_search_implied_relations.why_sbhl_implied_false_predicate_relation_p(sbhl_module_vars.get_sbhl_module($$isa), v_term, collection, mt, tv, behavior);
        if (NIL == just) {
            just = at_defns.why_not_isa_via_defnsP(v_term, collection, mt);
        }
        return just;
    }/**
     * Returns justification of (not (isa TERM COLLECTION))
     */


    /**
     * justification of (not (isa <term> <collection>))
     */
    @LispMethod(comment = "justification of (not (isa <term> <collection>))")
    public static final SubLObject any_just_of_not_isa_alt(SubLObject v_term, SubLObject collection, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return com.cyc.cycjava.cycl.isa.why_not_isaP(v_term, collection, mt, UNPROVIDED, UNPROVIDED);
    }

    /**
     * justification of (not (isa <term> <collection>))
     */
    @LispMethod(comment = "justification of (not (isa <term> <collection>))")
    public static SubLObject any_just_of_not_isa(final SubLObject v_term, final SubLObject collection, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return why_not_isaP(v_term, collection, mt, UNPROVIDED, UNPROVIDED);
    }/**
     * justification of (not (isa <term> <collection>))
     */


    /**
     * justification of (not (isa <nat> <collection>))
     */
    @LispMethod(comment = "justification of (not (isa <nat> <collection>))")
    public static final SubLObject any_just_of_nat_not_isa_alt(SubLObject nat, SubLObject collection, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        {
            SubLObject v_term = cycl_utilities.find_ground_naut(nat);
            SubLObject just = com.cyc.cycjava.cycl.isa.any_just_of_not_isa(v_term, collection, mt);
            if (NIL != just) {
                return cons(bq_cons(list($$termOfUnit, v_term, nat), $list_alt149), just);
            } else {
                {
                    SubLObject nat_just = NIL;
                    if (NIL == nat_just) {
                        {
                            SubLObject csome_list_var = kb_accessors.result_types(cycl_utilities.nat_functor(nat), mt);
                            SubLObject v_isa = NIL;
                            for (v_isa = csome_list_var.first(); !((NIL != nat_just) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , v_isa = csome_list_var.first()) {
                                nat_just = genls.why_not_genlP(v_isa, collection, mt, UNPROVIDED, UNPROVIDED);
                                if (NIL != nat_just) {
                                    return cons(bq_cons(list($$resultIsa, cycl_utilities.nat_functor(nat), v_isa), $list_alt149), just);
                                }
                            }
                        }
                    }
                }
            }
        }
        return NIL;
    }

    /**
     * justification of (not (isa <nat> <collection>))
     */
    @LispMethod(comment = "justification of (not (isa <nat> <collection>))")
    public static SubLObject any_just_of_nat_not_isa(final SubLObject nat, final SubLObject collection, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        final SubLObject v_term = cycl_utilities.find_ground_naut(nat);
        final SubLObject just = any_just_of_not_isa(v_term, collection, mt);
        if (NIL != just) {
            return cons(bq_cons(list($$termOfUnit, v_term, nat), $list153), just);
        }
        SubLObject nat_just = NIL;
        if (NIL == nat_just) {
            SubLObject csome_list_var = kb_accessors.result_types(cycl_utilities.nat_functor(nat), mt);
            SubLObject v_isa = NIL;
            v_isa = csome_list_var.first();
            while ((NIL == nat_just) && (NIL != csome_list_var)) {
                nat_just = genls.why_not_genlP(v_isa, collection, mt, UNPROVIDED, UNPROVIDED);
                if (NIL != nat_just) {
                    return cons(bq_cons(list($$resultIsa, cycl_utilities.nat_functor(nat), v_isa), $list153), just);
                }
                csome_list_var = csome_list_var.rest();
                v_isa = csome_list_var.first();
            } 
        }
        return NIL;
    }/**
     * justification of (not (isa <nat> <collection>))
     */


    /**
     * Returns whether COLLECTION has any direct instances
     */
    @LispMethod(comment = "Returns whether COLLECTION has any direct instances")
    public static final SubLObject instancesP_alt(SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(collection, EL_FORT_P);
        return com.cyc.cycjava.cycl.isa.instancesP_int(collection, mt, tv);
    }

    /**
     * Returns whether COLLECTION has any direct instances
     */
    @LispMethod(comment = "Returns whether COLLECTION has any direct instances")
    public static SubLObject instancesP(final SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(collection, EL_FORT_P);
        return instancesP_int(collection, mt, tv);
    }/**
     * Returns whether COLLECTION has any direct instances
     */


    /**
     *
     *
     * @unknown 
     */
    @LispMethod(comment = "@unknown")
    public static final SubLObject instancesP_int_alt(SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (NIL != term.ground_nautP(collection, UNPROVIDED)) {
                return com.cyc.cycjava.cycl.isa.instances(narts_high.find_nart(collection), mt, UNPROVIDED);
            } else {
                {
                    SubLObject module = sbhl_module_vars.get_sbhl_module($$isa);
                    SubLObject instanceP = NIL;
                    SubLObject mt_var = mt;
                    {
                        SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
                        SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                        SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                        try {
                            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                            {
                                SubLObject tv_var = tv;
                                {
                                    SubLObject _prev_bind_0_474 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                    SubLObject _prev_bind_1_475 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                        sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                        if (NIL != tv_var) {
                                            if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                    {
                                                        SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                        if (pcase_var.eql($ERROR)) {
                                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                        } else {
                                                            if (pcase_var.eql($CERROR)) {
                                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                            } else {
                                                                if (pcase_var.eql($WARN)) {
                                                                    Errors.warn($str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                } else {
                                                                    Errors.warn($str_alt36$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                    Errors.cerror($$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        {
                                            SubLObject _prev_bind_0_476 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                            SubLObject _prev_bind_1_477 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                            SubLObject _prev_bind_2_478 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                {
                                                    SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                    {
                                                        SubLObject _prev_bind_0_479 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                        try {
                                                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                            {
                                                                SubLObject _prev_bind_0_480 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_481 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                        SubLObject _prev_bind_1_482 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                        SubLObject _prev_bind_2_483 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                        SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                        SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                            sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                            sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                            {
                                                                                SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                SubLObject needs_to_releaseP = NIL;
                                                                                try {
                                                                                    needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                    {
                                                                                        SubLObject _prev_bind_0_484 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                                                                        SubLObject _prev_bind_1_485 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                                                                        SubLObject _prev_bind_2_486 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                                                        SubLObject _prev_bind_3_487 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                        SubLObject _prev_bind_4_488 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                                                                                            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                                                                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                            sbhl_module_vars.$sbhl_module$.bind(module, thread);
                                                                                            {
                                                                                                SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(module);
                                                                                                SubLObject rest = NIL;
                                                                                                for (rest = accessible_modules; !((NIL != instanceP) || (NIL == rest)); rest = rest.rest()) {
                                                                                                    {
                                                                                                        SubLObject module_var = rest.first();
                                                                                                        {
                                                                                                            SubLObject _prev_bind_0_489 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                                            SubLObject _prev_bind_1_490 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                            try {
                                                                                                                sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                                {
                                                                                                                    SubLObject node = function_terms.naut_to_nart(collection);
                                                                                                                    if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                                        {
                                                                                                                            SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                            if (NIL != d_link) {
                                                                                                                                {
                                                                                                                                    SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                                    if (NIL != mt_links) {
                                                                                                                                        {
                                                                                                                                            SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                                            while (!((NIL != instanceP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state)))) {
                                                                                                                                                thread.resetMultipleValues();
                                                                                                                                                {
                                                                                                                                                    SubLObject mt_491 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                                    SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                                    if (NIL != mt_relevance_macros.relevant_mtP(mt_491)) {
                                                                                                                                                        {
                                                                                                                                                            SubLObject _prev_bind_0_492 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                            try {
                                                                                                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt_491, thread);
                                                                                                                                                                {
                                                                                                                                                                    SubLObject iteration_state_493 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                                    while (!((NIL != instanceP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state_493)))) {
                                                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                                                        {
                                                                                                                                                                            SubLObject tv_494 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_493);
                                                                                                                                                                            SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                                                            if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_494)) {
                                                                                                                                                                                {
                                                                                                                                                                                    SubLObject _prev_bind_0_495 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                                    try {
                                                                                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.bind(tv_494, thread);
                                                                                                                                                                                        {
                                                                                                                                                                                            SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                                            SubLObject rest_496 = NIL;
                                                                                                                                                                                            for (rest_496 = new_list; !((NIL != instanceP) || (NIL == rest_496)); rest_496 = rest_496.rest()) {
                                                                                                                                                                                                {
                                                                                                                                                                                                    SubLObject instance = rest_496.first();
                                                                                                                                                                                                    if (NIL != instance) {
                                                                                                                                                                                                        instanceP = T;
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    } finally {
                                                                                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_495, thread);
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            iteration_state_493 = dictionary_contents.do_dictionary_contents_next(iteration_state_493);
                                                                                                                                                                        }
                                                                                                                                                                    } 
                                                                                                                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state_493);
                                                                                                                                                                }
                                                                                                                                                            } finally {
                                                                                                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_492, thread);
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                                }
                                                                                                                                            } 
                                                                                                                                            dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            } else {
                                                                                                                                sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt38$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                            }
                                                                                                                        }
                                                                                                                        if (NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) {
                                                                                                                            if (NIL == instanceP) {
                                                                                                                                {
                                                                                                                                    SubLObject csome_list_var = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                                                                                    SubLObject instance_tuple = NIL;
                                                                                                                                    for (instance_tuple = csome_list_var.first(); !((NIL != instanceP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , instance_tuple = csome_list_var.first()) {
                                                                                                                                        {
                                                                                                                                            SubLObject datum = instance_tuple;
                                                                                                                                            SubLObject current = datum;
                                                                                                                                            SubLObject link_node = NIL;
                                                                                                                                            SubLObject mt_497 = NIL;
                                                                                                                                            SubLObject tv_498 = NIL;
                                                                                                                                            destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                                            link_node = current.first();
                                                                                                                                            current = current.rest();
                                                                                                                                            destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                                            mt_497 = current.first();
                                                                                                                                            current = current.rest();
                                                                                                                                            destructuring_bind_must_consp(current, datum, $list_alt111);
                                                                                                                                            tv_498 = current.first();
                                                                                                                                            current = current.rest();
                                                                                                                                            if (NIL == current) {
                                                                                                                                                if (NIL != mt_relevance_macros.relevant_mtP(mt_497)) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject _prev_bind_0_499 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                        try {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.bind(mt_497, thread);
                                                                                                                                                            if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_498)) {
                                                                                                                                                                {
                                                                                                                                                                    SubLObject _prev_bind_0_500 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                    try {
                                                                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.bind(tv_498, thread);
                                                                                                                                                                        {
                                                                                                                                                                            SubLObject link_nodes = list(link_node);
                                                                                                                                                                            SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                            SubLObject rest_501 = NIL;
                                                                                                                                                                            for (rest_501 = new_list; !((NIL != instanceP) || (NIL == rest_501)); rest_501 = rest_501.rest()) {
                                                                                                                                                                                {
                                                                                                                                                                                    SubLObject instance = rest_501.first();
                                                                                                                                                                                    if (NIL != instance) {
                                                                                                                                                                                        instanceP = T;
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    } finally {
                                                                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_500, thread);
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        } finally {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_499, thread);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            } else {
                                                                                                                                                cdestructuring_bind_error(datum, $list_alt111);
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                                            {
                                                                                                                                SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                                SubLObject rest_502 = NIL;
                                                                                                                                for (rest_502 = new_list; !((NIL != instanceP) || (NIL == rest_502)); rest_502 = rest_502.rest()) {
                                                                                                                                    {
                                                                                                                                        SubLObject generating_fn = rest_502.first();
                                                                                                                                        {
                                                                                                                                            SubLObject _prev_bind_0_503 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                                            try {
                                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                                {
                                                                                                                                                    SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                                    SubLObject new_list_504 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                    SubLObject rest_505 = NIL;
                                                                                                                                                    for (rest_505 = new_list_504; !((NIL != instanceP) || (NIL == rest_505)); rest_505 = rest_505.rest()) {
                                                                                                                                                        {
                                                                                                                                                            SubLObject instance = rest_505.first();
                                                                                                                                                            if (NIL != instance) {
                                                                                                                                                                instanceP = T;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            } finally {
                                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_503, thread);
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            } finally {
                                                                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_490, thread);
                                                                                                                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_489, thread);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4_488, thread);
                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3_487, thread);
                                                                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_486, thread);
                                                                                            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_485, thread);
                                                                                            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_484, thread);
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    if (NIL != needs_to_releaseP) {
                                                                                        ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                    }
                                                                                }
                                                                            }
                                                                        } finally {
                                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                                                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3, thread);
                                                                            sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_483, thread);
                                                                            sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_482, thread);
                                                                            sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_481, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_480, thread);
                                                                }
                                                            }
                                                            if (source == $RESOURCE) {
                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                            }
                                                        } finally {
                                                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_479, thread);
                                                        }
                                                    }
                                                }
                                            } finally {
                                                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_478, thread);
                                                sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_477, thread);
                                                sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_476, thread);
                                            }
                                        }
                                    } finally {
                                        sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_475, thread);
                                        sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_474, thread);
                                    }
                                }
                            }
                        } finally {
                            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1, thread);
                            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
                        }
                    }
                    return instanceP;
                }
            }
        }
    }

    /**
     *
     *
     * @unknown 
     */
    @LispMethod(comment = "@unknown")
    public static SubLObject instancesP_int(final SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != term.ground_nautP(collection, UNPROVIDED)) {
            return instances(narts_high.find_nart(collection), mt, UNPROVIDED);
        }
        final SubLObject module = sbhl_module_vars.get_sbhl_module($$isa);
        SubLObject instanceP = NIL;
        final SubLObject mt_var = mt;
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            final SubLObject tv_var = tv;
            final SubLObject _prev_bind_0_$430 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
            final SubLObject _prev_bind_1_$431 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
            try {
                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                    final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                    if (pcase_var.eql($ERROR)) {
                        sbhl_paranoia.sbhl_error(ONE_INTEGER, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    } else
                        if (pcase_var.eql($CERROR)) {
                            sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($WARN)) {
                                Errors.warn($str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                            } else {
                                Errors.warn($str37$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                Errors.cerror($$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                            }


                }
                final SubLObject _prev_bind_0_$431 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                final SubLObject _prev_bind_1_$432 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                final SubLObject _prev_bind_2_$434 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                    sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                    final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                    final SubLObject _prev_bind_0_$432 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                    try {
                        sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                        final SubLObject _prev_bind_0_$433 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$434 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$433 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                            final SubLObject _prev_bind_2_$435 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                            final SubLObject _prev_bind_4 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                            final SubLObject _prev_bind_5 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                            try {
                                sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                SubLObject needs_to_releaseP = NIL;
                                try {
                                    needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                    final SubLObject _prev_bind_0_$435 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                    final SubLObject _prev_bind_1_$434 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                    final SubLObject _prev_bind_2_$436 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                    final SubLObject _prev_bind_3_$443 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                    final SubLObject _prev_bind_4_$444 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                                        final SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(module);
                                        SubLObject rest;
                                        SubLObject module_var;
                                        SubLObject _prev_bind_0_$436;
                                        SubLObject _prev_bind_1_$435;
                                        SubLObject node;
                                        SubLObject d_link;
                                        SubLObject mt_links;
                                        SubLObject iteration_state;
                                        SubLObject mt_$447;
                                        SubLObject tv_links;
                                        SubLObject _prev_bind_0_$437;
                                        SubLObject iteration_state_$449;
                                        SubLObject tv_$450;
                                        SubLObject link_nodes;
                                        SubLObject _prev_bind_0_$438;
                                        SubLObject sol;
                                        SubLObject set_contents_var;
                                        SubLObject basis_object;
                                        SubLObject state;
                                        SubLObject instance;
                                        SubLObject csome_list_var;
                                        SubLObject instance2;
                                        SubLObject csome_list_var2;
                                        SubLObject instance_tuple;
                                        SubLObject current;
                                        SubLObject datum;
                                        SubLObject link_node;
                                        SubLObject mt_$448;
                                        SubLObject tv_$451;
                                        SubLObject _prev_bind_0_$439;
                                        SubLObject _prev_bind_0_$440;
                                        SubLObject link_nodes2;
                                        SubLObject csome_list_var_$456;
                                        SubLObject new_list;
                                        SubLObject rest_$457;
                                        SubLObject generating_fn;
                                        SubLObject _prev_bind_0_$441;
                                        SubLObject sol2;
                                        SubLObject link_nodes3;
                                        SubLObject set_contents_var2;
                                        SubLObject basis_object2;
                                        SubLObject state2;
                                        SubLObject instance3;
                                        SubLObject csome_list_var3;
                                        SubLObject instance4;
                                        for (rest = NIL, rest = accessible_modules; (NIL == instanceP) && (NIL != rest); rest = rest.rest()) {
                                            module_var = rest.first();
                                            _prev_bind_0_$436 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                            _prev_bind_1_$435 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                            try {
                                                sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                node = function_terms.naut_to_nart(collection);
                                                if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                    d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                    if (NIL != d_link) {
                                                        mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                        if (NIL != mt_links) {
                                                            for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); (NIL == instanceP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                                                thread.resetMultipleValues();
                                                                mt_$447 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                tv_links = thread.secondMultipleValue();
                                                                thread.resetMultipleValues();
                                                                if (NIL != mt_relevance_macros.relevant_mtP(mt_$447)) {
                                                                    _prev_bind_0_$437 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_link_vars.$sbhl_link_mt$.bind(mt_$447, thread);
                                                                        for (iteration_state_$449 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); (NIL == instanceP) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$449)); iteration_state_$449 = dictionary_contents.do_dictionary_contents_next(iteration_state_$449)) {
                                                                            thread.resetMultipleValues();
                                                                            tv_$450 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$449);
                                                                            link_nodes = thread.secondMultipleValue();
                                                                            thread.resetMultipleValues();
                                                                            if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$450)) {
                                                                                _prev_bind_0_$438 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv_$450, thread);
                                                                                    sol = link_nodes;
                                                                                    if (NIL != set.set_p(sol)) {
                                                                                        set_contents_var = set.do_set_internal(sol);
                                                                                        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == instanceP) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
                                                                                            instance = set_contents.do_set_contents_next(basis_object, state);
                                                                                            if ((NIL != set_contents.do_set_contents_element_validP(state, instance)) && (NIL != instance)) {
                                                                                                instanceP = T;
                                                                                            }
                                                                                        }
                                                                                    } else
                                                                                        if (sol.isList()) {
                                                                                            if (NIL == instanceP) {
                                                                                                csome_list_var = sol;
                                                                                                instance2 = NIL;
                                                                                                instance2 = csome_list_var.first();
                                                                                                while ((NIL == instanceP) && (NIL != csome_list_var)) {
                                                                                                    if (NIL != instance2) {
                                                                                                        instanceP = T;
                                                                                                    }
                                                                                                    csome_list_var = csome_list_var.rest();
                                                                                                    instance2 = csome_list_var.first();
                                                                                                } 
                                                                                            }
                                                                                        } else {
                                                                                            Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                        }

                                                                                } finally {
                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$438, thread);
                                                                                }
                                                                            }
                                                                        }
                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state_$449);
                                                                    } finally {
                                                                        sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$437, thread);
                                                                    }
                                                                }
                                                            }
                                                            dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                        }
                                                    } else {
                                                        sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str40$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                    }
                                                    if ((NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) && (NIL == instanceP)) {
                                                        csome_list_var2 = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                        instance_tuple = NIL;
                                                        instance_tuple = csome_list_var2.first();
                                                        while ((NIL == instanceP) && (NIL != csome_list_var2)) {
                                                            datum = current = instance_tuple;
                                                            link_node = NIL;
                                                            mt_$448 = NIL;
                                                            tv_$451 = NIL;
                                                            destructuring_bind_must_consp(current, datum, $list116);
                                                            link_node = current.first();
                                                            current = current.rest();
                                                            destructuring_bind_must_consp(current, datum, $list116);
                                                            mt_$448 = current.first();
                                                            current = current.rest();
                                                            destructuring_bind_must_consp(current, datum, $list116);
                                                            tv_$451 = current.first();
                                                            current = current.rest();
                                                            if (NIL == current) {
                                                                if (NIL != mt_relevance_macros.relevant_mtP(mt_$448)) {
                                                                    _prev_bind_0_$439 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_link_vars.$sbhl_link_mt$.bind(mt_$448, thread);
                                                                        if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$451)) {
                                                                            _prev_bind_0_$440 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_link_vars.$sbhl_link_tv$.bind(tv_$451, thread);
                                                                                link_nodes2 = sol = list(link_node);
                                                                                if (NIL != set.set_p(sol)) {
                                                                                    set_contents_var = set.do_set_internal(sol);
                                                                                    for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == instanceP) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
                                                                                        instance = set_contents.do_set_contents_next(basis_object, state);
                                                                                        if ((NIL != set_contents.do_set_contents_element_validP(state, instance)) && (NIL != instance)) {
                                                                                            instanceP = T;
                                                                                        }
                                                                                    }
                                                                                } else
                                                                                    if (sol.isList()) {
                                                                                        if (NIL == instanceP) {
                                                                                            csome_list_var_$456 = sol;
                                                                                            instance2 = NIL;
                                                                                            instance2 = csome_list_var_$456.first();
                                                                                            while ((NIL == instanceP) && (NIL != csome_list_var_$456)) {
                                                                                                if (NIL != instance2) {
                                                                                                    instanceP = T;
                                                                                                }
                                                                                                csome_list_var_$456 = csome_list_var_$456.rest();
                                                                                                instance2 = csome_list_var_$456.first();
                                                                                            } 
                                                                                        }
                                                                                    } else {
                                                                                        Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                    }

                                                                            } finally {
                                                                                sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$440, thread);
                                                                            }
                                                                        }
                                                                    } finally {
                                                                        sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$439, thread);
                                                                    }
                                                                }
                                                            } else {
                                                                cdestructuring_bind_error(datum, $list116);
                                                            }
                                                            csome_list_var2 = csome_list_var2.rest();
                                                            instance_tuple = csome_list_var2.first();
                                                        } 
                                                    }
                                                } else
                                                    if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                        new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                        for (rest_$457 = NIL, rest_$457 = new_list; (NIL == instanceP) && (NIL != rest_$457); rest_$457 = rest_$457.rest()) {
                                                            generating_fn = rest_$457.first();
                                                            _prev_bind_0_$441 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                            try {
                                                                sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                link_nodes3 = sol2 = funcall(generating_fn, node);
                                                                if (NIL != set.set_p(sol2)) {
                                                                    set_contents_var2 = set.do_set_internal(sol2);
                                                                    for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); (NIL == instanceP) && (NIL == set_contents.do_set_contents_doneP(basis_object2, state2)); state2 = set_contents.do_set_contents_update_state(state2)) {
                                                                        instance3 = set_contents.do_set_contents_next(basis_object2, state2);
                                                                        if ((NIL != set_contents.do_set_contents_element_validP(state2, instance3)) && (NIL != instance3)) {
                                                                            instanceP = T;
                                                                        }
                                                                    }
                                                                } else
                                                                    if (sol2.isList()) {
                                                                        if (NIL == instanceP) {
                                                                            csome_list_var3 = sol2;
                                                                            instance4 = NIL;
                                                                            instance4 = csome_list_var3.first();
                                                                            while ((NIL == instanceP) && (NIL != csome_list_var3)) {
                                                                                if (NIL != instance4) {
                                                                                    instanceP = T;
                                                                                }
                                                                                csome_list_var3 = csome_list_var3.rest();
                                                                                instance4 = csome_list_var3.first();
                                                                            } 
                                                                        }
                                                                    } else {
                                                                        Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                                    }

                                                            } finally {
                                                                sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$441, thread);
                                                            }
                                                        }
                                                    }

                                            } finally {
                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$435, thread);
                                                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$436, thread);
                                            }
                                        }
                                    } finally {
                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4_$444, thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3_$443, thread);
                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_$436, thread);
                                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_$434, thread);
                                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$435, thread);
                                    }
                                } finally {
                                    if (NIL != needs_to_releaseP) {
                                        ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                    }
                                }
                            } finally {
                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_5, thread);
                                sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_4, thread);
                                sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$435, thread);
                                sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$433, thread);
                                sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$434, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$433, thread);
                        }
                        if (source == $RESOURCE) {
                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                        }
                    } finally {
                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$432, thread);
                    }
                } finally {
                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$434, thread);
                    sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$432, thread);
                    sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$431, thread);
                }
            } finally {
                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$431, thread);
                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$430, thread);
            }
        } finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return instanceP;
    }

    /**
     *
     *
     * @return listp; which among FORTS are instances of COLLECTION.
     */
    @LispMethod(comment = "@return listp; which among FORTS are instances of COLLECTION.")
    public static final SubLObject forts_of_type_alt(SubLObject v_forts, SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            SubLObject result = NIL;
            SubLObject cdolist_list_var = v_forts;
            SubLObject fort = NIL;
            for (fort = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , fort = cdolist_list_var.first()) {
                if ((NIL != sbhl_link_vars.sbhl_node_object_p(fort)) && (NIL != com.cyc.cycjava.cycl.isa.isaP(fort, collection, mt, tv))) {
                    result = cons(fort, result);
                }
            }
            return nreverse(result);
        }
    }

    /**
     *
     *
     * @return listp; which among FORTS are instances of COLLECTION.
     */
    @LispMethod(comment = "@return listp; which among FORTS are instances of COLLECTION.")
    public static SubLObject forts_of_type(final SubLObject v_forts, final SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLObject result = NIL;
        SubLObject cdolist_list_var = v_forts;
        SubLObject fort = NIL;
        fort = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if ((NIL != sbhl_link_vars.sbhl_node_object_p(fort)) && (NIL != isaP(fort, collection, mt, tv))) {
                result = cons(fort, result);
            }
            cdolist_list_var = cdolist_list_var.rest();
            fort = cdolist_list_var.first();
        } 
        return nreverse(result);
    }

    /**
     *
     *
     * @return listp; all of the mts in the forward isa paths of TERM.
     */
    @LispMethod(comment = "@return listp; all of the mts in the forward isa paths of TERM.")
    public static final SubLObject all_isa_mts_alt(SubLObject v_term) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_result$.bind(com.cyc.cycjava.cycl.isa.isa_mts(v_term), thread);
                        com.cyc.cycjava.cycl.isa.map_all_isa(GATHER_GENLS_MTS, v_term, UNPROVIDED, UNPROVIDED);
                        result = list_utilities.remove_duplicate_forts(sbhl_search_vars.$sbhl_result$.getDynamicValue(thread));
                    } finally {
                        sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; all of the mts in the forward isa paths of TERM.
     */
    @LispMethod(comment = "@return listp; all of the mts in the forward isa paths of TERM.")
    public static SubLObject all_isa_mts(final SubLObject v_term) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_result$.bind(isa_mts(v_term), thread);
            map_all_isa(GATHER_GENLS_MTS, v_term, UNPROVIDED, UNPROVIDED);
            result = list_utilities.remove_duplicate_forts(sbhl_search_vars.$sbhl_result$.getDynamicValue(thread));
        } finally {
            sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     * Modifier. gathers genls-mts of COLLECTION onto *sbhl-result*
     */
    @LispMethod(comment = "Modifier. gathers genls-mts of COLLECTION onto *sbhl-result*")
    public static final SubLObject gather_genls_mts_alt(SubLObject collection) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            sbhl_search_vars.$sbhl_result$.setDynamicValue(nconc(sbhl_search_vars.$sbhl_result$.getDynamicValue(thread), genls.genls_mts(collection)), thread);
            return NIL;
        }
    }

    /**
     * Modifier. gathers genls-mts of COLLECTION onto *sbhl-result*
     */
    @LispMethod(comment = "Modifier. gathers genls-mts of COLLECTION onto *sbhl-result*")
    public static SubLObject gather_genls_mts(final SubLObject collection) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        sbhl_search_vars.$sbhl_result$.setDynamicValue(nconc(sbhl_search_vars.$sbhl_result$.getDynamicValue(thread), genls.genls_mts(collection)), thread);
        return NIL;
    }/**
     * Modifier. gathers genls-mts of COLLECTION onto *sbhl-result*
     */


    /**
     * does COLLECTION admit non-reified terms as instances
     */
    @LispMethod(comment = "does COLLECTION admit non-reified terms as instances")
    public static final SubLObject partial_isa_extensionP_alt(SubLObject collection, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return makeBoolean((NIL != at_defns.any_sufficient_defn_anywhereP(collection)) || (NIL != at_defns.any_sufficient_functionP(collection, mt)));
    }

    /**
     * does COLLECTION admit non-reified terms as instances
     */
    @LispMethod(comment = "does COLLECTION admit non-reified terms as instances")
    public static SubLObject partial_isa_extensionP(final SubLObject collection, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return makeBoolean((NIL != at_defns.any_sufficient_defn_anywhereP(collection)) || (NIL != at_defns.any_sufficient_functionP(collection, mt)));
    }/**
     * does COLLECTION admit non-reified terms as instances
     */


    /**
     *
     *
     * @see random-instantiation
     */
    @LispMethod(comment = "@see random-instantiation")
    public static final SubLObject random_instance_of_alt(SubLObject collection, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        SubLTrampolineFile.checkType(collection, FORT_P);
        if (NIL != mt) {
            SubLTrampolineFile.checkType(mt, HLMT_P);
        }
        if (NIL != sbhl_cache.valid_fort_typeP(collection)) {
            return list_utilities.random_element(fort_types_interface.all_forts_of_type(collection));
        } else {
            if ($$Thing == collection) {
                return forts.random_fort();
            } else {
                if (cardinality_estimates.instance_cardinality(collection).numG(integerDivide(forts.fort_count(), $random_instance_of_sampling_ratio$.getGlobalValue()))) {
                    {
                        SubLObject result = NIL;
                        while (NIL == result) {
                            {
                                SubLObject candidate = forts.random_fort();
                                if (NIL != com.cyc.cycjava.cycl.isa.isaP(candidate, collection, mt, UNPROVIDED)) {
                                    result = candidate;
                                }
                            }
                        } 
                        return result;
                    }
                } else {
                    {
                        SubLObject v_instances = com.cyc.cycjava.cycl.isa.all_instances(collection, mt, UNPROVIDED);
                        return list_utilities.random_element(v_instances);
                    }
                }
            }
        }
    }

    /**
     *
     *
     * @see random-instantiation
     */
    @LispMethod(comment = "@see random-instantiation")
    public static SubLObject random_instance_of(final SubLObject collection, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        assert NIL != forts.fort_p(collection) : "! forts.fort_p(collection) " + ("forts.fort_p(collection) " + "CommonSymbols.NIL != forts.fort_p(collection) ") + collection;
        if (((NIL != mt) && (!assertionsDisabledSynth)) && (NIL == hlmt.hlmt_p(mt))) {
            throw new AssertionError(mt);
        }
        if (NIL != sbhl_cache.valid_fort_typeP(collection)) {
            return list_utilities.random_element(fort_types_interface.all_forts_of_type(collection));
        }
        if ($$Thing.eql(collection)) {
            return forts.random_fort(UNPROVIDED);
        }
        if (cardinality_estimates.instance_cardinality(collection).numG(integerDivide(forts.fort_count(), $random_instance_of_sampling_ratio$.getGlobalValue()))) {
            SubLObject result;
            SubLObject candidate;
            for (result = NIL; NIL == result; result = candidate) {
                candidate = forts.random_fort(UNPROVIDED);
                if (NIL != isaP(candidate, collection, mt, UNPROVIDED)) {
                }
            }
            return result;
        }
        final SubLObject v_instances = all_instances(collection, mt, UNPROVIDED);
        return list_utilities.random_element(v_instances);
    }

    /**
     * the most-specific common isas among TERMS
     * (if CANDIDATES is non-nil, then result is a subset of CANDIDATES)
     */
    @LispMethod(comment = "the most-specific common isas among TERMS\r\n(if CANDIDATES is non-nil, then result is a subset of CANDIDATES)\nthe most-specific common isas among TERMS\n(if CANDIDATES is non-nil, then result is a subset of CANDIDATES)")
    public static final SubLObject min_ceiling_isa_alt(SubLObject terms, SubLObject candidates, SubLObject mt, SubLObject tv) {
        if (candidates == UNPROVIDED) {
            candidates = NIL;
        }
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_search_methods.sbhl_min_ceilings(sbhl_module_vars.get_sbhl_module($$isa), terms, candidates, mt, tv);
    }

    /**
     * the most-specific common isas among TERMS
     * (if CANDIDATES is non-nil, then result is a subset of CANDIDATES)
     */
    @LispMethod(comment = "the most-specific common isas among TERMS\r\n(if CANDIDATES is non-nil, then result is a subset of CANDIDATES)\nthe most-specific common isas among TERMS\n(if CANDIDATES is non-nil, then result is a subset of CANDIDATES)")
    public static SubLObject min_ceiling_isa(final SubLObject terms, SubLObject candidates, SubLObject mt, SubLObject tv) {
        if (candidates == UNPROVIDED) {
            candidates = NIL;
        }
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_search_methods.sbhl_min_ceilings(sbhl_module_vars.get_sbhl_module($$isa), terms, candidates, mt, tv);
    }/**
     * the most-specific common isas among TERMS
     * (if CANDIDATES is non-nil, then result is a subset of CANDIDATES)
     */


    /**
     * trampoline to min-ceiling-isa
     * the most-specific common isas among TERMS
     * (if CANDIDATES is non-nil, then result is a subset of CANDIDATES)
     */
    @LispMethod(comment = "trampoline to min-ceiling-isa\r\nthe most-specific common isas among TERMS\r\n(if CANDIDATES is non-nil, then result is a subset of CANDIDATES)\ntrampoline to min-ceiling-isa\nthe most-specific common isas among TERMS\n(if CANDIDATES is non-nil, then result is a subset of CANDIDATES)")
    public static final SubLObject nearest_common_isa_alt(SubLObject terms, SubLObject candidates, SubLObject mt, SubLObject tv) {
        if (candidates == UNPROVIDED) {
            candidates = NIL;
        }
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return com.cyc.cycjava.cycl.isa.min_ceiling_isa(terms, candidates, mt, tv);
    }

    /**
     * trampoline to min-ceiling-isa
     * the most-specific common isas among TERMS
     * (if CANDIDATES is non-nil, then result is a subset of CANDIDATES)
     */
    @LispMethod(comment = "trampoline to min-ceiling-isa\r\nthe most-specific common isas among TERMS\r\n(if CANDIDATES is non-nil, then result is a subset of CANDIDATES)\ntrampoline to min-ceiling-isa\nthe most-specific common isas among TERMS\n(if CANDIDATES is non-nil, then result is a subset of CANDIDATES)")
    public static SubLObject nearest_common_isa(final SubLObject terms, SubLObject candidates, SubLObject mt, SubLObject tv) {
        if (candidates == UNPROVIDED) {
            candidates = NIL;
        }
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return min_ceiling_isa(terms, candidates, mt, tv);
    }/**
     * trampoline to min-ceiling-isa
     * the most-specific common isas among TERMS
     * (if CANDIDATES is non-nil, then result is a subset of CANDIDATES)
     */


    /**
     * the most general common instances among TERMS
     * (if CANDIDATES is non-nil, then result is a subset of CANDIDATES)
     */
    @LispMethod(comment = "the most general common instances among TERMS\r\n(if CANDIDATES is non-nil, then result is a subset of CANDIDATES)\nthe most general common instances among TERMS\n(if CANDIDATES is non-nil, then result is a subset of CANDIDATES)")
    public static final SubLObject max_floor_instances_alt(SubLObject terms, SubLObject candidates, SubLObject mt) {
        if (candidates == UNPROVIDED) {
            candidates = NIL;
        }
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        {
            SubLObject max_floor_instances = NIL;
            return max_floor_instances;
        }
    }

    /**
     * the most general common instances among TERMS
     * (if CANDIDATES is non-nil, then result is a subset of CANDIDATES)
     */
    @LispMethod(comment = "the most general common instances among TERMS\r\n(if CANDIDATES is non-nil, then result is a subset of CANDIDATES)\nthe most general common instances among TERMS\n(if CANDIDATES is non-nil, then result is a subset of CANDIDATES)")
    public static SubLObject max_floor_instances(final SubLObject terms, SubLObject candidates, SubLObject mt) {
        if (candidates == UNPROVIDED) {
            candidates = NIL;
        }
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        final SubLObject max_floor_instances = NIL;
        return max_floor_instances;
    }/**
     * the most general common instances among TERMS
     * (if CANDIDATES is non-nil, then result is a subset of CANDIDATES)
     */


    public static final SubLObject max_floor_mts_of_isa_paths_wrt_alt(SubLObject v_term, SubLObject collection, SubLObject mt) {
        return genl_mts.selected_genl_mts(mt, com.cyc.cycjava.cycl.isa.max_floor_mts_of_isa_paths(v_term, collection, UNPROVIDED), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject max_floor_mts_of_isa_paths_wrt(final SubLObject v_term, final SubLObject collection, final SubLObject mt) {
        return genl_mts.selected_genl_mts(mt, max_floor_mts_of_isa_paths(v_term, collection, UNPROVIDED), UNPROVIDED, UNPROVIDED);
    }

    /**
     * Returns in what (most-genl) mts TERM is an instance of COLLECTION
     */
    @LispMethod(comment = "Returns in what (most-genl) mts TERM is an instance of COLLECTION")
    public static final SubLObject max_floor_mts_of_isa_paths_alt(SubLObject v_term, SubLObject collection, SubLObject tv) {
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(v_term, HL_TERM_P);
        SubLTrampolineFile.checkType(collection, EL_FORT_P);
        {
            SubLObject max_floor_mts = NIL;
            max_floor_mts = genl_mts.max_floor_mts_from_mt_sets(com.cyc.cycjava.cycl.isa.min_mts_of_isa_paths(v_term, collection, tv));
            return max_floor_mts;
        }
    }

    /**
     * Returns in what (most-genl) mts TERM is an instance of COLLECTION
     */
    @LispMethod(comment = "Returns in what (most-genl) mts TERM is an instance of COLLECTION")
    public static SubLObject max_floor_mts_of_isa_paths(final SubLObject v_term, final SubLObject collection, SubLObject tv) {
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(v_term, HL_TERM_P);
        SubLTrampolineFile.enforceType(collection, EL_FORT_P);
        SubLObject max_floor_mts = NIL;
        max_floor_mts = genl_mts.max_floor_mts_from_mt_sets(min_mts_of_isa_paths(v_term, collection, tv));
        return max_floor_mts;
    }/**
     * Returns in what (most-genl) mts TERM is an instance of COLLECTION
     */


    public static SubLObject max_floor_mts_of_quoted_isa_paths(final SubLObject v_term, final SubLObject collection, SubLObject tv) {
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(v_term, HL_TERM_P);
        SubLTrampolineFile.enforceType(collection, EL_FORT_P);
        SubLObject max_floor_mts = NIL;
        max_floor_mts = genl_mts.max_floor_mts_from_mt_sets(min_mts_of_quoted_isa_paths(v_term, collection, tv));
        return max_floor_mts;
    }

    /**
     *
     *
     * @return listp; what minimal sets of mts are associated with isa paths from TERM to COLLECTION
     */
    @LispMethod(comment = "@return listp; what minimal sets of mts are associated with isa paths from TERM to COLLECTION")
    public static final SubLObject min_mts_of_isa_paths_alt(SubLObject v_term, SubLObject collection, SubLObject tv) {
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (NIL != cycl_grammar.cycl_quoted_term_p(v_term)) {
            {
                SubLObject denoted_term = czer_main.unquote_quoted_term(v_term, UNPROVIDED);
                if (NIL != denoted_term) {
                    return com.cyc.cycjava.cycl.isa.min_mts_of_quoted_isa_paths(denoted_term, collection, tv);
                }
            }
        } else {
            if (NIL != term.first_order_nautP(v_term)) {
                {
                    SubLObject isa_mts = com.cyc.cycjava.cycl.isa.nat_min_mts_of_isa_paths(v_term, collection);
                    if (NIL != isa_mts) {
                        return isa_mts;
                    }
                    if (NIL != at_defns.any_sufficient_defn_anywhereP(collection)) {
                        return Mapping.mapcar(symbol_function(LIST), at_defns.max_mts_of_admitting_defns(v_term, collection));
                    }
                }
            } else {
                {
                    SubLObject isa_mts = sbhl_search_what_mts.sbhl_min_mts_of_predicate_paths(sbhl_module_vars.get_sbhl_module($$isa), v_term, collection, tv);
                    SubLObject defn_mts = NIL;
                    if (NIL != at_defns.any_sufficient_defn_anywhereP(collection)) {
                        defn_mts = Mapping.mapcar(symbol_function(LIST), at_defns.max_mts_of_admitting_defns(v_term, collection));
                    }
                    return nconc(isa_mts, defn_mts);
                }
            }
        }
        return NIL;
    }

    /**
     *
     *
     * @return listp; what minimal sets of mts are associated with isa paths from TERM to COLLECTION
     */
    @LispMethod(comment = "@return listp; what minimal sets of mts are associated with isa paths from TERM to COLLECTION")
    public static SubLObject min_mts_of_isa_paths(final SubLObject v_term, final SubLObject collection, SubLObject tv) {
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (NIL != cycl_grammar.cycl_quoted_term_p(v_term)) {
            final SubLObject denoted_term = czer_main.unquote_quoted_term(v_term, UNPROVIDED);
            if (NIL != denoted_term) {
                return min_mts_of_quoted_isa_paths(denoted_term, collection, tv);
            }
        } else {
            if (NIL == term.first_order_nautP(v_term)) {
                final SubLObject isa_mts = sbhl_search_what_mts.sbhl_min_mts_of_predicate_paths(sbhl_module_vars.get_sbhl_module($$isa), v_term, collection, tv);
                SubLObject defn_mts = NIL;
                if (NIL != at_defns.any_sufficient_defn_anywhereP(collection)) {
                    defn_mts = Mapping.mapcar(symbol_function(LIST), at_defns.max_mts_of_admitting_defns(v_term, collection));
                }
                return nconc(isa_mts, defn_mts);
            }
            final SubLObject isa_mts = nat_min_mts_of_isa_paths(v_term, collection);
            if (NIL != isa_mts) {
                return isa_mts;
            }
            if (NIL != at_defns.any_sufficient_defn_anywhereP(collection)) {
                return Mapping.mapcar(symbol_function(LIST), at_defns.max_mts_of_admitting_defns(v_term, collection));
            }
        }
        return NIL;
    }

    /**
     * what minimal sets of mts are associated with isa paths from NAT to COLLECTION
     */
    @LispMethod(comment = "what minimal sets of mts are associated with isa paths from NAT to COLLECTION")
    public static final SubLObject nat_min_mts_of_isa_paths_alt(SubLObject nat, SubLObject collection) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject v_term = cycl_utilities.find_ground_naut(nat);
                if (NIL != v_term) {
                    return com.cyc.cycjava.cycl.isa.min_mts_of_isa_paths(v_term, collection, UNPROVIDED);
                } else {
                    {
                        SubLObject result = NIL;
                        {
                            SubLObject _prev_bind_0 = $mapping_target$.currentBinding(thread);
                            SubLObject _prev_bind_1 = $mapping_gather_arg$.currentBinding(thread);
                            SubLObject _prev_bind_2 = $mapping_answer$.currentBinding(thread);
                            try {
                                $mapping_target$.bind(collection, thread);
                                $mapping_gather_arg$.bind(TWO_INTEGER, thread);
                                $mapping_answer$.bind(NIL, thread);
                                {
                                    SubLObject _prev_bind_0_506 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                    SubLObject _prev_bind_1_507 = mt_relevance_macros.$mt$.currentBinding(thread);
                                    try {
                                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                                        mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                                        kb_mapping.map_gaf_arg_index(symbol_function(GATHER_MIN_MTS_OF_PATHS_BETWEEN), cycl_utilities.nat_functor(nat), ONE_INTEGER, $$resultIsa, $TRUE, UNPROVIDED);
                                    } finally {
                                        mt_relevance_macros.$mt$.rebind(_prev_bind_1_507, thread);
                                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0_506, thread);
                                    }
                                }
                                result = $mapping_answer$.getDynamicValue(thread);
                            } finally {
                                $mapping_answer$.rebind(_prev_bind_2, thread);
                                $mapping_gather_arg$.rebind(_prev_bind_1, thread);
                                $mapping_target$.rebind(_prev_bind_0, thread);
                            }
                        }
                        {
                            SubLObject _prev_bind_0 = $mapping_gather_arg$.currentBinding(thread);
                            SubLObject _prev_bind_1 = $mapping_answer$.currentBinding(thread);
                            try {
                                $mapping_gather_arg$.bind(TWO_INTEGER, thread);
                                $mapping_answer$.bind(make_hash_table(formula_arity(nat, UNPROVIDED), UNPROVIDED, UNPROVIDED), thread);
                                {
                                    SubLObject _prev_bind_0_508 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                    SubLObject _prev_bind_1_509 = mt_relevance_macros.$mt$.currentBinding(thread);
                                    try {
                                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                                        mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                                        kb_mapping.map_gaf_arg_index(symbol_function(CACHE_MTS_OF_ARG), cycl_utilities.nat_functor(nat), ONE_INTEGER, $$resultIsaArg, $TRUE, UNPROVIDED);
                                    } finally {
                                        mt_relevance_macros.$mt$.rebind(_prev_bind_1_509, thread);
                                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0_508, thread);
                                    }
                                }
                                {
                                    SubLObject cdohash_table = $mapping_answer$.getDynamicValue(thread);
                                    SubLObject argnum = NIL;
                                    SubLObject argnum_mts = NIL;
                                    {
                                        final Iterator cdohash_iterator = getEntrySetIterator(cdohash_table);
                                        try {
                                            while (iteratorHasNext(cdohash_iterator)) {
                                                final Map.Entry cdohash_entry = iteratorNextEntry(cdohash_iterator);
                                                argnum = getEntryKey(cdohash_entry);
                                                argnum_mts = getEntryValue(cdohash_entry);
                                                {
                                                    SubLObject v_isa = cycl_utilities.formula_arg(nat, argnum, UNPROVIDED);
                                                    SubLObject cdolist_list_var = genls.min_mts_of_genls_paths(v_isa, collection, UNPROVIDED);
                                                    SubLObject mt_set = NIL;
                                                    for (mt_set = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , mt_set = cdolist_list_var.first()) {
                                                        if (NIL != mt_set) {
                                                            {
                                                                SubLObject cdolist_list_var_510 = argnum_mts;
                                                                SubLObject mt = NIL;
                                                                for (mt = cdolist_list_var_510.first(); NIL != cdolist_list_var_510; cdolist_list_var_510 = cdolist_list_var_510.rest() , mt = cdolist_list_var_510.first()) {
                                                                    {
                                                                        SubLObject min_mt_set = genl_mts.min_mts(adjoin(mt, mt_set, UNPROVIDED, UNPROVIDED), UNPROVIDED);
                                                                        if (NIL != min_mt_set) {
                                                                            {
                                                                                SubLObject item_var = min_mt_set;
                                                                                if (NIL == member(item_var, result, symbol_function($sym168$SETS_EQUAL_), symbol_function(IDENTITY))) {
                                                                                    result = cons(item_var, result);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } 
                                        } finally {
                                            releaseEntrySetIterator(cdohash_iterator);
                                        }
                                    }
                                }
                            } finally {
                                $mapping_answer$.rebind(_prev_bind_1, thread);
                                $mapping_gather_arg$.rebind(_prev_bind_0, thread);
                            }
                        }
                        return result;
                    }
                }
            }
        }
    }

    /**
     * what minimal sets of mts are associated with isa paths from NAT to COLLECTION
     */
    @LispMethod(comment = "what minimal sets of mts are associated with isa paths from NAT to COLLECTION")
    public static SubLObject nat_min_mts_of_isa_paths(final SubLObject nat, final SubLObject collection) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_term = cycl_utilities.find_ground_naut(nat);
        if (NIL != v_term) {
            return min_mts_of_isa_paths(v_term, collection, UNPROVIDED);
        }
        SubLObject result = NIL;
        SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
            mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
            SubLObject cdolist_list_var;
            final SubLObject assertions = cdolist_list_var = czer_meta.find_assertions_cycl(make_binary_formula($$isa, nat, collection), UNPROVIDED);
            SubLObject assertion = NIL;
            assertion = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                final SubLObject item_var = list(assertions_high.assertion_mt(assertion));
                if (NIL == member(item_var, result, symbol_function($sym171$SETS_EQUAL_), symbol_function(IDENTITY))) {
                    result = cons(item_var, result);
                }
                cdolist_list_var = cdolist_list_var.rest();
                assertion = cdolist_list_var.first();
            } 
        } finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = $mapping_target$.currentBinding(thread);
        _prev_bind_2 = $mapping_gather_arg$.currentBinding(thread);
        final SubLObject _prev_bind_3 = $mapping_answer$.currentBinding(thread);
        try {
            $mapping_target$.bind(collection, thread);
            $mapping_gather_arg$.bind(TWO_INTEGER, thread);
            $mapping_answer$.bind(NIL, thread);
            final SubLObject _prev_bind_0_$459 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_1_$460 = mt_relevance_macros.$mt$.currentBinding(thread);
            try {
                mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                kb_mapping.map_gaf_arg_index(symbol_function(GATHER_MIN_MTS_OF_PATHS_BETWEEN), cycl_utilities.nat_functor(nat), ONE_INTEGER, $$resultIsa, $TRUE, UNPROVIDED);
            } finally {
                mt_relevance_macros.$mt$.rebind(_prev_bind_1_$460, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0_$459, thread);
            }
            if (NIL != $mapping_answer$.getDynamicValue(thread)) {
                SubLObject cdolist_list_var = $mapping_answer$.getDynamicValue(thread);
                SubLObject mts = NIL;
                mts = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    final SubLObject item_var = mts;
                    if (NIL == member(item_var, result, symbol_function($sym171$SETS_EQUAL_), symbol_function(IDENTITY))) {
                        result = cons(item_var, result);
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    mts = cdolist_list_var.first();
                } 
            }
        } finally {
            $mapping_answer$.rebind(_prev_bind_3, thread);
            $mapping_gather_arg$.rebind(_prev_bind_2, thread);
            $mapping_target$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = $mapping_gather_arg$.currentBinding(thread);
        _prev_bind_2 = $mapping_answer$.currentBinding(thread);
        try {
            $mapping_gather_arg$.bind(TWO_INTEGER, thread);
            $mapping_answer$.bind(make_hash_table(formula_arity(nat, UNPROVIDED), UNPROVIDED, UNPROVIDED), thread);
            final SubLObject _prev_bind_0_$460 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_1_$461 = mt_relevance_macros.$mt$.currentBinding(thread);
            try {
                mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                kb_mapping.map_gaf_arg_index(symbol_function(CACHE_MTS_OF_ARG), cycl_utilities.nat_functor(nat), ONE_INTEGER, $$resultIsaArg, $TRUE, UNPROVIDED);
            } finally {
                mt_relevance_macros.$mt$.rebind(_prev_bind_1_$461, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0_$460, thread);
            }
            final SubLObject cdohash_table = $mapping_answer$.getDynamicValue(thread);
            SubLObject argnum = NIL;
            SubLObject argnum_mts = NIL;
            final Iterator cdohash_iterator = getEntrySetIterator(cdohash_table);
            try {
                while (iteratorHasNext(cdohash_iterator)) {
                    final Map.Entry cdohash_entry = iteratorNextEntry(cdohash_iterator);
                    argnum = getEntryKey(cdohash_entry);
                    argnum_mts = getEntryValue(cdohash_entry);
                    final SubLObject v_isa = cycl_utilities.formula_arg(nat, argnum, UNPROVIDED);
                    SubLObject cdolist_list_var2 = genls.min_mts_of_genls_paths(v_isa, collection, UNPROVIDED);
                    SubLObject mt_set = NIL;
                    mt_set = cdolist_list_var2.first();
                    while (NIL != cdolist_list_var2) {
                        if (NIL != mt_set) {
                            SubLObject cdolist_list_var_$463 = argnum_mts;
                            SubLObject mt = NIL;
                            mt = cdolist_list_var_$463.first();
                            while (NIL != cdolist_list_var_$463) {
                                final SubLObject min_mt_set = genl_mts.min_mts(adjoin(mt, mt_set, UNPROVIDED, UNPROVIDED), UNPROVIDED);
                                if (NIL != min_mt_set) {
                                    final SubLObject item_var2 = min_mt_set;
                                    if (NIL == member(item_var2, result, symbol_function($sym171$SETS_EQUAL_), symbol_function(IDENTITY))) {
                                        result = cons(item_var2, result);
                                    }
                                }
                                cdolist_list_var_$463 = cdolist_list_var_$463.rest();
                                mt = cdolist_list_var_$463.first();
                            } 
                        }
                        cdolist_list_var2 = cdolist_list_var2.rest();
                        mt_set = cdolist_list_var2.first();
                    } 
                } 
            } finally {
                releaseEntrySetIterator(cdohash_iterator);
            }
        } finally {
            $mapping_answer$.rebind(_prev_bind_2, thread);
            $mapping_gather_arg$.rebind(_prev_bind_0, thread);
        }
        return result;
    }/**
     * what minimal sets of mts are associated with isa paths from NAT to COLLECTION
     */


    /**
     *
     *
     * @return listp; what minimal sets of mts are associated with isa paths from TERM to COLLECTION
     */
    @LispMethod(comment = "@return listp; what minimal sets of mts are associated with isa paths from TERM to COLLECTION")
    public static final SubLObject min_mts_of_quoted_isa_paths_alt(SubLObject v_term, SubLObject collection, SubLObject tv) {
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (NIL != term.first_order_nautP(v_term)) {
            {
                SubLObject quoted_isa_mts = com.cyc.cycjava.cycl.isa.nat_min_mts_of_quoted_isa_paths(v_term, collection);
                if (NIL != quoted_isa_mts) {
                    return quoted_isa_mts;
                }
                if (NIL != at_defns.any_sufficient_quoted_defn_anywhereP(collection)) {
                    return Mapping.mapcar(symbol_function(LIST), at_defns.max_mts_of_admitting_quoted_defns(v_term, collection));
                }
            }
        } else {
            {
                SubLObject isa_mts = sbhl_search_what_mts.sbhl_min_mts_of_predicate_paths(sbhl_module_vars.get_sbhl_module($$quotedIsa), v_term, collection, tv);
                SubLObject defn_mts = NIL;
                if (NIL != at_defns.any_sufficient_quoted_defn_anywhereP(collection)) {
                    defn_mts = Mapping.mapcar(symbol_function(LIST), at_defns.max_mts_of_admitting_quoted_defns(v_term, collection));
                }
                return nconc(isa_mts, defn_mts);
            }
        }
        return NIL;
    }

    /**
     *
     *
     * @return listp; what minimal sets of mts are associated with isa paths from TERM to COLLECTION
     */
    @LispMethod(comment = "@return listp; what minimal sets of mts are associated with isa paths from TERM to COLLECTION")
    public static SubLObject min_mts_of_quoted_isa_paths(final SubLObject v_term, final SubLObject collection, SubLObject tv) {
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (NIL == term.first_order_nautP(v_term)) {
            final SubLObject isa_mts = sbhl_search_what_mts.sbhl_min_mts_of_predicate_paths(sbhl_module_vars.get_sbhl_module($$quotedIsa), v_term, collection, tv);
            SubLObject defn_mts = NIL;
            if (NIL != at_defns.any_sufficient_quoted_defn_anywhereP(collection)) {
                defn_mts = Mapping.mapcar(symbol_function(LIST), at_defns.max_mts_of_admitting_quoted_defns(v_term, collection));
            }
            return nconc(isa_mts, defn_mts);
        }
        final SubLObject quoted_isa_mts = nat_min_mts_of_quoted_isa_paths(v_term, collection);
        if (NIL != quoted_isa_mts) {
            return quoted_isa_mts;
        }
        if (NIL != at_defns.any_sufficient_quoted_defn_anywhereP(collection)) {
            return Mapping.mapcar(symbol_function(LIST), at_defns.max_mts_of_admitting_quoted_defns(v_term, collection));
        }
        return NIL;
    }

    /**
     * what minimal sets of mts are associated with isa paths from NAT to COLLECTION
     */
    @LispMethod(comment = "what minimal sets of mts are associated with isa paths from NAT to COLLECTION")
    public static final SubLObject nat_min_mts_of_quoted_isa_paths_alt(SubLObject nat, SubLObject collection) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject v_term = cycl_utilities.find_ground_naut(nat);
                if (NIL != v_term) {
                    return com.cyc.cycjava.cycl.isa.min_mts_of_quoted_isa_paths(v_term, collection, UNPROVIDED);
                } else {
                    {
                        SubLObject result = NIL;
                        {
                            SubLObject _prev_bind_0 = $mapping_target$.currentBinding(thread);
                            SubLObject _prev_bind_1 = $mapping_gather_arg$.currentBinding(thread);
                            SubLObject _prev_bind_2 = $mapping_answer$.currentBinding(thread);
                            try {
                                $mapping_target$.bind(collection, thread);
                                $mapping_gather_arg$.bind(TWO_INTEGER, thread);
                                $mapping_answer$.bind(NIL, thread);
                                {
                                    SubLObject _prev_bind_0_511 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                    SubLObject _prev_bind_1_512 = mt_relevance_macros.$mt$.currentBinding(thread);
                                    try {
                                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                                        mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                                        kb_mapping.map_gaf_arg_index(symbol_function(GATHER_MIN_MTS_OF_PATHS_BETWEEN), cycl_utilities.nat_functor(nat), ONE_INTEGER, $$resultQuotedIsa, $TRUE, UNPROVIDED);
                                    } finally {
                                        mt_relevance_macros.$mt$.rebind(_prev_bind_1_512, thread);
                                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0_511, thread);
                                    }
                                }
                                result = $mapping_answer$.getDynamicValue(thread);
                            } finally {
                                $mapping_answer$.rebind(_prev_bind_2, thread);
                                $mapping_gather_arg$.rebind(_prev_bind_1, thread);
                                $mapping_target$.rebind(_prev_bind_0, thread);
                            }
                        }
                        {
                            SubLObject _prev_bind_0 = $mapping_target$.currentBinding(thread);
                            SubLObject _prev_bind_1 = $mapping_gather_arg$.currentBinding(thread);
                            SubLObject _prev_bind_2 = $mapping_answer$.currentBinding(thread);
                            try {
                                $mapping_target$.bind(collection, thread);
                                $mapping_gather_arg$.bind(TWO_INTEGER, thread);
                                $mapping_answer$.bind(NIL, thread);
                                {
                                    SubLObject _prev_bind_0_513 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                    SubLObject _prev_bind_1_514 = mt_relevance_macros.$mt$.currentBinding(thread);
                                    try {
                                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                                        mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                                        kb_mapping.map_gaf_arg_index(symbol_function(GATHER_MIN_MTS_OF_PATHS_BETWEEN), cycl_utilities.nat_functor(nat), ONE_INTEGER, $$evaluationResultQuotedIsa, $TRUE, UNPROVIDED);
                                    } finally {
                                        mt_relevance_macros.$mt$.rebind(_prev_bind_1_514, thread);
                                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0_513, thread);
                                    }
                                }
                                {
                                    SubLObject item_var = result;
                                    if (NIL == member(item_var, $mapping_answer$.getDynamicValue(thread), symbol_function($sym168$SETS_EQUAL_), symbol_function(IDENTITY))) {
                                        $mapping_answer$.setDynamicValue(cons(item_var, $mapping_answer$.getDynamicValue(thread)), thread);
                                    }
                                }
                            } finally {
                                $mapping_answer$.rebind(_prev_bind_2, thread);
                                $mapping_gather_arg$.rebind(_prev_bind_1, thread);
                                $mapping_target$.rebind(_prev_bind_0, thread);
                            }
                        }
                        return result;
                    }
                }
            }
        }
    }

    /**
     * what minimal sets of mts are associated with isa paths from NAT to COLLECTION
     */
    @LispMethod(comment = "what minimal sets of mts are associated with isa paths from NAT to COLLECTION")
    public static SubLObject nat_min_mts_of_quoted_isa_paths(final SubLObject nat, final SubLObject collection) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_term = cycl_utilities.find_ground_naut(nat);
        if (NIL != v_term) {
            return min_mts_of_quoted_isa_paths(v_term, collection, UNPROVIDED);
        }
        SubLObject result = NIL;
        SubLObject _prev_bind_0 = $mapping_target$.currentBinding(thread);
        SubLObject _prev_bind_2 = $mapping_gather_arg$.currentBinding(thread);
        SubLObject _prev_bind_3 = $mapping_answer$.currentBinding(thread);
        try {
            $mapping_target$.bind(collection, thread);
            $mapping_gather_arg$.bind(TWO_INTEGER, thread);
            $mapping_answer$.bind(NIL, thread);
            final SubLObject _prev_bind_0_$464 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_1_$465 = mt_relevance_macros.$mt$.currentBinding(thread);
            try {
                mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                kb_mapping.map_gaf_arg_index(symbol_function(GATHER_MIN_MTS_OF_PATHS_BETWEEN), cycl_utilities.nat_functor(nat), ONE_INTEGER, $$resultQuotedIsa, $TRUE, UNPROVIDED);
            } finally {
                mt_relevance_macros.$mt$.rebind(_prev_bind_1_$465, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0_$464, thread);
            }
            result = $mapping_answer$.getDynamicValue(thread);
        } finally {
            $mapping_answer$.rebind(_prev_bind_3, thread);
            $mapping_gather_arg$.rebind(_prev_bind_2, thread);
            $mapping_target$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = $mapping_target$.currentBinding(thread);
        _prev_bind_2 = $mapping_gather_arg$.currentBinding(thread);
        _prev_bind_3 = $mapping_answer$.currentBinding(thread);
        try {
            $mapping_target$.bind(collection, thread);
            $mapping_gather_arg$.bind(TWO_INTEGER, thread);
            $mapping_answer$.bind(NIL, thread);
            final SubLObject _prev_bind_0_$465 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_1_$466 = mt_relevance_macros.$mt$.currentBinding(thread);
            try {
                mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                kb_mapping.map_gaf_arg_index(symbol_function(GATHER_MIN_MTS_OF_PATHS_BETWEEN), cycl_utilities.nat_functor(nat), ONE_INTEGER, $$evaluationResultQuotedIsa, $TRUE, UNPROVIDED);
            } finally {
                mt_relevance_macros.$mt$.rebind(_prev_bind_1_$466, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0_$465, thread);
            }
            final SubLObject item_var = result;
            if (NIL == member(item_var, $mapping_answer$.getDynamicValue(thread), symbol_function($sym171$SETS_EQUAL_), symbol_function(IDENTITY))) {
                $mapping_answer$.setDynamicValue(cons(item_var, $mapping_answer$.getDynamicValue(thread)), thread);
            }
        } finally {
            $mapping_answer$.rebind(_prev_bind_3, thread);
            $mapping_gather_arg$.rebind(_prev_bind_2, thread);
            $mapping_target$.rebind(_prev_bind_0, thread);
        }
        return result;
    }/**
     * what minimal sets of mts are associated with isa paths from NAT to COLLECTION
     */


    public static final SubLObject gather_min_mts_of_paths_between_alt(SubLObject assertion) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject source = gaf_arg(assertion, $mapping_gather_arg$.getDynamicValue(thread));
                SubLObject mt = assertion_mt(assertion);
                if (NIL != forts.fort_p(source)) {
                    {
                        SubLObject cdolist_list_var = sbhl_search_what_mts.sbhl_min_mts_of_predicate_paths(sbhl_module_vars.get_sbhl_module($$genls), source, $mapping_target$.getDynamicValue(thread), UNPROVIDED);
                        SubLObject mt_set = NIL;
                        for (mt_set = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , mt_set = cdolist_list_var.first()) {
                            if (NIL != mt_set) {
                                {
                                    SubLObject min_mt_set = genl_mts.min_mts(adjoin(mt, mt_set, symbol_function(HLMT_EQUAL), UNPROVIDED), UNPROVIDED);
                                    if (NIL != min_mt_set) {
                                        {
                                            SubLObject item_var = min_mt_set;
                                            if (NIL == member(item_var, $mapping_answer$.getDynamicValue(thread), symbol_function($sym168$SETS_EQUAL_), symbol_function(IDENTITY))) {
                                                $mapping_answer$.setDynamicValue(cons(item_var, $mapping_answer$.getDynamicValue(thread)), thread);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return NIL;
        }
    }

    public static SubLObject gather_min_mts_of_paths_between(final SubLObject assertion) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject source = assertions_high.gaf_arg(assertion, $mapping_gather_arg$.getDynamicValue(thread));
        final SubLObject mt = assertions_high.assertion_mt(assertion);
        if (NIL != forts.fort_p(source)) {
            SubLObject cdolist_list_var = sbhl_search_what_mts.sbhl_min_mts_of_predicate_paths(sbhl_module_vars.get_sbhl_module($$genls), source, $mapping_target$.getDynamicValue(thread), UNPROVIDED);
            SubLObject mt_set = NIL;
            mt_set = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                if (NIL != mt_set) {
                    final SubLObject min_mt_set = genl_mts.min_mts(adjoin(mt, mt_set, symbol_function(HLMT_EQUAL), UNPROVIDED), UNPROVIDED);
                    if (NIL != min_mt_set) {
                        final SubLObject item_var = min_mt_set;
                        if (NIL == member(item_var, $mapping_answer$.getDynamicValue(thread), symbol_function($sym171$SETS_EQUAL_), symbol_function(IDENTITY))) {
                            $mapping_answer$.setDynamicValue(cons(item_var, $mapping_answer$.getDynamicValue(thread)), thread);
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                mt_set = cdolist_list_var.first();
            } 
        }
        return NIL;
    }

    public static final SubLObject cache_mts_of_arg_alt(SubLObject assertion) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (NIL != gaf_assertionP(assertion)) {
                hash_table_utilities.push_hash(gaf_arg(assertion, $mapping_gather_arg$.getDynamicValue(thread)), assertion_mt(assertion), $mapping_answer$.getDynamicValue(thread));
            }
            return NIL;
        }
    }

    public static SubLObject cache_mts_of_arg(final SubLObject assertion) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != assertions_high.gaf_assertionP(assertion)) {
            hash_table_utilities.push_hash(assertions_high.gaf_arg(assertion, $mapping_gather_arg$.getDynamicValue(thread)), assertions_high.assertion_mt(assertion), $mapping_answer$.getDynamicValue(thread));
        }
        return NIL;
    }

    /**
     *
     *
     * @return listp; the most genl mts by which NOT-COL is accessible to TERM by a false isa path. Currently this does not take disjoins into account.
     */
    @LispMethod(comment = "@return listp; the most genl mts by which NOT-COL is accessible to TERM by a false isa path. Currently this does not take disjoins into account.")
    public static final SubLObject max_floor_mts_of_not_isa_paths_alt(SubLObject v_term, SubLObject not_col, SubLObject tv) {
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_search_what_mts.sbhl_max_floor_mts_of_false_inverse_paths(sbhl_module_vars.get_sbhl_module($$isa), not_col, v_term, tv);
    }

    /**
     *
     *
     * @return listp; the most genl mts by which NOT-COL is accessible to TERM by a false isa path. Currently this does not take disjoins into account.
     */
    @LispMethod(comment = "@return listp; the most genl mts by which NOT-COL is accessible to TERM by a false isa path. Currently this does not take disjoins into account.")
    public static SubLObject max_floor_mts_of_not_isa_paths(final SubLObject v_term, final SubLObject not_col, SubLObject tv) {
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_search_what_mts.sbhl_max_floor_mts_of_false_inverse_paths(sbhl_module_vars.get_sbhl_module($$isa), not_col, v_term, tv);
    }

    /**
     *
     *
     * @return listp; what minimal sets of mts are associated with false isa paths from SPEC to GENL?. Currently this does not take disjoins into account.
     */
    @LispMethod(comment = "@return listp; what minimal sets of mts are associated with false isa paths from SPEC to GENL?. Currently this does not take disjoins into account.")
    public static final SubLObject min_mts_of_not_isa_paths_alt(SubLObject v_term, SubLObject not_col, SubLObject tv) {
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_search_what_mts.sbhl_min_mts_of_false_inverse_paths(sbhl_module_vars.get_sbhl_module($$isa), not_col, v_term, tv);
    }

    /**
     *
     *
     * @return listp; what minimal sets of mts are associated with false isa paths from SPEC to GENL?. Currently this does not take disjoins into account.
     */
    @LispMethod(comment = "@return listp; what minimal sets of mts are associated with false isa paths from SPEC to GENL?. Currently this does not take disjoins into account.")
    public static SubLObject min_mts_of_not_isa_paths(final SubLObject v_term, final SubLObject not_col, SubLObject tv) {
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_search_what_mts.sbhl_min_mts_of_false_inverse_paths(sbhl_module_vars.get_sbhl_module($$isa), not_col, v_term, tv);
    }

    /**
     *
     *
     * @return booleanp; Whether TERM is known to be an instance or member of SET.
     */
    @LispMethod(comment = "@return booleanp; Whether TERM is known to be an instance or member of SET.")
    public static final SubLObject instantiationP_alt(SubLObject v_term, SubLObject v_set, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (NIL != forts.fort_p(v_set)) {
            return com.cyc.cycjava.cycl.isa.isaP(v_term, v_set, mt, UNPROVIDED);
        } else {
            if (NIL != com.cyc.cycjava.cycl.isa.set_naut_p(v_set)) {
                return com.cyc.cycjava.cycl.isa.member_of_cycl_setP(v_term, v_set);
            } else {
                if (NIL != specs_fn_naut_p(v_set)) {
                    return genls.genlP(v_term, specs_fn_arg(v_set), UNPROVIDED, UNPROVIDED);
                } else {
                    return NIL;
                }
            }
        }
    }

    /**
     *
     *
     * @return booleanp; Whether TERM is known to be an instance or member of SET.
     */
    @LispMethod(comment = "@return booleanp; Whether TERM is known to be an instance or member of SET.")
    public static SubLObject instantiationP(final SubLObject v_term, final SubLObject v_set, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (NIL != forts.fort_p(v_set)) {
            return isaP(v_term, v_set, mt, UNPROVIDED);
        }
        if (NIL != set_naut_p(v_set)) {
            return member_of_cycl_setP(v_term, v_set);
        }
        if (NIL != specs_fn_naut_p(v_set)) {
            return genls.genlP(v_term, specs_fn_arg(v_set), UNPROVIDED, UNPROVIDED);
        }
        return NIL;
    }

    /**
     *
     *
     * @return listp;  The direct known instances/members of SET.
     */
    @LispMethod(comment = "@return listp;  The direct known instances/members of SET.")
    public static final SubLObject instantiations_alt(SubLObject v_set, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (NIL != forts.fort_p(v_set)) {
            return com.cyc.cycjava.cycl.isa.instances(v_set, mt, UNPROVIDED);
        } else {
            if (NIL != com.cyc.cycjava.cycl.isa.set_naut_p(v_set)) {
                return com.cyc.cycjava.cycl.isa.members_of_cycl_set(v_set);
            } else {
                if (NIL != specs_fn_naut_p(v_set)) {
                    return genls.specs(specs_fn_arg(v_set), mt, UNPROVIDED);
                } else {
                    return NIL;
                }
            }
        }
    }

    /**
     *
     *
     * @return listp;  The direct known instances/members of SET.
     */
    @LispMethod(comment = "@return listp;  The direct known instances/members of SET.")
    public static SubLObject instantiations(final SubLObject v_set, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (NIL != forts.fort_p(v_set)) {
            return instances(v_set, mt, UNPROVIDED);
        }
        if (NIL != set_naut_p(v_set)) {
            return members_of_cycl_set(v_set);
        }
        if (NIL != specs_fn_naut_p(v_set)) {
            return genls.specs(specs_fn_arg(v_set), mt, UNPROVIDED);
        }
        return NIL;
    }

    /**
     *
     *
     * @return listp;  All known instances/members of SET.
     */
    @LispMethod(comment = "@return listp;  All known instances/members of SET.")
    public static final SubLObject all_instantiations_alt(SubLObject v_set, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (NIL != forts.fort_p(v_set)) {
            return com.cyc.cycjava.cycl.isa.all_instances(v_set, mt, UNPROVIDED);
        } else {
            if (NIL != com.cyc.cycjava.cycl.isa.set_naut_p(v_set)) {
                return com.cyc.cycjava.cycl.isa.members_of_cycl_set(v_set);
            } else {
                if (NIL != specs_fn_naut_p(v_set)) {
                    return genls.all_specs(specs_fn_arg(v_set), mt, UNPROVIDED);
                } else {
                    return NIL;
                }
            }
        }
    }

    /**
     *
     *
     * @return listp;  All known instances/members of SET.
     */
    @LispMethod(comment = "@return listp;  All known instances/members of SET.")
    public static SubLObject all_instantiations(final SubLObject v_set, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (NIL != forts.fort_p(v_set)) {
            return all_instances(v_set, mt, UNPROVIDED);
        }
        if (NIL != set_naut_p(v_set)) {
            return members_of_cycl_set(v_set);
        }
        if (NIL != specs_fn_naut_p(v_set)) {
            return genls.all_specs(specs_fn_arg(v_set), mt, UNPROVIDED);
        }
        return NIL;
    }

    /**
     *
     *
     * @param MT:
     * 		hlmt-p; may be omitted iff SET is a set-naut-p
     * @return listp;  A random known instance/member of the set or collection SET.
     * @see random-instance-of
     */
    @LispMethod(comment = "@param MT:\r\n\t\thlmt-p; may be omitted iff SET is a set-naut-p\r\n@return listp;  A random known instance/member of the set or collection SET.\r\n@see random-instance-of")
    public static final SubLObject random_instantiation_alt(SubLObject v_set, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        SubLTrampolineFile.checkType(v_set, KB_SET_OR_COLLECTION_P);
        if (NIL != forts.fort_p(v_set)) {
            return com.cyc.cycjava.cycl.isa.random_instance_of(v_set, mt);
        } else {
            if (NIL != com.cyc.cycjava.cycl.isa.set_naut_p(v_set)) {
                return com.cyc.cycjava.cycl.isa.random_member_of_cycl_set(v_set);
            } else {
                if (NIL != specs_fn_naut_p(v_set)) {
                    return genls.random_spec_of(specs_fn_arg(v_set), mt);
                } else {
                    return NIL;
                }
            }
        }
    }

    /**
     *
     *
     * @param MT:
     * 		hlmt-p; may be omitted iff SET is a set-naut-p
     * @return listp;  A random known instance/member of the set or collection SET.
     * @see random-instance-of
     */
    @LispMethod(comment = "@param MT:\r\n\t\thlmt-p; may be omitted iff SET is a set-naut-p\r\n@return listp;  A random known instance/member of the set or collection SET.\r\n@see random-instance-of")
    public static SubLObject random_instantiation(final SubLObject v_set, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        assert NIL != kb_accessors.kb_set_or_collection_p(v_set) : "! kb_accessors.kb_set_or_collection_p(v_set) " + ("kb_accessors.kb_set_or_collection_p(v_set) " + "CommonSymbols.NIL != kb_accessors.kb_set_or_collection_p(v_set) ") + v_set;
        if (NIL != forts.fort_p(v_set)) {
            return random_instance_of(v_set, mt);
        }
        if (NIL != set_naut_p(v_set)) {
            return random_member_of_cycl_set(v_set);
        }
        if (NIL != specs_fn_naut_p(v_set)) {
            return genls.random_spec_of(specs_fn_arg(v_set), mt);
        }
        return NIL;
    }

    public static final SubLObject set_naut_p_alt(SubLObject obj) {
        return makeBoolean((NIL != possibly_naut_p(obj)) && (cycl_utilities.nat_functor(obj) == $$TheSet));
    }

    public static SubLObject set_naut_p(final SubLObject obj) {
        return cycl_utilities.naut_with_functor_p(obj, $$TheSet);
    }

    public static final SubLObject member_of_cycl_setP_alt(SubLObject v_term, SubLObject v_set) {
        return subl_promotions.memberP(v_term, cycl_utilities.nat_args(v_set, UNPROVIDED), symbol_function(EQUAL), UNPROVIDED);
    }

    public static SubLObject member_of_cycl_setP(final SubLObject v_term, final SubLObject v_set) {
        return subl_promotions.memberP(v_term, cycl_utilities.nat_args(v_set, UNPROVIDED), symbol_function(EQUAL), UNPROVIDED);
    }

    public static final SubLObject members_of_cycl_set_alt(SubLObject v_set) {
        return cycl_utilities.nat_args(v_set, UNPROVIDED);
    }

    public static SubLObject members_of_cycl_set(final SubLObject v_set) {
        return cycl_utilities.nat_args(v_set, UNPROVIDED);
    }

    public static final SubLObject random_member_of_cycl_set_alt(SubLObject v_set) {
        return list_utilities.random_element(com.cyc.cycjava.cycl.isa.members_of_cycl_set(v_set));
    }

    public static SubLObject random_member_of_cycl_set(final SubLObject v_set) {
        return list_utilities.random_element(members_of_cycl_set(v_set));
    }

    /**
     *
     *
     * @return listp; the mts in which <fort> is an arg to an isa assertion
     */
    @LispMethod(comment = "@return listp; the mts in which <fort> is an arg to an isa assertion")
    public static final SubLObject isas_mts_alt(SubLObject fort) {
        return kb_accessors.pred_mts(fort, $$isa, UNPROVIDED);
    }

    /**
     *
     *
     * @return listp; the mts in which <fort> is an arg to an isa assertion
     */
    @LispMethod(comment = "@return listp; the mts in which <fort> is an arg to an isa assertion")
    public static SubLObject isas_mts(final SubLObject fort) {
        return kb_accessors.pred_mts(fort, $$isa, UNPROVIDED);
    }

    /**
     *
     *
     * @return listp; the mts in which <fort> has isa assertions
     */
    @LispMethod(comment = "@return listp; the mts in which <fort> has isa assertions")
    public static final SubLObject isa_mts_alt(SubLObject fort) {
        return kb_accessors.pred_mts(fort, $$isa, $list_alt174);
    }

    /**
     *
     *
     * @return listp; the mts in which <fort> has isa assertions
     */
    @LispMethod(comment = "@return listp; the mts in which <fort> has isa assertions")
    public static SubLObject isa_mts(final SubLObject fort) {
        return kb_accessors.pred_mts(fort, $$isa, $list180);
    }

    /**
     * All mt where FORT has #$isa assertions.
     */
    @LispMethod(comment = "All mt where FORT has #$isa assertions.")
    public static final SubLObject type_mts_alt(SubLObject fort) {
        return com.cyc.cycjava.cycl.isa.isa_mts(fort);
    }

    /**
     * All mt where FORT has #$isa assertions.
     */
    @LispMethod(comment = "All mt where FORT has #$isa assertions.")
    public static SubLObject type_mts(final SubLObject fort) {
        return isa_mts(fort);
    }/**
     * All mt where FORT has #$isa assertions.
     */


    /**
     *
     *
     * @return booleanp; whether there are any asserted true isa links for TERM.
     */
    @LispMethod(comment = "@return booleanp; whether there are any asserted true isa links for TERM.")
    public static final SubLObject asserted_isaP_alt(SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return sbhl_link_methods.sbhl_any_asserted_true_links(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt);
    }

    /**
     *
     *
     * @return booleanp; whether there are any asserted true isa links for TERM.
     */
    @LispMethod(comment = "@return booleanp; whether there are any asserted true isa links for TERM.")
    public static SubLObject asserted_isaP(final SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return sbhl_link_methods.sbhl_any_asserted_true_links(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt);
    }

    /**
     *
     *
     * @return listp; the asserted true isa links for TERM in MT / *mt*.
     */
    @LispMethod(comment = "@return listp; the asserted true isa links for TERM in MT / *mt*.")
    public static final SubLObject asserted_isa_alt(SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return sbhl_link_methods.sbhl_asserted_true_links(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt);
    }

    /**
     *
     *
     * @return listp; the asserted true isa links for TERM in MT / *mt*.
     */
    @LispMethod(comment = "@return listp; the asserted true isa links for TERM in MT / *mt*.")
    public static SubLObject asserted_isa(final SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return sbhl_link_methods.sbhl_asserted_true_links(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt);
    }

    /**
     *
     *
     * @return listp; the asserted false isa links for TERM in MT / *mt*.
     */
    @LispMethod(comment = "@return listp; the asserted false isa links for TERM in MT / *mt*.")
    public static final SubLObject asserted_not_isa_alt(SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return sbhl_link_methods.sbhl_asserted_false_links(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt);
    }

    /**
     *
     *
     * @return listp; the asserted false isa links for TERM in MT / *mt*.
     */
    @LispMethod(comment = "@return listp; the asserted false isa links for TERM in MT / *mt*.")
    public static SubLObject asserted_not_isa(final SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return sbhl_link_methods.sbhl_asserted_false_links(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt);
    }

    /**
     *
     *
     * @return listp; the supported true isa links for TERM in MT / *mt*.
     */
    @LispMethod(comment = "@return listp; the supported true isa links for TERM in MT / *mt*.")
    public static final SubLObject supported_isa_alt(SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return sbhl_link_methods.sbhl_supported_true_links(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt);
    }

    /**
     *
     *
     * @return listp; the supported true isa links for TERM in MT / *mt*.
     */
    @LispMethod(comment = "@return listp; the supported true isa links for TERM in MT / *mt*.")
    public static SubLObject supported_isa(final SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return sbhl_link_methods.sbhl_supported_true_links(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt);
    }

    /**
     *
     *
     * @return listp; the supported false isa links for TERM in MT / *mt*.
     */
    @LispMethod(comment = "@return listp; the supported false isa links for TERM in MT / *mt*.")
    public static final SubLObject supported_not_isa_alt(SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return sbhl_link_methods.sbhl_supported_false_links(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt);
    }

    /**
     *
     *
     * @return listp; the supported false isa links for TERM in MT / *mt*.
     */
    @LispMethod(comment = "@return listp; the supported false isa links for TERM in MT / *mt*.")
    public static SubLObject supported_not_isa(final SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return sbhl_link_methods.sbhl_supported_false_links(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt);
    }

    /**
     *
     *
     * @return listp; the asserted true instance links for TERM in MT / *mt*.
     */
    @LispMethod(comment = "@return listp; the asserted true instance links for TERM in MT / *mt*.")
    public static final SubLObject asserted_instance_alt(SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return sbhl_link_methods.sbhl_asserted_true_inverse_links(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt);
    }

    /**
     *
     *
     * @return listp; the asserted true instance links for TERM in MT / *mt*.
     */
    @LispMethod(comment = "@return listp; the asserted true instance links for TERM in MT / *mt*.")
    public static SubLObject asserted_instance(final SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return sbhl_link_methods.sbhl_asserted_true_inverse_links(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt);
    }

    /**
     *
     *
     * @return listp; the asserted false instance links for TERM in MT / *mt*.
     */
    @LispMethod(comment = "@return listp; the asserted false instance links for TERM in MT / *mt*.")
    public static final SubLObject asserted_not_instance_alt(SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return sbhl_link_methods.sbhl_asserted_false_inverse_links(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt);
    }

    /**
     *
     *
     * @return listp; the asserted false instance links for TERM in MT / *mt*.
     */
    @LispMethod(comment = "@return listp; the asserted false instance links for TERM in MT / *mt*.")
    public static SubLObject asserted_not_instance(final SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return sbhl_link_methods.sbhl_asserted_false_inverse_links(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt);
    }

    /**
     *
     *
     * @return listp; the supported true instance links for TERM in MT / *mt*.
     */
    @LispMethod(comment = "@return listp; the supported true instance links for TERM in MT / *mt*.")
    public static final SubLObject supported_instance_alt(SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return sbhl_link_methods.sbhl_supported_true_inverse_links(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt);
    }

    /**
     *
     *
     * @return listp; the supported true instance links for TERM in MT / *mt*.
     */
    @LispMethod(comment = "@return listp; the supported true instance links for TERM in MT / *mt*.")
    public static SubLObject supported_instance(final SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return sbhl_link_methods.sbhl_supported_true_inverse_links(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt);
    }

    /**
     *
     *
     * @return listp; the supported false instance links for TERM in MT / *mt*.
     */
    @LispMethod(comment = "@return listp; the supported false instance links for TERM in MT / *mt*.")
    public static final SubLObject supported_not_instance_alt(SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return sbhl_link_methods.sbhl_supported_false_inverse_links(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt);
    }

    /**
     *
     *
     * @return listp; the supported false instance links for TERM in MT / *mt*.
     */
    @LispMethod(comment = "@return listp; the supported false instance links for TERM in MT / *mt*.")
    public static SubLObject supported_not_instance(final SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return sbhl_link_methods.sbhl_supported_false_inverse_links(sbhl_module_vars.get_sbhl_module($$isa), v_term, mt);
    }

    /**
     * Modifier. Adds sbhl links with @see sbhl-after-adding.
     */
    @LispMethod(comment = "Modifier. Adds sbhl links with @see sbhl-after-adding.")
    public static final SubLObject instanceof_after_adding_alt(SubLObject source, SubLObject assertion) {
        return com.cyc.cycjava.cycl.isa.isa_after_adding(source, assertion);
    }

    /**
     * Modifier. Adds sbhl links with @see sbhl-after-adding.
     */
    @LispMethod(comment = "Modifier. Adds sbhl links with @see sbhl-after-adding.")
    public static SubLObject instanceof_after_adding(SubLObject source, final SubLObject assertion) {
        return isa_after_adding(source, assertion);
    }/**
     * Modifier. Adds sbhl links with @see sbhl-after-adding.
     */


    /**
     * Modifier. Adds sbhl links with @see sbhl-after-adding.
     */
    @LispMethod(comment = "Modifier. Adds sbhl links with @see sbhl-after-adding.")
    public static final SubLObject isa_after_adding_alt(SubLObject source, SubLObject assertion) {
        sbhl_link_methods.sbhl_after_adding(source, assertion, sbhl_module_vars.get_sbhl_module($$isa));
        sbhl_cache.sbhl_cache_addition_maintainence(assertion);
        after_adding_modules.clear_isa_dependent_caches(source, assertion);
        com.cyc.cycjava.cycl.isa.possibly_propagate_isa_collection_subset_fn_the_set_of(assertion);
        com.cyc.cycjava.cycl.isa.possibly_propagate_isa_the_collection_of(assertion);
        sbhl_link_methods.possibly_add_non_fort_isa(assertion);
        return NIL;
    }

    /**
     * Modifier. Adds sbhl links with @see sbhl-after-adding.
     */
    @LispMethod(comment = "Modifier. Adds sbhl links with @see sbhl-after-adding.")
    public static SubLObject isa_after_adding(SubLObject source, final SubLObject assertion) {
        sbhl_link_methods.sbhl_after_adding(source, assertion, sbhl_module_vars.get_sbhl_module($$isa));
        sbhl_cache.sbhl_cache_addition_maintainence(assertion);
        after_adding_modules.clear_isa_dependent_caches(source, assertion);
        possibly_propagate_isa_collection_subset_fn_the_set_of(assertion);
        possibly_propagate_isa_the_collection_of(assertion);
        sbhl_link_methods.possibly_add_non_fort_isa(assertion);
        return NIL;
    }/**
     * Modifier. Adds sbhl links with @see sbhl-after-adding.
     */


    /**
     * If ASSERTION is of the form (#$isa <term> (#$CollectionSubsetFn <col> (#$TheSetOf ?X <prop>))),
     * substitutes <term> into <prop> and creates a new deduction.
     * Copied-n-edited from @xref possibly-propagate-isa-the-collection-of.
     */
    @LispMethod(comment = "If ASSERTION is of the form (#$isa <term> (#$CollectionSubsetFn <col> (#$TheSetOf ?X <prop>))),\r\nsubstitutes <term> into <prop> and creates a new deduction.\r\nCopied-n-edited from @xref possibly-propagate-isa-the-collection-of.\nIf ASSERTION is of the form (#$isa <term> (#$CollectionSubsetFn <col> (#$TheSetOf ?X <prop>))),\nsubstitutes <term> into <prop> and creates a new deduction.\nCopied-n-edited from @xref possibly-propagate-isa-the-collection-of.")
    public static final SubLObject possibly_propagate_isa_collection_subset_fn_the_set_of_alt(SubLObject assertion) {
        if (NIL != assertion_utilities.true_assertionP(assertion)) {
            {
                SubLObject isa_formula = fi.assertion_fi_formula(assertion, UNPROVIDED);
                SubLObject datum = isa_formula;
                SubLObject current = datum;
                SubLObject v_isa = NIL;
                SubLObject v_term = NIL;
                SubLObject subset_expr = NIL;
                destructuring_bind_must_consp(current, datum, $list_alt177);
                v_isa = current.first();
                current = current.rest();
                destructuring_bind_must_consp(current, datum, $list_alt177);
                v_term = current.first();
                current = current.rest();
                destructuring_bind_must_consp(current, datum, $list_alt177);
                subset_expr = current.first();
                current = current.rest();
                if (NIL == current) {
                    if ((v_isa == $$isa) && (NIL != el_formula_with_operator_p(subset_expr, $$CollectionSubsetFn))) {
                        {
                            SubLObject datum_515 = subset_expr;
                            SubLObject current_516 = datum_515;
                            SubLObject csfn = NIL;
                            SubLObject col = NIL;
                            SubLObject colexpr = NIL;
                            destructuring_bind_must_consp(current_516, datum_515, $list_alt179);
                            csfn = current_516.first();
                            current_516 = current_516.rest();
                            destructuring_bind_must_consp(current_516, datum_515, $list_alt179);
                            col = current_516.first();
                            current_516 = current_516.rest();
                            destructuring_bind_must_consp(current_516, datum_515, $list_alt179);
                            colexpr = current_516.first();
                            current_516 = current_516.rest();
                            if (NIL == current_516) {
                                com.cyc.cycjava.cycl.isa.possibly_propagate_isa_the_set_of(colexpr, v_term, assertion);
                            } else {
                                cdestructuring_bind_error(datum_515, $list_alt179);
                            }
                        }
                    }
                } else {
                    cdestructuring_bind_error(datum, $list_alt177);
                }
            }
        }
        return NIL;
    }

    /**
     * If ASSERTION is of the form (#$isa <term> (#$CollectionSubsetFn <col> (#$TheSetOf ?X <prop>))),
     * substitutes <term> into <prop> and creates a new deduction.
     * Copied-n-edited from @xref possibly-propagate-isa-the-collection-of.
     */
    @LispMethod(comment = "If ASSERTION is of the form (#$isa <term> (#$CollectionSubsetFn <col> (#$TheSetOf ?X <prop>))),\r\nsubstitutes <term> into <prop> and creates a new deduction.\r\nCopied-n-edited from @xref possibly-propagate-isa-the-collection-of.\nIf ASSERTION is of the form (#$isa <term> (#$CollectionSubsetFn <col> (#$TheSetOf ?X <prop>))),\nsubstitutes <term> into <prop> and creates a new deduction.\nCopied-n-edited from @xref possibly-propagate-isa-the-collection-of.")
    public static SubLObject possibly_propagate_isa_collection_subset_fn_the_set_of(final SubLObject assertion) {
        if (NIL != assertion_utilities.true_assertionP(assertion)) {
            final SubLObject isa_formula = fi.assertion_fi_formula(assertion, UNPROVIDED);
            SubLObject current;
            final SubLObject datum = current = isa_formula;
            SubLObject v_isa = NIL;
            SubLObject v_term = NIL;
            SubLObject subset_expr = NIL;
            destructuring_bind_must_consp(current, datum, $list183);
            v_isa = current.first();
            current = current.rest();
            destructuring_bind_must_consp(current, datum, $list183);
            v_term = current.first();
            current = current.rest();
            destructuring_bind_must_consp(current, datum, $list183);
            subset_expr = current.first();
            current = current.rest();
            if (NIL == current) {
                if (v_isa.eql($$isa) && (NIL != el_formula_with_operator_p(subset_expr, $$CollectionSubsetFn))) {
                    SubLObject current_$469;
                    final SubLObject datum_$468 = current_$469 = subset_expr;
                    SubLObject csfn = NIL;
                    SubLObject col = NIL;
                    SubLObject colexpr = NIL;
                    destructuring_bind_must_consp(current_$469, datum_$468, $list185);
                    csfn = current_$469.first();
                    current_$469 = current_$469.rest();
                    destructuring_bind_must_consp(current_$469, datum_$468, $list185);
                    col = current_$469.first();
                    current_$469 = current_$469.rest();
                    destructuring_bind_must_consp(current_$469, datum_$468, $list185);
                    colexpr = current_$469.first();
                    current_$469 = current_$469.rest();
                    if (NIL == current_$469) {
                        possibly_propagate_isa_the_set_of(colexpr, v_term, assertion);
                    } else {
                        cdestructuring_bind_error(datum_$468, $list185);
                    }
                }
            } else {
                cdestructuring_bind_error(datum, $list183);
            }
        }
        return NIL;
    }/**
     * If ASSERTION is of the form (#$isa <term> (#$CollectionSubsetFn <col> (#$TheSetOf ?X <prop>))),
     * substitutes <term> into <prop> and creates a new deduction.
     * Copied-n-edited from @xref possibly-propagate-isa-the-collection-of.
     */


    /**
     * If ASSERTION is of the form (#$isa <term> (#$TheCollectionOf ?X <prop>)),
     * substitutes <term> into <prop> and creates a new deduction.
     * Copied-n-edited from @xref cyc-add-element-of.
     */
    @LispMethod(comment = "If ASSERTION is of the form (#$isa <term> (#$TheCollectionOf ?X <prop>)),\r\nsubstitutes <term> into <prop> and creates a new deduction.\r\nCopied-n-edited from @xref cyc-add-element-of.\nIf ASSERTION is of the form (#$isa <term> (#$TheCollectionOf ?X <prop>)),\nsubstitutes <term> into <prop> and creates a new deduction.\nCopied-n-edited from @xref cyc-add-element-of.")
    public static final SubLObject possibly_propagate_isa_the_collection_of_alt(SubLObject assertion) {
        if (NIL != assertion_utilities.true_assertionP(assertion)) {
            {
                SubLObject isa_formula = fi.assertion_fi_formula(assertion, UNPROVIDED);
                SubLObject datum = isa_formula;
                SubLObject current = datum;
                SubLObject v_isa = NIL;
                SubLObject v_term = NIL;
                SubLObject colexpr = NIL;
                destructuring_bind_must_consp(current, datum, $list_alt180);
                v_isa = current.first();
                current = current.rest();
                destructuring_bind_must_consp(current, datum, $list_alt180);
                v_term = current.first();
                current = current.rest();
                destructuring_bind_must_consp(current, datum, $list_alt180);
                colexpr = current.first();
                current = current.rest();
                if (NIL == current) {
                    if ((v_isa == $$isa) && (NIL != el_formula_with_operator_p(colexpr, $$TheCollectionOf))) {
                        com.cyc.cycjava.cycl.isa.possibly_propagate_isa_the_set_of(colexpr, v_term, assertion);
                    }
                } else {
                    cdestructuring_bind_error(datum, $list_alt180);
                }
            }
        }
        return NIL;
    }

    /**
     * If ASSERTION is of the form (#$isa <term> (#$TheCollectionOf ?X <prop>)),
     * substitutes <term> into <prop> and creates a new deduction.
     * Copied-n-edited from @xref cyc-add-element-of.
     */
    @LispMethod(comment = "If ASSERTION is of the form (#$isa <term> (#$TheCollectionOf ?X <prop>)),\r\nsubstitutes <term> into <prop> and creates a new deduction.\r\nCopied-n-edited from @xref cyc-add-element-of.\nIf ASSERTION is of the form (#$isa <term> (#$TheCollectionOf ?X <prop>)),\nsubstitutes <term> into <prop> and creates a new deduction.\nCopied-n-edited from @xref cyc-add-element-of.")
    public static SubLObject possibly_propagate_isa_the_collection_of(final SubLObject assertion) {
        if (NIL != assertion_utilities.true_assertionP(assertion)) {
            final SubLObject isa_formula = fi.assertion_fi_formula(assertion, UNPROVIDED);
            SubLObject current;
            final SubLObject datum = current = isa_formula;
            SubLObject v_isa = NIL;
            SubLObject v_term = NIL;
            SubLObject colexpr = NIL;
            destructuring_bind_must_consp(current, datum, $list186);
            v_isa = current.first();
            current = current.rest();
            destructuring_bind_must_consp(current, datum, $list186);
            v_term = current.first();
            current = current.rest();
            destructuring_bind_must_consp(current, datum, $list186);
            colexpr = current.first();
            current = current.rest();
            if (NIL == current) {
                if (v_isa.eql($$isa) && (NIL != el_formula_with_operator_p(colexpr, $$TheCollectionOf))) {
                    possibly_propagate_isa_the_set_of(colexpr, v_term, assertion);
                }
            } else {
                cdestructuring_bind_error(datum, $list186);
            }
        }
        return NIL;
    }/**
     * If ASSERTION is of the form (#$isa <term> (#$TheCollectionOf ?X <prop>)),
     * substitutes <term> into <prop> and creates a new deduction.
     * Copied-n-edited from @xref cyc-add-element-of.
     */


    public static final SubLObject possibly_propagate_isa_the_set_of_alt(SubLObject colexpr, SubLObject v_term, SubLObject assertion) {
        {
            SubLObject datum = colexpr;
            SubLObject current = datum;
            SubLObject tso = NIL;
            SubLObject var = NIL;
            SubLObject prop = NIL;
            destructuring_bind_must_consp(current, datum, $list_alt182);
            tso = current.first();
            current = current.rest();
            destructuring_bind_must_consp(current, datum, $list_alt182);
            var = current.first();
            current = current.rest();
            destructuring_bind_must_consp(current, datum, $list_alt182);
            prop = current.first();
            current = current.rest();
            if (NIL == current) {
                {
                    SubLObject transformed_conclusion = cycl_utilities.expression_subst(v_term, var, prop, UNPROVIDED, UNPROVIDED);
                    SubLObject mt = assertion_mt(assertion);
                    fi.fi_add_argument_int(transformed_conclusion, mt, list(assertion), $FORWARD, T);
                }
            } else {
                cdestructuring_bind_error(datum, $list_alt182);
            }
        }
        return NIL;
    }

    public static SubLObject possibly_propagate_isa_the_set_of(final SubLObject colexpr, final SubLObject v_term, final SubLObject assertion) {
        SubLObject tso = NIL;
        SubLObject var = NIL;
        SubLObject prop = NIL;
        destructuring_bind_must_consp(colexpr, colexpr, $list188);
        tso = colexpr.first();
        SubLObject current = colexpr.rest();
        destructuring_bind_must_consp(current, colexpr, $list188);
        var = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, colexpr, $list188);
        prop = current.first();
        current = current.rest();
        if (NIL == current) {
            final SubLObject transformed_conclusion = cycl_utilities.expression_subst(v_term, var, prop, UNPROVIDED, UNPROVIDED);
            final SubLObject mt = assertions_high.assertion_mt(assertion);
            fi.fi_add_argument_int(transformed_conclusion, mt, list(assertion), $FORWARD, T);
        } else {
            cdestructuring_bind_error(colexpr, $list188);
        }
        return NIL;
    }

    /**
     * Modifier. Removes sbhl links with @see sbhl-after-removing.
     */
    @LispMethod(comment = "Modifier. Removes sbhl links with @see sbhl-after-removing.")
    public static final SubLObject instanceof_after_removing_alt(SubLObject source, SubLObject assertion) {
        return com.cyc.cycjava.cycl.isa.isa_after_removing(source, assertion);
    }

    /**
     * Modifier. Removes sbhl links with @see sbhl-after-removing.
     */
    @LispMethod(comment = "Modifier. Removes sbhl links with @see sbhl-after-removing.")
    public static SubLObject instanceof_after_removing(SubLObject source, final SubLObject assertion) {
        return isa_after_removing(source, assertion);
    }/**
     * Modifier. Removes sbhl links with @see sbhl-after-removing.
     */


    /**
     * Modifier. Removes sbhl links with @see sbhl-after-removing.
     */
    @LispMethod(comment = "Modifier. Removes sbhl links with @see sbhl-after-removing.")
    public static final SubLObject isa_after_removing_alt(SubLObject source, SubLObject assertion) {
        sbhl_link_methods.sbhl_after_removing(source, assertion, sbhl_module_vars.get_sbhl_module($$isa));
        sbhl_cache.sbhl_cache_removal_maintainence(assertion);
        sbhl_link_methods.possibly_remove_non_fort_isa(assertion);
        return NIL;
    }

    /**
     * Modifier. Removes sbhl links with @see sbhl-after-removing.
     */
    @LispMethod(comment = "Modifier. Removes sbhl links with @see sbhl-after-removing.")
    public static SubLObject isa_after_removing(SubLObject source, final SubLObject assertion) {
        sbhl_link_methods.sbhl_after_removing(source, assertion, sbhl_module_vars.get_sbhl_module($$isa));
        sbhl_cache.sbhl_cache_removal_maintainence(assertion);
        sbhl_link_methods.possibly_remove_non_fort_isa(assertion);
        return NIL;
    }/**
     * Modifier. Removes sbhl links with @see sbhl-after-removing.
     */


    public static final SubLObject clear_isa_graph_alt() {
        sbhl_link_methods.clear_sbhl_module_graph(sbhl_module_vars.get_sbhl_module($$isa));
        return NIL;
    }

    public static SubLObject clear_isa_graph() {
        sbhl_link_methods.clear_sbhl_module_graph(sbhl_module_vars.get_sbhl_module($$isa));
        return NIL;
    }

    public static final SubLObject clear_node_isa_links_alt(SubLObject node) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_vars.get_sbhl_module($$isa), thread);
                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_vars.get_sbhl_module($$isa)), thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_vars.get_sbhl_module($$isa)), thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                    sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$isa), thread);
                    {
                        SubLObject cdolist_list_var = sbhl_link_methods.sbhl_link_mts(sbhl_module_vars.get_sbhl_module($$isa), node);
                        SubLObject mt = NIL;
                        for (mt = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , mt = cdolist_list_var.first()) {
                            sbhl_link_methods.clear_sbhl_links_within_mt(node, mt, UNPROVIDED);
                        }
                    }
                } finally {
                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                }
            }
            return NIL;
        }
    }

    public static SubLObject clear_node_isa_links(final SubLObject node) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_vars.get_sbhl_module($$isa), thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_vars.get_sbhl_module($$isa)), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_vars.get_sbhl_module($$isa)), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$isa), thread);
            SubLObject cdolist_list_var = sbhl_link_methods.sbhl_link_mts(sbhl_module_vars.get_sbhl_module($$isa), node);
            SubLObject mt = NIL;
            mt = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                sbhl_link_methods.clear_sbhl_links_within_mt(node, mt, UNPROVIDED);
                cdolist_list_var = cdolist_list_var.rest();
                mt = cdolist_list_var.first();
            } 
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    public static final SubLObject reset_isa_links_alt(SubLObject node) {
        {
            SubLObject mts = com.cyc.cycjava.cycl.isa.isas_mts(node);
            com.cyc.cycjava.cycl.isa.clear_node_isa_links(node);
            {
                SubLObject cdolist_list_var = mts;
                SubLObject mt = NIL;
                for (mt = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , mt = cdolist_list_var.first()) {
                    com.cyc.cycjava.cycl.isa.reset_isa_links_in_mt(node, mt);
                }
            }
        }
        return NIL;
    }

    public static SubLObject reset_isa_links(final SubLObject node) {
        final SubLObject mts = isas_mts(node);
        clear_node_isa_links(node);
        SubLObject cdolist_list_var = mts;
        SubLObject mt = NIL;
        mt = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            reset_isa_links_in_mt(node, mt);
            cdolist_list_var = cdolist_list_var.rest();
            mt = cdolist_list_var.first();
        } 
        return NIL;
    }

    public static final SubLObject reset_isa_links_in_mt_alt(SubLObject node, SubLObject mt) {
        sbhl_link_methods.sbhl_recompute_links(node, mt, sbhl_module_vars.get_sbhl_module($$isa));
        return NIL;
    }

    public static SubLObject reset_isa_links_in_mt(final SubLObject node, final SubLObject mt) {
        sbhl_link_methods.sbhl_recompute_links(node, mt, sbhl_module_vars.get_sbhl_module($$isa));
        return NIL;
    }

    public static final SubLObject reset_isa_graph_alt(SubLObject clearP) {
        if (clearP == UNPROVIDED) {
            clearP = T;
        }
        if (NIL != clearP) {
            com.cyc.cycjava.cycl.isa.clear_isa_graph();
        }
        sbhl_link_methods.sbhl_recompute_graph_links(sbhl_module_vars.get_sbhl_module($$isa));
        return NIL;
    }

    public static SubLObject reset_isa_graph(SubLObject clearP) {
        if (clearP == UNPROVIDED) {
            clearP = T;
        }
        if (NIL != clearP) {
            clear_isa_graph();
        }
        sbhl_link_methods.sbhl_recompute_graph_links(sbhl_module_vars.get_sbhl_module($$isa));
        return NIL;
    }

    /**
     * collections that include (Quote <term>) (inexpensive)
     */
    @LispMethod(comment = "collections that include (Quote <term>) (inexpensive)")
    public static final SubLObject quoted_isa_alt(SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            SubLObject result = sbhl_link_methods.sbhl_forward_true_link_nodes(sbhl_module_vars.get_sbhl_module($$quotedIsa), v_term, mt, tv, UNPROVIDED);
            if (NIL != sbhl_link_methods.quoted_isa_stored_naut_arg2_p(v_term)) {
                result = list_utilities.fast_delete_duplicates(nconc(sbhl_link_methods.quoted_isas_from_naut_arg2(v_term, mt, tv), result), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            return result;
        }
    }

    /**
     * collections that include (Quote <term>) (inexpensive)
     */
    @LispMethod(comment = "collections that include (Quote <term>) (inexpensive)")
    public static SubLObject quoted_isa(final SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLObject result = sbhl_link_methods.sbhl_forward_true_link_nodes(sbhl_module_vars.get_sbhl_module($$quotedIsa), v_term, mt, tv, UNPROVIDED);
        if (NIL != sbhl_link_methods.quoted_isa_stored_naut_arg2_p(v_term)) {
            result = list_utilities.fast_delete_duplicates(nconc(sbhl_link_methods.quoted_isas_from_naut_arg2(v_term, mt, tv), result), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return result;
    }/**
     * collections that include (Quote <term>) (inexpensive)
     */


    public static final SubLObject nat_quoted_isa_alt(SubLObject naut, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            SubLObject nart = narts_high.find_nart(naut);
            if (NIL != nart_handles.nart_p(nart)) {
                return com.cyc.cycjava.cycl.isa.quoted_isa(nart, mt, tv);
            } else {
                {
                    SubLObject nat_functor = cycl_utilities.nat_functor(naut);
                    return nconc(kb_accessors.evaluation_result_quoted_isa(nat_functor, mt), kb_accessors.result_quoted_isa(nat_functor, mt));
                }
            }
        }
    }

    public static SubLObject nat_quoted_isa(final SubLObject naut, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLObject nart = narts_high.find_nart(naut);
        if (NIL != nart_handles.nart_p(nart)) {
            return quoted_isa(nart, mt, tv);
        }
        final SubLObject nat_functor = cycl_utilities.nat_functor(naut);
        return nconc(kb_accessors.evaluation_result_quoted_isa(nat_functor, mt), kb_accessors.result_quoted_isa(nat_functor, mt));
    }

    /**
     * Returns the asserted false quoteIsas of TERM
     */
    @LispMethod(comment = "Returns the asserted false quoteIsas of TERM")
    public static final SubLObject not_quoted_isa_alt(SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_link_methods.sbhl_forward_false_link_nodes(sbhl_module_vars.get_sbhl_module($$quotedIsa), v_term, mt, tv, UNPROVIDED);
    }

    /**
     * Returns the asserted false quoteIsas of TERM
     */
    @LispMethod(comment = "Returns the asserted false quoteIsas of TERM")
    public static SubLObject not_quoted_isa(final SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_link_methods.sbhl_forward_false_link_nodes(sbhl_module_vars.get_sbhl_module($$quotedIsa), v_term, mt, tv, UNPROVIDED);
    }/**
     * Returns the asserted false quoteIsas of TERM
     */


    /**
     * Returns whether TERM is a quoted instance of COLLECTION via the SBHL, i.e. quotedIsa and genls assertions.
     *
     * @unknown This function does _not_ use defns to determine membership in COLLECTION.
     * @see has-type?
     * @see quiet-has-type?
     */
    @LispMethod(comment = "Returns whether TERM is a quoted instance of COLLECTION via the SBHL, i.e. quotedIsa and genls assertions.\r\n\r\n@unknown This function does _not_ use defns to determine membership in COLLECTION.\r\n@see has-type?\r\n@see quiet-has-type?")
    public static final SubLObject quoted_isaP_alt(SubLObject v_term, SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(collection, EL_FORT_P);
        return makeBoolean((NIL != sbhl_search_methods.sbhl_non_justifying_predicate_relation_p(sbhl_module_vars.get_sbhl_module($$quotedIsa), v_term, collection, mt, tv)) || (NIL != (NIL != sbhl_link_methods.quoted_isa_stored_naut_arg2_p(v_term) ? ((SubLObject) (genls.any_specP(collection, sbhl_link_methods.quoted_isas_from_naut_arg2(v_term, mt, tv), mt, tv))) : NIL)));
    }

    /**
     * Returns whether TERM is a quoted instance of COLLECTION via the SBHL, i.e. quotedIsa and genls assertions.
     *
     * @unknown This function does _not_ use defns to determine membership in COLLECTION.
     * @see has-type?
     * @see quiet-has-type?
     */
    @LispMethod(comment = "Returns whether TERM is a quoted instance of COLLECTION via the SBHL, i.e. quotedIsa and genls assertions.\r\n\r\n@unknown This function does _not_ use defns to determine membership in COLLECTION.\r\n@see has-type?\r\n@see quiet-has-type?")
    public static SubLObject quoted_isaP(final SubLObject v_term, final SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(collection, EL_FORT_P);
        return makeBoolean((NIL != sbhl_search_methods.sbhl_non_justifying_predicate_relation_p(sbhl_module_vars.get_sbhl_module($$quotedIsa), v_term, collection, mt, tv)) || (NIL != (NIL != sbhl_link_methods.quoted_isa_stored_naut_arg2_p(v_term) ? genls.any_specP(collection, sbhl_link_methods.quoted_isas_from_naut_arg2(v_term, mt, tv), mt, tv) : NIL)));
    }/**
     * Returns whether TERM is a quoted instance of COLLECTION via the SBHL, i.e. quotedIsa and genls assertions.
     *
     * @unknown This function does _not_ use defns to determine membership in COLLECTION.
     * @see has-type?
     * @see quiet-has-type?
     */


    /**
     * is <term> an element of <collection> in any mt
     */
    @LispMethod(comment = "is <term> an element of <collection> in any mt")
    public static final SubLObject quoted_isa_in_any_mtP_alt(SubLObject v_term, SubLObject collection) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject qisaP = NIL;
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                        mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                        qisaP = com.cyc.cycjava.cycl.isa.quoted_isaP(v_term, collection, UNPROVIDED, UNPROVIDED);
                    } finally {
                        mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                    }
                }
                return qisaP;
            }
        }
    }

    /**
     * is <term> an element of <collection> in any mt
     */
    @LispMethod(comment = "is <term> an element of <collection> in any mt")
    public static SubLObject quoted_isa_in_any_mtP(final SubLObject v_term, final SubLObject collection) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject qisaP = NIL;
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
            mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
            qisaP = quoted_isaP(v_term, collection, UNPROVIDED, UNPROVIDED);
        } finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return qisaP;
    }/**
     * is <term> an element of <collection> in any mt
     */


    /**
     * Returns whether TERM is an instance of any collection in COLLECTIONS
     */
    @LispMethod(comment = "Returns whether TERM is an instance of any collection in COLLECTIONS")
    public static final SubLObject any_quoted_isaP_alt(SubLObject v_term, SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(v_term, HL_TERM_P);
        SubLTrampolineFile.checkType(collections, LISTP);
        if (NIL == collections) {
            return NIL;
        } else {
            if (NIL != list_utilities.singletonP(collections)) {
                return com.cyc.cycjava.cycl.isa.quoted_isaP(v_term, collections.first(), mt, tv);
            } else {
                return makeBoolean((NIL != sbhl_search_methods.sbhl_predicate_relation_with_any_p(sbhl_module_vars.get_sbhl_module($$quotedIsa), v_term, collections, mt, tv)) || (NIL != (NIL != sbhl_link_methods.quoted_isa_stored_naut_arg2_p(v_term) ? ((SubLObject) (genls.any_genl_anyP(sbhl_link_methods.quoted_isas_from_naut_arg2(v_term, mt, tv), collections, mt, tv))) : NIL)));
            }
        }
    }

    /**
     * Returns whether TERM is an instance of any collection in COLLECTIONS
     */
    @LispMethod(comment = "Returns whether TERM is an instance of any collection in COLLECTIONS")
    public static SubLObject any_quoted_isaP(final SubLObject v_term, final SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(v_term, HL_TERM_P);
        SubLTrampolineFile.enforceType(collections, LISTP);
        if (NIL == collections) {
            return NIL;
        }
        if (NIL != list_utilities.singletonP(collections)) {
            return quoted_isaP(v_term, collections.first(), mt, tv);
        }
        return makeBoolean((NIL != sbhl_search_methods.sbhl_predicate_relation_with_any_p(sbhl_module_vars.get_sbhl_module($$quotedIsa), v_term, collections, mt, tv)) || (NIL != (NIL != sbhl_link_methods.quoted_isa_stored_naut_arg2_p(v_term) ? genls.any_genl_anyP(sbhl_link_methods.quoted_isas_from_naut_arg2(v_term, mt, tv), collections, mt, tv) : NIL)));
    }/**
     * Returns whether TERM is an instance of any collection in COLLECTIONS
     */


    /**
     * Returns whether TERM is an instance of any collection in COLLECTIONS
     */
    @LispMethod(comment = "Returns whether TERM is an instance of any collection in COLLECTIONS")
    public static final SubLObject quoted_isa_anyP_alt(SubLObject v_term, SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(v_term, HL_TERM_P);
        SubLTrampolineFile.checkType(collections, LISTP);
        return com.cyc.cycjava.cycl.isa.any_quoted_isaP(v_term, collections, mt, tv);
    }

    /**
     * Returns whether TERM is an instance of any collection in COLLECTIONS
     */
    @LispMethod(comment = "Returns whether TERM is an instance of any collection in COLLECTIONS")
    public static SubLObject quoted_isa_anyP(final SubLObject v_term, final SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(v_term, HL_TERM_P);
        SubLTrampolineFile.enforceType(collections, LISTP);
        return any_quoted_isaP(v_term, collections, mt, tv);
    }/**
     * Returns whether TERM is an instance of any collection in COLLECTIONS
     */


    /**
     * Returns whether TERM is a quoted instance of all collections in COLLECTIONS
     */
    @LispMethod(comment = "Returns whether TERM is a quoted instance of all collections in COLLECTIONS")
    public static final SubLObject all_quoted_isaP_alt(SubLObject v_term, SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(v_term, HL_TERM_P);
        SubLTrampolineFile.checkType(collections, LISTP);
        if (NIL == collections) {
            return T;
        } else {
            if (NIL != list_utilities.singletonP(collections)) {
                return com.cyc.cycjava.cycl.isa.quoted_isaP(v_term, collections.first(), mt, tv);
            } else {
                return makeBoolean((NIL != sbhl_search_methods.sbhl_predicate_relation_with_all_p(sbhl_module_vars.get_sbhl_module($$quotedIsa), v_term, collections, mt, tv)) || (NIL != (NIL != sbhl_link_methods.quoted_isa_stored_naut_arg2_p(v_term) ? ((SubLObject) (genls.any_genl_allP(sbhl_link_methods.quoted_isas_from_naut_arg2(v_term, mt, tv), collections, mt, tv))) : NIL)));
            }
        }
    }

    /**
     * Returns whether TERM is a quoted instance of all collections in COLLECTIONS
     */
    @LispMethod(comment = "Returns whether TERM is a quoted instance of all collections in COLLECTIONS")
    public static SubLObject all_quoted_isaP(final SubLObject v_term, final SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(v_term, HL_TERM_P);
        SubLTrampolineFile.enforceType(collections, LISTP);
        if (NIL == collections) {
            return T;
        }
        if (NIL != list_utilities.singletonP(collections)) {
            return quoted_isaP(v_term, collections.first(), mt, tv);
        }
        return makeBoolean((NIL != sbhl_search_methods.sbhl_predicate_relation_with_all_p(sbhl_module_vars.get_sbhl_module($$quotedIsa), v_term, collections, mt, tv)) || (NIL != (NIL != sbhl_link_methods.quoted_isa_stored_naut_arg2_p(v_term) ? genls.any_genl_allP(sbhl_link_methods.quoted_isas_from_naut_arg2(v_term, mt, tv), collections, mt, tv) : NIL)));
    }/**
     * Returns whether TERM is a quoted instance of all collections in COLLECTIONS
     */


    /**
     *
     *
     * @return booleanp; whether TERM is known to not be an instance of COLLECTION
     */
    @LispMethod(comment = "@return booleanp; whether TERM is known to not be an instance of COLLECTION")
    public static final SubLObject not_quoted_isaP_alt(SubLObject v_term, SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(v_term, HL_TERM_P);
        SubLTrampolineFile.checkType(collection, EL_FORT_P);
        return makeBoolean((NIL != com.cyc.cycjava.cycl.isa.not_quoted_isa_by_extent_knownP(v_term, collection, mt, tv)) || (NIL != com.cyc.cycjava.cycl.isa.not_quoted_isa_by_sbhlP(v_term, collection, mt, tv)));
    }

    /**
     *
     *
     * @return booleanp; whether TERM is known to not be an instance of COLLECTION
     */
    @LispMethod(comment = "@return booleanp; whether TERM is known to not be an instance of COLLECTION")
    public static SubLObject not_quoted_isaP(final SubLObject v_term, final SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(v_term, HL_TERM_P);
        SubLTrampolineFile.enforceType(collection, EL_FORT_P);
        return makeBoolean((NIL != not_quoted_isa_by_extent_knownP(v_term, collection, mt, tv)) || (NIL != not_quoted_isa_by_sbhlP(v_term, collection, mt, tv)));
    }

    public static final SubLObject not_quoted_isa_by_sbhlP_alt(SubLObject v_term, SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_search_implied_relations.sbhl_implied_false_predicate_relation_p(sbhl_module_vars.get_sbhl_module($$quotedIsa), v_term, collection, mt, tv);
    }

    public static SubLObject not_quoted_isa_by_sbhlP(final SubLObject v_term, final SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        return sbhl_search_implied_relations.sbhl_implied_false_predicate_relation_p(sbhl_module_vars.get_sbhl_module($$quotedIsa), v_term, collection, mt, tv);
    }

    /**
     *
     *
     * @return booleanp; whether TERM is known to not be an instance of COLLECTION b/c the complete extent of COLLECTION is known and (isa? TERM COLLECTION) -> nil.
     */
    @LispMethod(comment = "@return booleanp; whether TERM is known to not be an instance of COLLECTION b/c the complete extent of COLLECTION is known and (isa? TERM COLLECTION) -> nil.")
    public static final SubLObject not_quoted_isa_by_extent_knownP_alt(SubLObject v_term, SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (NIL != kb_accessors.completely_enumerable_collectionP(collection, mt)) {
            return makeBoolean(NIL == com.cyc.cycjava.cycl.isa.quoted_isaP(v_term, collection, mt, tv));
        }
        return NIL;
    }

    /**
     *
     *
     * @return booleanp; whether TERM is known to not be an instance of COLLECTION b/c the complete extent of COLLECTION is known and (isa? TERM COLLECTION) -> nil.
     */
    @LispMethod(comment = "@return booleanp; whether TERM is known to not be an instance of COLLECTION b/c the complete extent of COLLECTION is known and (isa? TERM COLLECTION) -> nil.")
    public static SubLObject not_quoted_isa_by_extent_knownP(final SubLObject v_term, final SubLObject collection, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (NIL != kb_accessors.completely_enumerable_collectionP(collection, mt)) {
            return makeBoolean(NIL == quoted_isaP(v_term, collection, mt, tv));
        }
        return NIL;
    }

    /**
     * Returns the asserted instances of COL
     */
    @LispMethod(comment = "Returns the asserted instances of COL")
    public static final SubLObject quoted_instances_alt(SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = $$True_JustificationTruth;
        }
        SubLTrampolineFile.checkType(col, EL_FORT_P);
        return sbhl_link_methods.sbhl_backward_true_link_nodes(sbhl_module_vars.get_sbhl_module($$quotedIsa), col, mt, tv, UNPROVIDED);
    }

    /**
     * Returns the asserted instances of COL
     */
    @LispMethod(comment = "Returns the asserted instances of COL")
    public static SubLObject quoted_instances(final SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = $$True_JustificationTruth;
        }
        SubLTrampolineFile.enforceType(col, EL_FORT_P);
        return sbhl_link_methods.sbhl_backward_true_link_nodes(sbhl_module_vars.get_sbhl_module($$quotedIsa), col, mt, tv, UNPROVIDED);
    }/**
     * Returns the asserted instances of COL
     */


    /**
     * Returns set of all quoted instances of each collection in COLS (expensive)
     */
    @LispMethod(comment = "Returns set of all quoted instances of each collection in COLS (expensive)")
    public static final SubLObject union_all_quoted_instances_alt(SubLObject cols, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(cols, LISTP);
        if (NIL == cols) {
            return NIL;
        } else {
            if (NIL != list_utilities.singletonP(cols)) {
                return com.cyc.cycjava.cycl.isa.all_quoted_instances(cols.first(), mt, tv);
            } else {
                return sbhl_search_methods.sbhl_union_all_backward_true_nodes(sbhl_module_vars.get_sbhl_module($$quotedIsa), cols, mt, tv);
            }
        }
    }

    /**
     * Returns set of all quoted instances of each collection in COLS (expensive)
     */
    @LispMethod(comment = "Returns set of all quoted instances of each collection in COLS (expensive)")
    public static SubLObject union_all_quoted_instances(final SubLObject cols, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(cols, LISTP);
        if (NIL == cols) {
            return NIL;
        }
        if (NIL != list_utilities.singletonP(cols)) {
            return all_quoted_instances(cols.first(), mt, tv);
        }
        return sbhl_search_methods.sbhl_union_all_backward_true_nodes(sbhl_module_vars.get_sbhl_module($$quotedIsa), cols, mt, tv);
    }/**
     * Returns set of all quoted instances of each collection in COLS (expensive)
     */


    /**
     * Apply FUNCTION to every all-quoted-isa of TERM
     * (FUNCTION must not affect the current sbhl search state)
     */
    @LispMethod(comment = "Apply FUNCTION to every all-quoted-isa of TERM\r\n(FUNCTION must not affect the current sbhl search state)\nApply FUNCTION to every all-quoted-isa of TERM\n(FUNCTION must not affect the current sbhl search state)")
    public static final SubLObject map_all_quoted_isa_alt(SubLObject fn, SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(fn, FUNCTION_SPEC_P);
        SubLTrampolineFile.checkType(v_term, HL_TERM_P);
        sbhl_search_methods.sbhl_map_all_forward_true_nodes(sbhl_module_vars.get_sbhl_module($$quotedIsa), v_term, fn, mt, tv);
        return NIL;
    }

    /**
     * Apply FUNCTION to every all-quoted-isa of TERM
     * (FUNCTION must not affect the current sbhl search state)
     */
    @LispMethod(comment = "Apply FUNCTION to every all-quoted-isa of TERM\r\n(FUNCTION must not affect the current sbhl search state)\nApply FUNCTION to every all-quoted-isa of TERM\n(FUNCTION must not affect the current sbhl search state)")
    public static SubLObject map_all_quoted_isa(final SubLObject fn, final SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(fn, FUNCTION_SPEC_P);
        SubLTrampolineFile.enforceType(v_term, HL_TERM_P);
        sbhl_search_methods.sbhl_map_all_forward_true_nodes(sbhl_module_vars.get_sbhl_module($$quotedIsa), v_term, fn, mt, tv);
        return NIL;
    }/**
     * Apply FUNCTION to every all-quoted-isa of TERM
     * (FUNCTION must not affect the current sbhl search state)
     */


    /**
     * Apply FUNCTION to each unique quoted instance of all specs of COLLECTION.
     */
    @LispMethod(comment = "Apply FUNCTION to each unique quoted instance of all specs of COLLECTION.")
    public static final SubLObject map_all_quoted_instances_alt(SubLObject fn, SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        sbhl_search_methods.sbhl_map_all_backward_true_nodes(sbhl_module_vars.get_sbhl_module($$quotedIsa), col, fn, mt, tv);
        return NIL;
    }

    /**
     * Apply FUNCTION to each unique quoted instance of all specs of COLLECTION.
     */
    @LispMethod(comment = "Apply FUNCTION to each unique quoted instance of all specs of COLLECTION.")
    public static SubLObject map_all_quoted_instances(final SubLObject fn, final SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        sbhl_search_methods.sbhl_map_all_backward_true_nodes(sbhl_module_vars.get_sbhl_module($$quotedIsa), col, fn, mt, tv);
        return NIL;
    }/**
     * Apply FUNCTION to each unique quoted instance of all specs of COLLECTION.
     */


    /**
     * apply FUNCTION to every (least general) #$quotedIsa of TERM
     */
    @LispMethod(comment = "apply FUNCTION to every (least general) #$quotedIsa of TERM")
    public static final SubLObject map_quoted_isa_alt(SubLObject function, SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject module = sbhl_module_vars.get_sbhl_module($$quotedIsa);
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_517 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_518 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_519 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_520 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_521 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt36$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_522 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_523 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_524 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_525 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_526 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_527 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_528 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_529 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_530 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_531 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            {
                                                                                                SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(module);
                                                                                                SubLObject rest = NIL;
                                                                                                for (rest = accessible_modules; !((NIL != sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) || (NIL == rest)); rest = rest.rest()) {
                                                                                                    {
                                                                                                        SubLObject module_var = rest.first();
                                                                                                        {
                                                                                                            SubLObject _prev_bind_0_532 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                                            SubLObject _prev_bind_1_533 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                            try {
                                                                                                                sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)))) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                                                                                {
                                                                                                                    SubLObject node = function_terms.naut_to_nart(v_term);
                                                                                                                    if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                                        {
                                                                                                                            SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                            if (NIL != d_link) {
                                                                                                                                {
                                                                                                                                    SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                                    if (NIL != mt_links) {
                                                                                                                                        {
                                                                                                                                            SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
                                                                                                                                            while (!((NIL != sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state)))) {
                                                                                                                                                thread.resetMultipleValues();
                                                                                                                                                {
                                                                                                                                                    SubLObject mt_534 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                                                                    SubLObject tv_links = thread.secondMultipleValue();
                                                                                                                                                    thread.resetMultipleValues();
                                                                                                                                                    if (NIL != mt_relevance_macros.relevant_mtP(mt_534)) {
                                                                                                                                                        {
                                                                                                                                                            SubLObject _prev_bind_0_535 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                                                            try {
                                                                                                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt_534, thread);
                                                                                                                                                                {
                                                                                                                                                                    SubLObject iteration_state_536 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
                                                                                                                                                                    while (!((NIL != sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state_536)))) {
                                                                                                                                                                        thread.resetMultipleValues();
                                                                                                                                                                        {
                                                                                                                                                                            SubLObject tv_537 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_536);
                                                                                                                                                                            SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                                                                            thread.resetMultipleValues();
                                                                                                                                                                            if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_537)) {
                                                                                                                                                                                {
                                                                                                                                                                                    SubLObject _prev_bind_0_538 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                                                                                    try {
                                                                                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.bind(tv_537, thread);
                                                                                                                                                                                        {
                                                                                                                                                                                            SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                                                            SubLObject rest_539 = NIL;
                                                                                                                                                                                            for (rest_539 = new_list; !((NIL != sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) || (NIL == rest_539)); rest_539 = rest_539.rest()) {
                                                                                                                                                                                                {
                                                                                                                                                                                                    SubLObject quoted_isa = rest_539.first();
                                                                                                                                                                                                    funcall(function, quoted_isa);
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    } finally {
                                                                                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_538, thread);
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            iteration_state_536 = dictionary_contents.do_dictionary_contents_next(iteration_state_536);
                                                                                                                                                                        }
                                                                                                                                                                    } 
                                                                                                                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state_536);
                                                                                                                                                                }
                                                                                                                                                            } finally {
                                                                                                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_535, thread);
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                                                                                                                                                }
                                                                                                                                            } 
                                                                                                                                            dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            } else {
                                                                                                                                sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt38$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                                                                            {
                                                                                                                                SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                                                                                SubLObject rest_540 = NIL;
                                                                                                                                for (rest_540 = new_list; !((NIL != sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) || (NIL == rest_540)); rest_540 = rest_540.rest()) {
                                                                                                                                    {
                                                                                                                                        SubLObject generating_fn = rest_540.first();
                                                                                                                                        {
                                                                                                                                            SubLObject _prev_bind_0_541 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                                                            try {
                                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                                                                {
                                                                                                                                                    SubLObject link_nodes = funcall(generating_fn, node);
                                                                                                                                                    SubLObject new_list_542 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
                                                                                                                                                    SubLObject rest_543 = NIL;
                                                                                                                                                    for (rest_543 = new_list_542; !((NIL != sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) || (NIL == rest_543)); rest_543 = rest_543.rest()) {
                                                                                                                                                        {
                                                                                                                                                            SubLObject quoted_isa = rest_543.first();
                                                                                                                                                            funcall(function, quoted_isa);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            } finally {
                                                                                                                                                sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_541, thread);
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            } finally {
                                                                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_533, thread);
                                                                                                                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_532, thread);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_531, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_530, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_529, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_528, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_527, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_526, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_525, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_524, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_523, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_522, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_521, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_520, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_519, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_518, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_517, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
            }
            if (NIL != sbhl_link_methods.quoted_isa_stored_naut_arg2_p(v_term)) {
                {
                    SubLObject module = sbhl_module_vars.get_sbhl_module($$genls);
                    SubLObject mt_var = mt;
                    {
                        SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
                        SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                        SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                        try {
                            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                            {
                                SubLObject tv_var = tv;
                                {
                                    SubLObject _prev_bind_0_544 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                    SubLObject _prev_bind_1_545 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                        sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                        if (NIL != tv_var) {
                                            if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                    {
                                                        SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                        if (pcase_var.eql($ERROR)) {
                                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                        } else {
                                                            if (pcase_var.eql($CERROR)) {
                                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                            } else {
                                                                if (pcase_var.eql($WARN)) {
                                                                    Errors.warn($str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                } else {
                                                                    Errors.warn($str_alt36$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                    Errors.cerror($$$continue_anyway, $str_alt31$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        {
                                            SubLObject _prev_bind_0_546 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                            try {
                                                sbhl_module_vars.$sbhl_module$.bind(module, thread);
                                                {
                                                    SubLObject cdolist_list_var = gethash(v_term, sbhl_link_methods.$quoted_isa_arg2_naut_table$.getGlobalValue(), UNPROVIDED);
                                                    SubLObject quoted_isa_tuple = NIL;
                                                    for (quoted_isa_tuple = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , quoted_isa_tuple = cdolist_list_var.first()) {
                                                        {
                                                            SubLObject datum = quoted_isa_tuple;
                                                            SubLObject current = datum;
                                                            SubLObject naut = NIL;
                                                            SubLObject quoted_isa_mt = NIL;
                                                            SubLObject quoted_isa_tv = NIL;
                                                            destructuring_bind_must_consp(current, datum, $list_alt199);
                                                            naut = current.first();
                                                            current = current.rest();
                                                            destructuring_bind_must_consp(current, datum, $list_alt199);
                                                            quoted_isa_mt = current.first();
                                                            current = current.rest();
                                                            destructuring_bind_must_consp(current, datum, $list_alt199);
                                                            quoted_isa_tv = current.first();
                                                            current = current.rest();
                                                            if (NIL == current) {
                                                                if ((NIL != mt_relevance_macros.relevant_mtP(quoted_isa_mt)) && (NIL != sbhl_search_vars.relevant_sbhl_tvP(quoted_isa_tv))) {
                                                                    {
                                                                        SubLObject quoted_isa = naut;
                                                                        funcall(function, quoted_isa);
                                                                    }
                                                                    {
                                                                        SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_forward_directed_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), module)))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_forward_directed_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), module);
                                                                        SubLObject cdolist_list_var_547 = new_list;
                                                                        SubLObject generating_fn = NIL;
                                                                        for (generating_fn = cdolist_list_var_547.first(); NIL != cdolist_list_var_547; cdolist_list_var_547 = cdolist_list_var_547.rest() , generating_fn = cdolist_list_var_547.first()) {
                                                                            {
                                                                                SubLObject _prev_bind_0_548 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                    {
                                                                                        SubLObject quoted_isa = funcall(generating_fn, naut);
                                                                                        funcall(function, quoted_isa);
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_548, thread);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                cdestructuring_bind_error(datum, $list_alt199);
                                                            }
                                                        }
                                                    }
                                                }
                                            } finally {
                                                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_546, thread);
                                            }
                                        }
                                    } finally {
                                        sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_545, thread);
                                        sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_544, thread);
                                    }
                                }
                            }
                        } finally {
                            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1, thread);
                            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
                        }
                    }
                }
            }
            return NIL;
        }
    }

    /**
     * apply FUNCTION to every (least general) #$quotedIsa of TERM
     */
    @LispMethod(comment = "apply FUNCTION to every (least general) #$quotedIsa of TERM")
    public static SubLObject map_quoted_isa(final SubLObject function, final SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject module = sbhl_module_vars.get_sbhl_module($$quotedIsa);
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$470 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$471 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$472 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$471 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$472 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str37$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str32$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$472 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$473 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$473 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$473 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$474 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$475 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$474 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$474 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$483 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$484 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(module);
                                        SubLObject rest;
                                        SubLObject module_var;
                                        SubLObject _prev_bind_0_$476;
                                        SubLObject _prev_bind_1_$475;
                                        SubLObject node;
                                        SubLObject d_link;
                                        SubLObject mt_links;
                                        SubLObject iteration_state;
                                        SubLObject mt_$487;
                                        SubLObject tv_links;
                                        SubLObject _prev_bind_0_$477;
                                        SubLObject iteration_state_$489;
                                        SubLObject tv_$490;
                                        SubLObject link_nodes;
                                        SubLObject _prev_bind_0_$478;
                                        SubLObject sol;
                                        SubLObject set_contents_var;
                                        SubLObject basis_object;
                                        SubLObject state;
                                        SubLObject quoted_isa;
                                        SubLObject csome_list_var;
                                        SubLObject quoted_isa2;
                                        SubLObject new_list;
                                        SubLObject rest_$492;
                                        SubLObject generating_fn;
                                        SubLObject _prev_bind_0_$479;
                                        SubLObject sol2;
                                        SubLObject link_nodes2;
                                        SubLObject set_contents_var2;
                                        SubLObject basis_object2;
                                        SubLObject state2;
                                        SubLObject quoted_isa3;
                                        SubLObject csome_list_var2;
                                        SubLObject quoted_isa4;
                                        for (rest = NIL, rest = accessible_modules; (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL != rest); rest = rest.rest()) {
                                            module_var = rest.first();
                                            _prev_bind_0_$476 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                            _prev_bind_1_$475 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                            try {
                                                sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                node = function_terms.naut_to_nart(v_term);
                                                if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                    d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                    if (NIL != d_link) {
                                                        mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                        if (NIL != mt_links) {
                                                            for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                                                thread.resetMultipleValues();
                                                                mt_$487 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                tv_links = thread.secondMultipleValue();
                                                                thread.resetMultipleValues();
                                                                if (NIL != mt_relevance_macros.relevant_mtP(mt_$487)) {
                                                                    _prev_bind_0_$477 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_link_vars.$sbhl_link_mt$.bind(mt_$487, thread);
                                                                        for (iteration_state_$489 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$489)); iteration_state_$489 = dictionary_contents.do_dictionary_contents_next(iteration_state_$489)) {
                                                                            thread.resetMultipleValues();
                                                                            tv_$490 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$489);
                                                                            link_nodes = thread.secondMultipleValue();
                                                                            thread.resetMultipleValues();
                                                                            if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv_$490)) {
                                                                                _prev_bind_0_$478 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv_$490, thread);
                                                                                    sol = link_nodes;
                                                                                    if (NIL != set.set_p(sol)) {
                                                                                        set_contents_var = set.do_set_internal(sol);
                                                                                        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
                                                                                            quoted_isa = set_contents.do_set_contents_next(basis_object, state);
                                                                                            if (NIL != set_contents.do_set_contents_element_validP(state, quoted_isa)) {
                                                                                                funcall(function, quoted_isa);
                                                                                            }
                                                                                        }
                                                                                    } else
                                                                                        if (sol.isList()) {
                                                                                            if (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) {
                                                                                                csome_list_var = sol;
                                                                                                quoted_isa2 = NIL;
                                                                                                quoted_isa2 = csome_list_var.first();
                                                                                                while ((NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL != csome_list_var)) {
                                                                                                    funcall(function, quoted_isa2);
                                                                                                    csome_list_var = csome_list_var.rest();
                                                                                                    quoted_isa2 = csome_list_var.first();
                                                                                                } 
                                                                                            }
                                                                                        } else {
                                                                                            Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                        }

                                                                                } finally {
                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$478, thread);
                                                                                }
                                                                            }
                                                                        }
                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state_$489);
                                                                    } finally {
                                                                        sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$477, thread);
                                                                    }
                                                                }
                                                            }
                                                            dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                        }
                                                    } else {
                                                        sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str40$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                    }
                                                } else
                                                    if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                        new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                        for (rest_$492 = NIL, rest_$492 = new_list; (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL != rest_$492); rest_$492 = rest_$492.rest()) {
                                                            generating_fn = rest_$492.first();
                                                            _prev_bind_0_$479 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                            try {
                                                                sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                link_nodes2 = sol2 = funcall(generating_fn, node);
                                                                if (NIL != set.set_p(sol2)) {
                                                                    set_contents_var2 = set.do_set_internal(sol2);
                                                                    for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL == set_contents.do_set_contents_doneP(basis_object2, state2)); state2 = set_contents.do_set_contents_update_state(state2)) {
                                                                        quoted_isa3 = set_contents.do_set_contents_next(basis_object2, state2);
                                                                        if (NIL != set_contents.do_set_contents_element_validP(state2, quoted_isa3)) {
                                                                            funcall(function, quoted_isa3);
                                                                        }
                                                                    }
                                                                } else
                                                                    if (sol2.isList()) {
                                                                        if (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) {
                                                                            csome_list_var2 = sol2;
                                                                            quoted_isa4 = NIL;
                                                                            quoted_isa4 = csome_list_var2.first();
                                                                            while ((NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL != csome_list_var2)) {
                                                                                funcall(function, quoted_isa4);
                                                                                csome_list_var2 = csome_list_var2.rest();
                                                                                quoted_isa4 = csome_list_var2.first();
                                                                            } 
                                                                        }
                                                                    } else {
                                                                        Errors.error($str39$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                                    }

                                                            } finally {
                                                                sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$479, thread);
                                                            }
                                                        }
                                                    }

                                            } finally {
                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$475, thread);
                                                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$476, thread);
                                            }
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$484, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$483, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$474, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$474, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$475, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$474, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$473, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$473, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$473, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$472, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$472, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$471, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$472, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$471, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$470, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        if (NIL != sbhl_link_methods.quoted_isa_stored_naut_arg2_p(v_term)) {
            module = sbhl_module_vars.get_sbhl_module($$genls);
            final SubLObject mt_var2 = mt;
            final SubLObject _prev_bind_6 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_7 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_8 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var2), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var2), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var2), thread);
                final SubLObject tv_var2 = tv;
                final SubLObject _prev_bind_0_$480 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$476 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var2 ? tv_var2 : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var2 ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var2) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var2))) {
                        final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var2.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str32$_A_is_not_a__A, tv_var2, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var2.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str32$_A_is_not_a__A, tv_var2, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var2.eql($WARN)) {
                                    Errors.warn($str32$_A_is_not_a__A, tv_var2, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str37$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str32$_A_is_not_a__A, tv_var2, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$481 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        SubLObject cdolist_list_var = gethash(v_term, sbhl_link_methods.$quoted_isa_arg2_naut_table$.getGlobalValue(), UNPROVIDED);
                        SubLObject quoted_isa_tuple = NIL;
                        quoted_isa_tuple = cdolist_list_var.first();
                        while (NIL != cdolist_list_var) {
                            SubLObject current;
                            final SubLObject datum = current = quoted_isa_tuple;
                            SubLObject naut = NIL;
                            SubLObject quoted_isa_mt = NIL;
                            SubLObject quoted_isa_tv = NIL;
                            destructuring_bind_must_consp(current, datum, $list205);
                            naut = current.first();
                            current = current.rest();
                            destructuring_bind_must_consp(current, datum, $list205);
                            quoted_isa_mt = current.first();
                            current = current.rest();
                            destructuring_bind_must_consp(current, datum, $list205);
                            quoted_isa_tv = current.first();
                            current = current.rest();
                            if (NIL == current) {
                                if ((NIL != mt_relevance_macros.relevant_mtP(quoted_isa_mt)) && (NIL != sbhl_search_vars.relevant_sbhl_tvP(quoted_isa_tv))) {
                                    final SubLObject quoted_isa5 = naut;
                                    funcall(function, quoted_isa5);
                                    SubLObject cdolist_list_var_$497;
                                    final SubLObject new_list2 = cdolist_list_var_$497 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_forward_directed_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), module)) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_forward_directed_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), module);
                                    SubLObject generating_fn2 = NIL;
                                    generating_fn2 = cdolist_list_var_$497.first();
                                    while (NIL != cdolist_list_var_$497) {
                                        final SubLObject _prev_bind_0_$482 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                        try {
                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn2, thread);
                                            final SubLObject quoted_isa6 = funcall(generating_fn2, naut);
                                            funcall(function, quoted_isa6);
                                        } finally {
                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$482, thread);
                                        }
                                        cdolist_list_var_$497 = cdolist_list_var_$497.rest();
                                        generating_fn2 = cdolist_list_var_$497.first();
                                    } 
                                }
                            } else {
                                cdestructuring_bind_error(datum, $list205);
                            }
                            cdolist_list_var = cdolist_list_var.rest();
                            quoted_isa_tuple = cdolist_list_var.first();
                        } 
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$481, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$476, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$480, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_8, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_7, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_6, thread);
            }
        }
        return NIL;
    }/**
     * apply FUNCTION to every (least general) #$quotedIsa of TERM
     */


    /**
     *
     *
     * @unknown does no minimization.
     */
    @LispMethod(comment = "@unknown does no minimization.")
    public static final SubLObject map_min_quoted_isa_alt(SubLObject function, SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        com.cyc.cycjava.cycl.isa.map_quoted_isa(function, v_term, mt, tv);
        return NIL;
    }

    /**
     *
     *
     * @unknown does no minimization.
     */
    @LispMethod(comment = "@unknown does no minimization.")
    public static SubLObject map_min_quoted_isa(final SubLObject function, final SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        map_quoted_isa(function, v_term, mt, tv);
        return NIL;
    }

    /**
     * Returns all collections that include TERM (inexpensive)
     */
    @LispMethod(comment = "Returns all collections that include TERM (inexpensive)")
    public static final SubLObject all_quoted_isa_alt(SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(v_term, HL_TERM_P);
        {
            SubLObject result = sbhl_search_methods.sbhl_all_forward_true_nodes(sbhl_module_vars.get_sbhl_module($$quotedIsa), v_term, mt, tv);
            return result;
        }
    }

    /**
     * Returns all collections that include TERM (inexpensive)
     */
    @LispMethod(comment = "Returns all collections that include TERM (inexpensive)")
    public static SubLObject all_quoted_isa(final SubLObject v_term, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLTrampolineFile.enforceType(v_term, HL_TERM_P);
        SubLObject result = sbhl_search_methods.sbhl_all_forward_true_nodes(sbhl_module_vars.get_sbhl_module($$quotedIsa), v_term, mt, tv);
        if (NIL != sbhl_link_methods.quoted_isa_stored_naut_arg2_p(v_term)) {
            result = list_utilities.fast_delete_duplicates(nconc(genls.union_all_genls(sbhl_link_methods.quoted_isas_from_naut_arg2(v_term, mt, tv), mt, tv), result), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        if (NIL == $sbhl_may_return_naut_collections_as_fortsP$.getDynamicValue(thread)) {
            result = list_utilities.remove_if_not(FORT_P, result, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return result;
    }/**
     * Returns all collections that include TERM (inexpensive)
     */


    /**
     * returns all collections in any microtheory containing TERM.
     */
    @LispMethod(comment = "returns all collections in any microtheory containing TERM.")
    public static final SubLObject all_quoted_isa_in_any_mt_alt(SubLObject v_term) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject all_isa = NIL;
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                        mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                        all_isa = com.cyc.cycjava.cycl.isa.all_quoted_isa(v_term, UNPROVIDED, UNPROVIDED);
                    } finally {
                        mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                    }
                }
                return all_isa;
            }
        }
    }

    /**
     * returns all collections in any microtheory containing TERM.
     */
    @LispMethod(comment = "returns all collections in any microtheory containing TERM.")
    public static SubLObject all_quoted_isa_in_any_mt(final SubLObject v_term) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject all_isa = NIL;
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
            mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
            all_isa = all_quoted_isa(v_term, UNPROVIDED, UNPROVIDED);
        } finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return all_isa;
    }/**
     * returns all collections in any microtheory containing TERM.
     */


    /**
     * returns all collections in just MT / *mt* containing TERM
     */
    @LispMethod(comment = "returns all collections in just MT / *mt* containing TERM")
    public static final SubLObject all_quoted_isa_in_mt_alt(SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject all_isa = NIL;
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EQ, thread);
                        mt_relevance_macros.$mt$.bind(mt, thread);
                        all_isa = com.cyc.cycjava.cycl.isa.all_quoted_isa(v_term, UNPROVIDED, UNPROVIDED);
                    } finally {
                        mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                    }
                }
                return all_isa;
            }
        }
    }

    /**
     * returns all collections in just MT / *mt* containing TERM
     */
    @LispMethod(comment = "returns all collections in just MT / *mt* containing TERM")
    public static SubLObject all_quoted_isa_in_mt(final SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject all_isa = NIL;
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EQ, thread);
            mt_relevance_macros.$mt$.bind(mt, thread);
            all_isa = all_quoted_isa(v_term, UNPROVIDED, UNPROVIDED);
        } finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return all_isa;
    }/**
     * returns all collections in just MT / *mt* containing TERM
     */


    /**
     * all collections that include <term> in an mt in <mts> (inexpensive)
     */
    @LispMethod(comment = "all collections that include <term> in an mt in <mts> (inexpensive)")
    public static final SubLObject all_quoted_isa_in_mts_alt(SubLObject v_term, SubLObject mts) {
        if (mts == UNPROVIDED) {
            mts = genl_mts.all_base_mts(mt_relevance_macros.$mt$.getDynamicValue());
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject all_isa = NIL;
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_GENL_MT_OF_LIST_MEMBER, thread);
                        mt_relevance_macros.$relevant_mts$.bind(mts, thread);
                        all_isa = com.cyc.cycjava.cycl.isa.all_quoted_isa(v_term, UNPROVIDED, UNPROVIDED);
                    } finally {
                        mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                    }
                }
                return all_isa;
            }
        }
    }

    /**
     * all collections that include <term> in an mt in <mts> (inexpensive)
     */
    @LispMethod(comment = "all collections that include <term> in an mt in <mts> (inexpensive)")
    public static SubLObject all_quoted_isa_in_mts(final SubLObject v_term, SubLObject mts) {
        if (mts == UNPROVIDED) {
            mts = genl_mts.all_base_mts(mt_relevance_macros.$mt$.getDynamicValue());
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject all_isa = NIL;
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_GENL_MT_OF_LIST_MEMBER, thread);
            mt_relevance_macros.$relevant_mts$.bind(mts, thread);
            all_isa = all_quoted_isa(v_term, UNPROVIDED, UNPROVIDED);
        } finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return all_isa;
    }/**
     * all collections that include <term> in an mt in <mts> (inexpensive)
     */


    /**
     * Returns all isa of term TERM that are also instances of collection ISA (ascending transitive closure; inexpensive)
     */
    @LispMethod(comment = "Returns all isa of term TERM that are also instances of collection ISA (ascending transitive closure; inexpensive)")
    public static final SubLObject all_quoted_isas_wrt_alt(SubLObject v_term, SubLObject v_isa, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(v_term, EL_FORT_P);
            SubLTrampolineFile.checkType(v_isa, EL_FORT_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = $all_isas_wrt$.currentBinding(thread);
                    SubLObject _prev_bind_1 = $all_isas_wrt_isa$.currentBinding(thread);
                    try {
                        $all_isas_wrt$.bind(NIL, thread);
                        $all_isas_wrt_isa$.bind(v_isa, thread);
                        com.cyc.cycjava.cycl.isa.map_all_quoted_isa(GATHER_ISA_WRT_ISA, v_term, mt, tv);
                        result = $all_isas_wrt$.getDynamicValue(thread);
                    } finally {
                        $all_isas_wrt_isa$.rebind(_prev_bind_1, thread);
                        $all_isas_wrt$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     * Returns all isa of term TERM that are also instances of collection ISA (ascending transitive closure; inexpensive)
     */
    @LispMethod(comment = "Returns all isa of term TERM that are also instances of collection ISA (ascending transitive closure; inexpensive)")
    public static SubLObject all_quoted_isas_wrt(final SubLObject v_term, final SubLObject v_isa, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLTrampolineFile.enforceType(v_term, EL_FORT_P);
        SubLTrampolineFile.enforceType(v_isa, EL_FORT_P);
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = $all_isas_wrt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = $all_isas_wrt_isa$.currentBinding(thread);
        try {
            $all_isas_wrt$.bind(NIL, thread);
            $all_isas_wrt_isa$.bind(v_isa, thread);
            map_all_quoted_isa(GATHER_ISA_WRT_ISA, v_term, mt, tv);
            result = $all_isas_wrt$.getDynamicValue(thread);
        } finally {
            $all_isas_wrt_isa$.rebind(_prev_bind_2, thread);
            $all_isas_wrt$.rebind(_prev_bind_0, thread);
        }
        return result;
    }/**
     * Returns all isa of term TERM that are also instances of collection ISA (ascending transitive closure; inexpensive)
     */


    /**
     * Returns all instances of COLLECTION (expensive)
     */
    @LispMethod(comment = "Returns all instances of COLLECTION (expensive)")
    public static final SubLObject all_quoted_instances_alt(SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(col, EL_FORT_P);
        return sbhl_search_methods.sbhl_all_backward_true_nodes(sbhl_module_vars.get_sbhl_module($$quotedIsa), col, mt, tv);
    }

    /**
     * Returns all instances of COLLECTION (expensive)
     */
    @LispMethod(comment = "Returns all instances of COLLECTION (expensive)")
    public static SubLObject all_quoted_instances(final SubLObject col, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(col, EL_FORT_P);
        return sbhl_search_methods.sbhl_all_backward_true_nodes(sbhl_module_vars.get_sbhl_module($$quotedIsa), col, mt, tv);
    }/**
     * Returns all instances of COLLECTION (expensive)
     */


    /**
     *
     *
     * @return listp; all instances of COLLECTION in all mts.
     */
    @LispMethod(comment = "@return listp; all instances of COLLECTION in all mts.")
    public static final SubLObject all_quoted_instances_in_all_mts_alt(SubLObject collection) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                        mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                        result = com.cyc.cycjava.cycl.isa.all_quoted_instances(collection, UNPROVIDED, UNPROVIDED);
                    } finally {
                        mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; all instances of COLLECTION in all mts.
     */
    @LispMethod(comment = "@return listp; all instances of COLLECTION in all mts.")
    public static SubLObject all_quoted_instances_in_all_mts(final SubLObject collection) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
            mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
            result = all_quoted_instances(collection, UNPROVIDED, UNPROVIDED);
        } finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     * Returns those elements of COLLECTIONS that include TERM as an all-quoted-instance
     */
    @LispMethod(comment = "Returns those elements of COLLECTIONS that include TERM as an all-quoted-instance")
    public static final SubLObject all_quoted_isa_among_alt(SubLObject v_term, SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(v_term, HL_TERM_P);
        SubLTrampolineFile.checkType(collections, LISTP);
        if (NIL == collections) {
            return NIL;
        } else {
            if (NIL != list_utilities.singletonP(collections)) {
                if (NIL != com.cyc.cycjava.cycl.isa.quoted_isaP(v_term, collections.first(), mt, tv)) {
                    return collections;
                } else {
                    return NIL;
                }
            } else {
                return sbhl_search_methods.sbhl_all_forward_true_nodes_among(sbhl_module_vars.get_sbhl_module($$quotedIsa), v_term, collections, mt, tv);
            }
        }
    }

    /**
     * Returns those elements of COLLECTIONS that include TERM as an all-quoted-instance
     */
    @LispMethod(comment = "Returns those elements of COLLECTIONS that include TERM as an all-quoted-instance")
    public static SubLObject all_quoted_isa_among(final SubLObject v_term, final SubLObject collections, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.enforceType(v_term, HL_TERM_P);
        SubLTrampolineFile.enforceType(collections, LISTP);
        if (NIL == collections) {
            return NIL;
        }
        if (NIL == list_utilities.singletonP(collections)) {
            return sbhl_search_methods.sbhl_all_forward_true_nodes_among(sbhl_module_vars.get_sbhl_module($$quotedIsa), v_term, collections, mt, tv);
        }
        if (NIL != quoted_isaP(v_term, collections.first(), mt, tv)) {
            return collections;
        }
        return NIL;
    }/**
     * Returns those elements of COLLECTIONS that include TERM as an all-quoted-instance
     */


    /**
     *
     *
     * @return booleanp; whether there are any asserted true isa links for TERM.
     */
    @LispMethod(comment = "@return booleanp; whether there are any asserted true isa links for TERM.")
    public static final SubLObject asserted_quoted_isaP_alt(SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return sbhl_link_methods.sbhl_any_asserted_true_links(sbhl_module_vars.get_sbhl_module($$quotedIsa), v_term, mt);
    }

    /**
     *
     *
     * @return booleanp; whether there are any asserted true isa links for TERM.
     */
    @LispMethod(comment = "@return booleanp; whether there are any asserted true isa links for TERM.")
    public static SubLObject asserted_quoted_isaP(final SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return sbhl_link_methods.sbhl_any_asserted_true_links(sbhl_module_vars.get_sbhl_module($$quotedIsa), v_term, mt);
    }

    /**
     *
     *
     * @return listp; the asserted true quoted-isa links for TERM in MT / *mt*.
     */
    @LispMethod(comment = "@return listp; the asserted true quoted-isa links for TERM in MT / *mt*.")
    public static final SubLObject asserted_quoted_isa_alt(SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return sbhl_link_methods.sbhl_asserted_true_links(sbhl_module_vars.get_sbhl_module($$quotedIsa), v_term, mt);
    }

    /**
     *
     *
     * @return listp; the asserted true quoted-isa links for TERM in MT / *mt*.
     */
    @LispMethod(comment = "@return listp; the asserted true quoted-isa links for TERM in MT / *mt*.")
    public static SubLObject asserted_quoted_isa(final SubLObject v_term, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return sbhl_link_methods.sbhl_asserted_true_links(sbhl_module_vars.get_sbhl_module($$quotedIsa), v_term, mt);
    }

    /**
     * Modifier. Adds sbhl links with @see sbhl-after-adding.
     */
    @LispMethod(comment = "Modifier. Adds sbhl links with @see sbhl-after-adding.")
    public static final SubLObject quoted_instanceof_after_adding_alt(SubLObject source, SubLObject assertion) {
        sbhl_link_methods.sbhl_after_adding(source, assertion, sbhl_module_vars.get_sbhl_module($$quotedIsa));
        sbhl_cache.sbhl_cache_addition_maintainence(assertion);
        after_adding_modules.clear_quoted_isa_dependent_caches(source, assertion);
        return NIL;
    }

    /**
     * Modifier. Adds sbhl links with @see sbhl-after-adding.
     */
    @LispMethod(comment = "Modifier. Adds sbhl links with @see sbhl-after-adding.")
    public static SubLObject quoted_instanceof_after_adding(SubLObject source, final SubLObject assertion) {
        sbhl_link_methods.sbhl_after_adding(source, assertion, sbhl_module_vars.get_sbhl_module($$quotedIsa));
        sbhl_cache.sbhl_cache_addition_maintainence(assertion);
        after_adding_modules.clear_quoted_isa_dependent_caches(source, assertion);
        return NIL;
    }/**
     * Modifier. Adds sbhl links with @see sbhl-after-adding.
     */


    /**
     * Modifier. Removes sbhl links with @see sbhl-after-removing.
     */
    @LispMethod(comment = "Modifier. Removes sbhl links with @see sbhl-after-removing.")
    public static final SubLObject quoted_instanceof_after_removing_alt(SubLObject source, SubLObject assertion) {
        sbhl_link_methods.sbhl_after_removing(source, assertion, sbhl_module_vars.get_sbhl_module($$quotedIsa));
        sbhl_cache.sbhl_cache_removal_maintainence(assertion);
        return NIL;
    }

    /**
     * Modifier. Removes sbhl links with @see sbhl-after-removing.
     */
    @LispMethod(comment = "Modifier. Removes sbhl links with @see sbhl-after-removing.")
    public static SubLObject quoted_instanceof_after_removing(SubLObject source, final SubLObject assertion) {
        sbhl_link_methods.sbhl_after_removing(source, assertion, sbhl_module_vars.get_sbhl_module($$quotedIsa));
        sbhl_cache.sbhl_cache_removal_maintainence(assertion);
        return NIL;
    }/**
     * Modifier. Removes sbhl links with @see sbhl-after-removing.
     */


    public static final SubLObject all_instances_via_indexing_alt(SubLObject col, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return com.cyc.cycjava.cycl.isa.instances_via_indexing(col, mt);
    }

    public static SubLObject all_instances_via_indexing(final SubLObject col, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        return instances_via_indexing(col, mt);
    }

    /**
     * For when we can't use the SBHL because it might not be initialized
     */
    @LispMethod(comment = "For when we can\'t use the SBHL because it might not be initialized")
    public static final SubLObject instances_via_indexing_alt(SubLObject col, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                SubLObject mt_var = mt;
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                        mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                        mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                        {
                            SubLObject pred_var = $$isa;
                            if (NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(col, TWO_INTEGER, pred_var)) {
                                {
                                    SubLObject iterator_var = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(col, TWO_INTEGER, pred_var);
                                    SubLObject done_var = NIL;
                                    SubLObject token_var = NIL;
                                    while (NIL == done_var) {
                                        {
                                            SubLObject final_index_spec = iteration.iteration_next_without_values_macro_helper(iterator_var, token_var);
                                            SubLObject valid = makeBoolean(token_var != final_index_spec);
                                            if (NIL != valid) {
                                                {
                                                    SubLObject final_index_iterator = NIL;
                                                    try {
                                                        final_index_iterator = kb_mapping_macros.new_final_index_iterator(final_index_spec, $GAF, $TRUE, NIL);
                                                        {
                                                            SubLObject done_var_549 = NIL;
                                                            SubLObject token_var_550 = NIL;
                                                            while (NIL == done_var_549) {
                                                                {
                                                                    SubLObject gaf = iteration.iteration_next_without_values_macro_helper(final_index_iterator, token_var_550);
                                                                    SubLObject valid_551 = makeBoolean(token_var_550 != gaf);
                                                                    if (NIL != valid_551) {
                                                                        {
                                                                            SubLObject ins = gaf_arg1(gaf);
                                                                            result = cons(ins, result);
                                                                        }
                                                                    }
                                                                    done_var_549 = makeBoolean(NIL == valid_551);
                                                                }
                                                            } 
                                                        }
                                                    } finally {
                                                        {
                                                            SubLObject _prev_bind_0_552 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                            try {
                                                                $is_thread_performing_cleanupP$.bind(T, thread);
                                                                if (NIL != final_index_iterator) {
                                                                    kb_mapping_macros.destroy_final_index_iterator(final_index_iterator);
                                                                }
                                                            } finally {
                                                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_552, thread);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            done_var = makeBoolean(NIL == valid);
                                        }
                                    } 
                                }
                            }
                        }
                    } finally {
                        mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
                    }
                }
                return nreverse(result);
            }
        }
    }

    /**
     * For when we can't use the SBHL because it might not be initialized
     */
    @LispMethod(comment = "For when we can\'t use the SBHL because it might not be initialized")
    public static SubLObject instances_via_indexing(final SubLObject col, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject mt_var = mt;
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            final SubLObject pred_var = $$isa;
            if (NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(col, TWO_INTEGER, pred_var)) {
                final SubLObject iterator_var = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(col, TWO_INTEGER, pred_var);
                SubLObject done_var = NIL;
                final SubLObject token_var = NIL;
                while (NIL == done_var) {
                    final SubLObject final_index_spec = iteration.iteration_next_without_values_macro_helper(iterator_var, token_var);
                    final SubLObject valid = makeBoolean(!token_var.eql(final_index_spec));
                    if (NIL != valid) {
                        SubLObject final_index_iterator = NIL;
                        try {
                            final_index_iterator = kb_mapping_macros.new_final_index_iterator(final_index_spec, $GAF, $TRUE, NIL);
                            SubLObject done_var_$499 = NIL;
                            final SubLObject token_var_$500 = NIL;
                            while (NIL == done_var_$499) {
                                final SubLObject gaf = iteration.iteration_next_without_values_macro_helper(final_index_iterator, token_var_$500);
                                final SubLObject valid_$501 = makeBoolean(!token_var_$500.eql(gaf));
                                if (NIL != valid_$501) {
                                    final SubLObject ins = assertions_high.gaf_arg1(gaf);
                                    result = cons(ins, result);
                                }
                                done_var_$499 = makeBoolean(NIL == valid_$501);
                            } 
                        } finally {
                            final SubLObject _prev_bind_0_$502 = $is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                $is_thread_performing_cleanupP$.bind(T, thread);
                                final SubLObject _values = getValuesAsVector();
                                if (NIL != final_index_iterator) {
                                    kb_mapping_macros.destroy_final_index_iterator(final_index_iterator);
                                }
                                restoreValuesFromVector(_values);
                            } finally {
                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$502, thread);
                            }
                        }
                    }
                    done_var = makeBoolean(NIL == valid);
                } 
            }
        } finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return nreverse(result);
    }/**
     * For when we can't use the SBHL because it might not be initialized
     */


    public static SubLObject declare_isa_file() {
        declareFunction("isa", "ISA", 1, 2, false);
        declareFunction("min_isa", "MIN-ISA", 1, 2, false);
        declareFunction("min_isa_in_mt", "MIN-ISA-IN-MT", 2, 0, false);
        declareFunction("nat_isa", "NAT-ISA", 1, 2, false);
        declareFunction("naut_isa", "NAUT-ISA", 1, 1, false);
        declareFunction("not_isa", "NOT-ISA", 1, 2, false);
        declareFunction("max_not_isa", "MAX-NOT-ISA", 1, 2, false);
        declareFunction("nat_max_not_isa", "NAT-MAX-NOT-ISA", 1, 2, false);
        declareFunction("instances", "INSTANCES", 1, 2, false);
        declareFunction("max_instances", "MAX-INSTANCES", 1, 2, false);
        declareFunction("all_instances_with_max", "ALL-INSTANCES-WITH-MAX", 2, 0, false);
        declareFunction("not_instances", "NOT-INSTANCES", 1, 2, false);
        declareFunction("min_not_instances", "MIN-NOT-INSTANCES", 1, 2, false);
        declareFunction("isa_siblings", "ISA-SIBLINGS", 1, 2, false);
        declareFunction("instance_siblings", "INSTANCE-SIBLINGS", 1, 2, false);
        declareFunction("map_isa", "MAP-ISA", 2, 2, false);
        declareFunction("map_min_isa", "MAP-MIN-ISA", 2, 2, false);
        declareFunction("map_instances", "MAP-INSTANCES", 2, 2, false);
        declareFunction("min_isas_of_type", "MIN-ISAS-OF-TYPE", 2, 2, false);
        declareFunction("all_isa", "ALL-ISA", 1, 2, false);
        declareFunction("all_isa_in_any_mt", "ALL-ISA-IN-ANY-MT", 1, 0, false);
        declareFunction("all_isa_in_mt", "ALL-ISA-IN-MT", 1, 1, false);
        declareFunction("all_isa_in_mts", "ALL-ISA-IN-MTS", 1, 1, false);
        declareFunction("nat_all_isa", "NAT-ALL-ISA", 1, 2, false);
        declareFunction("all_instances", "ALL-INSTANCES", 1, 2, false);
        declareFunction("all_instances_in_all_mts", "ALL-INSTANCES-IN-ALL-MTS", 1, 0, false);
        declareFunction("all_fort_instances", "ALL-FORT-INSTANCES", 1, 2, false);
        declareFunction("all_non_prototypical_fort_instances", "ALL-NON-PROTOTYPICAL-FORT-INSTANCES", 1, 2, false);
        declareFunction("all_fort_instances_in_all_mts", "ALL-FORT-INSTANCES-IN-ALL-MTS", 1, 0, false);
        declareFunction("all_isas_wrt", "ALL-ISAS-WRT", 2, 2, false);
        declareFunction("gather_isa_wrt_isa", "GATHER-ISA-WRT-ISA", 1, 0, false);
        declareFunction("union_all_isa", "UNION-ALL-ISA", 1, 2, false);
        declareFunction("union_all_instances", "UNION-ALL-INSTANCES", 1, 2, false);
        declareFunction("all_isa_among", "ALL-ISA-AMONG", 2, 2, false);
        declareFunction("isa_allP", "ISA-ALL?", 3, 0, false);
        declareFunction("min_isa_among", "MIN-ISA-AMONG", 2, 2, false);
        declareFunction("all_instances_among", "ALL-INSTANCES-AMONG", 2, 2, false);
        declareFunction("all_instances_among_fast", "ALL-INSTANCES-AMONG-FAST", 2, 1, false);
        declareFunction("all_isa_if", "ALL-ISA-IF", 2, 2, false);
        declareFunction("all_instances_if", "ALL-INSTANCES-IF", 2, 2, false);
        declareFunction("all_isa_if_with_pruning", "ALL-ISA-IF-WITH-PRUNING", 2, 2, false);
        declareFunction("all_not_isa", "ALL-NOT-ISA", 1, 2, false);
        declareFunction("all_not_instances", "ALL-NOT-INSTANCES", 1, 2, false);
        declareFunction("not_isa_among", "NOT-ISA-AMONG", 2, 2, false);
        declareFunction("not_instances_among", "NOT-INSTANCES-AMONG", 0, 0, false);
        declareFunction("map_all_isa", "MAP-ALL-ISA", 2, 2, false);
        declareFunction("map_all_instances", "MAP-ALL-INSTANCES", 2, 2, false);
        declareFunction("any_all_isa", "ANY-ALL-ISA", 2, 2, false);
        declareFunction("any_wrt_all_isa", "ANY-WRT-ALL-ISA", 2, 2, false);
        declareFunction("any_all_forward_true_nodes_isa", "ANY-ALL-FORWARD-TRUE-NODES-ISA", 3, 2, false);
        declareFunction("sample_leaf_instances", "SAMPLE-LEAF-INSTANCES", 1, 3, false);
        declareFunction("sample_different_leaf_instances", "SAMPLE-DIFFERENT-LEAF-INSTANCES", 2, 3, false);
        declareFunction("sbhl_record_all_isa", "SBHL-RECORD-ALL-ISA", 1, 2, false);
        declareFunction("count_all_instances", "COUNT-ALL-INSTANCES", 1, 2, false);
        declareFunction("count_all_instances_if", "COUNT-ALL-INSTANCES-IF", 2, 2, false);
        declareFunction("count_all_instances_E", "COUNT-ALL-INSTANCES-=", 2, 2, false);
        declareFunction("count_all_instances_G", "COUNT-ALL-INSTANCES->", 2, 2, false);
        declareFunction("count_all_instances_GE", "COUNT-ALL-INSTANCES->=", 2, 2, false);
        declareFunction("count_all_instances_L", "COUNT-ALL-INSTANCES-<", 2, 2, false);
        declareFunction("count_all_instances_LE", "COUNT-ALL-INSTANCES-<=", 2, 2, false);
        declareFunction("count_all_quoted_instances", "COUNT-ALL-QUOTED-INSTANCES", 1, 2, false);
        declareFunction("count_all_quoted_instances_if", "COUNT-ALL-QUOTED-INSTANCES-IF", 2, 2, false);
        declareFunction("count_all_quoted_instances_E", "COUNT-ALL-QUOTED-INSTANCES-=", 2, 2, false);
        declareFunction("count_all_quoted_instances_G", "COUNT-ALL-QUOTED-INSTANCES->", 2, 2, false);
        declareFunction("count_all_quoted_instances_GE", "COUNT-ALL-QUOTED-INSTANCES->=", 2, 2, false);
        declareFunction("count_all_quoted_instances_L", "COUNT-ALL-QUOTED-INSTANCES-<", 2, 2, false);
        declareFunction("count_all_quoted_instances_LE", "COUNT-ALL-QUOTED-INSTANCES-<=", 2, 2, false);
        declareFunction("isaP", "ISA?", 2, 2, false);
        declareFunction("isa_in_mtsP", "ISA-IN-MTS?", 3, 0, false);
        declareFunction("isa_in_any_mtP", "ISA-IN-ANY-MT?", 2, 0, false);
        declareFunction("nat_isaP", "NAT-ISA?", 2, 2, false);
        declareFunction("nat_isa_intP", "NAT-ISA-INT?", 3, 0, false);
        declareFunction("result_isa_colP", "RESULT-ISA-COL?", 2, 1, false);
        declareFunction("weak_not_result_isa_colP", "WEAK-NOT-RESULT-ISA-COL?", 2, 1, false);
        declareFunction("result_isa_arg_colP", "RESULT-ISA-ARG-COL?", 2, 1, false);
        declareFunction("weak_not_result_isa_arg_colP", "WEAK-NOT-RESULT-ISA-ARG-COL?", 2, 1, false);
        declareFunction("result_isa_inter_arg_colP", "RESULT-ISA-INTER-ARG-COL?", 2, 1, false);
        declareFunction("result_isa_inter_arg_reln_colP", "RESULT-ISA-INTER-ARG-RELN-COL?", 2, 1, false);
        declareFunction("isaP_goal", "ISA?-GOAL", 1, 0, false);
        declareFunction("any_isaP", "ANY-ISA?", 2, 2, false);
        declareFunction("isa_anyP", "ISA-ANY?", 2, 2, false);
        declareFunction("nat_any_isaP", "NAT-ANY-ISA?", 2, 2, false);
        declareFunction("find_if_isaP", "FIND-IF-ISA?", 2, 0, false);
        declareFunction("all_isaP", "ALL-ISA?", 2, 2, false);
        declareFunction("all_instancesP", "ALL-INSTANCES?", 2, 2, false);
        declareFunction("any_isa_anyP", "ANY-ISA-ANY?", 2, 2, false);
        declareFunction("not_isaP", "NOT-ISA?", 2, 2, false);
        declareFunction("not_isa_someP", "NOT-ISA-SOME?", 2, 2, false);
        declareFunction("not_isa_by_sbhlP", "NOT-ISA-BY-SBHL?", 2, 2, false);
        declareFunction("not_isa_by_extent_knownP", "NOT-ISA-BY-EXTENT-KNOWN?", 2, 2, false);
        declareFunction("argue_not_isaP", "ARGUE-NOT-ISA?", 2, 2, false);
        declareFunction("not_isa_in_any_mtP", "NOT-ISA-IN-ANY-MT?", 2, 0, false);
        declareFunction("nat_not_isaP", "NAT-NOT-ISA?", 2, 2, false);
        declareFunction("why_isaP", "WHY-ISA?", 2, 3, false);
        declareFunction("any_just_of_isa", "ANY-JUST-OF-ISA", 2, 1, false);
        declareFunction("any_just_of_nat_isa", "ANY-JUST-OF-NAT-ISA", 2, 1, false);
        declareFunction("why_not_isaP", "WHY-NOT-ISA?", 2, 3, false);
        declareFunction("any_just_of_not_isa", "ANY-JUST-OF-NOT-ISA", 2, 1, false);
        declareFunction("any_just_of_nat_not_isa", "ANY-JUST-OF-NAT-NOT-ISA", 2, 1, false);
        declareFunction("instancesP", "INSTANCES?", 1, 2, false);
        declareFunction("instancesP_int", "INSTANCES?-INT", 1, 2, false);
        declareFunction("forts_of_type", "FORTS-OF-TYPE", 2, 2, false);
        declareFunction("all_isa_mts", "ALL-ISA-MTS", 1, 0, false);
        declareFunction("gather_genls_mts", "GATHER-GENLS-MTS", 1, 0, false);
        declareFunction("partial_isa_extensionP", "PARTIAL-ISA-EXTENSION?", 1, 1, false);
        declareFunction("random_instance_of", "RANDOM-INSTANCE-OF", 1, 1, false);
        declareFunction("min_ceiling_isa", "MIN-CEILING-ISA", 1, 3, false);
        declareFunction("nearest_common_isa", "NEAREST-COMMON-ISA", 1, 3, false);
        declareFunction("max_floor_instances", "MAX-FLOOR-INSTANCES", 1, 2, false);
        declareFunction("max_floor_mts_of_isa_paths_wrt", "MAX-FLOOR-MTS-OF-ISA-PATHS-WRT", 3, 0, false);
        declareFunction("max_floor_mts_of_isa_paths", "MAX-FLOOR-MTS-OF-ISA-PATHS", 2, 1, false);
        declareFunction("max_floor_mts_of_quoted_isa_paths", "MAX-FLOOR-MTS-OF-QUOTED-ISA-PATHS", 2, 1, false);
        declareFunction("min_mts_of_isa_paths", "MIN-MTS-OF-ISA-PATHS", 2, 1, false);
        declareFunction("nat_min_mts_of_isa_paths", "NAT-MIN-MTS-OF-ISA-PATHS", 2, 0, false);
        declareFunction("min_mts_of_quoted_isa_paths", "MIN-MTS-OF-QUOTED-ISA-PATHS", 2, 1, false);
        declareFunction("nat_min_mts_of_quoted_isa_paths", "NAT-MIN-MTS-OF-QUOTED-ISA-PATHS", 2, 0, false);
        declareFunction("gather_min_mts_of_paths_between", "GATHER-MIN-MTS-OF-PATHS-BETWEEN", 1, 0, false);
        declareFunction("cache_mts_of_arg", "CACHE-MTS-OF-ARG", 1, 0, false);
        declareFunction("max_floor_mts_of_not_isa_paths", "MAX-FLOOR-MTS-OF-NOT-ISA-PATHS", 2, 1, false);
        declareFunction("min_mts_of_not_isa_paths", "MIN-MTS-OF-NOT-ISA-PATHS", 2, 1, false);
        declareFunction("instantiationP", "INSTANTIATION?", 2, 1, false);
        declareFunction("instantiations", "INSTANTIATIONS", 1, 1, false);
        declareFunction("all_instantiations", "ALL-INSTANTIATIONS", 1, 1, false);
        declareFunction("random_instantiation", "RANDOM-INSTANTIATION", 1, 1, false);
        declareFunction("set_naut_p", "SET-NAUT-P", 1, 0, false);
        declareFunction("member_of_cycl_setP", "MEMBER-OF-CYCL-SET?", 2, 0, false);
        declareFunction("members_of_cycl_set", "MEMBERS-OF-CYCL-SET", 1, 0, false);
        declareFunction("random_member_of_cycl_set", "RANDOM-MEMBER-OF-CYCL-SET", 1, 0, false);
        declareFunction("isas_mts", "ISAS-MTS", 1, 0, false);
        declareFunction("isa_mts", "ISA-MTS", 1, 0, false);
        declareFunction("type_mts", "TYPE-MTS", 1, 0, false);
        declareFunction("asserted_isaP", "ASSERTED-ISA?", 1, 1, false);
        declareFunction("asserted_isa", "ASSERTED-ISA", 1, 1, false);
        declareFunction("asserted_not_isa", "ASSERTED-NOT-ISA", 1, 1, false);
        declareFunction("supported_isa", "SUPPORTED-ISA", 1, 1, false);
        declareFunction("supported_not_isa", "SUPPORTED-NOT-ISA", 1, 1, false);
        declareFunction("asserted_instance", "ASSERTED-INSTANCE", 1, 1, false);
        declareFunction("asserted_not_instance", "ASSERTED-NOT-INSTANCE", 1, 1, false);
        declareFunction("supported_instance", "SUPPORTED-INSTANCE", 1, 1, false);
        declareFunction("supported_not_instance", "SUPPORTED-NOT-INSTANCE", 1, 1, false);
        declareFunction("instanceof_after_adding", "INSTANCEOF-AFTER-ADDING", 2, 0, false);
        new isa.$instanceof_after_adding$BinaryFunction();
        declareFunction("isa_after_adding", "ISA-AFTER-ADDING", 2, 0, false);
        declareFunction("possibly_propagate_isa_collection_subset_fn_the_set_of", "POSSIBLY-PROPAGATE-ISA-COLLECTION-SUBSET-FN-THE-SET-OF", 1, 0, false);
        declareFunction("possibly_propagate_isa_the_collection_of", "POSSIBLY-PROPAGATE-ISA-THE-COLLECTION-OF", 1, 0, false);
        declareFunction("possibly_propagate_isa_the_set_of", "POSSIBLY-PROPAGATE-ISA-THE-SET-OF", 3, 0, false);
        declareFunction("instanceof_after_removing", "INSTANCEOF-AFTER-REMOVING", 2, 0, false);
        new isa.$instanceof_after_removing$BinaryFunction();
        declareFunction("isa_after_removing", "ISA-AFTER-REMOVING", 2, 0, false);
        declareFunction("clear_isa_graph", "CLEAR-ISA-GRAPH", 0, 0, false);
        declareFunction("clear_node_isa_links", "CLEAR-NODE-ISA-LINKS", 1, 0, false);
        declareFunction("reset_isa_links", "RESET-ISA-LINKS", 1, 0, false);
        declareFunction("reset_isa_links_in_mt", "RESET-ISA-LINKS-IN-MT", 2, 0, false);
        declareFunction("reset_isa_graph", "RESET-ISA-GRAPH", 0, 1, false);
        declareFunction("quoted_isa", "QUOTED-ISA", 1, 2, false);
        declareFunction("nat_quoted_isa", "NAT-QUOTED-ISA", 1, 2, false);
        declareFunction("not_quoted_isa", "NOT-QUOTED-ISA", 1, 2, false);
        declareFunction("quoted_isaP", "QUOTED-ISA?", 2, 2, false);
        declareFunction("quoted_isa_in_any_mtP", "QUOTED-ISA-IN-ANY-MT?", 2, 0, false);
        declareFunction("any_quoted_isaP", "ANY-QUOTED-ISA?", 2, 2, false);
        declareFunction("quoted_isa_anyP", "QUOTED-ISA-ANY?", 2, 2, false);
        declareFunction("all_quoted_isaP", "ALL-QUOTED-ISA?", 2, 2, false);
        declareFunction("not_quoted_isaP", "NOT-QUOTED-ISA?", 2, 2, false);
        declareFunction("not_quoted_isa_by_sbhlP", "NOT-QUOTED-ISA-BY-SBHL?", 2, 2, false);
        declareFunction("not_quoted_isa_by_extent_knownP", "NOT-QUOTED-ISA-BY-EXTENT-KNOWN?", 2, 2, false);
        declareFunction("quoted_instances", "QUOTED-INSTANCES", 1, 2, false);
        declareFunction("union_all_quoted_instances", "UNION-ALL-QUOTED-INSTANCES", 1, 2, false);
        declareFunction("map_all_quoted_isa", "MAP-ALL-QUOTED-ISA", 2, 2, false);
        declareFunction("map_all_quoted_instances", "MAP-ALL-QUOTED-INSTANCES", 2, 2, false);
        declareFunction("map_quoted_isa", "MAP-QUOTED-ISA", 2, 2, false);
        declareFunction("map_min_quoted_isa", "MAP-MIN-QUOTED-ISA", 2, 2, false);
        declareFunction("all_quoted_isa", "ALL-QUOTED-ISA", 1, 2, false);
        declareFunction("all_quoted_isa_in_any_mt", "ALL-QUOTED-ISA-IN-ANY-MT", 1, 0, false);
        declareFunction("all_quoted_isa_in_mt", "ALL-QUOTED-ISA-IN-MT", 1, 1, false);
        declareFunction("all_quoted_isa_in_mts", "ALL-QUOTED-ISA-IN-MTS", 1, 1, false);
        declareFunction("all_quoted_isas_wrt", "ALL-QUOTED-ISAS-WRT", 2, 2, false);
        declareFunction("all_quoted_instances", "ALL-QUOTED-INSTANCES", 1, 2, false);
        declareFunction("all_quoted_instances_in_all_mts", "ALL-QUOTED-INSTANCES-IN-ALL-MTS", 1, 0, false);
        declareFunction("all_quoted_isa_among", "ALL-QUOTED-ISA-AMONG", 2, 2, false);
        declareFunction("asserted_quoted_isaP", "ASSERTED-QUOTED-ISA?", 1, 1, false);
        declareFunction("asserted_quoted_isa", "ASSERTED-QUOTED-ISA", 1, 1, false);
        declareFunction("quoted_instanceof_after_adding", "QUOTED-INSTANCEOF-AFTER-ADDING", 2, 0, false);
        declareFunction("quoted_instanceof_after_removing", "QUOTED-INSTANCEOF-AFTER-REMOVING", 2, 0, false);
        declareFunction("all_instances_via_indexing", "ALL-INSTANCES-VIA-INDEXING", 1, 1, false);
        declareFunction("instances_via_indexing", "INSTANCES-VIA-INDEXING", 1, 1, false);
        return NIL;
    }

    public static SubLObject init_isa_file() {
        defparameter("*SBHL-MAY-RETURN-NAUT-COLLECTIONS-AS-FORTS?*", T);
        defparameter("*ALL-ISAS-WRT*", NIL);
        defparameter("*ALL-ISAS-WRT-ISA*", NIL);
        deflexical("*RANDOM-INSTANCE-OF-SAMPLING-RATIO*", TWENTY_INTEGER);
        return NIL;
    }

    public static final SubLObject setup_isa_file_alt() {
        register_cyc_api_function(MIN_ISA, $list_alt3, $str_alt4$Returns_most_specific_collections, $list_alt5, $list_alt6);
        register_cyc_api_function(MAX_NOT_ISA, $list_alt3, $str_alt9$Returns_most_general_collections_, $list_alt5, $list_alt6);
        register_cyc_api_function(INSTANCES, $list_alt13, $str_alt14$Returns_the_asserted_instances_of, $list_alt15, $list_alt6);
        register_cyc_api_function(MAX_INSTANCES, $list_alt17, $str_alt18$Returns_the_maximal_among_the_ass, $list_alt15, $list_alt6);
        register_external_symbol(ALL_INSTANCES_WITH_MAX);
        register_cyc_api_function(MIN_NOT_INSTANCES, $list_alt17, $str_alt23$Returns_the_most_specific_negated, $list_alt15, $list_alt6);
        register_cyc_api_function(ISA_SIBLINGS, $list_alt3, $str_alt25$Returns_the_direct_isas_of_those_, $list_alt5, $list_alt6);
        register_cyc_api_function(INSTANCE_SIBLINGS, $list_alt3, $str_alt27$Returns_the_direct_instances_of_t, $list_alt28, $list_alt6);
        register_cyc_api_function(MAP_INSTANCES, $list_alt46, $str_alt47$apply_FUNCTION_to_every__least_ge, $list_alt48, NIL);
        register_cyc_api_function(ALL_ISA, $list_alt3, $str_alt50$Returns_all_collections_that_incl, $list_alt5, $list_alt6);
        register_cyc_api_function(ALL_INSTANCES, $list_alt17, $str_alt55$Returns_all_instances_of_COLLECTI, $list_alt15, $list_alt56);
        register_cyc_api_function(ALL_INSTANCES_IN_ALL_MTS, $list_alt58, $str_alt59$_return_listp__all_instances_of_C, $list_alt60, $list_alt56);
        define_obsolete_register(ALL_FORT_INSTANCES, $list_alt62);
        register_external_symbol(ALL_FORT_INSTANCES);
        define_obsolete_register(ALL_FORT_INSTANCES_IN_ALL_MTS, $list_alt65);
        register_cyc_api_function(ALL_ISAS_WRT, $list_alt68, $str_alt69$Returns_all_isa_of_term_TERM_that, $list_alt70, $list_alt6);
        register_cyc_api_function(UNION_ALL_ISA, $list_alt73, $str_alt74$Returns_all_collections_that_incl, $list_alt75, $list_alt6);
        register_cyc_api_function(UNION_ALL_INSTANCES, $list_alt77, $str_alt78$Returns_set_of_all_instances_of_e, $list_alt79, $list_alt6);
        register_cyc_api_function(ALL_ISA_AMONG, $list_alt81, $str_alt82$Returns_those_elements_of_COLLECT, $list_alt83, $list_alt6);
        register_cyc_api_function(ALL_INSTANCES_AMONG, $list_alt85, $str_alt86$Returns_those_elements_of_TERMS_t, $list_alt87, $list_alt56);
        register_cyc_api_function(ALL_NOT_ISA, $list_alt3, $str_alt91$Returns_all_collections_that_do_n, $list_alt5, $list_alt6);
        register_cyc_api_function(ALL_NOT_INSTANCES, $list_alt17, $str_alt93$Returns_all_terms_that_are_not_me, $list_alt15, $list_alt6);
        register_cyc_api_function(NOT_ISA_AMONG, $list_alt81, $str_alt95$Returns_those_elements_of_COLLECT, $list_alt83, $list_alt6);
        register_cyc_api_function(MAP_ALL_ISA, $list_alt97, $str_alt98$Apply_FUNCTION_to_every_all_isa_o, $list_alt99, NIL);
        register_cyc_api_function(MAP_ALL_INSTANCES, $list_alt101, $str_alt102$Apply_FUNCTION_to_each_unique_ins, $list_alt103, NIL);
        register_cyc_api_function(ANY_WRT_ALL_ISA, $list_alt46, $str_alt105$Return_the_first_encountered_non_, $list_alt106, NIL);
        register_cyc_api_function(COUNT_ALL_INSTANCES, $list_alt114, $str_alt115$Counts_the_number_of_instances_in, $list_alt60, $list_alt116);
        register_cyc_api_function(COUNT_ALL_QUOTED_INSTANCES, $list_alt114, $str_alt119$Counts_the_number_of_quoted_insta, $list_alt60, $list_alt116);
        register_cyc_api_function($sym121$ISA_, $list_alt122, $str_alt123$Returns_whether_TERM_is_an_instan, $list_alt60, $list_alt124);
        register_cyc_api_function($sym125$ISA_IN_MTS_, $list_alt126, $str_alt127$is__term__an_element_of__collecti, $list_alt60, $list_alt124);
        register_cyc_api_function($sym128$ISA_IN_ANY_MT_, $list_alt129, $str_alt130$is__term__an_element_of__collecti, NIL, $list_alt124);
        register_cyc_api_function($sym131$ANY_ISA_, $list_alt81, $str_alt132$Returns_whether_TERM_is_an_instan, $list_alt83, $list_alt124);
        register_cyc_api_function($sym133$ISA_ANY_, $list_alt81, $str_alt132$Returns_whether_TERM_is_an_instan, $list_alt83, $list_alt124);
        register_cyc_api_function($sym137$ANY_ISA_ANY_, $list_alt138, $str_alt139$_return_booleanp__whether_any_ter, $list_alt140, $list_alt124);
        register_cyc_api_function($sym141$NOT_ISA_, $list_alt122, $str_alt142$_return_booleanp__whether_TERM_is, $list_alt143, $list_alt124);
        register_cyc_api_function($sym144$WHY_ISA_, $list_alt145, $str_alt146$Returns_justification_of__isa_TER, $list_alt143, $list_alt147);
        register_cyc_api_function($sym154$WHY_NOT_ISA_, $list_alt145, $str_alt155$Returns_justification_of__not__is, $list_alt143, $list_alt147);
        register_cyc_api_function($sym156$INSTANCES_, $list_alt114, $str_alt157$Returns_whether_COLLECTION_has_an, $list_alt60, $list_alt124);
        register_cyc_api_function(MAX_FLOOR_MTS_OF_ISA_PATHS, $list_alt162, $str_alt163$Returns_in_what__most_genl__mts_T, $list_alt143, NIL);
        register_kb_function(INSTANCEOF_AFTER_ADDING);
        register_kb_function(ISA_AFTER_ADDING);
        register_kb_function(INSTANCEOF_AFTER_REMOVING);
        register_kb_function(ISA_AFTER_REMOVING);
        register_cyc_api_function($sym186$QUOTED_ISA_, $list_alt122, $str_alt187$Returns_whether_TERM_is_a_quoted_, $list_alt60, $list_alt124);
        register_cyc_api_function($sym188$QUOTED_ISA_IN_ANY_MT_, $list_alt129, $str_alt130$is__term__an_element_of__collecti, NIL, $list_alt124);
        register_cyc_api_function($sym189$ANY_QUOTED_ISA_, $list_alt81, $str_alt132$Returns_whether_TERM_is_an_instan, $list_alt83, $list_alt124);
        register_cyc_api_function($sym190$QUOTED_ISA_ANY_, $list_alt81, $str_alt132$Returns_whether_TERM_is_an_instan, $list_alt83, $list_alt124);
        register_cyc_api_function($sym191$ALL_QUOTED_ISA_, $list_alt81, $str_alt192$Returns_whether_TERM_is_a_quoted_, $list_alt83, $list_alt124);
        register_cyc_api_function($sym193$NOT_QUOTED_ISA_, $list_alt122, $str_alt142$_return_booleanp__whether_TERM_is, $list_alt143, $list_alt124);
        register_cyc_api_function(QUOTED_INSTANCES, $list_alt13, $str_alt14$Returns_the_asserted_instances_of, $list_alt15, $list_alt6);
        register_cyc_api_function(UNION_ALL_QUOTED_INSTANCES, $list_alt77, $str_alt196$Returns_set_of_all_quoted_instanc, $list_alt79, $list_alt6);
        register_cyc_api_function(MAP_ALL_QUOTED_ISA, $list_alt97, $str_alt198$Apply_FUNCTION_to_every_all_quote, $list_alt99, NIL);
        register_cyc_api_function(ALL_QUOTED_ISA, $list_alt3, $str_alt50$Returns_all_collections_that_incl, $list_alt5, $list_alt6);
        register_cyc_api_function(ALL_QUOTED_ISAS_WRT, $list_alt68, $str_alt69$Returns_all_isa_of_term_TERM_that, $list_alt70, $list_alt6);
        register_cyc_api_function(ALL_QUOTED_INSTANCES, $list_alt17, $str_alt55$Returns_all_instances_of_COLLECTI, $list_alt15, $list_alt6);
        register_cyc_api_function(ALL_QUOTED_ISA_AMONG, $list_alt81, $str_alt204$Returns_those_elements_of_COLLECT, $list_alt83, $list_alt6);
        register_kb_function(QUOTED_INSTANCEOF_AFTER_ADDING);
        register_kb_function(QUOTED_INSTANCEOF_AFTER_REMOVING);
        define_test_case_table_int(MIN_COLS, list(new SubLObject[]{ $TEST, NIL, $OWNER, $$$kknight, $CLASSES, NIL, $KB, $TINY, $WORKING_, T }), $list_alt216);
        define_test_case_table_int(MAX_COLS, list(new SubLObject[]{ $TEST, NIL, $OWNER, $$$kknight, $CLASSES, NIL, $KB, $TINY, $WORKING_, T }), $list_alt216);
        define_test_case_table_int(UNION_ALL_ISA, list(new SubLObject[]{ $TEST, NIL, $OWNER, $$$kknight, $CLASSES, NIL, $KB, $TINY, $WORKING_, T }), $list_alt218);
        define_test_case_table_int(ALL_ISA_AMONG, list(new SubLObject[]{ $TEST, NIL, $OWNER, $$$kknight, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), $list_alt220);
        define_test_case_table_int(ALL_INSTANCES_AMONG, list(new SubLObject[]{ $TEST, NIL, $OWNER, $$$kknight, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), $list_alt221);
        define_test_case_table_int(NOT_ISA_AMONG, list(new SubLObject[]{ $TEST, NIL, $OWNER, $$$kknight, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), $list_alt222);
        define_test_case_table_int($sym223$ALL_INSTANCES_, list(new SubLObject[]{ $TEST, NIL, $OWNER, $$$kknight, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), $list_alt224);
        define_test_case_table_int($sym137$ANY_ISA_ANY_, list(new SubLObject[]{ $TEST, NIL, $OWNER, $$$kknight, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), $list_alt225);
        return NIL;
    }

    public static SubLObject setup_isa_file() {
        if (SubLFiles.USE_V1) {
            register_cyc_api_function(MIN_ISA, $list4, $str5$Returns_most_specific_collections, $list6, $list7);
            register_cyc_api_function(MAX_NOT_ISA, $list4, $str10$Returns_most_general_collections_, $list6, $list7);
            register_cyc_api_function(INSTANCES, $list14, $str15$Returns_the_asserted_instances_of, $list16, $list7);
            register_cyc_api_function(MAX_INSTANCES, $list18, $str19$Returns_the_maximal_among_the_ass, $list16, $list7);
            register_external_symbol(ALL_INSTANCES_WITH_MAX);
            register_cyc_api_function(MIN_NOT_INSTANCES, $list18, $str24$Returns_the_most_specific_negated, $list16, $list7);
            register_cyc_api_function(ISA_SIBLINGS, $list4, $str26$Returns_the_direct_isas_of_those_, $list6, $list7);
            register_cyc_api_function(INSTANCE_SIBLINGS, $list4, $str28$Returns_the_direct_instances_of_t, $list29, $list7);
            register_cyc_api_function(MAP_INSTANCES, $list48, $str49$apply_FUNCTION_to_every__least_ge, $list50, NIL);
            register_cyc_api_function(ALL_ISA, $list4, $str52$Returns_all_collections_that_incl, $list6, $list53);
            register_cyc_api_function(ALL_INSTANCES, $list18, $str58$Returns_all_instances_of_COLLECTI, $list16, $list59);
            register_cyc_api_function(ALL_INSTANCES_IN_ALL_MTS, $list61, $str62$_return_listp__all_instances_of_C, $list63, $list59);
            define_obsolete_register(ALL_FORT_INSTANCES, $list65);
            register_external_symbol(ALL_FORT_INSTANCES);
            define_obsolete_register(ALL_FORT_INSTANCES_IN_ALL_MTS, $list68);
            register_cyc_api_function(ALL_ISAS_WRT, $list71, $str72$Returns_all_isa_of_term_TERM_that, $list73, $list7);
            register_cyc_api_function(UNION_ALL_ISA, $list77, $str78$Returns_all_collections_that_incl, $list79, $list7);
            register_cyc_api_function(UNION_ALL_INSTANCES, $list81, $str82$Returns_set_of_all_instances_of_e, $list83, $list7);
            register_cyc_api_function(ALL_ISA_AMONG, $list85, $str86$Returns_those_elements_of_COLLECT, $list87, $list7);
            register_cyc_api_function(ALL_INSTANCES_AMONG, $list89, $str90$Returns_those_elements_of_TERMS_t, $list91, $list59);
            register_cyc_api_function(ALL_NOT_ISA, $list4, $str96$Returns_all_collections_that_do_n, $list6, $list7);
            register_cyc_api_function(ALL_NOT_INSTANCES, $list18, $str98$Returns_all_terms_that_are_not_me, $list16, $list7);
            register_cyc_api_function(NOT_ISA_AMONG, $list85, $str100$Returns_those_elements_of_COLLECT, $list87, $list7);
            register_cyc_api_function(MAP_ALL_ISA, $list102, $str103$Apply_FUNCTION_to_every_all_isa_o, $list104, NIL);
            register_cyc_api_function(MAP_ALL_INSTANCES, $list106, $str107$Apply_FUNCTION_to_each_unique_ins, $list108, NIL);
            register_cyc_api_function(ANY_WRT_ALL_ISA, $list48, $str110$Return_the_first_encountered_non_, $list111, NIL);
            register_cyc_api_function(COUNT_ALL_INSTANCES, $list119, $str120$Counts_the_number_of_instances_in, $list63, $list121);
            register_cyc_api_function(COUNT_ALL_QUOTED_INSTANCES, $list119, $str124$Counts_the_number_of_quoted_insta, $list63, $list121);
            register_cyc_api_function($sym126$ISA_, $list127, $str128$Returns_whether_TERM_is_an_instan, $list63, $list129);
            register_cyc_api_function($sym130$ISA_IN_MTS_, $list131, $str132$is__term__an_element_of__collecti, $list63, $list129);
            register_cyc_api_function($sym133$ISA_IN_ANY_MT_, $list134, $str135$is__term__an_element_of__collecti, NIL, $list129);
            register_cyc_api_function($sym136$ANY_ISA_, $list85, $str137$Returns_whether_TERM_is_an_instan, $list87, $list129);
            register_cyc_api_function($sym138$ISA_ANY_, $list85, $str137$Returns_whether_TERM_is_an_instan, $list87, $list129);
            register_cyc_api_function($sym141$ANY_ISA_ANY_, $list142, $str143$_return_booleanp__whether_any_ter, $list144, $list129);
            register_cyc_api_function($sym145$NOT_ISA_, $list127, $str146$_return_booleanp__whether_TERM_is, $list147, $list129);
            register_cyc_api_function($sym148$WHY_ISA_, $list149, $str150$Returns_justification_of__isa_TER, $list147, $list151);
            register_cyc_api_function($sym158$WHY_NOT_ISA_, $list149, $str159$Returns_justification_of__not__is, $list147, $list151);
            register_cyc_api_function($sym160$INSTANCES_, $list119, $str161$Returns_whether_COLLECTION_has_an, $list63, $list129);
            register_cyc_api_function(MAX_FLOOR_MTS_OF_ISA_PATHS, $list166, $str167$Returns_in_what__most_genl__mts_T, $list147, NIL);
            register_cyc_api_function(MAX_FLOOR_MTS_OF_QUOTED_ISA_PATHS, $list166, $str169$Returns_in_what__most_genl__mts_T, $list147, NIL);
            register_kb_function(INSTANCEOF_AFTER_ADDING);
            register_kb_function(ISA_AFTER_ADDING);
            register_kb_function(INSTANCEOF_AFTER_REMOVING);
            register_kb_function(ISA_AFTER_REMOVING);
            register_cyc_api_function($sym192$QUOTED_ISA_, $list127, $str193$Returns_whether_TERM_is_a_quoted_, $list63, $list129);
            register_cyc_api_function($sym194$QUOTED_ISA_IN_ANY_MT_, $list134, $str135$is__term__an_element_of__collecti, NIL, $list129);
            register_cyc_api_function($sym195$ANY_QUOTED_ISA_, $list85, $str137$Returns_whether_TERM_is_an_instan, $list87, $list129);
            register_cyc_api_function($sym196$QUOTED_ISA_ANY_, $list85, $str137$Returns_whether_TERM_is_an_instan, $list87, $list129);
            register_cyc_api_function($sym197$ALL_QUOTED_ISA_, $list85, $str198$Returns_whether_TERM_is_a_quoted_, $list87, $list129);
            register_cyc_api_function($sym199$NOT_QUOTED_ISA_, $list127, $str146$_return_booleanp__whether_TERM_is, $list147, $list129);
            register_cyc_api_function(QUOTED_INSTANCES, $list14, $str15$Returns_the_asserted_instances_of, $list16, $list7);
            register_cyc_api_function(UNION_ALL_QUOTED_INSTANCES, $list81, $str202$Returns_set_of_all_quoted_instanc, $list83, $list7);
            register_cyc_api_function(MAP_ALL_QUOTED_ISA, $list102, $str204$Apply_FUNCTION_to_every_all_quote, $list104, NIL);
            register_cyc_api_function(ALL_QUOTED_ISA, $list4, $str52$Returns_all_collections_that_incl, $list6, $list7);
            register_cyc_api_function(ALL_QUOTED_ISAS_WRT, $list71, $str72$Returns_all_isa_of_term_TERM_that, $list73, $list7);
            register_cyc_api_function(ALL_QUOTED_INSTANCES, $list18, $str58$Returns_all_instances_of_COLLECTI, $list16, $list7);
            register_cyc_api_function(ALL_QUOTED_ISA_AMONG, $list85, $str210$Returns_those_elements_of_COLLECT, $list87, $list7);
            register_kb_function(QUOTED_INSTANCEOF_AFTER_ADDING);
            register_kb_function(QUOTED_INSTANCEOF_AFTER_REMOVING);
            define_test_case_table_int(MIN_COLS, list(new SubLObject[]{ $TEST, NIL, $OWNER, NIL, $CLASSES, NIL, $KB, $TINY, $WORKING_, T }), $list221);
            define_test_case_table_int(MAX_COLS, list(new SubLObject[]{ $TEST, NIL, $OWNER, NIL, $CLASSES, NIL, $KB, $TINY, $WORKING_, T }), $list221);
            define_test_case_table_int(UNION_ALL_ISA, list(new SubLObject[]{ $TEST, NIL, $OWNER, NIL, $CLASSES, NIL, $KB, $TINY, $WORKING_, T }), $list223);
            define_test_case_table_int(ALL_ISA_AMONG, list(new SubLObject[]{ $TEST, NIL, $OWNER, NIL, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), $list225);
            define_test_case_table_int(ALL_INSTANCES_AMONG, list(new SubLObject[]{ $TEST, NIL, $OWNER, NIL, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), $list226);
            define_test_case_table_int(NOT_ISA_AMONG, list(new SubLObject[]{ $TEST, NIL, $OWNER, NIL, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), $list227);
            define_test_case_table_int($sym228$ALL_INSTANCES_, list(new SubLObject[]{ $TEST, NIL, $OWNER, NIL, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), $list229);
            define_test_case_table_int($sym141$ANY_ISA_ANY_, list(new SubLObject[]{ $TEST, NIL, $OWNER, NIL, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), $list230);
        }
        if (SubLFiles.USE_V2) {
            register_cyc_api_function(MIN_ISA, $list_alt3, $str_alt4$Returns_most_specific_collections, $list_alt5, $list_alt6);
            register_cyc_api_function(MAX_NOT_ISA, $list_alt3, $str_alt9$Returns_most_general_collections_, $list_alt5, $list_alt6);
            register_cyc_api_function(INSTANCES, $list_alt13, $str_alt14$Returns_the_asserted_instances_of, $list_alt15, $list_alt6);
            register_cyc_api_function(MAX_INSTANCES, $list_alt17, $str_alt18$Returns_the_maximal_among_the_ass, $list_alt15, $list_alt6);
            register_cyc_api_function(MIN_NOT_INSTANCES, $list_alt17, $str_alt23$Returns_the_most_specific_negated, $list_alt15, $list_alt6);
            register_cyc_api_function(ISA_SIBLINGS, $list_alt3, $str_alt25$Returns_the_direct_isas_of_those_, $list_alt5, $list_alt6);
            register_cyc_api_function(INSTANCE_SIBLINGS, $list_alt3, $str_alt27$Returns_the_direct_instances_of_t, $list_alt28, $list_alt6);
            register_cyc_api_function(MAP_INSTANCES, $list_alt46, $str_alt47$apply_FUNCTION_to_every__least_ge, $list_alt48, NIL);
            register_cyc_api_function(ALL_ISA, $list_alt3, $str_alt50$Returns_all_collections_that_incl, $list_alt5, $list_alt6);
            register_cyc_api_function(ALL_INSTANCES, $list_alt17, $str_alt55$Returns_all_instances_of_COLLECTI, $list_alt15, $list_alt56);
            register_cyc_api_function(ALL_INSTANCES_IN_ALL_MTS, $list_alt58, $str_alt59$_return_listp__all_instances_of_C, $list_alt60, $list_alt56);
            define_obsolete_register(ALL_FORT_INSTANCES, $list_alt62);
            define_obsolete_register(ALL_FORT_INSTANCES_IN_ALL_MTS, $list_alt65);
            register_cyc_api_function(ALL_ISAS_WRT, $list_alt68, $str_alt69$Returns_all_isa_of_term_TERM_that, $list_alt70, $list_alt6);
            register_cyc_api_function(UNION_ALL_ISA, $list_alt73, $str_alt74$Returns_all_collections_that_incl, $list_alt75, $list_alt6);
            register_cyc_api_function(UNION_ALL_INSTANCES, $list_alt77, $str_alt78$Returns_set_of_all_instances_of_e, $list_alt79, $list_alt6);
            register_cyc_api_function(ALL_ISA_AMONG, $list_alt81, $str_alt82$Returns_those_elements_of_COLLECT, $list_alt83, $list_alt6);
            register_cyc_api_function(ALL_INSTANCES_AMONG, $list_alt85, $str_alt86$Returns_those_elements_of_TERMS_t, $list_alt87, $list_alt56);
            register_cyc_api_function(ALL_NOT_ISA, $list_alt3, $str_alt91$Returns_all_collections_that_do_n, $list_alt5, $list_alt6);
            register_cyc_api_function(ALL_NOT_INSTANCES, $list_alt17, $str_alt93$Returns_all_terms_that_are_not_me, $list_alt15, $list_alt6);
            register_cyc_api_function(NOT_ISA_AMONG, $list_alt81, $str_alt95$Returns_those_elements_of_COLLECT, $list_alt83, $list_alt6);
            register_cyc_api_function(MAP_ALL_ISA, $list_alt97, $str_alt98$Apply_FUNCTION_to_every_all_isa_o, $list_alt99, NIL);
            register_cyc_api_function(MAP_ALL_INSTANCES, $list_alt101, $str_alt102$Apply_FUNCTION_to_each_unique_ins, $list_alt103, NIL);
            register_cyc_api_function(ANY_WRT_ALL_ISA, $list_alt46, $str_alt105$Return_the_first_encountered_non_, $list_alt106, NIL);
            register_cyc_api_function(COUNT_ALL_INSTANCES, $list_alt114, $str_alt115$Counts_the_number_of_instances_in, $list_alt60, $list_alt116);
            register_cyc_api_function(COUNT_ALL_QUOTED_INSTANCES, $list_alt114, $str_alt119$Counts_the_number_of_quoted_insta, $list_alt60, $list_alt116);
            register_cyc_api_function($sym121$ISA_, $list_alt122, $str_alt123$Returns_whether_TERM_is_an_instan, $list_alt60, $list_alt124);
            register_cyc_api_function($sym125$ISA_IN_MTS_, $list_alt126, $str_alt127$is__term__an_element_of__collecti, $list_alt60, $list_alt124);
            register_cyc_api_function($sym128$ISA_IN_ANY_MT_, $list_alt129, $str_alt130$is__term__an_element_of__collecti, NIL, $list_alt124);
            register_cyc_api_function($sym131$ANY_ISA_, $list_alt81, $str_alt132$Returns_whether_TERM_is_an_instan, $list_alt83, $list_alt124);
            register_cyc_api_function($sym133$ISA_ANY_, $list_alt81, $str_alt132$Returns_whether_TERM_is_an_instan, $list_alt83, $list_alt124);
            register_cyc_api_function($sym137$ANY_ISA_ANY_, $list_alt138, $str_alt139$_return_booleanp__whether_any_ter, $list_alt140, $list_alt124);
            register_cyc_api_function($sym141$NOT_ISA_, $list_alt122, $str_alt142$_return_booleanp__whether_TERM_is, $list_alt143, $list_alt124);
            register_cyc_api_function($sym144$WHY_ISA_, $list_alt145, $str_alt146$Returns_justification_of__isa_TER, $list_alt143, $list_alt147);
            register_cyc_api_function($sym154$WHY_NOT_ISA_, $list_alt145, $str_alt155$Returns_justification_of__not__is, $list_alt143, $list_alt147);
            register_cyc_api_function($sym156$INSTANCES_, $list_alt114, $str_alt157$Returns_whether_COLLECTION_has_an, $list_alt60, $list_alt124);
            register_cyc_api_function(MAX_FLOOR_MTS_OF_ISA_PATHS, $list_alt162, $str_alt163$Returns_in_what__most_genl__mts_T, $list_alt143, NIL);
            register_cyc_api_function($sym186$QUOTED_ISA_, $list_alt122, $str_alt187$Returns_whether_TERM_is_a_quoted_, $list_alt60, $list_alt124);
            register_cyc_api_function($sym188$QUOTED_ISA_IN_ANY_MT_, $list_alt129, $str_alt130$is__term__an_element_of__collecti, NIL, $list_alt124);
            register_cyc_api_function($sym189$ANY_QUOTED_ISA_, $list_alt81, $str_alt132$Returns_whether_TERM_is_an_instan, $list_alt83, $list_alt124);
            register_cyc_api_function($sym190$QUOTED_ISA_ANY_, $list_alt81, $str_alt132$Returns_whether_TERM_is_an_instan, $list_alt83, $list_alt124);
            register_cyc_api_function($sym191$ALL_QUOTED_ISA_, $list_alt81, $str_alt192$Returns_whether_TERM_is_a_quoted_, $list_alt83, $list_alt124);
            register_cyc_api_function($sym193$NOT_QUOTED_ISA_, $list_alt122, $str_alt142$_return_booleanp__whether_TERM_is, $list_alt143, $list_alt124);
            register_cyc_api_function(QUOTED_INSTANCES, $list_alt13, $str_alt14$Returns_the_asserted_instances_of, $list_alt15, $list_alt6);
            register_cyc_api_function(UNION_ALL_QUOTED_INSTANCES, $list_alt77, $str_alt196$Returns_set_of_all_quoted_instanc, $list_alt79, $list_alt6);
            register_cyc_api_function(MAP_ALL_QUOTED_ISA, $list_alt97, $str_alt198$Apply_FUNCTION_to_every_all_quote, $list_alt99, NIL);
            register_cyc_api_function(ALL_QUOTED_ISA, $list_alt3, $str_alt50$Returns_all_collections_that_incl, $list_alt5, $list_alt6);
            register_cyc_api_function(ALL_QUOTED_ISAS_WRT, $list_alt68, $str_alt69$Returns_all_isa_of_term_TERM_that, $list_alt70, $list_alt6);
            register_cyc_api_function(ALL_QUOTED_INSTANCES, $list_alt17, $str_alt55$Returns_all_instances_of_COLLECTI, $list_alt15, $list_alt6);
            register_cyc_api_function(ALL_QUOTED_ISA_AMONG, $list_alt81, $str_alt204$Returns_those_elements_of_COLLECT, $list_alt83, $list_alt6);
            define_test_case_table_int(MIN_COLS, list(new SubLObject[]{ $TEST, NIL, $OWNER, $$$kknight, $CLASSES, NIL, $KB, $TINY, $WORKING_, T }), $list_alt216);
            define_test_case_table_int(MAX_COLS, list(new SubLObject[]{ $TEST, NIL, $OWNER, $$$kknight, $CLASSES, NIL, $KB, $TINY, $WORKING_, T }), $list_alt216);
            define_test_case_table_int(UNION_ALL_ISA, list(new SubLObject[]{ $TEST, NIL, $OWNER, $$$kknight, $CLASSES, NIL, $KB, $TINY, $WORKING_, T }), $list_alt218);
            define_test_case_table_int(ALL_ISA_AMONG, list(new SubLObject[]{ $TEST, NIL, $OWNER, $$$kknight, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), $list_alt220);
            define_test_case_table_int(ALL_INSTANCES_AMONG, list(new SubLObject[]{ $TEST, NIL, $OWNER, $$$kknight, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), $list_alt221);
            define_test_case_table_int(NOT_ISA_AMONG, list(new SubLObject[]{ $TEST, NIL, $OWNER, $$$kknight, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), $list_alt222);
            define_test_case_table_int($sym223$ALL_INSTANCES_, list(new SubLObject[]{ $TEST, NIL, $OWNER, $$$kknight, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), $list_alt224);
            define_test_case_table_int($sym137$ANY_ISA_ANY_, list(new SubLObject[]{ $TEST, NIL, $OWNER, $$$kknight, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), $list_alt225);
        }
        return NIL;
    }

    public static SubLObject setup_isa_file_Previous() {
        register_cyc_api_function(MIN_ISA, $list4, $str5$Returns_most_specific_collections, $list6, $list7);
        register_cyc_api_function(MAX_NOT_ISA, $list4, $str10$Returns_most_general_collections_, $list6, $list7);
        register_cyc_api_function(INSTANCES, $list14, $str15$Returns_the_asserted_instances_of, $list16, $list7);
        register_cyc_api_function(MAX_INSTANCES, $list18, $str19$Returns_the_maximal_among_the_ass, $list16, $list7);
        register_external_symbol(ALL_INSTANCES_WITH_MAX);
        register_cyc_api_function(MIN_NOT_INSTANCES, $list18, $str24$Returns_the_most_specific_negated, $list16, $list7);
        register_cyc_api_function(ISA_SIBLINGS, $list4, $str26$Returns_the_direct_isas_of_those_, $list6, $list7);
        register_cyc_api_function(INSTANCE_SIBLINGS, $list4, $str28$Returns_the_direct_instances_of_t, $list29, $list7);
        register_cyc_api_function(MAP_INSTANCES, $list48, $str49$apply_FUNCTION_to_every__least_ge, $list50, NIL);
        register_cyc_api_function(ALL_ISA, $list4, $str52$Returns_all_collections_that_incl, $list6, $list53);
        register_cyc_api_function(ALL_INSTANCES, $list18, $str58$Returns_all_instances_of_COLLECTI, $list16, $list59);
        register_cyc_api_function(ALL_INSTANCES_IN_ALL_MTS, $list61, $str62$_return_listp__all_instances_of_C, $list63, $list59);
        define_obsolete_register(ALL_FORT_INSTANCES, $list65);
        register_external_symbol(ALL_FORT_INSTANCES);
        define_obsolete_register(ALL_FORT_INSTANCES_IN_ALL_MTS, $list68);
        register_cyc_api_function(ALL_ISAS_WRT, $list71, $str72$Returns_all_isa_of_term_TERM_that, $list73, $list7);
        register_cyc_api_function(UNION_ALL_ISA, $list77, $str78$Returns_all_collections_that_incl, $list79, $list7);
        register_cyc_api_function(UNION_ALL_INSTANCES, $list81, $str82$Returns_set_of_all_instances_of_e, $list83, $list7);
        register_cyc_api_function(ALL_ISA_AMONG, $list85, $str86$Returns_those_elements_of_COLLECT, $list87, $list7);
        register_cyc_api_function(ALL_INSTANCES_AMONG, $list89, $str90$Returns_those_elements_of_TERMS_t, $list91, $list59);
        register_cyc_api_function(ALL_NOT_ISA, $list4, $str96$Returns_all_collections_that_do_n, $list6, $list7);
        register_cyc_api_function(ALL_NOT_INSTANCES, $list18, $str98$Returns_all_terms_that_are_not_me, $list16, $list7);
        register_cyc_api_function(NOT_ISA_AMONG, $list85, $str100$Returns_those_elements_of_COLLECT, $list87, $list7);
        register_cyc_api_function(MAP_ALL_ISA, $list102, $str103$Apply_FUNCTION_to_every_all_isa_o, $list104, NIL);
        register_cyc_api_function(MAP_ALL_INSTANCES, $list106, $str107$Apply_FUNCTION_to_each_unique_ins, $list108, NIL);
        register_cyc_api_function(ANY_WRT_ALL_ISA, $list48, $str110$Return_the_first_encountered_non_, $list111, NIL);
        register_cyc_api_function(COUNT_ALL_INSTANCES, $list119, $str120$Counts_the_number_of_instances_in, $list63, $list121);
        register_cyc_api_function(COUNT_ALL_QUOTED_INSTANCES, $list119, $str124$Counts_the_number_of_quoted_insta, $list63, $list121);
        register_cyc_api_function($sym126$ISA_, $list127, $str128$Returns_whether_TERM_is_an_instan, $list63, $list129);
        register_cyc_api_function($sym130$ISA_IN_MTS_, $list131, $str132$is__term__an_element_of__collecti, $list63, $list129);
        register_cyc_api_function($sym133$ISA_IN_ANY_MT_, $list134, $str135$is__term__an_element_of__collecti, NIL, $list129);
        register_cyc_api_function($sym136$ANY_ISA_, $list85, $str137$Returns_whether_TERM_is_an_instan, $list87, $list129);
        register_cyc_api_function($sym138$ISA_ANY_, $list85, $str137$Returns_whether_TERM_is_an_instan, $list87, $list129);
        register_cyc_api_function($sym141$ANY_ISA_ANY_, $list142, $str143$_return_booleanp__whether_any_ter, $list144, $list129);
        register_cyc_api_function($sym145$NOT_ISA_, $list127, $str146$_return_booleanp__whether_TERM_is, $list147, $list129);
        register_cyc_api_function($sym148$WHY_ISA_, $list149, $str150$Returns_justification_of__isa_TER, $list147, $list151);
        register_cyc_api_function($sym158$WHY_NOT_ISA_, $list149, $str159$Returns_justification_of__not__is, $list147, $list151);
        register_cyc_api_function($sym160$INSTANCES_, $list119, $str161$Returns_whether_COLLECTION_has_an, $list63, $list129);
        register_cyc_api_function(MAX_FLOOR_MTS_OF_ISA_PATHS, $list166, $str167$Returns_in_what__most_genl__mts_T, $list147, NIL);
        register_cyc_api_function(MAX_FLOOR_MTS_OF_QUOTED_ISA_PATHS, $list166, $str169$Returns_in_what__most_genl__mts_T, $list147, NIL);
        register_kb_function(INSTANCEOF_AFTER_ADDING);
        register_kb_function(ISA_AFTER_ADDING);
        register_kb_function(INSTANCEOF_AFTER_REMOVING);
        register_kb_function(ISA_AFTER_REMOVING);
        register_cyc_api_function($sym192$QUOTED_ISA_, $list127, $str193$Returns_whether_TERM_is_a_quoted_, $list63, $list129);
        register_cyc_api_function($sym194$QUOTED_ISA_IN_ANY_MT_, $list134, $str135$is__term__an_element_of__collecti, NIL, $list129);
        register_cyc_api_function($sym195$ANY_QUOTED_ISA_, $list85, $str137$Returns_whether_TERM_is_an_instan, $list87, $list129);
        register_cyc_api_function($sym196$QUOTED_ISA_ANY_, $list85, $str137$Returns_whether_TERM_is_an_instan, $list87, $list129);
        register_cyc_api_function($sym197$ALL_QUOTED_ISA_, $list85, $str198$Returns_whether_TERM_is_a_quoted_, $list87, $list129);
        register_cyc_api_function($sym199$NOT_QUOTED_ISA_, $list127, $str146$_return_booleanp__whether_TERM_is, $list147, $list129);
        register_cyc_api_function(QUOTED_INSTANCES, $list14, $str15$Returns_the_asserted_instances_of, $list16, $list7);
        register_cyc_api_function(UNION_ALL_QUOTED_INSTANCES, $list81, $str202$Returns_set_of_all_quoted_instanc, $list83, $list7);
        register_cyc_api_function(MAP_ALL_QUOTED_ISA, $list102, $str204$Apply_FUNCTION_to_every_all_quote, $list104, NIL);
        register_cyc_api_function(ALL_QUOTED_ISA, $list4, $str52$Returns_all_collections_that_incl, $list6, $list7);
        register_cyc_api_function(ALL_QUOTED_ISAS_WRT, $list71, $str72$Returns_all_isa_of_term_TERM_that, $list73, $list7);
        register_cyc_api_function(ALL_QUOTED_INSTANCES, $list18, $str58$Returns_all_instances_of_COLLECTI, $list16, $list7);
        register_cyc_api_function(ALL_QUOTED_ISA_AMONG, $list85, $str210$Returns_those_elements_of_COLLECT, $list87, $list7);
        register_kb_function(QUOTED_INSTANCEOF_AFTER_ADDING);
        register_kb_function(QUOTED_INSTANCEOF_AFTER_REMOVING);
        define_test_case_table_int(MIN_COLS, list(new SubLObject[]{ $TEST, NIL, $OWNER, NIL, $CLASSES, NIL, $KB, $TINY, $WORKING_, T }), $list221);
        define_test_case_table_int(MAX_COLS, list(new SubLObject[]{ $TEST, NIL, $OWNER, NIL, $CLASSES, NIL, $KB, $TINY, $WORKING_, T }), $list221);
        define_test_case_table_int(UNION_ALL_ISA, list(new SubLObject[]{ $TEST, NIL, $OWNER, NIL, $CLASSES, NIL, $KB, $TINY, $WORKING_, T }), $list223);
        define_test_case_table_int(ALL_ISA_AMONG, list(new SubLObject[]{ $TEST, NIL, $OWNER, NIL, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), $list225);
        define_test_case_table_int(ALL_INSTANCES_AMONG, list(new SubLObject[]{ $TEST, NIL, $OWNER, NIL, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), $list226);
        define_test_case_table_int(NOT_ISA_AMONG, list(new SubLObject[]{ $TEST, NIL, $OWNER, NIL, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), $list227);
        define_test_case_table_int($sym228$ALL_INSTANCES_, list(new SubLObject[]{ $TEST, NIL, $OWNER, NIL, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), $list229);
        define_test_case_table_int($sym141$ANY_ISA_ANY_, list(new SubLObject[]{ $TEST, NIL, $OWNER, NIL, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), $list230);
        return NIL;
    }

    @Override
    public void declareFunctions() {
        declare_isa_file();
    }

    @Override
    public void initializeVariables() {
        init_isa_file();
    }

    @Override
    public void runTopLevelForms() {
        setup_isa_file();
    }

    static {
    }

    public static final class $instanceof_after_adding$BinaryFunction extends BinaryFunction {
        public $instanceof_after_adding$BinaryFunction() {
            super(extractFunctionNamed("INSTANCEOF-AFTER-ADDING"));
        }

        @Override
        public SubLObject processItem(final SubLObject arg1, final SubLObject arg2) {
            return instanceof_after_adding(arg1, arg2);
        }
    }

    public static final class $instanceof_after_removing$BinaryFunction extends BinaryFunction {
        public $instanceof_after_removing$BinaryFunction() {
            super(extractFunctionNamed("INSTANCEOF-AFTER-REMOVING"));
        }

        @Override
        public SubLObject processItem(final SubLObject arg1, final SubLObject arg2) {
            return instanceof_after_removing(arg1, arg2);
        }
    }

    static private final SubLList $list_alt3 = list(makeSymbol("TERM"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    static private final SubLString $str_alt4$Returns_most_specific_collections = makeString("Returns most-specific collections that include TERM (inexpensive)");

    static private final SubLList $list_alt5 = list(list(makeSymbol("TERM"), makeSymbol("HL-TERM-P")));

    static private final SubLList $list_alt6 = list(list(makeSymbol("LIST"), makeSymbol("FORT-P")));

    static private final SubLString $str_alt9$Returns_most_general_collections_ = makeString("Returns most-general collections that do not include TERM (expensive)");

    static private final SubLList $list_alt13 = list(makeSymbol("COL"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), list(makeSymbol("TV"), reader_make_constant_shell("True-JustificationTruth")));

    static private final SubLString $str_alt14$Returns_the_asserted_instances_of = makeString("Returns the asserted instances of COL");

    static private final SubLList $list_alt15 = list(list(makeSymbol("COL"), makeSymbol("EL-FORT-P")));

    static private final SubLList $list_alt17 = list(makeSymbol("COL"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    static private final SubLString $str_alt18$Returns_the_maximal_among_the_ass = makeString("Returns the maximal among the asserted instances of COL");

    static private final SubLString $str_alt23$Returns_the_most_specific_negated = makeString("Returns the most-specific negated instances of collection COL");

    static private final SubLString $str_alt25$Returns_the_direct_isas_of_those_ = makeString("Returns the direct isas of those collections of which TERM is a direct instance");

    static private final SubLString $str_alt27$Returns_the_direct_instances_of_t = makeString("Returns the direct instances of those collections having direct isa TERM");

    static private final SubLList $list_alt28 = list(list(makeSymbol("TERM"), makeSymbol("EL-FORT-P")));

    static private final SubLString $str_alt31$_A_is_not_a__A = makeString("~A is not a ~A");

    static private final SubLString $str_alt36$_A_is_not_a_valid__sbhl_type_erro = makeString("~A is not a valid *sbhl-type-error-action* value");

    static private final SubLString $str_alt38$attempting_to_bind_direction_link = makeString("attempting to bind direction link variable, to NIL. macro body not executed.");

    static private final SubLList $list_alt41 = list(makeSymbol("ISA"), makeUninternedSymbol("TABLE-MT"), makeUninternedSymbol("TABLE-TV"));

    static private final SubLList $list_alt43 = list(makeUninternedSymbol("NAUT"), makeUninternedSymbol("ISA-MT"), makeUninternedSymbol("ISA-TV"));

    static private final SubLList $list_alt46 = list(makeSymbol("FUNCTION"), makeSymbol("TERM"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    static private final SubLString $str_alt47$apply_FUNCTION_to_every__least_ge = makeString("apply FUNCTION to every (least general) #$isa of TERM");

    static private final SubLList $list_alt48 = list(list(makeSymbol("FUNCTION"), makeSymbol("FUNCTION-SPEC-P")), list(makeSymbol("TERM"), makeSymbol("EL-FORT-P")));

    static private final SubLString $str_alt50$Returns_all_collections_that_incl = makeString("Returns all collections that include TERM (inexpensive)");

    static private final SubLString $str_alt55$Returns_all_instances_of_COLLECTI = makeString("Returns all instances of COLLECTION (expensive)");

    static private final SubLList $list_alt56 = list(list(makeSymbol("LIST"), makeSymbol("HL-TERM-P")));

    static private final SubLList $list_alt58 = list(makeSymbol("COLLECTION"));

    static private final SubLString $str_alt59$_return_listp__all_instances_of_C = makeString("@return listp; all instances of COLLECTION in all mts.");

    static private final SubLList $list_alt60 = list(list(makeSymbol("COLLECTION"), makeSymbol("EL-FORT-P")));

    static private final SubLList $list_alt62 = list(makeSymbol("ALL-FORT-INSTANCES"));

    static private final SubLList $list_alt65 = list(makeSymbol("ALL-INSTANCES-IN-ALL-MTS"));

    static private final SubLList $list_alt68 = list(makeSymbol("TERM"), makeSymbol("ISA"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    static private final SubLString $str_alt69$Returns_all_isa_of_term_TERM_that = makeString("Returns all isa of term TERM that are also instances of collection ISA (ascending transitive closure; inexpensive)");

    static private final SubLList $list_alt70 = list(list(makeSymbol("TERM"), makeSymbol("EL-FORT-P")), list(makeSymbol("ISA"), makeSymbol("EL-FORT-P")));

    static private final SubLList $list_alt73 = list(makeSymbol("TERMS"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    static private final SubLString $str_alt74$Returns_all_collections_that_incl = makeString("Returns all collections that include any term in TERMS (inexpensive)");

    static private final SubLList $list_alt75 = list(list(makeSymbol("TERMS"), makeSymbol("LISTP")));

    static private final SubLList $list_alt77 = list(makeSymbol("COLS"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    static private final SubLString $str_alt78$Returns_set_of_all_instances_of_e = makeString("Returns set of all instances of each collection in COLS (expensive)");

    static private final SubLList $list_alt79 = list(list(makeSymbol("COLS"), makeSymbol("LISTP")));

    static private final SubLList $list_alt81 = list(makeSymbol("TERM"), makeSymbol("COLLECTIONS"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    static private final SubLString $str_alt82$Returns_those_elements_of_COLLECT = makeString("Returns those elements of COLLECTIONS that include TERM as an all-instance");

    static private final SubLList $list_alt83 = list(list(makeSymbol("TERM"), makeSymbol("HL-TERM-P")), list(makeSymbol("COLLECTIONS"), makeSymbol("LISTP")));

    static private final SubLList $list_alt85 = list(makeSymbol("COL"), makeSymbol("TERMS"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    static private final SubLString $str_alt86$Returns_those_elements_of_TERMS_t = makeString("Returns those elements of TERMS that include COL as an all-isa");

    static private final SubLList $list_alt87 = list(list(makeSymbol("COL"), makeSymbol("HL-TERM-P")), list(makeSymbol("TERMS"), makeSymbol("LISTP")));

    static private final SubLString $str_alt91$Returns_all_collections_that_do_n = makeString("Returns all collections that do not include TERM (expensive)");

    static private final SubLString $str_alt93$Returns_all_terms_that_are_not_me = makeString("Returns all terms that are not members of col (by assertion)");

    static private final SubLString $str_alt95$Returns_those_elements_of_COLLECT = makeString("Returns those elements of COLLECTIONS that do NOT include TERM");

    static private final SubLList $list_alt97 = list(makeSymbol("FN"), makeSymbol("TERM"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    static private final SubLString $str_alt98$Apply_FUNCTION_to_every_all_isa_o = makeString("Apply FUNCTION to every all-isa of TERM\n   (FUNCTION must not affect the current sbhl search state)");

    static private final SubLList $list_alt99 = list(list(makeSymbol("FN"), makeSymbol("FUNCTION-SPEC-P")), list(makeSymbol("TERM"), makeSymbol("HL-TERM-P")));

    static private final SubLList $list_alt101 = list(makeSymbol("FN"), makeSymbol("COL"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    static private final SubLString $str_alt102$Apply_FUNCTION_to_each_unique_ins = makeString("Apply FUNCTION to each unique instance of all specs of COLLECTION.");

    static private final SubLList $list_alt103 = list(list(makeSymbol("FN"), makeSymbol("FUNCTION-SPEC-P")), list(makeSymbol("COL"), makeSymbol("EL-FORT-P")));

    static private final SubLString $str_alt105$Return_the_first_encountered_non_ = makeString("Return the first encountered non-nil result of applying FUNCTION to the all-isa of TERM\n   (FUNCTION may not affect the current sbhl search state)");

    static private final SubLList $list_alt106 = list(list(makeSymbol("FUNCTION"), makeSymbol("FUNCTION-SPEC-P")), list(makeSymbol("TERM"), makeSymbol("HL-TERM-P")));

    static private final SubLSymbol $sym107$ISA__GOAL = makeSymbol("ISA?-GOAL");

    static private final SubLList $list_alt111 = list(makeUninternedSymbol("LINK-NODE"), makeUninternedSymbol("MT"), makeUninternedSymbol("TV"));

    static private final SubLString $str_alt112$Node__a_does_not_pass_sbhl_type_t = makeString("Node ~a does not pass sbhl-type-test ~a~%");

    static private final SubLList $list_alt114 = list(makeSymbol("COLLECTION"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    static private final SubLString $str_alt115$Counts_the_number_of_instances_in = makeString("Counts the number of instances in COLLECTION and then returns the count.");

    static private final SubLList $list_alt116 = list(makeSymbol("INTEGERP"));

    static private final SubLString $str_alt119$Counts_the_number_of_quoted_insta = makeString("Counts the number of quoted instances in COLLECTION and then returns the count.");

    static private final SubLSymbol $sym121$ISA_ = makeSymbol("ISA?");

    static private final SubLList $list_alt122 = list(makeSymbol("TERM"), makeSymbol("COLLECTION"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    static private final SubLString $str_alt123$Returns_whether_TERM_is_an_instan = makeString("Returns whether TERM is an instance of COLLECTION via the SBHL, i.e. isa and genls assertions.\n@note This function does _not_ use defns to determine membership in COLLECTION.\n@see has-type?\n@see quiet-has-type?");

    static private final SubLList $list_alt124 = list(makeSymbol("BOOLEANP"));

    static private final SubLSymbol $sym125$ISA_IN_MTS_ = makeSymbol("ISA-IN-MTS?");

    static private final SubLList $list_alt126 = list(makeSymbol("TERM"), makeSymbol("COLLECTION"), makeSymbol("MTS"));

    static private final SubLString $str_alt127$is__term__an_element_of__collecti = makeString("is <term> an element of <collection> via assertions in any mt in <mts>");

    static private final SubLSymbol $sym128$ISA_IN_ANY_MT_ = makeSymbol("ISA-IN-ANY-MT?");

    static private final SubLList $list_alt129 = list(makeSymbol("TERM"), makeSymbol("COLLECTION"));

    static private final SubLString $str_alt130$is__term__an_element_of__collecti = makeString("is <term> an element of <collection> in any mt");

    static private final SubLSymbol $sym131$ANY_ISA_ = makeSymbol("ANY-ISA?");

    static private final SubLString $str_alt132$Returns_whether_TERM_is_an_instan = makeString("Returns whether TERM is an instance of any collection in COLLECTIONS");

    static private final SubLSymbol $sym133$ISA_ANY_ = makeSymbol("ISA-ANY?");

    static private final SubLString $str_alt135$_A_is_not_a_collection = makeString("~A is not a collection");

    static private final SubLSymbol $sym137$ANY_ISA_ANY_ = makeSymbol("ANY-ISA-ANY?");

    static private final SubLList $list_alt138 = list(makeSymbol("TERMS"), makeSymbol("COLLECTIONS"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"));

    static private final SubLString $str_alt139$_return_booleanp__whether_any_ter = makeString("@return booleanp; whether any term in TERMS is an instance of any collection in COLLECTIONS");

    static private final SubLList $list_alt140 = list(list(makeSymbol("TERMS"), makeSymbol("LISTP")), list(makeSymbol("COLLECTIONS"), makeSymbol("LISTP")));

    static private final SubLSymbol $sym141$NOT_ISA_ = makeSymbol("NOT-ISA?");

    static private final SubLString $str_alt142$_return_booleanp__whether_TERM_is = makeString("@return booleanp; whether TERM is known to not be an instance of COLLECTION");

    static private final SubLList $list_alt143 = list(list(makeSymbol("TERM"), makeSymbol("HL-TERM-P")), list(makeSymbol("COLLECTION"), makeSymbol("EL-FORT-P")));

    static private final SubLSymbol $sym144$WHY_ISA_ = makeSymbol("WHY-ISA?");

    static private final SubLList $list_alt145 = list(makeSymbol("TERM"), makeSymbol("COLLECTION"), makeSymbol("&OPTIONAL"), makeSymbol("MT"), makeSymbol("TV"), makeSymbol("BEHAVIOR"));

    static private final SubLString $str_alt146$Returns_justification_of__isa_TER = makeString("Returns justification of (isa TERM COLLECTION)");

    static private final SubLList $list_alt147 = list(makeSymbol("LISTP"));

    static private final SubLList $list_alt149 = list($TRUE);

    static private final SubLSymbol $sym154$WHY_NOT_ISA_ = makeSymbol("WHY-NOT-ISA?");

    static private final SubLString $str_alt155$Returns_justification_of__not__is = makeString("Returns justification of (not (isa TERM COLLECTION))");

    static private final SubLSymbol $sym156$INSTANCES_ = makeSymbol("INSTANCES?");

    static private final SubLString $str_alt157$Returns_whether_COLLECTION_has_an = makeString("Returns whether COLLECTION has any direct instances");

    static private final SubLList $list_alt162 = list(makeSymbol("TERM"), makeSymbol("COLLECTION"), makeSymbol("&OPTIONAL"), makeSymbol("TV"));

    static private final SubLString $str_alt163$Returns_in_what__most_genl__mts_T = makeString("Returns in what (most-genl) mts TERM is an instance of COLLECTION");

    static private final SubLSymbol $sym168$SETS_EQUAL_ = makeSymbol("SETS-EQUAL?");

    static private final SubLList $list_alt174 = list(ONE_INTEGER);

    static private final SubLList $list_alt177 = list(makeSymbol("ISA"), makeSymbol("TERM"), makeSymbol("SUBSET-EXPR"));

    static private final SubLList $list_alt179 = list(makeSymbol("CSFN"), makeSymbol("COL"), makeSymbol("COLEXPR"));

    static private final SubLList $list_alt180 = list(makeSymbol("ISA"), makeSymbol("TERM"), makeSymbol("COLEXPR"));

    static private final SubLList $list_alt182 = list(makeSymbol("TSO"), makeSymbol("VAR"), makeSymbol("PROP"));

    static private final SubLSymbol $sym186$QUOTED_ISA_ = makeSymbol("QUOTED-ISA?");

    static private final SubLString $str_alt187$Returns_whether_TERM_is_a_quoted_ = makeString("Returns whether TERM is a quoted instance of COLLECTION via the SBHL, i.e. quotedIsa and genls assertions.\n@note This function does _not_ use defns to determine membership in COLLECTION.\n@see has-type?\n@see quiet-has-type?");

    static private final SubLSymbol $sym188$QUOTED_ISA_IN_ANY_MT_ = makeSymbol("QUOTED-ISA-IN-ANY-MT?");

    static private final SubLSymbol $sym189$ANY_QUOTED_ISA_ = makeSymbol("ANY-QUOTED-ISA?");

    static private final SubLSymbol $sym190$QUOTED_ISA_ANY_ = makeSymbol("QUOTED-ISA-ANY?");

    static private final SubLSymbol $sym191$ALL_QUOTED_ISA_ = makeSymbol("ALL-QUOTED-ISA?");

    static private final SubLString $str_alt192$Returns_whether_TERM_is_a_quoted_ = makeString("Returns whether TERM is a quoted instance of all collections in COLLECTIONS");

    static private final SubLSymbol $sym193$NOT_QUOTED_ISA_ = makeSymbol("NOT-QUOTED-ISA?");

    static private final SubLString $str_alt196$Returns_set_of_all_quoted_instanc = makeString("Returns set of all quoted instances of each collection in COLS (expensive)");

    static private final SubLString $str_alt198$Apply_FUNCTION_to_every_all_quote = makeString("Apply FUNCTION to every all-quoted-isa of TERM\n   (FUNCTION must not affect the current sbhl search state)");

    static private final SubLList $list_alt199 = list(makeUninternedSymbol("NAUT"), makeUninternedSymbol("QUOTED-ISA-MT"), makeUninternedSymbol("QUOTED-ISA-TV"));

    static private final SubLString $str_alt204$Returns_those_elements_of_COLLECT = makeString("Returns those elements of COLLECTIONS that include TERM as an all-quoted-instance");

    static private final SubLString $$$kknight = makeString("kknight");

    static private final SubLList $list_alt216 = list(list(list(NIL), NIL), list(list(list(reader_make_constant_shell("Thing"))), list(reader_make_constant_shell("Thing"))));

    static private final SubLList $list_alt218 = list(list(list(NIL), NIL));

    static private final SubLList $list_alt220 = list(list(list(reader_make_constant_shell("Thing"), list(reader_make_constant_shell("Collection"))), list(reader_make_constant_shell("Collection"))), list(list(reader_make_constant_shell("Muffet"), NIL), NIL));

    static private final SubLList $list_alt221 = list(list(list(reader_make_constant_shell("Female"), list(reader_make_constant_shell("Muffet")), reader_make_constant_shell("CyclistsMt")), list(reader_make_constant_shell("Muffet"))), list(list(reader_make_constant_shell("Female"), NIL, reader_make_constant_shell("CyclistsMt")), NIL), list(list(reader_make_constant_shell("Female"), NIL), NIL));

    static private final SubLList $list_alt222 = list(list(list(reader_make_constant_shell("Muffet"), list(reader_make_constant_shell("Male")), reader_make_constant_shell("CyclistsMt")), list(reader_make_constant_shell("Male"))));

    static private final SubLSymbol $sym223$ALL_INSTANCES_ = makeSymbol("ALL-INSTANCES?");

    static private final SubLList $list_alt224 = list(list(list(NIL, reader_make_constant_shell("Female")), T), list(list(list(QUOTE, list(reader_make_constant_shell("Muffet"))), reader_make_constant_shell("Female")), T));

    static private final SubLList $list_alt225 = list(list(list(list(reader_make_constant_shell("Muffet")), list(reader_make_constant_shell("Poodle")), reader_make_constant_shell("CyclistsMt")), T));
}

/**
 * Total time: 13047 ms synthetic
 */
