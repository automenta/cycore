/**
 * Copyright (c) 1995 - 2019 Cycorp, Inc.  All rights reserved.
 */
package com.cyc.cycjava.cycl;


import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.*;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.append;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.cons;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.list;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.nconc;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.gethash_without_values;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.make_hash_table;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.sethash;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.length;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.symbol_function;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeInteger;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeKeyword;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeString;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeSymbol;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind.cdestructuring_bind_error;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind.destructuring_bind_must_consp;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind.destructuring_bind_must_listp;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.assoc;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.copy_list;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.second;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.third;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.reader.bq_cons;
import static com.cyc.tool.subl.util.SubLFiles.declareFunction;
import static com.cyc.tool.subl.util.SubLFiles.deflexical;

import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLList;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObject;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLInteger;
import com.cyc.tool.subl.jrtl.nativeCode.type.symbol.SubLSymbol;
import com.cyc.tool.subl.util.SubLFile;
import com.cyc.tool.subl.util.SubLFiles.LispMethod;
import com.cyc.tool.subl.util.SubLTranslatedFile;


/**
 * Copyright (c) 1995 - 2019 Cycorp, Inc.  All rights reserved.
 * module:      C-NAME-TRANSLATION
 * source file: /cyc/top/cycl/c-name-translation.lisp
 * created:     2019/07/03 17:39:07
 */
public final class c_name_translation extends SubLTranslatedFile implements V12 {
    public static final SubLFile me = new c_name_translation();

 public static final String myName = "com.cyc.cycjava.cycl.c_name_translation";


    // deflexical
    @LispMethod(comment = "deflexical")
    // Definitions
    private static final SubLSymbol $c_backend_defined_function_name_data$ = makeSymbol("*C-BACKEND-DEFINED-FUNCTION-NAME-DATA*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $c_backend_undefined_function_name_data$ = makeSymbol("*C-BACKEND-UNDEFINED-FUNCTION-NAME-DATA*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $c_backend_function_arity_version_table$ = makeSymbol("*C-BACKEND-FUNCTION-ARITY-VERSION-TABLE*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $c_backend_undefined_arity_function_name_data$ = makeSymbol("*C-BACKEND-UNDEFINED-ARITY-FUNCTION-NAME-DATA*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $c_backend_function_boolean_version_table$ = makeSymbol("*C-BACKEND-FUNCTION-BOOLEAN-VERSION-TABLE*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $c_backend_function_boolean_hash$ = makeSymbol("*C-BACKEND-FUNCTION-BOOLEAN-HASH*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $c_backend_undefined_boolean_function_name_data$ = makeSymbol("*C-BACKEND-UNDEFINED-BOOLEAN-FUNCTION-NAME-DATA*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $c_backend_function_name_table$ = makeSymbol("*C-BACKEND-FUNCTION-NAME-TABLE*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $c_backend_function_arglist_table$ = makeSymbol("*C-BACKEND-FUNCTION-ARGLIST-TABLE*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $c_backend_predefined_constant_table$ = makeSymbol("*C-BACKEND-PREDEFINED-CONSTANT-TABLE*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $c_backend_defined_global_name_data$ = makeSymbol("*C-BACKEND-DEFINED-GLOBAL-NAME-DATA*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $c_backend_undefined_global_name_data$ = makeSymbol("*C-BACKEND-UNDEFINED-GLOBAL-NAME-DATA*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $c_backend_global_name_table$ = makeSymbol("*C-BACKEND-GLOBAL-NAME-TABLE*");

    // Internal Constants
    @LispMethod(comment = "Internal Constants")
    public static final SubLObject $list0 = _constant_0_initializer();

    public static final SubLObject $list1 = _constant_1_initializer();

    static private final SubLList $list2 = list(makeSymbol("OPERATOR"), makeSymbol("&REST"), makeSymbol("ARGS"));

    static private final SubLList $list3 = list(list(makeSymbol("*"), cons(TWO_INTEGER, makeSymbol("%MULT2"))), list(makeSymbol("+"), cons(TWO_INTEGER, makeSymbol("%ADD2"))), list(makeSymbol("-"), cons(ONE_INTEGER, makeSymbol("%MINUS")), cons(TWO_INTEGER, makeSymbol("%SUB2"))), list(makeSymbol("/"), cons(ONE_INTEGER, makeSymbol("%INVERT")), cons(TWO_INTEGER, makeSymbol("%DIV2"))), list(makeSymbol("FUNCALL"), cons(ONE_INTEGER, makeSymbol("%FUNCALL0")), cons(TWO_INTEGER, makeSymbol("%FUNCALL1")), cons(THREE_INTEGER, makeSymbol("%FUNCALL2")), cons(FOUR_INTEGER, makeSymbol("%FUNCALL3"))), list(makeSymbol("MAX"), cons(TWO_INTEGER, makeSymbol("%MAX2"))), list(makeSymbol("MIN"), cons(TWO_INTEGER, makeSymbol("%MIN2"))));

    static private final SubLList $list4 = list(new SubLObject[]{ list(makeSymbol("%ADD2"), makeString("add2"), list(makeSymbol("NUM1"), makeSymbol("NUM2"))), list(makeSymbol("%DIV2"), makeString("div2"), list(makeSymbol("NUM1"), makeSymbol("NUM2"))), list(makeSymbol("%FUNCALL0"), makeString("funcall0"), list(makeSymbol("FUNCTION"))), list(makeSymbol("%FUNCALL1"), makeString("funcall1"), list(makeSymbol("FUNCTION"), makeSymbol("ARG1"))), list(makeSymbol("%FUNCALL2"), makeString("funcall2"), list(makeSymbol("FUNCTION"), makeSymbol("ARG1"), makeSymbol("ARG2"))), list(makeSymbol("%FUNCALL3"), makeString("funcall3"), list(makeSymbol("FUNCTION"), makeSymbol("ARG1"), makeSymbol("ARG2"), makeSymbol("ARG3"))), list(makeSymbol("%INVERT"), makeString("invert"), list(makeSymbol("NUM"))), list(makeSymbol("%MAX2"), makeString("max2"), list(makeSymbol("NUM1"), makeSymbol("NUM2"))), list(makeSymbol("%MIN2"), makeString("min2"), list(makeSymbol("NUM1"), makeSymbol("NUM2"))), list(makeSymbol("%MINUS"), makeString("minus"), list(makeSymbol("NUM"))), list(makeSymbol("%MULT2"), makeString("mult2"), list(makeSymbol("NUM1"), makeSymbol("NUM2"))), list(makeSymbol("%SUB2"), makeString("sub2"), list(makeSymbol("NUM1"), makeSymbol("NUM2"))) });

    static private final SubLSymbol $sym5$_DTB = makeSymbol("%DTB");

    static private final SubLSymbol $sym6$_BTD = makeSymbol("%BTD");

    static private final SubLList $list7 = list(new SubLObject[]{ cons(makeSymbol("%THROWN-TO"), makeSymbol("%B-THROWN-TO")), cons(makeSymbol("/="), makeSymbol("%B-/=")), cons(makeSymbol("<"), makeSymbol("%B-<")), cons(makeSymbol("<="), makeSymbol("%B-<=")), cons(makeSymbol("="), makeSymbol("%B-=")), cons(makeSymbol(">"), makeSymbol("%B->")), cons(makeSymbol(">="), makeSymbol("%B->=")), cons(makeSymbol("ALPHA-CHAR-P"), makeSymbol("%B-ALPHA-CHARP")), cons(makeSymbol("ALPHANUMERICP"), makeSymbol("%B-ALPHANUMERICP")), cons(makeSymbol("ATOM"), makeSymbol("%B-ATOM")), cons(makeSymbol("BOTH-CASE-P"), makeSymbol("%B-BOTH-CASEP")), cons(makeSymbol("BOUNDP"), makeSymbol("%B-BOUNDP")), cons(makeSymbol("CHAR-EQUAL"), makeSymbol("%B-CHAR-EQUAL")), cons(makeSymbol("CHAR-GREATERP"), makeSymbol("%B-CHAR-GREATERP")), cons(makeSymbol("CHAR-LESSP"), makeSymbol("%B-CHAR-LESSP")), cons(makeSymbol("CHAR-NOT-EQUAL"), makeSymbol("%B-CHAR-NOT-EQUAL")), cons(makeSymbol("CHAR-NOT-GREATERP"), makeSymbol("%B-CHAR-NOT-GREATERP")), cons(makeSymbol("CHAR-NOT-LESSP"), makeSymbol("%B-CHAR-NOT-LESSP")), cons(makeSymbol("CHAR/="), makeSymbol("%B-CHAR/=")), cons(makeSymbol("CHAR<"), makeSymbol("%B-CHAR<")), cons(makeSymbol("CHAR<="), makeSymbol("%B-CHAR<=")), cons(makeSymbol("CHAR="), makeSymbol("%B-CHAR=")), cons(makeSymbol("CHAR>"), makeSymbol("%B-CHAR>")), cons(makeSymbol("CHAR>="), makeSymbol("%B-CHAR>=")), cons(makeSymbol("CHARACTERP"), makeSymbol("%B-CHARACTERP")), cons(makeSymbol("CONSP"), makeSymbol("%B-CONSP")), cons(EQ, makeSymbol("%B-EQ")), cons(EQL, makeSymbol("%B-EQL")), cons(EQUAL, makeSymbol("%B-EQUAL")), cons(EQUALP, makeSymbol("%B-EQUALP")), cons(makeSymbol("EVENP"), makeSymbol("%B-EVENP")), cons(makeSymbol("FBOUNDP"), makeSymbol("%B-FBOUNDP")), cons(makeSymbol("FIXNUMP"), makeSymbol("%B-FIXNUMP")), cons(makeSymbol("FLOATP"), makeSymbol("%B-FLOATP")), cons(makeSymbol("FUNCTION-SPEC-P"), makeSymbol("%B-FUNCTION-SPEC-P")), cons(makeSymbol("FUNCTIONP"), makeSymbol("%B-FUNCTIONP")), cons(makeSymbol("GUID-P"), makeSymbol("%B-GUID-P")), cons(makeSymbol("HASH-TABLE-P"), makeSymbol("%B-HASH-TABLE-P")), cons(makeSymbol("INTEGERP"), makeSymbol("%B-INTEGERP")), cons(makeSymbol("KEYWORDP"), makeSymbol("%B-KEYWORDP")), cons(makeSymbol("LISTP"), makeSymbol("%B-LISTP")), cons(makeSymbol("LOCK-P"), makeSymbol("%B-LOCK-P")), cons(makeSymbol("LOWER-CASE-P"), makeSymbol("%B-LOWER-CASEP")), cons(makeSymbol("MACRO-OPERATOR-P"), makeSymbol("%B-MACRO-OPERATOR-P")), cons(makeSymbol("MINUSP"), makeSymbol("%B-MINUSP")), cons(makeSymbol("NULL"), makeSymbol("%B-NULL")), cons(makeSymbol("NUMBERP"), makeSymbol("%B-NUMBERP")), cons(makeSymbol("ODDP"), makeSymbol("%B-ODDP")), cons(makeSymbol("PACKAGEP"), makeSymbol("%B-PACKAGEP")), cons(makeSymbol("PLUSP"), makeSymbol("%B-PLUSP")), cons(makeSymbol("PROBE-FILE"), makeSymbol("%B-PROBE-FILE")), cons(makeSymbol("PROCESSP"), makeSymbol("%B-PROCESSP")), cons(makeSymbol("SEQUENCEP"), makeSymbol("%B-SEQUENCEP")), cons(makeSymbol("STREAMP"), makeSymbol("%B-STREAMP")), cons(makeSymbol("STRING-EQUAL"), makeSymbol("%B-STRING-EQUAL")), cons(makeSymbol("STRING-GREATERP"), makeSymbol("%B-STRING-GREATERP")), cons(makeSymbol("STRING-LESSP"), makeSymbol("%B-STRING-LESSP")), cons(makeSymbol("STRING-NOT-EQUAL"), makeSymbol("%B-STRING-NOT-EQUAL")), cons(makeSymbol("STRING-NOT-GREATERP"), makeSymbol("%B-STRING-NOT-GREATERP")), cons(makeSymbol("STRING-NOT-LESSP"), makeSymbol("%B-STRING-NOT-LESSP")), cons(makeSymbol("STRING/="), makeSymbol("%B-STRING/=")), cons(makeSymbol("STRING<"), makeSymbol("%B-STRING<")), cons(makeSymbol("STRING<="), makeSymbol("%B-STRING<=")), cons(makeSymbol("STRING="), makeSymbol("%B-STRING=")), cons(makeSymbol("STRING>"), makeSymbol("%B-STRING>")), cons(makeSymbol("STRING>="), makeSymbol("%B-STRING>=")), cons(makeSymbol("STRINGP"), makeSymbol("%B-STRINGP")), cons(makeSymbol("ALIEN-P", "SUBLISP"), makeSymbol("%B-ALIEN-P")), cons(makeSymbol("_STRUCTURES-BAG-P", "SUBLISP"), makeSymbol("%B-STRUCTURES-BAG-P")), cons(makeSymbol("SYMBOLP"), makeSymbol("%B-SYMBOLP")), cons(makeSymbol("UPPER-CASE-P"), makeSymbol("%B-UPPER-CASEP")), cons(makeSymbol("VECTORP"), makeSymbol("%B-VECTORP")), cons(makeSymbol("ZEROP"), makeSymbol("%B-ZEROP")) });

    static private final SubLList $list9 = cons(makeSymbol("FUNCTION"), makeSymbol("BOOLEAN-VERSION"));

    public static final SubLObject $list10 = _constant_10_initializer();

    static private final SubLList $list11 = list(makeSymbol("SYMBOL"), makeSymbol("C-BACKEND-NAME"), makeSymbol("&OPTIONAL"), makeSymbol("ARGLIST"));

    private static final SubLInteger $int$500 = makeInteger(500);

    static private final SubLList $list14 = list(makeSymbol("SYMBOL"), makeSymbol("C-BACKEND-NAME"));

    public static final SubLObject $list15 = _constant_15_initializer();

    static private final SubLList $list16 = list(new SubLObject[]{ list(makeSymbol("*"), makeString("gv_S")), list(makeSymbol("**"), makeString("gv_SS")), list(makeSymbol("***"), makeString("gv_SSS")), list(makeSymbol("*BREAK-ON-ERROR?*"), makeString("gv_break_on_errorP")), list(makeSymbol("*BREAK-ON-WARN?*"), makeString("gv_break_on_warnP")), list(makeSymbol("*CONTINUE-CERROR?*"), makeString("gv_continue_cerrorP")), list(makeSymbol("*CURRENT-AREA*"), makeString("gv_current_area")), list(makeSymbol("*DEBUG-IO*"), makeString("gv_debug_io")), list(makeSymbol("*DEFAULT-PATHNAME-DEFAULTS*"), makeString("gv_default_pathname_defaults")), list(makeSymbol("*ERROR-ABORT-HANDLER*"), makeString("gv_error_abort_handler")), list(makeSymbol("*ERROR-HANDLER*"), makeString("gv_error_handler")), list(makeSymbol("*ERROR-MESSAGE*"), makeString("gv_error_message")), list(makeSymbol("*ERROR-OUTPUT*"), makeString("gv_error_output")), list(makeSymbol("*EXP1*"), makeString("gv_exp1")), list(makeSymbol("*FEATURES*"), makeString("gv_features")), list(makeSymbol("*GENSYM-COUNTER*"), makeString("gv_gensym_counter")), list(makeSymbol("*IGNORE-BREAKS?*"), makeString("gv_ignore_breaksP")), list(makeSymbol("*IGNORE-MUSTS?*"), makeString("gv_ignore_mustsP")), list(makeSymbol("*IGNORE-WARNS?*"), makeString("gv_ignore_warnsP")), list(makeSymbol("*INTERNAL-TIME-UNITS-PER-SECOND*"), makeString("gv_internal_time_units_per_second")), list(makeSymbol("*MOST-NEGATIVE-FIXNUM*"), makeString("gv_most_negative_fixnum")), list(makeSymbol("*MOST-POSITIVE-FIXNUM*"), makeString("gv_most_positive_fixnum")), list(makeSymbol("*NULL-INPUT*"), makeString("gv_null_input")), list(makeSymbol("*NULL-OUTPUT*"), makeString("gv_null_output")), list(makeSymbol("*PACKAGE*"), makeString("gv_current_package")), list(makeSymbol("*PRINT-BASE*"), makeString("gv_print_base")), list(makeSymbol("*PRINT-CASE*"), makeString("gv_print_case")), list(makeSymbol("*PRINT-ESCAPE*"), makeString("gv_print_escape")), list(makeSymbol("*PRINT-LENGTH*"), makeString("gv_print_length")), list(makeSymbol("*PRINT-LEVEL*"), makeString("gv_print_level")), list(makeSymbol("*PRINT-PRETTY*"), makeString("gv_print_pretty")), list(makeSymbol("*PRINT-READABLY*"), makeString("gv_print_readably")), list(makeSymbol("*PROCESS-BACKGROUND-PRIORITY*"), makeString("gv_process_background_priority")), list(makeSymbol("*PROCESS-MAX-PRIORITY*"), makeString("gv_process_max_priority")), list(makeSymbol("*PROCESS-MIN-PRIORITY*"), makeString("gv_process_min_priority")), list(makeSymbol("*PROCESS-NORMAL-PRIORITY*"), makeString("gv_process_normal_priority")), list(makeSymbol("*RAND-MAX*"), makeString("gv_rand_max")), list(makeSymbol("*READ-DEFAULT-FLOAT-FORMAT*"), makeString("gv_read_default_float_format")), list(makeSymbol("*READ-EVAL*"), makeString("gv_read_eval")), list(makeSymbol("*READ-SUPPRESS*"), makeString("gv_read_suppress")), list(makeSymbol("*READTABLE*"), makeString("gv_readtable")), list(makeSymbol("*RETAIN-CLIENT-SOCKET?*"), makeString("gv_retain_client_socketP")), list(makeSymbol("*STANDARD-INPUT*"), makeString("gv_standard_input")), list(makeSymbol("*STANDARD-OUTPUT*"), makeString("gv_standard_output")), list(makeSymbol("*STREAM-INITIAL-INPUT-BUFFER-SIZE*"), makeString("gv_stream_initial_input_buffer_size")), list(makeSymbol("*STREAM-INITIAL-OUTPUT-BUFFER-SIZE*"), makeString("gv_stream_initial_output_buffer_size")), list(makeSymbol("*SUSPEND-TYPE-CHECKING?*"), makeString("gv_suspend_type_checkingP")), list(makeSymbol("*TERMINAL-IO*"), makeString("gv_terminal_io")), list(makeSymbol("*TCP-LOCALHOST-ONLY?*"), makeString("gv_tcp_localhost_onlyP")), list(makeSymbol("*TRACE-OUTPUT*"), makeString("gv_trace_output")), list(makeSymbol("BOOLE-1"), makeString("gv_boole_1")), list(makeSymbol("BOOLE-2"), makeString("gv_boole_2")), list(makeSymbol("BOOLE-AND"), makeString("gv_boole_and")), list(makeSymbol("BOOLE-ANDC1"), makeString("gv_boole_andc1")), list(makeSymbol("BOOLE-ANDC2"), makeString("gv_boole_andc2")), list(makeSymbol("BOOLE-C1"), makeString("gv_boole_c1")), list(makeSymbol("BOOLE-C2"), makeString("gv_boole_c2")), list(makeSymbol("BOOLE-CLR"), makeString("gv_boole_clr")), list(makeSymbol("BOOLE-EQV"), makeString("gv_boole_eqv")), list(makeSymbol("BOOLE-IOR"), makeString("gv_boole_ior")), list(makeSymbol("BOOLE-NAND"), makeString("gv_boole_nand")), list(makeSymbol("BOOLE-NOR"), makeString("gv_boole_nor")), list(makeSymbol("BOOLE-ORC1"), makeString("gv_boole_orc1")), list(makeSymbol("BOOLE-ORC2"), makeString("gv_boole_orc2")), list(makeSymbol("BOOLE-SET"), makeString("gv_boole_set")), list(makeSymbol("BOOLE-XOR"), makeString("gv_boole_xor")), list(makeSymbol("*PRINT-OBJECT-METHOD-TABLE*", "SUBLISP"), makeString("gv_print_object_method_table")), list(makeSymbol("*RESTARTS*", "SUBLISP"), makeString("gv_restarts")), list(makeSymbol("*STREAM-REQUIRES-LOCKING*", "SUBLISP"), makeString("gv_stream_requires_locking")), list(makeSymbol("*SXHASH-METHOD-TABLE*"), makeString("gv_sxhash_method_table")), list(makeSymbol("*VISIT-DEFSTRUCT-OBJECT-METHOD-TABLE*", "SUBLISP"), makeString("gv_visit_defstruct_object_method_table")), list(makeSymbol("*CALL-PROFILING-ENABLED?*", "SUBLISP"), makeString("gv_call_profiling_enabledP")), list(makeSymbol("*CALL-PROFILING-TABLE*", "SUBLISP"), makeString("gv_call_profiling_table")) });

    static private final SubLList $list17 = list(new SubLObject[]{ list(makeSymbol("*DTP-SYMBOL*"), makeString("gv_dtp_symbol"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-CONS*"), makeString("gv_dtp_cons"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-FIXNUM*"), makeString("gv_dtp_fixnum"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-FLOAT*"), makeString("gv_dtp_float"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-CHARACTER*"), makeString("gv_dtp_character"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-STRING*"), makeString("gv_dtp_string"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-VECTOR*"), makeString("gv_dtp_vector"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-FUNCTION*"), makeString("gv_dtp_function"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-HASH-TABLE*"), makeString("gv_dtp_hash_table"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-PACKAGE*"), makeString("gv_dtp_package"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-STREAM*"), makeString("gv_dtp_stream"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-BIGNUM*"), makeString("gv_dtp_bignum"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-GUID*"), makeString("gv_dtp_guid"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-LOCK*"), makeString("gv_dtp_lock"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-PROCESS*"), makeString("gv_dtp_process"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-STRUCTURES-BAG*"), makeString("gv_dtp_structures_bag"), makeKeyword("CONSTANT")), list(makeSymbol("*%EVALUATOR-METHOD*", "SUBLISP"), makeString("gv_evaluator_method"), makeKeyword("DYNAMIC")), list(makeSymbol("*REMOTE-ADDRESS*", "SUBLISP"), makeString("gv_remote_address"), makeKeyword("DYNAMIC")), list(makeSymbol("*REMOTE-HOSTNAME*", "SUBLISP"), makeString("gv_remote_hostname"), makeKeyword("DYNAMIC")) });

    public static final SubLObject c_backend_defined_function_p_alt(SubLObject function) {
        {
            SubLObject cdolist_list_var = $c_backend_defined_function_name_data$.getGlobalValue();
            SubLObject datum = NIL;
            for (datum = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , datum = cdolist_list_var.first()) {
                if (function == datum.first()) {
                    return T;
                }
            }
        }
        return NIL;
    }

    public static SubLObject c_backend_defined_function_p(final SubLObject function) {
        SubLObject cdolist_list_var = $c_backend_defined_function_name_data$.getGlobalValue();
        SubLObject datum = NIL;
        datum = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (function.eql(datum.first())) {
                return T;
            }
            cdolist_list_var = cdolist_list_var.rest();
            datum = cdolist_list_var.first();
        } 
        return NIL;
    }

    public static final SubLObject c_backend_function_call_arity_transform_alt(SubLObject function_call_form) {
        if (function_call_form.isCons()) {
            {
                SubLObject datum = function_call_form;
                SubLObject current = datum;
                SubLObject operator = NIL;
                destructuring_bind_must_consp(current, datum, $list_alt2);
                operator = current.first();
                current = current.rest();
                {
                    SubLObject args = current;
                    SubLObject call_arity = length(args);
                    SubLObject call_arity_operator = com.cyc.cycjava.cycl.c_name_translation.c_backend_function_call_arity_lookup(operator, call_arity);
                    if (NIL != call_arity_operator) {
                        return bq_cons(call_arity_operator, append(args, NIL));
                    }
                }
            }
        }
        return function_call_form;
    }

    public static SubLObject c_backend_function_call_arity_transform(final SubLObject function_call_form) {
        if (function_call_form.isCons()) {
            SubLObject operator = NIL;
            destructuring_bind_must_consp(function_call_form, function_call_form, $list2);
            operator = function_call_form.first();
            final SubLObject args;
            final SubLObject current = args = function_call_form.rest();
            final SubLObject call_arity = length(args);
            final SubLObject call_arity_operator = c_backend_function_call_arity_lookup(operator, call_arity);
            if (NIL != call_arity_operator) {
                return bq_cons(call_arity_operator, append(args, NIL));
            }
        }
        return function_call_form;
    }

    public static final SubLObject c_backend_function_call_arity_lookup_alt(SubLObject operator, SubLObject call_arity) {
        {
            SubLObject operator_arity_versions = list_utilities.alist_lookup_without_values($c_backend_function_arity_version_table$.getGlobalValue(), operator, symbol_function(EQ), UNPROVIDED);
            if (NIL != operator_arity_versions) {
                return list_utilities.alist_lookup_without_values(operator_arity_versions, call_arity, UNPROVIDED, UNPROVIDED);
            }
        }
        return NIL;
    }

    public static SubLObject c_backend_function_call_arity_lookup(final SubLObject operator, final SubLObject call_arity) {
        final SubLObject operator_arity_versions = list_utilities.alist_lookup_without_values($c_backend_function_arity_version_table$.getGlobalValue(), operator, symbol_function(EQ), UNPROVIDED);
        if (NIL != operator_arity_versions) {
            return list_utilities.alist_lookup_without_values(operator_arity_versions, call_arity, UNPROVIDED, UNPROVIDED);
        }
        return NIL;
    }

    public static final SubLObject c_backend_simplify_Xdtb_transform_alt(SubLObject dtb_form) {
        if (dtb_form.isCons()) {
            if ($sym5$_DTB == dtb_form.first()) {
                {
                    SubLObject subform = second(dtb_form);
                    if (subform.isCons()) {
                        {
                            SubLObject datum = subform;
                            SubLObject current = datum;
                            SubLObject operator = NIL;
                            destructuring_bind_must_consp(current, datum, $list_alt2);
                            operator = current.first();
                            current = current.rest();
                            {
                                SubLObject args = current;
                                if (operator == $sym6$_BTD) {
                                    return args.first();
                                }
                                {
                                    SubLObject boolean_version = com.cyc.cycjava.cycl.c_name_translation.c_backend_boolean_function_call_lookup(operator);
                                    if (NIL != boolean_version) {
                                        return bq_cons(boolean_version, append(args, NIL));
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return dtb_form;
    }

    public static SubLObject c_backend_simplify_Xdtb_transform(final SubLObject dtb_form) {
        if (dtb_form.isCons() && ($sym5$_DTB == dtb_form.first())) {
            final SubLObject subform = second(dtb_form);
            if (subform.isCons()) {
                SubLObject current;
                final SubLObject datum = current = subform;
                SubLObject operator = NIL;
                destructuring_bind_must_consp(current, datum, $list2);
                operator = current.first();
                final SubLObject args;
                current = args = current.rest();
                if (operator == $sym6$_BTD) {
                    return args.first();
                }
                final SubLObject boolean_version = c_backend_boolean_function_call_lookup(operator);
                if (NIL != boolean_version) {
                    return bq_cons(boolean_version, append(args, NIL));
                }
            }
        }
        return dtb_form;
    }

    public static final SubLObject initialize_c_backend_function_boolean_hash_alt() {
        {
            SubLObject table = make_hash_table(length($c_backend_function_boolean_version_table$.getGlobalValue()), symbol_function(EQ), UNPROVIDED);
            SubLObject cdolist_list_var = $c_backend_function_boolean_version_table$.getGlobalValue();
            SubLObject cons = NIL;
            for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , cons = cdolist_list_var.first()) {
                {
                    SubLObject datum = cons;
                    SubLObject current = datum;
                    SubLObject function = NIL;
                    SubLObject boolean_version = NIL;
                    destructuring_bind_must_consp(current, datum, $list_alt9);
                    function = current.first();
                    current = current.rest();
                    boolean_version = current;
                    sethash(function, table, boolean_version);
                }
            }
            $c_backend_function_boolean_hash$.setGlobalValue(table);
            return table;
        }
    }

    public static SubLObject initialize_c_backend_function_boolean_hash() {
        final SubLObject table = make_hash_table(length($c_backend_function_boolean_version_table$.getGlobalValue()), symbol_function(EQ), UNPROVIDED);
        SubLObject cdolist_list_var = $c_backend_function_boolean_version_table$.getGlobalValue();
        SubLObject cons = NIL;
        cons = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = cons;
            SubLObject function = NIL;
            SubLObject boolean_version = NIL;
            destructuring_bind_must_consp(current, datum, $list9);
            function = current.first();
            current = boolean_version = current.rest();
            sethash(function, table, boolean_version);
            cdolist_list_var = cdolist_list_var.rest();
            cons = cdolist_list_var.first();
        } 
        $c_backend_function_boolean_hash$.setGlobalValue(table);
        return table;
    }

    // Internal Constants
    @LispMethod(comment = "Internal Constants")
    public static final SubLObject $list_alt0 = com.cyc.cycjava.cycl.c_name_translation._constant_0_initializer();

    public static final SubLObject $list_alt1 = com.cyc.cycjava.cycl.c_name_translation._constant_1_initializer();

    static private final SubLList $list_alt2 = list(makeSymbol("OPERATOR"), makeSymbol("&REST"), makeSymbol("ARGS"));

    static private final SubLList $list_alt3 = list(list(makeSymbol("*"), cons(TWO_INTEGER, makeSymbol("%MULT2"))), list(makeSymbol("+"), cons(TWO_INTEGER, makeSymbol("%ADD2"))), list(makeSymbol("-"), cons(ONE_INTEGER, makeSymbol("%MINUS")), cons(TWO_INTEGER, makeSymbol("%SUB2"))), list(makeSymbol("/"), cons(ONE_INTEGER, makeSymbol("%INVERT")), cons(TWO_INTEGER, makeSymbol("%DIV2"))), list(makeSymbol("FUNCALL"), cons(ONE_INTEGER, makeSymbol("%FUNCALL0")), cons(TWO_INTEGER, makeSymbol("%FUNCALL1")), cons(THREE_INTEGER, makeSymbol("%FUNCALL2")), cons(FOUR_INTEGER, makeSymbol("%FUNCALL3"))), list(makeSymbol("MAX"), cons(TWO_INTEGER, makeSymbol("%MAX2"))), list(makeSymbol("MIN"), cons(TWO_INTEGER, makeSymbol("%MIN2"))));

    public static final SubLObject c_backend_boolean_function_call_lookup_alt(SubLObject operator) {
        return gethash_without_values(operator, $c_backend_function_boolean_hash$.getGlobalValue(), NIL);
    }

    public static SubLObject c_backend_boolean_function_call_lookup(final SubLObject operator) {
        return gethash_without_values(operator, $c_backend_function_boolean_hash$.getGlobalValue(), NIL);
    }

    public static final SubLObject c_backend_function_name_lookup_alt(SubLObject function) {
        return gethash_without_values(function, $c_backend_function_name_table$.getGlobalValue(), NIL);
    }

    public static SubLObject c_backend_function_name_lookup(final SubLObject function) {
        return gethash_without_values(function, $c_backend_function_name_table$.getGlobalValue(), NIL);
    }

    /**
     * Return T iff FUNCTION is a predefined function in the C backend.
     */
    @LispMethod(comment = "Return T iff FUNCTION is a predefined function in the C backend.")
    public static final SubLObject c_backend_predefined_function_p_alt(SubLObject function) {
        return list_utilities.sublisp_boolean(gethash_without_values(function, $c_backend_function_name_table$.getGlobalValue(), NIL));
    }

    /**
     * Return T iff FUNCTION is a predefined function in the C backend.
     */
    @LispMethod(comment = "Return T iff FUNCTION is a predefined function in the C backend.")
    public static SubLObject c_backend_predefined_function_p(final SubLObject function) {
        return list_utilities.sublisp_boolean(gethash_without_values(function, $c_backend_function_name_table$.getGlobalValue(), NIL));
    }

    public static final SubLObject initialize_c_backend_function_name_table_alt() {
        {
            SubLObject data = nconc(new SubLObject[]{ copy_list($c_backend_defined_function_name_data$.getGlobalValue()), copy_list($c_backend_undefined_function_name_data$.getGlobalValue()), copy_list($c_backend_undefined_arity_function_name_data$.getGlobalValue()), copy_list($c_backend_undefined_boolean_function_name_data$.getGlobalValue()) });
            SubLObject table = make_hash_table(length(data), symbol_function(EQ), UNPROVIDED);
            SubLObject cdolist_list_var = data;
            SubLObject item = NIL;
            for (item = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , item = cdolist_list_var.first()) {
                {
                    SubLObject datum = item;
                    SubLObject current = datum;
                    SubLObject symbol = NIL;
                    SubLObject c_backend_name = NIL;
                    destructuring_bind_must_consp(current, datum, $list_alt11);
                    symbol = current.first();
                    current = current.rest();
                    destructuring_bind_must_consp(current, datum, $list_alt11);
                    c_backend_name = current.first();
                    current = current.rest();
                    {
                        SubLObject arglist = (current.isCons()) ? ((SubLObject) (current.first())) : NIL;
                        destructuring_bind_must_listp(current, datum, $list_alt11);
                        current = current.rest();
                        if (NIL == current) {
                            sethash(symbol, table, c_backend_name);
                        } else {
                            cdestructuring_bind_error(datum, $list_alt11);
                        }
                    }
                }
            }
            $c_backend_function_name_table$.setGlobalValue(table);
            return table;
        }
    }

    public static SubLObject initialize_c_backend_function_name_table() {
        final SubLObject data = nconc(new SubLObject[]{ copy_list($c_backend_defined_function_name_data$.getGlobalValue()), copy_list($c_backend_undefined_function_name_data$.getGlobalValue()), copy_list($c_backend_undefined_arity_function_name_data$.getGlobalValue()), copy_list($c_backend_undefined_boolean_function_name_data$.getGlobalValue()) });
        final SubLObject table = make_hash_table(length(data), symbol_function(EQ), UNPROVIDED);
        SubLObject cdolist_list_var = data;
        SubLObject item = NIL;
        item = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = item;
            SubLObject symbol = NIL;
            SubLObject c_backend_name = NIL;
            destructuring_bind_must_consp(current, datum, $list11);
            symbol = current.first();
            current = current.rest();
            destructuring_bind_must_consp(current, datum, $list11);
            c_backend_name = current.first();
            current = current.rest();
            final SubLObject arglist = (current.isCons()) ? current.first() : NIL;
            destructuring_bind_must_listp(current, datum, $list11);
            current = current.rest();
            if (NIL == current) {
                sethash(symbol, table, c_backend_name);
            } else {
                cdestructuring_bind_error(datum, $list11);
            }
            cdolist_list_var = cdolist_list_var.rest();
            item = cdolist_list_var.first();
        } 
        $c_backend_function_name_table$.setGlobalValue(table);
        return table;
    }

    static private final SubLList $list_alt4 = list(new SubLObject[]{ list(makeSymbol("%ADD2"), makeString("add2"), list(makeSymbol("NUM1"), makeSymbol("NUM2"))), list(makeSymbol("%DIV2"), makeString("div2"), list(makeSymbol("NUM1"), makeSymbol("NUM2"))), list(makeSymbol("%FUNCALL0"), makeString("funcall0"), list(makeSymbol("FUNCTION"))), list(makeSymbol("%FUNCALL1"), makeString("funcall1"), list(makeSymbol("FUNCTION"), makeSymbol("ARG1"))), list(makeSymbol("%FUNCALL2"), makeString("funcall2"), list(makeSymbol("FUNCTION"), makeSymbol("ARG1"), makeSymbol("ARG2"))), list(makeSymbol("%FUNCALL3"), makeString("funcall3"), list(makeSymbol("FUNCTION"), makeSymbol("ARG1"), makeSymbol("ARG2"), makeSymbol("ARG3"))), list(makeSymbol("%INVERT"), makeString("invert"), list(makeSymbol("NUM"))), list(makeSymbol("%MAX2"), makeString("max2"), list(makeSymbol("NUM1"), makeSymbol("NUM2"))), list(makeSymbol("%MIN2"), makeString("min2"), list(makeSymbol("NUM1"), makeSymbol("NUM2"))), list(makeSymbol("%MINUS"), makeString("minus"), list(makeSymbol("NUM"))), list(makeSymbol("%MULT2"), makeString("mult2"), list(makeSymbol("NUM1"), makeSymbol("NUM2"))), list(makeSymbol("%SUB2"), makeString("sub2"), list(makeSymbol("NUM1"), makeSymbol("NUM2"))) });

    static private final SubLList $list_alt7 = list(new SubLObject[]{ cons(makeSymbol("%THROWN-TO"), makeSymbol("%B-THROWN-TO")), cons(makeSymbol("/="), makeSymbol("%B-/=")), cons(makeSymbol("<"), makeSymbol("%B-<")), cons(makeSymbol("<="), makeSymbol("%B-<=")), cons(makeSymbol("="), makeSymbol("%B-=")), cons(makeSymbol(">"), makeSymbol("%B->")), cons(makeSymbol(">="), makeSymbol("%B->=")), cons(makeSymbol("ALPHA-CHAR-P"), makeSymbol("%B-ALPHA-CHARP")), cons(makeSymbol("ALPHANUMERICP"), makeSymbol("%B-ALPHANUMERICP")), cons(makeSymbol("ATOM"), makeSymbol("%B-ATOM")), cons(makeSymbol("BOTH-CASE-P"), makeSymbol("%B-BOTH-CASEP")), cons(makeSymbol("BOUNDP"), makeSymbol("%B-BOUNDP")), cons(makeSymbol("CHAR-EQUAL"), makeSymbol("%B-CHAR-EQUAL")), cons(makeSymbol("CHAR-GREATERP"), makeSymbol("%B-CHAR-GREATERP")), cons(makeSymbol("CHAR-LESSP"), makeSymbol("%B-CHAR-LESSP")), cons(makeSymbol("CHAR-NOT-EQUAL"), makeSymbol("%B-CHAR-NOT-EQUAL")), cons(makeSymbol("CHAR-NOT-GREATERP"), makeSymbol("%B-CHAR-NOT-GREATERP")), cons(makeSymbol("CHAR-NOT-LESSP"), makeSymbol("%B-CHAR-NOT-LESSP")), cons(makeSymbol("CHAR/="), makeSymbol("%B-CHAR/=")), cons(makeSymbol("CHAR<"), makeSymbol("%B-CHAR<")), cons(makeSymbol("CHAR<="), makeSymbol("%B-CHAR<=")), cons(makeSymbol("CHAR="), makeSymbol("%B-CHAR=")), cons(makeSymbol("CHAR>"), makeSymbol("%B-CHAR>")), cons(makeSymbol("CHAR>="), makeSymbol("%B-CHAR>=")), cons(makeSymbol("CHARACTERP"), makeSymbol("%B-CHARACTERP")), cons(makeSymbol("CONSP"), makeSymbol("%B-CONSP")), cons(EQ, makeSymbol("%B-EQ")), cons(EQL, makeSymbol("%B-EQL")), cons(EQUAL, makeSymbol("%B-EQUAL")), cons(EQUALP, makeSymbol("%B-EQUALP")), cons(makeSymbol("EVENP"), makeSymbol("%B-EVENP")), cons(makeSymbol("FBOUNDP"), makeSymbol("%B-FBOUNDP")), cons(makeSymbol("FIXNUMP"), makeSymbol("%B-FIXNUMP")), cons(makeSymbol("FLOATP"), makeSymbol("%B-FLOATP")), cons(makeSymbol("FUNCTION-SPEC-P"), makeSymbol("%B-FUNCTION-SPEC-P")), cons(makeSymbol("FUNCTIONP"), makeSymbol("%B-FUNCTIONP")), cons(makeSymbol("GUID-P"), makeSymbol("%B-GUID-P")), cons(makeSymbol("HASH-TABLE-P"), makeSymbol("%B-HASH-TABLE-P")), cons(makeSymbol("INTEGERP"), makeSymbol("%B-INTEGERP")), cons(makeSymbol("KEYWORDP"), makeSymbol("%B-KEYWORDP")), cons(makeSymbol("LISTP"), makeSymbol("%B-LISTP")), cons(makeSymbol("LOCK-P"), makeSymbol("%B-LOCK-P")), cons(makeSymbol("LOWER-CASE-P"), makeSymbol("%B-LOWER-CASEP")), cons(makeSymbol("MACRO-OPERATOR-P"), makeSymbol("%B-MACRO-OPERATOR-P")), cons(makeSymbol("MINUSP"), makeSymbol("%B-MINUSP")), cons(makeSymbol("NULL"), makeSymbol("%B-NULL")), cons(makeSymbol("NUMBERP"), makeSymbol("%B-NUMBERP")), cons(makeSymbol("ODDP"), makeSymbol("%B-ODDP")), cons(makeSymbol("PACKAGEP"), makeSymbol("%B-PACKAGEP")), cons(makeSymbol("PLUSP"), makeSymbol("%B-PLUSP")), cons(makeSymbol("PROBE-FILE"), makeSymbol("%B-PROBE-FILE")), cons(makeSymbol("PROCESSP"), makeSymbol("%B-PROCESSP")), cons(makeSymbol("SEQUENCEP"), makeSymbol("%B-SEQUENCEP")), cons(makeSymbol("STREAMP"), makeSymbol("%B-STREAMP")), cons(makeSymbol("STRING-EQUAL"), makeSymbol("%B-STRING-EQUAL")), cons(makeSymbol("STRING-GREATERP"), makeSymbol("%B-STRING-GREATERP")), cons(makeSymbol("STRING-LESSP"), makeSymbol("%B-STRING-LESSP")), cons(makeSymbol("STRING-NOT-EQUAL"), makeSymbol("%B-STRING-NOT-EQUAL")), cons(makeSymbol("STRING-NOT-GREATERP"), makeSymbol("%B-STRING-NOT-GREATERP")), cons(makeSymbol("STRING-NOT-LESSP"), makeSymbol("%B-STRING-NOT-LESSP")), cons(makeSymbol("STRING/="), makeSymbol("%B-STRING/=")), cons(makeSymbol("STRING<"), makeSymbol("%B-STRING<")), cons(makeSymbol("STRING<="), makeSymbol("%B-STRING<=")), cons(makeSymbol("STRING="), makeSymbol("%B-STRING=")), cons(makeSymbol("STRING>"), makeSymbol("%B-STRING>")), cons(makeSymbol("STRING>="), makeSymbol("%B-STRING>=")), cons(makeSymbol("STRINGP"), makeSymbol("%B-STRINGP")), cons(makeSymbol("ALIEN-P", "SUBLISP"), makeSymbol("%B-ALIEN-P")), cons(makeSymbol("_STRUCTURES-BAG-P", "SUBLISP"), makeSymbol("%B-STRUCTURES-BAG-P")), cons(makeSymbol("SYMBOLP"), makeSymbol("%B-SYMBOLP")), cons(makeSymbol("UPPER-CASE-P"), makeSymbol("%B-UPPER-CASEP")), cons(makeSymbol("VECTORP"), makeSymbol("%B-VECTORP")), cons(makeSymbol("ZEROP"), makeSymbol("%B-ZEROP")) });

    public static final SubLObject c_backend_function_arglist_lookup_alt(SubLObject function) {
        return gethash_without_values(function, $c_backend_function_arglist_table$.getGlobalValue(), $UNSPECIFIED);
    }

    public static SubLObject c_backend_function_arglist_lookup(final SubLObject function) {
        return gethash_without_values(function, $c_backend_function_arglist_table$.getGlobalValue(), $UNSPECIFIED);
    }

    public static final SubLObject initialize_c_backend_function_arglist_table_alt() {
        {
            SubLObject table = make_hash_table($int$500, symbol_function(EQ), UNPROVIDED);
            {
                SubLObject cdolist_list_var = $c_backend_defined_function_name_data$.getGlobalValue();
                SubLObject item = NIL;
                for (item = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , item = cdolist_list_var.first()) {
                    {
                        SubLObject datum = item;
                        SubLObject current = datum;
                        SubLObject symbol = NIL;
                        SubLObject c_backend_name = NIL;
                        destructuring_bind_must_consp(current, datum, $list_alt14);
                        symbol = current.first();
                        current = current.rest();
                        destructuring_bind_must_consp(current, datum, $list_alt14);
                        c_backend_name = current.first();
                        current = current.rest();
                        if (NIL == current) {
                            if (NIL != subl_promotions.function_symbol_p(symbol)) {
                                {
                                    SubLObject arglist = subl_promotions.function_symbol_arglist(symbol);
                                    sethash(symbol, table, arglist);
                                }
                            }
                        } else {
                            cdestructuring_bind_error(datum, $list_alt14);
                        }
                    }
                }
            }
            {
                SubLObject data = nconc(copy_list($c_backend_undefined_function_name_data$.getGlobalValue()), copy_list($c_backend_undefined_arity_function_name_data$.getGlobalValue()), copy_list($c_backend_undefined_boolean_function_name_data$.getGlobalValue()));
                SubLObject cdolist_list_var = data;
                SubLObject item = NIL;
                for (item = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , item = cdolist_list_var.first()) {
                    {
                        SubLObject datum = item;
                        SubLObject current = datum;
                        SubLObject symbol = NIL;
                        SubLObject c_backend_name = NIL;
                        destructuring_bind_must_consp(current, datum, $list_alt11);
                        symbol = current.first();
                        current = current.rest();
                        destructuring_bind_must_consp(current, datum, $list_alt11);
                        c_backend_name = current.first();
                        current = current.rest();
                        {
                            SubLObject arglist = (current.isCons()) ? ((SubLObject) (current.first())) : NIL;
                            destructuring_bind_must_listp(current, datum, $list_alt11);
                            current = current.rest();
                            if (NIL == current) {
                                sethash(symbol, table, arglist);
                            } else {
                                cdestructuring_bind_error(datum, $list_alt11);
                            }
                        }
                    }
                }
            }
            $c_backend_function_arglist_table$.setGlobalValue(table);
            return table;
        }
    }

    public static SubLObject initialize_c_backend_function_arglist_table() {
        final SubLObject table = make_hash_table($int$500, symbol_function(EQ), UNPROVIDED);
        SubLObject cdolist_list_var = $c_backend_defined_function_name_data$.getGlobalValue();
        SubLObject item = NIL;
        item = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = item;
            SubLObject symbol = NIL;
            SubLObject c_backend_name = NIL;
            destructuring_bind_must_consp(current, datum, $list14);
            symbol = current.first();
            current = current.rest();
            destructuring_bind_must_consp(current, datum, $list14);
            c_backend_name = current.first();
            current = current.rest();
            if (NIL == current) {
                if (NIL != subl_promotions.function_symbol_p(symbol)) {
                    final SubLObject arglist = subl_promotions.function_symbol_arglist(symbol);
                    sethash(symbol, table, arglist);
                }
            } else {
                cdestructuring_bind_error(datum, $list14);
            }
            cdolist_list_var = cdolist_list_var.rest();
            item = cdolist_list_var.first();
        } 
        SubLObject cdolist_list_var2;
        final SubLObject data = cdolist_list_var2 = nconc(copy_list($c_backend_undefined_function_name_data$.getGlobalValue()), copy_list($c_backend_undefined_arity_function_name_data$.getGlobalValue()), copy_list($c_backend_undefined_boolean_function_name_data$.getGlobalValue()));
        SubLObject item2 = NIL;
        item2 = cdolist_list_var2.first();
        while (NIL != cdolist_list_var2) {
            SubLObject current2;
            final SubLObject datum2 = current2 = item2;
            SubLObject symbol2 = NIL;
            SubLObject c_backend_name2 = NIL;
            destructuring_bind_must_consp(current2, datum2, $list11);
            symbol2 = current2.first();
            current2 = current2.rest();
            destructuring_bind_must_consp(current2, datum2, $list11);
            c_backend_name2 = current2.first();
            current2 = current2.rest();
            final SubLObject arglist2 = (current2.isCons()) ? current2.first() : NIL;
            destructuring_bind_must_listp(current2, datum2, $list11);
            current2 = current2.rest();
            if (NIL == current2) {
                sethash(symbol2, table, arglist2);
            } else {
                cdestructuring_bind_error(datum2, $list11);
            }
            cdolist_list_var2 = cdolist_list_var2.rest();
            item2 = cdolist_list_var2.first();
        } 
        $c_backend_function_arglist_table$.setGlobalValue(table);
        return table;
    }

    public static final SubLObject c_backend_predefined_constant_name_alt(SubLObject constant) {
        return list_utilities.alist_lookup_without_values($c_backend_predefined_constant_table$.getGlobalValue(), constant, symbol_function(EQL), UNPROVIDED);
    }

    public static SubLObject c_backend_predefined_constant_name(final SubLObject constant) {
        return list_utilities.alist_lookup_without_values($c_backend_predefined_constant_table$.getGlobalValue(), constant, symbol_function(EQL), UNPROVIDED);
    }

    public static final SubLObject c_backend_undefined_variable_binding_type_lookup_alt(SubLObject variable) {
        return third(assoc(variable, $c_backend_undefined_global_name_data$.getGlobalValue(), symbol_function(EQ), UNPROVIDED));
    }

    public static SubLObject c_backend_undefined_variable_binding_type_lookup(final SubLObject variable) {
        return third(assoc(variable, $c_backend_undefined_global_name_data$.getGlobalValue(), symbol_function(EQ), UNPROVIDED));
    }

    public static final SubLObject c_backend_global_name_lookup_alt(SubLObject global) {
        return gethash_without_values(global, $c_backend_global_name_table$.getGlobalValue(), NIL);
    }

    public static SubLObject c_backend_global_name_lookup(final SubLObject global) {
        return gethash_without_values(global, $c_backend_global_name_table$.getGlobalValue(), NIL);
    }

    /**
     * Return T iff GLOBAL is a predefined global in the C backend.
     */
    @LispMethod(comment = "Return T iff GLOBAL is a predefined global in the C backend.")
    public static final SubLObject c_backend_predefined_global_p_alt(SubLObject global) {
        return list_utilities.sublisp_boolean(gethash_without_values(global, $c_backend_global_name_table$.getGlobalValue(), NIL));
    }

    @LispMethod(comment = "Return T iff GLOBAL is a predefined global in the C backend.")
    public static SubLObject c_backend_predefined_global_p(final SubLObject global) {
        return list_utilities.sublisp_boolean(gethash_without_values(global, $c_backend_global_name_table$.getGlobalValue(), NIL));
    }

    static private final SubLList $list_alt9 = cons(makeSymbol("FUNCTION"), makeSymbol("BOOLEAN-VERSION"));

    public static final SubLObject $list_alt10 = com.cyc.cycjava.cycl.c_name_translation._constant_10_initializer();

    public static final SubLObject initialize_c_backend_global_name_table_alt() {
        {
            SubLObject data = nconc(copy_list($c_backend_defined_global_name_data$.getGlobalValue()), copy_list($c_backend_undefined_global_name_data$.getGlobalValue()));
            SubLObject table = make_hash_table(length(data), symbol_function(EQ), UNPROVIDED);
            SubLObject cdolist_list_var = data;
            SubLObject item = NIL;
            for (item = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , item = cdolist_list_var.first()) {
                {
                    SubLObject datum = item;
                    SubLObject current = datum;
                    SubLObject symbol = NIL;
                    SubLObject c_backend_name = NIL;
                    destructuring_bind_must_consp(current, datum, $list_alt11);
                    symbol = current.first();
                    current = current.rest();
                    destructuring_bind_must_consp(current, datum, $list_alt11);
                    c_backend_name = current.first();
                    current = current.rest();
                    {
                        SubLObject arglist = (current.isCons()) ? ((SubLObject) (current.first())) : NIL;
                        destructuring_bind_must_listp(current, datum, $list_alt11);
                        current = current.rest();
                        if (NIL == current) {
                            sethash(symbol, table, c_backend_name);
                        } else {
                            cdestructuring_bind_error(datum, $list_alt11);
                        }
                    }
                }
            }
            $c_backend_global_name_table$.setGlobalValue(table);
            return table;
        }
    }

    public static SubLObject initialize_c_backend_global_name_table() {
        final SubLObject data = nconc(copy_list($c_backend_defined_global_name_data$.getGlobalValue()), copy_list($c_backend_undefined_global_name_data$.getGlobalValue()));
        final SubLObject table = make_hash_table(length(data), symbol_function(EQ), UNPROVIDED);
        SubLObject cdolist_list_var = data;
        SubLObject item = NIL;
        item = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = item;
            SubLObject symbol = NIL;
            SubLObject c_backend_name = NIL;
            destructuring_bind_must_consp(current, datum, $list11);
            symbol = current.first();
            current = current.rest();
            destructuring_bind_must_consp(current, datum, $list11);
            c_backend_name = current.first();
            current = current.rest();
            final SubLObject arglist = (current.isCons()) ? current.first() : NIL;
            destructuring_bind_must_listp(current, datum, $list11);
            current = current.rest();
            if (NIL == current) {
                sethash(symbol, table, c_backend_name);
            } else {
                cdestructuring_bind_error(datum, $list11);
            }
            cdolist_list_var = cdolist_list_var.rest();
            item = cdolist_list_var.first();
        } 
        $c_backend_global_name_table$.setGlobalValue(table);
        return table;
    }

    static private final SubLList $list_alt11 = list(makeSymbol("SYMBOL"), makeSymbol("C-BACKEND-NAME"), makeSymbol("&OPTIONAL"), makeSymbol("ARGLIST"));

    static private final SubLList $list_alt14 = list(makeSymbol("SYMBOL"), makeSymbol("C-BACKEND-NAME"));

    public static final SubLObject $list_alt15 = com.cyc.cycjava.cycl.c_name_translation._constant_15_initializer();

    static private final SubLList $list_alt16 = list(new SubLObject[]{ list(makeSymbol("*"), makeString("gv_S")), list(makeSymbol("**"), makeString("gv_SS")), list(makeSymbol("***"), makeString("gv_SSS")), list(makeSymbol("*BREAK-ON-ERROR?*"), makeString("gv_break_on_errorP")), list(makeSymbol("*CONTINUE-CERROR?*"), makeString("gv_continue_cerrorP")), list(makeSymbol("*CURRENT-AREA*"), makeString("gv_current_area")), list(makeSymbol("*DEBUG-IO*"), makeString("gv_debug_io")), list(makeSymbol("*DEFAULT-PATHNAME-DEFAULTS*"), makeString("gv_default_pathname_defaults")), list(makeSymbol("*ERROR-ABORT-HANDLER*"), makeString("gv_error_abort_handler")), list(makeSymbol("*ERROR-HANDLER*"), makeString("gv_error_handler")), list(makeSymbol("*ERROR-MESSAGE*"), makeString("gv_error_message")), list(makeSymbol("*ERROR-OUTPUT*"), makeString("gv_error_output")), list(makeSymbol("*EXP1*"), makeString("gv_exp1")), list(makeSymbol("*FEATURES*"), makeString("gv_features")), list(makeSymbol("*GENSYM-COUNTER*"), makeString("gv_gensym_counter")), list(makeSymbol("*IGNORE-BREAKS?*"), makeString("gv_ignore_breaksP")), list(makeSymbol("*IGNORE-MUSTS?*"), makeString("gv_ignore_mustsP")), list(makeSymbol("*IGNORE-WARNS?*"), makeString("gv_ignore_warnsP")), list(makeSymbol("*INTERNAL-TIME-UNITS-PER-SECOND*"), makeString("gv_internal_time_units_per_second")), list(makeSymbol("*MOST-NEGATIVE-FIXNUM*"), makeString("gv_most_negative_fixnum")), list(makeSymbol("*MOST-POSITIVE-FIXNUM*"), makeString("gv_most_positive_fixnum")), list(makeSymbol("*NULL-INPUT*"), makeString("gv_null_input")), list(makeSymbol("*NULL-OUTPUT*"), makeString("gv_null_output")), list(makeSymbol("*PACKAGE*"), makeString("gv_current_package")), list(makeSymbol("*PRINT-BASE*"), makeString("gv_print_base")), list(makeSymbol("*PRINT-CASE*"), makeString("gv_print_case")), list(makeSymbol("*PRINT-ESCAPE*"), makeString("gv_print_escape")), list(makeSymbol("*PRINT-LENGTH*"), makeString("gv_print_length")), list(makeSymbol("*PRINT-LEVEL*"), makeString("gv_print_level")), list(makeSymbol("*PRINT-PRETTY*"), makeString("gv_print_pretty")), list(makeSymbol("*PRINT-READABLY*"), makeString("gv_print_readably")), list(makeSymbol("*PROCESS-BACKGROUND-PRIORITY*"), makeString("gv_process_background_priority")), list(makeSymbol("*PROCESS-MAX-PRIORITY*"), makeString("gv_process_max_priority")), list(makeSymbol("*PROCESS-MIN-PRIORITY*"), makeString("gv_process_min_priority")), list(makeSymbol("*PROCESS-NORMAL-PRIORITY*"), makeString("gv_process_normal_priority")), list(makeSymbol("*RAND-MAX*"), makeString("gv_rand_max")), list(makeSymbol("*READ-DEFAULT-FLOAT-FORMAT*"), makeString("gv_read_default_float_format")), list(makeSymbol("*READ-EVAL*"), makeString("gv_read_eval")), list(makeSymbol("*READ-SUPPRESS*"), makeString("gv_read_suppress")), list(makeSymbol("*READTABLE*"), makeString("gv_readtable")), list(makeSymbol("*RETAIN-CLIENT-SOCKET?*"), makeString("gv_retain_client_socketP")), list(makeSymbol("*STANDARD-INPUT*"), makeString("gv_standard_input")), list(makeSymbol("*STANDARD-OUTPUT*"), makeString("gv_standard_output")), list(makeSymbol("*SUSPEND-TYPE-CHECKING?*"), makeString("gv_suspend_type_checkingP")), list(makeSymbol("*TERMINAL-IO*"), makeString("gv_terminal_io")), list(makeSymbol("*TCP-LOCALHOST-ONLY?*"), makeString("gv_tcp_localhost_onlyP")), list(makeSymbol("*TRACE-OUTPUT*"), makeString("gv_trace_output")), list(makeSymbol("BOOLE-1"), makeString("gv_boole_1")), list(makeSymbol("BOOLE-2"), makeString("gv_boole_2")), list(makeSymbol("BOOLE-AND"), makeString("gv_boole_and")), list(makeSymbol("BOOLE-ANDC1"), makeString("gv_boole_andc1")), list(makeSymbol("BOOLE-ANDC2"), makeString("gv_boole_andc2")), list(makeSymbol("BOOLE-C1"), makeString("gv_boole_c1")), list(makeSymbol("BOOLE-C2"), makeString("gv_boole_c2")), list(makeSymbol("BOOLE-CLR"), makeString("gv_boole_clr")), list(makeSymbol("BOOLE-EQV"), makeString("gv_boole_eqv")), list(makeSymbol("BOOLE-IOR"), makeString("gv_boole_ior")), list(makeSymbol("BOOLE-NAND"), makeString("gv_boole_nand")), list(makeSymbol("BOOLE-NOR"), makeString("gv_boole_nor")), list(makeSymbol("BOOLE-ORC1"), makeString("gv_boole_orc1")), list(makeSymbol("BOOLE-ORC2"), makeString("gv_boole_orc2")), list(makeSymbol("BOOLE-SET"), makeString("gv_boole_set")), list(makeSymbol("BOOLE-XOR"), makeString("gv_boole_xor")), list(makeSymbol("*PRINT-OBJECT-METHOD-TABLE*", "SUBLISP"), makeString("gv_print_object_method_table")), list(makeSymbol("*RESTARTS*", "SUBLISP"), makeString("gv_restarts")), list(makeSymbol("*STREAM-REQUIRES-LOCKING*", "SUBLISP"), makeString("gv_stream_requires_locking")), list(makeSymbol("*SXHASH-METHOD-TABLE*"), makeString("gv_sxhash_method_table")), list(makeSymbol("*VISIT-DEFSTRUCT-OBJECT-METHOD-TABLE*", "SUBLISP"), makeString("gv_visit_defstruct_object_method_table")), list(makeSymbol("*CALL-PROFILING-ENABLED?*", "SUBLISP"), makeString("gv_call_profiling_enabledP")), list(makeSymbol("*CALL-PROFILING-TABLE*", "SUBLISP"), makeString("gv_call_profiling_table")) });

    public static SubLObject declare_c_name_translation_file() {
        declareFunction("c_backend_defined_function_p", "C-BACKEND-DEFINED-FUNCTION-P", 1, 0, false);
        declareFunction("c_backend_function_call_arity_transform", "C-BACKEND-FUNCTION-CALL-ARITY-TRANSFORM", 1, 0, false);
        declareFunction("c_backend_function_call_arity_lookup", "C-BACKEND-FUNCTION-CALL-ARITY-LOOKUP", 2, 0, false);
        declareFunction("c_backend_simplify_Xdtb_transform", "C-BACKEND-SIMPLIFY-%DTB-TRANSFORM", 1, 0, false);
        declareFunction("initialize_c_backend_function_boolean_hash", "INITIALIZE-C-BACKEND-FUNCTION-BOOLEAN-HASH", 0, 0, false);
        declareFunction("c_backend_boolean_function_call_lookup", "C-BACKEND-BOOLEAN-FUNCTION-CALL-LOOKUP", 1, 0, false);
        declareFunction("c_backend_function_name_lookup", "C-BACKEND-FUNCTION-NAME-LOOKUP", 1, 0, false);
        declareFunction("c_backend_predefined_function_p", "C-BACKEND-PREDEFINED-FUNCTION-P", 1, 0, false);
        declareFunction("initialize_c_backend_function_name_table", "INITIALIZE-C-BACKEND-FUNCTION-NAME-TABLE", 0, 0, false);
        declareFunction("c_backend_function_arglist_lookup", "C-BACKEND-FUNCTION-ARGLIST-LOOKUP", 1, 0, false);
        declareFunction("initialize_c_backend_function_arglist_table", "INITIALIZE-C-BACKEND-FUNCTION-ARGLIST-TABLE", 0, 0, false);
        declareFunction("c_backend_predefined_constant_name", "C-BACKEND-PREDEFINED-CONSTANT-NAME", 1, 0, false);
        declareFunction("c_backend_undefined_variable_binding_type_lookup", "C-BACKEND-UNDEFINED-VARIABLE-BINDING-TYPE-LOOKUP", 1, 0, false);
        declareFunction("c_backend_global_name_lookup", "C-BACKEND-GLOBAL-NAME-LOOKUP", 1, 0, false);
        declareFunction("c_backend_predefined_global_p", "C-BACKEND-PREDEFINED-GLOBAL-P", 1, 0, false);
        declareFunction("initialize_c_backend_global_name_table", "INITIALIZE-C-BACKEND-GLOBAL-NAME-TABLE", 0, 0, false);
        return NIL;
    }

    public static SubLObject init_c_name_translation_file() {
        deflexical("*C-BACKEND-DEFINED-FUNCTION-NAME-DATA*", $list0);
        deflexical("*C-BACKEND-UNDEFINED-FUNCTION-NAME-DATA*", $list1);
        deflexical("*C-BACKEND-FUNCTION-ARITY-VERSION-TABLE*", $list3);
        deflexical("*C-BACKEND-UNDEFINED-ARITY-FUNCTION-NAME-DATA*", $list4);
        deflexical("*C-BACKEND-FUNCTION-BOOLEAN-VERSION-TABLE*", $list7);
        deflexical("*C-BACKEND-FUNCTION-BOOLEAN-HASH*", $UNINITIALIZED);
        deflexical("*C-BACKEND-UNDEFINED-BOOLEAN-FUNCTION-NAME-DATA*", $list10);
        deflexical("*C-BACKEND-FUNCTION-NAME-TABLE*", $UNINITIALIZED);
        deflexical("*C-BACKEND-FUNCTION-ARGLIST-TABLE*", $UNINITIALIZED);
        deflexical("*C-BACKEND-PREDEFINED-CONSTANT-TABLE*", $list15);
        deflexical("*C-BACKEND-DEFINED-GLOBAL-NAME-DATA*", $list16);
        deflexical("*C-BACKEND-UNDEFINED-GLOBAL-NAME-DATA*", $list17);
        deflexical("*C-BACKEND-GLOBAL-NAME-TABLE*", $UNINITIALIZED);
        return NIL;
    }

    public static SubLObject setup_c_name_translation_file() {
        initialize_c_backend_function_boolean_hash();
        initialize_c_backend_function_name_table();
        initialize_c_backend_function_arglist_table();
        initialize_c_backend_global_name_table();
        return NIL;
    }

    // Internal Constant Initializer Methods
    @LispMethod(comment = "Internal Constant Initializer Methods")
    private static final SubLObject _constant_0_initializer_alt() {
        return list(new SubLObject[]{ list(makeSymbol("*"), makeString("mult")), list(makeSymbol("+"), makeString("add")), list(makeSymbol("-"), makeString("sub")), list(makeSymbol("/"), makeString("divide")), list(makeSymbol("/="), makeString("dp_numNE")), list(makeSymbol("<"), makeString("dp_numL")), list(makeSymbol("<="), makeString("dp_numLE")), list(makeSymbol("="), makeString("dp_numE")), list(makeSymbol(">"), makeString("dp_numG")), list(makeSymbol(">="), makeString("dp_numGE")), list(makeSymbol("ABS"), makeString("sublisp_abs")), list(makeSymbol("ACONS"), makeString("acons")), list(makeSymbol("ACOS"), makeString("sublisp_acos")), list(makeSymbol("ADJOIN"), makeString("adjoin")), list(makeSymbol("ALERT-USER"), makeString("alert_user")), list(makeSymbol("ALL-PROCESSES"), makeString("all_processes")), list(makeSymbol("ALPHA-CHAR-P"), makeString("dp_alpha_char_p")), list(makeSymbol("ALPHANUMERICP"), makeString("dp_alphanumericp")), list(makeSymbol("APPEND"), makeString("append")), list(makeSymbol("APPLY"), makeString("apply")), list(makeSymbol("APROPOS"), makeString("apropos")), list(makeSymbol("AREF"), makeString("aref")), list(makeSymbol("ASH"), makeString("ash")), list(makeSymbol("ASIN"), makeString("sublisp_asin")), list(makeSymbol("ASSEMBLE-FIXNUMS-TO-GUID"), makeString("assemble_fixnums_to_guid")), list(makeSymbol("ASSEMBLE-FIXNUMS-TO-INTEGER"), makeString("assemble_fixnums_to_integer")), list(makeSymbol("ASSOC"), makeString("assoc")), list(makeSymbol("ASSOC-IF"), makeString("assoc_if")), list(makeSymbol("ATAN"), makeString("sublisp_atan")), list(makeSymbol("ATOM"), makeString("dp_atom")), list(makeSymbol("BOOLE"), makeString("boole")), list(makeSymbol("BOTH-CASE-P"), makeString("dp_both_case_p")), list(makeSymbol("BOUNDP"), makeString("dp_boundp")), list(makeSymbol("BREAK"), makeString("sublisp_break")), list(makeSymbol("BROADCAST-STREAM-STREAMS"), makeString("broadcast_stream_streams")), list(makeSymbol("BUTLAST"), makeString("butlast")), list(makeSymbol("BYTE"), makeString("f_byte")), list(makeSymbol("CAAR"), makeString("caar")), list(makeSymbol("CADR"), makeString("cadr")), list(makeSymbol("CAR"), makeString("car")), list(makeSymbol("CCONCATENATE"), makeString("cconcatenate")), list(makeSymbol("CDAR"), makeString("cdar")), list(makeSymbol("CDDR"), makeString("cddr")), list(makeSymbol("CDR"), makeString("cdr")), list(makeSymbol("CEILING"), makeString("sublisp_ceiling")), list(makeSymbol("CERROR"), makeString("sublisp_cerror")), list(makeSymbol("CHAR"), makeString("sublisp_char")), list(makeSymbol("CHAR-CODE"), makeString("char_code")), list(makeSymbol("CHAR-DOWNCASE"), makeString("char_downcase")), list(makeSymbol("CHAR-EQUAL"), makeString("dp_char_equal")), list(makeSymbol("CHAR-GREATERP"), makeString("dp_char_greaterp")), list(makeSymbol("CHAR-LESSP"), makeString("dp_char_lessp")), list(makeSymbol("CHAR-NOT-EQUAL"), makeString("dp_char_not_equal")), list(makeSymbol("CHAR-NOT-GREATERP"), makeString("dp_char_not_greaterp")), list(makeSymbol("CHAR-NOT-LESSP"), makeString("dp_char_not_lessp")), list(makeSymbol("CHAR-UPCASE"), makeString("char_upcase")), list(makeSymbol("CHAR/="), makeString("dp_charNE")), list(makeSymbol("CHAR<"), makeString("dp_charL")), list(makeSymbol("CHAR<="), makeString("dp_charLE")), list(makeSymbol("CHAR="), makeString("dp_charE")), list(makeSymbol("CHAR>"), makeString("dp_charG")), list(makeSymbol("CHAR>="), makeString("dp_charGE")), list(makeSymbol("CHARACTERP"), makeString("dp_characterp")), list(makeSymbol("CLEAR-INPUT"), makeString("clear_input")), list(makeSymbol("CLEAR-OUTPUT"), makeString("clear_output")), list(makeSymbol("CLOSE"), makeString("sublisp_close")), list(makeSymbol("CLRHASH"), makeString("clrhash")), list(makeSymbol("CMERGE"), makeString("cmerge")), list(makeSymbol("CODE-CHAR"), makeString("code_char")), list(makeSymbol("CONCATENATED-STREAM-STREAMS"), makeString("concatenated_stream_streams")), list(makeSymbol("CONS"), makeString("cons")), list(makeSymbol("CONSP"), makeString("dp_consp")), list(makeSymbol("CONSTANTP"), makeString("dp_constantp")), list(makeSymbol("CONSTRUCT-FILENAME"), makeString("construct_filename")), list(makeSymbol("COPY-ALIST"), makeString("copy_alist")), list(makeSymbol("COPY-LIST"), makeString("copy_list")), list(makeSymbol("COPY-READTABLE"), makeString("copy_readtable")), list(makeSymbol("COPY-SEQ"), makeString("copy_seq")), list(makeSymbol("COPY-TREE"), makeString("copy_tree")), list(makeSymbol("COS"), makeString("sublisp_cos")), list(makeSymbol("COUNT"), makeString("count")), list(makeSymbol("COUNT-IF"), makeString("count_if")), list(makeSymbol("CRACK-DATE-RELATIVE-GUID"), makeString("crack_date_relative_guid")), list(makeSymbol("CREDUCE"), makeString("creduce")), list(makeSymbol("CURRENT-PROCESS"), makeString("current_process")), list(makeSymbol("DATE-RELATIVE-GUID-P"), makeString("date_relative_guid_p")), list(makeSymbol("DEBUG"), makeString("debug")), list(makeSymbol("DEBUG-PROCESS"), makeString("debug_process")), list(makeSymbol("DECODE-FLOAT"), makeString("decode_float")), list(makeSymbol("DECODE-UNIVERSAL-TIME"), makeString("decode_universal_time")), list(makeSymbol("DEFAULT-STRUCT-PRINT-FUNCTION"), makeString("default_struct_print_function")), list(makeSymbol("DELETE"), makeString("delete")), list(makeSymbol("DELETE-DIRECTORY"), makeString("delete_directory")), list(makeSymbol("DELETE-DUPLICATES"), makeString("delete_duplicates")), list(makeSymbol("DELETE-FILE"), makeString("delete_file")), list(makeSymbol("DELETE-IF"), makeString("delete_if")), list(makeSymbol("DESTROY-HASH-TABLE-ITERATOR"), makeString("destroy_hash_table_iterator")), list(makeSymbol("DIGIT-CHAR"), makeString("digit_char")), list(makeSymbol("DIGIT-CHAR-P"), makeString("dp_digit_char_p")), list(makeSymbol("DIRECTORY"), makeString("directory")), list(makeSymbol("DIRECTORY-P"), makeString("directory_p")), list(makeSymbol("DISASSEMBLE-GUID-TO-FIXNUMS"), makeString("disassemble_guid_to_fixnums")), list(makeSymbol("DISASSEMBLE-INTEGER-TO-FIXNUMS"), makeString("disassemble_integer_to_fixnums")), list(makeSymbol("DPB"), makeString("f_dpb")), list(makeSymbol("ECHO-STREAM-INPUT-STREAM"), makeString("echo_stream_input_stream")), list(makeSymbol("ECHO-STREAM-OUTPUT-STREAM"), makeString("echo_stream_output_stream")), list(makeSymbol("EIGHTH"), makeString("eighth")), list(makeSymbol("ELT"), makeString("elt")), list(makeSymbol("ENCODE-UNIVERSAL-TIME"), makeString("encode_universal_time")), list(makeSymbol("ENDP"), makeString("dp_endp")), list(EQ, makeString("dp_eq")), list(EQL, makeString("dp_eql")), list(EQUAL, makeString("dp_equal")), list(EQUALP, makeString("dp_equalp")), list(makeSymbol("ERROR"), makeString("sublisp_error")), list(makeSymbol("EVAL"), makeString("eval")), list(makeSymbol("EVENP"), makeString("dp_evenp")), list(makeSymbol("EXIT"), makeString("sublisp_exit")), list(makeSymbol("EXP"), makeString("sublisp_exp")), list(makeSymbol("EXPORT"), makeString("export")), list(makeSymbol("EXPT"), makeString("expt")), list(makeSymbol("FALSE"), makeString("sublisp_false")), list(makeSymbol("FBOUNDP"), makeString("dp_fboundp")), list(makeSymbol("FIFTH"), makeString("fifth")), list(makeSymbol("FILE-AUTHOR"), makeString("file_author")), list(makeSymbol("FILE-LENGTH"), makeString("file_length")), list(makeSymbol("FILE-LENGTH"), makeString("file_length")), list(makeSymbol("FILE-POSITION"), makeString("file_position")), list(makeSymbol("FILE-STRING-LENGTH"), makeString("file_string_length")), list(makeSymbol("FILE-WRITE-DATE"), makeString("file_write_date")), list(makeSymbol("FILL"), makeString("fill")), list(makeSymbol("FIND"), makeString("find")), list(makeSymbol("FIND-IF"), makeString("find_if")), list(makeSymbol("FIND-PACKAGE"), makeString("find_package")), list(makeSymbol("FIND-SYMBOL"), makeString("find_symbol")), list(makeSymbol("FINISH-OUTPUT"), makeString("finish_output")), list(makeSymbol("FIRST"), makeString("first")), list(makeSymbol("FIXNUM*"), makeString("fixnum_mult")), list(makeSymbol("FIXNUMP"), makeString("dp_fixnump")), list(makeSymbol("FLOAT"), makeString("sublisp_float")), list(makeSymbol("FLOAT-DIGITS"), makeString("float_digits")), list(makeSymbol("FLOAT-RADIX"), makeString("float_radix")), list(makeSymbol("FLOAT-SIGN"), makeString("float_sign")), list(makeSymbol("FLOATP"), makeString("dp_floatp")), list(makeSymbol("FLOOR"), makeString("sublisp_floor")), list(makeSymbol("FMAKUNBOUND"), makeString("fmakunbound")), list(makeSymbol("FORCE-OUTPUT"), makeString("force_output")), list(makeSymbol("FORK-PROCESS"), makeString("fork_process")), list(makeSymbol("FORMAT"), makeString("format_g")), list(makeSymbol("FOURTH"), makeString("fourth")), list(makeSymbol("FRESH-LINE"), makeString("fresh_line")), list(makeSymbol("FUNCALL"), makeString("funcall")), list(makeSymbol("FUNCTION-INFORMATION"), makeString("function_information")), list(makeSymbol("FUNCTION-SPEC-P"), makeString("dp_function_spec_p")), list(makeSymbol("FUNCTIONP"), makeString("dp_functionp")), list(makeSymbol("GC"), makeString("gc")), list(makeSymbol("GC-DYNAMIC"), makeString("gc_dynamic")), list(makeSymbol("GC-EPHEMERAL"), makeString("gc_ephemeral")), list(makeSymbol("GC-FULL"), makeString("gc_full")), list(makeSymbol("GENSYM"), makeString("gensym")), list(makeSymbol("GENTEMP"), makeString("gentemp")), list(makeSymbol("GET"), makeString("get")), list(makeSymbol("GET-DECODED-TIME"), makeString("get_decoded_time")), list(makeSymbol("GET-DISPATCH-MACRO-CHARACTER"), makeString("get_dispatch_macro_character")), list(makeSymbol("GET-FILE-POSITION"), makeString("get_file_position")), list(makeSymbol("GET-FILE-POSITION"), makeString("get_file_position")), list(makeSymbol("GET-INTERNAL-REAL-TIME"), makeString("get_internal_real_time")), list(makeSymbol("GET-INTERNAL-RUN-TIME"), makeString("get_internal_run_time")), list(makeSymbol("GET-MACHINE-NAME"), makeString("get_machine_name")), list(makeSymbol("GET-MACRO-CHARACTER"), makeString("get_macro_character")), list(makeSymbol("GET-NETWORK-NAME"), makeString("get_network_name")), list(makeSymbol("GET-OUTPUT-STREAM-STRING"), makeString("get_output_stream_string")), list(makeSymbol("GET-PROCESS-ID"), makeString("get_process_id")), list(makeSymbol("GET-STRING-FROM-USER"), makeString("get_string_from_user")), list(makeSymbol("GET-UNIVERSAL-TIME"), makeString("get_universal_time")), list(makeSymbol("GET-USER-NAME"), makeString("get_user_name")), list(makeSymbol("GETF"), makeString("getf")), list(makeSymbol("GETHASH"), makeString("gethash")), list(makeSymbol("GETHASH-WITHOUT-VALUES"), makeString("gethash_without_values")), list(makeSymbol("GUID-P"), makeString("dp_guid_p")), list(makeSymbol("GUID-STRING-P"), makeString("guid_string_p")), list(makeSymbol("GUID-TO-STRING"), makeString("guid_to_string")), list(makeSymbol("GUID/="), makeString("dp_guidNE")), list(makeSymbol("GUID<"), makeString("dp_guidL")), list(makeSymbol("GUID<="), makeString("dp_guidLE")), list(makeSymbol("GUID="), makeString("dp_guidE")), list(makeSymbol("GUID>"), makeString("dp_guidG")), list(makeSymbol("GUID>="), makeString("dp_guidGE")), list(makeSymbol("HASH-TABLE-COUNT"), makeString("hash_table_count")), list(makeSymbol("HASH-TABLE-ITERATOR-DONE-P"), makeString("hash_table_iterator_done_p")), list(makeSymbol("HASH-TABLE-ITERATOR-HASH-TABLE"), makeString("hash_table_iterator_hash_table")), list(makeSymbol("HASH-TABLE-ITERATOR-KEY"), makeString("hash_table_iterator_key")), list(makeSymbol("HASH-TABLE-ITERATOR-NEXT"), makeString("hash_table_iterator_next")), list(makeSymbol("HASH-TABLE-ITERATOR-P"), makeString("hash_table_iterator_p")), list(makeSymbol("HASH-TABLE-ITERATOR-VALUE"), makeString("hash_table_iterator_value")), list(makeSymbol("HASH-TABLE-P"), makeString("dp_hash_table_p")), list(makeSymbol("HASH-TABLE-SIZE"), makeString("hash_table_size")), list(makeSymbol("HASH-TABLE-TEST"), makeString("hash_table_test")), list(IDENTITY, makeString("identity")), list(makeSymbol("IGNORE"), makeString("ignore")), list(makeSymbol("IMPORT"), makeString("import")), list(makeSymbol("INFINITY-P"), makeString("dp_infinity_p")), list(makeSymbol("INPUT-STREAM-P"), makeString("input_stream_p")), list(makeSymbol("INT/"), makeString("int_div")), list(makeSymbol("INTEGER-DECODE-FLOAT"), makeString("integer_decode_float")), list(makeSymbol("INTEGER-LENGTH"), makeString("integer_length")), list(makeSymbol("INTEGERP"), makeString("dp_integerp")), list(makeSymbol("INTERACTIVE-STREAM-P"), makeString("interactive_stream_p")), list(makeSymbol("INTERN"), makeString("intern")), list(makeSymbol("INTERNAL-REAL-TIME-HAS-ARRIVED?"), makeString("internal_real_time_has_arrived_p")), list(makeSymbol("INTERRUPT-PROCESS"), makeString("interrupt_process")), list(makeSymbol("INTERSECTION"), makeString("intersection")), list(makeSymbol("ISQRT"), makeString("isqrt")), list(makeSymbol("KEYWORDP"), makeString("dp_keywordp")), list(makeSymbol("KILL-PROCESS"), makeString("kill_process")), list(makeSymbol("LAST"), makeString("last")), list(makeSymbol("LDB"), makeString("f_ldb")), list(makeSymbol("LDIFF"), makeString("ldiff")), list(makeSymbol("LENGTH"), makeString("length")), list(makeSymbol("LISP-IMPLEMENTATION-TYPE"), makeString("lisp_implementation_type")), list(makeSymbol("LISP-IMPLEMENTATION-VERSION"), makeString("lisp_implementation_version")), list(makeSymbol("LIST"), makeString("list")), list(makeSymbol("LIST*"), makeString("listS")), list(makeSymbol("LIST-ALL-PACKAGES"), makeString("list_all_packages")), list(makeSymbol("LIST-LENGTH"), makeString("list_length")), list(makeSymbol("LISTEN"), makeString("sublisp_listen")), list(makeSymbol("LISTP"), makeString("dp_listp")), list(makeSymbol("LOAD"), makeString("load")), list(makeSymbol("LOCK-IDLE-P"), makeString("lock_idle_p")), list(makeSymbol("LOCK-LOCKER"), makeString("lock_locker")), list(makeSymbol("LOCK-NAME"), makeString("lock_name")), list(makeSymbol("LOCK-P"), makeString("dp_lockp")), list(makeSymbol("LOCK-PACKAGE"), makeString("lock_package")), list(makeSymbol("LOG"), makeString("sublisp_log")), list(makeSymbol("LOG-MESSAGE"), makeString("log_message")), list(makeSymbol("LOGAND"), makeString("logand")), list(makeSymbol("LOGANDC1"), makeString("logandc1")), list(makeSymbol("LOGANDC2"), makeString("logandc2")), list(makeSymbol("LOGBITP"), makeString("logbitp")), list(makeSymbol("LOGCOUNT"), makeString("logcount")), list(makeSymbol("LOGEQV"), makeString("logeqv")), list(makeSymbol("LOGIOR"), makeString("logior")), list(makeSymbol("LOGNAND"), makeString("lognand")), list(makeSymbol("LOGNOR"), makeString("lognor")), list(makeSymbol("LOGNOT"), makeString("lognot")), list(makeSymbol("LOGORC1"), makeString("logorc1")), list(makeSymbol("LOGORC2"), makeString("logorc2")), list(makeSymbol("LOGTEST"), makeString("logtest")), list(makeSymbol("LOGXOR"), makeString("logxor")), list(makeSymbol("LONG-SITE-NAME"), makeString("long_site_name")), list(makeSymbol("LOWER-CASE-P"), makeString("dp_lower_case_p")), list(makeSymbol("MACHINE-INSTANCE"), makeString("machine_instance")), list(makeSymbol("MACHINE-TYPE"), makeString("machine_type")), list(makeSymbol("MACHINE-VERSION"), makeString("machine_version")), list(makeSymbol("MACRO-OPERATOR-P"), makeString("dp_macro_operator_p")), list(makeSymbol("MACROEXPAND"), makeString("sublisp_macroexpand")), list(makeSymbol("MACROEXPAND-1"), makeString("sublisp_macroexpand_one")), list(makeSymbol("MAKE-BROADCAST-STREAM"), makeString("make_broadcast_stream")), list(makeSymbol("MAKE-CONCATENATED-STREAM"), makeString("make_concatenated_stream")), list(makeSymbol("MAKE-DATE-RELATIVE-GUID"), makeString("make_date_relative_guid")), list(makeSymbol("MAKE-DIRECTORY"), makeString("make_directory")), list(makeSymbol("MAKE-DISPATCH-MACRO-CHARACTER"), makeString("make_dispatch_macro_character")), list(makeSymbol("MAKE-ECHO-STREAM"), makeString("make_echo_stream")), list(makeSymbol("MAKE-HASH-TABLE"), makeString("make_hash_table")), list(makeSymbol("MAKE-HASH-TABLE-ITERATOR"), makeString("make_hash_table_iterator")), list(makeSymbol("MAKE-KEYWORD"), makeString("make_keyword")), list(makeSymbol("MAKE-LIST"), makeString("make_list")), list(makeSymbol("MAKE-LOCK"), makeString("make_lock")), list(makeSymbol("MAKE-PACKAGE"), makeString("make_package")), list(makeSymbol("MAKE-PRIVATE-BROADCAST-STREAM"), makeString("make_private_broadcast_stream")), list(makeSymbol("MAKE-PRIVATE-CONCATENATED-STREAM"), makeString("make_private_concatenated_stream")), list(makeSymbol("MAKE-PRIVATE-ECHO-STREAM"), makeString("make_private_echo_stream")), list(makeSymbol("MAKE-PRIVATE-STRING-INPUT-STREAM"), makeString("make_private_string_input_stream")), list(makeSymbol("MAKE-PRIVATE-STRING-OUTPUT-STREAM"), makeString("make_private_string_output_stream")), list(makeSymbol("MAKE-PRIVATE-SYNONYM-STREAM"), makeString("make_private_synonym_stream")), list(makeSymbol("MAKE-PRIVATE-TWO-WAY-STREAM"), makeString("make_private_two_way_stream")), list(makeSymbol("MAKE-PROCESS"), makeString("make_process")), list(makeSymbol("MAKE-STRING"), makeString("make_string")), list(makeSymbol("MAKE-STRING-INPUT-STREAM"), makeString("make_string_input_stream")), list(makeSymbol("MAKE-STRING-OUTPUT-STREAM"), makeString("make_string_output_stream")), list(makeSymbol("MAKE-SYMBOL"), makeString("make_symbol")), list(makeSymbol("MAKE-SYNONYM-STREAM"), makeString("make_synonym_stream")), list(makeSymbol("MAKE-TWO-WAY-STREAM"), makeString("make_two_way_stream")), list(makeSymbol("MAKE-VECTOR"), makeString("make_vector")), list(makeSymbol("MAKUNBOUND"), makeString("makunbound")), list(makeSymbol("MAPC"), makeString("mapc")), list(makeSymbol("MAPCAN"), makeString("mapcan")), list(makeSymbol("MAPCAR"), makeString("mapcar")), list(makeSymbol("MAPCON"), makeString("mapcon")), list(makeSymbol("MAPHASH"), makeString("maphash")), list(makeSymbol("MAPL"), makeString("mapl")), list(makeSymbol("MAPLIST"), makeString("maplist")), list(makeSymbol("MAX"), makeString("max")), list(makeSymbol("MEMBER"), makeString("member")), list(makeSymbol("MEMBER-IF"), makeString("member_if")), list(makeSymbol("MIN"), makeString("min")), list(makeSymbol("MINUSP"), makeString("dp_minusp")), list(makeSymbol("MISMATCH"), makeString("mismatch")), list(makeSymbol("MOD"), makeString("mod")), list(makeSymbol("NBUTLAST"), makeString("nbutlast")), list(makeSymbol("NCONC"), makeString("nconc")), list(makeSymbol("NEW-GUID"), makeString("new_guid")), list(makeSymbol("NINTERSECTION"), makeString("nintersection")), list(makeSymbol("NINTH"), makeString("ninth")), list(makeSymbol("NOT-A-NUMBER-P"), makeString("dp_not_a_number_p")), list(makeSymbol("NOTIFY"), makeString("notify")), list(makeSymbol("NOTIFY-USER"), makeString("notify_user")), list(makeSymbol("NRECONC"), makeString("nreconc")), list(makeSymbol("NREVERSE"), makeString("nreverse")), list(makeSymbol("NSET-DIFFERENCE"), makeString("nset_difference")), list(makeSymbol("NSET-EXCLUSIVE-OR"), makeString("nset_exclusive_or")), list(makeSymbol("NSTRING-CAPITALIZE"), makeString("nstring_capitalize")), list(makeSymbol("NSTRING-DOWNCASE"), makeString("nstring_downcase")), list(makeSymbol("NSTRING-UPCASE"), makeString("nstring_upcase")), list(makeSymbol("NSUBLIS"), makeString("nsublis")), list(makeSymbol("NSUBST"), makeString("nsubst")), list(makeSymbol("NSUBST-IF"), makeString("nsubst_if")), list(makeSymbol("NSUBSTITUTE"), makeString("nsubstitute")), list(makeSymbol("NSUBSTITUTE-IF"), makeString("nsubstitute_if")), list(makeSymbol("NTH"), makeString("nth")), list(makeSymbol("NTHCDR"), makeString("nthcdr")), list(makeSymbol("NULL"), makeString("dp_null")), list(makeSymbol("NUMBERP"), makeString("dp_numberp")), list(makeSymbol("NUNION"), makeString("sublisp_nunion")), list(makeSymbol("ODDP"), makeString("dp_oddp")), list(makeSymbol("OPEN-BINARY"), makeString("open_binary")), list(makeSymbol("OPEN-STREAM-P"), makeString("open_stream_p")), list(makeSymbol("OPEN-TCP-STREAM"), makeString("open_tcp_stream")), list(makeSymbol("OPEN-TEXT"), makeString("open_text")), list(makeSymbol("OUTPUT-STREAM-P"), makeString("output_stream_p")), list(makeSymbol("PACKAGE-LOCKED-P"), makeString("dp_package_locked_p")), list(makeSymbol("PACKAGE-NAME"), makeString("package_name")), list(makeSymbol("PACKAGE-NICKNAMES"), makeString("package_nicknames")), list(makeSymbol("PACKAGE-SHADOWING-SYMBOLS"), makeString("package_shadowing_symbols")), list(makeSymbol("PACKAGE-USE-LIST"), makeString("package_use_list")), list(makeSymbol("PACKAGE-USED-BY-LIST"), makeString("package_used_by_list")), list(makeSymbol("PACKAGEP"), makeString("dp_packagep")), list(makeSymbol("PAIRLIS"), makeString("pairlis")), list(makeSymbol("PARSE-INTEGER"), makeString("parse_integer")), list(makeSymbol("PEEK-CHAR"), makeString("peek_char")), list(makeSymbol("PLUSP"), makeString("dp_plusp")), list(makeSymbol("POSITION"), makeString("position")), list(makeSymbol("POSITION-IF"), makeString("position_if")), list(makeSymbol("PRIN1"), makeString("prin1")), list(makeSymbol("PRIN1-TO-STRING"), makeString("prin1_to_string")), list(makeSymbol("PRINC"), makeString("princ")), list(makeSymbol("PRINC-TO-STRING"), makeString("princ_to_string")), list(makeSymbol("PRINT"), makeString("print")), list(makeSymbol("PRINT-OBJECT"), makeString("print_object")), list(makeSymbol("PROBE-FILE"), makeString("dp_probe_file")), list(makeSymbol("PROCESS-ACTIVE-P"), makeString("process_active_p")), list(makeSymbol("PROCESS-BLOCK"), makeString("process_block")), list(makeSymbol("PROCESS-NAME"), makeString("process_name")), list(makeSymbol("PROCESS-PRIORITY"), makeString("process_priority")), list(makeSymbol("PROCESS-STATE"), makeString("process_state")), list(makeSymbol("PROCESS-UNBLOCK"), makeString("process_unblock")), list(makeSymbol("PROCESS-WAIT"), makeString("process_wait")), list(makeSymbol("PROCESS-WAIT-WITH-TIMEOUT"), makeString("process_wait_with_timeout")), list(makeSymbol("PROCESS-WHOSTATE"), makeString("process_whostate")), list(makeSymbol("PROCESSP"), makeString("dp_processp")), list(makeSymbol("PUT"), makeString("put")), list(makeSymbol("PUTF"), makeString("putf")), list(makeSymbol("RANDOM"), makeString("sublisp_random")), list(makeSymbol("RASSOC"), makeString("rassoc")), list(makeSymbol("RASSOC-IF"), makeString("rassoc_if")), list(makeSymbol("READ"), makeString("sublisp_read")), list(makeSymbol("READ-BYTE"), makeString("read_byte")), list(makeSymbol("READ-CHAR"), makeString("read_char")), list(makeSymbol("READ-CHAR-NO-HANG"), makeString("read_char_no_hang")), list(makeSymbol("READ-DELIMITED-LIST"), makeString("read_delimited_list")), list(makeSymbol("READ-FROM-STRING"), makeString("read_from_string")), list(makeSymbol("READ-FROM-STRING-IGNORING-ERRORS"), makeString("f_read_from_string_ignoring_errors")), list(makeSymbol("READ-IGNORING-ERRORS"), makeString("read_ignoring_errors")), list(makeSymbol("READ-LINE"), makeString("read_line")), list(makeSymbol("READ-PRESERVING-WHITESPACE"), makeString("read_preserving_whitespace")), list(makeSymbol("READ-SEQUENCE"), makeString("read_sequence")), list(makeSymbol("READTABLE-CASE"), makeString("readtable_case")), list(makeSymbol("READTABLEP"), makeString("readtablep")), list(makeSymbol("REGISTER-LOW-MEMORY-CALLBACK"), makeString("register_low_memory_callback")), list(makeSymbol("REM"), makeString("rem")), list(makeSymbol("REMF"), makeString("remf")), list(makeSymbol("REMHASH"), makeString("remhash")), list(makeSymbol("REMOVE"), makeString("sublisp_remove")), list(makeSymbol("REMOVE-DUPLICATES"), makeString("remove_duplicates")), list(makeSymbol("REMOVE-IF"), makeString("sublisp_remove_if")), list(makeSymbol("REMPROP"), makeString("remprop")), list(makeSymbol("RENAME-FILE"), makeString("rename_file")), list(makeSymbol("REPLACE"), makeString("replace")), list(makeSymbol("REST"), makeString("rest")), list(makeSymbol("RESTART-PROCESS"), makeString("restart_process")), list(makeSymbol("REVAPPEND"), makeString("revappend")), list(makeSymbol("REVERSE"), makeString("reverse")), list(makeSymbol("ROOM"), makeString("room")), list(makeSymbol("ROUND"), makeString("sublisp_round")), list(makeSymbol("RPLACA"), makeString("rplaca")), list(makeSymbol("RPLACD"), makeString("rplacd")), list(makeSymbol("SCALE-FLOAT"), makeString("scale_float")), list(makeSymbol("SEARCH"), makeString("search")), list(makeSymbol("SECOND"), makeString("second")), list(makeSymbol("SEED-RANDOM"), makeString("seed_random")), list(makeSymbol("SEQUENCEP"), makeString("dp_sequencep")), list(makeSymbol("SET"), makeString("set")), list(makeSymbol("SET-AREF"), makeString("set_aref")), list(makeSymbol("SET-CHAR"), makeString("sublisp_set_char")), list(makeSymbol("SET-DIFFERENCE"), makeString("set_difference")), list(makeSymbol("SET-DISPATCH-MACRO-CHARACTER"), makeString("set_dispatch_macro_character")), list(makeSymbol("SET-EXCLUSIVE-OR"), makeString("set_exclusive_or")), list(makeSymbol("SET-FILE-POSITION"), makeString("set_file_position")), list(makeSymbol("SET-MACRO-CHARACTER"), makeString("set_macro_character")), list(makeSymbol("SET-NTH"), makeString("set_nth")), list(makeSymbol("SET-PROCESS-PRIORITY"), makeString("set_process_priority")), list(makeSymbol("SET-SYNTAX-FROM-CHAR"), makeString("set_syntax_from_char")), list(makeSymbol("SETHASH"), makeString("sethash")), list(makeSymbol("SEVENTH"), makeString("seventh")), list(makeSymbol("SHORT-SITE-NAME"), makeString("short_site_name")), list(makeSymbol("SHOW-PROCESSES"), makeString("show_processes")), list(makeSymbol("SIMPLE-READER-ERROR"), makeString("simple_reader_error")), list(makeSymbol("SIN"), makeString("sublisp_sin")), list(makeSymbol("SIXTH"), makeString("sixth")), list(makeSymbol("SLEEP"), makeString("sublisp_sleep")), list(makeSymbol("SOFTWARE-TYPE"), makeString("software_type")), list(makeSymbol("SOFTWARE-VERSION"), makeString("software_version")), list(makeSymbol("SORT"), makeString("sort")), list(makeSymbol("SQRT"), makeString("sublisp_sqrt")), list(makeSymbol("STABLE-SORT"), makeString("stable_sort")), list(makeSymbol("STREAM-ELEMENT-TYPE"), makeString("stream_element_type")), list(makeSymbol("STREAMP"), makeString("dp_streamp")), list(makeSymbol("STRING"), makeString("sublisp_string")), list(makeSymbol("STRING-CAPITALIZE"), makeString("string_capitalize")), list(makeSymbol("STRING-DOWNCASE"), makeString("string_downcase")), list(makeSymbol("STRING-EQUAL"), makeString("dp_string_equal")), list(makeSymbol("STRING-GREATERP"), makeString("dp_string_greaterp")), list(makeSymbol("STRING-LEFT-TRIM"), makeString("string_left_trim")), list(makeSymbol("STRING-LESSP"), makeString("dp_string_lessp")), list(makeSymbol("STRING-NOT-EQUAL"), makeString("dp_string_not_equal")), list(makeSymbol("STRING-NOT-GREATERP"), makeString("dp_string_not_greaterp")), list(makeSymbol("STRING-NOT-LESSP"), makeString("dp_string_not_lessp")), list(makeSymbol("STRING-RIGHT-TRIM"), makeString("string_right_trim")), list(makeSymbol("STRING-TO-GUID"), makeString("string_to_guid")), list(makeSymbol("STRING-TRIM"), makeString("string_trim")), list(makeSymbol("STRING-UPCASE"), makeString("string_upcase")), list(makeSymbol("STRING/="), makeString("dp_stringNE")), list(makeSymbol("STRING<"), makeString("dp_stringL")), list(makeSymbol("STRING<="), makeString("dp_stringLE")), list(makeSymbol("STRING="), makeString("dp_stringE")), list(makeSymbol("STRING>"), makeString("dp_stringG")), list(makeSymbol("STRING>="), makeString("dp_stringGE")), list(makeSymbol("STRINGP"), makeString("dp_stringp")), list(makeSymbol("SUBLIS"), makeString("sublis")), list(makeSymbol("ALIEN-NULL-PTR?", "SUBLISP"), makeString("alien_null_ptr_P")), list(makeSymbol("ALIEN-P", "SUBLISP"), makeString("dp_alienp")), list(makeSymbol("ALIEN-TYPE", "SUBLISP"), makeString("alien_type")), list(makeSymbol("BACKUP-ARGS", "SUBLISP"), makeString("backup_args")), list(makeSymbol("BAD-FORMAT-DIRECTIVE", "SUBLISP"), makeString("bad_format_directive")), list(makeSymbol("CALL-FORMAT-DIRECTIVE", "SUBLISP"), makeString("call_format_directive")), list(makeSymbol("CHECK-FLAGS", "SUBLISP"), makeString("check_flags")), list(makeSymbol("DECLARATION-INFORMATION", "SUBLISP"), makeString("declaration_information")), list(makeSymbol("END-OF-FILE-ERROR", "SUBLISP"), makeString("end_of_file_error")), list(makeSymbol("FIND-DIRECTIVE", "SUBLISP"), makeString("find_directive")), list(makeSymbol("FORMAT-CARDINAL", "SUBLISP"), makeString("format_cardinal")), list(makeSymbol("FORMAT-CARDINAL-INTERNAL", "SUBLISP"), makeString("format_cardinal_internal")), list(makeSymbol("FORMAT-DIRECTIVE-P", "SUBLISP"), makeString("format_directive_p")), list(makeSymbol("FORMAT-INTEGER", "SUBLISP"), makeString("format_integer")), list(makeSymbol("FORMAT-INTEGER-INTERNAL", "SUBLISP"), makeString("format_integer_internal")), list(makeSymbol("FORMAT-INTERNAL", "SUBLISP"), makeString("format_internal")), list(makeSymbol("FORMAT-ITERATION", "SUBLISP"), makeString("format_iteration")), list(makeSymbol("FORMAT-ORDINAL", "SUBLISP"), makeString("format_ordinal")), list(makeSymbol("FORMAT-PADDED", "SUBLISP"), makeString("format_padded")), list(makeSymbol("FORMAT-REPEAT", "SUBLISP"), makeString("format_repeat")), list(makeSymbol("FORMAT-SUBLIST-ITERATION", "SUBLISP"), makeString("format_sublist_iteration")), list(makeSymbol("FORMAT-TYPEP", "SUBLISP"), makeString("format_typep")), list(makeSymbol("GETHASH-BUCKET", "SUBLISP"), makeString("gethash_bucket")), list(makeSymbol("ILLEGAL-DIRECTIVE", "SUBLISP"), makeString("illegal_directive")), list(makeSymbol("MATCHING-BRACKET", "SUBLISP"), makeString("matching_bracket")), list(makeSymbol("MATCHING-BRACKET-NOT-FOUND", "SUBLISP"), makeString("matching_bracket_not_found")), list(makeSymbol("NOT-A-FORMAT-CONTROL", "SUBLISP"), makeString("not_a_format_control")), list(makeSymbol("NOT-A-LIST-ARGUMENT", "SUBLISP"), makeString("not_a_list_argument")), list(makeSymbol("NOT-ENOUGH-FORMAT-ARGUMENTS", "SUBLISP"), makeString("not_enough_format_arguments")), list(makeSymbol("PARSE-FORMAT-COMMAND", "SUBLISP"), makeString("parse_format_command")), list(makeSymbol("POSSIBLY-NOTE-FUNCTION-ENTRY", "SUBLISP"), makeString("f_possibly_note_function_entry")), list(makeSymbol("REALLY-FORMAT", "SUBLISP"), makeString("really_format")), list(makeSymbol("REPITITION-DESIGNATOR-VALUE", "SUBLISP"), makeString("repitition_designator_value")), list(makeSymbol("ROUND-DIGITS", "SUBLISP"), makeString("round_digits")), list(makeSymbol("SPLIT-FLONUM-DIGITS", "SUBLISP"), makeString("split_flonum_digits")), list(makeSymbol("STREAM-LINE-COLUMN", "SUBLISP"), makeString("stream_line_column")), list(makeSymbol("STREAM-LINE-COLUMN", "SUBLISP"), makeString("stream_line_column")), list(makeSymbol("SXHASH-ROT", "SUBLISP"), makeString("sxhash_rot")), list(makeSymbol("UNIMPLEMENTED-FORMAT-DIRECTIVE", "SUBLISP"), makeString("unimplemented_format_directive")), list(makeSymbol("SUBSEQ"), makeString("subseq")), list(makeSymbol("SUBSETP"), makeString("dp_subsetp")), list(makeSymbol("SUBST"), makeString("subst")), list(makeSymbol("SUBST-IF"), makeString("subst_if")), list(makeSymbol("SUBSTITUTE"), makeString("substitute")), list(makeSymbol("SUBSTITUTE-IF"), makeString("substitute_if")), list(makeSymbol("SXHASH"), makeString("sxhash")), list(makeSymbol("SYMBOL-FUNCTION"), makeString("symbol_function")), list(makeSymbol("SYMBOL-NAME"), makeString("symbol_name")), list(makeSymbol("SYMBOL-PACKAGE"), makeString("symbol_package")), list(makeSymbol("SYMBOL-PLIST"), makeString("symbol_plist")), list(makeSymbol("SYMBOL-VALUE"), makeString("symbol_value")), list(makeSymbol("SYMBOLP"), makeString("dp_symbolp")), list(makeSymbol("SYNONYM-STREAM-SYMBOL"), makeString("synonym_stream_symbol")), list(makeSymbol("TAILP"), makeString("dp_tailp")), list(makeSymbol("TAN"), makeString("sublisp_tan")), list(makeSymbol("TENTH"), makeString("tenth")), list(makeSymbol("TERPRI"), makeString("terpri")), list(makeSymbol("THIRD"), makeString("third")), list(makeSymbol("THROW"), makeString("sublisp_throw")), list(makeSymbol("TIME-HAS-ARRIVED?"), makeString("time_has_arrived_p")), list(makeSymbol("TREE-EQUAL"), makeString("dp_tree_equal")), list(makeSymbol("TRUE"), makeString("sublisp_true")), list(makeSymbol("TRUNCATE"), makeString("sublisp_truncate")), list(makeSymbol("TWO-WAY-STREAM-INPUT-STREAM"), makeString("two_way_stream_input_stream")), list(makeSymbol("TWO-WAY-STREAM-OUTPUT-STREAM"), makeString("two_way_stream_output_stream")), list(makeSymbol("TYPE-OF"), makeString("sublisp_type_of")), list(makeSymbol("UNINTERN"), makeString("unintern")), list(makeSymbol("UNION"), makeString("sublisp_union")), list(makeSymbol("UNREAD-CHAR"), makeString("unread_char")), list(makeSymbol("UPPER-CASE-P"), makeString("dp_upper_case_p")), list(makeSymbol("USER-CONFIRM"), makeString("user_confirm")), list(makeSymbol("VALID-PROCESS-P"), makeString("valid_process_p")), list(makeSymbol("VALUES"), makeString("values")), list(makeSymbol("VARIABLE-INFORMATION"), makeString("variable_information")), list(makeSymbol("VECTOR"), makeString("sublisp_vector")), list(makeSymbol("VECTORP"), makeString("dp_vectorp")), list(makeSymbol("VISIT-DEFSTRUCT"), makeString("f_visit_defstruct")), list(makeSymbol("WARN"), makeString("sublisp_warn")), list(makeSymbol("WRITE"), makeString("write_g")), list(makeSymbol("WRITE-BYTE"), makeString("write_byte")), list(makeSymbol("WRITE-CHAR"), makeString("write_char")), list(makeSymbol("WRITE-IMAGE"), makeString("write_image")), list(makeSymbol("WRITE-LINE"), makeString("write_line")), list(makeSymbol("WRITE-SEQUENCE"), makeString("write_sequence")), list(makeSymbol("WRITE-STRING"), makeString("write_string")), list(makeSymbol("WRITE-TO-STRING"), makeString("write_to_string_g")), list(makeSymbol("ZEROP"), makeString("dp_zerop")), list(makeSymbol("DECLARE-FOREIGN-SHARED-LIBRARY", "SUBLISP"), makeString("f_declare_foreign_shared_library")), list(makeSymbol("DEFINE-FOREIGN-FUNCTION-INTERNAL", "SUBLISP"), makeString("f_define_foreign_function_internal")), list(makeSymbol("FOREIGN-SHARED-LIBRARY-INSTALLED?", "SUBLISP"), makeString("f_foreign_shared_library_installedP")), list(makeSymbol("ENSURE-FOREIGN-SHARED-LIBRARY-LOADED", "SUBLISP"), makeString("f_ensure_foreign_shared_library_loaded")), list(makeSymbol("VECTOR-FOR-MARSHALLING", "SUBLISP"), makeString("f_vector_for_marshalling")), list(makeSymbol("CDESTRUCTURING-BIND-ERROR", "SUBLISP"), makeString("f_cdestructuring_bind_error")), list(makeSymbol("DESTRUCTURING-BIND-MUST-CONSP", "SUBLISP"), makeString("f_destructuring_bind_must_consp")), list(makeSymbol("DESTRUCTURING-BIND-MUST-LISTP", "SUBLISP"), makeString("f_destructuring_bind_must_listp")), list(makeSymbol("PROPERTY-LIST-MEMBER", "SUBLISP"), makeString("f_property_list_member")), list(makeSymbol("BQ-CONS"), makeString("f_bq_cons")), list(makeSymbol("DEFSTRUCT-ANALYZE", "SUBLISP"), makeString("f_defstruct_analyze")) });
    }

    // Internal Constant Initializer Methods
    @LispMethod(comment = "Internal Constant Initializer Methods")
    private static SubLObject _constant_0_initializer() {
        return list(new SubLObject[]{ list(makeSymbol("*"), makeString("mult")), list(makeSymbol("+"), makeString("add")), list(makeSymbol("-"), makeString("sub")), list(makeSymbol("/"), makeString("divide")), list(makeSymbol("/="), makeString("dp_numNE")), list(makeSymbol("<"), makeString("dp_numL")), list(makeSymbol("<="), makeString("dp_numLE")), list(makeSymbol("="), makeString("dp_numE")), list(makeSymbol(">"), makeString("dp_numG")), list(makeSymbol(">="), makeString("dp_numGE")), list(makeSymbol("ABS"), makeString("sublisp_abs")), list(makeSymbol("ACONS"), makeString("acons")), list(makeSymbol("ACOS"), makeString("sublisp_acos")), list(makeSymbol("ADJOIN"), makeString("adjoin")), list(makeSymbol("ALERT-USER"), makeString("alert_user")), list(makeSymbol("ALL-PROCESSES"), makeString("all_processes")), list(makeSymbol("ALPHA-CHAR-P"), makeString("dp_alpha_char_p")), list(makeSymbol("ALPHANUMERICP"), makeString("dp_alphanumericp")), list(makeSymbol("APPEND"), makeString("append")), list(makeSymbol("APPLY"), makeString("apply")), list(makeSymbol("APROPOS"), makeString("apropos")), list(makeSymbol("AREF"), makeString("aref")), list(makeSymbol("ASH"), makeString("ash")), list(makeSymbol("ASIN"), makeString("sublisp_asin")), list(makeSymbol("ASSEMBLE-FIXNUMS-TO-GUID"), makeString("assemble_fixnums_to_guid")), list(makeSymbol("ASSEMBLE-FIXNUMS-TO-INTEGER"), makeString("assemble_fixnums_to_integer")), list(makeSymbol("ASSOC"), makeString("assoc")), list(makeSymbol("ASSOC-IF"), makeString("assoc_if")), list(makeSymbol("ATAN"), makeString("sublisp_atan")), list(makeSymbol("ATOM"), makeString("dp_atom")), list(makeSymbol("BOOLE"), makeString("boole")), list(makeSymbol("BOTH-CASE-P"), makeString("dp_both_case_p")), list(makeSymbol("BOUNDP"), makeString("dp_boundp")), list(makeSymbol("BREAK"), makeString("sublisp_break")), list(makeSymbol("BROADCAST-STREAM-STREAMS"), makeString("broadcast_stream_streams")), list(makeSymbol("BUTLAST"), makeString("butlast")), list(makeSymbol("BYTE"), makeString("f_byte")), list(makeSymbol("CAAR"), makeString("caar")), list(makeSymbol("CADR"), makeString("cadr")), list(makeSymbol("CAR"), makeString("car")), list(makeSymbol("CCONCATENATE"), makeString("cconcatenate")), list(makeSymbol("CDAR"), makeString("cdar")), list(makeSymbol("CDDR"), makeString("cddr")), list(makeSymbol("CDR"), makeString("cdr")), list(makeSymbol("CEILING"), makeString("sublisp_ceiling")), list(makeSymbol("CERROR"), makeString("sublisp_cerror")), list(makeSymbol("CHAR"), makeString("sublisp_char")), list(makeSymbol("CHAR-CODE"), makeString("char_code")), list(makeSymbol("CHAR-DOWNCASE"), makeString("char_downcase")), list(makeSymbol("CHAR-EQUAL"), makeString("dp_char_equal")), list(makeSymbol("CHAR-GREATERP"), makeString("dp_char_greaterp")), list(makeSymbol("CHAR-LESSP"), makeString("dp_char_lessp")), list(makeSymbol("CHAR-NOT-EQUAL"), makeString("dp_char_not_equal")), list(makeSymbol("CHAR-NOT-GREATERP"), makeString("dp_char_not_greaterp")), list(makeSymbol("CHAR-NOT-LESSP"), makeString("dp_char_not_lessp")), list(makeSymbol("CHAR-UPCASE"), makeString("char_upcase")), list(makeSymbol("CHAR/="), makeString("dp_charNE")), list(makeSymbol("CHAR<"), makeString("dp_charL")), list(makeSymbol("CHAR<="), makeString("dp_charLE")), list(makeSymbol("CHAR="), makeString("dp_charE")), list(makeSymbol("CHAR>"), makeString("dp_charG")), list(makeSymbol("CHAR>="), makeString("dp_charGE")), list(makeSymbol("CHARACTERP"), makeString("dp_characterp")), list(makeSymbol("CIRCULAR-LIST-P"), makeString("dp_circular_list_p")), list(makeSymbol("CLEAR-INPUT"), makeString("clear_input")), list(makeSymbol("CLEAR-OUTPUT"), makeString("clear_output")), list(makeSymbol("CLOSE"), makeString("sublisp_close")), list(makeSymbol("CLRHASH"), makeString("clrhash")), list(makeSymbol("CMERGE"), makeString("cmerge")), list(makeSymbol("CODE-CHAR"), makeString("code_char")), list(makeSymbol("CONCATENATED-STREAM-STREAMS"), makeString("concatenated_stream_streams")), list(makeSymbol("CONS"), makeString("cons")), list(makeSymbol("CONSP"), makeString("dp_consp")), list(makeSymbol("CONSTANTP"), makeString("dp_constantp")), list(makeSymbol("CONSTRUCT-FILENAME"), makeString("construct_filename")), list(makeSymbol("COPY-ALIST"), makeString("copy_alist")), list(makeSymbol("COPY-LIST"), makeString("copy_list")), list(makeSymbol("COPY-READTABLE"), makeString("copy_readtable")), list(makeSymbol("COPY-SEQ"), makeString("copy_seq")), list(makeSymbol("COPY-TREE"), makeString("copy_tree")), list(makeSymbol("COS"), makeString("sublisp_cos")), list(makeSymbol("COUNT"), makeString("count")), list(makeSymbol("COUNT-IF"), makeString("count_if")), list(makeSymbol("CRACK-DATE-RELATIVE-GUID"), makeString("crack_date_relative_guid")), list(makeSymbol("CREDUCE"), makeString("creduce")), list(makeSymbol("CURRENT-PROCESS"), makeString("current_process")), list(makeSymbol("DATE-RELATIVE-GUID-P"), makeString("date_relative_guid_p")), list(makeSymbol("DEBUG"), makeString("debug")), list(makeSymbol("DEBUG-PROCESS"), makeString("debug_process")), list(makeSymbol("DECODE-FLOAT"), makeString("decode_float")), list(makeSymbol("DECODE-UNIVERSAL-TIME"), makeString("decode_universal_time")), list(makeSymbol("DEFAULT-STRUCT-PRINT-FUNCTION"), makeString("default_struct_print_function")), list(makeSymbol("DELETE"), makeString("delete")), list(makeSymbol("DELETE-DIRECTORY"), makeString("delete_directory")), list(makeSymbol("DELETE-DUPLICATES"), makeString("delete_duplicates")), list(makeSymbol("DELETE-FILE"), makeString("delete_file")), list(makeSymbol("DELETE-IF"), makeString("delete_if")), list(makeSymbol("DESTROY-HASH-TABLE-ITERATOR"), makeString("destroy_hash_table_iterator")), list(makeSymbol("DIGIT-CHAR"), makeString("digit_char")), list(makeSymbol("DIGIT-CHAR-P"), makeString("dp_digit_char_p")), list(makeSymbol("DIRECTORY"), makeString("directory")), list(makeSymbol("DIRECTORY-P"), makeString("directory_p")), list(makeSymbol("DISASSEMBLE-GUID-TO-FIXNUMS"), makeString("disassemble_guid_to_fixnums")), list(makeSymbol("DISASSEMBLE-INTEGER-TO-FIXNUMS"), makeString("disassemble_integer_to_fixnums")), list(makeSymbol("DPB"), makeString("f_dpb")), list(makeSymbol("ECHO-STREAM-INPUT-STREAM"), makeString("echo_stream_input_stream")), list(makeSymbol("ECHO-STREAM-OUTPUT-STREAM"), makeString("echo_stream_output_stream")), list(makeSymbol("EIGHTH"), makeString("eighth")), list(makeSymbol("ELT"), makeString("elt")), list(makeSymbol("ENCODE-UNIVERSAL-TIME"), makeString("encode_universal_time")), list(makeSymbol("ENDP"), makeString("dp_endp")), list(EQ, makeString("dp_eq")), list(EQL, makeString("dp_eql")), list(EQUAL, makeString("dp_equal")), list(EQUALP, makeString("dp_equalp")), list(makeSymbol("ERROR"), makeString("sublisp_error")), list(makeSymbol("EVAL"), makeString("eval")), list(makeSymbol("EVENP"), makeString("dp_evenp")), list(makeSymbol("EXIT"), makeString("sublisp_exit")), list(makeSymbol("EXP"), makeString("sublisp_exp")), list(makeSymbol("EXPORT"), makeString("export")), list(makeSymbol("EXPT"), makeString("expt")), list(makeSymbol("FALSE"), makeString("sublisp_false")), list(makeSymbol("FBOUNDP"), makeString("dp_fboundp")), list(makeSymbol("FIFTH"), makeString("fifth")), list(makeSymbol("FILE-AUTHOR"), makeString("file_author")), list(makeSymbol("FILE-LENGTH"), makeString("file_length")), list(makeSymbol("FILE-LENGTH"), makeString("file_length")), list(makeSymbol("FILE-POSITION"), makeString("file_position")), list(makeSymbol("FILE-STRING-LENGTH"), makeString("file_string_length")), list(makeSymbol("FILE-WRITE-DATE"), makeString("file_write_date")), list(makeSymbol("FILL"), makeString("fill")), list(makeSymbol("FIND"), makeString("find")), list(makeSymbol("FIND-IF"), makeString("find_if")), list(makeSymbol("FIND-PACKAGE"), makeString("find_package")), list(makeSymbol("FIND-SYMBOL"), makeString("find_symbol")), list(makeSymbol("FINISH-OUTPUT"), makeString("finish_output")), list(makeSymbol("FIRST"), makeString("first")), list(makeSymbol("FIXNUM*"), makeString("fixnum_mult")), list(makeSymbol("FIXNUMP"), makeString("dp_fixnump")), list(makeSymbol("FLOAT"), makeString("sublisp_float")), list(makeSymbol("FLOAT-DIGITS"), makeString("float_digits")), list(makeSymbol("FLOAT-RADIX"), makeString("float_radix")), list(makeSymbol("FLOAT-SIGN"), makeString("float_sign")), list(makeSymbol("FLOATP"), makeString("dp_floatp")), list(makeSymbol("FLOOR"), makeString("sublisp_floor")), list(makeSymbol("FMAKUNBOUND"), makeString("fmakunbound")), list(makeSymbol("FORCE-OUTPUT"), makeString("force_output")), list(makeSymbol("FORK-PROCESS"), makeString("fork_process")), list(makeSymbol("FORMAT"), makeString("format_g")), list(makeSymbol("FOURTH"), makeString("fourth")), list(makeSymbol("FRESH-LINE"), makeString("fresh_line")), list(makeSymbol("FUNCALL"), makeString("funcall")), list(makeSymbol("FUNCTION-INFORMATION"), makeString("function_information")), list(makeSymbol("FUNCTION-SPEC-P"), makeString("dp_function_spec_p")), list(makeSymbol("FUNCTIONP"), makeString("dp_functionp")), list(makeSymbol("GC"), makeString("gc")), list(makeSymbol("GC-DYNAMIC"), makeString("gc_dynamic")), list(makeSymbol("GC-EPHEMERAL"), makeString("gc_ephemeral")), list(makeSymbol("GC-FULL"), makeString("gc_full")), list(makeSymbol("GENSYM"), makeString("gensym")), list(makeSymbol("GENTEMP"), makeString("gentemp")), list(makeSymbol("GET"), makeString("get")), list(makeSymbol("GET-DECODED-TIME"), makeString("get_decoded_time")), list(makeSymbol("GET-DISPATCH-MACRO-CHARACTER"), makeString("get_dispatch_macro_character")), list(makeSymbol("GET-FILE-POSITION"), makeString("get_file_position")), list(makeSymbol("GET-FILE-POSITION"), makeString("get_file_position")), list(makeSymbol("GET-INTERNAL-REAL-TIME"), makeString("get_internal_real_time")), list(makeSymbol("GET-INTERNAL-RUN-TIME"), makeString("get_internal_run_time")), list(makeSymbol("GET-MACHINE-NAME"), makeString("get_machine_name")), list(makeSymbol("GET-MACRO-CHARACTER"), makeString("get_macro_character")), list(makeSymbol("GET-NETWORK-NAME"), makeString("get_network_name")), list(makeSymbol("GET-OUTPUT-STREAM-STRING"), makeString("get_output_stream_string")), list(makeSymbol("GET-PROCESS-ID"), makeString("get_process_id")), list(makeSymbol("GET-STRING-FROM-USER"), makeString("get_string_from_user")), list(makeSymbol("GET-UNIVERSAL-TIME"), makeString("get_universal_time")), list(makeSymbol("GET-USER-NAME"), makeString("get_user_name")), list(makeSymbol("GETF"), makeString("getf")), list(makeSymbol("GETHASH"), makeString("gethash")), list(makeSymbol("GETHASH-WITHOUT-VALUES"), makeString("gethash_without_values")), list(makeSymbol("GUID-P"), makeString("dp_guid_p")), list(makeSymbol("GUID-STRING-P"), makeString("guid_string_p")), list(makeSymbol("GUID-TO-STRING"), makeString("guid_to_string")), list(makeSymbol("GUID/="), makeString("dp_guidNE")), list(makeSymbol("GUID<"), makeString("dp_guidL")), list(makeSymbol("GUID<="), makeString("dp_guidLE")), list(makeSymbol("GUID="), makeString("dp_guidE")), list(makeSymbol("GUID>"), makeString("dp_guidG")), list(makeSymbol("GUID>="), makeString("dp_guidGE")), list(makeSymbol("HASH-TABLE-COUNT"), makeString("hash_table_count")), list(makeSymbol("HASH-TABLE-ITERATOR-DONE-P"), makeString("hash_table_iterator_done_p")), list(makeSymbol("HASH-TABLE-ITERATOR-HASH-TABLE"), makeString("hash_table_iterator_hash_table")), list(makeSymbol("HASH-TABLE-ITERATOR-KEY"), makeString("hash_table_iterator_key")), list(makeSymbol("HASH-TABLE-ITERATOR-NEXT"), makeString("hash_table_iterator_next")), list(makeSymbol("HASH-TABLE-ITERATOR-P"), makeString("hash_table_iterator_p")), list(makeSymbol("HASH-TABLE-ITERATOR-VALUE"), makeString("hash_table_iterator_value")), list(makeSymbol("HASH-TABLE-P"), makeString("dp_hash_table_p")), list(makeSymbol("HASH-TABLE-SIZE"), makeString("hash_table_size")), list(makeSymbol("HASH-TABLE-TEST"), makeString("hash_table_test")), list(IDENTITY, makeString("identity")), list(makeSymbol("IGNORE"), makeString("ignore")), list(makeSymbol("IMPORT"), makeString("import")), list(makeSymbol("INFINITY-P"), makeString("dp_infinity_p")), list(makeSymbol("INPUT-STREAM-P"), makeString("input_stream_p")), list(makeSymbol("INT/"), makeString("int_div")), list(makeSymbol("INTEGER-DECODE-FLOAT"), makeString("integer_decode_float")), list(makeSymbol("INTEGER-LENGTH"), makeString("integer_length")), list(makeSymbol("INTEGERP"), makeString("dp_integerp")), list(makeSymbol("INTERACTIVE-STREAM-P"), makeString("interactive_stream_p")), list(makeSymbol("INTERN"), makeString("intern")), list(makeSymbol("INTERNAL-REAL-TIME-HAS-ARRIVED?"), makeString("internal_real_time_has_arrived_p")), list(makeSymbol("INTERRUPT-PROCESS"), makeString("interrupt_process")), list(makeSymbol("INTERSECTION"), makeString("intersection")), list(makeSymbol("ISQRT"), makeString("isqrt")), list(makeSymbol("KEYWORDP"), makeString("dp_keywordp")), list(makeSymbol("KILL-PROCESS"), makeString("kill_process")), list(makeSymbol("LAST"), makeString("last")), list(makeSymbol("LDB"), makeString("f_ldb")), list(makeSymbol("LDIFF"), makeString("ldiff")), list(makeSymbol("LENGTH"), makeString("length")), list(makeSymbol("LISP-IMPLEMENTATION-TYPE"), makeString("lisp_implementation_type")), list(makeSymbol("LISP-IMPLEMENTATION-VERSION"), makeString("lisp_implementation_version")), list(makeSymbol("LIST"), makeString("list")), list(makeSymbol("LIST*"), makeString("listS")), list(makeSymbol("LIST-ALL-PACKAGES"), makeString("list_all_packages")), list(makeSymbol("LIST-LENGTH"), makeString("list_length")), list(makeSymbol("LISTEN"), makeString("sublisp_listen")), list(makeSymbol("LISTP"), makeString("dp_listp")), list(makeSymbol("LOAD"), makeString("load")), list(makeSymbol("LOCK-IDLE-P"), makeString("lock_idle_p")), list(makeSymbol("LOCK-LOCKER"), makeString("lock_locker")), list(makeSymbol("LOCK-NAME"), makeString("lock_name")), list(makeSymbol("LOCK-P"), makeString("dp_lockp")), list(makeSymbol("LOCK-PACKAGE"), makeString("lock_package")), list(makeSymbol("LOG"), makeString("sublisp_log")), list(makeSymbol("LOG-MESSAGE"), makeString("log_message")), list(makeSymbol("LOGAND"), makeString("logand")), list(makeSymbol("LOGANDC1"), makeString("logandc1")), list(makeSymbol("LOGANDC2"), makeString("logandc2")), list(makeSymbol("LOGBITP"), makeString("logbitp")), list(makeSymbol("LOGCOUNT"), makeString("logcount")), list(makeSymbol("LOGEQV"), makeString("logeqv")), list(makeSymbol("LOGIOR"), makeString("logior")), list(makeSymbol("LOGNAND"), makeString("lognand")), list(makeSymbol("LOGNOR"), makeString("lognor")), list(makeSymbol("LOGNOT"), makeString("lognot")), list(makeSymbol("LOGORC1"), makeString("logorc1")), list(makeSymbol("LOGORC2"), makeString("logorc2")), list(makeSymbol("LOGTEST"), makeString("logtest")), list(makeSymbol("LOGXOR"), makeString("logxor")), list(makeSymbol("LONG-SITE-NAME"), makeString("long_site_name")), list(makeSymbol("LOWER-CASE-P"), makeString("dp_lower_case_p")), list(makeSymbol("MACHINE-INSTANCE"), makeString("machine_instance")), list(makeSymbol("MACHINE-TYPE"), makeString("machine_type")), list(makeSymbol("MACHINE-VERSION"), makeString("machine_version")), list(makeSymbol("MACRO-OPERATOR-P"), makeString("dp_macro_operator_p")), list(makeSymbol("MACROEXPAND"), makeString("sublisp_macroexpand")), list(makeSymbol("MACROEXPAND-1"), makeString("sublisp_macroexpand_one")), list(makeSymbol("MAKE-BROADCAST-STREAM"), makeString("make_broadcast_stream")), list(makeSymbol("MAKE-CONCATENATED-STREAM"), makeString("make_concatenated_stream")), list(makeSymbol("MAKE-DATE-RELATIVE-GUID"), makeString("make_date_relative_guid")), list(makeSymbol("MAKE-DIRECTORY"), makeString("make_directory")), list(makeSymbol("MAKE-DISPATCH-MACRO-CHARACTER"), makeString("make_dispatch_macro_character")), list(makeSymbol("MAKE-ECHO-STREAM"), makeString("make_echo_stream")), list(makeSymbol("MAKE-HASH-TABLE"), makeString("make_hash_table")), list(makeSymbol("MAKE-HASH-TABLE-ITERATOR"), makeString("make_hash_table_iterator")), list(makeSymbol("MAKE-KEYWORD"), makeString("make_keyword")), list(makeSymbol("MAKE-LIST"), makeString("make_list")), list(makeSymbol("MAKE-LOCK"), makeString("make_lock")), list(makeSymbol("MAKE-PACKAGE"), makeString("make_package")), list(makeSymbol("MAKE-PRIVATE-BROADCAST-STREAM"), makeString("make_private_broadcast_stream")), list(makeSymbol("MAKE-PRIVATE-CONCATENATED-STREAM"), makeString("make_private_concatenated_stream")), list(makeSymbol("MAKE-PRIVATE-ECHO-STREAM"), makeString("make_private_echo_stream")), list(makeSymbol("MAKE-PRIVATE-STRING-INPUT-STREAM"), makeString("make_private_string_input_stream")), list(makeSymbol("MAKE-PRIVATE-STRING-OUTPUT-STREAM"), makeString("make_private_string_output_stream")), list(makeSymbol("MAKE-PRIVATE-SYNONYM-STREAM"), makeString("make_private_synonym_stream")), list(makeSymbol("MAKE-PRIVATE-TWO-WAY-STREAM"), makeString("make_private_two_way_stream")), list(makeSymbol("MAKE-PROCESS"), makeString("make_process")), list(makeSymbol("MAKE-STRING"), makeString("make_string")), list(makeSymbol("MAKE-STRING-INPUT-STREAM"), makeString("make_string_input_stream")), list(makeSymbol("MAKE-STRING-OUTPUT-STREAM"), makeString("make_string_output_stream")), list(makeSymbol("MAKE-SYMBOL"), makeString("make_symbol")), list(makeSymbol("MAKE-SYNONYM-STREAM"), makeString("make_synonym_stream")), list(makeSymbol("MAKE-TWO-WAY-STREAM"), makeString("make_two_way_stream")), list(makeSymbol("MAKE-VECTOR"), makeString("make_vector")), list(makeSymbol("MAKUNBOUND"), makeString("makunbound")), list(makeSymbol("MAPC"), makeString("mapc")), list(makeSymbol("MAPCAN"), makeString("mapcan")), list(makeSymbol("MAPCAR"), makeString("mapcar")), list(makeSymbol("MAPCON"), makeString("mapcon")), list(makeSymbol("MAPHASH"), makeString("maphash")), list(makeSymbol("MAPL"), makeString("mapl")), list(makeSymbol("MAPLIST"), makeString("maplist")), list(makeSymbol("MAX"), makeString("max")), list(makeSymbol("MEMBER"), makeString("member")), list(makeSymbol("MEMBER-IF"), makeString("member_if")), list(makeSymbol("MIN"), makeString("min")), list(makeSymbol("MINUSP"), makeString("dp_minusp")), list(makeSymbol("MISMATCH"), makeString("mismatch")), list(makeSymbol("MOD"), makeString("mod")), list(makeSymbol("NBUTLAST"), makeString("nbutlast")), list(makeSymbol("NCONC"), makeString("nconc")), list(makeSymbol("NEW-GUID"), makeString("new_guid")), list(makeSymbol("NINTERSECTION"), makeString("nintersection")), list(makeSymbol("NINTH"), makeString("ninth")), list(makeSymbol("NON-CIRCULAR-LIST-P"), makeString("dp_non_circular_list_p")), list(makeSymbol("NOT-A-NUMBER-P"), makeString("dp_not_a_number_p")), list(makeSymbol("NOTIFY"), makeString("notify")), list(makeSymbol("NOTIFY-USER"), makeString("notify_user")), list(makeSymbol("NRECONC"), makeString("nreconc")), list(makeSymbol("NREVERSE"), makeString("nreverse")), list(makeSymbol("NSET-DIFFERENCE"), makeString("nset_difference")), list(makeSymbol("NSET-EXCLUSIVE-OR"), makeString("nset_exclusive_or")), list(makeSymbol("NSTRING-CAPITALIZE"), makeString("nstring_capitalize")), list(makeSymbol("NSTRING-DOWNCASE"), makeString("nstring_downcase")), list(makeSymbol("NSTRING-UPCASE"), makeString("nstring_upcase")), list(makeSymbol("NSUBLIS"), makeString("nsublis")), list(makeSymbol("NSUBST"), makeString("nsubst")), list(makeSymbol("NSUBST-IF"), makeString("nsubst_if")), list(makeSymbol("NSUBSTITUTE"), makeString("nsubstitute")), list(makeSymbol("NSUBSTITUTE-IF"), makeString("nsubstitute_if")), list(makeSymbol("NTH"), makeString("nth")), list(makeSymbol("NTHCDR"), makeString("nthcdr")), list(makeSymbol("NULL"), makeString("dp_null")), list(makeSymbol("NUMBERP"), makeString("dp_numberp")), list(makeSymbol("NUNION"), makeString("sublisp_nunion")), list(makeSymbol("ODDP"), makeString("dp_oddp")), list(makeSymbol("OPEN-BINARY"), makeString("open_binary")), list(makeSymbol("OPEN-STREAM-P"), makeString("open_stream_p")), list(makeSymbol("OPEN-TCP-STREAM"), makeString("open_tcp_stream")), list(makeSymbol("OPEN-TEXT"), makeString("open_text")), list(makeSymbol("OUTPUT-STREAM-P"), makeString("output_stream_p")), list(makeSymbol("PACKAGE-LOCKED-P"), makeString("dp_package_locked_p")), list(makeSymbol("PACKAGE-NAME"), makeString("package_name")), list(makeSymbol("PACKAGE-NICKNAMES"), makeString("package_nicknames")), list(makeSymbol("PACKAGE-SHADOWING-SYMBOLS"), makeString("package_shadowing_symbols")), list(makeSymbol("PACKAGE-USE-LIST"), makeString("package_use_list")), list(makeSymbol("PACKAGE-USED-BY-LIST"), makeString("package_used_by_list")), list(makeSymbol("PACKAGEP"), makeString("dp_packagep")), list(makeSymbol("PAIRLIS"), makeString("pairlis")), list(makeSymbol("PARSE-INTEGER"), makeString("parse_integer")), list(makeSymbol("PEEK-CHAR"), makeString("peek_char")), list(makeSymbol("PLUSP"), makeString("dp_plusp")), list(makeSymbol("POSITION"), makeString("position")), list(makeSymbol("POSITION-IF"), makeString("position_if")), list(makeSymbol("PRIN1"), makeString("prin1")), list(makeSymbol("PRIN1-TO-STRING"), makeString("prin1_to_string")), list(makeSymbol("PRINC"), makeString("princ")), list(makeSymbol("PRINC-TO-STRING"), makeString("princ_to_string")), list(makeSymbol("PRINT"), makeString("print")), list(makeSymbol("PRINT-OBJECT"), makeString("print_object")), list(makeSymbol("PROBE-FILE"), makeString("dp_probe_file")), list(makeSymbol("PROCESS-ACTIVE-P"), makeString("process_active_p")), list(makeSymbol("PROCESS-BLOCK"), makeString("process_block")), list(makeSymbol("PROCESS-NAME"), makeString("process_name")), list(makeSymbol("PROCESS-PRIORITY"), makeString("process_priority")), list(makeSymbol("PROCESS-STATE"), makeString("process_state")), list(makeSymbol("PROCESS-UNBLOCK"), makeString("process_unblock")), list(makeSymbol("PROCESS-WAIT"), makeString("process_wait")), list(makeSymbol("PROCESS-WAIT-WITH-TIMEOUT"), makeString("process_wait_with_timeout")), list(makeSymbol("PROCESS-WHOSTATE"), makeString("process_whostate")), list(makeSymbol("PROCESSP"), makeString("dp_processp")), list(makeSymbol("PUT"), makeString("put")), list(makeSymbol("PUTF"), makeString("putf")), list(makeSymbol("RANDOM"), makeString("sublisp_random")), list(makeSymbol("RASSOC"), makeString("rassoc")), list(makeSymbol("RASSOC-IF"), makeString("rassoc_if")), list(makeSymbol("READ"), makeString("sublisp_read")), list(makeSymbol("READ-BYTE"), makeString("read_byte")), list(makeSymbol("READ-CHAR"), makeString("read_char")), list(makeSymbol("READ-CHAR-NO-HANG"), makeString("read_char_no_hang")), list(makeSymbol("READ-DELIMITED-LIST"), makeString("read_delimited_list")), list(makeSymbol("READ-FROM-STRING"), makeString("read_from_string")), list(makeSymbol("READ-FROM-STRING-IGNORING-ERRORS"), makeString("f_read_from_string_ignoring_errors")), list(makeSymbol("READ-IGNORING-ERRORS"), makeString("read_ignoring_errors")), list(makeSymbol("READ-LINE"), makeString("read_line")), list(makeSymbol("READ-PRESERVING-WHITESPACE"), makeString("read_preserving_whitespace")), list(makeSymbol("READ-SEQUENCE"), makeString("read_sequence")), list(makeSymbol("READTABLE-CASE"), makeString("readtable_case")), list(makeSymbol("READTABLEP"), makeString("readtablep")), list(makeSymbol("REGISTER-LOW-MEMORY-CALLBACK"), makeString("register_low_memory_callback")), list(makeSymbol("DEREGISTER-LOW-MEMORY-CALLBACK"), makeString("deregister_low_memory_callback")), list(makeSymbol("LOW-MEMORY-CALLBACKS"), makeString("register_low_memory_callback")), list(makeSymbol("REM"), makeString("rem")), list(makeSymbol("REMF"), makeString("remf")), list(makeSymbol("REMHASH"), makeString("remhash")), list(makeSymbol("REMOVE"), makeString("sublisp_remove")), list(makeSymbol("REMOVE-DUPLICATES"), makeString("remove_duplicates")), list(makeSymbol("REMOVE-IF"), makeString("sublisp_remove_if")), list(makeSymbol("REMPROP"), makeString("remprop")), list(makeSymbol("RENAME-FILE"), makeString("rename_file")), list(makeSymbol("REPLACE"), makeString("replace")), list(makeSymbol("REST"), makeString("rest")), list(makeSymbol("RESTART-PROCESS"), makeString("restart_process")), list(makeSymbol("REVAPPEND"), makeString("revappend")), list(makeSymbol("REVERSE"), makeString("reverse")), list(makeSymbol("ROOM"), makeString("room")), list(makeSymbol("ROUND"), makeString("sublisp_round")), list(makeSymbol("RPLACA"), makeString("rplaca")), list(makeSymbol("RPLACD"), makeString("rplacd")), list(makeSymbol("SCALE-FLOAT"), makeString("scale_float")), list(makeSymbol("SEARCH"), makeString("search")), list(makeSymbol("SECOND"), makeString("second")), list(makeSymbol("SEED-RANDOM"), makeString("seed_random")), list(makeSymbol("SEQUENCEP"), makeString("dp_sequencep")), list(makeSymbol("SET"), makeString("set")), list(makeSymbol("SET-AREF"), makeString("set_aref")), list(makeSymbol("SET-CHAR"), makeString("sublisp_set_char")), list(makeSymbol("SET-DIFFERENCE"), makeString("set_difference")), list(makeSymbol("SET-DISPATCH-MACRO-CHARACTER"), makeString("set_dispatch_macro_character")), list(makeSymbol("SET-EXCLUSIVE-OR"), makeString("set_exclusive_or")), list(makeSymbol("SET-FILE-POSITION"), makeString("set_file_position")), list(makeSymbol("SET-MACRO-CHARACTER"), makeString("set_macro_character")), list(makeSymbol("SET-NTH"), makeString("set_nth")), list(makeSymbol("SET-PROCESS-PRIORITY"), makeString("set_process_priority")), list(makeSymbol("SET-SYNTAX-FROM-CHAR"), makeString("set_syntax_from_char")), list(makeSymbol("SETHASH"), makeString("sethash")), list(makeSymbol("SEVENTH"), makeString("seventh")), list(makeSymbol("SHORT-SITE-NAME"), makeString("short_site_name")), list(makeSymbol("SHOW-PROCESSES"), makeString("show_processes")), list(makeSymbol("SIMPLE-READER-ERROR"), makeString("simple_reader_error")), list(makeSymbol("SIN"), makeString("sublisp_sin")), list(makeSymbol("SIXTH"), makeString("sixth")), list(makeSymbol("SLEEP"), makeString("sublisp_sleep")), list(makeSymbol("SOFTWARE-TYPE"), makeString("software_type")), list(makeSymbol("SOFTWARE-VERSION"), makeString("software_version")), list(makeSymbol("SORT"), makeString("sort")), list(makeSymbol("SQRT"), makeString("sublisp_sqrt")), list(makeSymbol("STABLE-SORT"), makeString("stable_sort")), list(makeSymbol("STREAM-ELEMENT-TYPE"), makeString("stream_element_type")), list(makeSymbol("STREAMP"), makeString("dp_streamp")), list(makeSymbol("STRING"), makeString("sublisp_string")), list(makeSymbol("STRING-CAPITALIZE"), makeString("string_capitalize")), list(makeSymbol("STRING-DOWNCASE"), makeString("string_downcase")), list(makeSymbol("STRING-EQUAL"), makeString("dp_string_equal")), list(makeSymbol("STRING-GREATERP"), makeString("dp_string_greaterp")), list(makeSymbol("STRING-LEFT-TRIM"), makeString("string_left_trim")), list(makeSymbol("STRING-LESSP"), makeString("dp_string_lessp")), list(makeSymbol("STRING-NOT-EQUAL"), makeString("dp_string_not_equal")), list(makeSymbol("STRING-NOT-GREATERP"), makeString("dp_string_not_greaterp")), list(makeSymbol("STRING-NOT-LESSP"), makeString("dp_string_not_lessp")), list(makeSymbol("STRING-RIGHT-TRIM"), makeString("string_right_trim")), list(makeSymbol("STRING-TO-GUID"), makeString("string_to_guid")), list(makeSymbol("STRING-TRIM"), makeString("string_trim")), list(makeSymbol("STRING-UPCASE"), makeString("string_upcase")), list(makeSymbol("STRING/="), makeString("dp_stringNE")), list(makeSymbol("STRING<"), makeString("dp_stringL")), list(makeSymbol("STRING<="), makeString("dp_stringLE")), list(makeSymbol("STRING="), makeString("dp_stringE")), list(makeSymbol("STRING>"), makeString("dp_stringG")), list(makeSymbol("STRING>="), makeString("dp_stringGE")), list(makeSymbol("STRINGP"), makeString("dp_stringp")), list(makeSymbol("SUBLIS"), makeString("sublis")), list(makeSymbol("ALIEN-NULL-PTR?", "SUBLISP"), makeString("alien_null_ptr_P")), list(makeSymbol("ALIEN-P", "SUBLISP"), makeString("dp_alienp")), list(makeSymbol("ALIEN-TYPE", "SUBLISP"), makeString("alien_type")), list(makeSymbol("BACKUP-ARGS", "SUBLISP"), makeString("backup_args")), list(makeSymbol("BAD-FORMAT-DIRECTIVE", "SUBLISP"), makeString("bad_format_directive")), list(makeSymbol("CALL-FORMAT-DIRECTIVE", "SUBLISP"), makeString("call_format_directive")), list(makeSymbol("CHECK-FLAGS", "SUBLISP"), makeString("check_flags")), list(makeSymbol("DECLARATION-INFORMATION", "SUBLISP"), makeString("declaration_information")), list(makeSymbol("END-OF-FILE-ERROR", "SUBLISP"), makeString("end_of_file_error")), list(makeSymbol("FIND-DIRECTIVE", "SUBLISP"), makeString("find_directive")), list(makeSymbol("FORMAT-CARDINAL", "SUBLISP"), makeString("format_cardinal")), list(makeSymbol("FORMAT-CARDINAL-INTERNAL", "SUBLISP"), makeString("format_cardinal_internal")), list(makeSymbol("FORMAT-DIRECTIVE-P", "SUBLISP"), makeString("format_directive_p")), list(makeSymbol("FORMAT-INTEGER", "SUBLISP"), makeString("format_integer")), list(makeSymbol("FORMAT-INTEGER-INTERNAL", "SUBLISP"), makeString("format_integer_internal")), list(makeSymbol("FORMAT-INTERNAL", "SUBLISP"), makeString("format_internal")), list(makeSymbol("FORMAT-ITERATION", "SUBLISP"), makeString("format_iteration")), list(makeSymbol("FORMAT-ORDINAL", "SUBLISP"), makeString("format_ordinal")), list(makeSymbol("FORMAT-PADDED", "SUBLISP"), makeString("format_padded")), list(makeSymbol("FORMAT-REPEAT", "SUBLISP"), makeString("format_repeat")), list(makeSymbol("FORMAT-SUBLIST-ITERATION", "SUBLISP"), makeString("format_sublist_iteration")), list(makeSymbol("FORMAT-TYPEP", "SUBLISP"), makeString("format_typep")), list(makeSymbol("GETHASH-BUCKET", "SUBLISP"), makeString("gethash_bucket")), list(makeSymbol("ILLEGAL-DIRECTIVE", "SUBLISP"), makeString("illegal_directive")), list(makeSymbol("MATCHING-BRACKET", "SUBLISP"), makeString("matching_bracket")), list(makeSymbol("MATCHING-BRACKET-NOT-FOUND", "SUBLISP"), makeString("matching_bracket_not_found")), list(makeSymbol("NOT-A-FORMAT-CONTROL", "SUBLISP"), makeString("not_a_format_control")), list(makeSymbol("NOT-A-LIST-ARGUMENT", "SUBLISP"), makeString("not_a_list_argument")), list(makeSymbol("NOT-ENOUGH-FORMAT-ARGUMENTS", "SUBLISP"), makeString("not_enough_format_arguments")), list(makeSymbol("PARSE-FORMAT-COMMAND", "SUBLISP"), makeString("parse_format_command")), list(makeSymbol("POSSIBLY-NOTE-FUNCTION-ENTRY", "SUBLISP"), makeString("f_possibly_note_function_entry")), list(makeSymbol("REALLY-FORMAT", "SUBLISP"), makeString("really_format")), list(makeSymbol("REPITITION-DESIGNATOR-VALUE", "SUBLISP"), makeString("repitition_designator_value")), list(makeSymbol("ROUND-DIGITS", "SUBLISP"), makeString("round_digits")), list(makeSymbol("SPLIT-FLONUM-DIGITS", "SUBLISP"), makeString("split_flonum_digits")), list(makeSymbol("STREAM-LINE-COLUMN", "SUBLISP"), makeString("stream_line_column")), list(makeSymbol("STREAM-LINE-COLUMN", "SUBLISP"), makeString("stream_line_column")), list(makeSymbol("SXHASH-ROT", "SUBLISP"), makeString("sxhash_rot")), list(makeSymbol("UNIMPLEMENTED-FORMAT-DIRECTIVE", "SUBLISP"), makeString("unimplemented_format_directive")), list(makeSymbol("SUBSEQ"), makeString("subseq")), list(makeSymbol("SUBSETP"), makeString("dp_subsetp")), list(makeSymbol("SUBST"), makeString("subst")), list(makeSymbol("SUBST-IF"), makeString("subst_if")), list(makeSymbol("SUBSTITUTE"), makeString("substitute")), list(makeSymbol("SUBSTITUTE-IF"), makeString("substitute_if")), list(makeSymbol("SXHASH"), makeString("sxhash")), list(makeSymbol("SYMBOL-FUNCTION"), makeString("symbol_function")), list(makeSymbol("SYMBOL-NAME"), makeString("symbol_name")), list(makeSymbol("SYMBOL-PACKAGE"), makeString("symbol_package")), list(makeSymbol("SYMBOL-PLIST"), makeString("symbol_plist")), list(makeSymbol("SYMBOL-VALUE"), makeString("symbol_value")), list(makeSymbol("SYMBOLP"), makeString("dp_symbolp")), list(makeSymbol("SYNONYM-STREAM-SYMBOL"), makeString("synonym_stream_symbol")), list(makeSymbol("TAILP"), makeString("dp_tailp")), list(makeSymbol("TAN"), makeString("sublisp_tan")), list(makeSymbol("TENTH"), makeString("tenth")), list(makeSymbol("TERPRI"), makeString("terpri")), list(makeSymbol("THIRD"), makeString("third")), list(makeSymbol("THROW"), makeString("sublisp_throw")), list(makeSymbol("TIME-HAS-ARRIVED?"), makeString("time_has_arrived_p")), list(makeSymbol("TREE-EQUAL"), makeString("dp_tree_equal")), list(makeSymbol("TRUE"), makeString("sublisp_true")), list(makeSymbol("TRUNCATE"), makeString("sublisp_truncate")), list(makeSymbol("TWO-WAY-STREAM-INPUT-STREAM"), makeString("two_way_stream_input_stream")), list(makeSymbol("TWO-WAY-STREAM-OUTPUT-STREAM"), makeString("two_way_stream_output_stream")), list(makeSymbol("TYPE-OF"), makeString("sublisp_type_of")), list(makeSymbol("UNINTERN"), makeString("unintern")), list(makeSymbol("UNION"), makeString("sublisp_union")), list(makeSymbol("UNREAD-CHAR"), makeString("unread_char")), list(makeSymbol("UPPER-CASE-P"), makeString("dp_upper_case_p")), list(makeSymbol("USER-CONFIRM"), makeString("user_confirm")), list(makeSymbol("VALID-PROCESS-P"), makeString("valid_process_p")), list(makeSymbol("VALUES"), makeString("values")), list(makeSymbol("VARIABLE-INFORMATION"), makeString("variable_information")), list(makeSymbol("VECTOR"), makeString("sublisp_vector")), list(makeSymbol("VECTORP"), makeString("dp_vectorp")), list(makeSymbol("VISIT-DEFSTRUCT"), makeString("f_visit_defstruct")), list(makeSymbol("WARN"), makeString("sublisp_warn")), list(makeSymbol("WRITE"), makeString("write_g")), list(makeSymbol("WRITE-BYTE"), makeString("write_byte")), list(makeSymbol("WRITE-CHAR"), makeString("write_char")), list(makeSymbol("WRITE-IMAGE"), makeString("write_image")), list(makeSymbol("WRITE-LINE"), makeString("write_line")), list(makeSymbol("WRITE-SEQUENCE"), makeString("write_sequence")), list(makeSymbol("WRITE-STRING"), makeString("write_string")), list(makeSymbol("WRITE-TO-STRING"), makeString("write_to_string_g")), list(makeSymbol("ZEROP"), makeString("dp_zerop")), list(makeSymbol("DECLARE-FOREIGN-SHARED-LIBRARY", "SUBLISP"), makeString("f_declare_foreign_shared_library")), list(makeSymbol("DEFINE-FOREIGN-FUNCTION-INTERNAL", "SUBLISP"), makeString("f_define_foreign_function_internal")), list(makeSymbol("FOREIGN-SHARED-LIBRARY-INSTALLED?", "SUBLISP"), makeString("f_foreign_shared_library_installedP")), list(makeSymbol("ENSURE-FOREIGN-SHARED-LIBRARY-LOADED", "SUBLISP"), makeString("f_ensure_foreign_shared_library_loaded")), list(makeSymbol("VECTOR-FOR-MARSHALLING", "SUBLISP"), makeString("f_vector_for_marshalling")), list(makeSymbol("CDESTRUCTURING-BIND-ERROR", "SUBLISP"), makeString("f_cdestructuring_bind_error")), list(makeSymbol("DESTRUCTURING-BIND-MUST-CONSP", "SUBLISP"), makeString("f_destructuring_bind_must_consp")), list(makeSymbol("DESTRUCTURING-BIND-MUST-LISTP", "SUBLISP"), makeString("f_destructuring_bind_must_listp")), list(makeSymbol("PROPERTY-LIST-MEMBER", "SUBLISP"), makeString("f_property_list_member")), list(makeSymbol("PRINT-UNREADABLE-OBJECT-PREAMBLE", "SUBLISP"), makeString("f_print_unreadable_object_preamble")), list(makeSymbol("PRINT-UNREADABLE-OBJECT-POSTAMBLE", "SUBLISP"), makeString("f_print_unreadable_object_postamble")), list(makeSymbol("BQ-CONS"), makeString("f_bq_cons")), list(makeSymbol("BQ-VECTOR"), makeString("f_bq_vector")), list(makeSymbol("DEFSTRUCT-ANALYZE", "SUBLISP"), makeString("f_defstruct_analyze")), list(makeSymbol("JAVA-CALL"), makeString("java_call")), list(makeSymbol("JAVA-CLASS"), makeString("java_class")), list(makeSymbol("JAVA-CONSTRUCTOR"), makeString("java_constructor")), list(makeSymbol("JAVA-METHOD"), makeString("java_method")), list(makeSymbol("JAVA-NEW"), makeString("java_new")), list(makeSymbol("JAVA-OBJECT-P"), makeString("java_object_p")), list(makeSymbol("JAVA-STATIC"), makeString("java_static")) });
    }

    static private final SubLList $list_alt17 = list(new SubLObject[]{ list(makeSymbol("*DTP-SYMBOL*"), makeString("gv_dtp_symbol"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-CONS*"), makeString("gv_dtp_cons"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-FIXNUM*"), makeString("gv_dtp_fixnum"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-FLOAT*"), makeString("gv_dtp_float"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-CHARACTER*"), makeString("gv_dtp_character"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-STRING*"), makeString("gv_dtp_string"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-VECTOR*"), makeString("gv_dtp_vector"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-FUNCTION*"), makeString("gv_dtp_function"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-HASH-TABLE*"), makeString("gv_dtp_hash_table"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-PACKAGE*"), makeString("gv_dtp_package"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-STREAM*"), makeString("gv_dtp_stream"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-BIGNUM*"), makeString("gv_dtp_bignum"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-GUID*"), makeString("gv_dtp_guid"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-LOCK*"), makeString("gv_dtp_lock"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-PROCESS*"), makeString("gv_dtp_process"), makeKeyword("CONSTANT")), list(makeSymbol("*DTP-STRUCTURES-BAG*"), makeString("gv_dtp_structures_bag"), makeKeyword("CONSTANT")), list(makeSymbol("*%EVALUATOR-METHOD*", "SUBLISP"), makeString("gv_evaluator_method"), makeKeyword("DYNAMIC")), list(makeSymbol("*REMOTE-ADDRESS*", "SUBLISP"), makeString("gv_remote_address"), makeKeyword("DYNAMIC")), list(makeSymbol("*REMOTE-HOSTNAME*", "SUBLISP"), makeString("gv_remote_hostname"), makeKeyword("DYNAMIC")) });

    private static final SubLObject _constant_1_initializer_alt() {
        return list(new SubLObject[]{ list(makeSymbol("OPEN"), makeString("open_g"), list(makeSymbol("FILESPEC"), makeSymbol("&REST"), makeSymbol("KEYS"))), list(makeSymbol("%B-CHECK-TYPE"), makeString("CHECK_TYPE"), list(makeSymbol("OBJECT"), makeSymbol("TYPE"))), list(makeSymbol("%B-ENFORCE-TYPE"), makeString("ENFORCE_TYPE"), list(makeSymbol("OBJECT"), makeSymbol("TYPE"))), list(makeSymbol("%BEGIN-WITH-PROCESS-RESOURCE-TRACKING"), makeString("BEGIN_WITH_PROCESS_RESOURCE_TRACKING"), list(makeSymbol("ENV"), makeSymbol("RESULT"))), list(makeSymbol("%BIND"), makeString("BIND"), list(makeSymbol("VAR"), makeSymbol("VAL"))), list(makeSymbol("%BIND-SPECIAL-VARS"), makeString("BIND_SPECIAL_VARS"), list(makeSymbol("SPECIAL-VARS"), makeSymbol("BINDINGS"))), list(makeSymbol("%BTD"), makeString("BTD"), list(makeSymbol("OBJ"))), list(makeSymbol("%CATCH-VALUE"), makeString("CATCH_VALUE"), NIL), list(makeSymbol("%CBIG"), makeString("CBIG"), list(makeSymbol("INTEGER"))), list(makeSymbol("%CCHAR"), makeString("CCHAR"), list(makeSymbol("CODE"))), list(makeSymbol("%CFIX"), makeString("CFIX"), list(makeSymbol("FIXNUM"))), list(makeSymbol("%CFLOAT"), makeString("CFLOAT"), list(makeSymbol("FLOAT"))), list(makeSymbol("%CGUID"), makeString("CGUID"), list(makeSymbol("STRING"))), list(makeSymbol("%CINTERN"), makeString("CINTERN"), list(makeSymbol("STRING"))), list(makeSymbol("%CKEYWORD"), makeString("CKEYWORD"), list(makeSymbol("STRING"))), list(makeSymbol("%CMAKE-SYMBOL"), makeString("CMAKE_SYMBOL"), list(makeSymbol("STRING"))), list(makeSymbol("%CPACKAGE"), makeString("CPACKAGE"), list(makeSymbol("STRING"))), list(makeSymbol("%CSTRING"), makeString("CSTRING"), list(makeSymbol("STRING"))), list(makeSymbol("%CSYMBOL"), makeString("CSYMBOL"), list(makeSymbol("SYMBOL-NAME"), makeSymbol("PACKAGE-NAME"))), list(makeSymbol("%CDO-SYMBOLS-END"), makeString("CDO_SYMBOLS_DONE"), list(makeSymbol("PKG-VAR"), makeSymbol("ITERATOR-VAR"))), list(makeSymbol("%CDO-SYMBOLS-LOOP"), makeString("CDO_SYMBOLS_LOOP_DEFAULT"), list(makeSymbol("SYM-VAR"), makeSymbol("ITERATOR-VAR"))), list(makeSymbol("%CDO-SYMBOLS-SETUP"), makeString("CDO_SYMBOLS_SETUP"), list(makeSymbol("PKG-VAR"), makeSymbol("ITERATOR-VAR"))), list(makeSymbol("%CDOHASH-BEGIN"), makeString("CDOHASH_BEGIN"), list(makeSymbol("KEY-VAR"), makeSymbol("OBJ-VAR"), makeSymbol("TABLE-FORM"), makeSymbol("TABLE-VAR"), makeSymbol("INDEX-VAR"))), list(makeSymbol("%CDOHASH-END"), makeString("CDOHASH_END"), list(makeSymbol("KEY-VAR"), makeSymbol("OBJ-VAR"), makeSymbol("TABLE-VAR"), makeSymbol("INDEX-VAR"))), list(makeSymbol("%CDOLIST-BEGIN"), makeString("CDOLIST_BEGIN"), list(makeSymbol("VAR"), makeSymbol("INIT-FORM"), makeSymbol("CDOLIST-VAR"))), list(makeSymbol("%CDOLIST-END"), makeString("CDOLIST_END"), list(makeSymbol("VAR"))), list(makeSymbol("%CDOTIMES-BEGIN"), makeString("CDOTIMES_BEGIN"), list(makeSymbol("VAR"), makeSymbol("INIT-FORM"), makeSymbol("CDOTIMES-VAR"))), list(makeSymbol("%CDOTIMES-END"), makeString("CDOTIMES_END"), list(makeSymbol("VAR"))), list(makeSymbol("%CSOME-BEGIN"), makeString("CSOME_BEGIN"), list(makeSymbol("VAR"), makeSymbol("INIT-FORM"), makeSymbol("DONE-FORM"), makeSymbol("CSOME-VAR"))), list(makeSymbol("%CSOME-END"), makeString("CSOME_END"), list(makeSymbol("VAR"))), list(makeSymbol("%DP-CHECK-TYPE"), makeString("DP_CHECK_TYPE"), list(makeSymbol("OBJECT"), makeSymbol("TYPE"))), list(makeSymbol("%DP-ENFORCE-TYPE"), makeString("DP_ENFORCE_TYPE"), list(makeSymbol("OBJECT"), makeSymbol("TYPE"))), list(makeSymbol("%DTB"), makeString("DTB"), list(makeSymbol("OBJ"))), list(makeSymbol("%DYN"), makeString("DYN"), list(makeSymbol("VAR"))), list(makeSymbol("%END-PRINTING-OBJECT"), makeString("END_PRINTING_OBJECT"), list(makeSymbol("OBJECT"), makeSymbol("STREAM"))), list(makeSymbol("%END-WITH-PROCESS-RESOURCE-TRACKING"), makeString("END_WITH_PROCESS_RESOURCE_TRACKING"), list(makeSymbol("ENV"), makeSymbol("RESULT"))), list(makeSymbol("%FINISH-CATCH"), makeString("FINISH_CATCH"), list(makeSymbol("TAG"), makeSymbol("ENV"))), list(makeSymbol("%FINISH-UNWIND"), makeString("FINISH_UNWIND"), list(makeSymbol("ENV"))), list(makeSymbol("%FORMAT-0A-DIRECTIVE"), makeString("format_0a_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-24-DIRECTIVE"), makeString("format_24_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-25-DIRECTIVE"), makeString("format_25_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-26-DIRECTIVE"), makeString("format_26_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-28-DIRECTIVE"), makeString("format_28_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-29-DIRECTIVE"), makeString("format_29_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-2A-DIRECTIVE"), makeString("format_2a_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-2F-DIRECTIVE"), makeString("format_2f_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-3B-DIRECTIVE"), makeString("format_3b_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-3C-DIRECTIVE"), makeString("format_3c_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-3E-DIRECTIVE"), makeString("format_3e_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-3F-DIRECTIVE"), makeString("format_3f_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-5B-DIRECTIVE"), makeString("format_5b_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-5D-DIRECTIVE"), makeString("format_5d_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-5E-DIRECTIVE"), makeString("format_5e_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-5F-DIRECTIVE"), makeString("format_5f_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-7B-DIRECTIVE"), makeString("format_7b_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-7C-DIRECTIVE"), makeString("format_7c_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-7D-DIRECTIVE"), makeString("format_7d_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-7E-DIRECTIVE"), makeString("format_7e_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-A-DIRECTIVE"), makeString("format_a_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-B-DIRECTIVE"), makeString("format_b_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-C-DIRECTIVE"), makeString("format_c_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-D-DIRECTIVE"), makeString("format_d_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-E-DIRECTIVE"), makeString("format_e_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-F-DIRECTIVE"), makeString("format_f_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-G-DIRECTIVE"), makeString("format_g_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-I-DIRECTIVE"), makeString("format_i_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-O-DIRECTIVE"), makeString("format_o_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-P-DIRECTIVE"), makeString("format_p_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-R-DIRECTIVE"), makeString("format_r_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-S-DIRECTIVE"), makeString("format_s_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-T-DIRECTIVE"), makeString("format_t_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-W-DIRECTIVE"), makeString("format_w_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-X-DIRECTIVE"), makeString("format_x_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("GET-STATIC-AREA"), makeString("get_static_area")), list(makeSymbol("GET-THREAD-PRIVATE-AREA"), makeString("get_thread-private_area")), list(makeSymbol("GET-WORKING-AREA"), makeString("get_working_area")), list(makeSymbol("%HASH-INDEX-KEY", "SUBLISP"), makeString("HASH_INDEX_KEY"), list(makeSymbol("TABLE"), makeSymbol("INDEX"))), list(makeSymbol("%HASH-INDEX-OBJ", "SUBLISP"), makeString("HASH_INDEX_OBJ"), list(makeSymbol("TABLE"), makeSymbol("INDEX"))), list(makeSymbol("%INIT-OPT-ARG"), makeString("INIT_OPT_ARG"), list(makeSymbol("ARG"), makeSymbol("VAL"))), list(makeSymbol("%LEX"), makeString("LEX"), list(makeSymbol("VAR"))), list(makeSymbol("%MULTIPLE-VALUE-LIST"), makeString("MULTIPLE_VALUE_LIST"), list(makeSymbol("EXPRESSION"))), list(makeSymbol("%MVAL"), makeString("MVAL"), list(makeSymbol("N"))), list(makeSymbol("%MVAL-COUNT"), makeString("MVAL_COUNT"), NIL), list(makeSymbol("%NEXT-HASH-INDEX", "SUBLISP"), makeString("NEXT_HASH_INDEX"), list(makeSymbol("TABLE"), makeSymbol("INDEX"))), list(makeSymbol("%NOTE-SUPPLIED"), makeString("NOTE_SUPPLIED"), list(makeSymbol("VAR"))), list(makeSymbol("%NTH-VALUE"), makeString("NTH_VALUE"), list(makeSymbol("N"), makeSymbol("FORM"))), list(makeSymbol("PRINT-NOT-READABLE"), makeString("print_not_readable"), list(makeSymbol("OBJECT"), makeSymbol("STREAM"))), list(makeSymbol("%REBIND"), makeString("REBIND"), list(makeSymbol("VAR"))), list(makeSymbol("%REBIND-SPECIAL-VARS"), makeString("REBIND_SPECIAL_VARS"), list(makeSymbol("SPECIAL-VARS"))), list(makeSymbol("%RESET-MVAL"), makeString("RESET_MVAL"), NIL), list(makeSymbol("%SET-CATCH"), makeString("SET_CATCH"), list(makeSymbol("TAG"), makeSymbol("ENV"))), list(makeSymbol("%SET-DYN"), makeString("SET_DYN"), list(makeSymbol("VAR"), makeSymbol("VAL"))), list(makeSymbol("%SET-LEX"), makeString("SET_LEX"), list(makeSymbol("VAR"), makeSymbol("VAL"))), list(makeSymbol("%SET-UNWIND"), makeString("SET_UNWIND"), list(makeSymbol("ENV"))), list(makeSymbol("%START-PRINTING-OBJECT"), makeString("START_PRINTING_OBJECT"), list(makeSymbol("OBJECT"), makeSymbol("STREAM"))), list(makeSymbol("%START-UNWIND"), makeString("START_UNWIND"), list(makeSymbol("ENV"))), list(makeSymbol("%THROWN-TO"), makeString("DP_THROWN_TO"), list(makeSymbol("ENV"))), list(makeSymbol("IN-PACKAGE"), makeString("in_package"), list(makeSymbol("NAME"))), list(makeSymbol("%CLEAR-GC-RESOURCE-ACCUMULATOR", "SUBLISP"), makeString("sublisp_clear_gc_resource_accumulator"), NIL), list(makeSymbol("%CURRENT-GC-RESOURCE-ACCUMULATOR", "SUBLISP"), makeString("sublisp_current_gc_resource_accumulator"), NIL), list(makeSymbol("%GET-INITIAL-CONTINUATION", "SUBLISP"), makeString("_get_initial_continuation"), NIL), list(makeSymbol("%GET-RED-OBJECT", "SUBLISP"), makeString("_get_red_object"), NIL), list(makeSymbol("%INTERPRET-CSPACE-RESULTS", "SUBLISP"), makeString("sublisp_interpret_cspace_results"), list(makeSymbol("PROBE"), makeSymbol("STREAM"))), list(makeSymbol("%SET-INITIAL-CONTINUATION", "SUBLISP"), makeString("_set_initial_continuation"), list(makeSymbol("FUNCTIONSPEC"))), list(makeSymbol("ADD-SPACE-PROBE", "SUBLISP"), makeString("add_space_probe"), NIL), list(makeSymbol("ALIEN-AS-STRING", "SUBLISP"), makeString("alien_as_string"), list(makeSymbol("OBJECT"))), list(makeSymbol("CANONICAL-NULL-FILE-STREAM-PATH", "SUBLISP"), makeString("canonical_null_file_stream_path")), list(makeSymbol("CIRCULAR-REFERENCE-P", "SUBLISP"), makeString("circular_reference_p"), list(makeSymbol("OBJECT"), makeSymbol("STREAM"))), list(makeSymbol("DEF-FOREIGN-FUNCTION", "SUBLISP"), makeString("sublisp_def_foreign_function"), list(makeSymbol("FOREIGN-SHARED-LIBRARY"), makeSymbol("FOREIGN-NAME"), makeSymbol("SYMBOL"), makeSymbol("ARG-CONVERSION"), makeSymbol("RET-TYPE"), makeSymbol("CALLING-CONVENTION"), makeSymbol("NULL-DEFAULT-RETURN"))), list(makeSymbol("DESCRIPTOR-STREAM-CLOSE", "SUBLISP"), makeString("descriptor_stream_close"), list(makeSymbol("STREAM"), makeSymbol("ABORT"))), list(makeSymbol("DESCRIPTOR-STREAM-FILE-LENGTH", "SUBLISP"), makeString("descriptor_stream_file_length"), list(makeSymbol("STREAM"))), list(makeSymbol("DESCRIPTOR-STREAM-FILE-POSITION", "SUBLISP"), makeString("descriptor_stream_file_position"), list(makeSymbol("STREAM"))), list(makeSymbol("DESCRIPTOR-STREAM-NEXT-INPUT-BUFFER", "SUBLISP"), makeString("descriptor_stream_next_input_buffer"), list(makeSymbol("STREAM"), makeSymbol("WAITP"))), list(makeSymbol("DESCRIPTOR-STREAM-SEND-OUTPUT-BUFFER", "SUBLISP"), makeString("descriptor_stream_send_output_buffer"), list(makeSymbol("STREAM"))), list(makeSymbol("DESCRIPTOR-STREAM-SET-FILE-POSITION", "SUBLISP"), makeString("descriptor_stream_set_file_position"), list(makeSymbol("STREAM"), makeSymbol("POSITION-SPEC"))), list(makeSymbol("ENCODE-UNIVERSAL-TIME-INTERNAL", "SUBLISP"), makeString("encode_universal_time_internal"), list(makeSymbol("SECOND"), makeSymbol("MINUTE"), makeSymbol("HOUR"), makeSymbol("DATE"), makeSymbol("MONTH"), makeSymbol("YEAR"), makeSymbol("TIME-ZONE"))), list(makeSymbol("EXTERNAL-PROCESSES-SUPPORTED?", "SUBLISP"), makeString("external_processes_supportedP"), NIL), list(makeSymbol("FILE-POINTER-STREAM-CLOSE", "SUBLISP"), makeString("file_pointer_stream_close"), list(makeSymbol("STREAM"), makeSymbol("ABORT"))), list(makeSymbol("FILE-POINTER-STREAM-FILE-LENGTH", "SUBLISP"), makeString("file_pointer_stream_file_length"), list(makeSymbol("STREAM"))), list(makeSymbol("FILE-POINTER-STREAM-FILE-POSITION", "SUBLISP"), makeString("file_pointer_stream_file_position"), list(makeSymbol("STREAM"))), list(makeSymbol("FILE-POINTER-STREAM-NEXT-INPUT-BUFFER", "SUBLISP"), makeString("file_pointer_stream_next_input_buffer"), list(makeSymbol("STREAM"), makeSymbol("WAITP"))), list(makeSymbol("FILE-POINTER-STREAM-SEND-OUTPUT-BUFFER", "SUBLISP"), makeString("file_pointer_stream_send_output_buffer"), list(makeSymbol("STREAM"))), list(makeSymbol("FILE-POINTER-STREAM-SET-FILE-POSITION", "SUBLISP"), makeString("file_pointer_stream_set_file_position"), list(makeSymbol("STREAM"), makeSymbol("POSITION-SPEC"))), list(makeSymbol("FOLLOW-SYNONYM-STREAM", "SUBLISP"), makeString("follow_synonym_stream"), list(makeSymbol("STREAM"))), list(makeSymbol("GET-EXTERNAL-PROCESS-STATUS", "SUBLISP"), makeString("get_external_process_status"), list(makeSymbol("PROCESS-ID"), makeSymbol("&OPTIONAL"), makeSymbol("WAIT-UNTIL-DONE?"))), list(makeSymbol("GET-TIME", "SUBLISP"), makeString("get_time"), NIL), list(makeSymbol("GET-TIMEZONE", "SUBLISP"), makeString("get_timezone"), list(makeSymbol("&OPTIONAL"), makeSymbol("UNIVERSAL-TIME"))), list(makeSymbol("HANDLE-CIRCULARITY", "SUBLISP"), makeString("handle_circularity"), list(makeSymbol("OBJECT"), makeSymbol("STREAM"))), list(makeSymbol("ILLEGAL-STREAM-OPERATION", "SUBLISP"), makeString("illegal_stream_operation"), list(makeSymbol("STREAM"), makeSymbol("OPERATION"))), list(makeSymbol("INHIBIT-PREEMPTION-P", "SUBLISP"), makeString("inhibit_preemption_p"), NIL), list(makeSymbol("INPUT-STREAM-DESIGNATOR-STREAM", "SUBLISP"), makeString("input_stream_designator_stream"), list(makeSymbol("OBJECT"))), list(makeSymbol("INTERNED-SYMBOLP", "SUBLISP"), makeString("interned_symbolp"), list(makeSymbol("SYMBOL"))), list(makeSymbol("JVM-CALL", "SUBLISP"), makeString("f_jvm_call"), list(makeSymbol("FUNC"), makeSymbol("STACK-FRAME"), makeSymbol("ARGSTART"), makeSymbol("ARGCNT"))), list(makeSymbol("JVMI-OPCODE-INTERPRETER", "SUBLISP"), makeString("jvmi_opcode_interpreter"), list(makeSymbol("JVMI"), makeSymbol("CODE"))), list(makeSymbol("KILL-EXTERNAL-PROCESS", "SUBLISP"), makeString("kill_external_process"), list(makeSymbol("PROCESS-ID"))), list(makeSymbol("LOAD-SHARED-OBJECT", "SUBLISP"), makeString("sublisp_load_shared_object"), list(makeSymbol("MONIKER"), makeSymbol("PATHNAME"), makeSymbol("OPTIONS"))), list(makeSymbol("MAKE-DESCRIPTOR-STREAM", "SUBLISP"), makeString("make_descriptor_stream"), list(makeSymbol("DESCRIPTOR"), makeSymbol("DIRECTION"), makeSymbol("ELEMENT-TYPE"))), list(makeSymbol("MAKE-GUID-BLOCK", "SUBLISP"), makeString("make_block_of_guids")), list(makeSymbol("MAKE-PRIVATE-DESCRIPTOR-STREAM", "SUBLISP"), makeString("make_private_descriptor_stream"), list(makeSymbol("DESCRIPTOR"), makeSymbol("DIRECTION"), makeSymbol("ELEMENT-TYPE"))), list(makeSymbol("MAKE-STREAM", "SUBLISP"), makeString("make_stream"), list(makeSymbol("&OPTIONAL"), makeSymbol("ARGLIST"))), list(makeSymbol("MY-GETF", "SUBLISP"), makeString("my_getf"), list(makeSymbol("PLIST"), makeSymbol("INDICATOR"), makeSymbol("&OPTIONAL"), makeSymbol("DEFAULT"))), list(makeSymbol("OPEN-DESCRIPTOR", "SUBLISP"), makeString("open_descriptor"), list(makeSymbol("FILESPEC"), makeSymbol("DIRECTION"), makeSymbol("ELEMENT-TYPE"), makeSymbol("IF-EXISTS"), makeSymbol("IF-DOES-NOT-EXIST"), makeSymbol("EXTERNAL-FORMAT"))), list(makeSymbol("OUTPUT-STREAM-DESIGNATOR-STREAM", "SUBLISP"), makeString("output_stream_designator_stream"), list(makeSymbol("OBJECT"))), list(makeSymbol("PATHNAME-DESIGNATOR-PATHNAME", "SUBLISP"), makeString("pathname_designator_pathname"), list(makeSymbol("OBJECT"))), list(makeSymbol("POINTER", "SUBLISP"), makeString("sublisp_pointer"), list(makeSymbol("OBJECT"))), list(makeSymbol("PRINT-BIGNUM-INTERNAL", "SUBLISP"), makeString("print_bignum_internal"), list(makeSymbol("BIGNUM"), makeSymbol("STREAM"), makeSymbol("RADIX"), makeSymbol("DIVISOR"), makeSymbol("POWER-LESS-ONE"))), list(makeSymbol("PRINT-CHARACTER", "SUBLISP"), makeString("print_character"), list(makeSymbol("CHARACTER"), makeSymbol("STREAM"))), list(makeSymbol("PRINT-CONS-CELLS", "SUBLISP"), makeString("print_cons_cells"), list(makeSymbol("CONS"), makeSymbol("STREAM"))), list(makeSymbol("PRINT-ERROR", "SUBLISP"), makeString("print_error"), list(makeSymbol("OBJECT"), makeSymbol("STREAM"))), list(makeSymbol("PRINT-FLONUM", "SUBLISP"), makeString("print_flonum"), list(makeSymbol("FLONUM"), makeSymbol("STREAM"))), list(makeSymbol("PRINT-FUNCTION", "SUBLISP"), makeString("print_function"), list(makeSymbol("FUNCTION"), makeSymbol("STREAM"))), list(makeSymbol("PRINT-HASHTABLE", "SUBLISP"), makeString("print_hashtable"), list(makeSymbol("HASH-TABLE"), makeSymbol("STREAM"))), list(makeSymbol("PRINT-INTEGER", "SUBLISP"), makeString("print_integer"), list(makeSymbol("INTEGER"), makeSymbol("STREAM"))), list(makeSymbol("PRINT-INTEGER-INTERNAL", "SUBLISP"), makeString("print_integer_internal"), list(makeSymbol("INTEGER"), makeSymbol("STREAM"), makeSymbol("PRINT-BASE"))), list(makeSymbol("PRINT-OBJECT-WRAPPER", "SUBLISP"), makeString("print_object_wrapper"), list(makeSymbol("OBJECT"), makeSymbol("STREAM"))), list(makeSymbol("PRINT-STREAM", "SUBLISP"), makeString("print_stream"), list(makeSymbol("OBJECT"), makeSymbol("STREAM"), makeSymbol("DEPTH"))), list(makeSymbol("PRINT-STRING", "SUBLISP"), makeString("print_string"), list(makeSymbol("STRING"), makeSymbol("STREAM"))), list(makeSymbol("PRINT-SYMBOL", "SUBLISP"), makeString("print_symbol"), list(makeSymbol("SYMBOL"), makeSymbol("STREAM"))), list(makeSymbol("PRINT-VECTOR", "SUBLISP"), makeString("print_vector"), list(makeSymbol("VECTOR"), makeSymbol("STREAM"))), list(makeSymbol("PROCESS-YIELD", "SUBLISP"), makeString("process_yield"), NIL), list(makeSymbol("READ-PRINT-EQ", "SUBLISP"), makeString("read_print_eq"), list(makeSymbol("OBJECT"))), list(makeSymbol("REALLY-OPEN", "SUBLISP"), makeString("really_open"), list(makeSymbol("FILESPEC"), makeSymbol("KEYS"))), list(makeSymbol("REALLY-WRITE", "SUBLISP"), makeString("really_write"), list(makeSymbol("OBJECT"), makeSymbol("KEYS"))), list(makeSymbol("REALLY-WRITE-TO-STRING", "SUBLISP"), makeString("really_write_to_string"), list(makeSymbol("OBJECT"), makeSymbol("KEYS"))), list(makeSymbol("RELEASE-LOCK", "SUBLISP"), makeString("release_lock"), list(makeSymbol("LOCK"))), list(makeSymbol("REMOVE-SPACE-PROBE", "SUBLISP"), makeString("remove_space_probe"), list(makeSymbol("PROBE"))), list(makeSymbol("RESTART-CYC", "SUBLISP"), makeString("restart_cyc"), list(makeSymbol("&OPTIONAL"), makeSymbol("WORLD"), makeSymbol("INIT-FILE"), makeSymbol("INIT-FORM"))), list(makeSymbol("RUN-EXTERNAL-PROCESS", "SUBLISP"), makeString("run_external_process"), list(makeSymbol("PROGRAM"), makeSymbol("&OPTIONAL"), makeSymbol("ARGS"), makeSymbol("STDIN-SPEC"), makeSymbol("STDOUT-SPEC"), makeSymbol("STDERR-SPEC"))), list(makeSymbol("SEIZE-LOCK", "SUBLISP"), makeString("seize_lock"), list(makeSymbol("LOCK"))), list(makeSymbol("SET-INHIBIT-PREEMPTION", "SUBLISP"), makeString("set_inhibit_preemption"), list(makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-COLUMN", "SUBLISP"), makeString("set_stream_column"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-COMPONENTS", "SUBLISP"), makeString("set_stream_components"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-DIRECTION", "SUBLISP"), makeString("set_stream_direction"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-ELEMENT-TYPE", "SUBLISP"), makeString("set_stream_element_type"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-HANDLE", "SUBLISP"), makeString("set_stream_handle"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-INPUT-BUFFER", "SUBLISP"), makeString("set_stream_input_buffer"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-INPUT-INDEX", "SUBLISP"), makeString("set_stream_input_index"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-INPUT-LIMIT", "SUBLISP"), makeString("set_stream_input_limit"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-LAST-CHAR", "SUBLISP"), makeString("set_stream_last_char"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-LOCK", "SUBLISP"), makeString("set_stream_lock"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-OPEN-P", "SUBLISP"), makeString("set_stream_open_p"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-OUTPUT-BUFFER", "SUBLISP"), makeString("set_stream_output_buffer"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-OUTPUT-INDEX", "SUBLISP"), makeString("set_stream_output_index"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-OUTPUT-LIMIT", "SUBLISP"), makeString("set_stream_output_limit"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-PATHNAME", "SUBLISP"), makeString("set_stream_pathname"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-STREAM-TYPE", "SUBLISP"), makeString("set_stream_stream_type"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SIMPLE-STREAM-ERROR", "SUBLISP"), makeString("simple_stream_error"), list(makeSymbol("FORMAT-CONTROL"), makeSymbol("&OPTIONAL"), makeSymbol("ARGS"))), list(makeSymbol("STREAM-ADVANCE-TO-COLUMN", "SUBLISP"), makeString("stream_advance_to_column"), list(makeSymbol("STREAM"), makeSymbol("COLUMN"))), list(makeSymbol("STREAM-CHECK-TYPE", "SUBLISP"), makeString("stream_check_type"), list(makeSymbol("STREAM"), makeSymbol("TYPE"))), list(makeSymbol("STREAM-CLEAR-INPUT", "SUBLISP"), makeString("stream_clear_input"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-CLEAR-OUTPUT", "SUBLISP"), makeString("stream_clear_output"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-COLUMN", "SUBLISP"), makeString("stream_column"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-COMPONENTS", "SUBLISP"), makeString("stream_components"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-DIRECTION", "SUBLISP"), makeString("stream_direction"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-FILE-LENGTH", "SUBLISP"), makeString("stream_file_length"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-FILE-POSITION", "SUBLISP"), makeString("stream_file_position"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-FILE-STRING-LENGTH", "SUBLISP"), makeString("stream_file_string_length"), list(makeSymbol("STREAM"), makeSymbol("OBJECT"))), list(makeSymbol("STREAM-FINISH-OUTPUT", "SUBLISP"), makeString("stream_finish_output"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-FORCE-OUTPUT", "SUBLISP"), makeString("stream_force_output"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-FRESH-LINE", "SUBLISP"), makeString("stream_fresh_line"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-HANDLE", "SUBLISP"), makeString("stream_handle"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-INPUT-BUFFER", "SUBLISP"), makeString("stream_input_buffer"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-INPUT-INDEX", "SUBLISP"), makeString("stream_input_index"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-INPUT-LIMIT", "SUBLISP"), makeString("stream_input_limit"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-LAST-CHAR", "SUBLISP"), makeString("stream_last_char"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-LISTEN", "SUBLISP"), makeString("stream_listen"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-LOCK", "SUBLISP"), makeString("stream_lock"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-NEXT-INPUT-BUFFER", "SUBLISP"), makeString("stream_next_input_buffer"), list(makeSymbol("STREAM"), makeSymbol("WAITP"))), list(makeSymbol("STREAM-OPEN-P", "SUBLISP"), makeString("stream_open_p"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-OUTPUT-BUFFER", "SUBLISP"), makeString("stream_output_buffer"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-OUTPUT-INDEX", "SUBLISP"), makeString("stream_output_index"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-OUTPUT-LIMIT", "SUBLISP"), makeString("stream_output_limit"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-P", "SUBLISP"), makeString("stream_p"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-PATHNAME", "SUBLISP"), makeString("stream_pathname"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-PEEK-CHAR", "SUBLISP"), makeString("stream_peek_char"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-READ-BYTE", "SUBLISP"), makeString("stream_read_byte"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-READ-CHAR", "SUBLISP"), makeString("stream_read_char"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-READ-CHAR-NO-HANG", "SUBLISP"), makeString("stream_read_char_no_hang"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-READ-LINE", "SUBLISP"), makeString("stream_read_line"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-READ-SEQUENCE", "SUBLISP"), makeString("stream_read_sequence"), list(makeSymbol("STREAM"), makeSymbol("SEQUENCE"), makeSymbol("START"), makeSymbol("END"))), list(makeSymbol("STREAM-SEND-OUTPUT-BUFFER", "SUBLISP"), makeString("stream_send_output_buffer"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-SET-FILE-POSITION", "SUBLISP"), makeString("stream_set_file_position"), list(makeSymbol("STREAM"), makeSymbol("POSITION-SPEC"))), list(makeSymbol("STREAM-START-LINE-P", "SUBLISP"), makeString("stream_start_line_p"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-STREAM-TYPE", "SUBLISP"), makeString("stream_stream_type"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-TERPRI", "SUBLISP"), makeString("stream_terpri"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-UNREAD-CHAR", "SUBLISP"), makeString("stream_unread_char"), list(makeSymbol("STREAM"), makeSymbol("CHARACTER"))), list(makeSymbol("STREAM-WRITE-BYTE", "SUBLISP"), makeString("stream_write_byte"), list(makeSymbol("STREAM"), makeSymbol("INTEGER"))), list(makeSymbol("STREAM-WRITE-CHAR", "SUBLISP"), makeString("stream_write_char"), list(makeSymbol("STREAM"), makeSymbol("CHARACTER"))), list(makeSymbol("STREAM-WRITE-SEQUENCE", "SUBLISP"), makeString("stream_write_sequence"), list(makeSymbol("STREAM"), makeSymbol("SEQUENCE"), makeSymbol("START"), makeSymbol("END"))), list(makeSymbol("STREAM-WRITE-STRING", "SUBLISP"), makeString("stream_write_string"), list(makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("&OPTIONAL"), list(makeSymbol("START"), ZERO_INTEGER), makeSymbol("END"))), list(makeSymbol("TIMESTRING", "SUBLISP"), makeString("f_timestring"), list(makeSymbol("&OPTIONAL"), makeSymbol("UNIVERSAL-TIME"))), list(makeSymbol("UNKNOWN-STREAM-TYPE", "SUBLISP"), makeString("unknown_stream_type"), list(makeSymbol("STREAM"))), list(makeSymbol("UNLOAD-SHARED-OBJECT", "SUBLISP"), makeString("sublisp_unload_shared_object"), list(makeSymbol("PATHNAME"))), list(makeSymbol("WIDE-NEWLINE-STREAM-P", "SUBLISP"), makeString("wide_newline_stream_p"), list(makeSymbol("STREAM"))), list(makeSymbol("_CLEAR-STRUCTURE", "SUBLISP"), makeString("CLEAR_STRUCTURE"), list(makeSymbol("OBJECT"), makeSymbol("SIZE"))), list(makeSymbol("_CLEAR-SUB-STRUCTURE", "SUBLISP"), makeString("CLEAR_SUB_STRUCTURE"), list(makeSymbol("OBJECT"), makeSymbol("SIZE"), makeSymbol("TYPE"))), list(makeSymbol("_CSETF-READTABLE-CASE", "SUBLISP"), makeString("f__csetf_readtable_case"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("_DEF-CSETF", "SUBLISP"), makeString("DEF_CSETF"), list(makeSymbol("ACCESSOR"), makeSymbol("SETTER"))), list(makeSymbol("_METHOD", "SUBLISP"), makeString("METHOD_FUNC"), list(makeSymbol("OBJECT"), makeSymbol("METHOD-TABLE"))), list(makeSymbol("_NEW-STRUCTURE", "SUBLISP"), makeString("NEW_STRUCTURE"), list(makeSymbol("TYPE"), makeSymbol("SIZE"))), list(makeSymbol("_REGISTER-DEFSTRUCT", "SUBLISP"), makeString("REGISTER_DEFSTRUCT"), list(makeSymbol("NAME"), makeSymbol("TYPE"), makeSymbol("SIZE"), makeSymbol("PRINT-FUNCTION"), makeSymbol("SLOTS"))), list(makeSymbol("_REGISTER-METHOD", "SUBLISP"), makeString("REGISTER_METHOD"), list(makeSymbol("METHOD-TABLE"), makeSymbol("TYPE"), makeSymbol("FUNCTION"))), list(makeSymbol("_SET-STRUCTURE-SLOT", "SUBLISP"), makeString("SET_STRUCTURE_SLOT"), list(makeSymbol("OBJECT"), makeSymbol("SLOT"), makeSymbol("VALUE"))), list(makeSymbol("_STRUCTURE-SLOT", "SUBLISP"), makeString("STRUCTURE_SLOT"), list(makeSymbol("OBJECT"), makeSymbol("SLOT"))), list(makeSymbol("_STRUCTURE-TYPE", "SUBLISP"), makeString("STRUCTURE_TYPE"), list(makeSymbol("OBJECT"), makeSymbol("TYPE"))), list(makeSymbol("_STRUCTURES-BAG-P", "SUBLISP"), makeString("dp_structures_bag_p"), list(makeSymbol("X"))) });
    }

    private static SubLObject _constant_1_initializer() {
        return list(new SubLObject[]{ list(makeSymbol("OPEN"), makeString("open_g"), list(makeSymbol("FILESPEC"), makeSymbol("&REST"), makeSymbol("KEYS"))), list(makeSymbol("%B-CHECK-TYPE"), makeString("CHECK_TYPE"), list(makeSymbol("OBJECT"), makeSymbol("TYPE"))), list(makeSymbol("%B-ENFORCE-TYPE"), makeString("ENFORCE_TYPE"), list(makeSymbol("OBJECT"), makeSymbol("TYPE"))), list(makeSymbol("%BEGIN-WITH-PROCESS-RESOURCE-TRACKING"), makeString("BEGIN_WITH_PROCESS_RESOURCE_TRACKING"), list(makeSymbol("ENV"), makeSymbol("RESULT"))), list(makeSymbol("%BIND"), makeString("BIND"), list(makeSymbol("VAR"), makeSymbol("VAL"))), list(makeSymbol("%BIND-SPECIAL-VARS"), makeString("BIND_SPECIAL_VARS"), list(makeSymbol("SPECIAL-VARS"), makeSymbol("BINDINGS"))), list(makeSymbol("%BTD"), makeString("BTD"), list(makeSymbol("OBJ"))), list(makeSymbol("%CATCH-VALUE"), makeString("CATCH_VALUE"), NIL), list(makeSymbol("%CBIG"), makeString("CBIG"), list(makeSymbol("INTEGER"))), list(makeSymbol("%CCHAR"), makeString("CCHAR"), list(makeSymbol("CODE"))), list(makeSymbol("%CFIX"), makeString("CFIX"), list(makeSymbol("FIXNUM"))), list(makeSymbol("%CFLOAT"), makeString("CFLOAT"), list(makeSymbol("FLOAT"))), list(makeSymbol("%CGUID"), makeString("CGUID"), list(makeSymbol("STRING"))), list(makeSymbol("%CINTERN"), makeString("CINTERN"), list(makeSymbol("STRING"))), list(makeSymbol("%CKEYWORD"), makeString("CKEYWORD"), list(makeSymbol("STRING"))), list(makeSymbol("%CMAKE-SYMBOL"), makeString("CMAKE_SYMBOL"), list(makeSymbol("STRING"))), list(makeSymbol("%CPACKAGE"), makeString("CPACKAGE"), list(makeSymbol("STRING"))), list(makeSymbol("%CSTRING"), makeString("CSTRING"), list(makeSymbol("STRING"))), list(makeSymbol("%CSYMBOL"), makeString("CSYMBOL"), list(makeSymbol("SYMBOL-NAME"), makeSymbol("PACKAGE-NAME"))), list(makeSymbol("%CDO-SYMBOLS-END"), makeString("CDO_SYMBOLS_DONE"), list(makeSymbol("PKG-VAR"), makeSymbol("ITERATOR-VAR"))), list(makeSymbol("%CDO-SYMBOLS-LOOP"), makeString("CDO_SYMBOLS_LOOP_DEFAULT"), list(makeSymbol("SYM-VAR"), makeSymbol("ITERATOR-VAR"))), list(makeSymbol("%CDO-SYMBOLS-SETUP"), makeString("CDO_SYMBOLS_SETUP"), list(makeSymbol("PKG-VAR"), makeSymbol("ITERATOR-VAR"))), list(makeSymbol("%CDOHASH-BEGIN"), makeString("CDOHASH_BEGIN"), list(makeSymbol("KEY-VAR"), makeSymbol("OBJ-VAR"), makeSymbol("TABLE-FORM"), makeSymbol("TABLE-VAR"), makeSymbol("INDEX-VAR"))), list(makeSymbol("%CDOHASH-END"), makeString("CDOHASH_END"), list(makeSymbol("KEY-VAR"), makeSymbol("OBJ-VAR"), makeSymbol("TABLE-VAR"), makeSymbol("INDEX-VAR"))), list(makeSymbol("%CDOLIST-BEGIN"), makeString("CDOLIST_BEGIN"), list(makeSymbol("VAR"), makeSymbol("INIT-FORM"), makeSymbol("CDOLIST-VAR"))), list(makeSymbol("%CDOLIST-END"), makeString("CDOLIST_END"), list(makeSymbol("VAR"))), list(makeSymbol("%CDOTIMES-BEGIN"), makeString("CDOTIMES_BEGIN"), list(makeSymbol("VAR"), makeSymbol("INIT-FORM"), makeSymbol("CDOTIMES-VAR"))), list(makeSymbol("%CDOTIMES-END"), makeString("CDOTIMES_END"), list(makeSymbol("VAR"))), list(makeSymbol("%CSOME-BEGIN"), makeString("CSOME_BEGIN"), list(makeSymbol("VAR"), makeSymbol("INIT-FORM"), makeSymbol("DONE-FORM"), makeSymbol("CSOME-VAR"))), list(makeSymbol("%CSOME-END"), makeString("CSOME_END"), list(makeSymbol("VAR"))), list(makeSymbol("%DP-CHECK-TYPE"), makeString("DP_CHECK_TYPE"), list(makeSymbol("OBJECT"), makeSymbol("TYPE"))), list(makeSymbol("%DP-ENFORCE-TYPE"), makeString("DP_ENFORCE_TYPE"), list(makeSymbol("OBJECT"), makeSymbol("TYPE"))), list(makeSymbol("%DTB"), makeString("DTB"), list(makeSymbol("OBJ"))), list(makeSymbol("%DYN"), makeString("DYN"), list(makeSymbol("VAR"))), list(makeSymbol("%END-PRINTING-OBJECT"), makeString("END_PRINTING_OBJECT"), list(makeSymbol("OBJECT"), makeSymbol("STREAM"))), list(makeSymbol("%END-WITH-PROCESS-RESOURCE-TRACKING"), makeString("END_WITH_PROCESS_RESOURCE_TRACKING"), list(makeSymbol("ENV"), makeSymbol("RESULT"))), list(makeSymbol("%FINISH-CATCH"), makeString("FINISH_CATCH"), list(makeSymbol("TAG"), makeSymbol("ENV"))), list(makeSymbol("%FINISH-UNWIND"), makeString("FINISH_UNWIND"), list(makeSymbol("ENV"))), list(makeSymbol("%FORMAT-0A-DIRECTIVE"), makeString("format_0a_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-24-DIRECTIVE"), makeString("format_24_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-25-DIRECTIVE"), makeString("format_25_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-26-DIRECTIVE"), makeString("format_26_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-28-DIRECTIVE"), makeString("format_28_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-29-DIRECTIVE"), makeString("format_29_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-2A-DIRECTIVE"), makeString("format_2a_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-2F-DIRECTIVE"), makeString("format_2f_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-3B-DIRECTIVE"), makeString("format_3b_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-3C-DIRECTIVE"), makeString("format_3c_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-3E-DIRECTIVE"), makeString("format_3e_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-3F-DIRECTIVE"), makeString("format_3f_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-5B-DIRECTIVE"), makeString("format_5b_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-5D-DIRECTIVE"), makeString("format_5d_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-5E-DIRECTIVE"), makeString("format_5e_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-5F-DIRECTIVE"), makeString("format_5f_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-7B-DIRECTIVE"), makeString("format_7b_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-7C-DIRECTIVE"), makeString("format_7c_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-7D-DIRECTIVE"), makeString("format_7d_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-7E-DIRECTIVE"), makeString("format_7e_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-A-DIRECTIVE"), makeString("format_a_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-B-DIRECTIVE"), makeString("format_b_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-C-DIRECTIVE"), makeString("format_c_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-D-DIRECTIVE"), makeString("format_d_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-E-DIRECTIVE"), makeString("format_e_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-F-DIRECTIVE"), makeString("format_f_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-G-DIRECTIVE"), makeString("format_g_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-I-DIRECTIVE"), makeString("format_i_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-O-DIRECTIVE"), makeString("format_o_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-P-DIRECTIVE"), makeString("format_p_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-R-DIRECTIVE"), makeString("format_r_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-S-DIRECTIVE"), makeString("format_s_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-T-DIRECTIVE"), makeString("format_t_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-W-DIRECTIVE"), makeString("format_w_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("%FORMAT-X-DIRECTIVE"), makeString("format_x_directive"), list(new SubLObject[]{ makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("START"), makeSymbol("END"), makeSymbol("ARGS"), makeSymbol("ALL-ARGS"), makeSymbol("PARAMETERS"), makeSymbol("AT-SIGN-P"), makeSymbol("COLONP") })), list(makeSymbol("GET-STATIC-AREA"), makeString("get_static_area")), list(makeSymbol("GET-THREAD-PRIVATE-AREA"), makeString("get_thread-private_area")), list(makeSymbol("GET-WORKING-AREA"), makeString("get_working_area")), list(makeSymbol("%HASH-INDEX-KEY", "SUBLISP"), makeString("HASH_INDEX_KEY"), list(makeSymbol("TABLE"), makeSymbol("INDEX"))), list(makeSymbol("%HASH-INDEX-OBJ", "SUBLISP"), makeString("HASH_INDEX_OBJ"), list(makeSymbol("TABLE"), makeSymbol("INDEX"))), list(makeSymbol("%INIT-OPT-ARG"), makeString("INIT_OPT_ARG"), list(makeSymbol("ARG"), makeSymbol("VAL"))), list(makeSymbol("%LEX"), makeString("LEX"), list(makeSymbol("VAR"))), list(makeSymbol("%MULTIPLE-VALUE-LIST"), makeString("MULTIPLE_VALUE_LIST"), list(makeSymbol("EXPRESSION"))), list(makeSymbol("%MVAL"), makeString("MVAL"), list(makeSymbol("N"))), list(makeSymbol("%MVAL-COUNT"), makeString("MVAL_COUNT"), NIL), list(makeSymbol("%NEXT-HASH-INDEX", "SUBLISP"), makeString("NEXT_HASH_INDEX"), list(makeSymbol("TABLE"), makeSymbol("INDEX"))), list(makeSymbol("%NOTE-SUPPLIED"), makeString("NOTE_SUPPLIED"), list(makeSymbol("VAR"))), list(makeSymbol("%NTH-VALUE"), makeString("NTH_VALUE"), list(makeSymbol("N"), makeSymbol("FORM"))), list(makeSymbol("PRINT-NOT-READABLE"), makeString("print_not_readable"), list(makeSymbol("OBJECT"), makeSymbol("STREAM"))), list(makeSymbol("%PROCLAIM"), makeString("PROCLAIM"), list(makeSymbol("DECL"))), list(makeSymbol("%REBIND"), makeString("REBIND"), list(makeSymbol("VAR"))), list(makeSymbol("%REBIND-SPECIAL-VARS"), makeString("REBIND_SPECIAL_VARS"), list(makeSymbol("SPECIAL-VARS"))), list(makeSymbol("%RESET-MVAL"), makeString("RESET_MVAL"), NIL), list(makeSymbol("%SET-CATCH"), makeString("SET_CATCH"), list(makeSymbol("TAG"), makeSymbol("ENV"))), list(makeSymbol("%SET-DYN"), makeString("SET_DYN"), list(makeSymbol("VAR"), makeSymbol("VAL"))), list(makeSymbol("%SET-LEX"), makeString("SET_LEX"), list(makeSymbol("VAR"), makeSymbol("VAL"))), list(makeSymbol("%SET-UNWIND"), makeString("SET_UNWIND"), list(makeSymbol("ENV"))), list(makeSymbol("%START-PRINTING-OBJECT"), makeString("START_PRINTING_OBJECT"), list(makeSymbol("OBJECT"), makeSymbol("STREAM"))), list(makeSymbol("%START-UNWIND"), makeString("START_UNWIND"), list(makeSymbol("ENV"))), list(makeSymbol("%THROWN-TO"), makeString("DP_THROWN_TO"), list(makeSymbol("ENV"))), list(makeSymbol("IN-PACKAGE"), makeString("in_package"), list(makeSymbol("NAME"))), list(makeSymbol("%CLEAR-GC-RESOURCE-ACCUMULATOR", "SUBLISP"), makeString("sublisp_clear_gc_resource_accumulator"), NIL), list(makeSymbol("%CURRENT-GC-RESOURCE-ACCUMULATOR", "SUBLISP"), makeString("sublisp_current_gc_resource_accumulator"), NIL), list(makeSymbol("%GET-INITIAL-CONTINUATION", "SUBLISP"), makeString("_get_initial_continuation"), NIL), list(makeSymbol("%GET-RED-OBJECT", "SUBLISP"), makeString("_get_red_object"), NIL), list(makeSymbol("%INTERPRET-CSPACE-RESULTS", "SUBLISP"), makeString("sublisp_interpret_cspace_results"), list(makeSymbol("PROBE"), makeSymbol("STREAM"))), list(makeSymbol("%SET-INITIAL-CONTINUATION", "SUBLISP"), makeString("_set_initial_continuation"), list(makeSymbol("FUNCTIONSPEC"))), list(makeSymbol("ADD-SPACE-PROBE", "SUBLISP"), makeString("add_space_probe"), NIL), list(makeSymbol("ALIEN-AS-STRING", "SUBLISP"), makeString("alien_as_string"), list(makeSymbol("OBJECT"))), list(makeSymbol("CANONICAL-NULL-FILE-STREAM-PATH", "SUBLISP"), makeString("canonical_null_file_stream_path")), list(makeSymbol("CIRCULAR-REFERENCE-P", "SUBLISP"), makeString("circular_reference_p"), list(makeSymbol("OBJECT"), makeSymbol("STREAM"))), list(makeSymbol("DEF-FOREIGN-FUNCTION", "SUBLISP"), makeString("sublisp_def_foreign_function"), list(makeSymbol("FOREIGN-SHARED-LIBRARY"), makeSymbol("FOREIGN-NAME"), makeSymbol("SYMBOL"), makeSymbol("ARG-CONVERSION"), makeSymbol("RET-TYPE"), makeSymbol("CALLING-CONVENTION"), makeSymbol("NULL-DEFAULT-RETURN"))), list(makeSymbol("DESCRIPTOR-STREAM-CLOSE", "SUBLISP"), makeString("descriptor_stream_close"), list(makeSymbol("STREAM"), makeSymbol("ABORT"))), list(makeSymbol("DESCRIPTOR-STREAM-FILE-LENGTH", "SUBLISP"), makeString("descriptor_stream_file_length"), list(makeSymbol("STREAM"))), list(makeSymbol("DESCRIPTOR-STREAM-FILE-POSITION", "SUBLISP"), makeString("descriptor_stream_file_position"), list(makeSymbol("STREAM"))), list(makeSymbol("DESCRIPTOR-STREAM-NEXT-INPUT-BUFFER", "SUBLISP"), makeString("descriptor_stream_next_input_buffer"), list(makeSymbol("STREAM"), makeSymbol("WAITP"))), list(makeSymbol("DESCRIPTOR-STREAM-SEND-OUTPUT-BUFFER", "SUBLISP"), makeString("descriptor_stream_send_output_buffer"), list(makeSymbol("STREAM"))), list(makeSymbol("DESCRIPTOR-STREAM-SET-FILE-POSITION", "SUBLISP"), makeString("descriptor_stream_set_file_position"), list(makeSymbol("STREAM"), makeSymbol("POSITION-SPEC"))), list(makeSymbol("ENCODE-UNIVERSAL-TIME-INTERNAL", "SUBLISP"), makeString("encode_universal_time_internal"), list(makeSymbol("SECOND"), makeSymbol("MINUTE"), makeSymbol("HOUR"), makeSymbol("DATE"), makeSymbol("MONTH"), makeSymbol("YEAR"), makeSymbol("TIME-ZONE"))), list(makeSymbol("EXTERNAL-PROCESSES-SUPPORTED?", "SUBLISP"), makeString("external_processes_supportedP"), NIL), list(makeSymbol("FILE-POINTER-STREAM-CLOSE", "SUBLISP"), makeString("file_pointer_stream_close"), list(makeSymbol("STREAM"), makeSymbol("ABORT"))), list(makeSymbol("FILE-POINTER-STREAM-FILE-LENGTH", "SUBLISP"), makeString("file_pointer_stream_file_length"), list(makeSymbol("STREAM"))), list(makeSymbol("FILE-POINTER-STREAM-FILE-POSITION", "SUBLISP"), makeString("file_pointer_stream_file_position"), list(makeSymbol("STREAM"))), list(makeSymbol("FILE-POINTER-STREAM-NEXT-INPUT-BUFFER", "SUBLISP"), makeString("file_pointer_stream_next_input_buffer"), list(makeSymbol("STREAM"), makeSymbol("WAITP"))), list(makeSymbol("FILE-POINTER-STREAM-SEND-OUTPUT-BUFFER", "SUBLISP"), makeString("file_pointer_stream_send_output_buffer"), list(makeSymbol("STREAM"))), list(makeSymbol("FILE-POINTER-STREAM-SET-FILE-POSITION", "SUBLISP"), makeString("file_pointer_stream_set_file_position"), list(makeSymbol("STREAM"), makeSymbol("POSITION-SPEC"))), list(makeSymbol("FOLLOW-SYNONYM-STREAM", "SUBLISP"), makeString("follow_synonym_stream"), list(makeSymbol("STREAM"))), list(makeSymbol("GET-EXTERNAL-PROCESS-STATUS", "SUBLISP"), makeString("get_external_process_status"), list(makeSymbol("PROCESS-ID"), makeSymbol("&OPTIONAL"), makeSymbol("WAIT-UNTIL-DONE?"))), list(makeSymbol("GET-TIME", "SUBLISP"), makeString("get_time"), NIL), list(makeSymbol("GET-TIMEZONE", "SUBLISP"), makeString("get_timezone"), list(makeSymbol("&OPTIONAL"), makeSymbol("UNIVERSAL-TIME"))), list(makeSymbol("HANDLE-CIRCULARITY", "SUBLISP"), makeString("handle_circularity"), list(makeSymbol("OBJECT"), makeSymbol("STREAM"))), list(makeSymbol("ILLEGAL-STREAM-OPERATION", "SUBLISP"), makeString("illegal_stream_operation"), list(makeSymbol("STREAM"), makeSymbol("OPERATION"))), list(makeSymbol("INHIBIT-PREEMPTION-P", "SUBLISP"), makeString("inhibit_preemption_p"), NIL), list(makeSymbol("INPUT-STREAM-DESIGNATOR-STREAM", "SUBLISP"), makeString("input_stream_designator_stream"), list(makeSymbol("OBJECT"))), list(makeSymbol("INTERNED-SYMBOLP", "SUBLISP"), makeString("interned_symbolp"), list(makeSymbol("SYMBOL"))), list(makeSymbol("JVM-CALL", "SUBLISP"), makeString("f_jvm_call"), list(makeSymbol("FUNC"), makeSymbol("STACK-FRAME"), makeSymbol("ARGSTART"), makeSymbol("ARGCNT"))), list(makeSymbol("JVMI-OPCODE-INTERPRETER", "SUBLISP"), makeString("jvmi_opcode_interpreter"), list(makeSymbol("JVMI"), makeSymbol("CODE"))), list(makeSymbol("KILL-EXTERNAL-PROCESS", "SUBLISP"), makeString("kill_external_process"), list(makeSymbol("PROCESS-ID"))), list(makeSymbol("LOAD-SHARED-OBJECT", "SUBLISP"), makeString("sublisp_load_shared_object"), list(makeSymbol("MONIKER"), makeSymbol("PATHNAME"), makeSymbol("OPTIONS"))), list(makeSymbol("MAKE-DESCRIPTOR-STREAM", "SUBLISP"), makeString("make_descriptor_stream"), list(makeSymbol("DESCRIPTOR"), makeSymbol("DIRECTION"), makeSymbol("ELEMENT-TYPE"))), list(makeSymbol("MAKE-GUID-BLOCK", "SUBLISP"), makeString("make_block_of_guids")), list(makeSymbol("MAKE-PRIVATE-DESCRIPTOR-STREAM", "SUBLISP"), makeString("make_private_descriptor_stream"), list(makeSymbol("DESCRIPTOR"), makeSymbol("DIRECTION"), makeSymbol("ELEMENT-TYPE"))), list(makeSymbol("MAKE-STREAM", "SUBLISP"), makeString("make_stream"), list(makeSymbol("&OPTIONAL"), makeSymbol("ARGLIST"))), list(makeSymbol("MY-GETF", "SUBLISP"), makeString("my_getf"), list(makeSymbol("PLIST"), makeSymbol("INDICATOR"), makeSymbol("&OPTIONAL"), makeSymbol("DEFAULT"))), list(makeSymbol("OPEN-DESCRIPTOR", "SUBLISP"), makeString("open_descriptor"), list(makeSymbol("FILESPEC"), makeSymbol("DIRECTION"), makeSymbol("ELEMENT-TYPE"), makeSymbol("IF-EXISTS"), makeSymbol("IF-DOES-NOT-EXIST"), makeSymbol("EXTERNAL-FORMAT"))), list(makeSymbol("OUTPUT-STREAM-DESIGNATOR-STREAM", "SUBLISP"), makeString("output_stream_designator_stream"), list(makeSymbol("OBJECT"))), list(makeSymbol("PATHNAME-DESIGNATOR-PATHNAME", "SUBLISP"), makeString("pathname_designator_pathname"), list(makeSymbol("OBJECT"))), list(makeSymbol("POINTER", "SUBLISP"), makeString("sublisp_pointer"), list(makeSymbol("OBJECT"))), list(makeSymbol("PRINT-BIGNUM-INTERNAL", "SUBLISP"), makeString("print_bignum_internal"), list(makeSymbol("BIGNUM"), makeSymbol("STREAM"), makeSymbol("RADIX"), makeSymbol("DIVISOR"), makeSymbol("POWER-LESS-ONE"))), list(makeSymbol("PRINT-CHARACTER", "SUBLISP"), makeString("print_character"), list(makeSymbol("CHARACTER"), makeSymbol("STREAM"))), list(makeSymbol("PRINT-CONS-CELLS", "SUBLISP"), makeString("print_cons_cells"), list(makeSymbol("CONS"), makeSymbol("STREAM"))), list(makeSymbol("PRINT-ERROR", "SUBLISP"), makeString("print_error"), list(makeSymbol("OBJECT"), makeSymbol("STREAM"))), list(makeSymbol("PRINT-FLONUM", "SUBLISP"), makeString("print_flonum"), list(makeSymbol("FLONUM"), makeSymbol("STREAM"))), list(makeSymbol("PRINT-FUNCTION", "SUBLISP"), makeString("print_function"), list(makeSymbol("FUNCTION"), makeSymbol("STREAM"))), list(makeSymbol("PRINT-HASHTABLE", "SUBLISP"), makeString("print_hashtable"), list(makeSymbol("HASH-TABLE"), makeSymbol("STREAM"))), list(makeSymbol("PRINT-INTEGER", "SUBLISP"), makeString("print_integer"), list(makeSymbol("INTEGER"), makeSymbol("STREAM"))), list(makeSymbol("PRINT-INTEGER-INTERNAL", "SUBLISP"), makeString("print_integer_internal"), list(makeSymbol("INTEGER"), makeSymbol("STREAM"), makeSymbol("PRINT-BASE"))), list(makeSymbol("PRINT-OBJECT-WRAPPER", "SUBLISP"), makeString("print_object_wrapper"), list(makeSymbol("OBJECT"), makeSymbol("STREAM"))), list(makeSymbol("PRINT-STREAM", "SUBLISP"), makeString("print_stream"), list(makeSymbol("OBJECT"), makeSymbol("STREAM"), makeSymbol("DEPTH"))), list(makeSymbol("PRINT-STRING", "SUBLISP"), makeString("print_string"), list(makeSymbol("STRING"), makeSymbol("STREAM"))), list(makeSymbol("PRINT-SYMBOL", "SUBLISP"), makeString("print_symbol"), list(makeSymbol("SYMBOL"), makeSymbol("STREAM"))), list(makeSymbol("PRINT-VECTOR", "SUBLISP"), makeString("print_vector"), list(makeSymbol("VECTOR"), makeSymbol("STREAM"))), list(makeSymbol("PROCESS-YIELD", "SUBLISP"), makeString("process_yield"), NIL), list(makeSymbol("READ-PRINT-EQ", "SUBLISP"), makeString("read_print_eq"), list(makeSymbol("OBJECT"))), list(makeSymbol("REALLY-OPEN", "SUBLISP"), makeString("really_open"), list(makeSymbol("FILESPEC"), makeSymbol("KEYS"))), list(makeSymbol("REALLY-WRITE", "SUBLISP"), makeString("really_write"), list(makeSymbol("OBJECT"), makeSymbol("KEYS"))), list(makeSymbol("REALLY-WRITE-TO-STRING", "SUBLISP"), makeString("really_write_to_string"), list(makeSymbol("OBJECT"), makeSymbol("KEYS"))), list(makeSymbol("RELEASE-LOCK", "SUBLISP"), makeString("release_lock"), list(makeSymbol("LOCK"))), list(makeSymbol("REMOVE-SPACE-PROBE", "SUBLISP"), makeString("remove_space_probe"), list(makeSymbol("PROBE"))), list(makeSymbol("RESTART-CYC", "SUBLISP"), makeString("restart_cyc"), list(makeSymbol("&OPTIONAL"), makeSymbol("WORLD"), makeSymbol("INIT-FILE"), makeSymbol("INIT-FORM"))), list(makeSymbol("RUN-EXTERNAL-PROCESS", "SUBLISP"), makeString("run_external_process"), list(makeSymbol("PROGRAM"), makeSymbol("&OPTIONAL"), makeSymbol("ARGS"), makeSymbol("STDIN-SPEC"), makeSymbol("STDOUT-SPEC"), makeSymbol("STDERR-SPEC"))), list(makeSymbol("SEIZE-LOCK", "SUBLISP"), makeString("seize_lock"), list(makeSymbol("LOCK"))), list(makeSymbol("SET-INHIBIT-PREEMPTION", "SUBLISP"), makeString("set_inhibit_preemption"), list(makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-COLUMN", "SUBLISP"), makeString("set_stream_column"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-COMPONENTS", "SUBLISP"), makeString("set_stream_components"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-DIRECTION", "SUBLISP"), makeString("set_stream_direction"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-ELEMENT-TYPE", "SUBLISP"), makeString("set_stream_element_type"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-HANDLE", "SUBLISP"), makeString("set_stream_handle"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-INPUT-BUFFER", "SUBLISP"), makeString("set_stream_input_buffer"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-INPUT-INDEX", "SUBLISP"), makeString("set_stream_input_index"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-INPUT-LIMIT", "SUBLISP"), makeString("set_stream_input_limit"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-LAST-CHAR", "SUBLISP"), makeString("set_stream_last_char"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-LOCK", "SUBLISP"), makeString("set_stream_lock"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-OPEN-P", "SUBLISP"), makeString("set_stream_open_p"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-OUTPUT-BUFFER", "SUBLISP"), makeString("set_stream_output_buffer"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-OUTPUT-INDEX", "SUBLISP"), makeString("set_stream_output_index"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-OUTPUT-LIMIT", "SUBLISP"), makeString("set_stream_output_limit"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-PATHNAME", "SUBLISP"), makeString("set_stream_pathname"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SET-STREAM-STREAM-TYPE", "SUBLISP"), makeString("set_stream_stream_type"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("SIMPLE-STREAM-ERROR", "SUBLISP"), makeString("simple_stream_error"), list(makeSymbol("FORMAT-CONTROL"), makeSymbol("&OPTIONAL"), makeSymbol("ARGS"))), list(makeSymbol("STREAM-ADVANCE-TO-COLUMN", "SUBLISP"), makeString("stream_advance_to_column"), list(makeSymbol("STREAM"), makeSymbol("COLUMN"))), list(makeSymbol("STREAM-CHECK-TYPE", "SUBLISP"), makeString("stream_check_type"), list(makeSymbol("STREAM"), makeSymbol("TYPE"))), list(makeSymbol("STREAM-CLEAR-INPUT", "SUBLISP"), makeString("stream_clear_input"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-CLEAR-OUTPUT", "SUBLISP"), makeString("stream_clear_output"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-COLUMN", "SUBLISP"), makeString("stream_column"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-COMPONENTS", "SUBLISP"), makeString("stream_components"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-DIRECTION", "SUBLISP"), makeString("stream_direction"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-FILE-LENGTH", "SUBLISP"), makeString("stream_file_length"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-FILE-POSITION", "SUBLISP"), makeString("stream_file_position"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-FILE-STRING-LENGTH", "SUBLISP"), makeString("stream_file_string_length"), list(makeSymbol("STREAM"), makeSymbol("OBJECT"))), list(makeSymbol("STREAM-FINISH-OUTPUT", "SUBLISP"), makeString("stream_finish_output"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-FORCE-OUTPUT", "SUBLISP"), makeString("stream_force_output"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-FRESH-LINE", "SUBLISP"), makeString("stream_fresh_line"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-HANDLE", "SUBLISP"), makeString("stream_handle"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-INPUT-BUFFER", "SUBLISP"), makeString("stream_input_buffer"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-INPUT-INDEX", "SUBLISP"), makeString("stream_input_index"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-INPUT-LIMIT", "SUBLISP"), makeString("stream_input_limit"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-LAST-CHAR", "SUBLISP"), makeString("stream_last_char"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-LISTEN", "SUBLISP"), makeString("stream_listen"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-LOCK", "SUBLISP"), makeString("stream_lock"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-NEXT-INPUT-BUFFER", "SUBLISP"), makeString("stream_next_input_buffer"), list(makeSymbol("STREAM"), makeSymbol("WAITP"))), list(makeSymbol("STREAM-OPEN-P", "SUBLISP"), makeString("stream_open_p"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-OUTPUT-BUFFER", "SUBLISP"), makeString("stream_output_buffer"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-OUTPUT-INDEX", "SUBLISP"), makeString("stream_output_index"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-OUTPUT-LIMIT", "SUBLISP"), makeString("stream_output_limit"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-P", "SUBLISP"), makeString("stream_p"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-PATHNAME", "SUBLISP"), makeString("stream_pathname"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-PEEK-CHAR", "SUBLISP"), makeString("stream_peek_char"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-READ-BYTE", "SUBLISP"), makeString("stream_read_byte"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-READ-CHAR", "SUBLISP"), makeString("stream_read_char"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-READ-CHAR-NO-HANG", "SUBLISP"), makeString("stream_read_char_no_hang"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-READ-LINE", "SUBLISP"), makeString("stream_read_line"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-READ-SEQUENCE", "SUBLISP"), makeString("stream_read_sequence"), list(makeSymbol("STREAM"), makeSymbol("SEQUENCE"), makeSymbol("START"), makeSymbol("END"))), list(makeSymbol("STREAM-SEND-OUTPUT-BUFFER", "SUBLISP"), makeString("stream_send_output_buffer"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-SET-FILE-POSITION", "SUBLISP"), makeString("stream_set_file_position"), list(makeSymbol("STREAM"), makeSymbol("POSITION-SPEC"))), list(makeSymbol("STREAM-START-LINE-P", "SUBLISP"), makeString("stream_start_line_p"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-STREAM-TYPE", "SUBLISP"), makeString("stream_stream_type"), list(makeSymbol("OBJECT"))), list(makeSymbol("STREAM-TERPRI", "SUBLISP"), makeString("stream_terpri"), list(makeSymbol("STREAM"))), list(makeSymbol("STREAM-UNREAD-CHAR", "SUBLISP"), makeString("stream_unread_char"), list(makeSymbol("STREAM"), makeSymbol("CHARACTER"))), list(makeSymbol("STREAM-WRITE-BYTE", "SUBLISP"), makeString("stream_write_byte"), list(makeSymbol("STREAM"), makeSymbol("INTEGER"))), list(makeSymbol("STREAM-WRITE-CHAR", "SUBLISP"), makeString("stream_write_char"), list(makeSymbol("STREAM"), makeSymbol("CHARACTER"))), list(makeSymbol("STREAM-WRITE-SEQUENCE", "SUBLISP"), makeString("stream_write_sequence"), list(makeSymbol("STREAM"), makeSymbol("SEQUENCE"), makeSymbol("START"), makeSymbol("END"))), list(makeSymbol("STREAM-WRITE-STRING", "SUBLISP"), makeString("stream_write_string"), list(makeSymbol("STREAM"), makeSymbol("STRING"), makeSymbol("&OPTIONAL"), list(makeSymbol("START"), ZERO_INTEGER), makeSymbol("END"))), list(makeSymbol("TIMESTRING", "SUBLISP"), makeString("f_timestring"), list(makeSymbol("&OPTIONAL"), makeSymbol("UNIVERSAL-TIME"))), list(makeSymbol("UNKNOWN-STREAM-TYPE", "SUBLISP"), makeString("unknown_stream_type"), list(makeSymbol("STREAM"))), list(makeSymbol("UNLOAD-SHARED-OBJECT", "SUBLISP"), makeString("sublisp_unload_shared_object"), list(makeSymbol("PATHNAME"))), list(makeSymbol("WIDE-NEWLINE-STREAM-P", "SUBLISP"), makeString("wide_newline_stream_p"), list(makeSymbol("STREAM"))), list(makeSymbol("_CLEAR-STRUCTURE", "SUBLISP"), makeString("CLEAR_STRUCTURE"), list(makeSymbol("OBJECT"), makeSymbol("SIZE"))), list(makeSymbol("_CLEAR-SUB-STRUCTURE", "SUBLISP"), makeString("CLEAR_SUB_STRUCTURE"), list(makeSymbol("OBJECT"), makeSymbol("SIZE"), makeSymbol("TYPE"))), list(makeSymbol("_CSETF-READTABLE-CASE", "SUBLISP"), makeString("f__csetf_readtable_case"), list(makeSymbol("OBJECT"), makeSymbol("VALUE"))), list(makeSymbol("_DEF-CSETF", "SUBLISP"), makeString("DEF_CSETF"), list(makeSymbol("ACCESSOR"), makeSymbol("SETTER"))), list(makeSymbol("_METHOD", "SUBLISP"), makeString("METHOD_FUNC"), list(makeSymbol("OBJECT"), makeSymbol("METHOD-TABLE"))), list(makeSymbol("_NEW-STRUCTURE", "SUBLISP"), makeString("NEW_STRUCTURE"), list(makeSymbol("TYPE"), makeSymbol("SIZE"))), list(makeSymbol("_REGISTER-DEFSTRUCT", "SUBLISP"), makeString("REGISTER_DEFSTRUCT"), list(makeSymbol("NAME"), makeSymbol("TYPE"), makeSymbol("SIZE"), makeSymbol("PRINT-FUNCTION"), makeSymbol("SLOTS"))), list(makeSymbol("_REGISTER-METHOD", "SUBLISP"), makeString("REGISTER_METHOD"), list(makeSymbol("METHOD-TABLE"), makeSymbol("TYPE"), makeSymbol("FUNCTION"))), list(makeSymbol("_SET-STRUCTURE-SLOT", "SUBLISP"), makeString("SET_STRUCTURE_SLOT"), list(makeSymbol("OBJECT"), makeSymbol("SLOT"), makeSymbol("VALUE"))), list(makeSymbol("_STRUCTURE-SLOT", "SUBLISP"), makeString("STRUCTURE_SLOT"), list(makeSymbol("OBJECT"), makeSymbol("SLOT"))), list(makeSymbol("_STRUCTURE-TYPE", "SUBLISP"), makeString("STRUCTURE_TYPE"), list(makeSymbol("OBJECT"), makeSymbol("TYPE"))), list(makeSymbol("_STRUCTURES-BAG-P", "SUBLISP"), makeString("dp_structures_bag_p"), list(makeSymbol("X"))) });
    }

    private static final SubLObject _constant_10_initializer_alt() {
        return list(new SubLObject[]{ list(makeSymbol("%B-/="), makeString("numNE"), list(makeSymbol("NUM1"), makeSymbol("NUM2"))), list(makeSymbol("%B-<"), makeString("numL"), list(makeSymbol("NUM1"), makeSymbol("NUM2"))), list(makeSymbol("%B-<="), makeString("numLE"), list(makeSymbol("NUM1"), makeSymbol("NUM2"))), list(makeSymbol("%B-="), makeString("numE"), list(makeSymbol("NUM1"), makeSymbol("NUM2"))), list(makeSymbol("%B->"), makeString("numG"), list(makeSymbol("NUM1"), makeSymbol("NUM2"))), list(makeSymbol("%B->="), makeString("numGE"), list(makeSymbol("NUM1"), makeSymbol("NUM2"))), list(makeSymbol("%B-ALIEN-P"), makeString("alienp"), list(makeSymbol("X"))), list(makeSymbol("%B-ALPHA-CHARP"), makeString("alpha_char_p"), list(makeSymbol("CHAR"))), list(makeSymbol("%B-ALPHANUMERICP"), makeString("alphanumericp"), list(makeSymbol("CHAR"))), list(makeSymbol("%B-ATOM"), makeString("atom"), list(makeSymbol("X"))), list(makeSymbol("%B-BOTH-CASEP"), makeString("both_case_p"), list(makeSymbol("CHAR"))), list(makeSymbol("%B-BOUNDP"), makeString("boundp"), list(makeSymbol("SYMBOL"))), list(makeSymbol("%B-CHAR-EQUAL"), makeString("char_equal"), list(makeSymbol("CHAR1"), makeSymbol("CHAR2"))), list(makeSymbol("%B-CHAR-GREATERP"), makeString("char_greaterp"), list(makeSymbol("CHAR1"), makeSymbol("CHAR2"))), list(makeSymbol("%B-CHAR-LESSP"), makeString("char_lessp"), list(makeSymbol("CHAR1"), makeSymbol("CHAR2"))), list(makeSymbol("%B-CHAR-NOT-EQUAL"), makeString("char_not_equal"), list(makeSymbol("CHAR1"), makeSymbol("CHAR2"))), list(makeSymbol("%B-CHAR-NOT-GREATERP"), makeString("char_not_greaterp"), list(makeSymbol("CHAR1"), makeSymbol("CHAR2"))), list(makeSymbol("%B-CHAR-NOT-LESSP"), makeString("char_not_lessp"), list(makeSymbol("CHAR1"), makeSymbol("CHAR2"))), list(makeSymbol("%B-CHAR/="), makeString("charNE"), list(makeSymbol("CHAR1"), makeSymbol("CHAR2"))), list(makeSymbol("%B-CHAR<"), makeString("charL"), list(makeSymbol("CHAR1"), makeSymbol("CHAR2"))), list(makeSymbol("%B-CHAR<="), makeString("charLE"), list(makeSymbol("CHAR1"), makeSymbol("CHAR2"))), list(makeSymbol("%B-CHAR="), makeString("charE"), list(makeSymbol("CHAR1"), makeSymbol("CHAR2"))), list(makeSymbol("%B-CHAR>"), makeString("charG"), list(makeSymbol("CHAR1"), makeSymbol("CHAR2"))), list(makeSymbol("%B-CHAR>="), makeString("charGE"), list(makeSymbol("CHAR1"), makeSymbol("CHAR2"))), list(makeSymbol("%B-CHARACTERP"), makeString("characterp"), list(makeSymbol("X"))), list(makeSymbol("%B-CONSP"), makeString("consp"), list(makeSymbol("X"))), list(makeSymbol("%B-EQ"), makeString("EQ"), list(makeSymbol("X"), makeSymbol("Y"))), list(makeSymbol("%B-EQL"), makeString("eql"), list(makeSymbol("X"), makeSymbol("Y"))), list(makeSymbol("%B-EQUAL"), makeString("equal"), list(makeSymbol("X"), makeSymbol("Y"))), list(makeSymbol("%B-EQUALP"), makeString("equalp"), list(makeSymbol("X"), makeSymbol("Y"))), list(makeSymbol("%B-EVENP"), makeString("evenp"), list(makeSymbol("NUMBER"))), list(makeSymbol("%B-FBOUNDP"), makeString("fboundp"), list(makeSymbol("SYMBOL"))), list(makeSymbol("%B-FIXNUMP"), makeString("fixnump"), list(makeSymbol("X"))), list(makeSymbol("%B-FLOATP"), makeString("floatp"), list(makeSymbol("X"))), list(makeSymbol("%B-FUNCTION-SPEC-P"), makeString("function_spec_p"), list(makeSymbol("X"))), list(makeSymbol("%B-FUNCTIONP"), makeString("functionp"), list(makeSymbol("X"))), list(makeSymbol("%B-GUID-P"), makeString("guid_p"), list(makeSymbol("OBJ"))), list(makeSymbol("%B-HASH-TABLE-P"), makeString("hash_table_p"), list(makeSymbol("X"))), list(makeSymbol("%B-INTEGERP"), makeString("integerp"), list(makeSymbol("X"))), list(makeSymbol("%B-KEYWORDP"), makeString("keywordp"), list(makeSymbol("X"))), list(makeSymbol("%B-LISTP"), makeString("listp"), list(makeSymbol("X"))), list(makeSymbol("%B-LOCK-P"), makeString("lockp"), list(makeSymbol("X"))), list(makeSymbol("%B-LOWER-CASEP"), makeString("lower_case_p"), list(makeSymbol("CHAR"))), list(makeSymbol("%B-MACRO-OPERATOR-P"), makeString("macro_operator_p"), list(makeSymbol("X"))), list(makeSymbol("%B-MINUSP"), makeString("minusp"), list(makeSymbol("NUMBER"))), list(makeSymbol("%B-NULL"), makeString("SUBLISP_NULL"), list(makeSymbol("X"))), list(makeSymbol("%B-NUMBERP"), makeString("numberp"), list(makeSymbol("X"))), list(makeSymbol("%B-ODDP"), makeString("oddp"), list(makeSymbol("NUMBER"))), list(makeSymbol("%B-PACKAGEP"), makeString("packagep"), list(makeSymbol("X"))), list(makeSymbol("%B-PLUSP"), makeString("plusp"), list(makeSymbol("NUMBER"))), list(makeSymbol("%B-PROBE-FILE"), makeString("probe_file"), list(makeSymbol("FILENAME"))), list(makeSymbol("%B-PROCESSP"), makeString("processp"), list(makeSymbol("X"))), list(makeSymbol("%B-SEQUENCEP"), makeString("sequencep"), list(makeSymbol("X"))), list(makeSymbol("%B-STREAMP"), makeString("streamp"), list(makeSymbol("X"))), list(makeSymbol("%B-STRING-EQUAL"), makeString("string_equal"), list(makeSymbol("STRING1"), makeSymbol("STRING2"), makeSymbol("&OPTIONAL"), makeSymbol("START1"), makeSymbol("END1"), makeSymbol("START2"), makeSymbol("END2"))), list(makeSymbol("%B-STRING-GREATERP"), makeString("string_greaterp"), list(makeSymbol("STRING1"), makeSymbol("STRING2"), makeSymbol("&OPTIONAL"), makeSymbol("START1"), makeSymbol("END1"), makeSymbol("START2"), makeSymbol("END2"))), list(makeSymbol("%B-STRING-LESSP"), makeString("string_lessp"), list(makeSymbol("STRING1"), makeSymbol("STRING2"), makeSymbol("&OPTIONAL"), makeSymbol("START1"), makeSymbol("END1"), makeSymbol("START2"), makeSymbol("END2"))), list(makeSymbol("%B-STRING-NOT-EQUAL"), makeString("string_not_equal"), list(makeSymbol("STRING1"), makeSymbol("STRING2"), makeSymbol("&OPTIONAL"), makeSymbol("START1"), makeSymbol("END1"), makeSymbol("START2"), makeSymbol("END2"))), list(makeSymbol("%B-STRING-NOT-GREATERP"), makeString("string_not_greaterp"), list(makeSymbol("STRING1"), makeSymbol("STRING2"), makeSymbol("&OPTIONAL"), makeSymbol("START1"), makeSymbol("END1"), makeSymbol("START2"), makeSymbol("END2"))), list(makeSymbol("%B-STRING-NOT-LESSP"), makeString("string_not_lessp"), list(makeSymbol("STRING1"), makeSymbol("STRING2"), makeSymbol("&OPTIONAL"), makeSymbol("START1"), makeSymbol("END1"), makeSymbol("START2"), makeSymbol("END2"))), list(makeSymbol("%B-STRING/="), makeString("stringNE"), list(makeSymbol("STRING1"), makeSymbol("STRING2"), makeSymbol("&OPTIONAL"), makeSymbol("START1"), makeSymbol("END1"), makeSymbol("START2"), makeSymbol("END2"))), list(makeSymbol("%B-STRING<"), makeString("stringL"), list(makeSymbol("STRING1"), makeSymbol("STRING2"), makeSymbol("&OPTIONAL"), makeSymbol("START1"), makeSymbol("END1"), makeSymbol("START2"), makeSymbol("END2"))), list(makeSymbol("%B-STRING<="), makeString("stringLE"), list(makeSymbol("STRING1"), makeSymbol("STRING2"), makeSymbol("&OPTIONAL"), makeSymbol("START1"), makeSymbol("END1"), makeSymbol("START2"), makeSymbol("END2"))), list(makeSymbol("%B-STRING="), makeString("stringE"), list(makeSymbol("STRING1"), makeSymbol("STRING2"), makeSymbol("&OPTIONAL"), makeSymbol("START1"), makeSymbol("END1"), makeSymbol("START2"), makeSymbol("END2"))), list(makeSymbol("%B-STRING>"), makeString("stringG"), list(makeSymbol("STRING1"), makeSymbol("STRING2"), makeSymbol("&OPTIONAL"), makeSymbol("START1"), makeSymbol("END1"), makeSymbol("START2"), makeSymbol("END2"))), list(makeSymbol("%B-STRING>="), makeString("stringGE"), list(makeSymbol("STRING1"), makeSymbol("STRING2"), makeSymbol("&OPTIONAL"), makeSymbol("START1"), makeSymbol("END1"), makeSymbol("START2"), makeSymbol("END2"))), list(makeSymbol("%B-STRINGP"), makeString("stringp"), list(makeSymbol("X"))), list(makeSymbol("%B-STRUCTURES-BAG-P"), makeString("structures_bag_p"), list(makeSymbol("X"))), list(makeSymbol("%B-SYMBOLP"), makeString("symbolp"), list(makeSymbol("X"))), list(makeSymbol("%B-THROWN-TO"), makeString("THROWN_TO"), list(makeSymbol("ENV"))), list(makeSymbol("%B-UPPER-CASEP"), makeString("upper_case_p"), list(makeSymbol("CHAR"))), list(makeSymbol("%B-VECTORP"), makeString("vectorp"), list(makeSymbol("X"))), list(makeSymbol("%B-ZEROP"), makeString("zerop"), list(makeSymbol("NUMBER"))) });
    }

    private static SubLObject _constant_10_initializer() {
        return list(new SubLObject[]{ list(makeSymbol("%B-/="), makeString("numNE"), list(makeSymbol("NUM1"), makeSymbol("NUM2"))), list(makeSymbol("%B-<"), makeString("numL"), list(makeSymbol("NUM1"), makeSymbol("NUM2"))), list(makeSymbol("%B-<="), makeString("numLE"), list(makeSymbol("NUM1"), makeSymbol("NUM2"))), list(makeSymbol("%B-="), makeString("numE"), list(makeSymbol("NUM1"), makeSymbol("NUM2"))), list(makeSymbol("%B->"), makeString("numG"), list(makeSymbol("NUM1"), makeSymbol("NUM2"))), list(makeSymbol("%B->="), makeString("numGE"), list(makeSymbol("NUM1"), makeSymbol("NUM2"))), list(makeSymbol("%B-ALIEN-P"), makeString("alienp"), list(makeSymbol("X"))), list(makeSymbol("%B-ALPHA-CHARP"), makeString("alpha_char_p"), list(makeSymbol("CHAR"))), list(makeSymbol("%B-ALPHANUMERICP"), makeString("alphanumericp"), list(makeSymbol("CHAR"))), list(makeSymbol("%B-ATOM"), makeString("atom"), list(makeSymbol("X"))), list(makeSymbol("%B-BOTH-CASEP"), makeString("both_case_p"), list(makeSymbol("CHAR"))), list(makeSymbol("%B-BOUNDP"), makeString("boundp"), list(makeSymbol("SYMBOL"))), list(makeSymbol("%B-CHAR-EQUAL"), makeString("char_equal"), list(makeSymbol("CHAR1"), makeSymbol("CHAR2"))), list(makeSymbol("%B-CHAR-GREATERP"), makeString("char_greaterp"), list(makeSymbol("CHAR1"), makeSymbol("CHAR2"))), list(makeSymbol("%B-CHAR-LESSP"), makeString("char_lessp"), list(makeSymbol("CHAR1"), makeSymbol("CHAR2"))), list(makeSymbol("%B-CHAR-NOT-EQUAL"), makeString("char_not_equal"), list(makeSymbol("CHAR1"), makeSymbol("CHAR2"))), list(makeSymbol("%B-CHAR-NOT-GREATERP"), makeString("char_not_greaterp"), list(makeSymbol("CHAR1"), makeSymbol("CHAR2"))), list(makeSymbol("%B-CHAR-NOT-LESSP"), makeString("char_not_lessp"), list(makeSymbol("CHAR1"), makeSymbol("CHAR2"))), list(makeSymbol("%B-CHAR/="), makeString("charNE"), list(makeSymbol("CHAR1"), makeSymbol("CHAR2"))), list(makeSymbol("%B-CHAR<"), makeString("charL"), list(makeSymbol("CHAR1"), makeSymbol("CHAR2"))), list(makeSymbol("%B-CHAR<="), makeString("charLE"), list(makeSymbol("CHAR1"), makeSymbol("CHAR2"))), list(makeSymbol("%B-CHAR="), makeString("charE"), list(makeSymbol("CHAR1"), makeSymbol("CHAR2"))), list(makeSymbol("%B-CHAR>"), makeString("charG"), list(makeSymbol("CHAR1"), makeSymbol("CHAR2"))), list(makeSymbol("%B-CHAR>="), makeString("charGE"), list(makeSymbol("CHAR1"), makeSymbol("CHAR2"))), list(makeSymbol("%B-CHARACTERP"), makeString("characterp"), list(makeSymbol("X"))), list(makeSymbol("%B-CONSP"), makeString("consp"), list(makeSymbol("X"))), list(makeSymbol("%B-EQ"), makeString("EQ"), list(makeSymbol("X"), makeSymbol("Y"))), list(makeSymbol("%B-EQL"), makeString("eql"), list(makeSymbol("X"), makeSymbol("Y"))), list(makeSymbol("%B-EQUAL"), makeString("equal"), list(makeSymbol("X"), makeSymbol("Y"))), list(makeSymbol("%B-EQUALP"), makeString("equalp"), list(makeSymbol("X"), makeSymbol("Y"))), list(makeSymbol("%B-EVENP"), makeString("evenp"), list(makeSymbol("NUMBER"))), list(makeSymbol("%B-FBOUNDP"), makeString("fboundp"), list(makeSymbol("SYMBOL"))), list(makeSymbol("%B-FIXNUMP"), makeString("fixnump"), list(makeSymbol("X"))), list(makeSymbol("%B-FLOATP"), makeString("floatp"), list(makeSymbol("X"))), list(makeSymbol("%B-FUNCTION-SPEC-P"), makeString("function_spec_p"), list(makeSymbol("X"))), list(makeSymbol("%B-FUNCTIONP"), makeString("functionp"), list(makeSymbol("X"))), list(makeSymbol("%B-GUID-P"), makeString("guid_p"), list(makeSymbol("OBJ"))), list(makeSymbol("%B-HASH-TABLE-P"), makeString("hash_table_p"), list(makeSymbol("X"))), list(makeSymbol("%B-INTEGERP"), makeString("integerp"), list(makeSymbol("X"))), list(makeSymbol("%B-KEYWORDP"), makeString("keywordp"), list(makeSymbol("X"))), list(makeSymbol("%B-LISTP"), makeString("listp"), list(makeSymbol("X"))), list(makeSymbol("%B-LOCK-P"), makeString("lockp"), list(makeSymbol("X"))), list(makeSymbol("%B-LOWER-CASEP"), makeString("lower_case_p"), list(makeSymbol("CHAR"))), list(makeSymbol("%B-MACRO-OPERATOR-P"), makeString("macro_operator_p"), list(makeSymbol("X"))), list(makeSymbol("%B-MINUSP"), makeString("minusp"), list(makeSymbol("NUMBER"))), list(makeSymbol("%B-NULL"), makeString("SUBLISP_NULL"), list(makeSymbol("X"))), list(makeSymbol("%B-NUMBERP"), makeString("numberp"), list(makeSymbol("X"))), list(makeSymbol("%B-ODDP"), makeString("oddp"), list(makeSymbol("NUMBER"))), list(makeSymbol("%B-PACKAGEP"), makeString("packagep"), list(makeSymbol("X"))), list(makeSymbol("%B-PLUSP"), makeString("plusp"), list(makeSymbol("NUMBER"))), list(makeSymbol("%B-PROBE-FILE"), makeString("probe_file"), list(makeSymbol("FILENAME"))), list(makeSymbol("%B-PROCESSP"), makeString("processp"), list(makeSymbol("X"))), list(makeSymbol("%B-SEQUENCEP"), makeString("sequencep"), list(makeSymbol("X"))), list(makeSymbol("%B-STREAMP"), makeString("streamp"), list(makeSymbol("X"))), list(makeSymbol("%B-STRING-EQUAL"), makeString("string_equal"), list(makeSymbol("STRING1"), makeSymbol("STRING2"), makeSymbol("&OPTIONAL"), makeSymbol("START1"), makeSymbol("END1"), makeSymbol("START2"), makeSymbol("END2"))), list(makeSymbol("%B-STRING-GREATERP"), makeString("string_greaterp"), list(makeSymbol("STRING1"), makeSymbol("STRING2"), makeSymbol("&OPTIONAL"), makeSymbol("START1"), makeSymbol("END1"), makeSymbol("START2"), makeSymbol("END2"))), list(makeSymbol("%B-STRING-LESSP"), makeString("string_lessp"), list(makeSymbol("STRING1"), makeSymbol("STRING2"), makeSymbol("&OPTIONAL"), makeSymbol("START1"), makeSymbol("END1"), makeSymbol("START2"), makeSymbol("END2"))), list(makeSymbol("%B-STRING-NOT-EQUAL"), makeString("string_not_equal"), list(makeSymbol("STRING1"), makeSymbol("STRING2"), makeSymbol("&OPTIONAL"), makeSymbol("START1"), makeSymbol("END1"), makeSymbol("START2"), makeSymbol("END2"))), list(makeSymbol("%B-STRING-NOT-GREATERP"), makeString("string_not_greaterp"), list(makeSymbol("STRING1"), makeSymbol("STRING2"), makeSymbol("&OPTIONAL"), makeSymbol("START1"), makeSymbol("END1"), makeSymbol("START2"), makeSymbol("END2"))), list(makeSymbol("%B-STRING-NOT-LESSP"), makeString("string_not_lessp"), list(makeSymbol("STRING1"), makeSymbol("STRING2"), makeSymbol("&OPTIONAL"), makeSymbol("START1"), makeSymbol("END1"), makeSymbol("START2"), makeSymbol("END2"))), list(makeSymbol("%B-STRING/="), makeString("stringNE"), list(makeSymbol("STRING1"), makeSymbol("STRING2"), makeSymbol("&OPTIONAL"), makeSymbol("START1"), makeSymbol("END1"), makeSymbol("START2"), makeSymbol("END2"))), list(makeSymbol("%B-STRING<"), makeString("stringL"), list(makeSymbol("STRING1"), makeSymbol("STRING2"), makeSymbol("&OPTIONAL"), makeSymbol("START1"), makeSymbol("END1"), makeSymbol("START2"), makeSymbol("END2"))), list(makeSymbol("%B-STRING<="), makeString("stringLE"), list(makeSymbol("STRING1"), makeSymbol("STRING2"), makeSymbol("&OPTIONAL"), makeSymbol("START1"), makeSymbol("END1"), makeSymbol("START2"), makeSymbol("END2"))), list(makeSymbol("%B-STRING="), makeString("stringE"), list(makeSymbol("STRING1"), makeSymbol("STRING2"), makeSymbol("&OPTIONAL"), makeSymbol("START1"), makeSymbol("END1"), makeSymbol("START2"), makeSymbol("END2"))), list(makeSymbol("%B-STRING>"), makeString("stringG"), list(makeSymbol("STRING1"), makeSymbol("STRING2"), makeSymbol("&OPTIONAL"), makeSymbol("START1"), makeSymbol("END1"), makeSymbol("START2"), makeSymbol("END2"))), list(makeSymbol("%B-STRING>="), makeString("stringGE"), list(makeSymbol("STRING1"), makeSymbol("STRING2"), makeSymbol("&OPTIONAL"), makeSymbol("START1"), makeSymbol("END1"), makeSymbol("START2"), makeSymbol("END2"))), list(makeSymbol("%B-STRINGP"), makeString("stringp"), list(makeSymbol("X"))), list(makeSymbol("%B-STRUCTURES-BAG-P"), makeString("structures_bag_p"), list(makeSymbol("X"))), list(makeSymbol("%B-SYMBOLP"), makeString("symbolp"), list(makeSymbol("X"))), list(makeSymbol("%B-THROWN-TO"), makeString("THROWN_TO"), list(makeSymbol("ENV"))), list(makeSymbol("%B-UPPER-CASEP"), makeString("upper_case_p"), list(makeSymbol("CHAR"))), list(makeSymbol("%B-VECTORP"), makeString("vectorp"), list(makeSymbol("X"))), list(makeSymbol("%B-ZEROP"), makeString("zerop"), list(makeSymbol("NUMBER"))) });
    }

    private static final SubLObject _constant_15_initializer_alt() {
        return list(new SubLObject[]{ cons(T, makeString("T")), cons(NIL, makeString("NIL")), cons(EQ, makeString("eq_sym")), cons(EQL, makeString("eql_sym")), cons(EQUAL, makeString("equal_sym")), cons(EQUALP, makeString("equalp_sym")), cons(IDENTITY, makeString("identity_sym")), cons(MINUS_ONE_INTEGER, makeString("minus_one")), cons(ZERO_INTEGER, makeString("zero")), cons(ONE_INTEGER, makeString("one")), cons(TWO_INTEGER, makeString("two")), cons(THREE_INTEGER, makeString("three")), cons(FOUR_INTEGER, makeString("four")), cons(FIVE_INTEGER, makeString("five")), cons(SIX_INTEGER, makeString("six")), cons(SEVEN_INTEGER, makeString("seven")), cons(EIGHT_INTEGER, makeString("eight")), cons(NINE_INTEGER, makeString("nine")), cons(TEN_INTEGER, makeString("ten")), cons(ELEVEN_INTEGER, makeString("eleven")), cons(TWELVE_INTEGER, makeString("twelve")), cons(THIRTEEN_INTEGER, makeString("thirteen")), cons(FOURTEEN_INTEGER, makeString("fourteen")), cons(FIFTEEN_INTEGER, makeString("fifteen")), cons(SIXTEEN_INTEGER, makeString("sixteen")), cons(SEVENTEEN_INTEGER, makeString("seventeen")), cons(EIGHTEEN_INTEGER, makeString("eighteen")), cons(NINETEEN_INTEGER, makeString("nineteen")), cons(TWENTY_INTEGER, makeString("twenty")), cons(CHAR_null, makeString("c_null")), cons(CHAR_backspace, makeString("c_backspace")), cons(CHAR_tab, makeString("c_tab")), cons(CHAR_newline, makeString("c_newline")), cons(CHAR_return, makeString("c_return")), cons(CHAR_page, makeString("c_page")), cons(CHAR_escape, makeString("c_esc")), cons(CHAR_space, makeString("c_space")), cons(CHAR_exclamation, makeString("c_exclamation")), cons(CHAR_quotation, makeString("c_quotation")), cons(CHAR_hash, makeString("c_hash")), cons(CHAR_dollar, makeString("c_dollar")), cons(CHAR_percent, makeString("c_percent")), cons(CHAR_ampersand, makeString("c_ampersand")), cons(CHAR_quote, makeString("c_quote")), cons(CHAR_lparen, makeString("c_lparen")), cons(CHAR_rparen, makeString("c_rparen")), cons(CHAR_asterisk, makeString("c_asterisk")), cons(CHAR_plus, makeString("c_plus")), cons(CHAR_comma, makeString("c_comma")), cons(CHAR_hyphen, makeString("c_hyphen")), cons(CHAR_period, makeString("c_period")), cons(CHAR_slash, makeString("c_slash")), cons(CHAR_0, makeString("c_0")), cons(CHAR_1, makeString("c_1")), cons(CHAR_2, makeString("c_2")), cons(CHAR_3, makeString("c_3")), cons(CHAR_4, makeString("c_4")), cons(CHAR_5, makeString("c_5")), cons(CHAR_6, makeString("c_6")), cons(CHAR_7, makeString("c_7")), cons(CHAR_8, makeString("c_8")), cons(CHAR_9, makeString("c_9")), cons(CHAR_colon, makeString("c_colon")), cons(CHAR_semicolon, makeString("c_semicolon")), cons(CHAR_less, makeString("c_less")), cons(CHAR_equal, makeString("c_equal")), cons(CHAR_greater, makeString("c_greater")), cons(CHAR_question, makeString("c_question")), cons(CHAR_at, makeString("c_at")), cons(CHAR_A, makeString("c_A")), cons(CHAR_B, makeString("c_B")), cons(CHAR_C, makeString("c_C")), cons(CHAR_D, makeString("c_D")), cons(CHAR_E, makeString("c_E")), cons(CHAR_F, makeString("c_F")), cons(CHAR_G, makeString("c_G")), cons(CHAR_H, makeString("c_H")), cons(CHAR_I, makeString("c_I")), cons(CHAR_J, makeString("c_J")), cons(CHAR_K, makeString("c_K")), cons(CHAR_L, makeString("c_L")), cons(CHAR_M, makeString("c_M")), cons(CHAR_N, makeString("c_N")), cons(CHAR_O, makeString("c_O")), cons(CHAR_P, makeString("c_P")), cons(CHAR_Q, makeString("c_Q")), cons(CHAR_R, makeString("c_R")), cons(CHAR_S, makeString("c_S")), cons(CHAR_T, makeString("c_T")), cons(CHAR_U, makeString("c_U")), cons(CHAR_V, makeString("c_V")), cons(CHAR_W, makeString("c_W")), cons(CHAR_X, makeString("c_X")), cons(CHAR_Y, makeString("c_Y")), cons(CHAR_Z, makeString("c_Z")), cons(CHAR_lbracket, makeString("c_lbracket")), cons(CHAR_backslash, makeString("c_backslash")), cons(CHAR_rbracket, makeString("c_rbracket")), cons(CHAR_caret, makeString("c_caret")), cons(CHAR_underbar, makeString("c_underbar")), cons(CHAR_backquote, makeString("c_backquote")), cons(CHAR_a, makeString("c_a")), cons(CHAR_b, makeString("c_b")), cons(CHAR_c, makeString("c_c")), cons(CHAR_d, makeString("c_d")), cons(CHAR_e, makeString("c_e")), cons(CHAR_f, makeString("c_f")), cons(CHAR_g, makeString("c_g")), cons(CHAR_h, makeString("c_h")), cons(CHAR_i, makeString("c_i")), cons(CHAR_j, makeString("c_j")), cons(CHAR_k, makeString("c_k")), cons(CHAR_l, makeString("c_l")), cons(CHAR_m, makeString("c_m")), cons(CHAR_n, makeString("c_n")), cons(CHAR_o, makeString("c_o")), cons(CHAR_p, makeString("c_p")), cons(CHAR_q, makeString("c_q")), cons(CHAR_r, makeString("c_r")), cons(CHAR_s, makeString("c_s")), cons(CHAR_t, makeString("c_t")), cons(CHAR_u, makeString("c_u")), cons(CHAR_v, makeString("c_v")), cons(CHAR_w, makeString("c_w")), cons(CHAR_x, makeString("c_x")), cons(CHAR_y, makeString("c_y")), cons(CHAR_z, makeString("c_z")), cons(CHAR_lbrace, makeString("c_lbrace")), cons(CHAR_vertical, makeString("c_vertical")), cons(CHAR_rbrace, makeString("c_rbrace")), cons(CHAR_tilde, makeString("c_tilde")), cons(CHAR_rubout, makeString("c_rubout")) });
    }

    private static SubLObject _constant_15_initializer() {
        return list(new SubLObject[]{ cons(T, makeString("T")), cons(NIL, makeString("NIL")), cons(EQ, makeString("eq_sym")), cons(EQL, makeString("eql_sym")), cons(EQUAL, makeString("equal_sym")), cons(EQUALP, makeString("equalp_sym")), cons(IDENTITY, makeString("identity_sym")), cons(MINUS_ONE_INTEGER, makeString("minus_one")), cons(ZERO_INTEGER, makeString("zero")), cons(ONE_INTEGER, makeString("one")), cons(TWO_INTEGER, makeString("two")), cons(THREE_INTEGER, makeString("three")), cons(FOUR_INTEGER, makeString("four")), cons(FIVE_INTEGER, makeString("five")), cons(SIX_INTEGER, makeString("six")), cons(SEVEN_INTEGER, makeString("seven")), cons(EIGHT_INTEGER, makeString("eight")), cons(NINE_INTEGER, makeString("nine")), cons(TEN_INTEGER, makeString("ten")), cons(ELEVEN_INTEGER, makeString("eleven")), cons(TWELVE_INTEGER, makeString("twelve")), cons(THIRTEEN_INTEGER, makeString("thirteen")), cons(FOURTEEN_INTEGER, makeString("fourteen")), cons(FIFTEEN_INTEGER, makeString("fifteen")), cons(SIXTEEN_INTEGER, makeString("sixteen")), cons(SEVENTEEN_INTEGER, makeString("seventeen")), cons(EIGHTEEN_INTEGER, makeString("eighteen")), cons(NINETEEN_INTEGER, makeString("nineteen")), cons(TWENTY_INTEGER, makeString("twenty")), cons(CHAR_null, makeString("c_null")), cons(CHAR_backspace, makeString("c_backspace")), cons(CHAR_tab, makeString("c_tab")), cons(CHAR_newline, makeString("c_newline")), cons(CHAR_return, makeString("c_return")), cons(CHAR_page, makeString("c_page")), cons(CHAR_escape, makeString("c_esc")), cons(CHAR_space, makeString("c_space")), cons(CHAR_exclamation, makeString("c_exclamation")), cons(CHAR_quotation, makeString("c_quotation")), cons(CHAR_hash, makeString("c_hash")), cons(CHAR_dollar, makeString("c_dollar")), cons(CHAR_percent, makeString("c_percent")), cons(CHAR_ampersand, makeString("c_ampersand")), cons(CHAR_quote, makeString("c_quote")), cons(CHAR_lparen, makeString("c_lparen")), cons(CHAR_rparen, makeString("c_rparen")), cons(CHAR_asterisk, makeString("c_asterisk")), cons(CHAR_plus, makeString("c_plus")), cons(CHAR_comma, makeString("c_comma")), cons(CHAR_hyphen, makeString("c_hyphen")), cons(CHAR_period, makeString("c_period")), cons(CHAR_slash, makeString("c_slash")), cons(CHAR_0, makeString("c_0")), cons(CHAR_1, makeString("c_1")), cons(CHAR_2, makeString("c_2")), cons(CHAR_3, makeString("c_3")), cons(CHAR_4, makeString("c_4")), cons(CHAR_5, makeString("c_5")), cons(CHAR_6, makeString("c_6")), cons(CHAR_7, makeString("c_7")), cons(CHAR_8, makeString("c_8")), cons(CHAR_9, makeString("c_9")), cons(CHAR_colon, makeString("c_colon")), cons(CHAR_semicolon, makeString("c_semicolon")), cons(CHAR_less, makeString("c_less")), cons(CHAR_equal, makeString("c_equal")), cons(CHAR_greater, makeString("c_greater")), cons(CHAR_question, makeString("c_question")), cons(CHAR_at, makeString("c_at")), cons(CHAR_A, makeString("c_A")), cons(CHAR_B, makeString("c_B")), cons(CHAR_C, makeString("c_C")), cons(CHAR_D, makeString("c_D")), cons(CHAR_E, makeString("c_E")), cons(CHAR_F, makeString("c_F")), cons(CHAR_G, makeString("c_G")), cons(CHAR_H, makeString("c_H")), cons(CHAR_I, makeString("c_I")), cons(CHAR_J, makeString("c_J")), cons(CHAR_K, makeString("c_K")), cons(CHAR_L, makeString("c_L")), cons(CHAR_M, makeString("c_M")), cons(CHAR_N, makeString("c_N")), cons(CHAR_O, makeString("c_O")), cons(CHAR_P, makeString("c_P")), cons(CHAR_Q, makeString("c_Q")), cons(CHAR_R, makeString("c_R")), cons(CHAR_S, makeString("c_S")), cons(CHAR_T, makeString("c_T")), cons(CHAR_U, makeString("c_U")), cons(CHAR_V, makeString("c_V")), cons(CHAR_W, makeString("c_W")), cons(CHAR_X, makeString("c_X")), cons(CHAR_Y, makeString("c_Y")), cons(CHAR_Z, makeString("c_Z")), cons(CHAR_lbracket, makeString("c_lbracket")), cons(CHAR_backslash, makeString("c_backslash")), cons(CHAR_rbracket, makeString("c_rbracket")), cons(CHAR_caret, makeString("c_caret")), cons(CHAR_underbar, makeString("c_underbar")), cons(CHAR_backquote, makeString("c_backquote")), cons(CHAR_a, makeString("c_a")), cons(CHAR_b, makeString("c_b")), cons(CHAR_c, makeString("c_c")), cons(CHAR_d, makeString("c_d")), cons(CHAR_e, makeString("c_e")), cons(CHAR_f, makeString("c_f")), cons(CHAR_g, makeString("c_g")), cons(CHAR_h, makeString("c_h")), cons(CHAR_i, makeString("c_i")), cons(CHAR_j, makeString("c_j")), cons(CHAR_k, makeString("c_k")), cons(CHAR_l, makeString("c_l")), cons(CHAR_m, makeString("c_m")), cons(CHAR_n, makeString("c_n")), cons(CHAR_o, makeString("c_o")), cons(CHAR_p, makeString("c_p")), cons(CHAR_q, makeString("c_q")), cons(CHAR_r, makeString("c_r")), cons(CHAR_s, makeString("c_s")), cons(CHAR_t, makeString("c_t")), cons(CHAR_u, makeString("c_u")), cons(CHAR_v, makeString("c_v")), cons(CHAR_w, makeString("c_w")), cons(CHAR_x, makeString("c_x")), cons(CHAR_y, makeString("c_y")), cons(CHAR_z, makeString("c_z")), cons(CHAR_lbrace, makeString("c_lbrace")), cons(CHAR_vertical, makeString("c_vertical")), cons(CHAR_rbrace, makeString("c_rbrace")), cons(CHAR_tilde, makeString("c_tilde")), cons(CHAR_rubout, makeString("c_rubout")) });
    }

    @Override
    public void declareFunctions() {
        declare_c_name_translation_file();
    }

    @Override
    public void initializeVariables() {
        init_c_name_translation_file();
    }

    @Override
    public void runTopLevelForms() {
        setup_c_name_translation_file();
    }

    static {
    }
}

/**
 * Total time: 1160 ms
 */
